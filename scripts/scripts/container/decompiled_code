


Function: _init
----------------------------------------------
7: iVar1 = (*(code *)(undefined *)0x1442c0)();
	00005014:CALL RAX
END_OF_LINE
----------------------------------------------
8: return iVar1;
	0000501a:RET
END_OF_LINE



Function: FUN_00005020
----------------------------------------------
5: (*(code *)(undefined *)0x0)();
	00005026:JMP qword ptr [0x0003db58]
END_OF_LINE
----------------------------------------------
6: return;
	00005026:JMP qword ptr [0x0003db58]
END_OF_LINE



Function: FUN_00005030
----------------------------------------------
5: FUN_00005020();
	00005039:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005039:JMP 0x00005020
END_OF_LINE



Function: FUN_0000503f
----------------------------------------------
5: FUN_00005020();
	00005049:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005049:JMP 0x00005020
END_OF_LINE



Function: FUN_0000504f
----------------------------------------------
5: FUN_00005020();
	00005059:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005059:JMP 0x00005020
END_OF_LINE



Function: FUN_0000505f
----------------------------------------------
5: FUN_00005020();
	00005069:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005069:JMP 0x00005020
END_OF_LINE



Function: FUN_0000506f
----------------------------------------------
5: FUN_00005020();
	00005079:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005079:JMP 0x00005020
END_OF_LINE



Function: FUN_0000507f
----------------------------------------------
5: FUN_00005020();
	00005089:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005089:JMP 0x00005020
END_OF_LINE



Function: FUN_0000508f
----------------------------------------------
5: FUN_00005020();
	00005099:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005099:JMP 0x00005020
END_OF_LINE



Function: FUN_0000509f
----------------------------------------------
5: FUN_00005020();
	000050a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050af
----------------------------------------------
5: FUN_00005020();
	000050b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050bf
----------------------------------------------
5: FUN_00005020();
	000050c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050cf
----------------------------------------------
5: FUN_00005020();
	000050d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050df
----------------------------------------------
5: FUN_00005020();
	000050e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050ef
----------------------------------------------
5: FUN_00005020();
	000050f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000050f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000050ff
----------------------------------------------
5: FUN_00005020();
	00005109:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005109:JMP 0x00005020
END_OF_LINE



Function: FUN_0000510f
----------------------------------------------
5: FUN_00005020();
	00005119:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005119:JMP 0x00005020
END_OF_LINE



Function: FUN_0000511f
----------------------------------------------
5: FUN_00005020();
	00005129:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005129:JMP 0x00005020
END_OF_LINE



Function: FUN_0000512f
----------------------------------------------
5: FUN_00005020();
	00005139:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005139:JMP 0x00005020
END_OF_LINE



Function: FUN_0000513f
----------------------------------------------
5: FUN_00005020();
	00005149:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005149:JMP 0x00005020
END_OF_LINE



Function: FUN_0000514f
----------------------------------------------
5: FUN_00005020();
	00005159:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005159:JMP 0x00005020
END_OF_LINE



Function: FUN_0000515f
----------------------------------------------
5: FUN_00005020();
	00005169:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005169:JMP 0x00005020
END_OF_LINE



Function: FUN_0000516f
----------------------------------------------
5: FUN_00005020();
	00005179:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005179:JMP 0x00005020
END_OF_LINE



Function: FUN_0000517f
----------------------------------------------
5: FUN_00005020();
	00005189:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005189:JMP 0x00005020
END_OF_LINE



Function: FUN_0000518f
----------------------------------------------
5: FUN_00005020();
	00005199:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005199:JMP 0x00005020
END_OF_LINE



Function: FUN_0000519f
----------------------------------------------
5: FUN_00005020();
	000051a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051af
----------------------------------------------
5: FUN_00005020();
	000051b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051bf
----------------------------------------------
5: FUN_00005020();
	000051c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051cf
----------------------------------------------
5: FUN_00005020();
	000051d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051df
----------------------------------------------
5: FUN_00005020();
	000051e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051ef
----------------------------------------------
5: FUN_00005020();
	000051f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000051f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000051ff
----------------------------------------------
5: FUN_00005020();
	00005209:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005209:JMP 0x00005020
END_OF_LINE



Function: FUN_0000520f
----------------------------------------------
5: FUN_00005020();
	00005219:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005219:JMP 0x00005020
END_OF_LINE



Function: FUN_0000521f
----------------------------------------------
5: FUN_00005020();
	00005229:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005229:JMP 0x00005020
END_OF_LINE



Function: FUN_0000522f
----------------------------------------------
5: FUN_00005020();
	00005239:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005239:JMP 0x00005020
END_OF_LINE



Function: FUN_0000523f
----------------------------------------------
5: FUN_00005020();
	00005249:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005249:JMP 0x00005020
END_OF_LINE



Function: FUN_0000524f
----------------------------------------------
5: FUN_00005020();
	00005259:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005259:JMP 0x00005020
END_OF_LINE



Function: FUN_0000525f
----------------------------------------------
5: FUN_00005020();
	00005269:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005269:JMP 0x00005020
END_OF_LINE



Function: FUN_0000526f
----------------------------------------------
5: FUN_00005020();
	00005279:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005279:JMP 0x00005020
END_OF_LINE



Function: FUN_0000527f
----------------------------------------------
5: FUN_00005020();
	00005289:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005289:JMP 0x00005020
END_OF_LINE



Function: FUN_0000528f
----------------------------------------------
5: FUN_00005020();
	00005299:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005299:JMP 0x00005020
END_OF_LINE



Function: FUN_0000529f
----------------------------------------------
5: FUN_00005020();
	000052a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052af
----------------------------------------------
5: FUN_00005020();
	000052b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052bf
----------------------------------------------
5: FUN_00005020();
	000052c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052cf
----------------------------------------------
5: FUN_00005020();
	000052d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052df
----------------------------------------------
5: FUN_00005020();
	000052e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052ef
----------------------------------------------
5: FUN_00005020();
	000052f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000052f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000052ff
----------------------------------------------
5: FUN_00005020();
	00005309:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005309:JMP 0x00005020
END_OF_LINE



Function: FUN_0000530f
----------------------------------------------
5: FUN_00005020();
	00005319:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005319:JMP 0x00005020
END_OF_LINE



Function: FUN_0000531f
----------------------------------------------
5: FUN_00005020();
	00005329:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005329:JMP 0x00005020
END_OF_LINE



Function: FUN_0000532f
----------------------------------------------
5: FUN_00005020();
	00005339:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005339:JMP 0x00005020
END_OF_LINE



Function: FUN_0000533f
----------------------------------------------
5: FUN_00005020();
	00005349:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005349:JMP 0x00005020
END_OF_LINE



Function: FUN_0000534f
----------------------------------------------
5: FUN_00005020();
	00005359:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005359:JMP 0x00005020
END_OF_LINE



Function: FUN_0000535f
----------------------------------------------
5: FUN_00005020();
	00005369:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005369:JMP 0x00005020
END_OF_LINE



Function: FUN_0000536f
----------------------------------------------
5: FUN_00005020();
	00005379:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005379:JMP 0x00005020
END_OF_LINE



Function: FUN_0000537f
----------------------------------------------
5: FUN_00005020();
	00005389:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005389:JMP 0x00005020
END_OF_LINE



Function: FUN_0000538f
----------------------------------------------
5: FUN_00005020();
	00005399:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005399:JMP 0x00005020
END_OF_LINE



Function: FUN_0000539f
----------------------------------------------
5: FUN_00005020();
	000053a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053af
----------------------------------------------
5: FUN_00005020();
	000053b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053bf
----------------------------------------------
5: FUN_00005020();
	000053c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053cf
----------------------------------------------
5: FUN_00005020();
	000053d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053df
----------------------------------------------
5: FUN_00005020();
	000053e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053ef
----------------------------------------------
5: FUN_00005020();
	000053f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000053f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000053ff
----------------------------------------------
5: FUN_00005020();
	00005409:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005409:JMP 0x00005020
END_OF_LINE



Function: FUN_0000540f
----------------------------------------------
5: FUN_00005020();
	00005419:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005419:JMP 0x00005020
END_OF_LINE



Function: FUN_0000541f
----------------------------------------------
5: FUN_00005020();
	00005429:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005429:JMP 0x00005020
END_OF_LINE



Function: FUN_0000542f
----------------------------------------------
5: FUN_00005020();
	00005439:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005439:JMP 0x00005020
END_OF_LINE



Function: FUN_0000543f
----------------------------------------------
5: FUN_00005020();
	00005449:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005449:JMP 0x00005020
END_OF_LINE



Function: FUN_0000544f
----------------------------------------------
5: FUN_00005020();
	00005459:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005459:JMP 0x00005020
END_OF_LINE



Function: FUN_0000545f
----------------------------------------------
5: FUN_00005020();
	00005469:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005469:JMP 0x00005020
END_OF_LINE



Function: FUN_0000546f
----------------------------------------------
5: FUN_00005020();
	00005479:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005479:JMP 0x00005020
END_OF_LINE



Function: FUN_0000547f
----------------------------------------------
5: FUN_00005020();
	00005489:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005489:JMP 0x00005020
END_OF_LINE



Function: FUN_0000548f
----------------------------------------------
5: FUN_00005020();
	00005499:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005499:JMP 0x00005020
END_OF_LINE



Function: FUN_0000549f
----------------------------------------------
5: FUN_00005020();
	000054a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054af
----------------------------------------------
5: FUN_00005020();
	000054b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054bf
----------------------------------------------
5: FUN_00005020();
	000054c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054cf
----------------------------------------------
5: FUN_00005020();
	000054d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054df
----------------------------------------------
5: FUN_00005020();
	000054e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054ef
----------------------------------------------
5: FUN_00005020();
	000054f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000054f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000054ff
----------------------------------------------
5: FUN_00005020();
	00005509:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005509:JMP 0x00005020
END_OF_LINE



Function: FUN_0000550f
----------------------------------------------
5: FUN_00005020();
	00005519:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005519:JMP 0x00005020
END_OF_LINE



Function: FUN_0000551f
----------------------------------------------
5: FUN_00005020();
	00005529:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005529:JMP 0x00005020
END_OF_LINE



Function: FUN_0000552f
----------------------------------------------
5: FUN_00005020();
	00005539:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005539:JMP 0x00005020
END_OF_LINE



Function: FUN_0000553f
----------------------------------------------
5: FUN_00005020();
	00005549:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005549:JMP 0x00005020
END_OF_LINE



Function: FUN_0000554f
----------------------------------------------
5: FUN_00005020();
	00005559:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005559:JMP 0x00005020
END_OF_LINE



Function: FUN_0000555f
----------------------------------------------
5: FUN_00005020();
	00005569:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005569:JMP 0x00005020
END_OF_LINE



Function: FUN_0000556f
----------------------------------------------
5: FUN_00005020();
	00005579:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005579:JMP 0x00005020
END_OF_LINE



Function: FUN_0000557f
----------------------------------------------
5: FUN_00005020();
	00005589:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005589:JMP 0x00005020
END_OF_LINE



Function: FUN_0000558f
----------------------------------------------
5: FUN_00005020();
	00005599:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005599:JMP 0x00005020
END_OF_LINE



Function: FUN_0000559f
----------------------------------------------
5: FUN_00005020();
	000055a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055af
----------------------------------------------
5: FUN_00005020();
	000055b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055bf
----------------------------------------------
5: FUN_00005020();
	000055c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055cf
----------------------------------------------
5: FUN_00005020();
	000055d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055df
----------------------------------------------
5: FUN_00005020();
	000055e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055ef
----------------------------------------------
5: FUN_00005020();
	000055f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000055f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000055ff
----------------------------------------------
5: FUN_00005020();
	00005609:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005609:JMP 0x00005020
END_OF_LINE



Function: FUN_0000560f
----------------------------------------------
5: FUN_00005020();
	00005619:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005619:JMP 0x00005020
END_OF_LINE



Function: FUN_0000561f
----------------------------------------------
5: FUN_00005020();
	00005629:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005629:JMP 0x00005020
END_OF_LINE



Function: FUN_0000562f
----------------------------------------------
5: FUN_00005020();
	00005639:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005639:JMP 0x00005020
END_OF_LINE



Function: FUN_0000563f
----------------------------------------------
5: FUN_00005020();
	00005649:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005649:JMP 0x00005020
END_OF_LINE



Function: FUN_0000564f
----------------------------------------------
5: FUN_00005020();
	00005659:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005659:JMP 0x00005020
END_OF_LINE



Function: FUN_0000565f
----------------------------------------------
5: FUN_00005020();
	00005669:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005669:JMP 0x00005020
END_OF_LINE



Function: FUN_0000566f
----------------------------------------------
5: FUN_00005020();
	00005679:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005679:JMP 0x00005020
END_OF_LINE



Function: FUN_0000567f
----------------------------------------------
5: FUN_00005020();
	00005689:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005689:JMP 0x00005020
END_OF_LINE



Function: FUN_0000568f
----------------------------------------------
5: FUN_00005020();
	00005699:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005699:JMP 0x00005020
END_OF_LINE



Function: FUN_0000569f
----------------------------------------------
5: FUN_00005020();
	000056a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056af
----------------------------------------------
5: FUN_00005020();
	000056b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056bf
----------------------------------------------
5: FUN_00005020();
	000056c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056cf
----------------------------------------------
5: FUN_00005020();
	000056d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056df
----------------------------------------------
5: FUN_00005020();
	000056e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056ef
----------------------------------------------
5: FUN_00005020();
	000056f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000056f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000056ff
----------------------------------------------
5: FUN_00005020();
	00005709:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005709:JMP 0x00005020
END_OF_LINE



Function: FUN_0000570f
----------------------------------------------
5: FUN_00005020();
	00005719:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005719:JMP 0x00005020
END_OF_LINE



Function: FUN_0000571f
----------------------------------------------
5: FUN_00005020();
	00005729:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005729:JMP 0x00005020
END_OF_LINE



Function: FUN_0000572f
----------------------------------------------
5: FUN_00005020();
	00005739:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005739:JMP 0x00005020
END_OF_LINE



Function: FUN_0000573f
----------------------------------------------
5: FUN_00005020();
	00005749:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005749:JMP 0x00005020
END_OF_LINE



Function: FUN_0000574f
----------------------------------------------
5: FUN_00005020();
	00005759:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005759:JMP 0x00005020
END_OF_LINE



Function: FUN_0000575f
----------------------------------------------
5: FUN_00005020();
	00005769:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005769:JMP 0x00005020
END_OF_LINE



Function: FUN_0000576f
----------------------------------------------
5: FUN_00005020();
	00005779:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005779:JMP 0x00005020
END_OF_LINE



Function: FUN_0000577f
----------------------------------------------
5: FUN_00005020();
	00005789:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005789:JMP 0x00005020
END_OF_LINE



Function: FUN_0000578f
----------------------------------------------
5: FUN_00005020();
	00005799:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005799:JMP 0x00005020
END_OF_LINE



Function: FUN_0000579f
----------------------------------------------
5: FUN_00005020();
	000057a9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057a9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057af
----------------------------------------------
5: FUN_00005020();
	000057b9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057b9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057bf
----------------------------------------------
5: FUN_00005020();
	000057c9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057c9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057cf
----------------------------------------------
5: FUN_00005020();
	000057d9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057d9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057df
----------------------------------------------
5: FUN_00005020();
	000057e9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057e9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057ef
----------------------------------------------
5: FUN_00005020();
	000057f9:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	000057f9:JMP 0x00005020
END_OF_LINE



Function: FUN_000057ff
----------------------------------------------
5: FUN_00005020();
	00005809:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005809:JMP 0x00005020
END_OF_LINE



Function: FUN_0000580f
----------------------------------------------
5: FUN_00005020();
	00005819:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005819:JMP 0x00005020
END_OF_LINE



Function: FUN_0000581f
----------------------------------------------
5: FUN_00005020();
	00005829:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005829:JMP 0x00005020
END_OF_LINE



Function: FUN_0000582f
----------------------------------------------
5: FUN_00005020();
	00005839:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005839:JMP 0x00005020
END_OF_LINE



Function: FUN_0000583f
----------------------------------------------
5: FUN_00005020();
	00005849:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005849:JMP 0x00005020
END_OF_LINE



Function: FUN_0000584f
----------------------------------------------
5: FUN_00005020();
	00005859:JMP 0x00005020
END_OF_LINE
----------------------------------------------
6: return;
	00005859:JMP 0x00005020
END_OF_LINE



Function: FUN_0000585f
----------------------------------------------
5: (*(code *)(undefined *)0x1444a0)();
	00005864:JMP qword ptr [0x0003df78]
END_OF_LINE
----------------------------------------------
6: return;
	00005864:JMP qword ptr [0x0003df78]
END_OF_LINE



Function: free
----------------------------------------------
7: (*(code *)(undefined *)0x1444a0)();
	00005864:JMP qword ptr [0x0003df78]
END_OF_LINE
----------------------------------------------
8: return;
	00005864:JMP qword ptr [0x0003df78]
END_OF_LINE



Function: __cxa_finalize
----------------------------------------------
5: (*(code *)(undefined *)0x144498)();
	00005874:JMP qword ptr [0x0003dfd8]
END_OF_LINE
----------------------------------------------
6: return;
	00005874:JMP qword ptr [0x0003dfd8]
END_OF_LINE



Function: getenv
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x144000)();
	00005884:JMP qword ptr [0x0003db60]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005884:JMP qword ptr [0x0003db60]
END_OF_LINE



Function: sigprocmask
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144010)();
	00005894:JMP qword ptr [0x0003db68]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005894:JMP qword ptr [0x0003db68]
END_OF_LINE



Function: raise
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144018)();
	000058a4:JMP qword ptr [0x0003db70]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000058a4:JMP qword ptr [0x0003db70]
END_OF_LINE



Function: posix_spawnattr_setsigmask
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144020)();
	000058b4:JMP qword ptr [0x0003db78]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000058b4:JMP qword ptr [0x0003db78]
END_OF_LINE



Function: utimensat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144028)();
	000058c4:JMP qword ptr [0x0003db80]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000058c4:JMP qword ptr [0x0003db80]
END_OF_LINE



Function: putchar
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144030)();
	000058d4:JMP qword ptr [0x0003db88]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000058d4:JMP qword ptr [0x0003db88]
END_OF_LINE



Function: posix_spawn_file_actions_init
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144038)();
	000058e4:JMP qword ptr [0x0003db90]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000058e4:JMP qword ptr [0x0003db90]
END_OF_LINE



Function: abort
----------------------------------------------
7: (*(code *)(undefined *)0x144048)();
	000058f4:JMP qword ptr [0x0003db98]
END_OF_LINE
----------------------------------------------
8: return;
	000058f4:JMP qword ptr [0x0003db98]
END_OF_LINE



Function: __errno_location
----------------------------------------------
9: piVar1 = (int *)(*(code *)(undefined *)0x144050)();
	00005904:JMP qword ptr [0x0003dba0]
END_OF_LINE
----------------------------------------------
10: return piVar1;
	00005904:JMP qword ptr [0x0003dba0]
END_OF_LINE



Function: unlink
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144058)();
	00005914:JMP qword ptr [0x0003dba8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005914:JMP qword ptr [0x0003dba8]
END_OF_LINE



Function: strncmp
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144060)();
	00005924:JMP qword ptr [0x0003dbb0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005924:JMP qword ptr [0x0003dbb0]
END_OF_LINE



Function: localtime_r
----------------------------------------------
9: ptVar1 = (tm *)(*(code *)(undefined *)0x144078)();
	00005934:JMP qword ptr [0x0003dbb8]
END_OF_LINE
----------------------------------------------
10: return ptVar1;
	00005934:JMP qword ptr [0x0003dbb8]
END_OF_LINE



Function: strcpy
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x144080)();
	00005944:JMP qword ptr [0x0003dbc0]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005944:JMP qword ptr [0x0003dbc0]
END_OF_LINE



Function: __isoc99_fscanf
----------------------------------------------
5: (*(code *)(undefined *)0x144088)();
	00005954:JMP qword ptr [0x0003dbc8]
END_OF_LINE
----------------------------------------------
6: return;
	00005954:JMP qword ptr [0x0003dbc8]
END_OF_LINE



Function: mkdir
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144090)();
	00005964:JMP qword ptr [0x0003dbd0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005964:JMP qword ptr [0x0003dbd0]
END_OF_LINE



Function: toupper
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144098)();
	00005974:JMP qword ptr [0x0003dbd8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005974:JMP qword ptr [0x0003dbd8]
END_OF_LINE



Function: unlinkat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440a0)();
	00005984:JMP qword ptr [0x0003dbe0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005984:JMP qword ptr [0x0003dbe0]
END_OF_LINE



Function: puts
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440a8)();
	00005994:JMP qword ptr [0x0003dbe8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005994:JMP qword ptr [0x0003dbe8]
END_OF_LINE



Function: ferror
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440b0)();
	000059a4:JMP qword ptr [0x0003dbf0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000059a4:JMP qword ptr [0x0003dbf0]
END_OF_LINE



Function: getc_unlocked
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440b8)();
	000059b4:JMP qword ptr [0x0003dbf8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000059b4:JMP qword ptr [0x0003dbf8]
END_OF_LINE



Function: isatty
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440c0)();
	000059c4:JMP qword ptr [0x0003dc00]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000059c4:JMP qword ptr [0x0003dc00]
END_OF_LINE



Function: sigaction
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440c8)();
	000059d4:JMP qword ptr [0x0003dc08]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000059d4:JMP qword ptr [0x0003dc08]
END_OF_LINE



Function: fread
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x1440d0)();
	000059e4:JMP qword ptr [0x0003dc10]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	000059e4:JMP qword ptr [0x0003dc10]
END_OF_LINE



Function: faccessat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440e0)();
	000059f4:JMP qword ptr [0x0003dc18]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000059f4:JMP qword ptr [0x0003dc18]
END_OF_LINE



Function: readlink
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x1440e8)();
	00005a04:JMP qword ptr [0x0003dc20]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005a04:JMP qword ptr [0x0003dc20]
END_OF_LINE



Function: fcntl
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440f0)();
	00005a14:JMP qword ptr [0x0003dc28]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a14:JMP qword ptr [0x0003dc28]
END_OF_LINE



Function: clock_gettime
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1440f8)();
	00005a24:JMP qword ptr [0x0003dc30]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a24:JMP qword ptr [0x0003dc30]
END_OF_LINE



Function: setenv
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144100)();
	00005a34:JMP qword ptr [0x0003dc38]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a34:JMP qword ptr [0x0003dc38]
END_OF_LINE



Function: posix_spawnattr_destroy
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144108)();
	00005a44:JMP qword ptr [0x0003dc40]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a44:JMP qword ptr [0x0003dc40]
END_OF_LINE



Function: write
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144110)();
	00005a54:JMP qword ptr [0x0003dc48]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005a54:JMP qword ptr [0x0003dc48]
END_OF_LINE



Function: getpid
----------------------------------------------
9: _Var1 = (*(code *)(undefined *)0x144118)();
	00005a64:JMP qword ptr [0x0003dc50]
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00005a64:JMP qword ptr [0x0003dc50]
END_OF_LINE



Function: pathconf
----------------------------------------------
9: lVar1 = (*(code *)(undefined *)0x144120)();
	00005a74:JMP qword ptr [0x0003dc58]
END_OF_LINE
----------------------------------------------
10: return lVar1;
	00005a74:JMP qword ptr [0x0003dc58]
END_OF_LINE



Function: fclose
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144128)();
	00005a84:JMP qword ptr [0x0003dc60]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a84:JMP qword ptr [0x0003dc60]
END_OF_LINE



Function: posix_spawn_file_actions_destroy
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144130)();
	00005a94:JMP qword ptr [0x0003dc68]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005a94:JMP qword ptr [0x0003dc68]
END_OF_LINE



Function: opendir
----------------------------------------------
9: pDVar1 = (DIR *)(*(code *)(undefined *)0x144140)();
	00005aa4:JMP qword ptr [0x0003dc70]
END_OF_LINE
----------------------------------------------
10: return pDVar1;
	00005aa4:JMP qword ptr [0x0003dc70]
END_OF_LINE



Function: rmdir
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144148)();
	00005ab4:JMP qword ptr [0x0003dc78]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005ab4:JMP qword ptr [0x0003dc78]
END_OF_LINE



Function: __ctype_get_mb_cur_max
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144150)();
	00005ac4:JMP qword ptr [0x0003dc80]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005ac4:JMP qword ptr [0x0003dc80]
END_OF_LINE



Function: strlen
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144158)();
	00005ad4:JMP qword ptr [0x0003dc88]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005ad4:JMP qword ptr [0x0003dc88]
END_OF_LINE



Function: openat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144160)();
	00005ae4:JMP qword ptr [0x0003dc90]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005ae4:JMP qword ptr [0x0003dc90]
END_OF_LINE



Function: chdir
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144168)();
	00005af4:JMP qword ptr [0x0003dc98]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005af4:JMP qword ptr [0x0003dc98]
END_OF_LINE



Function: __stack_chk_fail
----------------------------------------------
5: (*(code *)(undefined *)0x144170)();
	00005b04:JMP qword ptr [0x0003dca0]
END_OF_LINE
----------------------------------------------
6: return;
	00005b04:JMP qword ptr [0x0003dca0]
END_OF_LINE



Function: getopt_long
----------------------------------------------
5: (*(code *)(undefined *)0x144178)();
	00005b14:JMP qword ptr [0x0003dca8]
END_OF_LINE
----------------------------------------------
6: return;
	00005b14:JMP qword ptr [0x0003dca8]
END_OF_LINE



Function: setbuf
----------------------------------------------
7: (*(code *)(undefined *)0x144180)();
	00005b24:JMP qword ptr [0x0003dcb0]
END_OF_LINE
----------------------------------------------
8: return;
	00005b24:JMP qword ptr [0x0003dcb0]
END_OF_LINE



Function: mbrtowc
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144188)();
	00005b34:JMP qword ptr [0x0003dcb8]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005b34:JMP qword ptr [0x0003dcb8]
END_OF_LINE



Function: system
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144190)();
	00005b44:JMP qword ptr [0x0003dcc0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005b44:JMP qword ptr [0x0003dcc0]
END_OF_LINE



Function: dup2
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144198)();
	00005b54:JMP qword ptr [0x0003dcc8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005b54:JMP qword ptr [0x0003dcc8]
END_OF_LINE



Function: strchr
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x1441a0)();
	00005b64:JMP qword ptr [0x0003dcd0]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005b64:JMP qword ptr [0x0003dcd0]
END_OF_LINE



Function: printf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441a8)();
	00005b74:JMP qword ptr [0x0003dcd8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005b74:JMP qword ptr [0x0003dcd8]
END_OF_LINE



Function: symlink
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441b0)();
	00005b84:JMP qword ptr [0x0003dce0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005b84:JMP qword ptr [0x0003dce0]
END_OF_LINE



Function: snprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441b8)();
	00005b94:JMP qword ptr [0x0003dce8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005b94:JMP qword ptr [0x0003dce8]
END_OF_LINE



Function: strrchr
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x1441c0)();
	00005ba4:JMP qword ptr [0x0003dcf0]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005ba4:JMP qword ptr [0x0003dcf0]
END_OF_LINE



Function: gmtime_r
----------------------------------------------
9: ptVar1 = (tm *)(*(code *)(undefined *)0x1441c8)();
	00005bb4:JMP qword ptr [0x0003dcf8]
END_OF_LINE
----------------------------------------------
10: return ptVar1;
	00005bb4:JMP qword ptr [0x0003dcf8]
END_OF_LINE



Function: dup
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441d0)();
	00005bc4:JMP qword ptr [0x0003dd00]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005bc4:JMP qword ptr [0x0003dd00]
END_OF_LINE



Function: lseek
----------------------------------------------
9: _Var1 = (*(code *)(undefined *)0x1441d8)();
	00005bd4:JMP qword ptr [0x0003dd08]
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00005bd4:JMP qword ptr [0x0003dd08]
END_OF_LINE



Function: gettimeofday
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441e0)();
	00005be4:JMP qword ptr [0x0003dd10]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005be4:JMP qword ptr [0x0003dd10]
END_OF_LINE



Function: __assert_fail
----------------------------------------------
7: (*(code *)(undefined *)0x1441e8)();
	00005bf4:JMP qword ptr [0x0003dd18]
END_OF_LINE
----------------------------------------------
8: return;
	00005bf4:JMP qword ptr [0x0003dd18]
END_OF_LINE



Function: fputs
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1441f0)();
	00005c04:JMP qword ptr [0x0003dd20]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005c04:JMP qword ptr [0x0003dd20]
END_OF_LINE



Function: memset
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x1441f8)();
	00005c14:JMP qword ptr [0x0003dd28]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005c14:JMP qword ptr [0x0003dd28]
END_OF_LINE



Function: geteuid
----------------------------------------------
9: _Var1 = (*(code *)(undefined *)0x144200)();
	00005c24:JMP qword ptr [0x0003dd30]
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00005c24:JMP qword ptr [0x0003dd30]
END_OF_LINE



Function: close
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144208)();
	00005c34:JMP qword ptr [0x0003dd38]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005c34:JMP qword ptr [0x0003dd38]
END_OF_LINE



Function: rewinddir
----------------------------------------------
7: (*(code *)(undefined *)0x144210)();
	00005c44:JMP qword ptr [0x0003dd40]
END_OF_LINE
----------------------------------------------
8: return;
	00005c44:JMP qword ptr [0x0003dd40]
END_OF_LINE



Function: closedir
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144218)();
	00005c54:JMP qword ptr [0x0003dd48]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005c54:JMP qword ptr [0x0003dd48]
END_OF_LINE



Function: fputc
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144220)();
	00005c64:JMP qword ptr [0x0003dd50]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005c64:JMP qword ptr [0x0003dd50]
END_OF_LINE



Function: memchr
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x144228)();
	00005c74:JMP qword ptr [0x0003dd58]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005c74:JMP qword ptr [0x0003dd58]
END_OF_LINE



Function: read
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144230)();
	00005c84:JMP qword ptr [0x0003dd60]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005c84:JMP qword ptr [0x0003dd60]
END_OF_LINE



Function: lstat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144238)();
	00005c94:JMP qword ptr [0x0003dd68]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005c94:JMP qword ptr [0x0003dd68]
END_OF_LINE



Function: strndup
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x144240)();
	00005ca4:JMP qword ptr [0x0003dd70]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005ca4:JMP qword ptr [0x0003dd70]
END_OF_LINE



Function: memcmp
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144248)();
	00005cb4:JMP qword ptr [0x0003dd78]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005cb4:JMP qword ptr [0x0003dd78]
END_OF_LINE



Function: posix_spawnattr_init
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144258)();
	00005cc4:JMP qword ptr [0x0003dd80]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005cc4:JMP qword ptr [0x0003dd80]
END_OF_LINE



Function: calloc
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x144260)();
	00005cd4:JMP qword ptr [0x0003dd88]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005cd4:JMP qword ptr [0x0003dd88]
END_OF_LINE



Function: strcmp
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144268)();
	00005ce4:JMP qword ptr [0x0003dd90]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005ce4:JMP qword ptr [0x0003dd90]
END_OF_LINE



Function: putc
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144270)();
	00005cf4:JMP qword ptr [0x0003dd98]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005cf4:JMP qword ptr [0x0003dd98]
END_OF_LINE



Function: signal
----------------------------------------------
9: p_Var1 = (__sighandler_t)(*(code *)(undefined *)0x144278)();
	00005d04:JMP qword ptr [0x0003dda0]
END_OF_LINE
----------------------------------------------
10: return p_Var1;
	00005d04:JMP qword ptr [0x0003dda0]
END_OF_LINE



Function: readlinkat
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144280)();
	00005d14:JMP qword ptr [0x0003dda8]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005d14:JMP qword ptr [0x0003dda8]
END_OF_LINE



Function: dirfd
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144288)();
	00005d24:JMP qword ptr [0x0003ddb0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005d24:JMP qword ptr [0x0003ddb0]
END_OF_LINE



Function: fprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144298)();
	00005d34:JMP qword ptr [0x0003ddb8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005d34:JMP qword ptr [0x0003ddb8]
END_OF_LINE



Function: syscall
----------------------------------------------
9: lVar1 = (*(code *)(undefined *)0x1442a0)();
	00005d44:JMP qword ptr [0x0003ddc0]
END_OF_LINE
----------------------------------------------
10: return lVar1;
	00005d44:JMP qword ptr [0x0003ddc0]
END_OF_LINE



Function: sigemptyset
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1442a8)();
	00005d54:JMP qword ptr [0x0003ddc8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005d54:JMP qword ptr [0x0003ddc8]
END_OF_LINE



Function: mkdirat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1442b0)();
	00005d64:JMP qword ptr [0x0003ddd0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005d64:JMP qword ptr [0x0003ddd0]
END_OF_LINE



Function: ftell
----------------------------------------------
9: lVar1 = (*(code *)(undefined *)0x1442b8)();
	00005d74:JMP qword ptr [0x0003ddd8]
END_OF_LINE
----------------------------------------------
10: return lVar1;
	00005d74:JMP qword ptr [0x0003ddd8]
END_OF_LINE



Function: stat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1442c8)();
	00005d84:JMP qword ptr [0x0003dde0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005d84:JMP qword ptr [0x0003dde0]
END_OF_LINE



Function: memcpy
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x1442d8)();
	00005d94:JMP qword ptr [0x0003dde8]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005d94:JMP qword ptr [0x0003dde8]
END_OF_LINE



Function: tzset
----------------------------------------------
7: (*(code *)(undefined *)0x1442e8)();
	00005da4:JMP qword ptr [0x0003ddf0]
END_OF_LINE
----------------------------------------------
8: return;
	00005da4:JMP qword ptr [0x0003ddf0]
END_OF_LINE



Function: kill
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1442f0)();
	00005db4:JMP qword ptr [0x0003ddf8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005db4:JMP qword ptr [0x0003ddf8]
END_OF_LINE



Function: fileno
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1442f8)();
	00005dc4:JMP qword ptr [0x0003de00]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005dc4:JMP qword ptr [0x0003de00]
END_OF_LINE



Function: readdir
----------------------------------------------
9: pdVar1 = (dirent *)(*(code *)(undefined *)0x144300)();
	00005dd4:JMP qword ptr [0x0003de08]
END_OF_LINE
----------------------------------------------
10: return pdVar1;
	00005dd4:JMP qword ptr [0x0003de08]
END_OF_LINE



Function: tolower
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144308)();
	00005de4:JMP qword ptr [0x0003de10]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005de4:JMP qword ptr [0x0003de10]
END_OF_LINE



Function: malloc
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x144310)();
	00005df4:JMP qword ptr [0x0003de18]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005df4:JMP qword ptr [0x0003de18]
END_OF_LINE



Function: fflush
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144318)();
	00005e04:JMP qword ptr [0x0003de20]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005e04:JMP qword ptr [0x0003de20]
END_OF_LINE



Function: fchmodat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144320)();
	00005e14:JMP qword ptr [0x0003de28]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005e14:JMP qword ptr [0x0003de28]
END_OF_LINE



Function: nl_langinfo
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x144328)();
	00005e24:JMP qword ptr [0x0003de30]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005e24:JMP qword ptr [0x0003de30]
END_OF_LINE



Function: ungetc
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144330)();
	00005e34:JMP qword ptr [0x0003de38]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005e34:JMP qword ptr [0x0003de38]
END_OF_LINE



Function: lchown
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144338)();
	00005e44:JMP qword ptr [0x0003de40]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005e44:JMP qword ptr [0x0003de40]
END_OF_LINE



Function: getegid
----------------------------------------------
9: _Var1 = (*(code *)(undefined *)0x144340)();
	00005e54:JMP qword ptr [0x0003de48]
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00005e54:JMP qword ptr [0x0003de48]
END_OF_LINE



Function: mktime
----------------------------------------------
9: tVar1 = (*(code *)(undefined *)0x144348)();
	00005e64:JMP qword ptr [0x0003de50]
END_OF_LINE
----------------------------------------------
10: return tVar1;
	00005e64:JMP qword ptr [0x0003de50]
END_OF_LINE



Function: posix_spawn_file_actions_addopen
----------------------------------------------
11: iVar1 = (*(code *)(undefined *)0x144350)();
	00005e74:JMP qword ptr [0x0003de58]
END_OF_LINE
----------------------------------------------
12: return iVar1;
	00005e74:JMP qword ptr [0x0003de58]
END_OF_LINE



Function: posix_spawnp
----------------------------------------------
10: iVar1 = (*(code *)(undefined *)0x144358)();
	00005e84:JMP qword ptr [0x0003de60]
END_OF_LINE
----------------------------------------------
11: return iVar1;
	00005e84:JMP qword ptr [0x0003de60]
END_OF_LINE



Function: fseek
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144360)();
	00005e94:JMP qword ptr [0x0003de68]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005e94:JMP qword ptr [0x0003de68]
END_OF_LINE



Function: realloc
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x144368)();
	00005ea4:JMP qword ptr [0x0003de70]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005ea4:JMP qword ptr [0x0003de70]
END_OF_LINE



Function: fdopen
----------------------------------------------
9: pFVar1 = (FILE *)(*(code *)(undefined *)0x144370)();
	00005eb4:JMP qword ptr [0x0003de78]
END_OF_LINE
----------------------------------------------
10: return pFVar1;
	00005eb4:JMP qword ptr [0x0003de78]
END_OF_LINE



Function: setlocale
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x144378)();
	00005ec4:JMP qword ptr [0x0003de80]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00005ec4:JMP qword ptr [0x0003de80]
END_OF_LINE



Function: timegm
----------------------------------------------
9: tVar1 = (*(code *)(undefined *)0x144380)();
	00005ed4:JMP qword ptr [0x0003de88]
END_OF_LINE
----------------------------------------------
10: return tVar1;
	00005ed4:JMP qword ptr [0x0003de88]
END_OF_LINE



Function: chmod
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144388)();
	00005ee4:JMP qword ptr [0x0003de90]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005ee4:JMP qword ptr [0x0003de90]
END_OF_LINE



Function: strftime
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144390)();
	00005ef4:JMP qword ptr [0x0003de98]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00005ef4:JMP qword ptr [0x0003de98]
END_OF_LINE



Function: memmove
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x144398)();
	00005f04:JMP qword ptr [0x0003dea0]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00005f04:JMP qword ptr [0x0003dea0]
END_OF_LINE



Function: error
----------------------------------------------
5: (*(code *)(undefined *)0x1443a0)();
	00005f14:JMP qword ptr [0x0003dea8]
END_OF_LINE
----------------------------------------------
6: return;
	00005f14:JMP qword ptr [0x0003dea8]
END_OF_LINE



Function: waitpid
----------------------------------------------
9: _Var1 = (*(code *)(undefined *)0x1443b0)();
	00005f24:JMP qword ptr [0x0003deb0]
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00005f24:JMP qword ptr [0x0003deb0]
END_OF_LINE



Function: open
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1443b8)();
	00005f34:JMP qword ptr [0x0003deb8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005f34:JMP qword ptr [0x0003deb8]
END_OF_LINE



Function: access
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1443c0)();
	00005f44:JMP qword ptr [0x0003dec0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005f44:JMP qword ptr [0x0003dec0]
END_OF_LINE



Function: fopen
----------------------------------------------
9: pFVar1 = (FILE *)(*(code *)(undefined *)0x1443c8)();
	00005f54:JMP qword ptr [0x0003dec8]
END_OF_LINE
----------------------------------------------
10: return pFVar1;
	00005f54:JMP qword ptr [0x0003dec8]
END_OF_LINE



Function: perror
----------------------------------------------
7: (*(code *)(undefined *)0x1443d0)();
	00005f64:JMP qword ptr [0x0003ded0]
END_OF_LINE
----------------------------------------------
8: return;
	00005f64:JMP qword ptr [0x0003ded0]
END_OF_LINE



Function: rename
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1443d8)();
	00005f74:JMP qword ptr [0x0003ded8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005f74:JMP qword ptr [0x0003ded8]
END_OF_LINE



Function: fdopendir
----------------------------------------------
9: pDVar1 = (DIR *)(*(code *)(undefined *)0x1443e0)();
	00005f84:JMP qword ptr [0x0003dee0]
END_OF_LINE
----------------------------------------------
10: return pDVar1;
	00005f84:JMP qword ptr [0x0003dee0]
END_OF_LINE



Function: vfprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1443e8)();
	00005f94:JMP qword ptr [0x0003dee8]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005f94:JMP qword ptr [0x0003dee8]
END_OF_LINE



Function: unsetenv
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x1443f0)();
	00005fa4:JMP qword ptr [0x0003def0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005fa4:JMP qword ptr [0x0003def0]
END_OF_LINE



Function: __cxa_atexit
----------------------------------------------
5: (*(code *)(undefined *)0x1443f8)();
	00005fb4:JMP qword ptr [0x0003def8]
END_OF_LINE
----------------------------------------------
6: return;
	00005fb4:JMP qword ptr [0x0003def8]
END_OF_LINE



Function: fchownat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144400)();
	00005fc4:JMP qword ptr [0x0003df00]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005fc4:JMP qword ptr [0x0003df00]
END_OF_LINE



Function: renameat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144408)();
	00005fd4:JMP qword ptr [0x0003df08]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005fd4:JMP qword ptr [0x0003df08]
END_OF_LINE



Function: sprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144418)();
	00005fe4:JMP qword ptr [0x0003df10]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00005fe4:JMP qword ptr [0x0003df10]
END_OF_LINE



Function: exit
----------------------------------------------
7: (*(code *)(undefined *)0x144420)();
	00005ff4:JMP qword ptr [0x0003df18]
END_OF_LINE
----------------------------------------------
8: return;
	00005ff4:JMP qword ptr [0x0003df18]
END_OF_LINE



Function: posix_spawnattr_setflags
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144428)();
	00006004:JMP qword ptr [0x0003df20]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006004:JMP qword ptr [0x0003df20]
END_OF_LINE



Function: fwrite
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x144430)();
	00006014:JMP qword ptr [0x0003df28]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00006014:JMP qword ptr [0x0003df28]
END_OF_LINE



Function: getrlimit
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144438)();
	00006024:JMP qword ptr [0x0003df30]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006024:JMP qword ptr [0x0003df30]
END_OF_LINE



Function: FUN_00006030
----------------------------------------------
5: (*(code *)0x144448)();
	00006034:JMP qword ptr [0x0003df38]
END_OF_LINE
----------------------------------------------
6: return;
	00006034:JMP qword ptr [0x0003df38]
END_OF_LINE



Function: symlinkat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144458)();
	00006044:JMP qword ptr [0x0003df40]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006044:JMP qword ptr [0x0003df40]
END_OF_LINE



Function: FUN_00006050
----------------------------------------------
5: (*(code *)0x144460)();
	00006054:JMP qword ptr [0x0003df48]
END_OF_LINE
----------------------------------------------
6: return;
	00006054:JMP qword ptr [0x0003df48]
END_OF_LINE



Function: fstat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144468)();
	00006064:JMP qword ptr [0x0003df50]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006064:JMP qword ptr [0x0003df50]
END_OF_LINE



Function: getc
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144470)();
	00006074:JMP qword ptr [0x0003df58]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006074:JMP qword ptr [0x0003df58]
END_OF_LINE



Function: sigaddset
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144478)();
	00006084:JMP qword ptr [0x0003df60]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006084:JMP qword ptr [0x0003df60]
END_OF_LINE



Function: fstatat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x144480)();
	00006094:JMP qword ptr [0x0003df68]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00006094:JMP qword ptr [0x0003df68]
END_OF_LINE



Function: __ctype_b_loc
----------------------------------------------
9: ppuVar1 = (ushort **)(*(code *)(undefined *)0x144488)();
	000060a4:JMP qword ptr [0x0003df70]
END_OF_LINE
----------------------------------------------
10: return ppuVar1;
	000060a4:JMP qword ptr [0x0003df70]
END_OF_LINE



Function: _start
----------------------------------------------
7: (*(code *)(undefined *)0x144040)(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
	000060b9:POP RSI
	000060ba:MOV RDX,RSP
	000060bd:AND RSP,-0x10
	000060c1:PUSH RAX
	000060c2:PUSH RSP
	000060c3:XOR R8D,R8D
	000060c6:XOR ECX,ECX
	000060c8:LEA RDI,[0x73ec]
	000060cf:CALL qword ptr [0x0003df80]
END_OF_LINE
----------------------------------------------
10: } while( true );
	000060d5:HLT
END_OF_LINE



Function: deregister_tm_clones
----------------------------------------------
8: return;
	00006108:RET
END_OF_LINE



Function: register_tm_clones
----------------------------------------------
8: return;
	00006148:RET
END_OF_LINE



Function: __do_global_dtors_aux
----------------------------------------------
5: if (completed.0 != '\0') {
	00006154:CMP byte ptr [0x0003e1e0],0x0
	0000615b:JNZ 0x00006188
END_OF_LINE
----------------------------------------------
6: return;
	00006188:RET
END_OF_LINE
----------------------------------------------
8: __cxa_finalize(__dso_handle);
	00006172:CALL 0x00005870
END_OF_LINE
----------------------------------------------
9: deregister_tm_clones();
	00006177:CALL 0x000060e0
END_OF_LINE
----------------------------------------------
10: completed.0 = 1;
	0000617c:MOV byte ptr [0x0003e1e0],0x1
END_OF_LINE
----------------------------------------------
11: return;
	00006184:RET
END_OF_LINE



Function: frame_dummy
----------------------------------------------
5: register_tm_clones();
	00006194:JMP 0x00006110
END_OF_LINE
----------------------------------------------
6: return;
	00006194:JMP 0x00006110
END_OF_LINE



Function: re_input
----------------------------------------------
7: if (using_plan_a) {
	000061ad:JZ 0x000061ea
END_OF_LINE
----------------------------------------------
8: if (i_buffer != (char *)0x0) {
	000061b6:TEST RAX,RAX
	000061b9:JZ 0x00006255
END_OF_LINE
----------------------------------------------
9: free(i_buffer);
	000061c9:CALL 0x00005860
END_OF_LINE
----------------------------------------------
10: i_buffer = (char *)0x0;
	000061ce:MOV qword ptr [0x0003e1f8],0x0
END_OF_LINE
----------------------------------------------
11: free(i_ptr);
	000061e3:CALL 0x00005860
END_OF_LINE
----------------------------------------------
15: if (-1 < tifd) {
	000061f0:TEST EAX,EAX
	000061f2:JS 0x00006201
END_OF_LINE
----------------------------------------------
16: close(tifd);
	000061fc:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
18: tifd = -1;
	00006201:MOV dword ptr [0x0003e010],0xffffffff
END_OF_LINE
----------------------------------------------
19: if (tibuf[0] != (char *)0x0) {
	00006212:TEST RAX,RAX
	00006215:JZ 0x00006231
END_OF_LINE
----------------------------------------------
20: free(tibuf[0]);
	00006221:CALL 0x00005860
END_OF_LINE
----------------------------------------------
21: tibuf[0] = (char *)0x0;
	00006226:MOV qword ptr [0x0003e210],0x0
END_OF_LINE
----------------------------------------------
23: tiline[1] = -1;
	00006231:MOV qword ptr [0x0003e028],-0x1
END_OF_LINE
----------------------------------------------
24: tiline[0] = -1;
	00006243:MOV qword ptr [0x0003e020],RAX
END_OF_LINE
----------------------------------------------
25: tireclen = 0;
	0000624a:MOV qword ptr [0x0003e228],0x0
END_OF_LINE
----------------------------------------------
27: return;
	00006257:RET
END_OF_LINE



Function: scan_input
----------------------------------------------
10: if ((debug & 0x10U) == 0) {
	00006274:AND EAX,0x10
	00006277:TEST EAX,EAX
	00006279:JNZ 0x00006292
END_OF_LINE
----------------------------------------------
11: _Var1 = plan_a(filename);
	00006282:CALL 0x0000683e
END_OF_LINE
----------------------------------------------
12: if (_Var1) {
	00006289:JZ 0x00006292
END_OF_LINE
----------------------------------------------
13: using_plan_a = true;
	0000628b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
14: goto LAB_00006297;
	00006297:AND EAX,0x1
END_OF_LINE
----------------------------------------------
17: using_plan_a = false;
	00006292:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
18: LAB_00006297:
	00006297:AND EAX,0x1
END_OF_LINE
----------------------------------------------
19: if (using_plan_a != true) {
	000062b0:TEST AL,AL
	000062b2:JZ 0x00006333
END_OF_LINE
----------------------------------------------
20: if ((file_type & 0xf000) != 0x8000) {
	000062b7:AND EAX,0xf000
	000062bc:CMP EAX,0x8000
	000062c1:JZ 0x00006327
END_OF_LINE
----------------------------------------------
21: if ((file_type & 0xf000) != 0xa000) {
	000062c6:AND EAX,0xf000
	000062cb:CMP EAX,0xa000
	000062d0:JZ 0x000062fa
END_OF_LINE
----------------------------------------------
23: __assert_fail("S_ISLNK (file_type)","inp.c",0x59,"scan_input");
	000062f5:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
25: pcVar2 = quotearg(filename);
	00006301:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
27: fatal("Can\'t handle %s %s","symbolic link",pcVar2);
	00006322:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
29: plan_b(filename);
	0000632e:CALL 0x00006cf0
END_OF_LINE
----------------------------------------------
31: return;
	00006335:RET
END_OF_LINE



Function: report_revision
----------------------------------------------
9: pcVar1 = quotearg(revision);
	00006354:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
10: if (found_revision) {
	00006361:JZ 0x00006395
END_OF_LINE
----------------------------------------------
11: if (verbosity == _IScntrl) {
	0000636c:CMP EAX,0x2
	0000636f:JNZ 0x0000643b
END_OF_LINE
----------------------------------------------
12: say("Good.  This file appears to be the %s version.\n",pcVar1);
	0000638b:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
15: else if (force == false) {
	0000639f:TEST AL,AL
	000063a1:JZ 0x000063d2
END_OF_LINE
----------------------------------------------
16: if (batch != false) {
	000063dc:TEST AL,AL
	000063de:JZ 0x000063fb
END_OF_LINE
----------------------------------------------
18: fatal("This file doesn\'t appear to be the %s version -- aborting.",pcVar1);
	000063f6:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
20: ask("This file doesn\'t appear to be the %s version -- patch anyway? [n] ",pcVar1);
	00006411:CALL 0x00018977
END_OF_LINE
----------------------------------------------
21: if (*buf != 'y') {
	00006420:MOVZX EAX,byte ptr [RAX]
	00006423:CMP AL,0x79
	00006425:JZ 0x0000643b
END_OF_LINE
----------------------------------------------
23: fatal("aborted");
	00006436:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
26: else if (verbosity != _ISblank) {
	000063ac:CMP EAX,0x1
	000063af:JZ 0x0000643b
END_OF_LINE
----------------------------------------------
27: say("Warning: this file doesn\'t appear to be the %s version -- patching anyway.\n",pcVar1);
	000063cb:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
29: return;
	0000643d:RET
END_OF_LINE



Function: too_many_lines
----------------------------------------------
8: pcVar1 = quotearg(filename);
	00006455:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
10: fatal("File %s has too many lines",pcVar1);
	0000646c:CALL 0x000185b0
END_OF_LINE



Function: lines_too_long
----------------------------------------------
8: pcVar1 = quotearg(filename);
	00006488:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
10: fatal("Lines in file %s are too long",pcVar1);
	0000649f:CALL 0x000185b0
END_OF_LINE



Function: get_input_file
----------------------------------------------
23: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	000064bc:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
24: iVar3 = strcmp(filename,outname);
	000064d9:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
25: readonly = iVar3 != 0;
	000064de:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
26: if (inerrno == -1) {
	000064ef:CMP EAX,-0x1
	000064f2:JNZ 0x00006513
END_OF_LINE
----------------------------------------------
27: inerrno = stat_file(filename,&instat);
	00006505:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
29: _Var1 = instat.st_uid;
	00006513:MOV EAX,dword ptr [RBP + -0x54]
END_OF_LINE
----------------------------------------------
30: if ((((file_type & 0xf000) == 0x8000) && (patch_get != 0)) && (invc != 0)) {
	00006516:AND EAX,0xf000
	0000651b:CMP EAX,0x8000
	00006520:JNZ 0x00006770
	00006526:LEA RAX,[0x3e36c]
	0000652d:MOV EAX,dword ptr [RAX]
	0000652f:TEST EAX,EAX
	00006531:JZ 0x00006770
	00006537:LEA RAX,[0x3e26c]
	0000653e:MOV EAX,dword ptr [RAX]
	00006540:TEST EAX,EAX
	00006542:JZ 0x00006770
END_OF_LINE
----------------------------------------------
31: if (inerrno == 0) {
	00006551:TEST EAX,EAX
	00006553:JNZ 0x000065a3
END_OF_LINE
----------------------------------------------
32: if (!readonly) {
	0000655e:JZ 0x00006770
END_OF_LINE
----------------------------------------------
33: if ((instat.st_mode & 0x92) == 0) goto LAB_000065a3;
	0000656e:AND EAX,0x92
	00006573:TEST EAX,EAX
	00006575:JZ 0x000065a3
	00006577:LEA RAX,[0x3e280]
	0000657e:MOV EAX,dword ptr [RAX + 0x18]
	00006581:AND EAX,0x12
	00006584:TEST EAX,EAX
	00006586:JNZ 0x00006770
	0000658c:LEA RAX,[0x3e280]
	00006593:MOV EBX,dword ptr [RAX + 0x1c]
	00006596:CALL 0x00005c20
	0000659b:CMP EBX,EAX
	0000659d:JZ 0x00006770
	000065a3:LEA RAX,[0x3e268]
END_OF_LINE
----------------------------------------------
34: if ((instat.st_mode & 0x12) == 0) {
	00006581:AND EAX,0x12
	00006584:TEST EAX,EAX
	00006586:JNZ 0x00006770
END_OF_LINE
----------------------------------------------
35: _Var4 = geteuid();
	00006596:CALL 0x00005c20
END_OF_LINE
----------------------------------------------
36: if (_Var1 != _Var4) goto LAB_000065a3;
	0000659b:CMP EBX,EAX
	0000659d:JZ 0x00006770
	000065a3:LEA RAX,[0x3e268]
END_OF_LINE
----------------------------------------------
41: LAB_000065a3:
	000065a3:LEA RAX,[0x3e268]
END_OF_LINE
----------------------------------------------
42: if (inerrno == 0) {
	000065ac:TEST EAX,EAX
	000065ae:JNZ 0x000065bc
END_OF_LINE
----------------------------------------------
43: filestat = &instat;
	000065b7:MOV RDI,RAX
END_OF_LINE
----------------------------------------------
46: filestat = (stat *)0x0;
	000065bc:MOV EDI,0x0
END_OF_LINE
----------------------------------------------
48: cs = version_controller(filename,readonly,filestat,&getbuf,&diffbuf);
	000065c5:LEA RCX,[RBP + -0x30]
	000065c9:LEA RDX,[RBP + -0x28]
	000065cd:MOV RAX,qword ptr [RBP + -0x48]
	000065d1:MOV R8,RCX
	000065d4:MOV RCX,RDX
	000065d7:MOV RDX,RDI
	000065da:MOV RDI,RAX
	000065dd:CALL 0x00017851
END_OF_LINE
----------------------------------------------
49: invc = (int)(cs != (char *)0x0);
	000065e6:CMP qword ptr [RBP + -0x20],0x0
	000065eb:SETNZ AL
	000065ee:MOVZX EDX,AL
	000065f1:LEA RAX,[0x3e26c]
	000065f8:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
50: if (invc != 0) {
	00006603:TEST EAX,EAX
	00006605:JZ 0x00006770
END_OF_LINE
----------------------------------------------
51: if (inerrno == 0) {
	00006614:TEST EAX,EAX
	00006616:JNZ 0x0000670a
END_OF_LINE
----------------------------------------------
52: if ((!readonly) && ((instat.st_mode & 0x92) != 0)) {
	00006625:JZ 0x00006667
	00006627:LEA RAX,[0x3e280]
	0000662e:MOV EAX,dword ptr [RAX + 0x18]
	00006631:AND EAX,0x92
	00006636:TEST EAX,EAX
	00006638:JZ 0x00006667
END_OF_LINE
----------------------------------------------
53: pcVar5 = quotearg(filename);
	00006641:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
55: fatal("File %s seems to be locked by somebody else under %s",pcVar5,cs);
	00006662:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
57: if (diffbuf != (char *)0x0) {
	0000666b:TEST RAX,RAX
	0000666e:JZ 0x000066f4
END_OF_LINE
----------------------------------------------
58: if (verbosity == _IScntrl) {
	0000667d:CMP EAX,0x2
	00006680:JNZ 0x000066af
END_OF_LINE
----------------------------------------------
59: pcVar5 = quotearg(filename);
	00006689:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
60: say("Comparing file %s to default %s version...\n",pcVar5,cs);
	000066aa:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
62: iVar3 = systemic(diffbuf);
	000066b6:CALL 0x00019101
END_OF_LINE
----------------------------------------------
63: if (iVar3 != 0) {
	000066bb:TEST EAX,EAX
	000066bd:JZ 0x000066f4
END_OF_LINE
----------------------------------------------
64: pcVar5 = quotearg(filename);
	000066c6:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
65: say("warning: Patching file %s, which does not match default %s version\n",pcVar5,cs);
	000066e7:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
66: cs = (char *)0x0;
	000066ec:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
69: if (dry_run != false) {
	000066fe:TEST AL,AL
	00006700:JZ 0x0000670a
END_OF_LINE
----------------------------------------------
70: cs = (char *)0x0;
	00006702:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
73: if (cs != (char *)0x0) {
	0000670a:CMP qword ptr [RBP + -0x20],0x0
	0000670f:JZ 0x00006758
END_OF_LINE
----------------------------------------------
74: _Var2 = version_get(filename,cs,inerrno == 0,readonly,getbuf,&instat);
	00006722:TEST EAX,EAX
	00006724:SETZ AL
	00006727:MOVZX EDX,AL
	0000672a:MOV RSI,qword ptr [RBP + -0x20]
	0000672e:MOV RAX,qword ptr [RBP + -0x48]
	00006732:LEA R8,[0x3e280]
	00006739:MOV R9,R8
	0000673c:MOV R8,RDI
	0000673f:MOV RDI,RAX
	00006742:CALL 0x000181e0
END_OF_LINE
----------------------------------------------
75: if (_Var2) {
	00006749:JZ 0x00006758
END_OF_LINE
----------------------------------------------
76: inerrno = 0;
	00006752:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
79: free(getbuf);
	0000675f:CALL 0x00005860
END_OF_LINE
----------------------------------------------
80: free(diffbuf);
	0000676b:CALL 0x00005860
END_OF_LINE
----------------------------------------------
84: if (inerrno == 0) {
	00006779:TEST EAX,EAX
	0000677b:JZ 0x0000679f
END_OF_LINE
----------------------------------------------
85: if ((((file_type & 0xf000) != 0x8000) && ((file_type & 0xf000) != 0xa000)) ||
	000067a2:AND EAX,0xf000
	000067a7:CMP EAX,0x8000
	000067ac:JZ 0x000067bd
	000067ae:MOV EAX,dword ptr [RBP + -0x54]
	000067b1:AND EAX,0xf000
	000067b6:CMP EAX,0xa000
	000067bb:JNZ 0x000067d3
	000067bd:LEA RAX,[0x3e280]
	000067c4:MOV EAX,dword ptr [RAX + 0x18]
	000067c7:XOR EAX,dword ptr [RBP + -0x54]
	000067ca:AND EAX,0xf000
	000067cf:TEST EAX,EAX
	000067d1:JZ 0x0000681f
END_OF_LINE
----------------------------------------------
86: (((instat.st_mode ^ file_type) & 0xf000) != 0)) {
	000067c7:XOR EAX,dword ptr [RBP + -0x54]
	000067ca:AND EAX,0xf000
	000067cf:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
87: if ((file_type & 0xf000) == 0xa000) {
	000067d6:AND EAX,0xf000
	000067db:CMP EAX,0xa000
	000067e0:JNZ 0x000067eb
END_OF_LINE
----------------------------------------------
88: pcVar5 = "symbolic link";
	000067e2:LEA RBX,[0x31022]
END_OF_LINE
----------------------------------------------
91: pcVar5 = "regular file";
	000067eb:LEA RBX,[0x3123c]
END_OF_LINE
----------------------------------------------
93: pcVar6 = quotearg(filename);
	000067f9:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
94: say("File %s is not a %s -- refusing to patch\n",pcVar6,pcVar5);
	00006813:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
95: _Var2 = false;
	00006818:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
96: goto LAB_00006824;
	00006824:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
100: instat.st_mode = 0x1b6;
	00006784:MOV dword ptr [RAX + 0x18],0x1b6
END_OF_LINE
----------------------------------------------
101: instat.st_size = 0;
	00006792:MOV qword ptr [RAX + 0x30],0x0
END_OF_LINE
----------------------------------------------
103: _Var2 = true;
	0000681f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
104: LAB_00006824:
	00006824:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
105: if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
	00006828:SUB RDX,qword ptr FS:[0x28]
	00006831:JZ 0x00006838
END_OF_LINE
----------------------------------------------
107: __stack_chk_fail();
	00006833:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
109: return _Var2;
	0000683d:RET
END_OF_LINE



Function: plan_a
----------------------------------------------
37: bufsiz = instat.st_size;
	00006842:PUSH RBP
END_OF_LINE
----------------------------------------------
38: size = instat.st_size;
	00006859:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
39: sVar10 = instat.st_size;
	00006876:JZ 0x0000687e
END_OF_LINE
----------------------------------------------
40: if (instat.st_size == 0) {
	00006871:CMP qword ptr [RBP + -0x50],0x0
	00006876:JZ 0x0000687e
END_OF_LINE
----------------------------------------------
41: sVar10 = 1;
	0000687e:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
43: pcVar5 = (char *)malloc(sVar10);
	00006886:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
44: if (pcVar5 == (char *)0x0) {
	0000688f:CMP qword ptr [RBP + -0x40],0x0
	00006894:JNZ 0x000068a0
END_OF_LINE
----------------------------------------------
45: _Var3 = false;
	00006896:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
48: if (bufsiz != 0) {
	000068a0:CMP qword ptr [RBP + -0x50],0x0
	000068a5:JZ 0x00006a3f
END_OF_LINE
----------------------------------------------
49: if ((instat.st_mode & 0xf000) == 0x8000) {
	000068b5:AND EAX,0xf000
	000068ba:CMP EAX,0x8000
	000068bf:JNZ 0x000069ba
END_OF_LINE
----------------------------------------------
50: flags = 0;
	000068c5:MOV dword ptr [RBP + -0x6c],0x0
END_OF_LINE
----------------------------------------------
51: buffered = 0;
	000068cc:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
52: if (follow_symlinks != true) {
	000068e1:TEST AL,AL
	000068e3:JZ 0x000068ec
END_OF_LINE
----------------------------------------------
53: flags = 0x20000;
	000068e5:OR dword ptr [RBP + -0x6c],0x20000
END_OF_LINE
----------------------------------------------
55: iVar4 = safe_open(filename,flags,0);
	000068fd:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
56: if (iVar4 < 0) {
	00006905:CMP dword ptr [RBP + -0x68],0x0
	00006909:JNS 0x00006999
END_OF_LINE
----------------------------------------------
57: pcVar5 = quotearg(filename);
	00006916:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
59: pfatal("can\'t open file %s",pcVar5);
	0000692d:CALL 0x00018721
END_OF_LINE
----------------------------------------------
61: for (; bufsiz != buffered; buffered = buffered + sVar6) {
	00006995:ADD qword ptr [RBP + -0x48],RAX
	00006999:MOV RAX,qword ptr [RBP + -0x50]
	0000699d:CMP RAX,qword ptr [RBP + -0x48]
	000069a1:JNZ 0x00006932
END_OF_LINE
----------------------------------------------
62: sVar6 = read(iVar4,pcVar5 + buffered,bufsiz - buffered);
	00006936:SUB RAX,qword ptr [RBP + -0x48]
	0000693a:MOV RDX,RAX
	0000693d:MOV RCX,qword ptr [RBP + -0x40]
	00006941:MOV RAX,qword ptr [RBP + -0x48]
	00006945:ADD RCX,RAX
	00006948:MOV EAX,dword ptr [RBP + -0x68]
	0000694b:MOV RSI,RCX
	0000694e:MOV EDI,EAX
	00006950:CALL 0x00005c80
END_OF_LINE
----------------------------------------------
63: if (sVar6 == 0) {
	00006959:CMP qword ptr [RBP + -0x30],0x0
	0000695e:JNZ 0x0000696a
END_OF_LINE
----------------------------------------------
64: size = buffered;
	00006964:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
67: if (sVar6 == -1) {
	0000696a:CMP qword ptr [RBP + -0x30],-0x1
	0000696f:JNZ 0x00006991
END_OF_LINE
----------------------------------------------
68: close(iVar4);
	00006976:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
69: free(pcVar5);
	00006982:CALL 0x00005860
END_OF_LINE
----------------------------------------------
70: return false;
	00006cef:RET
END_OF_LINE
----------------------------------------------
73: iVar4 = close(iVar4);
	000069a8:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
74: if (iVar4 != 0) {
	000069ad:TEST EAX,EAX
	000069af:JZ 0x00006a3f
END_OF_LINE
----------------------------------------------
76: read_fatal();
	000069b5:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
80: if ((instat.st_mode & 0xf000) != 0xa000) {
	000069c4:AND EAX,0xf000
	000069c9:CMP EAX,0xa000
	000069ce:JNZ 0x00006a29
END_OF_LINE
----------------------------------------------
81: free(pcVar5);
	00006a30:CALL 0x00005860
END_OF_LINE
----------------------------------------------
82: return false;
	00006cef:RET
END_OF_LINE
----------------------------------------------
84: size = safe_readlink(filename,pcVar5,bufsiz);
	000069e2:CALL 0x00015ff7
END_OF_LINE
----------------------------------------------
85: if ((long)size < 0) {
	000069eb:CMP qword ptr [RBP + -0x38],0x0
	000069f0:JNS 0x00006a1f
END_OF_LINE
----------------------------------------------
86: pcVar5 = quotearg(filename);
	000069f9:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
88: pfatal("can\'t read %s %s","symbolic link",pcVar5);
	00006a1a:CALL 0x00018721
END_OF_LINE
----------------------------------------------
92: pcVar7 = pcVar5 + size;
	00006a47:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
93: iline = 3;
	00006a4e:MOV qword ptr [RBP + -0x58],0x3
END_OF_LINE
----------------------------------------------
94: s = pcVar5;
	00006a5e:JMP 0x00006a7d
END_OF_LINE
----------------------------------------------
95: while (pvVar8 = memchr(s,10,(long)pcVar7 - (long)s), pvVar8 != (void *)0x0) {
	00006a81:SUB RAX,qword ptr [RBP + -0x60]
	00006a85:MOV RDX,RAX
	00006a88:MOV RAX,qword ptr [RBP + -0x60]
	00006a8c:MOV ESI,0xa
	00006a91:MOV RDI,RAX
	00006a94:CALL 0x00005c70
	00006a99:MOV qword ptr [RBP + -0x60],RAX
	00006a9d:CMP qword ptr [RBP + -0x60],0x0
	00006aa2:JNZ 0x00006a60
END_OF_LINE
----------------------------------------------
96: iline = iline + 1;
	00006a60:ADD qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
97: if (iline < 0) {
	00006a65:CMP qword ptr [RBP + -0x58],0x0
	00006a6a:JNS 0x00006a78
END_OF_LINE
----------------------------------------------
99: too_many_lines(filename);
	00006a73:CALL 0x0000643e
END_OF_LINE
----------------------------------------------
101: s = (char *)((long)pvVar8 + 1);
	00006a78:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
103: if (((iline & 0x1fffffffffffffffU) == iline) &&
	00006ab2:AND RDX,RAX
	00006ab5:MOV RAX,qword ptr [RBP + -0x58]
	00006ab9:CMP RDX,RAX
	00006abc:JNZ 0x00006ad9
	00006abe:MOV RAX,qword ptr [RBP + -0x58]
	00006ac2:SHL RAX,0x3
	00006ac6:MOV RDI,RAX
	00006ac9:CALL 0x00005df0
	00006ace:MOV qword ptr [RBP + -0x20],RAX
	00006ad2:CMP qword ptr [RBP + -0x20],0x0
	00006ad7:JNZ 0x00006aef
END_OF_LINE
----------------------------------------------
104: (ppcVar9 = (char **)malloc(iline << 3), ppcVar9 != (char **)0x0)) {
	00006ac2:SHL RAX,0x3
	00006ac6:MOV RDI,RAX
	00006ac9:CALL 0x00005df0
	00006ace:MOV qword ptr [RBP + -0x20],RAX
	00006ad2:CMP qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
105: iline = 0;
	00006aef:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
106: s = pcVar5;
	00006afb:MOV qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
107: while( true ) {
	00006b43:JZ 0x00006b4c
END_OF_LINE
----------------------------------------------
108: lVar1 = iline + 1;
	00006aff:ADD qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
109: ppcVar9[lVar1] = s;
	00006b14:ADD RDX,RAX
	00006b17:MOV RAX,qword ptr [RBP + -0x60]
	00006b1b:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
110: pvVar8 = memchr(s,10,(long)pcVar7 - (long)s);
	00006b22:SUB RAX,qword ptr [RBP + -0x60]
	00006b26:MOV RDX,RAX
	00006b29:MOV RAX,qword ptr [RBP + -0x60]
	00006b2d:MOV ESI,0xa
	00006b32:MOV RDI,RAX
	00006b35:CALL 0x00005c70
END_OF_LINE
----------------------------------------------
111: if (pvVar8 == (void *)0x0) break;
	00006b3e:CMP qword ptr [RBP + -0x60],0x0
	00006b43:JZ 0x00006b4c
END_OF_LINE
----------------------------------------------
112: s = (char *)((long)pvVar8 + 1);
	00006b45:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
113: iline = lVar1;
	00006b4a:JMP 0x00006aff
END_OF_LINE
----------------------------------------------
115: if ((size != 0) && (pcVar7[-1] != '\n')) {
	00006b4d:CMP qword ptr [RBP + -0x50],0x0
	00006b52:JZ 0x00006b82
	00006b54:MOV RAX,qword ptr [RBP + -0x28]
	00006b58:SUB RAX,0x1
	00006b5c:MOVZX EAX,byte ptr [RAX]
	00006b5f:CMP AL,0xa
	00006b61:JZ 0x00006b82
END_OF_LINE
----------------------------------------------
116: ppcVar9[iline + 2] = pcVar7;
	00006b63:ADD qword ptr [RBP + -0x58],0x1
	00006b68:MOV RAX,qword ptr [RBP + -0x58]
	00006b6c:LEA RDX,[RAX*0x8]
	00006b74:MOV RAX,qword ptr [RBP + -0x20]
	00006b78:ADD RDX,RAX
	00006b7b:MOV RAX,qword ptr [RBP + -0x28]
	00006b7f:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
117: lVar1 = iline + 2;
	00006b63:ADD qword ptr [RBP + -0x58],0x1
	00006b68:MOV RAX,qword ptr [RBP + -0x58]
	00006b6c:LEA RDX,[RAX*0x8]
	00006b74:MOV RAX,qword ptr [RBP + -0x20]
	00006b78:ADD RDX,RAX
	00006b7b:MOV RAX,qword ptr [RBP + -0x28]
	00006b7f:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
119: iline = lVar1;
	00006b82:MOV RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
120: __s2 = revision;
	00006b82:MOV RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
121: input_lines = iline + -1;
	00006b86:LEA RDX,[RAX + -0x1]
END_OF_LINE
----------------------------------------------
122: if (revision != (char *)0x0) {
	00006b9e:TEST RAX,RAX
	00006ba1:JZ 0x00006cd3
END_OF_LINE
----------------------------------------------
123: cVar2 = *revision;
	00006bb9:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
124: found_revision = false;
	00006bc2:MOV byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
125: sVar10 = strlen(revision);
	00006bcd:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
126: if (sVar10 <= size) {
	00006bde:JA 0x00006cc8
END_OF_LINE
----------------------------------------------
127: s = pcVar5;
	00006c01:JMP 0x00006c9d
END_OF_LINE
----------------------------------------------
128: while (__s1 = (char *)memchr(s,(int)cVar2,(long)(pcVar7 + -sVar10) - (long)s),
	00006bbc:MOVSX EAX,AL
	00006bbf:MOV dword ptr [RBP + -0x64],EAX
	00006bc2:MOV byte ptr [RBP + -0x6d],0x0
	00006bc6:MOV RAX,qword ptr [RBP + -0x18]
	00006bca:MOV RDI,RAX
	00006bcd:CALL 0x00005ad0
	00006bd2:MOV qword ptr [RBP + -0x10],RAX
	00006bd6:MOV RAX,qword ptr [RBP + -0x10]
	00006bda:CMP RAX,qword ptr [RBP + -0x50]
	00006bde:JA 0x00006cc8
	00006be4:MOV RAX,qword ptr [RBP + -0x10]
	00006be8:NEG RAX
	00006beb:MOV RDX,RAX
	00006bee:MOV RAX,qword ptr [RBP + -0x28]
	00006bf2:ADD RAX,RDX
	00006bf5:MOV qword ptr [RBP + -0x8],RAX
	00006bf9:MOV RAX,qword ptr [RBP + -0x40]
	00006bfd:MOV qword ptr [RBP + -0x60],RAX
	00006c01:JMP 0x00006c9d
	00006c06:MOV RDX,qword ptr [RBP + -0x10]
	00006c0a:MOV RCX,qword ptr [RBP + -0x18]
	00006c0e:MOV RAX,qword ptr [RBP + -0x60]
	00006c12:MOV RSI,RCX
	00006c15:MOV RDI,RAX
	00006c18:CALL 0x00005cb0
	00006c1d:TEST EAX,EAX
	00006c1f:JNZ 0x00006c98
	00006c21:MOV RAX,qword ptr [RBP + -0x60]
	00006c25:CMP RAX,qword ptr [RBP + -0x40]
	00006c29:JZ 0x00006c56
	00006c2b:CALL 0x000060a0
	00006c30:MOV RDX,qword ptr [RAX]
	00006c33:MOV RAX,qword ptr [RBP + -0x60]
	00006c37:SUB RAX,0x1
	00006c3b:MOVZX EAX,byte ptr [RAX]
	00006c3e:MOVZX EAX,AL
	00006c41:ADD RAX,RAX
	00006c44:ADD RAX,RDX
	00006c47:MOVZX EAX,word ptr [RAX]
	00006c4a:MOVZX EAX,AX
	00006c4d:AND EAX,0x2000
	00006c52:TEST EAX,EAX
	00006c54:JZ 0x00006c98
	00006c56:MOV RAX,qword ptr [RBP + -0x60]
	00006c5a:ADD RAX,0x1
	00006c5e:CMP qword ptr [RBP + -0x8],RAX
	00006c62:JZ 0x00006c92
	00006c64:CALL 0x000060a0
	00006c69:MOV RDX,qword ptr [RAX]
	00006c6c:MOV RCX,qword ptr [RBP + -0x60]
	00006c70:MOV RAX,qword ptr [RBP + -0x10]
	00006c74:ADD RAX,RCX
	00006c77:MOVZX EAX,byte ptr [RAX]
	00006c7a:MOVZX EAX,AL
	00006c7d:ADD RAX,RAX
	00006c80:ADD RAX,RDX
	00006c83:MOVZX EAX,word ptr [RAX]
	00006c86:MOVZX EAX,AX
	00006c89:AND EAX,0x2000
	00006c8e:TEST EAX,EAX
	00006c90:JZ 0x00006c98
	00006c92:MOV byte ptr [RBP + -0x6d],0x1
	00006c96:JMP 0x00006cc8
	00006c98:ADD qword ptr [RBP + -0x60],0x1
	00006c9d:MOV RAX,qword ptr [RBP + -0x8]
	00006ca1:SUB RAX,qword ptr [RBP + -0x60]
	00006ca5:MOV RDX,RAX
	00006ca8:MOV ECX,dword ptr [RBP + -0x64]
	00006cab:MOV RAX,qword ptr [RBP + -0x60]
	00006caf:MOV ESI,ECX
	00006cb1:MOV RDI,RAX
	00006cb4:CALL 0x00005c70
	00006cb9:MOV qword ptr [RBP + -0x60],RAX
	00006cbd:CMP qword ptr [RBP + -0x60],0x0
	00006cc2:JNZ 0x00006c06
END_OF_LINE
----------------------------------------------
129: __s1 != (char *)0x0) {
	00006cbd:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
130: iVar4 = memcmp(__s1,__s2,sVar10);
	00006c18:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
131: if (((iVar4 == 0) &&
	00006c1d:TEST EAX,EAX
	00006c1f:JNZ 0x00006c98
	00006c21:MOV RAX,qword ptr [RBP + -0x60]
	00006c25:CMP RAX,qword ptr [RBP + -0x40]
	00006c29:JZ 0x00006c56
	00006c2b:CALL 0x000060a0
	00006c30:MOV RDX,qword ptr [RAX]
	00006c33:MOV RAX,qword ptr [RBP + -0x60]
	00006c37:SUB RAX,0x1
	00006c3b:MOVZX EAX,byte ptr [RAX]
	00006c3e:MOVZX EAX,AL
	00006c41:ADD RAX,RAX
	00006c44:ADD RAX,RDX
	00006c47:MOVZX EAX,word ptr [RAX]
	00006c4a:MOVZX EAX,AX
	00006c4d:AND EAX,0x2000
	00006c52:TEST EAX,EAX
	00006c54:JZ 0x00006c98
	00006c56:MOV RAX,qword ptr [RBP + -0x60]
	00006c5a:ADD RAX,0x1
	00006c5e:CMP qword ptr [RBP + -0x8],RAX
	00006c62:JZ 0x00006c92
	00006c64:CALL 0x000060a0
	00006c69:MOV RDX,qword ptr [RAX]
	00006c6c:MOV RCX,qword ptr [RBP + -0x60]
	00006c70:MOV RAX,qword ptr [RBP + -0x10]
	00006c74:ADD RAX,RCX
	00006c77:MOVZX EAX,byte ptr [RAX]
	00006c7a:MOVZX EAX,AL
	00006c7d:ADD RAX,RAX
	00006c80:ADD RAX,RDX
	00006c83:MOVZX EAX,word ptr [RAX]
	00006c86:MOVZX EAX,AX
	00006c89:AND EAX,0x2000
	00006c8e:TEST EAX,EAX
	00006c90:JZ 0x00006c98
END_OF_LINE
----------------------------------------------
132: ((__s1 == pcVar5 ||
	00006c25:CMP RAX,qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
133: (ppuVar11 = __ctype_b_loc(), ((*ppuVar11)[(byte)__s1[-1]] & 0x2000) != 0)))) &&
	00006c2b:CALL 0x000060a0
	00006c30:MOV RDX,qword ptr [RAX]
	00006c33:MOV RAX,qword ptr [RBP + -0x60]
	00006c37:SUB RAX,0x1
	00006c3b:MOVZX EAX,byte ptr [RAX]
	00006c3e:MOVZX EAX,AL
	00006c41:ADD RAX,RAX
	00006c44:ADD RAX,RDX
	00006c47:MOVZX EAX,word ptr [RAX]
	00006c4a:MOVZX EAX,AX
	00006c4d:AND EAX,0x2000
	00006c52:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
134: ((pcVar7 + -sVar10 == __s1 + 1 ||
	00006be8:NEG RAX
	00006beb:MOV RDX,RAX
	00006bee:MOV RAX,qword ptr [RBP + -0x28]
	00006bf2:ADD RAX,RDX
	00006bf5:MOV qword ptr [RBP + -0x8],RAX
	00006bf9:MOV RAX,qword ptr [RBP + -0x40]
	00006bfd:MOV qword ptr [RBP + -0x60],RAX
	00006c01:JMP 0x00006c9d
	00006c06:MOV RDX,qword ptr [RBP + -0x10]
	00006c0a:MOV RCX,qword ptr [RBP + -0x18]
	00006c0e:MOV RAX,qword ptr [RBP + -0x60]
	00006c12:MOV RSI,RCX
	00006c15:MOV RDI,RAX
	00006c18:CALL 0x00005cb0
	00006c1d:TEST EAX,EAX
	00006c1f:JNZ 0x00006c98
	00006c21:MOV RAX,qword ptr [RBP + -0x60]
	00006c25:CMP RAX,qword ptr [RBP + -0x40]
	00006c29:JZ 0x00006c56
	00006c2b:CALL 0x000060a0
	00006c30:MOV RDX,qword ptr [RAX]
	00006c33:MOV RAX,qword ptr [RBP + -0x60]
	00006c37:SUB RAX,0x1
	00006c3b:MOVZX EAX,byte ptr [RAX]
	00006c3e:MOVZX EAX,AL
	00006c41:ADD RAX,RAX
	00006c44:ADD RAX,RDX
	00006c47:MOVZX EAX,word ptr [RAX]
	00006c4a:MOVZX EAX,AX
	00006c4d:AND EAX,0x2000
	00006c52:TEST EAX,EAX
	00006c54:JZ 0x00006c98
	00006c56:MOV RAX,qword ptr [RBP + -0x60]
	00006c5a:ADD RAX,0x1
	00006c5e:CMP qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
135: (ppuVar11 = __ctype_b_loc(), ((*ppuVar11)[(byte)__s1[sVar10]] & 0x2000) != 0)))) {
	00006c64:CALL 0x000060a0
	00006c69:MOV RDX,qword ptr [RAX]
	00006c6c:MOV RCX,qword ptr [RBP + -0x60]
	00006c70:MOV RAX,qword ptr [RBP + -0x10]
	00006c74:ADD RAX,RCX
	00006c77:MOVZX EAX,byte ptr [RAX]
	00006c7a:MOVZX EAX,AL
	00006c7d:ADD RAX,RAX
	00006c80:ADD RAX,RDX
	00006c83:MOVZX EAX,word ptr [RAX]
	00006c86:MOVZX EAX,AX
	00006c89:AND EAX,0x2000
	00006c8e:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
136: found_revision = true;
	00006c92:MOV byte ptr [RBP + -0x6d],0x1
END_OF_LINE
----------------------------------------------
139: s = __s1 + 1;
	00006c98:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
142: report_revision(found_revision);
	00006cce:CALL 0x00006336
END_OF_LINE
----------------------------------------------
144: _Var3 = true;
	00006ce9:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
145: i_buffer = pcVar5;
	00006ce9:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
146: i_ptr = ppcVar9;
	00006ce9:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
149: free(pcVar5);
	00006ae0:CALL 0x00005860
END_OF_LINE
----------------------------------------------
150: _Var3 = false;
	00006ae5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
153: return _Var3;
	00006cef:RET
END_OF_LINE



Function: plan_b
----------------------------------------------
28: flags = 0;
	00006d00:MOV dword ptr [RBP + -0x54],0x0
END_OF_LINE
----------------------------------------------
29: line = 1;
	00006d07:MOV qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
30: filename_local = filename;
	00006d1d:JNZ 0x00006d2a
END_OF_LINE
----------------------------------------------
31: if (instat.st_size == 0) {
	00006d1a:TEST RAX,RAX
	00006d1d:JNZ 0x00006d2a
END_OF_LINE
----------------------------------------------
32: filename_local = "/dev/null";
	00006d26:MOV qword ptr [RBP + -0x68],RAX
END_OF_LINE
----------------------------------------------
34: if (!follow_symlinks) {
	00006d39:JZ 0x00006d42
END_OF_LINE
----------------------------------------------
35: flags = 0x20000;
	00006d3b:OR dword ptr [RBP + -0x54],0x20000
END_OF_LINE
----------------------------------------------
37: iVar2 = safe_open(filename_local,flags,0);
	00006d53:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
38: if ((iVar2 < 0) || (__stream = fdopen(iVar2,"r"), __stream == (FILE *)0x0)) {
	00006d5b:CMP dword ptr [RBP + -0x4c],0x0
	00006d5f:JS 0x00006d80
	00006d61:MOV EAX,dword ptr [RBP + -0x4c]
	00006d64:LEA RDX,[0x312a8]
	00006d6b:MOV RSI,RDX
	00006d6e:MOV EDI,EAX
	00006d70:CALL 0x00005eb0
	00006d75:MOV qword ptr [RBP + -0x20],RAX
	00006d79:CMP qword ptr [RBP + -0x20],0x0
	00006d7e:JNZ 0x00006da3
END_OF_LINE
----------------------------------------------
39: pcVar4 = quotearg(filename_local);
	00006d87:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
41: pfatal("Can\'t open file %s",pcVar4);
	00006d9e:CALL 0x00018721
END_OF_LINE
----------------------------------------------
43: if (TMPINNAME_needs_removal == false) {
	00006dad:TEST AL,AL
	00006daf:JZ 0x00006dda
END_OF_LINE
----------------------------------------------
44: tifd = make_tempfile(&TMPINNAME,'i',(char *)0x0,2,0x180);
	00006df9:CALL 0x00019da4
END_OF_LINE
----------------------------------------------
45: if (tifd == -1) {
	00006e0a:CMP EAX,-0x1
	00006e0d:JNZ 0x00006e30
END_OF_LINE
----------------------------------------------
47: pfatal("Can\'t create temporary file %s",TMPINNAME);
	00006e2b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
49: TMPINNAME_needs_removal = true;
	00006e37:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
52: tifd = create_file(TMPINNAME,2,0,true);
	00006dcd:CALL 0x00017326
END_OF_LINE
----------------------------------------------
54: pcVar4 = revision;
	00006e3a:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
55: i = 0;
	00006e3a:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
56: len = 0;
	00006e42:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
57: maxlen = 1;
	00006e4a:MOV qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
58: found_revision = revision == (char *)0x0;
	00006e60:CMP qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
59: if (revision == (char *)0x0) {
	00006e6b:CMP qword ptr [RBP + -0x18],0x0
	00006e70:JZ 0x00006e80
END_OF_LINE
----------------------------------------------
60: sVar5 = 0;
	00006e80:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
63: sVar5 = strlen(revision);
	00006e79:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
65: while (uVar3 = getc(__stream), uVar3 != 0xffffffff) {
	00006f95:CALL 0x00006070
	00006f9a:MOV dword ptr [RBP + -0x50],EAX
	00006f9d:CMP dword ptr [RBP + -0x50],-0x1
	00006fa1:JNZ 0x00006e8e
END_OF_LINE
----------------------------------------------
66: len = len + 1;
	00006e8e:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
67: if ((long)len < 0) {
	00006e97:TEST RAX,RAX
	00006e9a:JNS 0x00006ea8
END_OF_LINE
----------------------------------------------
69: lines_too_long(filename_local);
	00006ea3:CALL 0x00006471
END_OF_LINE
----------------------------------------------
71: if (uVar3 == 10) {
	00006ea8:CMP dword ptr [RBP + -0x50],0xa
	00006eac:JNZ 0x00006ee0
END_OF_LINE
----------------------------------------------
72: line = line + 1;
	00006eae:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
73: if (line < 0) {
	00006eb3:CMP qword ptr [RBP + -0x30],0x0
	00006eb8:JNS 0x00006ec6
END_OF_LINE
----------------------------------------------
75: too_many_lines(filename_local);
	00006ec1:CALL 0x0000643e
END_OF_LINE
----------------------------------------------
77: if (maxlen < len) {
	00006eca:CMP RAX,qword ptr [RBP + -0x48]
	00006ece:JNC 0x00006ed8
END_OF_LINE
----------------------------------------------
78: maxlen = len;
	00006ed4:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
80: len = 0;
	00006ed8:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
82: if (found_revision != true) {
	00006ee7:TEST AL,AL
	00006ee9:JZ 0x00006f8e
END_OF_LINE
----------------------------------------------
83: if (i == sVar5) {
	00006ef3:CMP RAX,qword ptr [RBP + -0x10]
	00006ef7:JNZ 0x00006f2a
END_OF_LINE
----------------------------------------------
84: ppuVar6 = __ctype_b_loc();
	00006ef9:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
85: found_revision = ((*ppuVar6)[uVar3 & 0xff] & 0x2000) != 0;
	00006efe:MOV RDX,qword ptr [RAX]
	00006f01:MOV EAX,dword ptr [RBP + -0x50]
	00006f04:MOVZX EAX,AL
	00006f07:ADD RAX,RAX
	00006f0a:ADD RAX,RDX
	00006f0d:MOVZX EAX,word ptr [RAX]
	00006f10:MOVZX EAX,AX
	00006f13:AND EAX,0x2000
	00006f18:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
86: i = 0xffffffffffffffff;
	00006f20:MOV qword ptr [RBP + -0x38],-0x1
END_OF_LINE
----------------------------------------------
88: else if (i != 0xffffffffffffffff) {
	00006f2a:CMP qword ptr [RBP + -0x38],-0x1
	00006f2f:JZ 0x00006f5c
END_OF_LINE
----------------------------------------------
89: if (uVar3 == (int)pcVar4[i]) {
	00006f39:ADD RAX,RDX
	00006f3c:MOVZX EAX,byte ptr [RAX]
	00006f3f:MOVSX EAX,AL
	00006f42:CMP dword ptr [RBP + -0x50],EAX
	00006f45:JNZ 0x00006f51
END_OF_LINE
----------------------------------------------
90: i = i + 1;
	00006f4b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
93: i = 0xffffffffffffffff;
	00006f51:MOV RAX,-0x1
END_OF_LINE
----------------------------------------------
96: if ((i == 0xffffffffffffffff) &&
	00006f5c:CMP qword ptr [RBP + -0x38],-0x1
	00006f61:JNZ 0x00006f8e
	00006f63:CALL 0x000060a0
	00006f68:MOV RDX,qword ptr [RAX]
	00006f6b:MOV EAX,dword ptr [RBP + -0x50]
	00006f6e:MOVZX EAX,AL
	00006f71:ADD RAX,RAX
	00006f74:ADD RAX,RDX
	00006f77:MOVZX EAX,word ptr [RAX]
	00006f7a:MOVZX EAX,AX
	00006f7d:AND EAX,0x2000
	00006f82:TEST EAX,EAX
	00006f84:JZ 0x00006f8e
END_OF_LINE
----------------------------------------------
97: (ppuVar6 = __ctype_b_loc(), ((*ppuVar6)[uVar3 & 0xff] & 0x2000) != 0)) {
	00006f63:CALL 0x000060a0
	00006f68:MOV RDX,qword ptr [RAX]
	00006f6b:MOV EAX,dword ptr [RBP + -0x50]
	00006f6e:MOVZX EAX,AL
	00006f71:ADD RAX,RAX
	00006f74:ADD RAX,RDX
	00006f77:MOVZX EAX,word ptr [RAX]
	00006f7a:MOVZX EAX,AX
	00006f7d:AND EAX,0x2000
	00006f82:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
98: i = 0;
	00006f86:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
102: if (revision != (char *)0x0) {
	00006fb1:TEST RAX,RAX
	00006fb4:JZ 0x00006fc1
END_OF_LINE
----------------------------------------------
103: report_revision(found_revision);
	00006fbc:CALL 0x00006336
END_OF_LINE
----------------------------------------------
105: Fseek((FILE *)__stream,0,0);
	00006fd2:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
106: for (tibufsize = 0x2000; tibufsize < maxlen; tibufsize = tibufsize * 2) {
	00006fd7:MOV qword ptr [0x0003e208],0x2000
	00006fe2:JMP 0x00006ff5
	00006fe4:MOV RAX,qword ptr [0x0003e208]
	00006feb:ADD RAX,RAX
	00006fee:MOV qword ptr [0x0003e208],RAX
	00006ff5:MOV RAX,qword ptr [0x0003e208]
	00006ffc:CMP qword ptr [RBP + -0x40],RAX
	00007000:JA 0x00006fe4
END_OF_LINE
----------------------------------------------
108: lines_per_buf = tibufsize / maxlen;
	0000700e:DIV qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
109: tireclen = maxlen;
	0000701d:MOV qword ptr [0x0003e228],RAX
END_OF_LINE
----------------------------------------------
110: tibuf[0] = (char *)xmalloc(tibufsize * 2);
	0000702b:ADD RAX,RAX
	0000702e:MOV RDI,RAX
	00007031:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
111: tibuf[1] = tibuf[0] + tibufsize;
	0000704b:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
112: line = 1;
	00007055:MOV qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
113: while( true ) {
	000070e5:JZ 0x00007144
END_OF_LINE
----------------------------------------------
114: pcVar4 = tibuf[0] + (line % lines_per_buf) * maxlen;
	00007071:IDIV RCX
	00007074:MOV RAX,RDX
	00007077:IMUL RAX,qword ptr [RBP + -0x40]
	0000707c:ADD RAX,RSI
END_OF_LINE
----------------------------------------------
115: if ((line % lines_per_buf == 0) && (sVar7 = write(tifd,tibuf[0],tibufsize), sVar7 != tibufsize))
	00007098:IDIV RCX
	0000709b:MOV RAX,RDX
	0000709e:TEST RAX,RAX
	000070a1:JNZ 0x000070d2
	000070a3:MOV RDX,qword ptr [0x0003e208]
	000070aa:MOV RCX,qword ptr [0x0003e210]
	000070b1:MOV EAX,dword ptr [0x0003e010]
	000070b7:MOV RSI,RCX
	000070ba:MOV EDI,EAX
	000070bc:CALL 0x00005a50
	000070c1:MOV RDX,qword ptr [0x0003e208]
	000070c8:CMP RAX,RDX
	000070cb:JZ 0x000070d2
END_OF_LINE
----------------------------------------------
118: write_fatal();
	000070cd:CALL 0x00018705
END_OF_LINE
----------------------------------------------
120: c = getc(__stream);
	000070d9:CALL 0x00006070
END_OF_LINE
----------------------------------------------
121: p = pcVar4;
	000070e5:JZ 0x00007144
END_OF_LINE
----------------------------------------------
122: if (c == -1) break;
	000070e1:CMP dword ptr [RBP + -0x50],-0x1
	000070e5:JZ 0x00007144
END_OF_LINE
----------------------------------------------
123: while( true ) {
	000070fc:JNZ 0x0000710f
END_OF_LINE
----------------------------------------------
124: pcVar1 = p + 1;
	000070eb:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
125: *p = (char)c;
	000070f6:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
126: if (c == 10) break;
	000070f8:CMP dword ptr [RBP + -0x50],0xa
	000070fc:JNZ 0x0000710f
END_OF_LINE
----------------------------------------------
127: c = getc(__stream);
	00007116:CALL 0x00006070
END_OF_LINE
----------------------------------------------
128: p = pcVar1;
	00007122:JNZ 0x000070e7
END_OF_LINE
----------------------------------------------
129: if (c == -1) {
	0000711e:CMP dword ptr [RBP + -0x50],-0x1
	00007122:JNZ 0x000070e7
END_OF_LINE
----------------------------------------------
130: last_line_size = (long)pcVar1 - (long)pcVar4;
	00007128:SUB RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
131: line = line + 1;
	00007133:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
132: goto LAB_00007145;
	00007145:MOV RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
135: last_line_size = (long)pcVar1 - (long)pcVar4;
	00007102:SUB RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
136: line = line + 1;
	0000713a:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
138: LAB_00007145:
	00007145:MOV RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
139: iVar2 = ferror(__stream);
	0000714c:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
140: if ((iVar2 != 0) || (iVar2 = fclose(__stream), iVar2 != 0)) {
	00007151:TEST EAX,EAX
	00007153:JNZ 0x00007165
	00007155:MOV RAX,qword ptr [RBP + -0x20]
	00007159:MOV RDI,RAX
	0000715c:CALL 0x00005a80
	00007161:TEST EAX,EAX
	00007163:JZ 0x0000716a
END_OF_LINE
----------------------------------------------
142: read_fatal();
	00007165:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
144: if ((line % lines_per_buf != 0) && (sVar7 = write(tifd,tibuf[0],tibufsize), sVar7 != tibufsize)) {
	00007177:IDIV RCX
	0000717a:MOV RAX,RDX
	0000717d:TEST RAX,RAX
	00007180:JZ 0x000071b1
	00007182:MOV RDX,qword ptr [0x0003e208]
	00007189:MOV RCX,qword ptr [0x0003e210]
	00007190:MOV EAX,dword ptr [0x0003e010]
	00007196:MOV RSI,RCX
	00007199:MOV EDI,EAX
	0000719b:CALL 0x00005a50
	000071a0:MOV RDX,qword ptr [0x0003e208]
	000071a7:CMP RAX,RDX
	000071aa:JZ 0x000071b1
END_OF_LINE
----------------------------------------------
146: write_fatal();
	000071ac:CALL 0x00018705
END_OF_LINE
----------------------------------------------
148: input_lines = line + -1;
	000071b5:LEA RDX,[RAX + -0x1]
	000071b9:LEA RAX,[0x3e1f0]
	000071c0:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
149: return;
	000071c5:RET
END_OF_LINE



Function: ifetch
----------------------------------------------
20: if ((line < 1) || (input_lines < line)) {
	000071e4:JLE 0x000071f6
	000071e6:LEA RAX,[0x3e1f0]
	000071ed:MOV RAX,qword ptr [RAX]
	000071f0:CMP qword ptr [RBP + -0x28],RAX
	000071f4:JLE 0x0000720d
END_OF_LINE
----------------------------------------------
21: *psize = 0;
	000071fa:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
22: pcVar3 = "";
	00007201:LEA RAX,[0x312df]
END_OF_LINE
----------------------------------------------
24: else if (using_plan_a) {
	00007219:JZ 0x00007264
END_OF_LINE
----------------------------------------------
25: pcVar3 = i_ptr[line];
	0000722a:ADD RAX,RDX
	0000722d:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
26: *psize = (long)i_ptr[line + 1] - (long)pcVar3;
	0000723f:ADD RAX,0x1
	00007243:SHL RAX,0x3
	00007247:ADD RAX,RDX
	0000724a:MOV RAX,qword ptr [RAX]
	0000724d:SUB RAX,qword ptr [RBP + -0x8]
	00007251:MOV RDX,RAX
	00007254:MOV RAX,qword ptr [RBP + -0x38]
	00007258:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
29: lVar7 = line % lines_per_buf;
	00007271:IDIV RCX
END_OF_LINE
----------------------------------------------
30: lVar4 = line - lVar7;
	0000727c:SUB RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
31: if (lVar4 == tiline[0]) {
	0000728b:CMP qword ptr [RBP + -0x10],RAX
	0000728f:JNZ 0x0000729a
END_OF_LINE
----------------------------------------------
32: whichbuf_local = false;
	00007291:MOV byte ptr [RBP + -0x2c],0x0
END_OF_LINE
----------------------------------------------
34: else if (lVar4 == tiline[1]) {
	000072a1:CMP qword ptr [RBP + -0x10],RAX
	000072a5:JNZ 0x000072b0
END_OF_LINE
----------------------------------------------
35: whichbuf_local = true;
	000072a7:MOV byte ptr [RBP + -0x2c],0x1
END_OF_LINE
----------------------------------------------
38: tiline[(int)(uint)whichbuf] = lVar4;
	000072b4:CDQE
	000072b6:LEA RCX,[RAX*0x8]
	000072be:LEA RDX,[0x3e020]
	000072c5:MOV RAX,qword ptr [RBP + -0x10]
	000072c9:MOV qword ptr [RCX + RDX*0x1],RAX
END_OF_LINE
----------------------------------------------
39: _Var5 = lseek(tifd,tibufsize * (lVar4 / lines_per_buf),0);
	000072da:IDIV RSI
	000072dd:MOV RDX,RAX
	000072e0:MOV RAX,qword ptr [0x0003e208]
	000072e7:IMUL RAX,RDX
	000072eb:MOV RCX,RAX
	000072ee:MOV EAX,dword ptr [0x0003e010]
	000072f4:MOV EDX,0x0
	000072f9:MOV RSI,RCX
	000072fc:MOV EDI,EAX
	000072fe:CALL 0x00005bd0
END_OF_LINE
----------------------------------------------
40: if ((_Var5 == -1) ||
	00007303:CMP RAX,-0x1
	00007307:JZ 0x0000733e
	00007309:MOV RDX,qword ptr [0x0003e208]
	00007310:MOVZX EAX,byte ptr [RBP + -0x2c]
	00007314:CDQE
	00007316:LEA RCX,[RAX*0x8]
	0000731e:LEA RAX,[0x3e210]
	00007325:MOV RCX,qword ptr [RCX + RAX*0x1]
	00007329:MOV EAX,dword ptr [0x0003e010]
	0000732f:MOV RSI,RCX
	00007332:MOV EDI,EAX
	00007334:CALL 0x00005c80
	00007339:TEST RAX,RAX
	0000733c:JNS 0x00007343
END_OF_LINE
----------------------------------------------
41: (sVar6 = read(tifd,tibuf[(int)(uint)whichbuf],tibufsize), whichbuf_local = whichbuf,
	00007314:CDQE
	00007316:LEA RCX,[RAX*0x8]
	0000731e:LEA RAX,[0x3e210]
	00007325:MOV RCX,qword ptr [RCX + RAX*0x1]
	00007329:MOV EAX,dword ptr [0x0003e010]
	0000732f:MOV RSI,RCX
	00007332:MOV EDI,EAX
	00007334:CALL 0x00005c80
	00007339:TEST RAX,RAX
	0000733c:JNS 0x00007343
END_OF_LINE
----------------------------------------------
42: sVar6 < 0)) {
	00007339:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
44: read_fatal();
	0000733e:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
47: pcVar3 = tibuf[(int)(uint)whichbuf_local] + lVar7 * tireclen;
	00007347:CDQE
	00007349:LEA RDX,[RAX*0x8]
	00007351:LEA RAX,[0x3e210]
	00007358:MOV RCX,qword ptr [RDX + RAX*0x1]
	0000735c:MOV RDX,qword ptr [0x0003e228]
	00007363:MOV RAX,qword ptr [RBP + -0x18]
	00007367:IMUL RAX,RDX
	0000736b:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
48: q = pcVar3;
	00007380:JNZ 0x00007392
END_OF_LINE
----------------------------------------------
49: if (line == input_lines) {
	0000737c:CMP qword ptr [RBP + -0x28],RAX
	00007380:JNZ 0x00007392
END_OF_LINE
----------------------------------------------
50: *psize = last_line_size;
	0000738d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
54: pcVar1 = q + 1;
	0000739f:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
55: cVar2 = *q;
	000073a7:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
56: q = pcVar1;
	000073ac:JNZ 0x0000739b
END_OF_LINE
----------------------------------------------
57: } while (cVar2 != '\n');
	000073aa:CMP AL,0xa
	000073ac:JNZ 0x0000739b
END_OF_LINE
----------------------------------------------
58: *psize = (long)pcVar1 - (long)pcVar3;
	000073b2:SUB RAX,qword ptr [RBP + -0x8]
	000073b6:MOV RDX,RAX
	000073b9:MOV RAX,qword ptr [RBP + -0x38]
	000073bd:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
61: return pcVar3;
	000073c5:RET
END_OF_LINE



Function: pch_timestamp
----------------------------------------------
7: return p_timestamp[(int)(uint)which];
	000073da:CDQE
	000073dc:SHL RAX,0x4
	000073e0:ADD RAX,RDX
	000073e3:MOV RDX,qword ptr [RAX + 0x8]
	000073e7:MOV RAX,qword ptr [RAX]
	000073ea:POP RBP
	000073eb:RET
END_OF_LINE



Function: main
----------------------------------------------
70: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000740b:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
71: somefailed = false;
	0000741a:MOV byte ptr [RBP + -0x2ab],0x0
END_OF_LINE
----------------------------------------------
72: written_to_rejname = false;
	00007421:MOV byte ptr [RBP + -0x2aa],0x0
END_OF_LINE
----------------------------------------------
73: skip_reject_file = false;
	00007428:MOV byte ptr [RBP + -0x2a9],0x0
END_OF_LINE
----------------------------------------------
74: apply_empty_patch = false;
	0000742f:MOV byte ptr [RBP + -0x2a8],0x0
END_OF_LINE
----------------------------------------------
75: outfd = -1;
	00007436:MOV dword ptr [RBP + -0x29c],0xffffffff
END_OF_LINE
----------------------------------------------
76: have_git_diff = false;
	00007440:MOV byte ptr [RBP + -0x2a7],0x0
END_OF_LINE
----------------------------------------------
77: exit_failure = 2;
	0000744e:MOV dword ptr [RAX],0x2
END_OF_LINE
----------------------------------------------
78: set_program_name(*argv);
	0000745b:MOV RAX,qword ptr [RAX]
	0000745e:MOV RDI,RAX
	00007461:CALL 0x00028a6c
END_OF_LINE
----------------------------------------------
79: init_time();
	00007466:CALL 0x00019400
END_OF_LINE
----------------------------------------------
80: setbuf(pFRam0000000000144490,serrbuf);
	00007482:CALL 0x00005b20
END_OF_LINE
----------------------------------------------
81: bufsize = 0x2000;
	0000748e:MOV qword ptr [RAX],0x2000
END_OF_LINE
----------------------------------------------
82: buf = (char *)xmalloc(0x2000);
	000074a2:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
83: strippath = -1;
	000074bb:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
84: val = getenv("QUOTING_STYLE");
	000074cb:CALL 0x00005880
END_OF_LINE
----------------------------------------------
85: if (val == (char *)0x0) {
	000074d7:CMP qword ptr [RBP + -0x248],0x0
	000074df:JZ 0x00007503
END_OF_LINE
----------------------------------------------
86: i = ~literal_quoting_style;
	00007503:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
89: pVar7 = argmatch(val,quoting_style_args,(char *)0x0,0);
	000074fc:CALL 0x0001d085
END_OF_LINE
----------------------------------------------
90: i = (int)pVar7;
	000074fc:CALL 0x0001d085
END_OF_LINE
----------------------------------------------
92: s_00 = i;
	00007515:JS 0x0000751f
END_OF_LINE
----------------------------------------------
93: if (i < 0) {
	0000750e:CMP dword ptr [RBP + -0x288],0x0
	00007515:JS 0x0000751f
END_OF_LINE
----------------------------------------------
94: s_00 = shell_quoting_style;
	0000751f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
96: set_quoting_style((quoting_options *)0x0,s_00);
	0000752b:CALL 0x00028be0
END_OF_LINE
----------------------------------------------
97: pcVar8 = getenv("POSIXLY_CORRECT");
	0000753a:CALL 0x00005880
END_OF_LINE
----------------------------------------------
98: posixly_correct = pcVar8 != (char *)0x0;
	0000753f:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
99: backup_if_mismatch = !posixly_correct;
	0000755b:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
100: val = getenv("PATCH_GET");
	00007579:CALL 0x00005880
END_OF_LINE
----------------------------------------------
101: if (val == (char *)0x0) {
	00007585:CMP qword ptr [RBP + -0x248],0x0
	0000758d:JZ 0x000075ac
END_OF_LINE
----------------------------------------------
102: patch_get = 0;
	000075ac:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
105: patch_get = numeric_string(val,true,"PATCH_GET value");
	000075a5:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
107: val = getenv("SIMPLE_BACKUP_SUFFIX");
	000075c4:CALL 0x00005880
END_OF_LINE
----------------------------------------------
108: if ((val == (char *)0x0) || (simple_backup_suffix = val, *val == '\0')) {
	000075d0:CMP qword ptr [RBP + -0x248],0x0
	000075d8:JZ 0x000075f1
	000075da:MOV RAX,qword ptr [RBP + -0x248]
	000075e1:MOVZX EAX,byte ptr [RAX]
	000075e4:TEST AL,AL
	000075e6:JZ 0x000075f1
END_OF_LINE
----------------------------------------------
109: simple_backup_suffix = ".orig";
	000075f1:LEA RAX,[0x3137e]
END_OF_LINE
----------------------------------------------
111: version_control = getenv("PATCH_VERSION_CONTROL");
	0000760c:CALL 0x00005880
END_OF_LINE
----------------------------------------------
112: if (version_control == (char *)0x0) {
	0000761f:TEST RAX,RAX
	00007622:JZ 0x00007634
END_OF_LINE
----------------------------------------------
113: version_control = getenv("VERSION_CONTROL");
	0000763e:CALL 0x00005880
END_OF_LINE
----------------------------------------------
114: if (version_control != (char *)0x0) {
	00007651:TEST RAX,RAX
	00007654:JZ 0x00007664
END_OF_LINE
----------------------------------------------
115: version_control_context = "$VERSION_CONTROL";
	0000765d:MOV qword ptr [0x0003e3b8],RAX
END_OF_LINE
----------------------------------------------
119: version_control_context = "$PATCH_VERSION_CONTROL";
	0000762b:MOV qword ptr [0x0003e3b8],RAX
END_OF_LINE
----------------------------------------------
121: init_backup_hash_table();
	00007664:CALL 0x00016175
END_OF_LINE
----------------------------------------------
122: init_files_to_delete();
	00007669:CALL 0x0000bf66
END_OF_LINE
----------------------------------------------
123: init_files_to_output();
	0000766e:CALL 0x0000c5f0
END_OF_LINE
----------------------------------------------
124: Argc = argc;
	0000768d:CALL 0x00009457
END_OF_LINE
----------------------------------------------
125: Argv = argv;
	0000768d:CALL 0x00009457
END_OF_LINE
----------------------------------------------
126: get_some_switches();
	0000768d:CALL 0x00009457
END_OF_LINE
----------------------------------------------
127: if (set_utc != false) {
	0000769c:TEST AL,AL
	0000769e:JZ 0x000076be
END_OF_LINE
----------------------------------------------
128: setenv("TZ","UTC",1);
	000076b9:CALL 0x00005a30
END_OF_LINE
----------------------------------------------
130: if ((backup_if_mismatch | make_backups) != 0) {
	000076cc:OR EAX,EDX
	000076ce:TEST AL,AL
	000076d0:JZ 0x000076f4
END_OF_LINE
----------------------------------------------
131: backup_type = get_version(version_control_context,version_control);
	000076e6:CALL 0x0001dd85
END_OF_LINE
----------------------------------------------
133: init_output(&outstate);
	000076f4:LEA RAX,[RBP + -0x210]
	000076fb:MOV RDI,RAX
	000076fe:CALL 0x0000b6df
END_OF_LINE
----------------------------------------------
134: if (outfile != (char *)0x0) {
	0000770d:TEST RAX,RAX
	00007710:JZ 0x0000772b
END_OF_LINE
----------------------------------------------
135: outstate.ofp = open_outfile(outfile);
	0000771f:CALL 0x0000b709
END_OF_LINE
----------------------------------------------
137: set_signals(false);
	00007730:CALL 0x00018ec8
END_OF_LINE
----------------------------------------------
138: if ((inname != (char *)0x0) && (unsafe = true, outfile != (char *)0x0)) {
	0000773f:TEST RAX,RAX
	00007742:JZ 0x0000774e
	00007744:LEA RAX,[0x40580]
	0000774b:MOV byte ptr [RAX],0x1
	0000774e:LEA RAX,[0x3e258]
	00007755:MOV RAX,qword ptr [RAX]
	00007758:TEST RAX,RAX
	0000775b:JZ 0x0000778a
	0000775d:LEA RAX,[0x3e260]
	00007764:MOV RAX,qword ptr [RAX]
	00007767:TEST RAX,RAX
	0000776a:JZ 0x0000778a
END_OF_LINE
----------------------------------------------
139: apply_empty_patch = true;
	0000776c:MOV byte ptr [RBP + -0x2a8],0x1
END_OF_LINE
----------------------------------------------
140: file_type = 0x8000;
	00007773:MOV dword ptr [RBP + -0x2a0],0x8000
END_OF_LINE
----------------------------------------------
141: inerrno = -1;
	00007784:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
143: open_patch_file(patchname);
	00007794:CALL 0x0000c9ef
END_OF_LINE
----------------------------------------------
145: if ((inname == (char *)0x0) && (posixly_correct != true)) {
	000091fb:TEST RAX,RAX
	000091fe:JNZ 0x00009218
	00009200:LEA RAX,[0x3e311]
	00009207:MOVZX EAX,byte ptr [RAX]
	0000920a:XOR EAX,0x1
	0000920d:TEST AL,AL
	0000920f:JZ 0x00009218
END_OF_LINE
----------------------------------------------
146: _Var2 = true;
	00009211:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
149: _Var2 = false;
	00009218:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
151: ctx = (FILE *)(ulong)_Var2;
	0000922d:MOV EDI,EAX
END_OF_LINE
----------------------------------------------
152: _Var2 = there_is_another_patch(_Var2,&file_type);
	00009223:LEA RDX,[RBP + -0x2a0]
	0000922a:MOV RSI,RDX
	0000922d:MOV EDI,EAX
	0000922f:CALL 0x0000d031
END_OF_LINE
----------------------------------------------
153: if ((!_Var2) && (apply_empty_patch == false)) {
	00009236:JNZ 0x0000779e
	0000923c:CMP byte ptr [RBP + -0x2a8],0x0
	00009243:JNZ 0x0000779e
END_OF_LINE
----------------------------------------------
154: if ((outstate.ofp != (FILE *)0x0) &&
	00009250:TEST RAX,RAX
	00009253:JZ 0x00009280
	00009255:MOV RAX,qword ptr [RBP + -0x210]
	0000925c:MOV RDI,RAX
	0000925f:CALL 0x000059a0
	00009264:TEST EAX,EAX
	00009266:JNZ 0x0000927b
	00009268:MOV RAX,qword ptr [RBP + -0x210]
	0000926f:MOV RDI,RAX
	00009272:CALL 0x00005a80
	00009277:TEST EAX,EAX
	00009279:JZ 0x00009280
END_OF_LINE
----------------------------------------------
155: ((iVar6 = ferror((FILE *)outstate.ofp), iVar6 != 0 ||
	0000925f:CALL 0x000059a0
	00009264:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
156: (ctx = outstate.ofp, iVar6 = fclose((FILE *)outstate.ofp), iVar6 != 0)))) {
	00009272:CALL 0x00005a80
	00009277:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
158: write_fatal();
	0000927b:CALL 0x00018705
END_OF_LINE
----------------------------------------------
160: cleanup((EVP_PKEY_CTX *)ctx);
	00009280:CALL 0x0000c89a
END_OF_LINE
----------------------------------------------
161: delete_files();
	00009285:CALL 0x0000c163
END_OF_LINE
----------------------------------------------
162: if (somefailed != false) {
	00009291:TEST AL,AL
	00009293:JZ 0x0000929f
END_OF_LINE
----------------------------------------------
164: exit(1);
	0000929a:CALL 0x00005ff0
END_OF_LINE
----------------------------------------------
166: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000092a8:SUB RDX,qword ptr FS:[0x28]
	000092b1:JZ 0x000092b8
END_OF_LINE
----------------------------------------------
168: __stack_chk_fail();
	000092b3:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
170: return 0;
	000092c0:RET
END_OF_LINE
----------------------------------------------
172: hunk = 0;
	0000779e:MOV dword ptr [RBP + -0x298],0x0
END_OF_LINE
----------------------------------------------
173: failed = 0;
	000077a8:MOV dword ptr [RBP + -0x294],0x0
END_OF_LINE
----------------------------------------------
174: mismatch = false;
	000077b2:MOV byte ptr [RBP + -0x2a6],0x0
END_OF_LINE
----------------------------------------------
175: outname = (char *)0x0;
	000077b9:MOV qword ptr [RBP + -0x270],0x0
END_OF_LINE
----------------------------------------------
176: if (skip_rest_of_patch != false) {
	000077ce:TEST AL,AL
	000077d0:JZ 0x000077d9
END_OF_LINE
----------------------------------------------
177: somefailed = true;
	000077d2:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
179: _Var2 = pch_git_diff();
	000077d9:CALL 0x00013dca
END_OF_LINE
----------------------------------------------
180: if (have_git_diff != _Var2) {
	000077de:CMP byte ptr [RBP + -0x2a7],AL
	000077e4:JZ 0x00007825
END_OF_LINE
----------------------------------------------
181: if (have_git_diff != false) {
	000077e6:CMP byte ptr [RBP + -0x2a7],0x0
	000077ed:JZ 0x00007806
END_OF_LINE
----------------------------------------------
182: output_files((stat *)0x0);
	000077f4:CALL 0x0000c663
END_OF_LINE
----------------------------------------------
183: inerrno = -1;
	00007800:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
185: have_git_diff = have_git_diff == false;
	0000780d:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
187: if (TMPREJNAME_needs_removal != false) {
	0000782c:TEST AL,AL
	0000782e:JZ 0x0000786f
END_OF_LINE
----------------------------------------------
188: if (rejfp != (FILE *)0x0) {
	00007837:TEST RAX,RAX
	0000783a:JZ 0x00007856
END_OF_LINE
----------------------------------------------
189: fclose((FILE *)rejfp);
	00007846:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
190: rejfp = (FILE *)0x0;
	0000784b:MOV qword ptr [0x0003e3e0],0x0
END_OF_LINE
----------------------------------------------
192: remove_if_needed(TMPREJNAME,&TMPREJNAME_needs_removal);
	0000786a:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
194: if (TMPOUTNAME_needs_removal != false) {
	00007879:TEST AL,AL
	0000787b:JZ 0x000078b9
END_OF_LINE
----------------------------------------------
195: if (outfd != -1) {
	0000787d:CMP dword ptr [RBP + -0x29c],-0x1
	00007884:JZ 0x0000789d
END_OF_LINE
----------------------------------------------
196: close(outfd);
	0000788e:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
197: outfd = -1;
	00007893:MOV dword ptr [RBP + -0x29c],0xffffffff
END_OF_LINE
----------------------------------------------
199: remove_if_needed(TMPOUTNAME,&TMPOUTNAME_needs_removal);
	000078b4:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
201: remove_if_needed(TMPEDNAME,&TMPEDNAME_needs_removal);
	000078d0:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
202: if ((skip_rest_of_patch != true) && (file_type == 0)) {
	000078e2:TEST AL,AL
	000078e4:JZ 0x0000797f
	000078ea:MOV EAX,dword ptr [RBP + -0x2a0]
	000078f0:TEST EAX,EAX
	000078f2:JNZ 0x0000797f
END_OF_LINE
----------------------------------------------
203: mVar3 = pch_mode(reverse == false);
	00007905:TEST EAX,EAX
	00007907:SETNZ AL
	0000790a:XOR EAX,0x1
	0000790d:MOVZX EAX,AL
	00007910:AND EAX,0x1
	00007913:MOVZX EAX,AL
	00007916:MOV EDI,EAX
	00007918:CALL 0x00013e2b
END_OF_LINE
----------------------------------------------
204: mVar4 = pch_mode(reverse);
	00007934:CALL 0x00013e2b
END_OF_LINE
----------------------------------------------
205: pcVar8 = quotearg(inname);
	0000794d:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
206: say("File %s: can\'t change file type from 0%o to 0%o.\n",pcVar8,(ulong)(mVar4 & 0xf000),
	00007939:AND EAX,0xf000
	0000793e:MOV EBX,EAX
	00007940:LEA RAX,[0x3e258]
	00007947:MOV RAX,qword ptr [RAX]
	0000794a:MOV RDI,RAX
	0000794d:CALL 0x0002a515
	00007952:MOV ECX,R12D
	00007955:MOV EDX,EBX
	00007957:MOV RSI,RAX
	0000795a:LEA RAX,[0x313e0]
	00007961:MOV RDI,RAX
	00007964:MOV EAX,0x0
	00007969:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
207: (ulong)(mVar3 & 0xf000));
	0000791d:AND EAX,0xf000
END_OF_LINE
----------------------------------------------
208: skip_rest_of_patch = true;
	00007975:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
209: somefailed = true;
	00007978:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
211: if (skip_rest_of_patch != true) {
	0000798c:TEST AL,AL
	0000798e:JZ 0x000079f5
END_OF_LINE
----------------------------------------------
212: if (outfile == (char *)0x0) {
	0000799a:TEST RAX,RAX
	0000799d:JZ 0x000079b2
END_OF_LINE
----------------------------------------------
213: _Var2 = pch_copy();
	000079b2:CALL 0x00013b87
END_OF_LINE
----------------------------------------------
214: if ((_Var2) || (_Var2 = pch_rename(), _Var2)) {
	000079b9:JNZ 0x000079c4
	000079bb:CALL 0x00013bbd
	000079c0:TEST AL,AL
	000079c2:JZ 0x000079e4
END_OF_LINE
----------------------------------------------
215: outname = pch_name((uint)(reverse ^ 1));
	000079ce:XOR EAX,0x1
	000079d1:MOVZX EAX,AL
	000079d4:MOV EDI,EAX
	000079d6:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
218: outname = inname;
	000079ee:MOV qword ptr [RBP + -0x270],RAX
END_OF_LINE
----------------------------------------------
222: outname = outfile;
	000079a9:MOV qword ptr [RBP + -0x270],RAX
END_OF_LINE
----------------------------------------------
225: _Var2 = pch_git_diff();
	000079f5:CALL 0x00013dca
END_OF_LINE
----------------------------------------------
226: if ((_Var2) && (skip_rest_of_patch != true)) {
	000079fc:JZ 0x00007bd0
	00007a02:LEA RAX,[0x3e360]
	00007a09:MOVZX EAX,byte ptr [RAX]
	00007a0c:XOR EAX,0x1
	00007a0f:TEST AL,AL
	00007a11:JZ 0x00007bd0
END_OF_LINE
----------------------------------------------
227: outerrno = 0;
	00007a17:MOV dword ptr [RBP + -0x290],0x0
END_OF_LINE
----------------------------------------------
228: iVar6 = strcmp(inname,outname);
	00007a38:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
229: if (iVar6 == 0) {
	00007a3d:TEST EAX,EAX
	00007a3f:JNZ 0x00007b3d
END_OF_LINE
----------------------------------------------
230: if (inerrno == -1) {
	00007a4e:CMP EAX,-0x1
	00007a51:JNZ 0x00007a78
END_OF_LINE
----------------------------------------------
231: inerrno = stat_file(inname,&instat);
	00007a6a:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
233: outstat.st_dev = instat.st_dev;
	00007a86:MOV qword ptr [RBP + -0xc0],RCX
END_OF_LINE
----------------------------------------------
234: outstat.st_ino = instat.st_ino;
	00007a8d:MOV qword ptr [RBP + -0xb8],RBX
END_OF_LINE
----------------------------------------------
235: outstat.st_uid = instat.st_uid;
	00007a98:MOV RBX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
236: outstat.st_mode = instat.st_mode;
	00007a98:MOV RBX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
237: outstat.st_nlink = instat.st_nlink;
	00007a9c:MOV qword ptr [RBP + -0xb0],RCX
END_OF_LINE
----------------------------------------------
238: outstat.st_gid = instat.st_gid;
	00007ab2:MOV qword ptr [RBP + -0xa0],RCX
END_OF_LINE
----------------------------------------------
239: outstat.__pad0 = instat.__pad0;
	00007ab2:MOV qword ptr [RBP + -0xa0],RCX
END_OF_LINE
----------------------------------------------
240: outstat.st_rdev = instat.st_rdev;
	00007ab9:MOV qword ptr [RBP + -0x98],RBX
END_OF_LINE
----------------------------------------------
241: outstat.st_size = instat.st_size;
	00007ac8:MOV qword ptr [RBP + -0x90],RCX
END_OF_LINE
----------------------------------------------
242: outstat.st_blksize = instat.st_blksize;
	00007acf:MOV qword ptr [RBP + -0x88],RBX
END_OF_LINE
----------------------------------------------
243: outstat.st_blocks = instat.st_blocks;
	00007ade:MOV qword ptr [RBP + -0x80],RCX
END_OF_LINE
----------------------------------------------
244: outstat.st_atim.tv_sec = instat.st_atim.tv_sec;
	00007ae2:MOV qword ptr [RBP + -0x78],RBX
END_OF_LINE
----------------------------------------------
245: outstat.st_atim.tv_nsec = instat.st_atim.tv_nsec;
	00007aee:MOV qword ptr [RBP + -0x70],RCX
END_OF_LINE
----------------------------------------------
246: outstat.st_mtim.tv_sec = instat.st_mtim.tv_sec;
	00007af2:MOV qword ptr [RBP + -0x68],RBX
END_OF_LINE
----------------------------------------------
247: outstat.st_mtim.tv_nsec = instat.st_mtim.tv_nsec;
	00007afe:MOV qword ptr [RBP + -0x60],RCX
END_OF_LINE
----------------------------------------------
248: outstat.st_ctim.tv_sec = instat.st_ctim.tv_sec;
	00007b02:MOV qword ptr [RBP + -0x58],RBX
END_OF_LINE
----------------------------------------------
249: outstat.st_ctim.tv_nsec = instat.st_ctim.tv_nsec;
	00007b0e:MOV qword ptr [RBP + -0x50],RCX
END_OF_LINE
----------------------------------------------
250: outstat.__glibc_reserved[0] = instat.__glibc_reserved[0];
	00007b12:MOV qword ptr [RBP + -0x48],RBX
END_OF_LINE
----------------------------------------------
251: outstat.__glibc_reserved[1] = instat.__glibc_reserved[1];
	00007b24:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
252: outstat.__glibc_reserved[2] = instat.__glibc_reserved[2];
	00007b28:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
253: outerrno = inerrno;
	00007b35:MOV dword ptr [RBP + -0x290],EAX
END_OF_LINE
----------------------------------------------
256: outerrno = stat_file(outname,&outstat);
	00007b3d:LEA RDX,[RBP + -0xc0]
	00007b44:MOV RAX,qword ptr [RBP + -0x270]
	00007b4b:MOV RSI,RDX
	00007b4e:MOV RDI,RAX
	00007b51:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
258: if (outerrno == 0) {
	00007b5c:CMP dword ptr [RBP + -0x290],0x0
	00007b63:JNZ 0x00007bd0
END_OF_LINE
----------------------------------------------
259: _Var2 = has_queued_output(&outstat);
	00007b65:LEA RAX,[RBP + -0xc0]
	00007b6c:MOV RDI,RAX
	00007b6f:CALL 0x00016384
END_OF_LINE
----------------------------------------------
260: if (_Var2) {
	00007b76:JZ 0x00007bb3
END_OF_LINE
----------------------------------------------
261: output_files(&outstat);
	00007b78:LEA RAX,[RBP + -0xc0]
	00007b7f:MOV RDI,RAX
	00007b82:CALL 0x0000c663
END_OF_LINE
----------------------------------------------
262: outerrno = stat_file(outname,&outstat);
	00007b87:LEA RDX,[RBP + -0xc0]
	00007b8e:MOV RAX,qword ptr [RBP + -0x270]
	00007b95:MOV RSI,RDX
	00007b98:MOV RDI,RAX
	00007b9b:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
263: inerrno = -1;
	00007bad:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
265: if (outerrno == 0) {
	00007bb3:CMP dword ptr [RBP + -0x290],0x0
	00007bba:JNZ 0x00007bd0
END_OF_LINE
----------------------------------------------
266: set_queued_output(&outstat,true);
	00007bbc:LEA RAX,[RBP + -0xc0]
	00007bc3:MOV ESI,0x1
	00007bc8:MOV RDI,RAX
	00007bcb:CALL 0x00016335
END_OF_LINE
----------------------------------------------
270: if ((skip_rest_of_patch != true) && (_Var2 = get_input_file(inname,outname,file_type), !_Var2))
	00007bdd:TEST AL,AL
	00007bdf:JZ 0x00007c1b
	00007be1:MOV EDX,dword ptr [RBP + -0x2a0]
	00007be7:LEA RAX,[0x3e258]
	00007bee:MOV RAX,qword ptr [RAX]
	00007bf1:MOV RCX,qword ptr [RBP + -0x270]
	00007bf8:MOV RSI,RCX
	00007bfb:MOV RDI,RAX
	00007bfe:CALL 0x000064a4
	00007c03:XOR EAX,0x1
	00007c06:TEST AL,AL
	00007c08:JZ 0x00007c1b
END_OF_LINE
----------------------------------------------
272: skip_rest_of_patch = true;
	00007c11:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
273: somefailed = true;
	00007c14:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
275: if ((((read_only_behavior != DEFAULT_VERBOSITY) && (inerrno == 0)) &&
	00007c21:TEST EAX,EAX
	00007c23:JZ 0x00007cde
	00007c29:LEA RAX,[0x3e268]
	00007c30:MOV EAX,dword ptr [RAX]
	00007c32:TEST EAX,EAX
	00007c34:JNZ 0x00007cde
	00007c3a:LEA RAX,[0x3e280]
	00007c41:MOV EAX,dword ptr [RAX + 0x18]
	00007c44:AND EAX,0xf000
	00007c49:CMP EAX,0xa000
	00007c4e:JZ 0x00007cde
	00007c54:LEA RAX,[0x3e258]
	00007c5b:MOV RAX,qword ptr [RAX]
	00007c5e:MOV ESI,0x2
	00007c63:MOV RDI,RAX
	00007c66:CALL 0x00016070
	00007c6b:TEST EAX,EAX
	00007c6d:JZ 0x00007cde
END_OF_LINE
----------------------------------------------
276: ((instat.st_mode & 0xf000) != 0xa000)) && (iVar6 = safe_access(inname,2), iVar6 != 0)) {
	00007c44:AND EAX,0xf000
	00007c49:CMP EAX,0xa000
	00007c4e:JZ 0x00007cde
	00007c54:LEA RAX,[0x3e258]
	00007c5b:MOV RAX,qword ptr [RAX]
	00007c5e:MOV ESI,0x2
	00007c63:MOV RDI,RAX
	00007c66:CALL 0x00016070
	00007c6b:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
277: pcVar8 = quotearg(inname);
	00007c7c:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
278: say("File %s is read-only; ",pcVar8);
	00007c93:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
279: if (read_only_behavior == _ISblank) {
	00007c9e:CMP EAX,0x1
	00007ca1:JNZ 0x00007cb9
END_OF_LINE
----------------------------------------------
280: say("trying to patch anyway\n");
	00007cb2:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
283: say("refusing to patch\n");
	00007cc8:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
284: skip_rest_of_patch = true;
	00007cd4:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
285: somefailed = true;
	00007cd7:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
288: tmpoutst.st_size = -1;
	00007cde:MOV qword ptr [RBP + -0x1b0],-0x1
END_OF_LINE
----------------------------------------------
289: outfd = make_tempfile(&TMPOUTNAME,'o',outname,1,instat.st_mode & 0x1ff);
	00007cf3:AND EAX,0x1ff
	00007cf8:MOV EDX,EAX
	00007cfa:MOV RAX,qword ptr [RBP + -0x270]
	00007d01:MOV R8D,EDX
	00007d04:MOV ECX,0x1
	00007d09:MOV RDX,RAX
	00007d0c:MOV ESI,0x6f
	00007d11:LEA RAX,[0x3e338]
	00007d18:MOV RDI,RAX
	00007d1b:CALL 0x00019da4
END_OF_LINE
----------------------------------------------
290: if (outfd == -1) {
	00007d26:CMP dword ptr [RBP + -0x29c],-0x1
	00007d2d:JNZ 0x00007da8
END_OF_LINE
----------------------------------------------
291: piVar9 = __errno_location();
	00007d2f:CALL 0x00005900
END_OF_LINE
----------------------------------------------
292: if ((*piVar9 != 0x28) && (piVar9 = __errno_location(), *piVar9 != 0x12)) {
	00007d34:MOV EAX,dword ptr [RAX]
	00007d36:CMP EAX,0x28
	00007d39:JZ 0x00007d47
	00007d3b:CALL 0x00005900
	00007d40:MOV EAX,dword ptr [RAX]
	00007d42:CMP EAX,0x12
	00007d45:JNZ 0x00007d87
END_OF_LINE
----------------------------------------------
294: pfatal("Can\'t create temporary file %s",TMPOUTNAME);
	00007da3:CALL 0x00018721
END_OF_LINE
----------------------------------------------
296: pcVar8 = quotearg(outname);
	00007d51:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
297: say("Invalid file name %s -- skipping patch\n",pcVar8);
	00007d68:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
298: skip_rest_of_patch = true;
	00007d74:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
299: skip_reject_file = true;
	00007d77:MOV byte ptr [RBP + -0x2a9],0x1
END_OF_LINE
----------------------------------------------
300: somefailed = true;
	00007d7e:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
303: TMPOUTNAME_needs_removal = true;
	00007daf:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
305: if (diff_type == ED_DIFF) {
	00007dbb:CMP EAX,0x3
	00007dbe:JNZ 0x00007eb5
END_OF_LINE
----------------------------------------------
306: outstate.zero_output = false;
	00007dc4:MOV byte ptr [RBP + -0x207],0x0
END_OF_LINE
----------------------------------------------
307: somefailed = (skip_rest_of_patch | somefailed) != 0;
	00007ddc:OR EAX,EDX
	00007dde:MOVZX EAX,AL
	00007de1:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
308: do_ed_script(inname,TMPOUTNAME,&TMPOUTNAME_needs_removal,outstate.ofp);
	00007e14:CALL 0x00013f95
END_OF_LINE
----------------------------------------------
309: if (((dry_run != true) && (outfile == (char *)0x0)) && (skip_rest_of_patch != true)) {
	00007e26:TEST AL,AL
	00007e28:JZ 0x00007e99
	00007e2a:LEA RAX,[0x3e260]
	00007e31:MOV RAX,qword ptr [RAX]
	00007e34:TEST RAX,RAX
	00007e37:JNZ 0x00007e99
	00007e39:LEA RAX,[0x3e360]
	00007e40:MOVZX EAX,byte ptr [RAX]
	00007e43:XOR EAX,0x1
	00007e46:TEST AL,AL
	00007e48:JZ 0x00007e99
END_OF_LINE
----------------------------------------------
310: iVar6 = fstat(outfd,(stat *)&tmpoutst);
	00007e4a:LEA RDX,[RBP + -0x1e0]
	00007e51:MOV EAX,dword ptr [RBP + -0x29c]
	00007e57:MOV RSI,RDX
	00007e5a:MOV EDI,EAX
	00007e5c:CALL 0x00006060
END_OF_LINE
----------------------------------------------
311: if (iVar6 != 0) {
	00007e61:TEST EAX,EAX
	00007e63:JZ 0x00007e86
END_OF_LINE
----------------------------------------------
313: pfatal("%s",TMPOUTNAME);
	00007e81:CALL 0x00018721
END_OF_LINE
----------------------------------------------
315: outstate.zero_output = tmpoutst.st_size == 0;
	00007e8d:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
317: close(outfd);
	00007ea1:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
318: outfd = -1;
	00007ea6:MOV dword ptr [RBP + -0x29c],0xffffffff
END_OF_LINE
----------------------------------------------
319: LAB_00008881:
	00008881:CALL 0x0001904c
END_OF_LINE
----------------------------------------------
320: ignore_signals();
	00008881:CALL 0x0001904c
END_OF_LINE
----------------------------------------------
321: if ((skip_rest_of_patch != true) && (outfile == (char *)0x0)) {
	00008893:TEST AL,AL
	00008895:JZ 0x00008e6d
	0000889b:LEA RAX,[0x3e260]
	000088a2:MOV RAX,qword ptr [RAX]
	000088a5:TEST RAX,RAX
	000088a8:JNZ 0x00008e6d
END_OF_LINE
----------------------------------------------
322: if ((make_backups == false) &&
	000088b5:TEST AL,AL
	000088b7:JNZ 0x000088d5
	000088b9:MOVZX EAX,byte ptr [0x0003e3ad]
	000088c0:TEST AL,AL
	000088c2:JZ 0x000088dc
	000088c4:MOVZX EAX,byte ptr [RBP + -0x2a6]
	000088cb:OR EAX,dword ptr [RBP + -0x294]
	000088d1:TEST EAX,EAX
	000088d3:JZ 0x000088dc
END_OF_LINE
----------------------------------------------
323: ((backup_if_mismatch == false || (((uint)mismatch | failed) == 0)))) {
	000088c0:TEST AL,AL
	000088c2:JZ 0x000088dc
	000088c4:MOVZX EAX,byte ptr [RBP + -0x2a6]
	000088cb:OR EAX,dword ptr [RBP + -0x294]
	000088d1:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
324: backup = false;
	000088dc:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
327: backup = true;
	000088d5:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
329: if ((outstate.zero_output == false) ||
	000088f5:TEST AL,AL
	000088f7:JZ 0x000089cd
	000088fd:MOVZX EAX,byte ptr [0x0003e3c0]
	00008904:TEST AL,AL
	00008906:JNZ 0x00008955
	00008908:LEA RAX,[0x3e35b]
	0000890f:MOVZX EAX,byte ptr [RAX]
	00008912:MOVZX EAX,AL
	00008915:TEST EAX,EAX
	00008917:SETNZ AL
	0000891a:XOR EAX,0x1
	0000891d:MOVZX EAX,AL
	00008920:AND EAX,0x1
	00008923:MOVZX EAX,AL
	00008926:MOV EDI,EAX
	00008928:CALL 0x00013b30
	0000892d:CMP EAX,0x2
	00008930:JNZ 0x00008943
	00008932:LEA RAX,[0x3e311]
	00008939:MOVZX EAX,byte ptr [RAX]
	0000893c:XOR EAX,0x1
	0000893f:TEST AL,AL
	00008941:JNZ 0x00008955
	00008943:MOV EAX,dword ptr [RBP + -0x2a0]
	00008949:AND EAX,0xf000
	0000894e:CMP EAX,0xa000
	00008953:JNZ 0x000089cd
END_OF_LINE
----------------------------------------------
330: ((remove_empty_files == false &&
	00008904:TEST AL,AL
END_OF_LINE
----------------------------------------------
331: (((iVar6 = pch_says_nonexistent(reverse == false), iVar6 != 2 ||
	00008915:TEST EAX,EAX
	00008917:SETNZ AL
	0000891a:XOR EAX,0x1
	0000891d:MOVZX EAX,AL
	00008920:AND EAX,0x1
	00008923:MOVZX EAX,AL
	00008926:MOV EDI,EAX
	00008928:CALL 0x00013b30
	0000892d:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
332: (posixly_correct == true)) && ((file_type & 0xf000) != 0xa000)))))) {
	0000893f:TEST AL,AL
	00008941:JNZ 0x00008955
	00008943:MOV EAX,dword ptr [RBP + -0x2a0]
	00008949:AND EAX,0xf000
	0000894e:CMP EAX,0xa000
END_OF_LINE
----------------------------------------------
333: if ((((outstate.zero_output != true) &&
	000089d7:TEST AL,AL
	000089d9:JZ 0x00008a83
	000089df:LEA RAX,[0x3e35b]
	000089e6:MOVZX EAX,byte ptr [RAX]
	000089e9:MOVZX EAX,AL
	000089ec:TEST EAX,EAX
	000089ee:SETNZ AL
	000089f1:XOR EAX,0x1
	000089f4:MOVZX EAX,AL
	000089f7:AND EAX,0x1
	000089fa:MOVZX EAX,AL
	000089fd:MOV EDI,EAX
	000089ff:CALL 0x00013b30
	00008a04:CMP EAX,0x2
	00008a07:JNZ 0x00008a83
	00008a09:MOVZX EAX,byte ptr [0x0003e3c0]
	00008a10:TEST AL,AL
	00008a12:JNZ 0x00008a25
	00008a14:LEA RAX,[0x3e311]
	00008a1b:MOVZX EAX,byte ptr [RAX]
	00008a1e:XOR EAX,0x1
	00008a21:TEST AL,AL
	00008a23:JZ 0x00008a83
	00008a25:MOVZX EAX,byte ptr [0x0003e3a4]
	00008a2c:XOR EAX,0x1
	00008a2f:TEST AL,AL
	00008a31:JNZ 0x00008a41
	00008a33:MOVZX EAX,byte ptr [RBP + -0x2ab]
	00008a3a:XOR EAX,0x1
	00008a3d:TEST AL,AL
	00008a3f:JZ 0x00008a83
END_OF_LINE
----------------------------------------------
334: (iVar6 = pch_says_nonexistent(reverse == false), iVar6 == 2)) &&
	000089ec:TEST EAX,EAX
	000089ee:SETNZ AL
	000089f1:XOR EAX,0x1
	000089f4:MOVZX EAX,AL
	000089f7:AND EAX,0x1
	000089fa:MOVZX EAX,AL
	000089fd:MOV EDI,EAX
	000089ff:CALL 0x00013b30
	00008a04:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
335: ((remove_empty_files != false || (posixly_correct != true)))) &&
	00008a10:TEST AL,AL
	00008a12:JNZ 0x00008a25
	00008a14:LEA RAX,[0x3e311]
	00008a1b:MOVZX EAX,byte ptr [RAX]
	00008a1e:XOR EAX,0x1
	00008a21:TEST AL,AL
END_OF_LINE
----------------------------------------------
336: ((merge != true || (somefailed != true)))) {
	00008a2f:TEST AL,AL
	00008a31:JNZ 0x00008a41
	00008a33:MOVZX EAX,byte ptr [RBP + -0x2ab]
	00008a3a:XOR EAX,0x1
	00008a3d:TEST AL,AL
END_OF_LINE
----------------------------------------------
337: mismatch = true;
	00008a41:MOV byte ptr [RBP + -0x2a6],0x1
END_OF_LINE
----------------------------------------------
338: somefailed = true;
	00008a48:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
339: if (verbosity != _ISblank) {
	00008a58:CMP EAX,0x1
	00008a5b:JZ 0x00008a83
END_OF_LINE
----------------------------------------------
340: pcVar8 = quotearg(outname);
	00008a67:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
341: say("Not deleting file %s as content differs from patch\n",pcVar8);
	00008a7e:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
344: if (dry_run != true) {
	00008a90:TEST AL,AL
	00008a92:JZ 0x00008e6d
END_OF_LINE
----------------------------------------------
345: old_mode = pch_mode(reverse);
	00008aa7:CALL 0x00013e2b
END_OF_LINE
----------------------------------------------
346: new_mode = pch_mode(reverse == false);
	00008abf:TEST EAX,EAX
	00008ac1:SETNZ AL
	00008ac4:XOR EAX,0x1
	00008ac7:MOVZX EAX,AL
	00008aca:AND EAX,0x1
	00008acd:MOVZX EAX,AL
	00008ad0:MOV EDI,EAX
	00008ad2:CALL 0x00013e2b
END_OF_LINE
----------------------------------------------
347: if ((new_mode == 0) || (old_mode == new_mode)) {
	00008add:CMP dword ptr [RBP + -0x27c],0x0
	00008ae4:JZ 0x00008afb
	00008ae6:MOV EAX,dword ptr [RBP + -0x280]
	00008aec:CMP EAX,dword ptr [RBP + -0x27c]
	00008af2:JZ 0x00008afb
END_OF_LINE
----------------------------------------------
348: set_mode = false;
	00008afb:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
351: set_mode = true;
	00008af4:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
353: if ((((failed < hunk) || (diff_type == ED_DIFF)) || (set_mode != false)) ||
	00008b19:JL 0x00008b48
	00008b1b:LEA RAX,[0x3e374]
	00008b22:MOV EAX,dword ptr [RAX]
	00008b24:CMP EAX,0x3
	00008b27:JZ 0x00008b48
	00008b29:CMP byte ptr [RBP + -0x2a1],0x0
	00008b30:JNZ 0x00008b48
	00008b32:CALL 0x00013b87
	00008b37:TEST AL,AL
	00008b39:JNZ 0x00008b48
	00008b3b:CALL 0x00013bbd
	00008b40:TEST AL,AL
	00008b42:JZ 0x00008e2b
END_OF_LINE
----------------------------------------------
354: ((_Var2 = pch_copy(), _Var2 || (_Var2 = pch_rename(), _Var2)))) {
	00008b32:CALL 0x00013b87
	00008b37:TEST AL,AL
	00008b39:JNZ 0x00008b48
	00008b3b:CALL 0x00013bbd
	00008b40:TEST AL,AL
	00008b42:JZ 0x00008e2b
END_OF_LINE
----------------------------------------------
355: attr = 0;
	00008b48:MOV dword ptr [RBP + -0x28c],0x0
END_OF_LINE
----------------------------------------------
356: new_time = pch_timestamp(reverse == false);
	00008b5f:TEST EAX,EAX
	00008b61:SETNZ AL
	00008b64:XOR EAX,0x1
	00008b67:MOVZX EAX,AL
	00008b6a:AND EAX,0x1
	00008b6d:MOVZX EAX,AL
	00008b70:MOV EDI,EAX
	00008b72:CALL 0x000073c6
END_OF_LINE
----------------------------------------------
357: uVar14 = new_mode;
	00008b91:JZ 0x00008ba4
END_OF_LINE
----------------------------------------------
358: if (set_mode != true) {
	00008b8f:TEST AL,AL
	00008b91:JZ 0x00008ba4
END_OF_LINE
----------------------------------------------
359: uVar14 = instat.st_mode;
	00008ba2:JMP 0x00008baf
END_OF_LINE
----------------------------------------------
361: mode = uVar14 & 0x1ff | file_type;
	00008b9d:AND EAX,0x1ff
	00008ba2:JMP 0x00008baf
	00008ba4:MOV EAX,dword ptr [RBP + -0x27c]
	00008baa:AND EAX,0x1ff
	00008baf:MOV EDX,dword ptr [RBP + -0x2a0]
	00008bb5:OR EAX,EDX
END_OF_LINE
----------------------------------------------
362: if (((set_utc | set_time) != 0) && (new_time.tv_sec != -1)) {
	00008bd1:OR EAX,EDX
	00008bd3:TEST AL,AL
	00008bd5:JZ 0x00008cfb
	00008bdb:MOV RAX,qword ptr [RBP + -0x200]
	00008be2:CMP RAX,-0x1
	00008be6:JZ 0x00008cfb
END_OF_LINE
----------------------------------------------
363: a = pch_timestamp(reverse);
	00008bfb:CALL 0x000073c6
END_OF_LINE
----------------------------------------------
364: if ((force != true) &&
	00008c1b:TEST AL,AL
	00008c1d:JZ 0x00008caa
	00008c23:LEA RAX,[0x3e268]
	00008c2a:MOV EAX,dword ptr [RAX]
	00008c2c:TEST EAX,EAX
	00008c2e:JNZ 0x00008caa
	00008c30:LEA RAX,[0x3e35b]
	00008c37:MOVZX EAX,byte ptr [RAX]
	00008c3a:MOVZX EAX,AL
	00008c3d:MOV EDI,EAX
	00008c3f:CALL 0x00013b30
	00008c44:CMP EAX,0x2
	00008c47:JZ 0x00008caa
	00008c49:MOV RAX,qword ptr [RBP + -0x1f0]
	00008c50:CMP RAX,-0x1
	00008c54:JZ 0x00008caa
END_OF_LINE
----------------------------------------------
365: (((inerrno == 0 && (iVar6 = pch_says_nonexistent(reverse), iVar6 != 2)) &&
	00008c2c:TEST EAX,EAX
	00008c2e:JNZ 0x00008caa
	00008c30:LEA RAX,[0x3e35b]
	00008c37:MOVZX EAX,byte ptr [RAX]
	00008c3a:MOVZX EAX,AL
	00008c3d:MOV EDI,EAX
	00008c3f:CALL 0x00013b30
	00008c44:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
366: (old_time.tv_sec = a.tv_sec, old_time.tv_sec != -1)))) {
	00008c49:MOV RAX,qword ptr [RBP + -0x1f0]
	00008c50:CMP RAX,-0x1
END_OF_LINE
----------------------------------------------
367: b = get_stat_mtime(&instat);
	00008c60:CALL 0x0002afcf
END_OF_LINE
----------------------------------------------
368: iVar6 = timespec_cmp(a,b);
	00008c79:CALL 0x0002b604
END_OF_LINE
----------------------------------------------
369: if (iVar6 != 0) {
	00008c7e:TEST EAX,EAX
	00008c80:JZ 0x00008caa
END_OF_LINE
----------------------------------------------
370: pcVar8 = quotearg(outname);
	00008c8c:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
371: say("Not setting time of file %s (time mismatch)\n",pcVar8);
	00008ca3:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
372: goto LAB_00008cfb;
	00008cfb:LEA RAX,[0x3e268]
END_OF_LINE
----------------------------------------------
375: if ((force == true) || (((uint)mismatch | failed) == 0)) {
	00008cb7:TEST AL,AL
	00008cb9:JZ 0x00008cf4
	00008cbb:MOVZX EAX,byte ptr [RBP + -0x2a6]
	00008cc2:OR EAX,dword ptr [RBP + -0x294]
	00008cc8:TEST EAX,EAX
	00008cca:JZ 0x00008cf4
END_OF_LINE
----------------------------------------------
376: attr = attr | FA_TIMES;
	00008cf4:OR dword ptr [RBP + -0x28c],0x1
END_OF_LINE
----------------------------------------------
379: pcVar8 = quotearg(outname);
	00008cd6:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
380: say("Not setting time of file %s (contents mismatch)\n",pcVar8);
	00008ced:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
383: LAB_00008cfb:
	00008cfb:LEA RAX,[0x3e268]
END_OF_LINE
----------------------------------------------
384: if (inerrno == 0) {
	00008d04:TEST EAX,EAX
	00008d06:JZ 0x00008d4f
END_OF_LINE
----------------------------------------------
385: attr = attr | (FA_IDS|FA_MODE|FA_XATTRS);
	00008d4f:OR dword ptr [RBP + -0x28c],0xe
END_OF_LINE
----------------------------------------------
386: set_file_attributes(TMPOUTNAME,attr,inname,&instat,mode,&new_time);
	00008d6a:LEA RDI,[RBP + -0x200]
	00008d71:MOV ECX,dword ptr [RBP + -0x278]
	00008d77:MOV ESI,dword ptr [RBP + -0x28c]
	00008d7d:MOV R9,RDI
	00008d80:MOV R8D,ECX
	00008d83:LEA RCX,[0x3e280]
	00008d8a:MOV RDI,RAX
	00008d8d:CALL 0x00016416
END_OF_LINE
----------------------------------------------
389: if (set_mode != false) {
	00008d08:CMP byte ptr [RBP + -0x2a1],0x0
	00008d0f:JZ 0x00008d18
END_OF_LINE
----------------------------------------------
390: attr = attr | FA_MODE;
	00008d11:OR dword ptr [RBP + -0x28c],0x4
END_OF_LINE
----------------------------------------------
392: set_file_attributes(TMPOUTNAME,attr,(char *)0x0,(stat *)0x0,mode,&new_time);
	00008d22:LEA RCX,[RBP + -0x200]
	00008d29:MOV EDX,dword ptr [RBP + -0x278]
	00008d2f:MOV ESI,dword ptr [RBP + -0x28c]
	00008d35:MOV R9,RCX
	00008d38:MOV R8D,EDX
	00008d3b:MOV ECX,0x0
	00008d40:MOV EDX,0x0
	00008d45:MOV RDI,RAX
	00008d48:CALL 0x00016416
END_OF_LINE
----------------------------------------------
394: output_file(TMPOUTNAME,&TMPOUTNAME_needs_removal,&tmpoutst,outname,(stat *)0x0,mode,
	00008db0:LEA RDX,[RBP + -0x1e0]
	00008db7:SUB RSP,0x8
	00008dbb:PUSH RSI
	00008dbc:MOV R9D,EDI
	00008dbf:MOV R8D,0x0
	00008dc5:LEA RSI,[0x3e351]
	00008dcc:MOV RDI,RAX
	00008dcf:CALL 0x0000c4f6
END_OF_LINE
----------------------------------------------
395: backup);
	00008dcf:CALL 0x0000c4f6
END_OF_LINE
----------------------------------------------
396: _Var2 = pch_rename();
	00008dd8:CALL 0x00013bbd
END_OF_LINE
----------------------------------------------
397: if (_Var2) {
	00008ddf:JZ 0x00008e6c
END_OF_LINE
----------------------------------------------
398: output_file((char *)0x0,(_Bool *)0x0,(stat *)0x0,inname,&instat,mode,backup);
	00008e20:CALL 0x0000c4f6
END_OF_LINE
----------------------------------------------
402: output_file(outname,(_Bool *)0x0,&tmpoutst,(char *)0x0,(stat *)0x0,file_type,backup);
	00008e38:LEA RDX,[RBP + -0x1e0]
	00008e3f:MOV RAX,qword ptr [RBP + -0x270]
	00008e46:SUB RSP,0x8
	00008e4a:PUSH RCX
	00008e4b:MOV R9D,ESI
	00008e4e:MOV R8D,0x0
	00008e54:MOV ECX,0x0
	00008e59:MOV ESI,0x0
	00008e5e:MOV RDI,RAX
	00008e61:CALL 0x0000c4f6
END_OF_LINE
----------------------------------------------
406: else if (dry_run != true) {
	00008962:TEST AL,AL
	00008964:JZ 0x00008e6d
END_OF_LINE
----------------------------------------------
407: if (outname == inname) {
	00008981:CMP qword ptr [RBP + -0x270],RAX
	00008988:JNZ 0x00008996
END_OF_LINE
----------------------------------------------
408: to_st = &instat;
	00008991:MOV RSI,RAX
END_OF_LINE
----------------------------------------------
411: to_st = (stat *)0x0;
	00008996:MOV ESI,0x0
END_OF_LINE
----------------------------------------------
413: output_file((char *)0x0,(_Bool *)0x0,(stat *)0x0,outname,to_st,file_type,backup);
	000089bf:CALL 0x0000c4f6
END_OF_LINE
----------------------------------------------
416: if (((diff_type != ED_DIFF) && (failed != 0)) && (skip_reject_file != true)) {
	00008e76:CMP EAX,0x3
	00008e79:JZ 0x000091d1
	00008e7f:CMP dword ptr [RBP + -0x294],0x0
	00008e86:JZ 0x000091d1
	00008e8c:MOVZX EAX,byte ptr [RBP + -0x2a9]
	00008e93:XOR EAX,0x1
	00008e96:TEST AL,AL
	00008e98:JZ 0x000091d1
END_OF_LINE
----------------------------------------------
417: iVar6 = fileno((FILE *)rejfp);
	00008ea8:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
418: iVar6 = fstat(iVar6,(stat *)&rejst);
	00008eaf:LEA RAX,[RBP + -0x150]
	00008eb6:MOV RSI,RAX
	00008eb9:MOV EDI,EDX
	00008ebb:CALL 0x00006060
END_OF_LINE
----------------------------------------------
419: if ((iVar6 != 0) || (iVar6 = fclose((FILE *)rejfp), iVar6 != 0)) {
	00008ec0:TEST EAX,EAX
	00008ec2:JNZ 0x00008ed7
	00008ec4:MOV RAX,qword ptr [0x0003e3e0]
	00008ecb:MOV RDI,RAX
	00008ece:CALL 0x00005a80
	00008ed3:TEST EAX,EAX
	00008ed5:JZ 0x00008edc
END_OF_LINE
----------------------------------------------
421: write_fatal();
	00008ed7:CALL 0x00018705
END_OF_LINE
----------------------------------------------
423: rejfp = (FILE *)0x0;
	00008edc:MOV qword ptr [0x0003e3e0],0x0
END_OF_LINE
----------------------------------------------
424: somefailed = true;
	00008ee7:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
425: if (skip_rest_of_patch == false) {
	00008ef8:TEST AL,AL
	00008efa:JZ 0x00008f05
END_OF_LINE
----------------------------------------------
426: pcVar8 = "FAILED";
	00008f05:LEA RDX,[0x31608]
END_OF_LINE
----------------------------------------------
429: pcVar8 = "ignored";
	00008efc:LEA RDX,[0x31600]
END_OF_LINE
----------------------------------------------
431: if (hunk == 1) {
	00008f0c:CMP dword ptr [RBP + -0x298],0x1
	00008f13:JNZ 0x00008f1e
END_OF_LINE
----------------------------------------------
432: puVar12 = &DAT_0003164d;
	00008f15:LEA RAX,[0x3164d]
END_OF_LINE
----------------------------------------------
435: puVar12 = &DAT_0003164c;
	00008f1e:LEA RAX,[0x3164c]
END_OF_LINE
----------------------------------------------
437: say("%d out of %d hunk%s %s",(ulong)(uint)failed,(ulong)(uint)hunk,puVar12,pcVar8);
	00008f2b:MOV ESI,dword ptr [RBP + -0x294]
	00008f31:MOV R8,RDX
	00008f34:MOV RCX,RAX
	00008f37:MOV EDX,EDI
	00008f39:LEA RAX,[0x31761]
	00008f40:MOV RDI,RAX
	00008f43:MOV EAX,0x0
	00008f48:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
438: if ((outname == (char *)0x0) ||
	00008f4d:CMP qword ptr [RBP + -0x270],0x0
	00008f55:JZ 0x000091ba
	00008f5b:MOV RAX,qword ptr [0x0003e3f0]
	00008f62:TEST RAX,RAX
	00008f65:JZ 0x00008f88
	00008f67:MOV RAX,qword ptr [0x0003e3f0]
	00008f6e:LEA RDX,[0x31778]
	00008f75:MOV RSI,RDX
	00008f78:MOV RDI,RAX
	00008f7b:CALL 0x00005ce0
	00008f80:TEST EAX,EAX
	00008f82:JZ 0x000091ba
END_OF_LINE
----------------------------------------------
439: ((rejname != (char *)0x0 && (iVar6 = strcmp(rejname,"-"), iVar6 == 0)))) {
	00008f62:TEST RAX,RAX
	00008f65:JZ 0x00008f88
	00008f67:MOV RAX,qword ptr [0x0003e3f0]
	00008f6e:LEA RDX,[0x31778]
	00008f75:MOV RSI,RDX
	00008f78:MOV RDI,RAX
	00008f7b:CALL 0x00005ce0
	00008f80:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
440: say("\n");
	000091c9:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
443: rej = rejname;
	00008f8f:MOV qword ptr [RBP + -0x250],RAX
END_OF_LINE
----------------------------------------------
444: if (rejname == (char *)0x0) {
	00008f9d:TEST RAX,RAX
	00008fa0:JNZ 0x0000903e
END_OF_LINE
----------------------------------------------
445: s = simple_backup_suffix;
	00008fb0:MOV qword ptr [RBP + -0x220],RAX
END_OF_LINE
----------------------------------------------
446: simple_backup_suffix = ".rej";
	00008fc5:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
447: rej = find_backup_file_name(outname,simple_backups);
	00008fd7:CALL 0x0001dd46
END_OF_LINE
----------------------------------------------
448: len = strlen(rej);
	00008fed:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
449: if (rej[len - 1] == '~') {
	00009000:LEA RDX,[RAX + -0x1]
	00009004:MOV RAX,qword ptr [RBP + -0x250]
	0000900b:ADD RAX,RDX
	0000900e:MOVZX EAX,byte ptr [RAX]
	00009011:CMP AL,0x7e
	00009013:JNZ 0x0000902d
END_OF_LINE
----------------------------------------------
450: rej[len - 1] = '#';
	0000901c:LEA RDX,[RAX + -0x1]
	00009020:MOV RAX,qword ptr [RBP + -0x250]
	00009027:ADD RAX,RDX
	0000902a:MOV byte ptr [RAX],0x23
END_OF_LINE
----------------------------------------------
452: simple_backup_suffix = s;
	0000903b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
454: if (dry_run == true) {
	0000904b:TEST AL,AL
	0000904d:JZ 0x00009189
END_OF_LINE
----------------------------------------------
455: say("\n");
	00009198:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
458: pcVar8 = quotearg(rej);
	0000905d:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
459: say(" -- saving rejects to file %s\n",pcVar8);
	00009074:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
460: if (rejname == (char *)0x0) {
	00009080:TEST RAX,RAX
	00009083:JZ 0x000090e9
END_OF_LINE
----------------------------------------------
461: olderrno = stat_file(rej,&outstat);
	000090e9:LEA RDX,[RBP + -0xc0]
	000090f0:MOV RAX,qword ptr [RBP + -0x250]
	000090f7:MOV RSI,RDX
	000090fa:MOV RDI,RAX
	000090fd:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
462: if ((olderrno != 0) && (olderrno != 2)) {
	00009108:CMP dword ptr [RBP + -0x274],0x0
	0000910f:JZ 0x0000911f
	00009111:CMP dword ptr [RBP + -0x274],0x2
	00009118:JZ 0x0000911f
END_OF_LINE
----------------------------------------------
464: write_fatal();
	0000911a:CALL 0x00018705
END_OF_LINE
----------------------------------------------
466: if ((olderrno == 0) && (fVar5 = lookup_file_id(&outstat), fVar5 == CREATED)) {
	0000911f:CMP dword ptr [RBP + -0x274],0x0
	00009126:JNZ 0x00009157
	00009128:LEA RAX,[RBP + -0xc0]
	0000912f:MOV RDI,RAX
	00009132:CALL 0x000162fe
	00009137:CMP EAX,0x1
	0000913a:JNZ 0x00009157
END_OF_LINE
----------------------------------------------
467: append_to_file(TMPREJNAME,rej);
	00009150:CALL 0x00017754
END_OF_LINE
----------------------------------------------
470: move_file(TMPREJNAME,&TMPREJNAME_needs_removal,&rejst,rej,0x81b6,false);
	00009165:LEA RDX,[RBP + -0x150]
	0000916c:MOV R9D,0x0
	00009172:MOV R8D,0x81b6
	00009178:LEA RSI,[0x3e400]
	0000917f:MOV RDI,RAX
	00009182:CALL 0x00016d63
END_OF_LINE
----------------------------------------------
473: else if (written_to_rejname == true) {
	0000908f:TEST AL,AL
	00009091:JZ 0x000090cb
END_OF_LINE
----------------------------------------------
474: append_to_file(TMPREJNAME,rejname);
	000090df:CALL 0x00017754
END_OF_LINE
----------------------------------------------
477: copy_file(TMPREJNAME,rejname,(stat *)0x0,0,0x81b6,true);
	000090ba:CALL 0x000174dd
END_OF_LINE
----------------------------------------------
478: written_to_rejname = true;
	000090bf:MOV byte ptr [RBP + -0x2aa],0x1
END_OF_LINE
----------------------------------------------
481: if (rejname == (char *)0x0) {
	000091a4:TEST RAX,RAX
	000091a7:JNZ 0x000091d0
END_OF_LINE
----------------------------------------------
482: free(rej);
	000091b3:CALL 0x00005860
END_OF_LINE
----------------------------------------------
486: set_signals(true);
	000091d6:CALL 0x00018ec8
END_OF_LINE
----------------------------------------------
489: apply_anyway = merge;
	00007eb5:MOVZX EAX,byte ptr [0x0003e3a4]
END_OF_LINE
----------------------------------------------
490: if ((skip_rest_of_patch != true) && (diff_type == GIT_BINARY_DIFF)) {
	00007ecf:TEST AL,AL
	00007ed1:JZ 0x00007f18
	00007ed3:LEA RAX,[0x3e374]
	00007eda:MOV EAX,dword ptr [RAX]
	00007edc:CMP EAX,0x6
	00007edf:JNZ 0x00007f18
END_OF_LINE
----------------------------------------------
491: pcVar8 = quotearg(outname);
	00007eeb:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
492: say("File %s: git binary diffs are not supported.\n",pcVar8);
	00007f02:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
493: skip_rest_of_patch = true;
	00007f0e:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
494: somefailed = true;
	00007f11:MOV byte ptr [RBP + -0x2ab],0x1
END_OF_LINE
----------------------------------------------
496: if ((skip_rest_of_patch != true) && (outfile == (char *)0x0)) {
	00007f25:TEST AL,AL
	00007f27:JZ 0x00007f9c
	00007f29:LEA RAX,[0x3e260]
	00007f30:MOV RAX,qword ptr [RAX]
	00007f33:TEST RAX,RAX
	00007f36:JNZ 0x00007f9c
END_OF_LINE
----------------------------------------------
497: init_output(&outstate);
	00007f38:LEA RAX,[RBP + -0x210]
	00007f3f:MOV RDI,RAX
	00007f42:CALL 0x0000b6df
END_OF_LINE
----------------------------------------------
498: outstate.ofp = (FILE *)fdopen(outfd,"w");
	00007f59:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
499: if ((FILE *)outstate.ofp == (FILE *)0x0) {
	00007f6c:TEST RAX,RAX
	00007f6f:JNZ 0x00007f92
END_OF_LINE
----------------------------------------------
501: pfatal("%s",TMPOUTNAME);
	00007f8d:CALL 0x00018721
END_OF_LINE
----------------------------------------------
503: outfd = -1;
	00007f92:MOV dword ptr [RBP + -0x29c],0xffffffff
END_OF_LINE
----------------------------------------------
505: if ((skip_rest_of_patch != true) && (scan_input(inname,file_type), verbosity != _ISblank)) {
	00007fa9:TEST AL,AL
	00007fab:JZ 0x0000877f
	00007fb1:MOV EDX,dword ptr [RBP + -0x2a0]
	00007fb7:LEA RAX,[0x3e258]
	00007fbe:MOV RAX,qword ptr [RAX]
	00007fc1:MOV ESI,EDX
	00007fc3:MOV RDI,RAX
	00007fc6:CALL 0x00006258
	00007fcb:LEA RAX,[0x3e35c]
	00007fd2:MOV EAX,dword ptr [RAX]
	00007fd4:CMP EAX,0x1
	00007fd7:JZ 0x0000877f
END_OF_LINE
----------------------------------------------
506: iVar6 = strcmp(inname,outname);
	00007ff4:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
507: renamed = iVar6 != 0;
	00007ff9:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
508: if ((renamed) || (_Var2 = pch_rename(), !_Var2)) {
	00008010:JZ 0x00008022
	00008012:CALL 0x00013bbd
	00008017:TEST AL,AL
	00008019:JZ 0x00008022
END_OF_LINE
----------------------------------------------
509: skip_rename = false;
	00008022:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
512: skip_rename = true;
	0000801b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
514: if ((renamed == false) && (skip_rename == false)) {
	00008034:CMP byte ptr [RBP + -0x2a4],0x0
	0000803b:JNZ 0x00008046
	0000803d:CMP byte ptr [RBP + -0x2a3],0x0
	00008044:JZ 0x0000804d
END_OF_LINE
----------------------------------------------
515: uVar14 = 10;
	0000804d:MOV EBX,0xa
END_OF_LINE
----------------------------------------------
518: uVar14 = 0x20;
	00008046:MOV EBX,0x20
END_OF_LINE
----------------------------------------------
520: pcVar8 = quotearg(outname);
	0000805c:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
521: if ((file_type & 0xf000) == 0xa000) {
	0000806a:AND EAX,0xf000
	0000806f:CMP EAX,0xa000
	00008074:JNZ 0x0000807f
END_OF_LINE
----------------------------------------------
522: pcVar13 = "symbolic link";
	00008076:LEA RDX,[0x314d8]
END_OF_LINE
----------------------------------------------
525: pcVar13 = "file";
	0000807f:LEA RDX,[0x314e6]
END_OF_LINE
----------------------------------------------
527: if (dry_run == false) {
	00008090:TEST AL,AL
	00008092:JZ 0x0000809d
END_OF_LINE
----------------------------------------------
528: pcVar10 = "patching";
	0000809d:LEA RAX,[0x314f4]
END_OF_LINE
----------------------------------------------
531: pcVar10 = "checking";
	00008094:LEA RAX,[0x314eb]
END_OF_LINE
----------------------------------------------
533: say("%s %s %s%c",pcVar10,pcVar13,pcVar8,(ulong)uVar14);
	000080a4:MOV R8D,EBX
	000080a7:MOV RSI,RAX
	000080aa:LEA RAX,[0x314fd]
	000080b1:MOV RDI,RAX
	000080b4:MOV EAX,0x0
	000080b9:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
534: if ((renamed != false) || (skip_rename != false)) {
	000080be:CMP byte ptr [RBP + -0x2a4],0x0
	000080c5:JNZ 0x000080d4
	000080c7:CMP byte ptr [RBP + -0x2a3],0x0
	000080ce:JZ 0x00008180
END_OF_LINE
----------------------------------------------
535: pcVar8 = inname;
	000080e0:JZ 0x000080ee
END_OF_LINE
----------------------------------------------
536: if (skip_rename == true) {
	000080de:TEST AL,AL
	000080e0:JZ 0x000080ee
END_OF_LINE
----------------------------------------------
537: pcVar8 = pch_name(OLD);
	000080f3:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
538: iVar6 = strcmp(inname,pcVar8);
	0000810b:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
539: pcVar8 = pch_name((uint)(iVar6 == 0));
	00008110:TEST EAX,EAX
	00008112:SETZ AL
	00008115:MOVZX EAX,AL
	00008118:MOV EDI,EAX
	0000811a:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
541: _Var2 = pch_copy();
	00008122:CALL 0x00013b87
END_OF_LINE
----------------------------------------------
542: if (_Var2) {
	00008129:JZ 0x00008134
END_OF_LINE
----------------------------------------------
543: pcVar13 = "copied";
	0000812b:LEA RAX,[0x31508]
END_OF_LINE
----------------------------------------------
546: _Var2 = pch_rename();
	00008134:CALL 0x00013bbd
END_OF_LINE
----------------------------------------------
547: if (_Var2) {
	0000813b:JZ 0x00008146
END_OF_LINE
----------------------------------------------
548: pcVar13 = "renamed";
	0000813d:LEA RAX,[0x3150f]
END_OF_LINE
----------------------------------------------
551: pcVar13 = "read";
	00008146:LEA RAX,[0x31517]
END_OF_LINE
----------------------------------------------
554: if (skip_rename == false) {
	0000814d:CMP byte ptr [RBP + -0x2a3],0x0
	00008154:JZ 0x0000815f
END_OF_LINE
----------------------------------------------
555: pcVar10 = "";
	0000815f:LEA RSI,[0x31525]
END_OF_LINE
----------------------------------------------
558: pcVar10 = "already ";
	00008156:LEA RSI,[0x3151c]
END_OF_LINE
----------------------------------------------
560: say("(%s%s from %s)\n",pcVar10,pcVar13,pcVar8);
	0000817b:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
562: if (verbosity == _IScntrl) {
	00008189:CMP EAX,0x2
	0000818c:JNZ 0x0000877f
END_OF_LINE
----------------------------------------------
563: if (using_plan_a == false) {
	0000819c:TEST AL,AL
	0000819e:JZ 0x000081a9
END_OF_LINE
----------------------------------------------
564: puVar12 = &DAT_00031538;
	000081a9:LEA RAX,[0x31538]
END_OF_LINE
----------------------------------------------
567: puVar12 = &DAT_00031536;
	000081a0:LEA RAX,[0x31536]
END_OF_LINE
----------------------------------------------
569: say("Using Plan %s...\n",puVar12);
	000081c2:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
572: while (got_hunk = another_hunk(diff_type,reverse), 0 < got_hunk) {
	00008799:CALL 0x0001022e
	0000879e:MOV dword ptr [RBP + -0x284],EAX
	000087a4:CMP dword ptr [RBP + -0x284],0x0
	000087ab:JG 0x000081cc
END_OF_LINE
----------------------------------------------
573: where = 0;
	000081cc:MOV qword ptr [RBP + -0x268],0x0
END_OF_LINE
----------------------------------------------
574: fuzz = 0;
	000081d7:MOV qword ptr [RBP + -0x260],0x0
END_OF_LINE
----------------------------------------------
575: if (merge == false) {
	000081e9:TEST AL,AL
	000081eb:JZ 0x000081fa
END_OF_LINE
----------------------------------------------
576: prefix_context = pch_prefix_context();
	000081fa:CALL 0x00013c48
END_OF_LINE
----------------------------------------------
577: suffix_context = pch_suffix_context();
	00008206:CALL 0x00013c59
END_OF_LINE
----------------------------------------------
578: context = suffix_context;
	00008223:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
579: if (suffix_context <= prefix_context) {
	00008223:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
580: context = prefix_context;
	00008223:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
582: mymaxfuzz = maxfuzz;
	0000823f:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
583: if (context <= maxfuzz) {
	0000823f:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
584: mymaxfuzz = context;
	0000823f:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
588: mymaxfuzz = 0;
	000081ed:MOV qword ptr [RBP + -0x258],0x0
END_OF_LINE
----------------------------------------------
590: hunk = hunk + 1;
	0000824a:ADD dword ptr [RBP + -0x298],0x1
END_OF_LINE
----------------------------------------------
591: if (skip_rest_of_patch != true) {
	0000825e:TEST AL,AL
	00008260:JZ 0x00008461
END_OF_LINE
----------------------------------------------
593: where = locate_hunk(fuzz);
	00008270:CALL 0x00009fa1
END_OF_LINE
----------------------------------------------
594: if (((where == 0) || (fuzz != 0)) || (in_offset != 0)) {
	0000827c:CMP qword ptr [RBP + -0x268],0x0
	00008284:JZ 0x0000829f
	00008286:CMP qword ptr [RBP + -0x260],0x0
	0000828e:JNZ 0x0000829f
	00008290:LEA RAX,[0x3e388]
	00008297:MOV RAX,qword ptr [RAX]
	0000829a:TEST RAX,RAX
	0000829d:JZ 0x000082a6
END_OF_LINE
----------------------------------------------
595: mismatch = true;
	0000829f:MOV byte ptr [RBP + -0x2a6],0x1
END_OF_LINE
----------------------------------------------
597: if (((hunk == 1) && (where == 0)) &&
	000082a6:CMP dword ptr [RBP + -0x298],0x1
	000082ad:JNZ 0x000083dd
	000082b3:CMP qword ptr [RBP + -0x268],0x0
	000082bb:JNZ 0x000083dd
	000082c1:LEA RAX,[0x3e358]
	000082c8:MOVZX EAX,byte ptr [RAX]
	000082cb:OR AL,byte ptr [RBP + -0x2a5]
	000082d1:XOR EAX,0x1
	000082d4:TEST AL,AL
	000082d6:JZ 0x000083dd
	000082dc:LEA RAX,[0x3e35b]
	000082e3:MOVZX EDX,byte ptr [RAX]
	000082e6:MOVZX EAX,byte ptr [0x0003e3c2]
	000082ed:CMP DL,AL
	000082ef:JNZ 0x000083dd
END_OF_LINE
----------------------------------------------
598: (((force | apply_anyway) != 1 && (reverse == reverse_flag_specified)))) {
	000082cb:OR AL,byte ptr [RBP + -0x2a5]
	000082d1:XOR EAX,0x1
	000082d4:TEST AL,AL
	000082d6:JZ 0x000083dd
	000082dc:LEA RAX,[0x3e35b]
	000082e3:MOVZX EDX,byte ptr [RAX]
	000082e6:MOVZX EAX,byte ptr [0x0003e3c2]
	000082ed:CMP DL,AL
END_OF_LINE
----------------------------------------------
599: _Var2 = pch_swap();
	000082f5:CALL 0x00013619
END_OF_LINE
----------------------------------------------
600: if (_Var2) {
	000082ff:JZ 0x0000831a
END_OF_LINE
----------------------------------------------
601: where = locate_hunk(fuzz);
	00008324:CALL 0x00009fa1
END_OF_LINE
----------------------------------------------
602: if (where != 0) {
	00008330:CMP qword ptr [RBP + -0x268],0x0
	00008338:JZ 0x00008399
END_OF_LINE
----------------------------------------------
603: if (reverse == false) {
	00008344:TEST AL,AL
	00008346:JZ 0x00008351
END_OF_LINE
----------------------------------------------
604: pcVar8 = "Reversed (or previously applied)";
	00008351:LEA RAX,[0x31598]
END_OF_LINE
----------------------------------------------
607: pcVar8 = "Unreversed";
	00008348:LEA RAX,[0x3158d]
END_OF_LINE
----------------------------------------------
609: _Var2 = ok_to_reverse("%s patch detected!",pcVar8);
	0000836a:CALL 0x00018c6e
END_OF_LINE
----------------------------------------------
610: if (_Var2) {
	00008371:JZ 0x00008399
END_OF_LINE
----------------------------------------------
611: reverse = reverse == false;
	00008380:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
612: goto LAB_000083dd;
	000083dd:LEA RAX,[0x3e360]
END_OF_LINE
----------------------------------------------
615: _Var2 = pch_swap();
	00008399:CALL 0x00013619
END_OF_LINE
----------------------------------------------
616: if (!_Var2) {
	000083a3:JZ 0x000083b9
END_OF_LINE
----------------------------------------------
618: fatal("lost hunk on alloc error!");
	000083b4:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
620: if (where != 0) {
	000083b9:CMP qword ptr [RBP + -0x268],0x0
	000083c1:JZ 0x000083dd
END_OF_LINE
----------------------------------------------
621: apply_anyway = true;
	000083c3:MOV byte ptr [RBP + -0x2a5],0x1
END_OF_LINE
----------------------------------------------
622: fuzz = fuzz + -1;
	000083ca:SUB qword ptr [RBP + -0x260],0x1
END_OF_LINE
----------------------------------------------
623: where = 0;
	000083d2:MOV qword ptr [RBP + -0x268],0x0
END_OF_LINE
----------------------------------------------
627: say("Not enough memory to try swapped hunk!  Assuming unswapped.\n");
	00008310:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
630: LAB_000083dd:
	000083dd:LEA RAX,[0x3e360]
END_OF_LINE
----------------------------------------------
631: } while (((skip_rest_of_patch != true) && (where == 0)) &&
	000083ea:TEST AL,AL
	000083ec:JZ 0x00008414
	000083ee:CMP qword ptr [RBP + -0x268],0x0
	000083f6:JNZ 0x00008414
	000083f8:ADD qword ptr [RBP + -0x260],0x1
	00008400:MOV RAX,qword ptr [RBP + -0x260]
	00008407:CMP RAX,qword ptr [RBP + -0x258]
	0000840e:JLE 0x00008266
END_OF_LINE
----------------------------------------------
632: (fuzz = fuzz + 1, fuzz <= mymaxfuzz));
	000083f8:ADD qword ptr [RBP + -0x260],0x1
	00008400:MOV RAX,qword ptr [RBP + -0x260]
	00008407:CMP RAX,qword ptr [RBP + -0x258]
	0000840e:JLE 0x00008266
END_OF_LINE
----------------------------------------------
633: if (((skip_rest_of_patch != false) && (outstate.ofp != (FILE *)0x0)) &&
	0000841e:TEST AL,AL
	00008420:JZ 0x00008461
	00008422:MOV RAX,qword ptr [RBP + -0x210]
	00008429:TEST RAX,RAX
	0000842c:JZ 0x00008461
	0000842e:LEA RAX,[0x3e260]
	00008435:MOV RAX,qword ptr [RAX]
	00008438:TEST RAX,RAX
	0000843b:JNZ 0x00008461
END_OF_LINE
----------------------------------------------
634: (outfile == (char *)0x0)) {
	00008438:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
635: fclose((FILE *)outstate.ofp);
	00008447:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
636: outstate.ofp = (FILE *)0x0;
	0000844c:MOV qword ptr [RBP + -0x210],0x0
END_OF_LINE
----------------------------------------------
637: outfd = -1;
	00008457:MOV dword ptr [RBP + -0x29c],0xffffffff
END_OF_LINE
----------------------------------------------
640: lVar11 = where;
	00008469:JNZ 0x00008472
END_OF_LINE
----------------------------------------------
641: if (where == 0) {
	00008461:CMP qword ptr [RBP + -0x268],0x0
	00008469:JNZ 0x00008472
END_OF_LINE
----------------------------------------------
642: lVar11 = pch_first();
	0000846b:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
644: newwhere = lVar11 + out_offset;
	00008483:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
645: if (((skip_rest_of_patch == false) &&
	00008497:TEST AL,AL
	00008499:JNZ 0x00008546
	0000849f:MOVZX EAX,byte ptr [0x0003e3a4]
	000084a6:TEST AL,AL
	000084a8:JZ 0x000084d3
	000084aa:LEA RCX,[RBP + -0x2ab]
	000084b1:MOV RDX,qword ptr [RBP + -0x268]
	000084b8:LEA RSI,[RBP + -0x210]
	000084bf:MOV EAX,dword ptr [RBP + -0x298]
	000084c5:MOV EDI,EAX
	000084c7:CALL 0x0001bbaa
	000084cc:XOR EAX,0x1
	000084cf:TEST AL,AL
	000084d1:JNZ 0x00008546
	000084d3:MOVZX EAX,byte ptr [0x0003e3a4]
	000084da:XOR EAX,0x1
	000084dd:TEST AL,AL
	000084df:JZ 0x0000864e
	000084e5:CMP qword ptr [RBP + -0x268],0x1
	000084ed:JNZ 0x00008518
	000084ef:LEA RAX,[0x3e35b]
	000084f6:MOVZX EAX,byte ptr [RAX]
	000084f9:MOVZX EAX,AL
	000084fc:MOV EDI,EAX
	000084fe:CALL 0x00013b30
	00008503:CMP EAX,0x2
	00008506:JNZ 0x00008518
	00008508:LEA RAX,[0x3e280]
	0000850f:MOV RAX,qword ptr [RAX + 0x30]
	00008513:TEST RAX,RAX
	00008516:JNZ 0x00008546
	00008518:CMP qword ptr [RBP + -0x268],0x0
	00008520:JZ 0x00008546
	00008522:MOV RDX,qword ptr [RBP + -0x268]
	00008529:LEA RAX,[RBP + -0x210]
	00008530:MOV RSI,RDX
	00008533:MOV RDI,RAX
	00008536:CALL 0x0000af15
	0000853b:XOR EAX,0x1
	0000853e:TEST AL,AL
	00008540:JZ 0x0000864e
END_OF_LINE
----------------------------------------------
646: ((merge == false || (_Var2 = merge_hunk(hunk,&outstate,where,&somefailed), _Var2)))) &&
	000084a6:TEST AL,AL
	000084a8:JZ 0x000084d3
	000084aa:LEA RCX,[RBP + -0x2ab]
	000084b1:MOV RDX,qword ptr [RBP + -0x268]
	000084b8:LEA RSI,[RBP + -0x210]
	000084bf:MOV EAX,dword ptr [RBP + -0x298]
	000084c5:MOV EDI,EAX
	000084c7:CALL 0x0001bbaa
	000084cc:XOR EAX,0x1
	000084cf:TEST AL,AL
	000084d1:JNZ 0x00008546
END_OF_LINE
----------------------------------------------
647: ((merge == true ||
	000084dd:TEST AL,AL
END_OF_LINE
----------------------------------------------
648: ((((where != 1 || (iVar6 = pch_says_nonexistent(reverse), iVar6 != 2)) ||
	000084e5:CMP qword ptr [RBP + -0x268],0x1
	000084ed:JNZ 0x00008518
	000084ef:LEA RAX,[0x3e35b]
	000084f6:MOVZX EAX,byte ptr [RAX]
	000084f9:MOVZX EAX,AL
	000084fc:MOV EDI,EAX
	000084fe:CALL 0x00013b30
	00008503:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
649: (instat.st_size == 0)) &&
	00008513:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
650: ((where != 0 && (_Var2 = apply_hunk(&outstate,where), _Var2)))))))) {
	00008518:CMP qword ptr [RBP + -0x268],0x0
	00008520:JZ 0x00008546
	00008522:MOV RDX,qword ptr [RBP + -0x268]
	00008529:LEA RAX,[RBP + -0x210]
	00008530:MOV RSI,RDX
	00008533:MOV RDI,RAX
	00008536:CALL 0x0000af15
	0000853b:XOR EAX,0x1
	0000853e:TEST AL,AL
	00008540:JZ 0x0000864e
END_OF_LINE
----------------------------------------------
651: if ((merge != true) &&
	00008658:TEST AL,AL
	0000865a:JZ 0x0000877f
	00008660:LEA RAX,[0x3e35c]
	00008667:MOV EAX,dword ptr [RAX]
	00008669:CMP EAX,0x2
	0000866c:JZ 0x0000869d
	0000866e:LEA RAX,[0x3e35c]
	00008675:MOV EAX,dword ptr [RAX]
	00008677:CMP EAX,0x1
	0000867a:JZ 0x0000877f
	00008680:CMP qword ptr [RBP + -0x260],0x0
	00008688:JNZ 0x0000869d
	0000868a:LEA RAX,[0x3e388]
	00008691:MOV RAX,qword ptr [RAX]
	00008694:TEST RAX,RAX
	00008697:JZ 0x0000877f
END_OF_LINE
----------------------------------------------
652: ((verbosity == _IScntrl ||
	00008669:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
653: ((verbosity != _ISblank && ((fuzz != 0 || (in_offset != 0)))))))) {
	00008677:CMP EAX,0x1
	0000867a:JZ 0x0000877f
	00008680:CMP qword ptr [RBP + -0x260],0x0
	00008688:JNZ 0x0000869d
	0000868a:LEA RAX,[0x3e388]
	00008691:MOV RAX,qword ptr [RAX]
	00008694:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
654: pcVar8 = format_linenum(numbuf,newwhere);
	000086a4:LEA RAX,[RBP + -0x30]
	000086a8:MOV RSI,RDX
	000086ab:MOV RDI,RAX
	000086ae:CALL 0x00018472
END_OF_LINE
----------------------------------------------
655: say("Hunk #%d succeeded at %s",(ulong)(uint)hunk,pcVar8);
	000086bc:MOV ESI,EAX
	000086be:LEA RAX,[0x31625]
	000086c5:MOV RDI,RAX
	000086c8:MOV EAX,0x0
	000086cd:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
656: if (fuzz != 0) {
	000086d2:CMP qword ptr [RBP + -0x260],0x0
	000086da:JZ 0x00008709
END_OF_LINE
----------------------------------------------
657: pcVar8 = format_linenum(numbuf,fuzz);
	000086e3:LEA RAX,[RBP + -0x30]
	000086e7:MOV RSI,RDX
	000086ea:MOV RDI,RAX
	000086ed:CALL 0x00018472
END_OF_LINE
----------------------------------------------
658: say(" with fuzz %s",pcVar8);
	00008704:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
660: if (in_offset != 0) {
	00008713:TEST RAX,RAX
	00008716:JZ 0x0000876b
END_OF_LINE
----------------------------------------------
661: if (in_offset == 1) {
	00008722:CMP RAX,0x1
	00008726:JNZ 0x00008731
END_OF_LINE
----------------------------------------------
662: puVar12 = &DAT_0003164d;
	00008728:LEA RBX,[0x3164d]
END_OF_LINE
----------------------------------------------
665: puVar12 = &DAT_0003164c;
	00008731:LEA RBX,[0x3164c]
END_OF_LINE
----------------------------------------------
667: pcVar8 = format_linenum(numbuf,in_offset);
	00008742:LEA RAX,[RBP + -0x30]
	00008746:MOV RSI,RDX
	00008749:MOV RDI,RAX
	0000874c:CALL 0x00018472
END_OF_LINE
----------------------------------------------
668: say(" (offset %s line%s)",pcVar8,puVar12);
	00008766:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
670: say(".\n");
	0000877a:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
674: if (skip_reject_file != true) {
	00008550:TEST AL,AL
	00008552:JZ 0x0000857f
END_OF_LINE
----------------------------------------------
675: abort_hunk(outname,failed == 0,reverse);
	00008561:CMP dword ptr [RBP + -0x294],0x0
	00008568:SETZ AL
	0000856b:MOVZX ECX,AL
	0000856e:MOV RAX,qword ptr [RBP + -0x270]
	00008575:MOV ESI,ECX
	00008577:MOV RDI,RAX
	0000857a:CALL 0x0000ae94
END_OF_LINE
----------------------------------------------
677: failed = failed + 1;
	0000857f:ADD dword ptr [RBP + -0x294],0x1
END_OF_LINE
----------------------------------------------
678: if ((verbosity == _IScntrl) || ((skip_rest_of_patch != true && (verbosity != _ISblank))))
	0000858f:CMP EAX,0x2
	00008592:JZ 0x000085bb
	00008594:LEA RAX,[0x3e360]
	0000859b:MOVZX EAX,byte ptr [RAX]
	0000859e:XOR EAX,0x1
	000085a1:TEST AL,AL
	000085a3:JZ 0x0000877f
	000085a9:LEA RAX,[0x3e35c]
	000085b0:MOV EAX,dword ptr [RAX]
	000085b2:CMP EAX,0x1
	000085b5:JZ 0x0000877f
END_OF_LINE
----------------------------------------------
680: if ((skip_rest_of_patch == true) || (_Var2 = check_line_endings(newwhere), !_Var2)) {
	000085c8:TEST AL,AL
	000085ca:JZ 0x000085e8
	000085cc:MOV RAX,qword ptr [RBP + -0x228]
	000085d3:MOV RDI,RAX
	000085d6:CALL 0x0000bc96
	000085db:TEST AL,AL
	000085dd:JZ 0x000085e8
END_OF_LINE
----------------------------------------------
681: pcVar8 = "";
	000085e8:LEA RBX,[0x31525]
END_OF_LINE
----------------------------------------------
684: pcVar8 = " (different line endings)";
	000085df:LEA RBX,[0x315e6]
END_OF_LINE
----------------------------------------------
686: pcVar13 = format_linenum(numbuf,newwhere);
	000085f6:LEA RAX,[RBP + -0x30]
	000085fa:MOV RSI,RDX
	000085fd:MOV RDI,RAX
	00008600:CALL 0x00018472
END_OF_LINE
----------------------------------------------
687: if (skip_rest_of_patch == false) {
	00008612:TEST AL,AL
	00008614:JZ 0x0000861f
END_OF_LINE
----------------------------------------------
688: pcVar10 = "FAILED";
	0000861f:LEA RAX,[0x31608]
END_OF_LINE
----------------------------------------------
691: pcVar10 = "ignored";
	00008616:LEA RAX,[0x31600]
END_OF_LINE
----------------------------------------------
693: say("Hunk #%d %s at %s%s.\n",(ulong)(uint)hunk,pcVar10,pcVar13,pcVar8);
	00008626:MOV ESI,dword ptr [RBP + -0x298]
	0000862c:MOV R8,RBX
	0000862f:MOV RCX,RDX
	00008632:MOV RDX,RAX
	00008635:LEA RAX,[0x3160f]
	0000863c:MOV RDI,RAX
	0000863f:MOV EAX,0x0
	00008644:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
697: if (skip_rest_of_patch == true) goto LAB_00008881;
	000087be:TEST AL,AL
	000087c0:JZ 0x00008881
	000087c6:CMP dword ptr [RBP + -0x284],0x0
	000087cd:JNS 0x00008843
	000087cf:LEA RAX,[0x3e250]
	000087d6:MOVZX EAX,byte ptr [RAX]
	000087d9:TEST AL,AL
	000087db:JZ 0x00008843
	000087dd:LEA RAX,[0x3e260]
	000087e4:MOV RAX,qword ptr [RAX]
	000087e7:TEST RAX,RAX
	000087ea:JZ 0x00008800
	000087ec:LEA RAX,[0x31665]
	000087f3:MOV RDI,RAX
	000087f6:MOV EAX,0x0
	000087fb:CALL 0x000185b0
	00008800:LEA RAX,[0x31680]
	00008807:MOV RDI,RAX
	0000880a:MOV EAX,0x0
	0000880f:CALL 0x000188a8
	00008814:MOV RAX,qword ptr [RBP + -0x210]
	0000881b:TEST RAX,RAX
	0000881e:JZ 0x000091dd
	00008824:MOV RAX,qword ptr [RBP + -0x210]
	0000882b:MOV RDI,RAX
	0000882e:CALL 0x00005a80
	00008833:MOV qword ptr [RBP + -0x210],0x0
	0000883e:JMP 0x000091dd
	00008843:LEA RDX,[RBP + -0x1e0]
	0000884a:LEA RAX,[RBP + -0x210]
	00008851:MOV RSI,RDX
	00008854:MOV RDI,RAX
	00008857:CALL 0x0000b9f1
	0000885c:XOR EAX,0x1
	0000885f:TEST AL,AL
	00008861:JZ 0x00008881
	00008863:LEA RAX,[0x316b6]
	0000886a:MOV RDI,RAX
	0000886d:MOV EAX,0x0
	00008872:CALL 0x000188a8
	00008877:LEA RAX,[0x3e360]
	0000887e:MOV byte ptr [RAX],0x1
	00008881:CALL 0x0001904c
END_OF_LINE
----------------------------------------------
698: if ((-1 < got_hunk) || (using_plan_a == false)) {
	000087c6:CMP dword ptr [RBP + -0x284],0x0
	000087cd:JNS 0x00008843
	000087cf:LEA RAX,[0x3e250]
	000087d6:MOVZX EAX,byte ptr [RAX]
	000087d9:TEST AL,AL
	000087db:JZ 0x00008843
END_OF_LINE
----------------------------------------------
699: _Var2 = spew_output(&outstate,&tmpoutst);
	00008843:LEA RDX,[RBP + -0x1e0]
	0000884a:LEA RAX,[RBP + -0x210]
	00008851:MOV RSI,RDX
	00008854:MOV RDI,RAX
	00008857:CALL 0x0000b9f1
END_OF_LINE
----------------------------------------------
700: if (!_Var2) {
	00008861:JZ 0x00008881
END_OF_LINE
----------------------------------------------
701: say("Skipping patch.\n");
	00008872:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
702: skip_rest_of_patch = true;
	0000887e:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
704: goto LAB_00008881;
	00008881:CALL 0x0001904c
END_OF_LINE
----------------------------------------------
706: if (outfile != (char *)0x0) {
	000087e7:TEST RAX,RAX
	000087ea:JZ 0x00008800
END_OF_LINE
----------------------------------------------
708: fatal("out of memory using Plan A");
	000087fb:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
710: say("\n\nRan out of memory using Plan A -- trying again...\n\n");
	0000880f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
711: if (outstate.ofp != (FILE *)0x0) {
	0000881b:TEST RAX,RAX
	0000881e:JZ 0x000091dd
END_OF_LINE
----------------------------------------------
712: fclose((FILE *)outstate.ofp);
	0000882e:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
713: outstate.ofp = (FILE *)0x0;
	00008833:MOV qword ptr [RBP + -0x210],0x0
END_OF_LINE
----------------------------------------------
716: reinitialize_almost_everything();
	000091de:CALL 0x000092c1
END_OF_LINE
----------------------------------------------
717: skip_reject_file = false;
	000091e3:MOV byte ptr [RBP + -0x2a9],0x0
END_OF_LINE
----------------------------------------------
718: apply_empty_patch = false;
	000091ea:MOV byte ptr [RBP + -0x2a8],0x0
END_OF_LINE
----------------------------------------------
719: } while( true );
	000091ea:MOV byte ptr [RBP + -0x2a8],0x0
END_OF_LINE



Function: reinitialize_almost_everything
----------------------------------------------
7: re_patch();
	000092c9:CALL 0x0000c990
END_OF_LINE
----------------------------------------------
8: re_input();
	000092ce:CALL 0x00006199
END_OF_LINE
----------------------------------------------
9: input_lines = 0;
	000092da:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
10: last_frozen_line = 0;
	000092e8:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
11: if ((inname != (char *)0x0) && (explicit_inname != true)) {
	000092f9:TEST RAX,RAX
	000092fc:JZ 0x0000932c
	000092fe:MOVZX EAX,byte ptr [0x0003e3c1]
	00009305:XOR EAX,0x1
	00009308:TEST AL,AL
	0000930a:JZ 0x0000932c
END_OF_LINE
----------------------------------------------
12: free(inname);
	00009319:CALL 0x00005860
END_OF_LINE
----------------------------------------------
13: inname = (char *)0x0;
	00009325:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
15: in_offset = 0;
	00009333:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
16: out_offset = 0;
	00009341:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
17: diff_type = NO_DIFF;
	0000934f:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
18: if (revision != (char *)0x0) {
	0000935f:TEST RAX,RAX
	00009362:JZ 0x00009384
END_OF_LINE
----------------------------------------------
19: free(revision);
	00009371:CALL 0x00005860
END_OF_LINE
----------------------------------------------
20: revision = (char *)0x0;
	0000937d:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
22: reverse = reverse_flag_specified;
	00009392:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
23: skip_rest_of_patch = false;
	0000939b:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
24: return;
	000093a0:RET
END_OF_LINE



Function: usage
----------------------------------------------
9: if (status == 0) {
	000093b4:CMP dword ptr [RBP + -0x1c],0x0
	000093b8:JZ 0x000093e8
END_OF_LINE
----------------------------------------------
10: fprintf((FILE *)stream,"Usage: %s [OPTION]... [ORIGFILE [PATCHFILE]]\n\n",*Argv);
	000093ef:MOV RDX,qword ptr [RAX]
	000093f2:MOV RAX,qword ptr [RBP + -0x18]
	000093f6:LEA RCX,[0x32570]
	000093fd:MOV RSI,RCX
	00009400:MOV RDI,RAX
	00009403:MOV EAX,0x0
	00009408:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
11: for (p = option_help; *p != (char *)0x0; p = p + 1) {
	00009414:MOV qword ptr [RBP + -0x8],RAX
	00009418:JMP 0x00009441
	0000941a:MOV RAX,qword ptr [RBP + -0x8]
	0000941e:MOV RDX,qword ptr [RAX]
	00009421:MOV RAX,qword ptr [RBP + -0x18]
	00009425:LEA RCX,[0x3259f]
	0000942c:MOV RSI,RCX
	0000942f:MOV RDI,RAX
	00009432:MOV EAX,0x0
	00009437:CALL 0x00005d30
	0000943c:ADD qword ptr [RBP + -0x8],0x8
	00009441:MOV RAX,qword ptr [RBP + -0x8]
	00009445:MOV RAX,qword ptr [RAX]
	00009448:TEST RAX,RAX
	0000944b:JNZ 0x0000941a
END_OF_LINE
----------------------------------------------
12: fprintf((FILE *)stream,"%s\n",*p);
	0000941e:MOV RDX,qword ptr [RAX]
	00009421:MOV RAX,qword ptr [RBP + -0x18]
	00009425:LEA RCX,[0x3259f]
	0000942c:MOV RSI,RCX
	0000942f:MOV RDI,RAX
	00009432:MOV EAX,0x0
	00009437:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
16: fprintf((FILE *)stream,"%s: Try \'%s --help\' for more information.\n",program_name,*Argv);
	000093c1:MOV RCX,qword ptr [RAX]
	000093c4:LEA RAX,[0x42f48]
	000093cb:MOV RDX,qword ptr [RAX]
	000093ce:MOV RAX,qword ptr [RBP + -0x18]
	000093d2:LEA RSI,[0x32540]
	000093d9:MOV RDI,RAX
	000093dc:MOV EAX,0x0
	000093e1:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
19: exit(status);
	00009452:CALL 0x00005ff0
END_OF_LINE



Function: get_some_switches
----------------------------------------------
15: free(rejname);
	0000946d:CALL 0x00005860
END_OF_LINE
----------------------------------------------
16: rejname = (char *)0x0;
	00009472:MOV qword ptr [0x0003e3f0],0x0
END_OF_LINE
----------------------------------------------
17: if (iRam0000000000144138 == Argc) {
	0000948c:CMP EDX,EAX
	0000948e:JZ 0x00009e13
END_OF_LINE
----------------------------------------------
18: rejname = (char *)0x0;
	00009e14:LEAVE
END_OF_LINE
----------------------------------------------
19: return;
	00009e15:RET
END_OF_LINE
----------------------------------------------
21: LAB_00009cac:
	00009cac:MOV RSI,qword ptr [0x0003e3d8]
END_OF_LINE
----------------------------------------------
23: iVar1 = getopt_long(Argc,Argv,"bB:cd:D:eEfF:g:i:lnNo:p:r:RstTuvV:x:Y:z:Z",longopts,0);
	00009cd2:CALL 0x00005b10
END_OF_LINE
----------------------------------------------
24: if (iVar1 == -1) {
	00009cda:CMP dword ptr [RBP + -0x8],-0x1
	00009cde:JNZ 0x00009499
END_OF_LINE
----------------------------------------------
25: if (Argc <= iRam0000000000144138) {
	00009cf5:JGE 0x00009e14
END_OF_LINE
----------------------------------------------
26: return;
	00009e15:RET
END_OF_LINE
----------------------------------------------
28: lVar3 = (long)iRam0000000000144138;
	00009d17:CDQE
END_OF_LINE
----------------------------------------------
29: iRam0000000000144138 = iRam0000000000144138 + 1;
	00009d0b:LEA ECX,[RAX + 0x1]
	00009d0e:MOV RDX,qword ptr [0x0003dfa0]
	00009d15:MOV dword ptr [RDX],ECX
	00009d17:CDQE
	00009d19:SHL RAX,0x3
	00009d1d:ADD RAX,RSI
	00009d20:MOV RAX,qword ptr [RAX]
	00009d23:MOV RDI,RAX
	00009d26:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
30: inname = xstrdup(Argv[lVar3]);
	00009d1d:ADD RAX,RSI
	00009d20:MOV RAX,qword ptr [RAX]
	00009d23:MOV RDI,RAX
	00009d26:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
31: explicit_inname = true;
	00009d38:MOV byte ptr [0x0003e3c1],0x1
END_OF_LINE
----------------------------------------------
32: invc = -1;
	00009d46:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
33: if (Argc <= iRam0000000000144138) {
	00009d5d:JGE 0x00009e14
END_OF_LINE
----------------------------------------------
34: invc = -1;
	00009e15:RET
END_OF_LINE
----------------------------------------------
35: explicit_inname = true;
	00009e15:RET
END_OF_LINE
----------------------------------------------
36: return;
	00009e15:RET
END_OF_LINE
----------------------------------------------
38: lVar3 = (long)iRam0000000000144138;
	00009d7f:CDQE
END_OF_LINE
----------------------------------------------
39: iRam0000000000144138 = iRam0000000000144138 + 1;
	00009d73:LEA ECX,[RAX + 0x1]
	00009d76:MOV RDX,qword ptr [0x0003dfa0]
	00009d7d:MOV dword ptr [RDX],ECX
	00009d7f:CDQE
	00009d81:SHL RAX,0x3
	00009d85:ADD RAX,RSI
	00009d88:MOV RAX,qword ptr [RAX]
	00009d8b:MOV RDI,RAX
	00009d8e:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
40: patchname = xstrdup(Argv[lVar3]);
	00009d85:ADD RAX,RSI
	00009d88:MOV RAX,qword ptr [RAX]
	00009d8b:MOV RDI,RAX
	00009d8e:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
41: if (Argc <= iRam0000000000144138) {
	00009dab:JGE 0x00009e14
END_OF_LINE
----------------------------------------------
42: return;
	00009e15:RET
END_OF_LINE
----------------------------------------------
44: pcVar4 = quotearg(Argv[iRam0000000000144138]);
	00009dbd:CDQE
	00009dbf:SHL RAX,0x3
	00009dc3:ADD RAX,RDX
	00009dc6:MOV RAX,qword ptr [RAX]
	00009dc9:MOV RDI,RAX
	00009dcc:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
45: fprintf(pFRam0000000000144490,"%s: %s: extra operand\n",program_name,pcVar4);
	00009df7:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
47: usage((FILE *)pFRam0000000000144490,2);
	00009e0e:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
49: switch(iVar1) {
	000094c8:JMP RAX
END_OF_LINE
----------------------------------------------
50: case 0x42:
	000096a0:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
51: if (*pcRam0000000000144290 == '\0') {
	000096a0:MOVZX EAX,byte ptr [RAX]
	000096a3:TEST AL,AL
	000096a5:JNZ 0x000096bb
END_OF_LINE
----------------------------------------------
53: fatal("backup prefix is empty");
	000096b6:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
55: origprae = xstrdup(pcRam0000000000144290);
	000096c8:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
57: default:
	00009ca7:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
59: usage((FILE *)pFRam0000000000144490,2);
	00009ca7:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
60: case 0x44:
	00009741:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
61: do_defines = xstrdup(pcRam0000000000144290);
	00009741:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
63: case 0x45:
	00009764:MOV byte ptr [0x0003e3c0],0x1
END_OF_LINE
----------------------------------------------
64: remove_empty_files = true;
	00009764:MOV byte ptr [0x0003e3c0],0x1
END_OF_LINE
----------------------------------------------
66: case 0x46:
	00009798:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
67: iVar1 = numeric_string(pcRam0000000000144290,false,"fuzz factor");
	00009798:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
68: maxfuzz = (lin)iVar1;
	0000979d:CDQE
END_OF_LINE
----------------------------------------------
70: case 0x4e:
	000098c0:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
71: noreverse = true;
	000098c0:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
73: case 0x52:
	0000993d:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
74: reverse = true;
	0000993d:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
75: reverse_flag_specified = true;
	00009940:MOV byte ptr [0x0003e3c2],0x1
END_OF_LINE
----------------------------------------------
77: case 0x54:
	00009974:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
78: set_time = true;
	00009974:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
80: case 0x56:
	000099a7:MOV qword ptr [0x0003e3b0],RAX
END_OF_LINE
----------------------------------------------
81: version_control = pcRam0000000000144290;
	000099a7:MOV qword ptr [0x0003e3b0],RAX
END_OF_LINE
----------------------------------------------
82: version_control_context = "--version-control or -V option";
	000099b5:MOV qword ptr [0x0003e3b8],RAX
END_OF_LINE
----------------------------------------------
84: case 0x59:
	000099f7:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
85: if (*pcRam0000000000144290 == '\0') {
	000099f7:MOVZX EAX,byte ptr [RAX]
	000099fa:TEST AL,AL
	000099fc:JNZ 0x00009a12
END_OF_LINE
----------------------------------------------
87: fatal("backup basename prefix is empty");
	00009a0d:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
89: origbase = xstrdup(pcRam0000000000144290);
	00009a1f:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
91: case 0x5a:
	00009a87:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
92: set_utc = true;
	00009a87:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
94: case 0x62:
	000094cb:MOV byte ptr [0x0003e3ac],0x1
END_OF_LINE
----------------------------------------------
95: make_backups = true;
	000094cb:MOV byte ptr [0x0003e3ac],0x1
END_OF_LINE
----------------------------------------------
96: if (((((Argc - iRam0000000000144138 != 3) ||
	000094e3:SUB EAX,ECX
	000094e5:CMP EAX,0x3
	000094e8:JNZ 0x00009cac
	000094ee:MOV RDX,qword ptr [0x0003e3d8]
	000094f5:MOV RAX,qword ptr [0x0003dfa0]
	000094fc:MOV EAX,dword ptr [RAX]
	000094fe:CDQE
	00009500:SHL RAX,0x3
	00009504:SUB RAX,0x8
	00009508:ADD RAX,RDX
	0000950b:MOV RAX,qword ptr [RAX]
	0000950e:LEA RDX,[0x325a3]
	00009515:MOV RSI,RDX
	00009518:MOV RDI,RAX
	0000951b:CALL 0x00005ce0
	00009520:TEST EAX,EAX
	00009522:JNZ 0x00009cac
	00009528:MOV RDX,qword ptr [0x0003e3d8]
	0000952f:MOV RAX,qword ptr [0x0003dfa0]
	00009536:MOV EAX,dword ptr [RAX]
	00009538:CDQE
	0000953a:SHL RAX,0x3
	0000953e:ADD RAX,RDX
	00009541:MOV RAX,qword ptr [RAX]
	00009544:MOVZX EAX,byte ptr [RAX]
	00009547:CMP AL,0x2d
	00009549:JNZ 0x00009576
	0000954b:MOV RDX,qword ptr [0x0003e3d8]
	00009552:MOV RAX,qword ptr [0x0003dfa0]
	00009559:MOV EAX,dword ptr [RAX]
	0000955b:CDQE
	0000955d:SHL RAX,0x3
	00009561:ADD RAX,RDX
	00009564:MOV RAX,qword ptr [RAX]
	00009567:ADD RAX,0x1
	0000956b:MOVZX EAX,byte ptr [RAX]
	0000956e:TEST AL,AL
	00009570:JNZ 0x00009cac
	00009576:MOV RDX,qword ptr [0x0003e3d8]
	0000957d:MOV RAX,qword ptr [0x0003dfa0]
	00009584:MOV EAX,dword ptr [RAX]
	00009586:CDQE
	00009588:ADD RAX,0x1
	0000958c:SHL RAX,0x3
	00009590:ADD RAX,RDX
	00009593:MOV RAX,qword ptr [RAX]
	00009596:MOVZX EAX,byte ptr [RAX]
	00009599:CMP AL,0x2d
	0000959b:JNZ 0x000095cc
	0000959d:MOV RDX,qword ptr [0x0003e3d8]
	000095a4:MOV RAX,qword ptr [0x0003dfa0]
	000095ab:MOV EAX,dword ptr [RAX]
	000095ad:CDQE
	000095af:ADD RAX,0x1
	000095b3:SHL RAX,0x3
	000095b7:ADD RAX,RDX
	000095ba:MOV RAX,qword ptr [RAX]
	000095bd:ADD RAX,0x1
	000095c1:MOVZX EAX,byte ptr [RAX]
	000095c4:TEST AL,AL
	000095c6:JNZ 0x00009cac
	000095cc:MOV RDX,qword ptr [0x0003e3d8]
	000095d3:MOV RAX,qword ptr [0x0003dfa0]
	000095da:MOV EAX,dword ptr [RAX]
	000095dc:CDQE
	000095de:ADD RAX,0x2
	000095e2:SHL RAX,0x3
	000095e6:ADD RAX,RDX
	000095e9:MOV RAX,qword ptr [RAX]
	000095ec:MOVZX EAX,byte ptr [RAX]
	000095ef:CMP AL,0x2d
	000095f1:JNZ 0x00009622
	000095f3:MOV RDX,qword ptr [0x0003e3d8]
	000095fa:MOV RAX,qword ptr [0x0003dfa0]
	00009601:MOV EAX,dword ptr [RAX]
	00009603:CDQE
	00009605:ADD RAX,0x2
	00009609:SHL RAX,0x3
	0000960d:ADD RAX,RDX
	00009610:MOV RAX,qword ptr [RAX]
	00009613:ADD RAX,0x1
	00009617:MOVZX EAX,byte ptr [RAX]
	0000961a:TEST AL,AL
	0000961c:JNZ 0x00009cac
END_OF_LINE
----------------------------------------------
97: (iVar1 = strcmp(Argv[(long)iRam0000000000144138 + -1],"-b"), iVar1 != 0)) ||
	000094fe:CDQE
	00009500:SHL RAX,0x3
	00009504:SUB RAX,0x8
	00009508:ADD RAX,RDX
	0000950b:MOV RAX,qword ptr [RAX]
	0000950e:LEA RDX,[0x325a3]
	00009515:MOV RSI,RDX
	00009518:MOV RDI,RAX
	0000951b:CALL 0x00005ce0
	00009520:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
98: ((*Argv[iRam0000000000144138] == '-' && (Argv[iRam0000000000144138][1] != '\0')))) ||
	00009538:CDQE
	0000953a:SHL RAX,0x3
	0000953e:ADD RAX,RDX
	00009541:MOV RAX,qword ptr [RAX]
	00009544:MOVZX EAX,byte ptr [RAX]
	00009547:CMP AL,0x2d
	00009549:JNZ 0x00009576
	0000954b:MOV RDX,qword ptr [0x0003e3d8]
	00009552:MOV RAX,qword ptr [0x0003dfa0]
	00009559:MOV EAX,dword ptr [RAX]
	0000955b:CDQE
	0000955d:SHL RAX,0x3
	00009561:ADD RAX,RDX
	00009564:MOV RAX,qword ptr [RAX]
	00009567:ADD RAX,0x1
	0000956b:MOVZX EAX,byte ptr [RAX]
	0000956e:TEST AL,AL
END_OF_LINE
----------------------------------------------
99: ((*Argv[(long)iRam0000000000144138 + 1] == '-' &&
	00009586:CDQE
	00009588:ADD RAX,0x1
	0000958c:SHL RAX,0x3
	00009590:ADD RAX,RDX
	00009593:MOV RAX,qword ptr [RAX]
	00009596:MOVZX EAX,byte ptr [RAX]
	00009599:CMP AL,0x2d
END_OF_LINE
----------------------------------------------
100: (Argv[(long)iRam0000000000144138 + 1][1] != '\0')))) ||
	000095ad:CDQE
	000095af:ADD RAX,0x1
	000095b3:SHL RAX,0x3
	000095b7:ADD RAX,RDX
	000095ba:MOV RAX,qword ptr [RAX]
	000095bd:ADD RAX,0x1
	000095c1:MOVZX EAX,byte ptr [RAX]
	000095c4:TEST AL,AL
END_OF_LINE
----------------------------------------------
101: ((*Argv[(long)iRam0000000000144138 + 2] == '-' &&
	000095dc:CDQE
	000095de:ADD RAX,0x2
	000095e2:SHL RAX,0x3
	000095e6:ADD RAX,RDX
	000095e9:MOV RAX,qword ptr [RAX]
	000095ec:MOVZX EAX,byte ptr [RAX]
	000095ef:CMP AL,0x2d
END_OF_LINE
----------------------------------------------
102: (Argv[(long)iRam0000000000144138 + 2][1] != '\0')))) break;
	00009603:CDQE
	00009605:ADD RAX,0x2
	00009609:SHL RAX,0x3
	0000960d:ADD RAX,RDX
	00009610:MOV RAX,qword ptr [RAX]
	00009613:ADD RAX,0x1
	00009617:MOVZX EAX,byte ptr [RAX]
	0000961a:TEST AL,AL
END_OF_LINE
----------------------------------------------
103: iVar1 = iRam0000000000144138 + 1;
	00009632:LEA ECX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
104: pcRam0000000000144290 = Argv[iRam0000000000144138];
	0000963e:CDQE
	00009640:SHL RAX,0x3
	00009644:ADD RAX,RSI
	00009647:MOV RDX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
105: iRam0000000000144138 = iVar1;
	00009660:JZ 0x00009a36
END_OF_LINE
----------------------------------------------
106: if (verbosity != _ISblank) {
	0000965d:CMP EAX,0x1
	00009660:JZ 0x00009a36
END_OF_LINE
----------------------------------------------
107: say("warning: the \'-b %s\' option is obsolete; use \'-b -z %s\' instead\n",
	0000968c:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
108: pcRam0000000000144290,pcRam0000000000144290);
	0000968c:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
110: case 0x7a:
	00009a37:MOV RAX,qword ptr [0x0003dfa8]
END_OF_LINE
----------------------------------------------
111: if (*pcRam0000000000144290 == '\0') {
	00009a41:MOVZX EAX,byte ptr [RAX]
	00009a44:TEST AL,AL
	00009a46:JNZ 0x00009a5c
END_OF_LINE
----------------------------------------------
113: fatal("backup suffix is empty");
	00009a57:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
115: origsuff = xstrdup(pcRam0000000000144290);
	00009a69:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
117: case 99:
	000096e6:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
118: diff_type = CONTEXT_DIFF;
	000096e6:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
120: case 100:
	000096fe:CALL 0x00005af0
END_OF_LINE
----------------------------------------------
121: goto switchD_001094c8_caseD_64;
	000096f1:MOV RAX,qword ptr [0x0003dfa8]
END_OF_LINE
----------------------------------------------
122: case 0x65:
	00009759:MOV dword ptr [RAX],0x3
END_OF_LINE
----------------------------------------------
123: diff_type = ED_DIFF;
	00009759:MOV dword ptr [RAX],0x3
END_OF_LINE
----------------------------------------------
125: case 0x66:
	00009777:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
126: force = true;
	00009777:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
128: case 0x67:
	000097c4:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
129: patch_get = numeric_string(pcRam0000000000144290,true,"get option value");
	000097c4:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
131: case 0x69:
	000097e4:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
132: patchname = xstrdup(pcRam0000000000144290);
	000097e4:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
134: case 0x6c:
	000097fc:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
135: canonicalize_ws = true;
	000097fc:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
137: case 0x6d:
	00009804:MOV byte ptr [0x0003e3a4],0x1
END_OF_LINE
----------------------------------------------
138: merge = true;
	00009804:MOV byte ptr [0x0003e3a4],0x1
END_OF_LINE
----------------------------------------------
139: if (pcRam0000000000144290 == (char *)0x0) {
	00009815:TEST RAX,RAX
	00009818:JZ 0x00009895
END_OF_LINE
----------------------------------------------
140: conflict_style = MERGE_MERGE;
	0000989c:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
143: iVar1 = strcmp(pcRam0000000000144290,"merge");
	00009831:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
144: if (iVar1 == 0) {
	00009836:TEST EAX,EAX
	00009838:JNZ 0x0000984c
END_OF_LINE
----------------------------------------------
145: conflict_style = MERGE_MERGE;
	00009841:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
148: iVar1 = strcmp(pcRam0000000000144290,"diff3");
	00009863:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
149: if (iVar1 != 0) {
	00009868:TEST EAX,EAX
	0000986a:JNZ 0x0000987e
END_OF_LINE
----------------------------------------------
151: usage((FILE *)pFRam0000000000144490,2);
	00009890:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
153: conflict_style = MERGE_DIFF3;
	00009873:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
157: case 0x6e:
	000098ae:MOV dword ptr [RAX],0x2
END_OF_LINE
----------------------------------------------
158: diff_type = NORMAL_DIFF;
	000098ae:MOV dword ptr [RAX],0x2
END_OF_LINE
----------------------------------------------
160: case 0x6f:
	000098d5:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
161: outfile = xstrdup(pcRam0000000000144290);
	000098d5:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
163: case 0x70:
	00009905:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
164: strippath = numeric_string(pcRam0000000000144290,false,"strip count");
	00009905:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
166: case 0x72:
	00009925:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
167: rejname = xstrdup(pcRam0000000000144290);
	00009925:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
169: case 0x73:
	00009953:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
170: verbosity = _ISblank;
	00009953:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
172: case 0x74:
	00009965:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
173: batch = true;
	00009965:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
175: case 0x75:
	00009983:MOV dword ptr [RAX],0x5
END_OF_LINE
----------------------------------------------
176: diff_type = UNI_DIFF;
	00009983:MOV dword ptr [RAX],0x5
END_OF_LINE
----------------------------------------------
178: case 0x76:
	0000998e:CALL 0x0001a23c
END_OF_LINE
----------------------------------------------
179: version();
	0000998e:CALL 0x0001a23c
END_OF_LINE
----------------------------------------------
181: exit(0);
	00009998:CALL 0x00005ff0
END_OF_LINE
----------------------------------------------
182: case 0x78:
	000099da:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
183: debug = numeric_string(pcRam0000000000144290,true,"debugging option");
	000099da:CALL 0x00009e16
END_OF_LINE
----------------------------------------------
185: case 0x80:
	00009a96:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
186: dry_run = true;
	00009a96:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
188: case 0x81:
	00009aa5:MOV dword ptr [RAX],0x2
END_OF_LINE
----------------------------------------------
189: verbosity = _IScntrl;
	00009aa5:MOV dword ptr [RAX],0x2
END_OF_LINE
----------------------------------------------
191: case 0x82:
	00009ab7:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
192: no_strip_trailing_cr = true;
	00009ab7:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
194: case 0x83:
	00009ad1:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
196: usage(pFRam0000000000144070,0);
	00009ad1:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
197: case 0x84:
	00009ad6:MOV byte ptr [0x0003e3ad],0x1
END_OF_LINE
----------------------------------------------
198: backup_if_mismatch = true;
	00009ad6:MOV byte ptr [0x0003e3ad],0x1
END_OF_LINE
----------------------------------------------
200: case 0x85:
	00009ae2:MOV byte ptr [0x0003e3ad],0x0
END_OF_LINE
----------------------------------------------
201: backup_if_mismatch = false;
	00009ae2:MOV byte ptr [0x0003e3ad],0x0
END_OF_LINE
----------------------------------------------
203: case 0x86:
	00009af5:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
204: posixly_correct = true;
	00009af5:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
206: case 0x87:
	00009b1b:CALL 0x0001d085
END_OF_LINE
----------------------------------------------
207: pVar2 = argmatch(pcRam0000000000144290,quoting_style_args,(char *)0x0,0);
	00009b1b:CALL 0x0001d085
END_OF_LINE
----------------------------------------------
208: s = (quoting_style)pVar2;
	00009b20:MOV dword ptr [RBP + -0x4],EAX
END_OF_LINE
----------------------------------------------
209: if ((int)s < 0) {
	00009b23:CMP dword ptr [RBP + -0x4],0x0
	00009b27:JNS 0x00009b62
END_OF_LINE
----------------------------------------------
210: argmatch_invalid("quoting style",pcRam0000000000144290,(long)(int)s);
	00009b2c:MOVSXD RDX,EAX
	00009b2f:MOV RAX,qword ptr [0x0003dfa8]
	00009b36:MOV RAX,qword ptr [RAX]
	00009b39:MOV RSI,RAX
	00009b3c:LEA RAX,[0x326b7]
	00009b43:MOV RDI,RAX
	00009b46:CALL 0x0001d1b8
END_OF_LINE
----------------------------------------------
212: usage((FILE *)pFRam0000000000144490,2);
	00009b5d:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
214: set_quoting_style((quoting_options *)0x0,s);
	00009b6c:CALL 0x00028be0
END_OF_LINE
----------------------------------------------
216: case 0x88:
	00009b8d:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
217: iVar1 = strcmp(pcRam0000000000144290,"context");
	00009b8d:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
218: if (iVar1 == 0) {
	00009b92:TEST EAX,EAX
	00009b94:JNZ 0x00009ba5
END_OF_LINE
----------------------------------------------
219: reject_format = NEW_CONTEXT_DIFF;
	00009b96:MOV dword ptr [0x0003e3a8],0x4
END_OF_LINE
----------------------------------------------
222: iVar1 = strcmp(pcRam0000000000144290,"unified");
	00009bbc:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
223: if (iVar1 != 0) {
	00009bc1:TEST EAX,EAX
	00009bc3:JNZ 0x00009bd4
END_OF_LINE
----------------------------------------------
225: usage((FILE *)pFRam0000000000144490,2);
	00009be6:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
227: reject_format = UNI_DIFF;
	00009bc5:MOV dword ptr [0x0003e3a8],0x5
END_OF_LINE
----------------------------------------------
230: case 0x89:
	00009c02:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
231: iVar1 = strcmp(pcRam0000000000144290,"ignore");
	00009c02:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
232: if (iVar1 == 0) {
	00009c07:TEST EAX,EAX
	00009c09:JNZ 0x00009c1a
END_OF_LINE
----------------------------------------------
233: read_only_behavior = DEFAULT_VERBOSITY;
	00009c0b:MOV dword ptr [0x0003e030],0x0
END_OF_LINE
----------------------------------------------
236: iVar1 = strcmp(pcRam0000000000144290,"warn");
	00009c31:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
237: if (iVar1 == 0) {
	00009c36:TEST EAX,EAX
	00009c38:JNZ 0x00009c46
END_OF_LINE
----------------------------------------------
238: read_only_behavior = _ISblank;
	00009c3a:MOV dword ptr [0x0003e030],0x1
END_OF_LINE
----------------------------------------------
241: iVar1 = strcmp(pcRam0000000000144290,"fail");
	00009c5d:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
242: if (iVar1 != 0) {
	00009c62:TEST EAX,EAX
	00009c64:JNZ 0x00009c72
END_OF_LINE
----------------------------------------------
244: usage((FILE *)pFRam0000000000144490,2);
	00009c84:CALL 0x000093a1
END_OF_LINE
----------------------------------------------
246: read_only_behavior = _IScntrl;
	00009c66:MOV dword ptr [0x0003e030],0x2
END_OF_LINE
----------------------------------------------
250: case 0x8a:
	00009c90:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
251: follow_symlinks = true;
	00009c90:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
254: switchD_001094c8_caseD_64:
	000096f1:MOV RAX,qword ptr [0x0003dfa8]
END_OF_LINE
----------------------------------------------
255: iVar1 = chdir(pcRam0000000000144290);
	000096fe:CALL 0x00005af0
END_OF_LINE
----------------------------------------------
256: if (iVar1 < 0) {
	00009703:TEST EAX,EAX
	00009705:JNS 0x00009cac
END_OF_LINE
----------------------------------------------
257: pcVar4 = quotearg(pcRam0000000000144290);
	00009718:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
259: pfatal("Can\'t change to directory %s",pcVar4);
	0000972f:CALL 0x00018721
END_OF_LINE
----------------------------------------------
261: goto LAB_00009cac;
	00009cac:MOV RSI,qword ptr [0x0003e3d8]
END_OF_LINE



Function: numeric_string
----------------------------------------------
21: value = 0;
	00009e2f:MOV dword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
22: if (*string == '-') {
	00009e42:MOVZX EAX,byte ptr [RAX]
	00009e45:CMP AL,0x2d
	00009e47:JNZ 0x00009e50
END_OF_LINE
----------------------------------------------
23: iVar1 = -1;
	00009e49:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
26: iVar1 = 1;
	00009e50:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
28: if ((*string == '-') || (*string == '+')) {
	00009e5c:MOVZX EAX,byte ptr [RAX]
	00009e5f:CMP AL,0x2d
	00009e61:JZ 0x00009e6e
	00009e63:MOV RAX,qword ptr [RBP + -0x8]
	00009e67:MOVZX EAX,byte ptr [RAX]
	00009e6a:CMP AL,0x2b
	00009e6c:JNZ 0x00009e75
END_OF_LINE
----------------------------------------------
29: iVar2 = 1;
	00009e6e:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
32: iVar2 = 0;
	00009e75:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
34: p = string + iVar2;
	00009e7a:CDQE
	00009e7c:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
35: while( true ) {
	00009f1b:JZ 0x00009f47
END_OF_LINE
----------------------------------------------
36: iVar2 = value * 10;
	00009e8a:ADD EAX,EAX
END_OF_LINE
----------------------------------------------
37: iVar3 = iVar1 * ((int)*p - 0x30U);
	00009e93:MOVZX EAX,byte ptr [RAX]
	00009e96:MOVSX EAX,AL
	00009e99:SUB EAX,0x30
	00009e9c:MOV dword ptr [RBP + -0x14],EAX
	00009e9f:MOV EAX,dword ptr [RBP + -0x1c]
	00009ea2:IMUL EAX,dword ptr [RBP + -0x14]
END_OF_LINE
----------------------------------------------
38: iVar4 = iVar3 + iVar2;
	00009eaf:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
39: if (9 < (int)*p - 0x30U) {
	00009e93:MOVZX EAX,byte ptr [RAX]
	00009e96:MOVSX EAX,AL
	00009e99:SUB EAX,0x30
	00009e9c:MOV dword ptr [RBP + -0x14],EAX
	00009e9f:MOV EAX,dword ptr [RBP + -0x1c]
	00009ea2:IMUL EAX,dword ptr [RBP + -0x14]
	00009ea6:MOV dword ptr [RBP + -0x10],EAX
	00009ea9:MOV EDX,dword ptr [RBP + -0x18]
	00009eac:MOV EAX,dword ptr [RBP + -0x10]
	00009eaf:ADD EAX,EDX
	00009eb1:MOV dword ptr [RBP + -0xc],EAX
	00009eb4:MOV EAX,dword ptr [RBP + -0x14]
	00009eb7:CMP EAX,0x9
	00009eba:JBE 0x00009ee6
END_OF_LINE
----------------------------------------------
40: pcVar5 = quotearg(string);
	00009ec3:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
42: fatal("%s %s is not a number",argtype_msgid,pcVar5);
	00009ee1:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
44: if ((value != iVar2 / 10) || (SUB41((uint)iVar3 >> 0x1f,0) != iVar4 < iVar2)) break;
	00009ef7:SAR EDX,0x2
	00009efa:SAR EAX,0x1f
	00009efd:MOV ECX,EAX
	00009eff:MOV EAX,EDX
	00009f01:SUB EAX,ECX
	00009f03:CMP dword ptr [RBP + -0x20],EAX
	00009f06:JNZ 0x00009f1d
	00009f08:MOV EAX,dword ptr [RBP + -0xc]
	00009f0b:CMP EAX,dword ptr [RBP + -0x18]
	00009f0e:SETL DL
	00009f11:MOV EAX,dword ptr [RBP + -0x10]
	00009f14:SHR EAX,0x1f
	00009f17:XOR EAX,EDX
	00009f19:TEST AL,AL
	00009f1b:JZ 0x00009f47
END_OF_LINE
----------------------------------------------
45: p = p + 1;
	00009f4d:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
46: value = iVar4;
	00009f5b:JNZ 0x00009e80
END_OF_LINE
----------------------------------------------
47: if (*p == '\0') {
	00009f56:MOVZX EAX,byte ptr [RAX]
	00009f59:TEST AL,AL
	00009f5b:JNZ 0x00009e80
END_OF_LINE
----------------------------------------------
48: if ((iVar4 < 0) && (!negative_allowed)) {
	00009f61:CMP dword ptr [RBP + -0x20],0x0
	00009f65:JNS 0x00009f9c
	00009f67:MOVZX EAX,byte ptr [RBP + -0x2c]
	00009f6b:XOR EAX,0x1
	00009f6e:TEST AL,AL
	00009f70:JZ 0x00009f9c
END_OF_LINE
----------------------------------------------
49: pcVar5 = quotearg(string);
	00009f79:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
51: fatal("%s %s is negative",argtype_msgid,pcVar5);
	00009f97:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
53: return iVar4;
	00009fa0:RET
END_OF_LINE
----------------------------------------------
56: pcVar5 = quotearg(string);
	00009f24:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
58: fatal("%s %s is too large",argtype_msgid,pcVar5);
	00009f42:CALL 0x000185b0
END_OF_LINE



Function: locate_hunk
----------------------------------------------
38: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00009fb8:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
39: lVar3 = pch_first();
	00009fc7:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
40: lVar3 = in_offset + lVar3;
	00009fd9:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
41: lVar4 = pch_ptrn_lines();
	00009fe3:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
42: lVar5 = pch_prefix_context();
	00009fef:CALL 0x00013c48
END_OF_LINE
----------------------------------------------
43: lVar6 = pch_suffix_context();
	00009ffb:CALL 0x00013c59
END_OF_LINE
----------------------------------------------
44: lVar10 = lVar6;
	0000a018:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
45: if (lVar6 <= lVar5) {
	0000a018:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
46: lVar10 = lVar5;
	0000a018:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
48: prefix_fuzz = (lVar5 + fuzz) - lVar10;
	0000a031:ADD RAX,RDX
	0000a034:SUB RAX,qword ptr [RBP + -0x88]
END_OF_LINE
----------------------------------------------
49: suffix_fuzz_00 = (lVar6 + fuzz) - lVar10;
	0000a050:ADD RAX,RDX
	0000a053:SUB RAX,qword ptr [RBP + -0x88]
END_OF_LINE
----------------------------------------------
50: lVar7 = (input_lines - (lVar4 - suffix_fuzz_00)) + 1;
	0000a06f:SUB RAX,qword ptr [RBP + -0x80]
	0000a073:MOV RCX,RAX
	0000a076:MOV RAX,RDX
	0000a079:SUB RAX,RCX
	0000a07c:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
51: lVar8 = last_frozen_line + 1;
	0000a08e:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
52: lVar9 = lVar7 - lVar3;
	0000a09a:SUB RAX,qword ptr [RBP + -0xa8]
END_OF_LINE
----------------------------------------------
53: max_neg_offset = lVar3 - lVar8;
	0000a0ac:SUB RAX,qword ptr [RBP + -0x70]
END_OF_LINE
----------------------------------------------
54: lVar11 = lVar9;
	0000a0c5:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
55: if (lVar9 <= max_neg_offset) {
	0000a0c5:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
56: lVar11 = max_neg_offset;
	0000a0c5:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
58: if (lVar4 != 0) {
	0000a0cd:CMP qword ptr [RBP + -0xa0],0x0
	0000a0d5:JNZ 0x0000a0e3
END_OF_LINE
----------------------------------------------
59: if (lVar3 <= max_neg_offset) {
	0000a0f1:JG 0x0000a105
END_OF_LINE
----------------------------------------------
60: max_neg_offset = lVar3 + -1;
	0000a0fa:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
62: if ((prefix_fuzz < 0) && (lVar10 = pch_first(), lVar10 < 2)) {
	0000a105:CMP qword ptr [RBP + -0xb8],0x0
	0000a10d:JNS 0x0000a1f0
	0000a113:CALL 0x00013bf3
	0000a118:CMP RAX,0x1
	0000a11c:JG 0x0000a1f0
END_OF_LINE
----------------------------------------------
63: if ((suffix_fuzz_00 < 0) && ((lVar4 != input_lines || (lVar5 < last_frozen_line)))) {
	0000a122:CMP qword ptr [RBP + -0x80],0x0
	0000a127:JNS 0x0000a159
	0000a129:LEA RAX,[0x3e1f0]
	0000a130:MOV RAX,qword ptr [RAX]
	0000a133:CMP qword ptr [RBP + -0xa0],RAX
	0000a13a:JNZ 0x0000a14f
	0000a13c:LEA RAX,[0x3e398]
	0000a143:MOV RAX,qword ptr [RAX]
	0000a146:CMP qword ptr [RBP + -0x98],RAX
	0000a14d:JGE 0x0000a159
END_OF_LINE
----------------------------------------------
64: lVar3 = 0;
	0000a14f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
67: lVar11 = 1 - lVar3;
	0000a15e:SUB RAX,qword ptr [RBP + -0xa8]
END_OF_LINE
----------------------------------------------
68: if ((lVar5 < last_frozen_line) ||
	0000a17d:JL 0x0000a1e6
	0000a17f:MOV RAX,qword ptr [RBP + -0xc0]
	0000a186:CMP RAX,qword ptr [RBP + -0x68]
	0000a18a:JG 0x0000a1e6
	0000a18c:MOV RDX,qword ptr [RBP + -0x80]
	0000a190:MOV RSI,qword ptr [RBP + -0xc0]
	0000a197:MOV RAX,qword ptr [RBP + -0xa8]
	0000a19e:MOV RCX,RDX
	0000a1a1:MOV EDX,0x0
	0000a1a6:MOV RDI,RAX
	0000a1a9:CALL 0x0000bb49
	0000a1ae:TEST AL,AL
	0000a1b0:JZ 0x0000a1e6
END_OF_LINE
----------------------------------------------
69: ((lVar9 < lVar11 || (_Var2 = patch_match(lVar3,lVar11,0,suffix_fuzz_00), !_Var2)))) {
	0000a18a:JG 0x0000a1e6
	0000a18c:MOV RDX,qword ptr [RBP + -0x80]
	0000a190:MOV RSI,qword ptr [RBP + -0xc0]
	0000a197:MOV RAX,qword ptr [RBP + -0xa8]
	0000a19e:MOV RCX,RDX
	0000a1a1:MOV EDX,0x0
	0000a1a6:MOV RDI,RAX
	0000a1a9:CALL 0x0000bb49
	0000a1ae:TEST AL,AL
	0000a1b0:JZ 0x0000a1e6
END_OF_LINE
----------------------------------------------
70: lVar3 = 0;
	0000a1e6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
73: in_offset = in_offset + lVar11;
	0000a1c3:ADD RDX,RAX
END_OF_LINE
----------------------------------------------
74: lVar3 = lVar11 + lVar3;
	0000a1de:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
79: if (prefix_fuzz < 0) {
	0000a1f0:CMP qword ptr [RBP + -0xb8],0x0
	0000a1f8:JNS 0x0000a205
END_OF_LINE
----------------------------------------------
80: prefix_fuzz = 0;
	0000a1fa:MOV qword ptr [RBP + -0xb8],0x0
END_OF_LINE
----------------------------------------------
82: if (suffix_fuzz_00 < 0) {
	0000a205:CMP qword ptr [RBP + -0x80],0x0
	0000a20a:JNS 0x0000a2ad
END_OF_LINE
----------------------------------------------
83: lVar11 = lVar3 - ((input_lines - lVar4) + 1);
	0000a21a:SUB RAX,qword ptr [RBP + -0xa0]
	0000a221:LEA RDX,[RAX + 0x1]
	0000a225:MOV RAX,qword ptr [RBP + -0xa8]
	0000a22c:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
84: if ((max_neg_offset < lVar11) || (_Var2 = patch_match(lVar3,-lVar11,prefix_fuzz,0), !_Var2))
	0000a244:JG 0x0000a2a3
	0000a246:MOV RAX,qword ptr [RBP + -0xc0]
	0000a24d:NEG RAX
	0000a250:MOV RSI,RAX
	0000a253:MOV RDX,qword ptr [RBP + -0xb8]
	0000a25a:MOV RAX,qword ptr [RBP + -0xa8]
	0000a261:MOV ECX,0x0
	0000a266:MOV RDI,RAX
	0000a269:CALL 0x0000bb49
	0000a26e:TEST AL,AL
	0000a270:JZ 0x0000a2a3
END_OF_LINE
----------------------------------------------
86: lVar3 = 0;
	0000a2a3:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
89: in_offset = in_offset - lVar11;
	0000a27c:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
90: lVar3 = lVar3 - lVar11;
	0000a297:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
94: if (lVar9 < 0) {
	0000a2ad:CMP qword ptr [RBP + -0x68],0x0
	0000a2b2:JNS 0x0000a2c1
END_OF_LINE
----------------------------------------------
95: offset = lVar3 - lVar7;
	0000a2bb:SUB RAX,qword ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
97: else if (max_neg_offset < 0) {
	0000a2c1:CMP qword ptr [RBP + -0xb0],0x0
	0000a2c9:JNS 0x0000a2d8
END_OF_LINE
----------------------------------------------
98: offset = lVar3 - lVar8;
	0000a2d2:SUB RAX,qword ptr [RBP + -0x70]
END_OF_LINE
----------------------------------------------
101: offset = 0;
	0000a2d8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
103: for (; offset <= lVar11; offset = offset + 1) {
	0000a4a2:ADD qword ptr [RBP + -0xc0],0x1
	0000a4aa:MOV RAX,qword ptr [RBP + -0xc0]
	0000a4b1:CMP RAX,qword ptr [RBP + -0x60]
	0000a4b5:JLE 0x0000a2f1
END_OF_LINE
----------------------------------------------
104: if ((offset <= lVar9) &&
	0000a2fc:JG 0x0000a3c8
	0000a302:MOV RCX,qword ptr [RBP + -0x80]
	0000a306:MOV RDX,qword ptr [RBP + -0xb8]
	0000a30d:MOV RSI,qword ptr [RBP + -0xc0]
	0000a314:MOV RAX,qword ptr [RBP + -0xa8]
	0000a31b:MOV RDI,RAX
	0000a31e:CALL 0x0000bb49
	0000a323:TEST AL,AL
	0000a325:JZ 0x0000a3c8
END_OF_LINE
----------------------------------------------
105: (_Var2 = patch_match(lVar3,offset,prefix_fuzz,suffix_fuzz_00), _Var2)) {
	0000a31e:CALL 0x0000bb49
	0000a323:TEST AL,AL
	0000a325:JZ 0x0000a3c8
END_OF_LINE
----------------------------------------------
106: if ((debug & 1U) != 0) {
	0000a334:AND EAX,0x1
	0000a337:TEST EAX,EAX
	0000a339:JZ 0x0000a394
END_OF_LINE
----------------------------------------------
107: pcVar12 = format_linenum(numbuf1,in_offset + offset);
	0000a34c:ADD RDX,RAX
	0000a34f:LEA RAX,[RBP + -0x30]
	0000a353:MOV RSI,RDX
	0000a356:MOV RDI,RAX
	0000a359:CALL 0x00018472
END_OF_LINE
----------------------------------------------
108: pcVar13 = format_linenum(numbuf0,in_offset);
	0000a36b:LEA RAX,[RBP + -0x50]
	0000a36f:MOV RSI,RDX
	0000a372:MOV RDI,RAX
	0000a375:CALL 0x00018472
END_OF_LINE
----------------------------------------------
109: say("Offset changing from %s to %s\n",pcVar13,pcVar12);
	0000a38f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
111: in_offset = in_offset + offset;
	0000a3a5:ADD RDX,RAX
END_OF_LINE
----------------------------------------------
112: lVar3 = offset + lVar3;
	0000a3c0:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
113: goto LAB_0000a4c0;
	0000a4c0:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
115: if ((offset <= max_neg_offset) &&
	0000a3d6:JG 0x0000a4a2
	0000a3dc:MOV RAX,qword ptr [RBP + -0xc0]
	0000a3e3:NEG RAX
	0000a3e6:MOV RSI,RAX
	0000a3e9:MOV RCX,qword ptr [RBP + -0x80]
	0000a3ed:MOV RDX,qword ptr [RBP + -0xb8]
	0000a3f4:MOV RAX,qword ptr [RBP + -0xa8]
	0000a3fb:MOV RDI,RAX
	0000a3fe:CALL 0x0000bb49
	0000a403:TEST AL,AL
	0000a405:JZ 0x0000a4a2
END_OF_LINE
----------------------------------------------
116: (_Var2 = patch_match(lVar3,-offset,prefix_fuzz,suffix_fuzz_00), _Var2)) {
	0000a3e3:NEG RAX
	0000a3e6:MOV RSI,RAX
	0000a3e9:MOV RCX,qword ptr [RBP + -0x80]
	0000a3ed:MOV RDX,qword ptr [RBP + -0xb8]
	0000a3f4:MOV RAX,qword ptr [RBP + -0xa8]
	0000a3fb:MOV RDI,RAX
	0000a3fe:CALL 0x0000bb49
	0000a403:TEST AL,AL
	0000a405:JZ 0x0000a4a2
END_OF_LINE
----------------------------------------------
117: if ((debug & 1U) != 0) {
	0000a414:AND EAX,0x1
	0000a417:TEST EAX,EAX
	0000a419:JZ 0x0000a474
END_OF_LINE
----------------------------------------------
118: pcVar12 = format_linenum(numbuf1,in_offset - offset);
	0000a425:SUB RAX,qword ptr [RBP + -0xc0]
	0000a42c:MOV RDX,RAX
	0000a42f:LEA RAX,[RBP + -0x30]
	0000a433:MOV RSI,RDX
	0000a436:MOV RDI,RAX
	0000a439:CALL 0x00018472
END_OF_LINE
----------------------------------------------
119: pcVar13 = format_linenum(numbuf0,in_offset);
	0000a44b:LEA RAX,[RBP + -0x50]
	0000a44f:MOV RSI,RDX
	0000a452:MOV RDI,RAX
	0000a455:CALL 0x00018472
END_OF_LINE
----------------------------------------------
120: say("Offset changing from %s to %s\n",pcVar13,pcVar12);
	0000a46f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
122: in_offset = in_offset - offset;
	0000a47e:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
123: lVar3 = lVar3 - offset;
	0000a499:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
124: goto LAB_0000a4c0;
	0000a4c0:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
127: lVar3 = 0;
	0000a4bb:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
131: LAB_0000a4c0:
	0000a4c0:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
132: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000a4c4:SUB RDX,qword ptr FS:[0x28]
	0000a4cd:JZ 0x0000a4d4
END_OF_LINE
----------------------------------------------
133: return lVar3;
	0000a4d9:RET
END_OF_LINE
----------------------------------------------
136: __stack_chk_fail();
	0000a4cf:CALL 0x00005b00
END_OF_LINE



Function: mangled_patch
----------------------------------------------
15: if ((debug & 1U) != 0) {
	0000a507:AND EAX,0x1
	0000a50a:TEST EAX,EAX
	0000a50c:JZ 0x0000a544
END_OF_LINE
----------------------------------------------
16: cVar1 = pch_char(new);
	0000a515:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
17: cVar2 = pch_char(old);
	0000a524:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
18: say("oldchar = \'%c\', newchar = \'%c\'\n",(ulong)(uint)(int)cVar2,(ulong)(uint)(int)cVar1);
	0000a51a:MOVSX EBX,AL
	0000a51d:MOV RAX,qword ptr [RBP + -0x58]
	0000a521:MOV RDI,RAX
	0000a524:CALL 0x00013c8d
	0000a529:MOVSX EAX,AL
	0000a52c:MOV EDX,EBX
	0000a52e:MOV ESI,EAX
	0000a530:LEA RAX,[0x32870]
	0000a537:MOV RDI,RAX
	0000a53a:MOV EAX,0x0
	0000a53f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
20: lVar3 = pch_hunk_beg();
	0000a544:CALL 0x00013da8
END_OF_LINE
----------------------------------------------
21: pcVar4 = format_linenum(numbuf1,new + lVar3);
	0000a54d:ADD RDX,RAX
	0000a550:LEA RAX,[RBP + -0x30]
	0000a554:MOV RSI,RDX
	0000a557:MOV RDI,RAX
	0000a55a:CALL 0x00018472
END_OF_LINE
----------------------------------------------
22: lVar3 = pch_hunk_beg();
	0000a562:CALL 0x00013da8
END_OF_LINE
----------------------------------------------
23: pcVar5 = format_linenum(numbuf0,old + lVar3);
	0000a56b:ADD RDX,RAX
	0000a56e:LEA RAX,[RBP + -0x50]
	0000a572:MOV RSI,RDX
	0000a575:MOV RDI,RAX
	0000a578:CALL 0x00018472
END_OF_LINE
----------------------------------------------
25: fatal("Out-of-sync patch, lines %s,%s -- mangled text or line numbers, maybe?",pcVar5,pcVar4);
	0000a592:CALL 0x000185b0
END_OF_LINE



Function: print_unidiff_range
----------------------------------------------
15: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000a5b0:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
16: if (count == 0) {
	0000a5bf:CMP qword ptr [RBP + -0x68],0x0
	0000a5c4:JZ 0x0000a5cf
END_OF_LINE
----------------------------------------------
17: pcVar2 = format_linenum(numbuf0,start + -1);
	0000a5d3:LEA RDX,[RAX + -0x1]
	0000a5d7:LEA RAX,[RBP + -0x50]
	0000a5db:MOV RSI,RDX
	0000a5de:MOV RDI,RAX
	0000a5e1:CALL 0x00018472
END_OF_LINE
----------------------------------------------
18: fprintf((FILE *)fp,"%s,0",pcVar2);
	0000a5ff:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
20: else if (count == 1) {
	0000a5c6:CMP qword ptr [RBP + -0x68],0x1
	0000a5cb:JZ 0x0000a606
END_OF_LINE
----------------------------------------------
21: pcVar2 = format_linenum(numbuf0,start);
	0000a60a:LEA RAX,[RBP + -0x50]
	0000a60e:MOV RSI,RDX
	0000a611:MOV RDI,RAX
	0000a614:CALL 0x00018472
END_OF_LINE
----------------------------------------------
22: fputs(pcVar2,(FILE *)fp);
	0000a626:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
25: pcVar2 = format_linenum(numbuf1,count);
	0000a631:LEA RAX,[RBP + -0x30]
	0000a635:MOV RSI,RDX
	0000a638:MOV RDI,RAX
	0000a63b:CALL 0x00018472
END_OF_LINE
----------------------------------------------
26: pcVar3 = format_linenum(numbuf0,start);
	0000a647:LEA RAX,[RBP + -0x50]
	0000a64b:MOV RSI,RDX
	0000a64e:MOV RDI,RAX
	0000a651:CALL 0x00018472
END_OF_LINE
----------------------------------------------
27: fprintf((FILE *)fp,"%s,%s",pcVar3,pcVar2);
	0000a66f:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
29: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000a67a:SUB RAX,qword ptr FS:[0x28]
	0000a683:JZ 0x0000a68a
END_OF_LINE
----------------------------------------------
31: __stack_chk_fail();
	0000a685:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
33: return;
	0000a68f:RET
END_OF_LINE



Function: print_header_line
----------------------------------------------
13: pcVar1 = pch_name((uint)reverse);
	0000a6ad:MOV EDI,EAX
	0000a6af:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
14: pcVar2 = pch_timestr(reverse);
	0000a6be:CALL 0x00013ddb
END_OF_LINE
----------------------------------------------
15: if (pcVar2 == (char *)0x0) {
	0000a6c7:CMP qword ptr [RBP + -0x8],0x0
	0000a6cc:JZ 0x0000a6d4
END_OF_LINE
----------------------------------------------
16: pcVar2 = "";
	0000a6d4:LEA RDX,[0x31525]
END_OF_LINE
----------------------------------------------
18: if (pcVar1 == (char *)0x0) {
	0000a6db:CMP qword ptr [RBP + -0x10],0x0
	0000a6e0:JZ 0x0000a6e8
END_OF_LINE
----------------------------------------------
19: pcVar1 = "/dev/null";
	0000a6e8:LEA RAX,[0x328e2]
END_OF_LINE
----------------------------------------------
21: fprintf((FILE *)fp,"%s %s%s\n",tag,pcVar1,pcVar2);
	0000a70f:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
22: return;
	0000a716:RET
END_OF_LINE



Function: abort_hunk_unified
----------------------------------------------
19: old = 1;
	0000a72e:MOV qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
20: count = pch_ptrn_lines();
	0000a736:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
21: pcVar3 = pch_c_function();
	0000a74b:CALL 0x00013db9
END_OF_LINE
----------------------------------------------
22: if (header) {
	0000a758:JZ 0x0000a7e3
END_OF_LINE
----------------------------------------------
23: pcVar4 = pch_name(INDEX);
	0000a763:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
24: if (pcVar4 != (char *)0x0) {
	0000a768:TEST RAX,RAX
	0000a76b:JZ 0x0000a798
END_OF_LINE
----------------------------------------------
25: pcVar4 = pch_name(INDEX);
	0000a772:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
26: fprintf((FILE *)rejfp,"Index: %s\n",pcVar4);
	0000a793:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
28: print_header_line(rejfp,"---",reverse);
	0000a7b0:CALL 0x0000a690
END_OF_LINE
----------------------------------------------
29: print_header_line(rejfp,"+++",!reverse);
	0000a7b9:TEST EAX,EAX
	0000a7bb:SETNZ AL
	0000a7be:XOR EAX,0x1
	0000a7c1:MOVZX EAX,AL
	0000a7c4:AND EAX,0x1
	0000a7c7:MOVZX EDX,AL
	0000a7ca:MOV RAX,qword ptr [0x0003e3e0]
	0000a7d1:LEA RCX,[0x32904]
	0000a7d8:MOV RSI,RCX
	0000a7db:MOV RDI,RAX
	0000a7de:CALL 0x0000a690
END_OF_LINE
----------------------------------------------
31: fwrite(&DAT_00032908,1,4,(FILE *)rejfp);
	0000a801:CALL 0x00006010
END_OF_LINE
----------------------------------------------
32: lVar5 = pch_first();
	0000a806:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
33: print_unidiff_range(rejfp,lVar5 + out_offset,count);
	0000a818:LEA RCX,[RDX + RAX*0x1]
	0000a81c:MOV RAX,qword ptr [0x0003e3e0]
	0000a823:MOV RDX,qword ptr [RBP + -0x20]
	0000a827:MOV RSI,RCX
	0000a82a:MOV RDI,RAX
	0000a82d:CALL 0x0000a597
END_OF_LINE
----------------------------------------------
34: fwrite(&DAT_0003290d,1,2,(FILE *)rejfp);
	0000a850:CALL 0x00006010
END_OF_LINE
----------------------------------------------
35: lVar5 = pch_repl_lines();
	0000a855:CALL 0x00013c26
END_OF_LINE
----------------------------------------------
36: lVar6 = pch_newfirst();
	0000a85d:CALL 0x00013c15
END_OF_LINE
----------------------------------------------
37: print_unidiff_range(rejfp,lVar6 + out_offset,lVar5);
	0000a86f:LEA RCX,[RDX + RAX*0x1]
	0000a873:MOV RAX,qword ptr [0x0003e3e0]
	0000a87a:MOV RDX,RBX
	0000a87d:MOV RSI,RCX
	0000a880:MOV RDI,RAX
	0000a883:CALL 0x0000a597
END_OF_LINE
----------------------------------------------
38: if (pcVar3 == (char *)0x0) {
	0000a888:CMP qword ptr [RBP + -0x18],0x0
	0000a88d:JZ 0x0000a895
END_OF_LINE
----------------------------------------------
39: pcVar3 = "";
	0000a895:LEA RAX,[0x31525]
END_OF_LINE
----------------------------------------------
41: fprintf((FILE *)rejfp," @@%s\n",pcVar3);
	0000a8b8:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
42: new = count;
	0000a8bd:JMP 0x0000a8c4
END_OF_LINE
----------------------------------------------
45: new = new + 1;
	0000a743:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
46: cVar1 = pch_char(new);
	0000a8cb:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
47: } while (cVar1 == '=');
	0000a8d0:CMP AL,0x3d
	0000a8d2:JZ 0x0000a8bf
END_OF_LINE
----------------------------------------------
48: cVar1 = pch_char(new);
	0000a8db:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
49: } while (cVar1 == '\n');
	0000a8e0:CMP AL,0xa
	0000a8e2:JZ 0x0000a8bf
END_OF_LINE
----------------------------------------------
50: if (diff_type != UNI_DIFF) {
	0000a8ed:CMP EAX,0x5
	0000a8f0:JZ 0x0000a92d
END_OF_LINE
----------------------------------------------
51: pch_normalize(UNI_DIFF);
	0000a8f7:CALL 0x0001457c
END_OF_LINE
----------------------------------------------
53: while( true ) {
	0000a986:JG 0x0000a9f2
END_OF_LINE
----------------------------------------------
54: while (cVar1 = pch_char(old), cVar1 == '-') {
	0000a934:CALL 0x00013c8d
	0000a939:CMP AL,0x2d
	0000a93b:JZ 0x0000a8fe
END_OF_LINE
----------------------------------------------
55: fputc(0x2d,(FILE *)rejfp);
	0000a90d:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
56: pch_write_line(old,rejfp);
	0000a923:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
57: old = old + 1;
	0000a928:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
59: while (cVar1 = pch_char(new), cVar1 == '+') {
	0000a975:CALL 0x00013c8d
	0000a97a:CMP AL,0x2b
	0000a97c:JZ 0x0000a93f
END_OF_LINE
----------------------------------------------
60: fputc(0x2b,(FILE *)rejfp);
	0000a94e:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
61: pch_write_line(new,rejfp);
	0000a964:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
62: new = new + 1;
	0000a969:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
64: if (count < old) break;
	0000a986:JG 0x0000a9f2
END_OF_LINE
----------------------------------------------
65: cVar1 = pch_char(new);
	0000a98f:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
66: cVar2 = pch_char(old);
	0000a99d:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
67: if (cVar1 != cVar2) {
	0000a9a2:CMP BL,AL
	0000a9a4:JZ 0x0000a9b9
END_OF_LINE
----------------------------------------------
69: mangled_patch(old,new);
	0000a9b4:CALL 0x0000a4da
END_OF_LINE
----------------------------------------------
71: fputc(0x20,(FILE *)rejfp);
	0000a9c8:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
72: pch_write_line(old,rejfp);
	0000a9de:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
73: old = old + 1;
	0000a9e3:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
74: new = new + 1;
	0000a9e8:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
76: cVar1 = pch_char(new);
	0000a9fa:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
77: if (cVar1 == '^') {
	0000a9ff:CMP AL,0x5e
	0000aa01:JZ 0x0000aa16
END_OF_LINE
----------------------------------------------
78: return;
	0000aa1c:RET
END_OF_LINE
----------------------------------------------
81: mangled_patch(old,new);
	0000aa11:CALL 0x0000a4da
END_OF_LINE



Function: abort_hunk_context
----------------------------------------------
33: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000aa3d:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
34: lVar4 = pch_end();
	0000aa4c:CALL 0x00013c37
END_OF_LINE
----------------------------------------------
35: lVar5 = pch_first();
	0000aa58:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
36: n = out_offset + lVar5;
	0000aa6a:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
37: lVar5 = pch_newfirst();
	0000aa74:CALL 0x00013c15
END_OF_LINE
----------------------------------------------
38: n_00 = out_offset + lVar5;
	0000aa86:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
39: lVar5 = pch_ptrn_lines();
	0000aa8d:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
40: n_01 = lVar5 + n + -1;
	0000aa99:ADD RAX,RDX
	0000aa9c:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
41: lVar5 = pch_repl_lines();
	0000aaa4:CALL 0x00013c26
END_OF_LINE
----------------------------------------------
42: n_02 = lVar5 + n_00 + -1;
	0000aaad:ADD RAX,RDX
	0000aab0:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
43: if ((int)diff_type < 4) {
	0000aac4:JLE 0x0000aacf
END_OF_LINE
----------------------------------------------
44: pcVar6 = "";
	0000aacf:LEA RAX,[0x31525]
END_OF_LINE
----------------------------------------------
45: pcVar7 = " -----";
	0000aaf1:LEA RAX,[0x32923]
END_OF_LINE
----------------------------------------------
48: pcVar6 = " ****";
	0000aac6:LEA RAX,[0x32917]
END_OF_LINE
----------------------------------------------
49: pcVar7 = " ----";
	0000aae8:LEA RAX,[0x3291d]
END_OF_LINE
----------------------------------------------
51: pcVar8 = pch_c_function();
	0000aafc:CALL 0x00013db9
END_OF_LINE
----------------------------------------------
52: if (diff_type == UNI_DIFF) {
	0000ab0e:CMP EAX,0x5
	0000ab11:JNZ 0x0000ab1d
END_OF_LINE
----------------------------------------------
53: pch_normalize(NEW_CONTEXT_DIFF);
	0000ab18:CALL 0x0001457c
END_OF_LINE
----------------------------------------------
55: if (header) {
	0000ab24:JZ 0x0000abb5
END_OF_LINE
----------------------------------------------
56: pcVar9 = pch_name(INDEX);
	0000ab2f:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
57: if (pcVar9 != (char *)0x0) {
	0000ab34:TEST RAX,RAX
	0000ab37:JZ 0x0000ab64
END_OF_LINE
----------------------------------------------
58: pcVar9 = pch_name(INDEX);
	0000ab3e:CALL 0x00013b57
END_OF_LINE
----------------------------------------------
59: fprintf((FILE *)rejfp,"Index: %s\n",pcVar9);
	0000ab5f:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
61: print_header_line(rejfp,"***",reverse);
	0000ab7f:CALL 0x0000a690
END_OF_LINE
----------------------------------------------
62: print_header_line(rejfp,"---",!reverse);
	0000ab8b:TEST EAX,EAX
	0000ab8d:SETNZ AL
	0000ab90:XOR EAX,0x1
	0000ab93:MOVZX EAX,AL
	0000ab96:AND EAX,0x1
	0000ab99:MOVZX EDX,AL
	0000ab9c:MOV RAX,qword ptr [0x0003e3e0]
	0000aba3:LEA RCX,[0x32900]
	0000abaa:MOV RSI,RCX
	0000abad:MOV RDI,RAX
	0000abb0:CALL 0x0000a690
END_OF_LINE
----------------------------------------------
64: if (pcVar8 == (char *)0x0) {
	0000abb5:CMP qword ptr [RBP + -0x58],0x0
	0000abba:JZ 0x0000abc2
END_OF_LINE
----------------------------------------------
65: pcVar8 = "";
	0000abc2:LEA RAX,[0x31525]
END_OF_LINE
----------------------------------------------
67: fprintf((FILE *)rejfp,"***************%s\n",pcVar8);
	0000abe5:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
68: i = 0;
	0000abea:MOV qword ptr [RBP + -0x98],0x0
END_OF_LINE
----------------------------------------------
70: if (lVar4 < i) {
	0000ae73:JLE 0x0000abfa
END_OF_LINE
----------------------------------------------
71: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000ae7e:SUB RAX,qword ptr FS:[0x28]
	0000ae87:JZ 0x0000ae8e
END_OF_LINE
----------------------------------------------
72: return;
	0000ae93:RET
END_OF_LINE
----------------------------------------------
75: __stack_chk_fail();
	0000ae89:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
77: cVar2 = pch_char(i);
	0000ac04:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
78: switch(cVar2) {
	0000ac38:JMP RAX
END_OF_LINE
----------------------------------------------
79: default:
	0000ae40:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
81: fatal("fatal internal error in abort_hunk_context");
	0000ae40:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
82: case ' ':
	0000adf0:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
83: case '!':
	0000adf0:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
84: case '+':
	0000adf0:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
85: case '-':
	0000adf0:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
86: cVar2 = pch_char(i);
	0000adf0:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
87: fprintf((FILE *)rejfp,"%c ",(ulong)(uint)(int)cVar2);
	0000adf5:MOVSX EDX,AL
	0000adf8:MOV RAX,qword ptr [0x0003e3e0]
	0000adff:LEA RCX,[0x32981]
	0000ae06:MOV RSI,RCX
	0000ae09:MOV RDI,RAX
	0000ae0c:MOV EAX,0x0
	0000ae11:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
88: case '\n':
	0000ae16:MOV RDX,qword ptr [0x0003e3e0]
END_OF_LINE
----------------------------------------------
89: pch_write_line(i,rejfp);
	0000ae2a:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
91: case '*':
	0000ac46:JGE 0x0000ac6f
END_OF_LINE
----------------------------------------------
92: if (n_01 < n) {
	0000ac46:JGE 0x0000ac6f
END_OF_LINE
----------------------------------------------
93: fprintf((FILE *)rejfp,"*** 0%s\n",pcVar6);
	0000ac65:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
95: else if (n_01 == n) {
	0000ac73:CMP RAX,qword ptr [RBP + -0x88]
	0000ac7a:JNZ 0x0000acbf
END_OF_LINE
----------------------------------------------
96: pcVar8 = format_linenum(numbuf0,n);
	0000ac83:LEA RAX,[RBP + -0x50]
	0000ac87:MOV RSI,RDX
	0000ac8a:MOV RDI,RAX
	0000ac8d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
97: fprintf((FILE *)rejfp,"*** %s%s\n",pcVar8,pcVar6);
	0000acb5:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
100: pcVar8 = format_linenum(numbuf1,n_01);
	0000acc3:LEA RAX,[RBP + -0x30]
	0000acc7:MOV RSI,RDX
	0000acca:MOV RDI,RAX
	0000accd:CALL 0x00018472
END_OF_LINE
----------------------------------------------
101: pcVar9 = format_linenum(numbuf0,n);
	0000acdc:LEA RAX,[RBP + -0x50]
	0000ace0:MOV RSI,RDX
	0000ace3:MOV RDI,RAX
	0000ace6:CALL 0x00018472
END_OF_LINE
----------------------------------------------
102: fprintf((FILE *)rejfp,"*** %s,%s%s\n",pcVar9,pcVar8,pcVar6);
	0000ad0e:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
105: case '=':
	0000ad20:JGE 0x0000ad49
END_OF_LINE
----------------------------------------------
106: if (n_02 < n_00) {
	0000ad20:JGE 0x0000ad49
END_OF_LINE
----------------------------------------------
107: fprintf((FILE *)rejfp,"--- 0%s\n",pcVar7);
	0000ad3f:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
109: else if (n_02 == n_00) {
	0000ad4d:CMP RAX,qword ptr [RBP + -0x80]
	0000ad51:JNZ 0x0000ad93
END_OF_LINE
----------------------------------------------
110: pcVar8 = format_linenum(numbuf0,n_00);
	0000ad57:LEA RAX,[RBP + -0x50]
	0000ad5b:MOV RSI,RDX
	0000ad5e:MOV RDI,RAX
	0000ad61:CALL 0x00018472
END_OF_LINE
----------------------------------------------
111: fprintf((FILE *)rejfp,"--- %s%s\n",pcVar8,pcVar7);
	0000ad89:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
114: pcVar8 = format_linenum(numbuf1,n_02);
	0000ad97:LEA RAX,[RBP + -0x30]
	0000ad9b:MOV RSI,RDX
	0000ad9e:MOV RDI,RAX
	0000ada1:CALL 0x00018472
END_OF_LINE
----------------------------------------------
115: pcVar9 = format_linenum(numbuf0,n_00);
	0000adad:LEA RAX,[RBP + -0x50]
	0000adb1:MOV RSI,RDX
	0000adb4:MOV RDI,RAX
	0000adb7:CALL 0x00018472
END_OF_LINE
----------------------------------------------
116: fprintf((FILE *)rejfp,"--- %s,%s%s\n",pcVar9,pcVar8,pcVar7);
	0000addf:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
119: iVar3 = ferror((FILE *)rejfp);
	0000ae4f:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
120: if (iVar3 != 0) {
	0000ae54:TEST EAX,EAX
	0000ae56:JZ 0x0000ae5d
END_OF_LINE
----------------------------------------------
122: write_fatal();
	0000ae58:CALL 0x00018705
END_OF_LINE
----------------------------------------------
124: i = i + 1;
	0000ae5d:ADD qword ptr [RBP + -0x98],0x1
END_OF_LINE
----------------------------------------------
125: } while( true );
	0000ae5d:ADD qword ptr [RBP + -0x98],0x1
END_OF_LINE



Function: abort_hunk
----------------------------------------------
9: if (!TMPREJNAME_needs_removal) {
	0000aeba:TEST AL,AL
	0000aebc:JZ 0x0000aeca
END_OF_LINE
----------------------------------------------
10: init_reject(outname);
	0000aec5:CALL 0x0000b805
END_OF_LINE
----------------------------------------------
12: if ((reject_format == UNI_DIFF) || ((reject_format == NO_DIFF && (diff_type == UNI_DIFF)))) {
	0000aed0:CMP EAX,0x5
	0000aed3:JZ 0x0000aeed
	0000aed5:MOV EAX,dword ptr [0x0003e3a8]
	0000aedb:TEST EAX,EAX
	0000aedd:JNZ 0x0000af00
	0000aedf:LEA RAX,[0x3e374]
	0000aee6:MOV EAX,dword ptr [RAX]
	0000aee8:CMP EAX,0x5
	0000aeeb:JNZ 0x0000af00
END_OF_LINE
----------------------------------------------
13: abort_hunk_unified(header,reverse);
	0000aef9:CALL 0x0000a717
END_OF_LINE
----------------------------------------------
16: abort_hunk_context(header,reverse);
	0000af0c:CALL 0x0000aa1d
END_OF_LINE
----------------------------------------------
18: return;
	0000af14:RET
END_OF_LINE



Function: apply_hunk
----------------------------------------------
24: old = 1;
	0000af2a:MOV qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
25: lVar7 = pch_ptrn_lines();
	0000af32:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
26: pcVar2 = do_defines;
	0000af32:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
27: def_state = OUTSIDE;
	0000af47:MOV dword ptr [RBP + -0x44],0x0
END_OF_LINE
----------------------------------------------
28: lVar8 = pch_end();
	0000af59:CALL 0x00013c37
END_OF_LINE
----------------------------------------------
29: __stream = (FILE *)outstate->ofp;
	0000af66:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
30: lVar1 = where + -1;
	0000af6d:SUB qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
31: new = lVar7;
	0000af72:JMP 0x0000af79
END_OF_LINE
----------------------------------------------
34: new = new + 1;
	0000af3f:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
35: cVar3 = pch_char(new);
	0000af80:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
36: } while (cVar3 == '=');
	0000af85:CMP AL,0x3d
	0000af87:JZ 0x0000af74
END_OF_LINE
----------------------------------------------
37: cVar3 = pch_char(new);
	0000af90:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
38: } while (cVar3 == '\n');
	0000af95:CMP AL,0xa
	0000af97:JZ 0x0000af74
END_OF_LINE
----------------------------------------------
39: while (old <= lVar7) {
	0000b480:JLE 0x0000af9e
END_OF_LINE
----------------------------------------------
40: cVar3 = pch_char(old);
	0000afa5:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
41: if (cVar3 == '-') {
	0000afaa:CMP AL,0x2d
	0000afac:JNZ 0x0000b0e7
END_OF_LINE
----------------------------------------------
42: if (outstate->after_newline == false) {
	0000afb6:MOVZX EAX,byte ptr [RAX + 0x8]
	0000afba:TEST AL,AL
	0000afbc:JNZ 0x0000afe6
END_OF_LINE
----------------------------------------------
44: __assert_fail("outstate->after_newline","patch.c",0x599,"apply_hunk");
	0000afe1:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
46: _Var5 = copy_till(outstate,old + lVar1 + -1);
	0000afee:ADD RAX,RDX
	0000aff1:LEA RDX,[RAX + -0x1]
	0000aff5:MOV RAX,qword ptr [RBP + -0x58]
	0000aff9:MOV RSI,RDX
	0000affc:MOV RDI,RAX
	0000afff:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
47: if (!_Var5) {
	0000b009:JZ 0x0000b015
END_OF_LINE
----------------------------------------------
48: return false;
	0000b65d:RET
END_OF_LINE
----------------------------------------------
50: if (pcVar2 != (char *)0x0) {
	0000b015:CMP qword ptr [RBP + -0x28],0x0
	0000b01a:JZ 0x0000b0c5
END_OF_LINE
----------------------------------------------
51: if (def_state == OUTSIDE) {
	0000b020:CMP dword ptr [RBP + -0x44],0x0
	0000b024:JNZ 0x0000b05d
END_OF_LINE
----------------------------------------------
52: fprintf(__stream,"\n#ifndef %s\n" + outstate->after_newline,pcVar2);
	0000b02a:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b02e:MOVZX EAX,AL
	0000b031:LEA RDX,[0x31310]
	0000b038:LEA RCX,[RAX + RDX*0x1]
	0000b03c:MOV RDX,qword ptr [RBP + -0x28]
	0000b040:MOV RAX,qword ptr [RBP + -0x18]
	0000b044:MOV RSI,RCX
	0000b047:MOV RDI,RAX
	0000b04a:MOV EAX,0x0
	0000b04f:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
53: def_state = IN_IFNDEF;
	0000b054:MOV dword ptr [RBP + -0x44],0x1
END_OF_LINE
----------------------------------------------
55: else if (def_state == IN_IFDEF) {
	0000b05d:CMP dword ptr [RBP + -0x44],0x2
	0000b061:JNZ 0x0000b08e
END_OF_LINE
----------------------------------------------
56: fputs("\n#else\n" + outstate->after_newline,__stream);
	0000b067:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b06b:MOVZX EAX,AL
	0000b06e:LEA RDX,[0x31320]
	0000b075:ADD RDX,RAX
	0000b078:MOV RAX,qword ptr [RBP + -0x18]
	0000b07c:MOV RSI,RAX
	0000b07f:MOV RDI,RDX
	0000b082:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
57: def_state = IN_ELSE;
	0000b087:MOV dword ptr [RBP + -0x44],0x3
END_OF_LINE
----------------------------------------------
59: iVar6 = ferror(__stream);
	0000b095:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
60: if (iVar6 != 0) {
	0000b09a:TEST EAX,EAX
	0000b09c:JZ 0x0000b0a3
END_OF_LINE
----------------------------------------------
62: write_fatal();
	0000b09e:CALL 0x00018705
END_OF_LINE
----------------------------------------------
64: _Var5 = pch_write_line(old,(FILE *)__stream);
	0000b0b1:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
65: outstate->after_newline = _Var5;
	0000b0ba:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
66: outstate->zero_output = false;
	0000b0c1:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
68: last_frozen_line = last_frozen_line + 1;
	0000b0cf:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
69: old = old + 1;
	0000b0dd:ADD qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
72: if (lVar8 < new) break;
	0000b0ef:JG 0x0000b488
END_OF_LINE
----------------------------------------------
73: cVar3 = pch_char(new);
	0000b0fc:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
74: if (cVar3 == '+') {
	0000b101:CMP AL,0x2b
	0000b103:JNZ 0x0000b1f2
END_OF_LINE
----------------------------------------------
75: _Var5 = copy_till(outstate,old + lVar1 + -1);
	0000b111:ADD RAX,RDX
	0000b114:LEA RDX,[RAX + -0x1]
	0000b118:MOV RAX,qword ptr [RBP + -0x58]
	0000b11c:MOV RSI,RDX
	0000b11f:MOV RDI,RAX
	0000b122:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
76: if (!_Var5) {
	0000b12c:JZ 0x0000b138
END_OF_LINE
----------------------------------------------
77: return false;
	0000b65d:RET
END_OF_LINE
----------------------------------------------
79: if (pcVar2 != (char *)0x0) {
	0000b138:CMP qword ptr [RBP + -0x28],0x0
	0000b13d:JZ 0x0000b1c6
END_OF_LINE
----------------------------------------------
80: if (def_state == IN_IFNDEF) {
	0000b143:CMP dword ptr [RBP + -0x44],0x1
	0000b147:JNZ 0x0000b176
END_OF_LINE
----------------------------------------------
81: fputs("\n#else\n" + outstate->after_newline,__stream);
	0000b14d:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b151:MOVZX EAX,AL
	0000b154:LEA RDX,[0x31320]
	0000b15b:ADD RDX,RAX
	0000b15e:MOV RAX,qword ptr [RBP + -0x18]
	0000b162:MOV RSI,RAX
	0000b165:MOV RDI,RDX
	0000b168:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
82: def_state = IN_ELSE;
	0000b16d:MOV dword ptr [RBP + -0x44],0x3
END_OF_LINE
----------------------------------------------
84: else if (def_state == OUTSIDE) {
	0000b176:CMP dword ptr [RBP + -0x44],0x0
	0000b17a:JNZ 0x0000b1b1
END_OF_LINE
----------------------------------------------
85: fprintf(__stream,"\n#ifdef %s\n" + outstate->after_newline,pcVar2);
	0000b180:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b184:MOVZX EAX,AL
	0000b187:LEA RDX,[0x31300]
	0000b18e:LEA RCX,[RAX + RDX*0x1]
	0000b192:MOV RDX,qword ptr [RBP + -0x28]
	0000b196:MOV RAX,qword ptr [RBP + -0x18]
	0000b19a:MOV RSI,RCX
	0000b19d:MOV RDI,RAX
	0000b1a0:MOV EAX,0x0
	0000b1a5:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
86: def_state = IN_IFDEF;
	0000b1aa:MOV dword ptr [RBP + -0x44],0x2
END_OF_LINE
----------------------------------------------
88: iVar6 = ferror(__stream);
	0000b1b8:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
89: if (iVar6 != 0) {
	0000b1bd:TEST EAX,EAX
	0000b1bf:JZ 0x0000b1c6
END_OF_LINE
----------------------------------------------
91: write_fatal();
	0000b1c1:CALL 0x00018705
END_OF_LINE
----------------------------------------------
94: _Var5 = pch_write_line(new,(FILE *)__stream);
	0000b1d4:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
95: outstate->after_newline = _Var5;
	0000b1dd:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
96: outstate->zero_output = false;
	0000b1e4:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
97: new = new + 1;
	0000b1e8:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
100: cVar3 = pch_char(new);
	0000b1f9:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
101: cVar4 = pch_char(old);
	0000b207:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
102: if (cVar3 != cVar4) {
	0000b20c:CMP BL,AL
	0000b20e:JZ 0x0000b223
END_OF_LINE
----------------------------------------------
104: mangled_patch(old,new);
	0000b21e:CALL 0x0000a4da
END_OF_LINE
----------------------------------------------
106: cVar3 = pch_char(new);
	0000b22a:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
107: if (cVar3 == '!') {
	0000b22f:CMP AL,0x21
	0000b231:JNZ 0x0000b3e1
END_OF_LINE
----------------------------------------------
108: if (outstate->after_newline == false) {
	0000b23b:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b23f:TEST AL,AL
	0000b241:JNZ 0x0000b26b
END_OF_LINE
----------------------------------------------
110: __assert_fail("outstate->after_newline","patch.c",0x5c8,"apply_hunk");
	0000b266:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
112: _Var5 = copy_till(outstate,old + lVar1 + -1);
	0000b273:ADD RAX,RDX
	0000b276:LEA RDX,[RAX + -0x1]
	0000b27a:MOV RAX,qword ptr [RBP + -0x58]
	0000b27e:MOV RSI,RDX
	0000b281:MOV RDI,RAX
	0000b284:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
113: if (!_Var5) {
	0000b28e:JZ 0x0000b29a
END_OF_LINE
----------------------------------------------
114: return false;
	0000b65d:RET
END_OF_LINE
----------------------------------------------
116: if (outstate->after_newline == false) {
	0000b29e:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b2a2:TEST AL,AL
	0000b2a4:JNZ 0x0000b2ce
END_OF_LINE
----------------------------------------------
118: __assert_fail("outstate->after_newline","patch.c",0x5cb,"apply_hunk");
	0000b2c9:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
120: if (pcVar2 != (char *)0x0) {
	0000b2ce:CMP qword ptr [RBP + -0x28],0x0
	0000b2d3:JZ 0x0000b310
END_OF_LINE
----------------------------------------------
121: fprintf(__stream,"#ifndef %s\n",pcVar2);
	0000b2ef:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
122: iVar6 = ferror(__stream);
	0000b2fb:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
123: if (iVar6 != 0) {
	0000b300:TEST EAX,EAX
	0000b302:JZ 0x0000b309
END_OF_LINE
----------------------------------------------
125: write_fatal();
	0000b304:CALL 0x00018705
END_OF_LINE
----------------------------------------------
127: def_state = IN_IFNDEF;
	0000b309:MOV dword ptr [RBP + -0x44],0x1
END_OF_LINE
----------------------------------------------
130: if (pcVar2 != (char *)0x0) {
	0000b310:CMP qword ptr [RBP + -0x28],0x0
	0000b315:JZ 0x0000b331
END_OF_LINE
----------------------------------------------
131: _Var5 = pch_write_line(old,(FILE *)__stream);
	0000b325:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
132: outstate->after_newline = _Var5;
	0000b32e:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
134: last_frozen_line = last_frozen_line + 1;
	0000b33b:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
135: old = old + 1;
	0000b349:ADD qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
136: cVar3 = pch_char(old);
	0000b355:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
137: } while (cVar3 == '!');
	0000b35a:CMP AL,0x21
	0000b35c:JZ 0x0000b310
END_OF_LINE
----------------------------------------------
138: if (pcVar2 != (char *)0x0) {
	0000b35e:CMP qword ptr [RBP + -0x28],0x0
	0000b363:JZ 0x0000b3a5
END_OF_LINE
----------------------------------------------
139: fputs("\n#else\n" + outstate->after_newline,__stream);
	0000b369:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b36d:MOVZX EAX,AL
	0000b370:LEA RDX,[0x31320]
	0000b377:ADD RDX,RAX
	0000b37a:MOV RAX,qword ptr [RBP + -0x18]
	0000b37e:MOV RSI,RAX
	0000b381:MOV RDI,RDX
	0000b384:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
140: iVar6 = ferror(__stream);
	0000b390:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
141: if (iVar6 != 0) {
	0000b395:TEST EAX,EAX
	0000b397:JZ 0x0000b39e
END_OF_LINE
----------------------------------------------
143: write_fatal();
	0000b399:CALL 0x00018705
END_OF_LINE
----------------------------------------------
145: def_state = IN_ELSE;
	0000b39e:MOV dword ptr [RBP + -0x44],0x3
END_OF_LINE
----------------------------------------------
148: _Var5 = pch_write_line(new,(FILE *)__stream);
	0000b3b3:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
149: outstate->after_newline = _Var5;
	0000b3bc:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
150: new = new + 1;
	0000b3bf:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
151: cVar3 = pch_char(new);
	0000b3cb:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
152: } while (cVar3 == '!');
	0000b3d0:CMP AL,0x21
	0000b3d2:JZ 0x0000b3a5
END_OF_LINE
----------------------------------------------
153: outstate->zero_output = false;
	0000b3d8:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
156: cVar3 = pch_char(new);
	0000b3e8:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
157: if (cVar3 != ' ') {
	0000b3ed:CMP AL,0x20
	0000b3ef:JZ 0x0000b419
END_OF_LINE
----------------------------------------------
159: __assert_fail("pch_char(new) == \' \'","patch.c",0x5ed,"apply_hunk");
	0000b414:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
161: old = old + 1;
	0000b419:ADD qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
162: new = new + 1;
	0000b41e:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
163: if ((pcVar2 != (char *)0x0) && (def_state != OUTSIDE)) {
	0000b423:CMP qword ptr [RBP + -0x28],0x0
	0000b428:JZ 0x0000b478
	0000b42a:CMP dword ptr [RBP + -0x44],0x0
	0000b42e:JZ 0x0000b478
END_OF_LINE
----------------------------------------------
164: fputs("\n#endif\n" + outstate->after_newline,__stream);
	0000b434:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b438:MOVZX EAX,AL
	0000b43b:LEA RDX,[0x31328]
	0000b442:ADD RDX,RAX
	0000b445:MOV RAX,qword ptr [RBP + -0x18]
	0000b449:MOV RSI,RAX
	0000b44c:MOV RDI,RDX
	0000b44f:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
165: iVar6 = ferror(__stream);
	0000b45b:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
166: if (iVar6 != 0) {
	0000b460:TEST EAX,EAX
	0000b462:JZ 0x0000b469
END_OF_LINE
----------------------------------------------
168: write_fatal();
	0000b464:CALL 0x00018705
END_OF_LINE
----------------------------------------------
170: outstate->after_newline = true;
	0000b46d:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
171: def_state = OUTSIDE;
	0000b471:MOV dword ptr [RBP + -0x44],0x0
END_OF_LINE
----------------------------------------------
177: if ((new <= lVar8) && (cVar3 = pch_char(new), cVar3 == '+')) {
	0000b491:JG 0x0000b5db
	0000b497:MOV RAX,qword ptr [RBP + -0x38]
	0000b49b:MOV RDI,RAX
	0000b49e:CALL 0x00013c8d
	0000b4a3:CMP AL,0x2b
	0000b4a5:JNZ 0x0000b5db
END_OF_LINE
----------------------------------------------
178: _Var5 = copy_till(outstate,old + lVar1 + -1);
	0000b4b3:ADD RAX,RDX
	0000b4b6:LEA RDX,[RAX + -0x1]
	0000b4ba:MOV RAX,qword ptr [RBP + -0x58]
	0000b4be:MOV RSI,RDX
	0000b4c1:MOV RDI,RAX
	0000b4c4:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
179: if (!_Var5) {
	0000b4ce:JZ 0x0000b4da
END_OF_LINE
----------------------------------------------
180: return false;
	0000b65d:RET
END_OF_LINE
----------------------------------------------
182: if (pcVar2 != (char *)0x0) {
	0000b4da:CMP qword ptr [RBP + -0x28],0x0
	0000b4df:JZ 0x0000b570
END_OF_LINE
----------------------------------------------
183: if (def_state == OUTSIDE) {
	0000b4e5:CMP dword ptr [RBP + -0x44],0x0
	0000b4e9:JNZ 0x0000b522
END_OF_LINE
----------------------------------------------
184: fprintf(__stream,"\n#ifdef %s\n" + outstate->after_newline,pcVar2);
	0000b4ef:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b4f3:MOVZX EAX,AL
	0000b4f6:LEA RDX,[0x31300]
	0000b4fd:LEA RCX,[RAX + RDX*0x1]
	0000b501:MOV RDX,qword ptr [RBP + -0x28]
	0000b505:MOV RAX,qword ptr [RBP + -0x18]
	0000b509:MOV RSI,RCX
	0000b50c:MOV RDI,RAX
	0000b50f:MOV EAX,0x0
	0000b514:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
185: def_state = IN_IFDEF;
	0000b519:MOV dword ptr [RBP + -0x44],0x2
END_OF_LINE
----------------------------------------------
187: else if (def_state == IN_IFNDEF) {
	0000b522:CMP dword ptr [RBP + -0x44],0x1
	0000b526:JNZ 0x0000b553
END_OF_LINE
----------------------------------------------
188: fputs("\n#else\n" + outstate->after_newline,__stream);
	0000b52c:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b530:MOVZX EAX,AL
	0000b533:LEA RDX,[0x31320]
	0000b53a:ADD RDX,RAX
	0000b53d:MOV RAX,qword ptr [RBP + -0x18]
	0000b541:MOV RSI,RAX
	0000b544:MOV RDI,RDX
	0000b547:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
189: def_state = IN_ELSE;
	0000b54c:MOV dword ptr [RBP + -0x44],0x3
END_OF_LINE
----------------------------------------------
191: iVar6 = ferror(__stream);
	0000b55a:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
192: if (iVar6 != 0) {
	0000b55f:TEST EAX,EAX
	0000b561:JZ 0x0000b568
END_OF_LINE
----------------------------------------------
194: write_fatal();
	0000b563:CALL 0x00018705
END_OF_LINE
----------------------------------------------
196: outstate->zero_output = false;
	0000b56c:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
199: if ((outstate->after_newline != true) && (iVar6 = putc(10,__stream), iVar6 == -1)) {
	0000b574:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b578:XOR EAX,0x1
	0000b57b:TEST AL,AL
	0000b57d:JZ 0x0000b59a
	0000b57f:MOV RAX,qword ptr [RBP + -0x18]
	0000b583:MOV RSI,RAX
	0000b586:MOV EDI,0xa
	0000b58b:CALL 0x00005cf0
	0000b590:CMP EAX,-0x1
	0000b593:JNZ 0x0000b59a
END_OF_LINE
----------------------------------------------
201: write_fatal();
	0000b595:CALL 0x00018705
END_OF_LINE
----------------------------------------------
203: _Var5 = pch_write_line(new,(FILE *)__stream);
	0000b5a8:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
204: outstate->after_newline = _Var5;
	0000b5b1:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
205: outstate->zero_output = false;
	0000b5b8:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
206: new = new + 1;
	0000b5bc:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
207: } while ((new <= lVar8) && (cVar3 = pch_char(new), cVar3 == '+'));
	0000b5c9:JG 0x0000b5db
	0000b5cb:MOV RAX,qword ptr [RBP + -0x38]
	0000b5cf:MOV RDI,RAX
	0000b5d2:CALL 0x00013c8d
	0000b5d7:CMP AL,0x2b
	0000b5d9:JZ 0x0000b570
END_OF_LINE
----------------------------------------------
209: if ((pcVar2 != (char *)0x0) && (def_state != OUTSIDE)) {
	0000b5db:CMP qword ptr [RBP + -0x28],0x0
	0000b5e0:JZ 0x0000b629
	0000b5e2:CMP dword ptr [RBP + -0x44],0x0
	0000b5e6:JZ 0x0000b629
END_OF_LINE
----------------------------------------------
210: fputs("\n#endif\n" + outstate->after_newline,__stream);
	0000b5ec:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b5f0:MOVZX EAX,AL
	0000b5f3:LEA RDX,[0x31328]
	0000b5fa:ADD RDX,RAX
	0000b5fd:MOV RAX,qword ptr [RBP + -0x18]
	0000b601:MOV RSI,RAX
	0000b604:MOV RDI,RDX
	0000b607:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
211: iVar6 = ferror(__stream);
	0000b613:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
212: if (iVar6 != 0) {
	0000b618:TEST EAX,EAX
	0000b61a:JZ 0x0000b621
END_OF_LINE
----------------------------------------------
214: write_fatal();
	0000b61c:CALL 0x00018705
END_OF_LINE
----------------------------------------------
216: outstate->after_newline = true;
	0000b625:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
218: lVar7 = pch_repl_lines();
	0000b629:CALL 0x00013c26
END_OF_LINE
----------------------------------------------
219: lVar8 = pch_ptrn_lines();
	0000b631:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
220: out_offset = (lVar7 - lVar8) + out_offset;
	0000b636:SUB RBX,RAX
	0000b639:MOV RDX,RBX
	0000b63c:LEA RAX,[0x3e390]
	0000b643:MOV RAX,qword ptr [RAX]
	0000b646:ADD RDX,RAX
	0000b649:LEA RAX,[0x3e390]
	0000b650:MOV qword ptr [RAX],RDX
	0000b653:MOV EAX,0x1
	0000b658:MOV RBX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
221: return true;
	0000b65d:RET
END_OF_LINE



Function: create_output_file
----------------------------------------------
13: __fd = create_file(name,open_flags | 1,instat.st_mode,true);
	0000b67e:OR EAX,0x1
	0000b681:MOV ESI,EAX
	0000b683:MOV RAX,qword ptr [RBP + -0x18]
	0000b687:MOV ECX,0x1
	0000b68c:MOV RDI,RAX
	0000b68f:CALL 0x00017326
END_OF_LINE
----------------------------------------------
14: pFVar1 = fdopen(__fd,"w");
	0000b6a6:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
15: if (pFVar1 == (FILE *)0x0) {
	0000b6af:CMP qword ptr [RBP + -0x8],0x0
	0000b6b4:JNZ 0x0000b6d9
END_OF_LINE
----------------------------------------------
16: pcVar2 = quotearg(name);
	0000b6bd:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
18: pfatal("Can\'t create file %s",pcVar2);
	0000b6d4:CALL 0x00018721
END_OF_LINE
----------------------------------------------
20: return (FILE *)pFVar1;
	0000b6d9:MOV RAX,qword ptr [RBP + -0x8]
	0000b6dd:LEAVE
	0000b6de:RET
END_OF_LINE



Function: init_output
----------------------------------------------
7: outstate->ofp = (FILE *)0x0;
	0000b6ef:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
8: outstate->after_newline = true;
	0000b6fa:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
9: outstate->zero_output = true;
	0000b702:MOV byte ptr [RAX + 0x9],0x1
END_OF_LINE
----------------------------------------------
10: return;
	0000b708:RET
END_OF_LINE



Function: open_outfile
----------------------------------------------
12: iVar1 = strcmp(name,"-");
	0000b72b:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
13: if (iVar1 == 0) {
	0000b730:TEST EAX,EAX
	0000b732:JZ 0x0000b74a
END_OF_LINE
----------------------------------------------
14: iVar1 = fileno(pFRam0000000000144070);
	0000b757:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
15: iVar1 = dup(iVar1);
	0000b75e:CALL 0x00005bc0
END_OF_LINE
----------------------------------------------
16: if (iVar1 == -1) {
	0000b766:CMP dword ptr [RBP + -0x1c],-0x1
	0000b76a:JNZ 0x0000b780
END_OF_LINE
----------------------------------------------
18: pfatal("Failed to duplicate standard output");
	0000b77b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
20: pFVar2 = fdopen(iVar1,"a");
	0000b78f:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
21: if (pFVar2 == (FILE *)0x0) {
	0000b798:CMP qword ptr [RBP + -0x18],0x0
	0000b79d:JNZ 0x0000b7b3
END_OF_LINE
----------------------------------------------
23: pfatal("Failed to duplicate standard output");
	0000b7ae:CALL 0x00018721
END_OF_LINE
----------------------------------------------
25: iVar1 = fileno(pFRam0000000000144070);
	0000b7c0:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
26: __fd = fileno(pFRam0000000000144490);
	0000b7d4:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
27: iVar1 = dup2(__fd,iVar1);
	0000b7dd:CALL 0x00005b50
END_OF_LINE
----------------------------------------------
28: if (iVar1 == -1) {
	0000b7e2:CMP EAX,-0x1
	0000b7e5:JNZ 0x0000b7fb
END_OF_LINE
----------------------------------------------
30: pfatal("Failed to redirect messages to standard error");
	0000b7f6:CALL 0x00018721
END_OF_LINE
----------------------------------------------
34: pFVar2 = (FILE *)create_output_file(name,0);
	0000b740:CALL 0x0000b65e
END_OF_LINE
----------------------------------------------
36: return (FILE *)pFVar2;
	0000b804:RET
END_OF_LINE



Function: init_reject
----------------------------------------------
10: __fd = make_tempfile(&TMPREJNAME,'r',outname,1,0x1b6);
	0000b836:CALL 0x00019da4
END_OF_LINE
----------------------------------------------
11: if (__fd == -1) {
	0000b83e:CMP dword ptr [RBP + -0x4],-0x1
	0000b842:JNZ 0x0000b862
END_OF_LINE
----------------------------------------------
13: pfatal("Can\'t create temporary file %s",TMPREJNAME);
	0000b85d:CALL 0x00018721
END_OF_LINE
----------------------------------------------
15: TMPREJNAME_needs_removal = true;
	0000b862:MOV byte ptr [0x0003e400],0x1
END_OF_LINE
----------------------------------------------
16: rejfp = (FILE *)fdopen(__fd,"w");
	0000b878:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
17: if ((FILE *)rejfp == (FILE *)0x0) {
	0000b88b:TEST RAX,RAX
	0000b88e:JNZ 0x0000b8b6
END_OF_LINE
----------------------------------------------
18: pcVar1 = quotearg(TMPREJNAME);
	0000b89a:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
20: pfatal("Can\'t open stream for file %s",pcVar1);
	0000b8b1:CALL 0x00018721
END_OF_LINE
----------------------------------------------
22: return;
	0000b8b8:RET
END_OF_LINE



Function: copy_till
----------------------------------------------
17: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0000b8cd:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
18: R_last_frozen_line = last_frozen_line;
	0000b8e6:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
19: fp = outstate->ofp;
	0000b8ee:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
20: if (lastline < last_frozen_line) {
	0000b8fd:JLE 0x0000b9ba
END_OF_LINE
----------------------------------------------
21: say("misordered hunks! output would be garbled\n");
	0000b912:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
22: _Var1 = false;
	0000b917:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
25: while (R_last_frozen_line < lastline) {
	0000b9c2:JL 0x0000b921
END_OF_LINE
----------------------------------------------
26: R_last_frozen_line = R_last_frozen_line + 1;
	0000b921:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
27: s = ifetch(R_last_frozen_line,false,&size);
	0000b926:LEA RDX,[RBP + -0x28]
	0000b92a:MOV RAX,qword ptr [RBP + -0x20]
	0000b92e:MOV ESI,0x0
	0000b933:MOV RDI,RAX
	0000b936:CALL 0x000071c6
END_OF_LINE
----------------------------------------------
28: if (size != 0) {
	0000b943:TEST RAX,RAX
	0000b946:JZ 0x0000b9ba
END_OF_LINE
----------------------------------------------
29: if (outstate->after_newline != true) {
	0000b94c:MOVZX EAX,byte ptr [RAX + 0x8]
	0000b950:XOR EAX,0x1
	0000b953:TEST AL,AL
	0000b955:JZ 0x0000b96d
END_OF_LINE
----------------------------------------------
30: iVar2 = putc(10,(FILE *)fp);
	0000b963:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
31: if (iVar2 == -1) goto LAB_0000b98f;
	0000b968:CMP EAX,-0x1
	0000b96b:JZ 0x0000b98f
	0000b96d:MOV RDX,qword ptr [RBP + -0x28]
	0000b971:MOV RCX,qword ptr [RBP + -0x18]
	0000b975:MOV RAX,qword ptr [RBP + -0x10]
	0000b979:MOV ESI,0x1
	0000b97e:MOV RDI,RAX
	0000b981:CALL 0x00006010
	0000b986:MOV RDX,qword ptr [RBP + -0x28]
	0000b98a:CMP RAX,RDX
	0000b98d:JNC 0x0000b994
	0000b98f:CALL 0x00018705
END_OF_LINE
----------------------------------------------
33: sVar3 = fwrite(s,1,size,(FILE *)fp);
	0000b981:CALL 0x00006010
END_OF_LINE
----------------------------------------------
34: if (sVar3 < size) {
	0000b98a:CMP RAX,RDX
	0000b98d:JNC 0x0000b994
END_OF_LINE
----------------------------------------------
35: LAB_0000b98f:
	0000b98f:CALL 0x00018705
END_OF_LINE
----------------------------------------------
37: write_fatal();
	0000b98f:CALL 0x00018705
END_OF_LINE
----------------------------------------------
39: outstate->after_newline = s[size - 1] == '\n';
	0000b998:LEA RDX,[RAX + -0x1]
	0000b99c:MOV RAX,qword ptr [RBP + -0x10]
	0000b9a0:ADD RAX,RDX
	0000b9a3:MOVZX EAX,byte ptr [RAX]
	0000b9a6:CMP AL,0xa
	0000b9a8:SETZ DL
	0000b9ab:MOV RAX,qword ptr [RBP + -0x38]
	0000b9af:MOV byte ptr [RAX + 0x8],DL
END_OF_LINE
----------------------------------------------
40: outstate->zero_output = false;
	0000b9b6:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
43: last_frozen_line = R_last_frozen_line;
	0000b9d3:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
44: _Var1 = true;
	0000b9d6:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
46: if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000b9df:SUB RDX,qword ptr FS:[0x28]
	0000b9e8:JZ 0x0000b9ef
END_OF_LINE
----------------------------------------------
48: __stack_chk_fail();
	0000b9ea:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
50: return _Var1;
	0000b9f0:RET
END_OF_LINE



Function: spew_output
----------------------------------------------
16: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000ba06:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: if ((debug & 0x100U) != 0) {
	0000ba1e:AND EAX,0x100
	0000ba23:TEST EAX,EAX
	0000ba25:JZ 0x0000ba76
END_OF_LINE
----------------------------------------------
18: pcVar4 = format_linenum(numbuf1,last_frozen_line);
	0000ba31:LEA RAX,[RBP + -0x30]
	0000ba35:MOV RSI,RDX
	0000ba38:MOV RDI,RAX
	0000ba3b:CALL 0x00018472
END_OF_LINE
----------------------------------------------
19: pcVar5 = format_linenum(numbuf0,input_lines);
	0000ba4d:LEA RAX,[RBP + -0x50]
	0000ba51:MOV RSI,RDX
	0000ba54:MOV RDI,RAX
	0000ba57:CALL 0x00018472
END_OF_LINE
----------------------------------------------
20: say("il=%s lfl=%s\n",pcVar5,pcVar4);
	0000ba71:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
22: if (last_frozen_line < input_lines) {
	0000ba8d:JGE 0x0000bab6
END_OF_LINE
----------------------------------------------
23: _Var2 = copy_till(outstate,input_lines);
	0000baa3:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
24: if (!_Var2) {
	0000baad:JZ 0x0000bab6
END_OF_LINE
----------------------------------------------
25: _Var2 = false;
	0000baaf:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
26: goto LAB_0000bb2f;
	0000bb2f:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
29: if ((outstate->ofp != (FILE *)0x0) && (outfile == (char *)0x0)) {
	0000baba:MOV RAX,qword ptr [RAX]
	0000babd:TEST RAX,RAX
	0000bac0:JZ 0x0000bb2a
	0000bac2:LEA RAX,[0x3e260]
	0000bac9:MOV RAX,qword ptr [RAX]
	0000bacc:TEST RAX,RAX
	0000bacf:JNZ 0x0000bb2a
END_OF_LINE
----------------------------------------------
30: iVar3 = fflush((FILE *)outstate->ofp);
	0000bad5:MOV RAX,qword ptr [RAX]
	0000bad8:MOV RDI,RAX
	0000badb:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
31: if (iVar3 != 0) {
	0000bae0:TEST EAX,EAX
	0000bae2:JNZ 0x0000bb1a
END_OF_LINE
----------------------------------------------
32: LAB_0000bb1a:
	0000bb1a:CALL 0x00018705
END_OF_LINE
----------------------------------------------
34: write_fatal();
	0000bb1a:CALL 0x00018705
END_OF_LINE
----------------------------------------------
36: iVar3 = fileno((FILE *)outstate->ofp);
	0000bae8:MOV RAX,qword ptr [RAX]
	0000baeb:MOV RDI,RAX
	0000baee:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
37: iVar3 = fstat(iVar3,(stat *)st);
	0000bafe:CALL 0x00006060
END_OF_LINE
----------------------------------------------
38: if (iVar3 != 0) goto LAB_0000bb1a;
	0000bb03:TEST EAX,EAX
	0000bb05:JNZ 0x0000bb1a
	0000bb07:MOV RAX,qword ptr [RBP + -0x58]
	0000bb0b:MOV RAX,qword ptr [RAX]
	0000bb0e:MOV RDI,RAX
	0000bb11:CALL 0x00005a80
	0000bb16:TEST EAX,EAX
	0000bb18:JZ 0x0000bb1f
	0000bb1a:CALL 0x00018705
END_OF_LINE
----------------------------------------------
39: iVar3 = fclose((FILE *)outstate->ofp);
	0000bb0b:MOV RAX,qword ptr [RAX]
	0000bb0e:MOV RDI,RAX
	0000bb11:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
40: if (iVar3 != 0) goto LAB_0000bb1a;
	0000bb16:TEST EAX,EAX
	0000bb18:JZ 0x0000bb1f
	0000bb1a:CALL 0x00018705
END_OF_LINE
----------------------------------------------
41: outstate->ofp = (FILE *)0x0;
	0000bb23:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
43: _Var2 = true;
	0000bb2a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
44: LAB_0000bb2f:
	0000bb2f:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
45: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000bb33:SUB RDX,qword ptr FS:[0x28]
	0000bb3c:JZ 0x0000bb43
END_OF_LINE
----------------------------------------------
47: __stack_chk_fail();
	0000bb3e:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
49: return _Var2;
	0000bb48:RET
END_OF_LINE



Function: patch_match
----------------------------------------------
23: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	0000bb66:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
24: pline = prefix_fuzz + 1;
	0000bb79:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
25: lVar3 = pch_ptrn_lines();
	0000bb81:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
26: pat_lines = lVar3 - suffix_fuzz;
	0000bb86:SUB RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
27: iline = prefix_fuzz + base + offset;
	0000bb96:ADD RDX,RAX
	0000bb99:MOV RAX,qword ptr [RBP + -0x58]
	0000bb9d:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
29: if (pat_lines < pline) {
	0000bc71:JLE 0x0000bba9
END_OF_LINE
----------------------------------------------
30: _Var1 = true;
	0000bc77:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
31: LAB_0000bc7c:
	0000bc7c:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
32: if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000bc80:SUB RDX,qword ptr FS:[0x28]
	0000bc89:JZ 0x0000bc90
END_OF_LINE
----------------------------------------------
34: __stack_chk_fail();
	0000bc8b:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
36: return _Var1;
	0000bc95:RET
END_OF_LINE
----------------------------------------------
38: p = ifetch(iline,(_Bool)((byte)~(byte)((ulong)offset >> 0x38) >> 7),&size);
	0000bbad:NOT RAX
	0000bbb0:SHR RAX,0x3f
	0000bbb4:MOVZX ECX,AL
	0000bbb7:LEA RDX,[RBP + -0x40]
	0000bbbb:MOV RAX,qword ptr [RBP + -0x30]
	0000bbbf:MOV ESI,ECX
	0000bbc1:MOV RDI,RAX
	0000bbc4:CALL 0x000071c6
END_OF_LINE
----------------------------------------------
39: if (canonicalize_ws == false) {
	0000bbd7:TEST AL,AL
	0000bbd9:JZ 0x0000bc1a
END_OF_LINE
----------------------------------------------
40: sVar6 = pch_line_len(pline);
	0000bc21:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
41: sVar4 = size;
	0000bc21:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
42: if (sVar6 == size) {
	0000bc2a:CMP RAX,RDX
	0000bc2d:JNZ 0x0000bc58
END_OF_LINE
----------------------------------------------
43: pcVar5 = pfetch(pline);
	0000bc3a:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
44: iVar2 = memcmp(p,pcVar5,sVar4);
	0000bc4f:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
45: if (iVar2 == 0) goto LAB_0000bc5f;
	0000bc54:TEST EAX,EAX
	0000bc56:JZ 0x0000bc5f
	0000bc58:MOV EAX,0x0
	0000bc5d:JMP 0x0000bc7c
	0000bc5f:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
47: _Var1 = false;
	0000bc58:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
48: goto LAB_0000bc7c;
	0000bc7c:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
50: sVar4 = pch_line_len(pline);
	0000bbe2:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
51: pcVar5 = pfetch(pline);
	0000bbf1:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
52: _Var1 = similar(p,size,pcVar5,sVar4);
	0000bc07:CALL 0x0000bdf6
END_OF_LINE
----------------------------------------------
53: if (!_Var1) {
	0000bc11:JZ 0x0000bc5f
END_OF_LINE
----------------------------------------------
54: _Var1 = false;
	0000bc13:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
55: goto LAB_0000bc7c;
	0000bc7c:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
57: LAB_0000bc5f:
	0000bc5f:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
58: pline = pline + 1;
	0000bc5f:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
59: iline = iline + 1;
	0000bc64:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
60: } while( true );
	0000bc64:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE



Function: check_line_endings
----------------------------------------------
16: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0000bca6:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: p = pfetch(1);
	0000bcba:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
18: size = pch_line_len(1);
	0000bcc8:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
19: if (size == 0) {
	0000bcd5:TEST RAX,RAX
	0000bcd8:JNZ 0x0000bce4
END_OF_LINE
----------------------------------------------
20: _Var3 = false;
	0000bcda:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
23: if (((size < 2) || (p[size - 2] != '\r')) || (p[size - 1] != '\n')) {
	0000bcec:JBE 0x0000bd21
	0000bcee:MOV RAX,qword ptr [RBP + -0x18]
	0000bcf2:LEA RDX,[RAX + -0x2]
	0000bcf6:MOV RAX,qword ptr [RBP + -0x10]
	0000bcfa:ADD RAX,RDX
	0000bcfd:MOVZX EAX,byte ptr [RAX]
	0000bd00:CMP AL,0xd
	0000bd02:JNZ 0x0000bd21
	0000bd04:MOV RAX,qword ptr [RBP + -0x18]
	0000bd08:LEA RDX,[RAX + -0x1]
	0000bd0c:MOV RAX,qword ptr [RBP + -0x10]
	0000bd10:ADD RAX,RDX
	0000bd13:MOVZX EAX,byte ptr [RAX]
	0000bd16:CMP AL,0xa
	0000bd18:JNZ 0x0000bd21
END_OF_LINE
----------------------------------------------
24: cVar1 = '\0';
	0000bd21:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
27: cVar1 = '\x01';
	0000bd1a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
29: if (input_lines == 0) {
	0000bd37:TEST RAX,RAX
	0000bd3a:JNZ 0x0000bd46
END_OF_LINE
----------------------------------------------
30: _Var3 = false;
	0000bd3c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
33: where_local = where;
	0000bd54:JLE 0x0000bd64
END_OF_LINE
----------------------------------------------
34: if (input_lines < where) {
	0000bd54:JLE 0x0000bd64
END_OF_LINE
----------------------------------------------
35: where_local = input_lines;
	0000bd60:MOV qword ptr [RBP + -0x28],RAX
END_OF_LINE
----------------------------------------------
37: p = ifetch(where_local,false,&size);
	0000bd64:LEA RDX,[RBP + -0x18]
	0000bd68:MOV RAX,qword ptr [RBP + -0x28]
	0000bd6c:MOV ESI,0x0
	0000bd71:MOV RDI,RAX
	0000bd74:CALL 0x000071c6
END_OF_LINE
----------------------------------------------
38: if (size == 0) {
	0000bd81:TEST RAX,RAX
	0000bd84:JNZ 0x0000bd8d
END_OF_LINE
----------------------------------------------
39: _Var3 = false;
	0000bd86:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
42: if (((size < 2) || (p[size - 2] != '\r')) || (p[size - 1] != '\n')) {
	0000bd95:JBE 0x0000bdca
	0000bd97:MOV RAX,qword ptr [RBP + -0x18]
	0000bd9b:LEA RDX,[RAX + -0x2]
	0000bd9f:MOV RAX,qword ptr [RBP + -0x10]
	0000bda3:ADD RAX,RDX
	0000bda6:MOVZX EAX,byte ptr [RAX]
	0000bda9:CMP AL,0xd
	0000bdab:JNZ 0x0000bdca
	0000bdad:MOV RAX,qword ptr [RBP + -0x18]
	0000bdb1:LEA RDX,[RAX + -0x1]
	0000bdb5:MOV RAX,qword ptr [RBP + -0x10]
	0000bdb9:ADD RAX,RDX
	0000bdbc:MOVZX EAX,byte ptr [RAX]
	0000bdbf:CMP AL,0xa
	0000bdc1:JNZ 0x0000bdca
END_OF_LINE
----------------------------------------------
43: cVar2 = '\0';
	0000bdca:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
46: cVar2 = '\x01';
	0000bdc3:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
48: _Var3 = cVar1 != cVar2;
	0000bdda:CMP AL,byte ptr [RBP + -0x19]
END_OF_LINE
----------------------------------------------
52: if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000bde4:SUB RDX,qword ptr FS:[0x28]
	0000bded:JZ 0x0000bdf4
END_OF_LINE
----------------------------------------------
54: __stack_chk_fail();
	0000bdef:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
56: return _Var3;
	0000bdf5:RET
END_OF_LINE



Function: similar
----------------------------------------------
11: if ((alen == 0) || (a[alen - 1] != '\n')) {
	0000be0e:CMP qword ptr [RBP + -0x10],0x0
	0000be13:JZ 0x0000be32
	0000be15:MOV RAX,qword ptr [RBP + -0x10]
	0000be19:LEA RDX,[RAX + -0x1]
	0000be1d:MOV RAX,qword ptr [RBP + -0x8]
	0000be21:ADD RAX,RDX
	0000be24:MOVZX EAX,byte ptr [RAX]
	0000be27:CMP AL,0xa
	0000be29:JNZ 0x0000be32
END_OF_LINE
----------------------------------------------
12: iVar1 = 0;
	0000be32:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: iVar1 = 1;
	0000be2b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
17: alen_local = alen - (long)iVar1;
	0000be37:CDQE
	0000be39:SUB qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
18: if ((blen == 0) || (b[blen - 1] != '\n')) {
	0000be3d:CMP qword ptr [RBP + -0x20],0x0
	0000be42:JZ 0x0000be61
	0000be44:MOV RAX,qword ptr [RBP + -0x20]
	0000be48:LEA RDX,[RAX + -0x1]
	0000be4c:MOV RAX,qword ptr [RBP + -0x18]
	0000be50:ADD RAX,RDX
	0000be53:MOVZX EAX,byte ptr [RAX]
	0000be56:CMP AL,0xa
	0000be58:JNZ 0x0000be61
END_OF_LINE
----------------------------------------------
19: iVar1 = 0;
	0000be61:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
22: iVar1 = 1;
	0000be5a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
24: blen_local = blen - (long)iVar1;
	0000be66:CDQE
	0000be68:SUB qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
25: b_local = b;
	0000be68:SUB qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
26: a_local = a;
	0000be68:SUB qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
28: while (((blen_local != 0 && (*b_local != ' ')) && (*b_local != '\t'))) {
	0000be6c:CMP qword ptr [RBP + -0x20],0x0
	0000be71:JZ 0x0000be99
	0000be73:MOV RAX,qword ptr [RBP + -0x18]
	0000be77:MOVZX EAX,byte ptr [RAX]
	0000be7a:CMP AL,0x20
	0000be7c:JZ 0x0000be99
	0000be7e:MOV RAX,qword ptr [RBP + -0x18]
	0000be82:MOVZX EAX,byte ptr [RAX]
	0000be85:CMP AL,0x9
	0000be87:JNZ 0x0000bf1f
END_OF_LINE
----------------------------------------------
29: if (alen_local == 0) {
	0000bf1f:CMP qword ptr [RBP + -0x10],0x0
	0000bf24:JZ 0x0000bf48
END_OF_LINE
----------------------------------------------
30: return false;
	0000bf65:RET
END_OF_LINE
----------------------------------------------
32: if (*a_local != *b_local) {
	0000bf32:MOVZX ECX,byte ptr [RAX]
	0000bf35:MOV RAX,qword ptr [RBP + -0x18]
	0000bf39:LEA RDX,[RAX + 0x1]
	0000bf3d:MOV qword ptr [RBP + -0x18],RDX
	0000bf41:MOVZX EAX,byte ptr [RAX]
	0000bf44:CMP CL,AL
	0000bf46:JZ 0x0000bf4f
END_OF_LINE
----------------------------------------------
33: return false;
	0000bf65:RET
END_OF_LINE
----------------------------------------------
35: alen_local = alen_local - 1;
	0000bf4f:SUB qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
36: blen_local = blen_local - 1;
	0000bf54:SUB qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
37: b_local = b_local + 1;
	0000bf39:LEA RDX,[RAX + 0x1]
	0000bf3d:MOV qword ptr [RBP + -0x18],RDX
	0000bf41:MOVZX EAX,byte ptr [RAX]
	0000bf44:CMP CL,AL
	0000bf46:JZ 0x0000bf4f
	0000bf48:MOV EAX,0x0
	0000bf4d:JMP 0x0000bf64
	0000bf4f:SUB qword ptr [RBP + -0x10],0x1
	0000bf54:SUB qword ptr [RBP + -0x20],0x1
	0000bf59:JMP 0x0000be6c
END_OF_LINE
----------------------------------------------
38: a_local = a_local + 1;
	0000bf2a:LEA RDX,[RAX + 0x1]
	0000bf2e:MOV qword ptr [RBP + -0x8],RDX
	0000bf32:MOVZX ECX,byte ptr [RAX]
	0000bf35:MOV RAX,qword ptr [RBP + -0x18]
	0000bf39:LEA RDX,[RAX + 0x1]
	0000bf3d:MOV qword ptr [RBP + -0x18],RDX
	0000bf41:MOVZX EAX,byte ptr [RAX]
	0000bf44:CMP CL,AL
	0000bf46:JZ 0x0000bf4f
	0000bf48:MOV EAX,0x0
	0000bf4d:JMP 0x0000bf64
	0000bf4f:SUB qword ptr [RBP + -0x10],0x1
	0000bf54:SUB qword ptr [RBP + -0x20],0x1
	0000bf59:JMP 0x0000be6c
END_OF_LINE
----------------------------------------------
40: for (; (blen_local != 0 && ((*b_local == ' ' || (*b_local == '\t')))); b_local = b_local + 1) {
	0000be8f:ADD qword ptr [RBP + -0x18],0x1
	0000be94:SUB qword ptr [RBP + -0x20],0x1
	0000be99:CMP qword ptr [RBP + -0x20],0x0
	0000be9e:JZ 0x0000beb6
	0000bea0:MOV RAX,qword ptr [RBP + -0x18]
	0000bea4:MOVZX EAX,byte ptr [RAX]
	0000bea7:CMP AL,0x20
	0000bea9:JZ 0x0000be8f
	0000beab:MOV RAX,qword ptr [RBP + -0x18]
	0000beaf:MOVZX EAX,byte ptr [RAX]
	0000beb2:CMP AL,0x9
	0000beb4:JZ 0x0000be8f
END_OF_LINE
----------------------------------------------
41: blen_local = blen_local - 1;
	0000be94:SUB qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
43: if (alen_local != 0) {
	0000beb6:CMP qword ptr [RBP + -0x10],0x0
	0000bebb:JZ 0x0000bf04
END_OF_LINE
----------------------------------------------
44: if ((*a_local != ' ') && (*a_local != '\t')) {
	0000bec1:MOVZX EAX,byte ptr [RAX]
	0000bec4:CMP AL,0x20
	0000bec6:JZ 0x0000bedd
	0000bec8:MOV RAX,qword ptr [RBP + -0x8]
	0000becc:MOVZX EAX,byte ptr [RAX]
	0000becf:CMP AL,0x9
	0000bed1:JZ 0x0000bedd
END_OF_LINE
----------------------------------------------
45: return false;
	0000bf65:RET
END_OF_LINE
----------------------------------------------
48: a_local = a_local + 1;
	0000bedd:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
49: alen_local = alen_local - 1;
	0000bee2:SUB qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
50: if (alen_local == 0) break;
	0000bee7:CMP qword ptr [RBP + -0x10],0x0
	0000beec:JZ 0x0000bf04
END_OF_LINE
----------------------------------------------
51: } while ((*a_local == ' ') || (*a_local == '\t'));
	0000bef2:MOVZX EAX,byte ptr [RAX]
	0000bef5:CMP AL,0x20
	0000bef7:JZ 0x0000bedd
	0000bef9:MOV RAX,qword ptr [RBP + -0x8]
	0000befd:MOVZX EAX,byte ptr [RAX]
	0000bf00:CMP AL,0x9
	0000bf02:JZ 0x0000bedd
END_OF_LINE
----------------------------------------------
53: if ((alen_local == 0) || (blen_local == 0)) {
	0000bf04:CMP qword ptr [RBP + -0x10],0x0
	0000bf09:JZ 0x0000bf12
	0000bf0b:CMP qword ptr [RBP + -0x20],0x0
	0000bf10:JNZ 0x0000bf5e
END_OF_LINE
----------------------------------------------
54: return alen_local == blen_local;
	0000bf16:CMP RAX,qword ptr [RBP + -0x20]
	0000bf1a:SETZ AL
	0000bf1d:JMP 0x0000bf64
	0000bf1f:CMP qword ptr [RBP + -0x10],0x0
	0000bf24:JZ 0x0000bf48
	0000bf26:MOV RAX,qword ptr [RBP + -0x8]
	0000bf2a:LEA RDX,[RAX + 0x1]
	0000bf2e:MOV qword ptr [RBP + -0x8],RDX
	0000bf32:MOVZX ECX,byte ptr [RAX]
	0000bf35:MOV RAX,qword ptr [RBP + -0x18]
	0000bf39:LEA RDX,[RAX + 0x1]
	0000bf3d:MOV qword ptr [RBP + -0x18],RDX
	0000bf41:MOVZX EAX,byte ptr [RAX]
	0000bf44:CMP CL,AL
	0000bf46:JZ 0x0000bf4f
	0000bf48:MOV EAX,0x0
	0000bf4d:JMP 0x0000bf64
	0000bf4f:SUB qword ptr [RBP + -0x10],0x1
	0000bf54:SUB qword ptr [RBP + -0x20],0x1
	0000bf59:JMP 0x0000be6c
	0000bf5e:NOP
	0000bf5f:JMP 0x0000be6c
	0000bf64:POP RBP
	0000bf65:RET
END_OF_LINE



Function: init_files_to_delete
----------------------------------------------
7: files_to_delete =
	0000bf8d:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
8: gl_list_create_empty
	0000bf8d:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
9: (&gl_linked_list_implementation,(gl_listelement_equals_fn)0x0,
	0000bf8d:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
10: (gl_listelement_hashcode_fn)0x0,(gl_listelement_dispose_fn)0x0,true);
	0000bf8d:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
11: return;
	0000bf9b:RET
END_OF_LINE



Function: delete_file_later
----------------------------------------------
16: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000bfc2:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: st_local = st;
	0000bfd9:JNZ 0x0000c02e
END_OF_LINE
----------------------------------------------
18: if (st == (stat *)0x0) {
	0000bfd1:CMP qword ptr [RBP + -0xd0],0x0
	0000bfd9:JNZ 0x0000c02e
END_OF_LINE
----------------------------------------------
19: iVar2 = stat_file(name,&st_tmp);
	0000bfdb:LEA RDX,[RBP + -0xb0]
	0000bfe2:MOV RAX,qword ptr [RBP + -0xc8]
	0000bfe9:MOV RSI,RDX
	0000bfec:MOV RDI,RAX
	0000bfef:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
20: if (iVar2 != 0) {
	0000bff4:TEST EAX,EAX
	0000bff6:JZ 0x0000c020
END_OF_LINE
----------------------------------------------
22: pfatal("Can\'t get file attributes of %s %s",&DAT_000314e6,name);
	0000c01b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
24: st_local = &st_tmp;
	0000c020:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
26: elt = (char **)xmalloc(0xa0);
	0000c033:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
27: pcVar3 = xstrdup(name);
	0000c049:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
28: *elt = pcVar3;
	0000c058:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
29: pcVar3 = (char *)st_local->st_ino;
	0000c06c:MOV RBX,qword ptr [RDX + 0x8]
END_OF_LINE
----------------------------------------------
30: elt[1] = (char *)st_local->st_dev;
	0000c069:MOV RCX,qword ptr [RDX]
	0000c06c:MOV RBX,qword ptr [RDX + 0x8]
	0000c070:MOV qword ptr [RAX + 0x8],RCX
END_OF_LINE
----------------------------------------------
31: elt[2] = pcVar3;
	0000c074:MOV qword ptr [RAX + 0x10],RBX
END_OF_LINE
----------------------------------------------
32: pcVar3 = *(char **)&st_local->st_mode;
	0000c07c:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
33: elt[3] = (char *)st_local->st_nlink;
	0000c078:MOV RCX,qword ptr [RDX + 0x10]
	0000c07c:MOV RBX,qword ptr [RDX + 0x18]
	0000c080:MOV qword ptr [RAX + 0x18],RCX
END_OF_LINE
----------------------------------------------
34: elt[4] = pcVar3;
	0000c084:MOV qword ptr [RAX + 0x20],RBX
END_OF_LINE
----------------------------------------------
35: pcVar3 = (char *)st_local->st_rdev;
	0000c08c:MOV RBX,qword ptr [RDX + 0x28]
END_OF_LINE
----------------------------------------------
36: elt[5] = *(char **)&st_local->st_gid;
	0000c088:MOV RCX,qword ptr [RDX + 0x20]
	0000c08c:MOV RBX,qword ptr [RDX + 0x28]
	0000c090:MOV qword ptr [RAX + 0x28],RCX
END_OF_LINE
----------------------------------------------
37: elt[6] = pcVar3;
	0000c094:MOV qword ptr [RAX + 0x30],RBX
END_OF_LINE
----------------------------------------------
38: pcVar3 = (char *)st_local->st_blksize;
	0000c09c:MOV RBX,qword ptr [RDX + 0x38]
END_OF_LINE
----------------------------------------------
39: elt[7] = (char *)st_local->st_size;
	0000c098:MOV RCX,qword ptr [RDX + 0x30]
	0000c09c:MOV RBX,qword ptr [RDX + 0x38]
	0000c0a0:MOV qword ptr [RAX + 0x38],RCX
END_OF_LINE
----------------------------------------------
40: elt[8] = pcVar3;
	0000c0a4:MOV qword ptr [RAX + 0x40],RBX
END_OF_LINE
----------------------------------------------
41: pcVar3 = (char *)(st_local->st_atim).tv_sec;
	0000c0ac:MOV RBX,qword ptr [RDX + 0x48]
END_OF_LINE
----------------------------------------------
42: elt[9] = (char *)st_local->st_blocks;
	0000c0a8:MOV RCX,qword ptr [RDX + 0x40]
	0000c0ac:MOV RBX,qword ptr [RDX + 0x48]
	0000c0b0:MOV qword ptr [RAX + 0x48],RCX
END_OF_LINE
----------------------------------------------
43: elt[10] = pcVar3;
	0000c0b4:MOV qword ptr [RAX + 0x50],RBX
END_OF_LINE
----------------------------------------------
44: pcVar3 = (char *)(st_local->st_mtim).tv_sec;
	0000c0bc:MOV RBX,qword ptr [RDX + 0x58]
END_OF_LINE
----------------------------------------------
45: elt[0xb] = (char *)(st_local->st_atim).tv_nsec;
	0000c0b8:MOV RCX,qword ptr [RDX + 0x50]
	0000c0bc:MOV RBX,qword ptr [RDX + 0x58]
	0000c0c0:MOV qword ptr [RAX + 0x58],RCX
END_OF_LINE
----------------------------------------------
46: elt[0xc] = pcVar3;
	0000c0c4:MOV qword ptr [RAX + 0x60],RBX
END_OF_LINE
----------------------------------------------
47: pcVar3 = (char *)(st_local->st_ctim).tv_sec;
	0000c0cc:MOV RBX,qword ptr [RDX + 0x68]
END_OF_LINE
----------------------------------------------
48: elt[0xd] = (char *)(st_local->st_mtim).tv_nsec;
	0000c0c8:MOV RCX,qword ptr [RDX + 0x60]
	0000c0cc:MOV RBX,qword ptr [RDX + 0x68]
	0000c0d0:MOV qword ptr [RAX + 0x68],RCX
END_OF_LINE
----------------------------------------------
49: elt[0xe] = pcVar3;
	0000c0d4:MOV qword ptr [RAX + 0x70],RBX
END_OF_LINE
----------------------------------------------
50: pcVar3 = (char *)st_local->__glibc_reserved[0];
	0000c0dc:MOV RBX,qword ptr [RDX + 0x78]
END_OF_LINE
----------------------------------------------
51: elt[0xf] = (char *)(st_local->st_ctim).tv_nsec;
	0000c0d8:MOV RCX,qword ptr [RDX + 0x70]
	0000c0dc:MOV RBX,qword ptr [RDX + 0x78]
	0000c0e0:MOV qword ptr [RAX + 0x78],RCX
END_OF_LINE
----------------------------------------------
52: elt[0x10] = pcVar3;
	0000c0e4:MOV qword ptr [RAX + 0x80],RBX
END_OF_LINE
----------------------------------------------
53: pcVar3 = (char *)st_local->__glibc_reserved[2];
	0000c0f2:MOV RBX,qword ptr [RDX + 0x88]
END_OF_LINE
----------------------------------------------
54: elt[0x11] = (char *)st_local->__glibc_reserved[1];
	0000c0eb:MOV RCX,qword ptr [RDX + 0x80]
	0000c0f2:MOV RBX,qword ptr [RDX + 0x88]
	0000c0f9:MOV qword ptr [RAX + 0x88],RCX
END_OF_LINE
----------------------------------------------
55: elt[0x12] = pcVar3;
	0000c100:MOV qword ptr [RAX + 0x90],RBX
END_OF_LINE
----------------------------------------------
56: *(_Bool *)(elt + 0x13) = backup;
	0000c115:MOV byte ptr [RAX + 0x98],DL
END_OF_LINE
----------------------------------------------
57: gl_list_add_last(files_to_delete,elt);
	0000c12f:CALL 0x0002c098
END_OF_LINE
----------------------------------------------
58: insert_file_id(st_local,DELETE_LATER);
	0000c143:CALL 0x000162d7
END_OF_LINE
----------------------------------------------
59: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000c14d:SUB RAX,qword ptr FS:[0x28]
	0000c156:JZ 0x0000c15d
END_OF_LINE
----------------------------------------------
61: __stack_chk_fail();
	0000c158:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
63: return;
	0000c162:RET
END_OF_LINE



Function: delete_files
----------------------------------------------
19: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000c172:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
20: gl_list_iterator(&local_a8,files_to_delete);
	0000c188:LEA RAX,[RBP + -0xa0]
	0000c18f:MOV RSI,RDX
	0000c192:MOV RDI,RAX
	0000c195:CALL 0x0002200a
END_OF_LINE
----------------------------------------------
21: iter.vtable = local_a8.vtable;
	0000c1a8:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
22: iter.list = local_a8.list;
	0000c1ac:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
23: iter.count = local_a8.count;
	0000c1be:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
24: iter.p = local_a8.p;
	0000c1c2:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
25: iter.q = local_a8.q;
	0000c1ce:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
26: iter.i = local_a8.i;
	0000c1d2:MOV qword ptr [RBP + -0x18],RDX
END_OF_LINE
----------------------------------------------
27: iter.j = local_a8.j;
	0000c1da:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
28: while( true ) {
	0000c2c2:JNZ 0x0000c1e3
END_OF_LINE
----------------------------------------------
29: _Var2 = gl_list_iterator_next(&iter,&elt,(gl_list_node_t *)0x0);
	0000c2a8:LEA RCX,[RBP + -0x50]
	0000c2ac:LEA RAX,[RBP + -0x40]
	0000c2b0:MOV EDX,0x0
	0000c2b5:MOV RSI,RCX
	0000c2b8:MOV RDI,RAX
	0000c2bb:CALL 0x000220ce
END_OF_LINE
----------------------------------------------
30: if (!_Var2) break;
	0000c2c2:JNZ 0x0000c1e3
END_OF_LINE
----------------------------------------------
31: file_to_delete = (file_to_delete *)elt;
	0000c1e7:MOV qword ptr [RBP + -0x48],RAX
END_OF_LINE
----------------------------------------------
32: fVar3 = lookup_file_id((stat *)((long)elt + 8));
	0000c1ef:ADD RAX,0x8
	0000c1f3:MOV RDI,RAX
	0000c1f6:CALL 0x000162fe
END_OF_LINE
----------------------------------------------
33: if (fVar3 == DELETE_LATER) {
	0000c1fb:CMP EAX,0x2
	0000c1fe:JNZ 0x0000c2a8
END_OF_LINE
----------------------------------------------
34: mode = (file_to_delete->st).st_mode;
	0000c208:MOV EAX,dword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
35: if (verbosity == _IScntrl) {
	0000c217:CMP EAX,0x2
	0000c21a:JNZ 0x0000c264
END_OF_LINE
----------------------------------------------
36: pcVar4 = quotearg(file_to_delete->name);
	0000c220:MOV RAX,qword ptr [RAX]
	0000c223:MOV RDI,RAX
	0000c226:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
37: if ((mode & 0xf000) == 0xa000) {
	0000c231:AND EAX,0xf000
	0000c236:CMP EAX,0xa000
	0000c23b:JNZ 0x0000c246
END_OF_LINE
----------------------------------------------
38: pcVar5 = "symbolic link";
	0000c23d:LEA RAX,[0x314d8]
END_OF_LINE
----------------------------------------------
41: pcVar5 = "file";
	0000c246:LEA RAX,[0x314e6]
END_OF_LINE
----------------------------------------------
43: say("Removing %s %s\n",pcVar5,pcVar4);
	0000c25f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
45: move_file((char *)0x0,(_Bool *)0x0,(stat *)0x0,file_to_delete->name,mode,
	0000c276:MOV RAX,qword ptr [RAX]
	0000c279:MOV EDX,dword ptr [RBP + -0x54]
	0000c27c:MOV R9D,ECX
	0000c27f:MOV R8D,EDX
	0000c282:MOV RCX,RAX
	0000c285:MOV EDX,0x0
	0000c28a:MOV ESI,0x0
	0000c28f:MOV EDI,0x0
	0000c294:CALL 0x00016d63
END_OF_LINE
----------------------------------------------
46: file_to_delete->backup);
	0000c268:MOVZX EAX,byte ptr [RAX + 0x98]
END_OF_LINE
----------------------------------------------
47: removedirs(file_to_delete->name);
	0000c29d:MOV RAX,qword ptr [RAX]
	0000c2a0:MOV RDI,RAX
	0000c2a3:CALL 0x000192b1
END_OF_LINE
----------------------------------------------
50: gl_list_iterator_free(&iter);
	0000c2c8:LEA RAX,[RBP + -0x40]
	0000c2cc:MOV RDI,RAX
	0000c2cf:CALL 0x0002210b
END_OF_LINE
----------------------------------------------
51: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000c2d9:SUB RAX,qword ptr FS:[0x28]
	0000c2e2:JZ 0x0000c2e9
END_OF_LINE
----------------------------------------------
53: __stack_chk_fail();
	0000c2e4:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
55: return;
	0000c2ea:RET
END_OF_LINE



Function: output_file_later
----------------------------------------------
16: elt = (char **)xmalloc(0xa8);
	0000c317:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
17: pcVar1 = xstrdup(from);
	0000c327:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
18: *elt = pcVar1;
	0000c333:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
19: pcVar1 = (char *)from_st->st_ino;
	0000c341:MOV RBX,qword ptr [RDX + 0x8]
END_OF_LINE
----------------------------------------------
20: elt[1] = (char *)from_st->st_dev;
	0000c33e:MOV RCX,qword ptr [RDX]
	0000c341:MOV RBX,qword ptr [RDX + 0x8]
	0000c345:MOV qword ptr [RAX + 0x8],RCX
END_OF_LINE
----------------------------------------------
21: elt[2] = pcVar1;
	0000c349:MOV qword ptr [RAX + 0x10],RBX
END_OF_LINE
----------------------------------------------
22: pcVar1 = *(char **)&from_st->st_mode;
	0000c351:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
23: elt[3] = (char *)from_st->st_nlink;
	0000c34d:MOV RCX,qword ptr [RDX + 0x10]
	0000c351:MOV RBX,qword ptr [RDX + 0x18]
	0000c355:MOV qword ptr [RAX + 0x18],RCX
END_OF_LINE
----------------------------------------------
24: elt[4] = pcVar1;
	0000c359:MOV qword ptr [RAX + 0x20],RBX
END_OF_LINE
----------------------------------------------
25: pcVar1 = (char *)from_st->st_rdev;
	0000c361:MOV RBX,qword ptr [RDX + 0x28]
END_OF_LINE
----------------------------------------------
26: elt[5] = *(char **)&from_st->st_gid;
	0000c35d:MOV RCX,qword ptr [RDX + 0x20]
	0000c361:MOV RBX,qword ptr [RDX + 0x28]
	0000c365:MOV qword ptr [RAX + 0x28],RCX
END_OF_LINE
----------------------------------------------
27: elt[6] = pcVar1;
	0000c369:MOV qword ptr [RAX + 0x30],RBX
END_OF_LINE
----------------------------------------------
28: pcVar1 = (char *)from_st->st_blksize;
	0000c371:MOV RBX,qword ptr [RDX + 0x38]
END_OF_LINE
----------------------------------------------
29: elt[7] = (char *)from_st->st_size;
	0000c36d:MOV RCX,qword ptr [RDX + 0x30]
	0000c371:MOV RBX,qword ptr [RDX + 0x38]
	0000c375:MOV qword ptr [RAX + 0x38],RCX
END_OF_LINE
----------------------------------------------
30: elt[8] = pcVar1;
	0000c379:MOV qword ptr [RAX + 0x40],RBX
END_OF_LINE
----------------------------------------------
31: pcVar1 = (char *)(from_st->st_atim).tv_sec;
	0000c381:MOV RBX,qword ptr [RDX + 0x48]
END_OF_LINE
----------------------------------------------
32: elt[9] = (char *)from_st->st_blocks;
	0000c37d:MOV RCX,qword ptr [RDX + 0x40]
	0000c381:MOV RBX,qword ptr [RDX + 0x48]
	0000c385:MOV qword ptr [RAX + 0x48],RCX
END_OF_LINE
----------------------------------------------
33: elt[10] = pcVar1;
	0000c389:MOV qword ptr [RAX + 0x50],RBX
END_OF_LINE
----------------------------------------------
34: pcVar1 = (char *)(from_st->st_mtim).tv_sec;
	0000c391:MOV RBX,qword ptr [RDX + 0x58]
END_OF_LINE
----------------------------------------------
35: elt[0xb] = (char *)(from_st->st_atim).tv_nsec;
	0000c38d:MOV RCX,qword ptr [RDX + 0x50]
	0000c391:MOV RBX,qword ptr [RDX + 0x58]
	0000c395:MOV qword ptr [RAX + 0x58],RCX
END_OF_LINE
----------------------------------------------
36: elt[0xc] = pcVar1;
	0000c399:MOV qword ptr [RAX + 0x60],RBX
END_OF_LINE
----------------------------------------------
37: pcVar1 = (char *)(from_st->st_ctim).tv_sec;
	0000c3a1:MOV RBX,qword ptr [RDX + 0x68]
END_OF_LINE
----------------------------------------------
38: elt[0xd] = (char *)(from_st->st_mtim).tv_nsec;
	0000c39d:MOV RCX,qword ptr [RDX + 0x60]
	0000c3a1:MOV RBX,qword ptr [RDX + 0x68]
	0000c3a5:MOV qword ptr [RAX + 0x68],RCX
END_OF_LINE
----------------------------------------------
39: elt[0xe] = pcVar1;
	0000c3a9:MOV qword ptr [RAX + 0x70],RBX
END_OF_LINE
----------------------------------------------
40: pcVar1 = (char *)from_st->__glibc_reserved[0];
	0000c3b1:MOV RBX,qword ptr [RDX + 0x78]
END_OF_LINE
----------------------------------------------
41: elt[0xf] = (char *)(from_st->st_ctim).tv_nsec;
	0000c3ad:MOV RCX,qword ptr [RDX + 0x70]
	0000c3b1:MOV RBX,qword ptr [RDX + 0x78]
	0000c3b5:MOV qword ptr [RAX + 0x78],RCX
END_OF_LINE
----------------------------------------------
42: elt[0x10] = pcVar1;
	0000c3b9:MOV qword ptr [RAX + 0x80],RBX
END_OF_LINE
----------------------------------------------
43: pcVar1 = (char *)from_st->__glibc_reserved[2];
	0000c3c7:MOV RBX,qword ptr [RDX + 0x88]
END_OF_LINE
----------------------------------------------
44: elt[0x11] = (char *)from_st->__glibc_reserved[1];
	0000c3c0:MOV RCX,qword ptr [RDX + 0x80]
	0000c3c7:MOV RBX,qword ptr [RDX + 0x88]
	0000c3ce:MOV qword ptr [RAX + 0x88],RCX
END_OF_LINE
----------------------------------------------
45: elt[0x12] = pcVar1;
	0000c3d5:MOV qword ptr [RAX + 0x90],RBX
END_OF_LINE
----------------------------------------------
46: if (to == (char *)0x0) {
	0000c3dc:CMP qword ptr [RBP + -0x40],0x0
	0000c3e1:JZ 0x0000c3f4
END_OF_LINE
----------------------------------------------
47: pcVar1 = (char *)0x0;
	0000c3f4:MOV EDX,0x0
END_OF_LINE
----------------------------------------------
50: pcVar1 = xstrdup(to);
	0000c3ea:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
52: elt[0x13] = pcVar1;
	0000c3fd:MOV qword ptr [RAX + 0x98],RDX
END_OF_LINE
----------------------------------------------
53: *(mode_t *)(elt + 0x14) = mode;
	0000c40b:MOV dword ptr [RAX + 0xa0],EDX
END_OF_LINE
----------------------------------------------
54: *(_Bool *)((long)elt + 0xa4) = backup;
	0000c419:MOV byte ptr [RAX + 0xa4],DL
END_OF_LINE
----------------------------------------------
55: gl_list_add_last(files_to_output,elt);
	0000c430:CALL 0x0002c098
END_OF_LINE
----------------------------------------------
56: if (from_needs_removal != (_Bool *)0x0) {
	0000c435:CMP qword ptr [RBP + -0x30],0x0
	0000c43a:JZ 0x0000c443
END_OF_LINE
----------------------------------------------
57: *from_needs_removal = false;
	0000c440:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
59: return;
	0000c449:RET
END_OF_LINE



Function: output_file_now
----------------------------------------------
13: if (to == (char *)0x0) {
	0000c470:CMP qword ptr [RBP + -0x20],0x0
	0000c475:JNZ 0x0000c497
END_OF_LINE
----------------------------------------------
14: if (backup) {
	0000c47b:JZ 0x0000c4f3
END_OF_LINE
----------------------------------------------
15: create_backup(from,from_st,true);
	0000c490:CALL 0x0001678e
END_OF_LINE
----------------------------------------------
19: if (from_st->st_size == -1) {
	0000c49b:MOV RAX,qword ptr [RAX + 0x30]
	0000c49f:CMP RAX,-0x1
	0000c4a3:JNZ 0x0000c4cd
END_OF_LINE
----------------------------------------------
21: __assert_fail("from_st->st_size != -1","patch.c",0x75f,"output_file_now");
	0000c4c8:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
23: move_file(from,from_needs_removal,from_st,to,mode,backup);
	0000c4ee:CALL 0x00016d63
END_OF_LINE
----------------------------------------------
25: return;
	0000c4f5:RET
END_OF_LINE



Function: output_file
----------------------------------------------
16: if (from == (char *)0x0) {
	0000c520:CMP qword ptr [RBP + -0x8],0x0
	0000c525:JNZ 0x0000c540
END_OF_LINE
----------------------------------------------
17: delete_file_later(to,to_st,backup);
	0000c539:CALL 0x0000bf9c
END_OF_LINE
----------------------------------------------
20: _Var1 = pch_git_diff();
	0000c540:CALL 0x00013dca
END_OF_LINE
----------------------------------------------
21: if ((_Var1) && (iVar2 = pch_says_nonexistent(reverse), iVar2 != 2)) {
	0000c547:JZ 0x0000c58a
	0000c549:LEA RAX,[0x3e35b]
	0000c550:MOVZX EAX,byte ptr [RAX]
	0000c553:MOVZX EAX,AL
	0000c556:MOV EDI,EAX
	0000c558:CALL 0x00013b30
	0000c55d:CMP EAX,0x2
	0000c560:JZ 0x0000c58a
END_OF_LINE
----------------------------------------------
22: output_file_later(from,from_needs_removal,from_st,to,mode,backup);
	0000c583:CALL 0x0000c2eb
END_OF_LINE
----------------------------------------------
23: return;
	0000c5b2:RET
END_OF_LINE
----------------------------------------------
25: output_file_now(from,from_needs_removal,from_st,to,mode,backup);
	0000c5ab:CALL 0x0000c44a
END_OF_LINE
----------------------------------------------
27: return;
	0000c5b2:RET
END_OF_LINE



Function: dispose_file_to_output
----------------------------------------------
9: free(*elt);
	0000c5cf:MOV RAX,qword ptr [RAX]
	0000c5d2:MOV RDI,RAX
	0000c5d5:CALL 0x00005860
END_OF_LINE
----------------------------------------------
10: free(*(void **)((long)elt + 0x98));
	0000c5de:MOV RAX,qword ptr [RAX + 0x98]
	0000c5e5:MOV RDI,RAX
	0000c5e8:CALL 0x00005860
END_OF_LINE
----------------------------------------------
11: return;
	0000c5ef:RET
END_OF_LINE



Function: init_files_to_output
----------------------------------------------
7: files_to_output =
	0000c61c:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
8: gl_list_create_empty
	0000c61c:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
9: (&gl_linked_list_implementation,(gl_listelement_equals_fn)0x0,
	0000c61c:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
10: (gl_listelement_hashcode_fn)0x0,dispose_file_to_output,true);
	0000c61c:CALL 0x0002bf12
END_OF_LINE
----------------------------------------------
11: return;
	0000c62a:RET
END_OF_LINE



Function: gl_list_clear
----------------------------------------------
8: while( true ) {
	0000c65d:JNZ 0x0000c63d
END_OF_LINE
----------------------------------------------
9: sVar1 = gl_list_size(list);
	0000c655:CALL 0x00021b12
END_OF_LINE
----------------------------------------------
10: if (sVar1 == 0) break;
	0000c65a:TEST RAX,RAX
	0000c65d:JNZ 0x0000c63d
END_OF_LINE
----------------------------------------------
11: gl_list_remove_at(list,0);
	0000c649:CALL 0x00021f78
END_OF_LINE
----------------------------------------------
13: return;
	0000c662:RET
END_OF_LINE



Function: output_files
----------------------------------------------
17: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000c676:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
18: st_local = st;
	0000c699:CALL 0x0002200a
END_OF_LINE
----------------------------------------------
19: gl_list_iterator(&local_c8,files_to_output);
	0000c68c:LEA RAX,[RBP + -0xc0]
	0000c693:MOV RSI,RDX
	0000c696:MOV RDI,RAX
	0000c699:CALL 0x0002200a
END_OF_LINE
----------------------------------------------
20: iter.vtable = local_c8.vtable;
	0000c6ac:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
21: iter.list = local_c8.list;
	0000c6b0:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
22: iter.count = local_c8.count;
	0000c6c2:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
23: iter.p = local_c8.p;
	0000c6c6:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
24: iter.q = local_c8.q;
	0000c6d8:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
25: iter.i = local_c8.i;
	0000c6dc:MOV qword ptr [RBP + -0x18],RDX
END_OF_LINE
----------------------------------------------
26: iter.j = local_c8.j;
	0000c6e7:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
28: _Var2 = gl_list_iterator_next(&iter,&elt,(gl_list_node_t *)0x0);
	0000c7e6:LEA RCX,[RBP + -0x60]
	0000c7ea:LEA RAX,[RBP + -0x40]
	0000c7ee:MOV EDX,0x0
	0000c7f3:MOV RSI,RCX
	0000c7f6:MOV RDI,RAX
	0000c7f9:CALL 0x000220ce
END_OF_LINE
----------------------------------------------
29: if (!_Var2) {
	0000c800:JNZ 0x0000c6f0
END_OF_LINE
----------------------------------------------
30: gl_list_iterator_free(&iter);
	0000c806:LEA RAX,[RBP + -0x40]
	0000c80a:MOV RDI,RAX
	0000c80d:CALL 0x0002210b
END_OF_LINE
----------------------------------------------
31: gl_list_clear(files_to_output);
	0000c81c:CALL 0x0000c62b
END_OF_LINE
----------------------------------------------
32: goto LAB_0000c821;
	0000c821:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
34: file_to_output = (file_to_output *)elt;
	0000c6f4:MOV qword ptr [RBP + -0x58],RAX
END_OF_LINE
----------------------------------------------
35: from_needs_removal = true;
	0000c6f8:MOV byte ptr [RBP + -0x61],0x1
END_OF_LINE
----------------------------------------------
36: from_st = (stat *)((long)elt + 8);
	0000c700:ADD RAX,0x8
END_OF_LINE
----------------------------------------------
38: output_file_now(*elt,&from_needs_removal,from_st,*(char **)((long)elt + 0x98),
	0000c725:MOV RCX,qword ptr [RAX + 0x98]
	0000c72c:MOV RAX,qword ptr [RBP + -0x58]
	0000c730:MOV RAX,qword ptr [RAX]
	0000c733:MOV RDX,qword ptr [RBP + -0x50]
	0000c737:LEA RSI,[RBP + -0x61]
	0000c73b:MOV R9D,R8D
	0000c73e:MOV R8D,EDI
	0000c741:MOV RDI,RAX
	0000c744:CALL 0x0000c44a
END_OF_LINE
----------------------------------------------
39: *(mode_t *)((long)elt + 0xa0),*(_Bool *)((long)elt + 0xa4));
	0000c70c:MOVZX EAX,byte ptr [RAX + 0xa4]
	0000c713:MOVZX R8D,AL
	0000c717:MOV RAX,qword ptr [RBP + -0x58]
	0000c71b:MOV EDI,dword ptr [RAX + 0xa0]
	0000c721:MOV RAX,qword ptr [RBP + -0x58]
	0000c725:MOV RCX,qword ptr [RAX + 0x98]
	0000c72c:MOV RAX,qword ptr [RBP + -0x58]
	0000c730:MOV RAX,qword ptr [RAX]
	0000c733:MOV RDX,qword ptr [RBP + -0x50]
	0000c737:LEA RSI,[RBP + -0x61]
	0000c73b:MOV R9D,R8D
	0000c73e:MOV R8D,EDI
	0000c741:MOV RDI,RAX
	0000c744:CALL 0x0000c44a
END_OF_LINE
----------------------------------------------
40: if ((file_to_output->to != (char *)0x0) && (from_needs_removal != false)) {
	0000c74d:MOV RAX,qword ptr [RAX + 0x98]
	0000c754:TEST RAX,RAX
	0000c757:JZ 0x0000c770
	0000c759:MOVZX EAX,byte ptr [RBP + -0x61]
	0000c75d:TEST AL,AL
	0000c75f:JZ 0x0000c770
END_OF_LINE
----------------------------------------------
41: safe_unlink(file_to_output->from);
	0000c765:MOV RAX,qword ptr [RAX]
	0000c768:MOV RDI,RAX
	0000c76b:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
43: } while (((st_local == (stat *)0x0) || (st_local->st_dev != from_st->st_dev)) ||
	0000c770:CMP qword ptr [RBP + -0x78],0x0
	0000c775:JZ 0x0000c7e6
	0000c777:MOV RAX,qword ptr [RBP + -0x78]
	0000c77b:MOV RDX,qword ptr [RAX]
	0000c77e:MOV RAX,qword ptr [RBP + -0x50]
	0000c782:MOV RAX,qword ptr [RAX]
	0000c785:CMP RDX,RAX
	0000c788:JNZ 0x0000c7e6
	0000c78a:MOV RAX,qword ptr [RBP + -0x78]
	0000c78e:MOV RDX,qword ptr [RAX + 0x8]
	0000c792:MOV RAX,qword ptr [RBP + -0x50]
	0000c796:MOV RAX,qword ptr [RAX + 0x8]
	0000c79a:CMP RDX,RAX
	0000c79d:JNZ 0x0000c7e6
END_OF_LINE
----------------------------------------------
44: (st_local->st_ino != from_st->st_ino));
	0000c78e:MOV RDX,qword ptr [RAX + 0x8]
	0000c792:MOV RAX,qword ptr [RBP + -0x50]
	0000c796:MOV RAX,qword ptr [RAX + 0x8]
	0000c79a:CMP RDX,RAX
END_OF_LINE
----------------------------------------------
46: elt2 = gl_list_get_at(files_to_output,0);
	0000c7ae:CALL 0x00021c05
END_OF_LINE
----------------------------------------------
47: gl_list_remove_at(files_to_output,0);
	0000c7c6:CALL 0x00021f78
END_OF_LINE
----------------------------------------------
48: } while (elt2 != elt);
	0000c7cf:CMP qword ptr [RBP + -0x48],RAX
	0000c7d3:JZ 0x0000c7d7
END_OF_LINE
----------------------------------------------
49: gl_list_iterator_free(&iter);
	0000c7d8:LEA RAX,[RBP + -0x40]
	0000c7dc:MOV RDI,RAX
	0000c7df:CALL 0x0002210b
END_OF_LINE
----------------------------------------------
50: LAB_0000c821:
	0000c821:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
51: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000c825:SUB RAX,qword ptr FS:[0x28]
	0000c82e:JZ 0x0000c835
END_OF_LINE
----------------------------------------------
52: return;
	0000c836:RET
END_OF_LINE
----------------------------------------------
55: __stack_chk_fail();
	0000c830:CALL 0x00005b00
END_OF_LINE



Function: fatal_exit
----------------------------------------------
8: cleanup((EVP_PKEY_CTX *)CONCAT44(in_register_0000003c,sig));
	0000c837:ENDBR64
	0000c83b:PUSH RBP
	0000c83c:MOV RBP,RSP
	0000c83f:SUB RSP,0x10
	0000c843:MOV dword ptr [RBP + -0x4],EDI
	0000c846:CALL 0x0000c89a
END_OF_LINE
----------------------------------------------
9: if (sig != 0) {
	0000c84b:CMP dword ptr [RBP + -0x4],0x0
	0000c84f:JZ 0x0000c85b
END_OF_LINE
----------------------------------------------
11: exit_with_signal(sig);
	0000c856:CALL 0x00019075
END_OF_LINE
----------------------------------------------
14: exit(2);
	0000c860:CALL 0x00005ff0
END_OF_LINE



Function: remove_if_needed
----------------------------------------------
8: if (*needs_removal != false) {
	0000c87d:MOVZX EAX,byte ptr [RAX]
	0000c880:TEST AL,AL
	0000c882:JZ 0x0000c897
END_OF_LINE
----------------------------------------------
9: safe_unlink(name);
	0000c88b:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
10: *needs_removal = false;
	0000c894:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
12: return;
	0000c899:RET
END_OF_LINE



Function: cleanup
----------------------------------------------
5: if (!cleanup::already_cleaning_up) {
	0000c8a9:TEST AL,AL
	0000c8ab:JNZ 0x0000c94d
END_OF_LINE
----------------------------------------------
6: cleanup::already_cleaning_up = true;
	0000c8b1:MOV byte ptr [0x00040430],0x1
END_OF_LINE
----------------------------------------------
7: remove_if_needed(TMPINNAME,&TMPINNAME_needs_removal);
	0000c8cf:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
8: remove_if_needed(TMPOUTNAME,&TMPOUTNAME_needs_removal);
	0000c8eb:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
9: remove_if_needed(TMPPATNAME,&TMPPATNAME_needs_removal);
	0000c907:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
10: remove_if_needed(TMPEDNAME,&TMPEDNAME_needs_removal);
	0000c923:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
11: remove_if_needed(TMPREJNAME,&TMPREJNAME_needs_removal);
	0000c93c:CALL 0x0000c865
END_OF_LINE
----------------------------------------------
12: output_files((stat *)0x0);
	0000c946:CALL 0x0000c663
END_OF_LINE
----------------------------------------------
14: return;
	0000c94f:RET
END_OF_LINE



Function: skip_spaces
----------------------------------------------
8: str_local = str;
	0000c95c:JMP 0x0000c963
END_OF_LINE
----------------------------------------------
9: while( true ) {
	0000c988:JNZ 0x0000c95e
END_OF_LINE
----------------------------------------------
10: ppuVar1 = __ctype_b_loc();
	0000c963:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
11: if (((*ppuVar1)[(byte)*str_local] & 0x2000) == 0) break;
	0000c968:MOV RDX,qword ptr [RAX]
	0000c96b:MOV RAX,qword ptr [RBP + -0x8]
	0000c96f:MOVZX EAX,byte ptr [RAX]
	0000c972:MOVZX EAX,AL
	0000c975:ADD RAX,RAX
	0000c978:ADD RAX,RDX
	0000c97b:MOVZX EAX,word ptr [RAX]
	0000c97e:MOVZX EAX,AX
	0000c981:AND EAX,0x2000
	0000c986:TEST EAX,EAX
	0000c988:JNZ 0x0000c95e
END_OF_LINE
----------------------------------------------
12: str_local = str_local + 1;
	0000c95e:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
14: return str_local;
	0000c98a:MOV RAX,qword ptr [RBP + -0x8]
	0000c98e:LEAVE
	0000c98f:RET
END_OF_LINE



Function: re_patch
----------------------------------------------
7: p_first = 0;
	0000c998:MOV qword ptr [0x000404e0],0x0
END_OF_LINE
----------------------------------------------
8: p_newfirst = 0;
	0000c9a3:MOV qword ptr [0x000404e8],0x0
END_OF_LINE
----------------------------------------------
9: p_ptrn_lines = 0;
	0000c9ae:MOV qword ptr [0x000404f0],0x0
END_OF_LINE
----------------------------------------------
10: p_repl_lines = 0;
	0000c9b9:MOV qword ptr [0x000404f8],0x0
END_OF_LINE
----------------------------------------------
11: p_end = -1;
	0000c9c4:MOV qword ptr [0x0003e040],-0x1
END_OF_LINE
----------------------------------------------
12: p_max = 0;
	0000c9cf:MOV qword ptr [0x00040500],0x0
END_OF_LINE
----------------------------------------------
13: p_indent = 0;
	0000c9da:MOV qword ptr [0x00040538],0x0
END_OF_LINE
----------------------------------------------
14: p_strip_trailing_cr = false;
	0000c9e5:MOV byte ptr [0x00040540],0x0
END_OF_LINE
----------------------------------------------
15: return;
	0000c9ee:RET
END_OF_LINE



Function: open_patch_file
----------------------------------------------
21: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000ca05:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
22: file_pos = 0;
	0000ca14:MOV qword ptr [RBP + -0xc0],0x0
END_OF_LINE
----------------------------------------------
23: if (((filename == (char *)0x0) || (*filename == '\0')) ||
	0000ca1f:CMP qword ptr [RBP + -0xd8],0x0
	0000ca27:JZ 0x0000ca54
	0000ca29:MOV RAX,qword ptr [RBP + -0xd8]
	0000ca30:MOVZX EAX,byte ptr [RAX]
	0000ca33:TEST AL,AL
	0000ca35:JZ 0x0000ca54
	0000ca37:MOV RAX,qword ptr [RBP + -0xd8]
	0000ca3e:LEA RDX,[0x32c00]
	0000ca45:MOV RSI,RDX
	0000ca48:MOV RDI,RAX
	0000ca4b:CALL 0x00005ce0
	0000ca50:TEST EAX,EAX
	0000ca52:JNZ 0x0000ca67
END_OF_LINE
----------------------------------------------
24: (iVar2 = strcmp(filename,"-"), iVar2 == 0)) {
	0000ca4b:CALL 0x00005ce0
	0000ca50:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
25: pfp = pFRam00000000001440d8;
	0000ca5e:MOV qword ptr [0x00040468],RAX
END_OF_LINE
----------------------------------------------
28: pfp = (FILE *)fopen(filename,"r");
	0000ca7b:CALL 0x00005f50
END_OF_LINE
----------------------------------------------
29: if ((FILE *)pfp == (FILE *)0x0) {
	0000ca8e:TEST RAX,RAX
	0000ca91:JNZ 0x0000cab9
END_OF_LINE
----------------------------------------------
30: pcVar4 = quotearg(filename);
	0000ca9d:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
32: pfatal("Can\'t open patch file %s",pcVar4);
	0000cab4:CALL 0x00018721
END_OF_LINE
----------------------------------------------
35: iVar2 = fileno((FILE *)pfp);
	0000cac3:CALL 0x00005dc0
END_OF_LINE
----------------------------------------------
36: iVar2 = fstat(iVar2,(stat *)&st);
	0000caca:LEA RAX,[RBP + -0xa0]
	0000cad1:MOV RSI,RAX
	0000cad4:MOV EDI,EDX
	0000cad6:CALL 0x00006060
END_OF_LINE
----------------------------------------------
37: if (iVar2 != 0) {
	0000cadb:TEST EAX,EAX
	0000cadd:JZ 0x0000caf3
END_OF_LINE
----------------------------------------------
39: pfatal("fstat");
	0000caee:CALL 0x00018721
END_OF_LINE
----------------------------------------------
41: if (((st.st_mode & 0xf000) != 0x8000) || (fVar3 = ftell((FILE *)pfp), fVar3 == -1)) {
	0000caf9:AND EAX,0xf000
	0000cafe:CMP EAX,0x8000
	0000cb03:JNZ 0x0000cb38
	0000cb05:MOV RAX,qword ptr [0x00040468]
	0000cb0c:MOV RDI,RAX
	0000cb0f:CALL 0x00005d70
	0000cb14:MOV qword ptr [RBP + -0xb8],RAX
	0000cb1b:CMP qword ptr [RBP + -0xb8],-0x1
	0000cb23:JZ 0x0000cb38
END_OF_LINE
----------------------------------------------
42: __stream = pfp;
	0000cb38:MOV RAX,qword ptr [0x00040468]
END_OF_LINE
----------------------------------------------
43: iVar2 = make_tempfile(&TMPPATNAME,'p',(char *)0x0,2,0);
	0000cb65:CALL 0x00019da4
END_OF_LINE
----------------------------------------------
44: if (iVar2 == -1) {
	0000cb70:CMP dword ptr [RBP + -0xc4],-0x1
	0000cb77:JNZ 0x0000cb9a
END_OF_LINE
----------------------------------------------
46: pfatal("Can\'t create temporary file %s",TMPPATNAME);
	0000cb95:CALL 0x00018721
END_OF_LINE
----------------------------------------------
48: TMPPATNAME_needs_removal = true;
	0000cba1:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
49: pfp = (FILE *)fdopen(iVar2,"w+b");
	0000cbb6:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
50: if ((FILE *)pfp == (FILE *)0x0) {
	0000cbc9:TEST RAX,RAX
	0000cbcc:JNZ 0x0000cbf7
END_OF_LINE
----------------------------------------------
51: pcVar4 = quotearg(TMPPATNAME);
	0000cbdb:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
53: pfatal("Can\'t open stream for file %s",pcVar4);
	0000cbf2:CALL 0x00018721
END_OF_LINE
----------------------------------------------
55: st.st_size = 0;
	0000cbf7:MOV qword ptr [RBP + -0x70],0x0
END_OF_LINE
----------------------------------------------
56: while (__n = fread(buf,1,bufsize,(FILE *)__stream), __n != 0) {
	0000cc6c:CALL 0x000059e0
	0000cc71:MOV qword ptr [RBP + -0xa8],RAX
	0000cc78:CMP qword ptr [RBP + -0xa8],0x0
	0000cc80:JNZ 0x0000cc01
END_OF_LINE
----------------------------------------------
57: sVar5 = fwrite(buf,1,__n,(FILE *)pfp);
	0000cc21:CALL 0x00006010
END_OF_LINE
----------------------------------------------
58: if (__n != sVar5) {
	0000cc26:CMP qword ptr [RBP + -0xa8],RAX
	0000cc2d:JZ 0x0000cc34
END_OF_LINE
----------------------------------------------
60: write_fatal();
	0000cc2f:CALL 0x00018705
END_OF_LINE
----------------------------------------------
62: st.st_size = __n + st.st_size;
	0000cc42:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
64: iVar2 = ferror((FILE *)__stream);
	0000cc90:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
65: if ((iVar2 != 0) || (iVar2 = fclose((FILE *)__stream), iVar2 != 0)) {
	0000cc95:TEST EAX,EAX
	0000cc97:JNZ 0x0000ccac
	0000cc99:MOV RAX,qword ptr [RBP + -0xb0]
	0000cca0:MOV RDI,RAX
	0000cca3:CALL 0x00005a80
	0000cca8:TEST EAX,EAX
	0000ccaa:JZ 0x0000ccb1
END_OF_LINE
----------------------------------------------
67: read_fatal();
	0000ccac:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
69: iVar2 = fflush((FILE *)pfp);
	0000ccbb:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
70: if ((iVar2 != 0) || (iVar2 = fseek((FILE *)pfp,0,0), fVar3 = file_pos, iVar2 != 0)) {
	0000ccc0:TEST EAX,EAX
	0000ccc2:JNZ 0x0000cce1
	0000ccc4:MOV RAX,qword ptr [0x00040468]
	0000cccb:MOV EDX,0x0
	0000ccd0:MOV ESI,0x0
	0000ccd5:MOV RDI,RAX
	0000ccd8:CALL 0x00005e90
	0000ccdd:TEST EAX,EAX
	0000ccdf:JZ 0x0000cce6
END_OF_LINE
----------------------------------------------
72: write_fatal();
	0000cce1:CALL 0x00018705
END_OF_LINE
----------------------------------------------
75: file_pos = fVar3;
	0000cce6:MOV RAX,qword ptr [RBP + -0x70]
END_OF_LINE
----------------------------------------------
76: p_filesize = st.st_size;
	0000ccea:MOV qword ptr [0x000404d8],RAX
END_OF_LINE
----------------------------------------------
77: next_intuit_at(file_pos,1);
	0000cd00:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
78: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000cd0a:SUB RAX,qword ptr FS:[0x28]
	0000cd13:JZ 0x0000cd1a
END_OF_LINE
----------------------------------------------
79: return;
	0000cd1b:RET
END_OF_LINE
----------------------------------------------
82: __stack_chk_fail();
	0000cd15:CALL 0x00005b00
END_OF_LINE



Function: set_hunkmax
----------------------------------------------
7: if (p_line == (char **)0x0) {
	0000cd2b:TEST RAX,RAX
	0000cd2e:JNZ 0x0000cd4a
END_OF_LINE
----------------------------------------------
8: p_line = (char **)xmalloc(hunkmax << 3);
	0000cd37:SHL RAX,0x3
	0000cd3b:MOV RDI,RAX
	0000cd3e:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
10: if (p_len == (size_t *)0x0) {
	0000cd51:TEST RAX,RAX
	0000cd54:JNZ 0x0000cd70
END_OF_LINE
----------------------------------------------
11: p_len = (size_t *)xmalloc(hunkmax << 3);
	0000cd5d:SHL RAX,0x3
	0000cd61:MOV RDI,RAX
	0000cd64:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
13: if (p_Char == (char *)0x0) {
	0000cd77:TEST RAX,RAX
	0000cd7a:JNZ 0x0000cd92
END_OF_LINE
----------------------------------------------
14: p_Char = (char *)xmalloc(hunkmax);
	0000cd86:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
16: return;
	0000cd94:RET
END_OF_LINE



Function: grow_hunkmax
----------------------------------------------
9: if (((p_line == (char **)0x0) || (p_len == (size_t *)0x0)) || (p_Char == (char *)0x0)) {
	0000cdb5:TEST RAX,RAX
	0000cdb8:JZ 0x0000cdd2
	0000cdba:MOV RAX,qword ptr [0x00040528]
	0000cdc1:TEST RAX,RAX
	0000cdc4:JZ 0x0000cdd2
	0000cdc6:MOV RAX,qword ptr [0x00040530]
	0000cdcd:TEST RAX,RAX
	0000cdd0:JNZ 0x0000cdfa
END_OF_LINE
----------------------------------------------
10: hunkmax = hunkmax * 2;
	0000cda4:ADD RAX,RAX
	0000cda7:MOV qword ptr [0x0003e048],RAX
	0000cdae:MOV RAX,qword ptr [0x00040520]
	0000cdb5:TEST RAX,RAX
	0000cdb8:JZ 0x0000cdd2
	0000cdba:MOV RAX,qword ptr [0x00040528]
	0000cdc1:TEST RAX,RAX
	0000cdc4:JZ 0x0000cdd2
	0000cdc6:MOV RAX,qword ptr [0x00040530]
	0000cdcd:TEST RAX,RAX
	0000cdd0:JNZ 0x0000cdfa
	0000cdd2:LEA RAX,[0x338a0]
	0000cdd9:MOV RCX,RAX
	0000cddc:MOV EDX,0xbc
	0000cde1:LEA RAX,[0x32c69]
	0000cde8:MOV RSI,RAX
	0000cdeb:LEA RAX,[0x32c6f]
	0000cdf2:MOV RDI,RAX
	0000cdf5:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
12: __assert_fail("p_line && p_len && p_Char","pch.c",0xbc,"grow_hunkmax");
	0000cdf5:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
14: __size = hunkmax << 4;
	0000ce01:LEA RDX,[RAX*0x8]
END_OF_LINE
----------------------------------------------
15: hunkmax = hunkmax * 2;
	0000cda4:ADD RAX,RAX
	0000cda7:MOV qword ptr [0x0003e048],RAX
	0000cdae:MOV RAX,qword ptr [0x00040520]
	0000cdb5:TEST RAX,RAX
	0000cdb8:JZ 0x0000cdd2
	0000cdba:MOV RAX,qword ptr [0x00040528]
	0000cdc1:TEST RAX,RAX
	0000cdc4:JZ 0x0000cdd2
	0000cdc6:MOV RAX,qword ptr [0x00040530]
	0000cdcd:TEST RAX,RAX
	0000cdd0:JNZ 0x0000cdfa
	0000cdd2:LEA RAX,[0x338a0]
	0000cdd9:MOV RCX,RAX
	0000cddc:MOV EDX,0xbc
	0000cde1:LEA RAX,[0x32c69]
	0000cde8:MOV RSI,RAX
	0000cdeb:LEA RAX,[0x32c6f]
	0000cdf2:MOV RDI,RAX
	0000cdf5:CALL 0x00005bf0
	0000cdfa:MOV RAX,qword ptr [0x0003e048]
	0000ce01:LEA RDX,[RAX*0x8]
	0000ce09:MOV RAX,qword ptr [0x00040520]
	0000ce10:MOV RSI,RDX
	0000ce13:MOV RDI,RAX
	0000ce16:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
16: p_line = (char **)realloc(p_line,__size);
	0000ce16:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
17: if (((p_line != (char **)0x0) &&
	0000ce29:TEST RAX,RAX
	0000ce2c:JZ 0x0000ce98
	0000ce2e:MOV RAX,qword ptr [0x0003e048]
	0000ce35:LEA RDX,[RAX*0x8]
	0000ce3d:MOV RAX,qword ptr [0x00040528]
	0000ce44:MOV RSI,RDX
	0000ce47:MOV RDI,RAX
	0000ce4a:CALL 0x00005ea0
	0000ce4f:MOV qword ptr [0x00040528],RAX
	0000ce56:MOV RAX,qword ptr [0x00040528]
	0000ce5d:TEST RAX,RAX
	0000ce60:JZ 0x0000ce98
	0000ce62:MOV RAX,qword ptr [0x0003e048]
	0000ce69:MOV RDX,RAX
	0000ce6c:MOV RAX,qword ptr [0x00040530]
	0000ce73:MOV RSI,RDX
	0000ce76:MOV RDI,RAX
	0000ce79:CALL 0x00005ea0
	0000ce7e:MOV qword ptr [0x00040530],RAX
	0000ce85:MOV RAX,qword ptr [0x00040530]
	0000ce8c:TEST RAX,RAX
	0000ce8f:JZ 0x0000ce98
END_OF_LINE
----------------------------------------------
18: (p_len = (size_t *)realloc(p_len,hunkmax * 8), p_len != (size_t *)0x0)) &&
	0000ce35:LEA RDX,[RAX*0x8]
	0000ce3d:MOV RAX,qword ptr [0x00040528]
	0000ce44:MOV RSI,RDX
	0000ce47:MOV RDI,RAX
	0000ce4a:CALL 0x00005ea0
	0000ce4f:MOV qword ptr [0x00040528],RAX
	0000ce56:MOV RAX,qword ptr [0x00040528]
	0000ce5d:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
19: (p_Char = (char *)realloc(p_Char,hunkmax), p_Char != (char *)0x0)) {
	0000ce79:CALL 0x00005ea0
	0000ce7e:MOV qword ptr [0x00040530],RAX
	0000ce85:MOV RAX,qword ptr [0x00040530]
	0000ce8c:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
20: return true;
	0000ceb4:RET
END_OF_LINE
----------------------------------------------
22: if (using_plan_a == true) {
	0000cea5:TEST AL,AL
	0000cea7:JZ 0x0000ceae
END_OF_LINE
----------------------------------------------
23: return false;
	0000ceb4:RET
END_OF_LINE
----------------------------------------------
26: xalloc_die();
	0000cea9:CALL 0x000186cd
END_OF_LINE



Function: maybe_reverse
----------------------------------------------
16: bVar2 = (int)(uint)!is_empty < p_says_nonexistent[(int)(uint)(reverse != is_empty)];
	0000ced6:XOR EAX,0x1
	0000ced9:MOVZX EDX,AL
	0000cedc:LEA RAX,[0x3e35b]
	0000cee3:MOVZX EAX,byte ptr [RAX]
	0000cee6:XOR AL,byte ptr [RBP + -0x30]
	0000cee9:MOVZX EAX,AL
	0000ceec:CDQE
	0000ceee:LEA RCX,[RAX*0x4]
	0000cef6:LEA RAX,[0x40470]
	0000cefd:MOV EAX,dword ptr [RCX + RAX*0x1]
	0000cf00:CMP EDX,EAX
	0000cf02:SETL AL
END_OF_LINE
----------------------------------------------
17: if (((is_empty) && (p_says_nonexistent[(int)(uint)(reverse != nonexistent)] == 1)) &&
	0000cf0c:JZ 0x0000cf6d
	0000cf0e:LEA RAX,[0x3e35b]
	0000cf15:MOVZX EAX,byte ptr [RAX]
	0000cf18:XOR AL,byte ptr [RBP + -0x2c]
	0000cf1b:MOVZX EAX,AL
	0000cf1e:CDQE
	0000cf20:LEA RDX,[RAX*0x4]
	0000cf28:LEA RAX,[0x40470]
	0000cf2f:MOV EAX,dword ptr [RDX + RAX*0x1]
	0000cf32:CMP EAX,0x1
	0000cf35:JNZ 0x0000cf6d
	0000cf37:LEA RAX,[0x3e35b]
	0000cf3e:MOVZX EAX,byte ptr [RAX]
	0000cf41:XOR EAX,0x1
	0000cf44:XOR AL,byte ptr [RBP + -0x2c]
	0000cf47:MOVZX EAX,AL
	0000cf4a:CDQE
	0000cf4c:LEA RDX,[RAX*0x4]
	0000cf54:LEA RAX,[0x40470]
	0000cf5b:MOV EAX,dword ptr [RDX + RAX*0x1]
	0000cf5e:CMP EAX,0x2
	0000cf61:JNZ 0x0000cf6d
END_OF_LINE
----------------------------------------------
18: (p_says_nonexistent[(int)(uint)(!reverse != nonexistent)] == 2)) {
	0000cf41:XOR EAX,0x1
	0000cf44:XOR AL,byte ptr [RBP + -0x2c]
	0000cf47:MOVZX EAX,AL
	0000cf4a:CDQE
	0000cf4c:LEA RDX,[RAX*0x4]
	0000cf54:LEA RAX,[0x40470]
	0000cf5b:MOV EAX,dword ptr [RDX + RAX*0x1]
	0000cf5e:CMP EAX,0x2
END_OF_LINE
----------------------------------------------
19: bVar2 = false;
	0000cf63:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
21: else if (bVar2) {
	0000cf71:JZ 0x0000d027
END_OF_LINE
----------------------------------------------
22: if (nonexistent) {
	0000cf7b:JZ 0x0000cf86
END_OF_LINE
----------------------------------------------
23: pcVar5 = "does not exist";
	0000cf7d:LEA RBX,[0x32c89]
END_OF_LINE
----------------------------------------------
25: else if (is_empty) {
	0000cf8a:JZ 0x0000cf95
END_OF_LINE
----------------------------------------------
26: pcVar5 = "is already empty";
	0000cf8c:LEA RBX,[0x32c98]
END_OF_LINE
----------------------------------------------
29: pcVar5 = "already exists";
	0000cf95:LEA RBX,[0x32ca9]
END_OF_LINE
----------------------------------------------
31: pcVar3 = quotearg(name);
	0000cfa3:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
32: if (nonexistent) {
	0000cfaf:JZ 0x0000cfba
END_OF_LINE
----------------------------------------------
33: pcVar4 = "delete";
	0000cfb1:LEA RAX,[0x32cb8]
END_OF_LINE
----------------------------------------------
35: else if (is_empty) {
	0000cfbe:JZ 0x0000cfc9
END_OF_LINE
----------------------------------------------
36: pcVar4 = "empty out";
	0000cfc0:LEA RAX,[0x32cbf]
END_OF_LINE
----------------------------------------------
39: pcVar4 = "create";
	0000cfc9:LEA RAX,[0x32cc9]
END_OF_LINE
----------------------------------------------
41: if (reverse == false) {
	0000cfda:TEST DL,DL
	0000cfdc:JZ 0x0000cfe7
END_OF_LINE
----------------------------------------------
42: pcVar6 = "";
	0000cfe7:LEA RSI,[0x32ce1]
END_OF_LINE
----------------------------------------------
45: pcVar6 = ", when reversed,";
	0000cfde:LEA RSI,[0x32cd0]
END_OF_LINE
----------------------------------------------
47: _Var1 = ok_to_reverse("The next patch%s would %s the file %s,\nwhich %s!",pcVar6,pcVar4,pcVar3,
	0000d003:CALL 0x00018c6e
END_OF_LINE
----------------------------------------------
48: pcVar5);
	0000d003:CALL 0x00018c6e
END_OF_LINE
----------------------------------------------
49: reverse = reverse != _Var1;
	0000d019:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
51: return bVar2;
	0000d030:RET
END_OF_LINE



Function: there_is_another_patch
----------------------------------------------
17: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000d047:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
18: if ((p_base == 0) || (p_base < p_filesize)) {
	0000d05d:TEST RAX,RAX
	0000d060:JZ 0x0000d0a1
	0000d062:MOV RDX,qword ptr [0x00040548]
	0000d069:MOV RAX,qword ptr [0x000404d8]
	0000d070:CMP RDX,RAX
	0000d073:JL 0x0000d0a1
END_OF_LINE
----------------------------------------------
19: if (verbosity == _IScntrl) {
	0000d0aa:CMP EAX,0x2
	0000d0ad:JNZ 0x0000d0c3
END_OF_LINE
----------------------------------------------
20: say("Hmm...");
	0000d0be:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
22: diff_type = intuit_diff_type(need_header,file_type);
	0000d0d0:CALL 0x0000d8b3
END_OF_LINE
----------------------------------------------
23: if (diff_type == NO_DIFF) {
	0000d0e7:TEST EAX,EAX
	0000d0e9:JNZ 0x0000d158
END_OF_LINE
----------------------------------------------
24: if (verbosity == _IScntrl) {
	0000d0f4:CMP EAX,0x2
	0000d0f7:JNZ 0x0000d122
END_OF_LINE
----------------------------------------------
25: if (p_base == 0) {
	0000d100:TEST RAX,RAX
	0000d103:JZ 0x0000d10e
END_OF_LINE
----------------------------------------------
26: pcVar3 = "  I can\'t seem to find a patch in there anywhere.\n";
	0000d10e:LEA RAX,[0x32d50]
END_OF_LINE
----------------------------------------------
29: pcVar3 = "  Ignoring the trailing garbage.\ndone\n";
	0000d105:LEA RAX,[0x32d28]
END_OF_LINE
----------------------------------------------
31: say(pcVar3);
	0000d11d:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
33: if ((p_base == 0) && (p_filesize != 0)) {
	0000d129:TEST RAX,RAX
	0000d12c:JNZ 0x0000d14e
	0000d12e:MOV RAX,qword ptr [0x000404d8]
	0000d135:TEST RAX,RAX
	0000d138:JZ 0x0000d14e
END_OF_LINE
----------------------------------------------
35: fatal("Only garbage was found in the patch input.");
	0000d149:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
37: _Var2 = false;
	0000d14e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
39: else if (skip_rest_of_patch == false) {
	0000d162:TEST AL,AL
	0000d164:JZ 0x0000d1a0
END_OF_LINE
----------------------------------------------
40: if (verbosity == _IScntrl) {
	0000d1a9:CMP EAX,0x2
	0000d1ac:JNZ 0x0000d262
END_OF_LINE
----------------------------------------------
41: if (diff_type == UNI_DIFF) {
	0000d1bb:CMP EAX,0x5
	0000d1be:JZ 0x0000d225
END_OF_LINE
----------------------------------------------
42: pcVar3 = "a unified diff";
	0000d225:LEA RAX,[0x32e08]
END_OF_LINE
----------------------------------------------
44: else if (diff_type == CONTEXT_DIFF) {
	0000d1c9:CMP EAX,0x1
	0000d1cc:JZ 0x0000d21c
END_OF_LINE
----------------------------------------------
45: pcVar3 = "a context diff";
	0000d21c:LEA RAX,[0x32df9]
END_OF_LINE
----------------------------------------------
47: else if (diff_type == NEW_CONTEXT_DIFF) {
	0000d1d7:CMP EAX,0x4
	0000d1da:JZ 0x0000d213
END_OF_LINE
----------------------------------------------
48: pcVar3 = "a new-style context diff";
	0000d213:LEA RAX,[0x32de0]
END_OF_LINE
----------------------------------------------
50: else if (diff_type == NORMAL_DIFF) {
	0000d1e5:CMP EAX,0x2
	0000d1e8:JZ 0x0000d20a
END_OF_LINE
----------------------------------------------
51: pcVar3 = "a normal diff";
	0000d20a:LEA RAX,[0x32dd2]
END_OF_LINE
----------------------------------------------
53: else if (diff_type == GIT_BINARY_DIFF) {
	0000d1f3:CMP EAX,0x6
	0000d1f6:JNZ 0x0000d201
END_OF_LINE
----------------------------------------------
54: pcVar3 = "a git binary diff";
	0000d1f8:LEA RAX,[0x32db3]
END_OF_LINE
----------------------------------------------
57: pcVar3 = "an ed script";
	0000d201:LEA RAX,[0x32dc5]
END_OF_LINE
----------------------------------------------
59: if (p_base == 0) {
	0000d233:TEST RDX,RDX
	0000d236:JNZ 0x0000d241
END_OF_LINE
----------------------------------------------
60: pcVar6 = "L";
	0000d238:LEA RCX,[0x32e17]
END_OF_LINE
----------------------------------------------
63: pcVar6 = "The next patch l";
	0000d241:LEA RCX,[0x32e19]
END_OF_LINE
----------------------------------------------
65: say("  %sooks like %s to me...\n",pcVar6,pcVar3);
	0000d25d:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
67: if (no_strip_trailing_cr != false) {
	0000d26c:TEST AL,AL
	0000d26e:JZ 0x0000d277
END_OF_LINE
----------------------------------------------
68: p_strip_trailing_cr = false;
	0000d270:MOV byte ptr [0x00040540],0x0
END_OF_LINE
----------------------------------------------
70: if (verbosity != _ISblank) {
	0000d280:CMP EAX,0x1
	0000d283:JZ 0x0000d375
END_OF_LINE
----------------------------------------------
71: if (p_indent != 0) {
	0000d290:TEST RAX,RAX
	0000d293:JZ 0x0000d2d3
END_OF_LINE
----------------------------------------------
72: if (p_indent == 1) {
	0000d29c:CMP RAX,0x1
	0000d2a0:JNZ 0x0000d2ab
END_OF_LINE
----------------------------------------------
73: puVar4 = &DAT_00032ce1;
	0000d2a2:LEA RAX,[0x32ce1]
END_OF_LINE
----------------------------------------------
76: puVar4 = &DAT_00032e45;
	0000d2ab:LEA RAX,[0x32e45]
END_OF_LINE
----------------------------------------------
78: say("(Patch is indented %lu space%s.)\n",p_indent,puVar4);
	0000d2ce:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
80: if (p_strip_trailing_cr != false) {
	0000d2da:TEST AL,AL
	0000d2dc:JZ 0x0000d2f2
END_OF_LINE
----------------------------------------------
81: say("(Stripping trailing CRs from patch; use --binary to disable.)\n");
	0000d2ed:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
83: if (inname == (char *)0x0) {
	0000d2fc:TEST RAX,RAX
	0000d2ff:JNZ 0x0000d375
END_OF_LINE
----------------------------------------------
84: pcVar3 = format_linenum(numbuf,p_sline);
	0000d308:LEA RAX,[RBP + -0x30]
	0000d30c:MOV RSI,RDX
	0000d30f:MOV RDI,RAX
	0000d312:CALL 0x00018472
END_OF_LINE
----------------------------------------------
85: say("can\'t find file to patch at input line %s\n",pcVar3);
	0000d329:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
86: if ((diff_type != ED_DIFF) && (diff_type != NORMAL_DIFF)) {
	0000d337:CMP EAX,0x3
	0000d33a:JZ 0x0000d375
	0000d33c:LEA RAX,[0x3e374]
	0000d343:MOV EAX,dword ptr [RAX]
	0000d345:CMP EAX,0x2
	0000d348:JZ 0x0000d375
END_OF_LINE
----------------------------------------------
87: if (strippath == -1) {
	0000d353:CMP EAX,-0x1
	0000d356:JNZ 0x0000d361
END_OF_LINE
----------------------------------------------
88: pcVar3 = "Perhaps you should have used the -p or --strip option?\n";
	0000d358:LEA RAX,[0x32ee0]
END_OF_LINE
----------------------------------------------
91: pcVar3 = "Perhaps you used the wrong -p or --strip option?\n";
	0000d361:LEA RAX,[0x32f18]
END_OF_LINE
----------------------------------------------
93: say(pcVar3);
	0000d370:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
97: skip_to(p_start,p_sline);
	0000d389:CALL 0x0000fefa
END_OF_LINE
----------------------------------------------
100: if (inname != (char *)0x0) {
	0000d564:TEST RAX,RAX
	0000d567:JZ 0x0000d393
END_OF_LINE
----------------------------------------------
101: _Var2 = true;
	0000d56d:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
102: goto LAB_0000d572;
	0000d572:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
104: if ((batch | force) != 0) {
	0000d3a7:OR EAX,EDX
	0000d3a9:TEST AL,AL
	0000d3ab:JZ 0x0000d3d5
END_OF_LINE
----------------------------------------------
105: say("No file to patch.  Skipping patch.\n");
	0000d3bc:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
106: skip_rest_of_patch = true;
	0000d3c8:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
107: _Var2 = true;
	0000d3cb:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
108: goto LAB_0000d572;
	0000d572:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
110: ask("File to patch: ");
	0000d3e4:CALL 0x00018977
END_OF_LINE
----------------------------------------------
111: pcVar3 = buf;
	0000d3e4:CALL 0x00018977
END_OF_LINE
----------------------------------------------
112: sVar5 = strlen(buf);
	0000d400:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
113: pcVar3 = pcVar3 + sVar5;
	0000d405:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
114: if ((buf + 1 < pcVar3) && (pcVar3[-1] == '\n')) {
	0000d416:ADD RAX,0x1
	0000d41a:CMP qword ptr [RBP + -0x38],RAX
	0000d41e:JBE 0x0000d4f3
	0000d424:MOV RAX,qword ptr [RBP + -0x38]
	0000d428:SUB RAX,0x1
	0000d42c:MOVZX EAX,byte ptr [RAX]
	0000d42f:CMP AL,0xa
	0000d431:JNZ 0x0000d4f3
END_OF_LINE
----------------------------------------------
115: inname = xmemdup0(buf,(size_t)(pcVar3 + (-1 - (long)buf)));
	0000d448:SUB RAX,0x1
	0000d44c:MOV RDX,RAX
	0000d44f:LEA RAX,[0x3e240]
	0000d456:MOV RAX,qword ptr [RAX]
	0000d459:MOV RSI,RDX
	0000d45c:MOV RDI,RAX
	0000d45f:CALL 0x0002cd3c
END_OF_LINE
----------------------------------------------
116: inerrno = stat_file(inname,&instat);
	0000d485:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
117: if (inerrno == 0) {
	0000d49c:TEST EAX,EAX
	0000d49e:JZ 0x0000d4e6
END_OF_LINE
----------------------------------------------
118: invc = -1;
	0000d4ed:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
121: perror(inname);
	0000d4ad:CALL 0x00005f60
END_OF_LINE
----------------------------------------------
122: fflush(pFRam0000000000144490);
	0000d4bf:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
123: free(inname);
	0000d4d1:CALL 0x00005860
END_OF_LINE
----------------------------------------------
124: inname = (char *)0x0;
	0000d4dd:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
127: } while (inname != (char *)0x0);
	0000d4fd:TEST RAX,RAX
	0000d500:JNZ 0x0000d55a
END_OF_LINE
----------------------------------------------
128: ask("Skip this patch? [y] ");
	0000d511:CALL 0x00018977
END_OF_LINE
----------------------------------------------
129: } while (*buf == 'n');
	0000d520:MOVZX EAX,byte ptr [RAX]
	0000d523:CMP AL,0x6e
	0000d525:JZ 0x0000d55a
END_OF_LINE
----------------------------------------------
130: if (verbosity != _ISblank) {
	0000d530:CMP EAX,0x1
	0000d533:JZ 0x0000d549
END_OF_LINE
----------------------------------------------
131: say("Skipping patch.\n");
	0000d544:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
133: skip_rest_of_patch = true;
	0000d550:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
134: _Var2 = true;
	0000d553:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
137: Fseek(pfp,p_start,0);
	0000d17f:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
138: p_input_line = p_sline + -1;
	0000d18b:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
139: _Var2 = true;
	0000d196:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
143: if (verbosity == _IScntrl) {
	0000d07e:CMP EAX,0x2
	0000d081:JNZ 0x0000d097
END_OF_LINE
----------------------------------------------
144: say("done\n");
	0000d092:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
146: _Var2 = false;
	0000d097:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
148: LAB_0000d572:
	0000d572:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
149: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0000d576:SUB RDX,qword ptr FS:[0x28]
	0000d57f:JZ 0x0000d586
END_OF_LINE
----------------------------------------------
151: __stack_chk_fail();
	0000d581:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
153: return _Var2;
	0000d58b:RET
END_OF_LINE



Function: fetchmode
----------------------------------------------
10: str_local = str;
	0000d59c:JMP 0x0000d5a3
END_OF_LINE
----------------------------------------------
11: while( true ) {
	0000d5c8:JNZ 0x0000d59e
END_OF_LINE
----------------------------------------------
12: ppuVar1 = __ctype_b_loc();
	0000d5a3:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
13: if (((*ppuVar1)[(byte)*str_local] & 0x2000) == 0) break;
	0000d5a8:MOV RDX,qword ptr [RAX]
	0000d5ab:MOV RAX,qword ptr [RBP + -0x18]
	0000d5af:MOVZX EAX,byte ptr [RAX]
	0000d5b2:MOVZX EAX,AL
	0000d5b5:ADD RAX,RAX
	0000d5b8:ADD RAX,RDX
	0000d5bb:MOVZX EAX,word ptr [RAX]
	0000d5be:MOVZX EAX,AX
	0000d5c1:AND EAX,0x2000
	0000d5c6:TEST EAX,EAX
	0000d5c8:JNZ 0x0000d59e
END_OF_LINE
----------------------------------------------
14: str_local = str_local + 1;
	0000d59e:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
16: s = str_local;
	0000d5ce:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
17: mode = 0;
	0000d5d2:MOV dword ptr [RBP + -0xc],0x0
END_OF_LINE
----------------------------------------------
19: if (str_local + 6 <= s) {
	0000d621:ADD RAX,0x6
	0000d625:CMP qword ptr [RBP + -0x8],RAX
	0000d629:JC 0x0000d5db
END_OF_LINE
----------------------------------------------
20: LAB_0000d62b:
	0000d62b:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
21: if (*s == '\r') {
	0000d62f:MOVZX EAX,byte ptr [RAX]
	0000d632:CMP AL,0xd
	0000d634:JNZ 0x0000d63b
END_OF_LINE
----------------------------------------------
22: s = s + 1;
	0000d636:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
24: if (*s != '\n') {
	0000d63f:MOVZX EAX,byte ptr [RAX]
	0000d642:CMP AL,0xa
	0000d644:JZ 0x0000d64d
END_OF_LINE
----------------------------------------------
25: mode = 0;
	0000d646:MOV dword ptr [RBP + -0xc],0x0
END_OF_LINE
----------------------------------------------
27: return mode;
	0000d651:RET
END_OF_LINE
----------------------------------------------
29: if ((*s < '0') || ('7' < *s)) {
	0000d5df:MOVZX EAX,byte ptr [RAX]
	0000d5e2:CMP AL,0x2f
	0000d5e4:JLE 0x0000d614
	0000d5e6:MOV RAX,qword ptr [RBP + -0x8]
	0000d5ea:MOVZX EAX,byte ptr [RAX]
	0000d5ed:CMP AL,0x37
	0000d5ef:JG 0x0000d614
END_OF_LINE
----------------------------------------------
30: mode = 0;
	0000d614:MOV dword ptr [RBP + -0xc],0x0
END_OF_LINE
----------------------------------------------
31: goto LAB_0000d62b;
	0000d62b:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
33: mode = ((int)*s + mode * 8) - 0x30;
	0000d5f4:LEA EDX,[RAX*0x8]
	0000d5fb:MOV RAX,qword ptr [RBP + -0x8]
	0000d5ff:MOVZX EAX,byte ptr [RAX]
	0000d602:MOVSX EAX,AL
	0000d605:ADD EAX,EDX
	0000d607:SUB EAX,0x30
END_OF_LINE
----------------------------------------------
34: s = s + 1;
	0000d60d:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
35: } while( true );
	0000d612:JMP 0x0000d61d
END_OF_LINE



Function: get_sha1
----------------------------------------------
12: uVar1 = (int)end - (int)start;
	0000d66e:SUB RAX,qword ptr [RBP + -0x20]
	0000d672:MOV dword ptr [RBP + -0x4],EAX
END_OF_LINE
----------------------------------------------
13: pcVar2 = (char *)xmalloc((ulong)(uVar1 + 1));
	0000d678:ADD EAX,0x1
	0000d67b:MOV EAX,EAX
	0000d67d:MOV RDI,RAX
	0000d680:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
14: *sha1 = pcVar2;
	0000d68c:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
15: memcpy(*sha1,start,(ulong)uVar1);
	0000d68f:MOV EDX,dword ptr [RBP + -0x4]
	0000d692:MOV RAX,qword ptr [RBP + -0x18]
	0000d696:MOV RAX,qword ptr [RAX]
	0000d699:MOV RCX,qword ptr [RBP + -0x20]
	0000d69d:MOV RSI,RCX
	0000d6a0:MOV RDI,RAX
	0000d6a3:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
16: (*sha1)[uVar1] = '\0';
	0000d6ac:MOV RDX,qword ptr [RAX]
	0000d6af:MOV EAX,dword ptr [RBP + -0x4]
	0000d6b2:ADD RAX,RDX
	0000d6b5:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
17: return;
	0000d6ba:RET
END_OF_LINE



Function: sha1_says_nonexistent
----------------------------------------------
11: empty_sha1 = "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391";
	0000d6ce:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
12: for (s = sha1; (*s != '\0' && (*s == '0')); s = s + 1) {
	0000d6da:JMP 0x0000d6ec
	0000d6dc:MOV RAX,qword ptr [RBP + -0x8]
	0000d6e0:MOVZX EAX,byte ptr [RAX]
	0000d6e3:CMP AL,0x30
	0000d6e5:JNZ 0x0000d6f9
	0000d6e7:ADD qword ptr [RBP + -0x8],0x1
	0000d6ec:MOV RAX,qword ptr [RBP + -0x8]
	0000d6f0:MOVZX EAX,byte ptr [RAX]
	0000d6f3:TEST AL,AL
END_OF_LINE
----------------------------------------------
14: cVar1 = *s;
	0000d6fe:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
15: s = sha1;
	0000d703:JNZ 0x0000d70c
END_OF_LINE
----------------------------------------------
16: if (cVar1 == '\0') {
	0000d701:TEST AL,AL
	0000d703:JNZ 0x0000d70c
END_OF_LINE
----------------------------------------------
17: uVar2 = 2;
	0000d705:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
20: for (; (*s != '\0' && (*s == *empty_sha1)); s = s + 1) {
	0000d71a:MOVZX EDX,byte ptr [RAX]
	0000d71d:MOV RAX,qword ptr [RBP + -0x10]
	0000d721:MOVZX EAX,byte ptr [RAX]
	0000d724:CMP DL,AL
	0000d726:JNZ 0x0000d73f
	0000d728:ADD qword ptr [RBP + -0x8],0x1
	0000d72d:ADD qword ptr [RBP + -0x10],0x1
	0000d732:MOV RAX,qword ptr [RBP + -0x8]
	0000d736:MOVZX EAX,byte ptr [RAX]
	0000d739:TEST AL,AL
END_OF_LINE
----------------------------------------------
21: empty_sha1 = empty_sha1 + 1;
	0000d72d:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
23: uVar2 = (uint)(*s == '\0');
	0000d744:MOVZX EAX,byte ptr [RAX]
	0000d747:TEST AL,AL
	0000d749:SETZ AL
	0000d74c:MOVZX EAX,AL
END_OF_LINE
----------------------------------------------
25: return uVar2;
	0000d750:RET
END_OF_LINE



Function: skip_hex_digits
----------------------------------------------
8: for (s = str; (('/' < *s && (*s < ':')) || (('`' < *s && (*s < 'g')))); s = s + 1) {
	0000d765:JMP 0x0000d76c
	0000d767:ADD qword ptr [RBP + -0x8],0x1
	0000d76c:MOV RAX,qword ptr [RBP + -0x8]
	0000d770:MOVZX EAX,byte ptr [RAX]
	0000d773:CMP AL,0x2f
	0000d775:JLE 0x0000d782
	0000d777:MOV RAX,qword ptr [RBP + -0x8]
	0000d77b:MOVZX EAX,byte ptr [RAX]
	0000d77e:CMP AL,0x39
	0000d780:JLE 0x0000d767
	0000d782:MOV RAX,qword ptr [RBP + -0x8]
	0000d786:MOVZX EAX,byte ptr [RAX]
	0000d789:CMP AL,0x60
	0000d78b:JLE 0x0000d798
	0000d78d:MOV RAX,qword ptr [RBP + -0x8]
	0000d791:MOVZX EAX,byte ptr [RAX]
	0000d794:CMP AL,0x66
	0000d796:JLE 0x0000d767
END_OF_LINE
----------------------------------------------
10: if (s == str) {
	0000d79c:CMP RAX,qword ptr [RBP + -0x18]
	0000d7a0:JZ 0x0000d7a8
END_OF_LINE
----------------------------------------------
11: s = (char *)0x0;
	0000d7a8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: return s;
	0000d7ae:RET
END_OF_LINE



Function: name_is_valid
----------------------------------------------
12: for (i = 0; ((uint)i < 2 && (invalid_names[i] != (char *)0x0)); i = i + 1) {
	0000d7c3:MOV dword ptr [RBP + -0x4],0x0
	0000d7ca:JMP 0x0000d822
	0000d7cc:MOV EAX,dword ptr [RBP + -0x4]
	0000d7cf:CDQE
	0000d7d1:LEA RDX,[RAX*0x8]
	0000d7d9:LEA RAX,[0x404a0]
	0000d7e0:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d7e4:TEST RAX,RAX
	0000d7e7:JZ 0x0000d82c
	0000d7e9:MOV EAX,dword ptr [RBP + -0x4]
	0000d7ec:CDQE
	0000d7ee:LEA RDX,[RAX*0x8]
	0000d7f6:LEA RAX,[0x404a0]
	0000d7fd:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d801:MOV RDX,qword ptr [RBP + -0x18]
	0000d805:MOV RSI,RDX
	0000d808:MOV RDI,RAX
	0000d80b:CALL 0x00005ce0
	0000d810:TEST EAX,EAX
	0000d812:JNZ 0x0000d81e
	0000d814:MOV EAX,0x0
	0000d819:JMP 0x0000d8b1
	0000d81e:ADD dword ptr [RBP + -0x4],0x1
	0000d822:MOV EAX,dword ptr [RBP + -0x4]
	0000d825:CMP EAX,0x1
	0000d828:JBE 0x0000d7cc
END_OF_LINE
----------------------------------------------
13: iVar2 = strcmp(invalid_names[i],name);
	0000d7ec:CDQE
	0000d7ee:LEA RDX,[RAX*0x8]
	0000d7f6:LEA RAX,[0x404a0]
	0000d7fd:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d801:MOV RDX,qword ptr [RBP + -0x18]
	0000d805:MOV RSI,RDX
	0000d808:MOV RDI,RAX
	0000d80b:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
14: if (iVar2 == 0) {
	0000d810:TEST EAX,EAX
	0000d812:JNZ 0x0000d81e
END_OF_LINE
----------------------------------------------
15: return false;
	0000d8b2:RET
END_OF_LINE
----------------------------------------------
18: is_valid = filename_is_safe(name);
	0000d834:CALL 0x00019fcc
END_OF_LINE
----------------------------------------------
19: if ((!is_valid) && (_Var1 = cwd_is_root(name), _Var1)) {
	0000d845:JZ 0x0000d85b
	0000d847:MOV RAX,qword ptr [RBP + -0x18]
	0000d84b:MOV RDI,RAX
	0000d84e:CALL 0x0001a066
	0000d853:TEST AL,AL
	0000d855:JZ 0x0000d85b
END_OF_LINE
----------------------------------------------
20: is_valid = true;
	0000d857:MOV byte ptr [RBP + -0x5],0x1
END_OF_LINE
----------------------------------------------
22: if (is_valid != true) {
	0000d862:TEST AL,AL
	0000d864:JZ 0x0000d8ad
END_OF_LINE
----------------------------------------------
23: pcVar3 = quotearg(name);
	0000d86d:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
24: say("Ignoring potentially dangerous file name %s\n",pcVar3);
	0000d884:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
25: if ((uint)i < 2) {
	0000d88f:JA 0x0000d8ad
END_OF_LINE
----------------------------------------------
26: invalid_names[i] = name;
	0000d894:CDQE
	0000d896:LEA RCX,[RAX*0x8]
	0000d89e:LEA RDX,[0x404a0]
	0000d8a5:MOV RAX,qword ptr [RBP + -0x18]
	0000d8a9:MOV qword ptr [RCX + RDX*0x1],RAX
END_OF_LINE
----------------------------------------------
29: return is_valid;
	0000d8b2:RET
END_OF_LINE



Function: intuit_diff_type
----------------------------------------------
78: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000d8d2:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
79: this_line = 0;
	0000d8e1:MOV qword ptr [RBP + -0x298],0x0
END_OF_LINE
----------------------------------------------
80: first_command_line = -1;
	0000d8ec:MOV qword ptr [RBP + -0x290],-0x1
END_OF_LINE
----------------------------------------------
81: first_ed_command_letter = '\0';
	0000d8f7:MOV byte ptr [RBP + -0x2c6],0x0
END_OF_LINE
----------------------------------------------
82: fcl_line = 0;
	0000d8fe:MOV qword ptr [RBP + -0x288],0x0
END_OF_LINE
----------------------------------------------
83: bVar7 = false;
	0000d917:MOV byte ptr [RBP + -0x2c3],0x0
END_OF_LINE
----------------------------------------------
84: indent = 0;
	0000d91e:MOV qword ptr [RBP + -0x280],0x0
END_OF_LINE
----------------------------------------------
85: for (i = OLD; i < NONE; i = i + NEW) {
	0000d929:MOV dword ptr [RBP + -0x2bc],0x0
	0000d933:JMP 0x0000d998
	0000d935:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d93b:LEA RDX,[RAX*0x8]
	0000d943:LEA RAX,[0x40480]
	0000d94a:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d94e:TEST RAX,RAX
	0000d951:JZ 0x0000d991
	0000d953:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d959:LEA RDX,[RAX*0x8]
	0000d961:LEA RAX,[0x40480]
	0000d968:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d96c:MOV RDI,RAX
	0000d96f:CALL 0x00005860
	0000d974:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d97a:LEA RDX,[RAX*0x8]
	0000d982:LEA RAX,[0x40480]
	0000d989:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d991:ADD dword ptr [RBP + -0x2bc],0x1
	0000d998:CMP dword ptr [RBP + -0x2bc],0x2
	0000d99f:JBE 0x0000d935
END_OF_LINE
----------------------------------------------
86: if (p_name[i] != (char *)0x0) {
	0000d935:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d93b:LEA RDX,[RAX*0x8]
	0000d943:LEA RAX,[0x40480]
	0000d94a:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d94e:TEST RAX,RAX
	0000d951:JZ 0x0000d991
END_OF_LINE
----------------------------------------------
87: free(p_name[i]);
	0000d953:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d959:LEA RDX,[RAX*0x8]
	0000d961:LEA RAX,[0x40480]
	0000d968:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d96c:MOV RDI,RAX
	0000d96f:CALL 0x00005860
END_OF_LINE
----------------------------------------------
88: p_name[i] = (char *)0x0;
	0000d974:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d97a:LEA RDX,[RAX*0x8]
	0000d982:LEA RAX,[0x40480]
	0000d989:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
91: for (i = OLD; i < INDEX; i = i + NEW) {
	0000d9a1:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9ab:JMP 0x0000d9d1
	0000d9ad:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9b3:LEA RDX,[RAX*0x8]
	0000d9bb:LEA RAX,[0x404a0]
	0000d9c2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d9ca:ADD dword ptr [RBP + -0x2bc],0x1
	0000d9d1:CMP dword ptr [RBP + -0x2bc],0x1
	0000d9d8:JBE 0x0000d9ad
END_OF_LINE
----------------------------------------------
92: invalid_names[i] = (char *)0x0;
	0000d9ad:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9b3:LEA RDX,[RAX*0x8]
	0000d9bb:LEA RAX,[0x404a0]
	0000d9c2:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
94: for (i = OLD; i < INDEX; i = i + NEW) {
	0000d9da:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9e4:JMP 0x0000da49
	0000d9e6:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9ec:LEA RDX,[RAX*0x8]
	0000d9f4:LEA RAX,[0x404b0]
	0000d9fb:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d9ff:TEST RAX,RAX
	0000da02:JZ 0x0000da42
	0000da04:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da0a:LEA RDX,[RAX*0x8]
	0000da12:LEA RAX,[0x404b0]
	0000da19:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da1d:MOV RDI,RAX
	0000da20:CALL 0x00005860
	0000da25:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da2b:LEA RDX,[RAX*0x8]
	0000da33:LEA RAX,[0x404b0]
	0000da3a:MOV qword ptr [RDX + RAX*0x1],0x0
	0000da42:ADD dword ptr [RBP + -0x2bc],0x1
	0000da49:CMP dword ptr [RBP + -0x2bc],0x1
	0000da50:JBE 0x0000d9e6
END_OF_LINE
----------------------------------------------
95: if (p_timestr[i] != (char *)0x0) {
	0000d9e6:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9ec:LEA RDX,[RAX*0x8]
	0000d9f4:LEA RAX,[0x404b0]
	0000d9fb:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d9ff:TEST RAX,RAX
	0000da02:JZ 0x0000da42
END_OF_LINE
----------------------------------------------
96: free(p_timestr[i]);
	0000da04:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da0a:LEA RDX,[RAX*0x8]
	0000da12:LEA RAX,[0x404b0]
	0000da19:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da1d:MOV RDI,RAX
	0000da20:CALL 0x00005860
END_OF_LINE
----------------------------------------------
97: p_timestr[i] = (char *)0x0;
	0000da25:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da2b:LEA RDX,[RAX*0x8]
	0000da33:LEA RAX,[0x404b0]
	0000da3a:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
100: for (i = OLD; i < INDEX; i = i + NEW) {
	0000da52:MOV dword ptr [RBP + -0x2bc],0x0
	0000da5c:JMP 0x0000dac1
	0000da5e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da64:LEA RDX,[RAX*0x8]
	0000da6c:LEA RAX,[0x404c0]
	0000da73:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da77:TEST RAX,RAX
	0000da7a:JZ 0x0000daba
	0000da7c:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da82:LEA RDX,[RAX*0x8]
	0000da8a:LEA RAX,[0x404c0]
	0000da91:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da95:MOV RDI,RAX
	0000da98:CALL 0x00005860
	0000da9d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000daa3:LEA RDX,[RAX*0x8]
	0000daab:LEA RAX,[0x404c0]
	0000dab2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000daba:ADD dword ptr [RBP + -0x2bc],0x1
	0000dac1:CMP dword ptr [RBP + -0x2bc],0x1
	0000dac8:JBE 0x0000da5e
END_OF_LINE
----------------------------------------------
101: if (p_sha1[i] != (char *)0x0) {
	0000da5e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da64:LEA RDX,[RAX*0x8]
	0000da6c:LEA RAX,[0x404c0]
	0000da73:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da77:TEST RAX,RAX
	0000da7a:JZ 0x0000daba
END_OF_LINE
----------------------------------------------
102: free(p_sha1[i]);
	0000da7c:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da82:LEA RDX,[RAX*0x8]
	0000da8a:LEA RAX,[0x404c0]
	0000da91:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da95:MOV RDI,RAX
	0000da98:CALL 0x00005860
END_OF_LINE
----------------------------------------------
103: p_sha1[i] = (char *)0x0;
	0000da9d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000daa3:LEA RDX,[RAX*0x8]
	0000daab:LEA RAX,[0x404c0]
	0000dab2:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
106: p_git_diff = false;
	0000daca:MOV byte ptr [0x00040578],0x0
END_OF_LINE
----------------------------------------------
107: for (i = OLD; i < INDEX; i = i + NEW) {
	0000dad1:MOV dword ptr [RBP + -0x2bc],0x0
	0000dadb:JMP 0x0000db22
	0000dadd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000dae3:LEA RDX,[RAX*0x4]
	0000daeb:LEA RAX,[0x404d0]
	0000daf2:MOV dword ptr [RDX + RAX*0x1],0x0
	0000daf9:LEA RDX,[0x40460]
	0000db00:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db06:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db0a:LEA RDX,[0x40462]
	0000db11:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db17:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db1b:ADD dword ptr [RBP + -0x2bc],0x1
	0000db22:CMP dword ptr [RBP + -0x2bc],0x1
	0000db29:JBE 0x0000dadd
END_OF_LINE
----------------------------------------------
108: p_mode[i] = 0;
	0000dadd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000dae3:LEA RDX,[RAX*0x4]
	0000daeb:LEA RAX,[0x404d0]
	0000daf2:MOV dword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
109: p_copy[i] = false;
	0000db00:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db06:MOV byte ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
110: p_rename[i] = false;
	0000db11:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db17:MOV byte ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
112: if ((diff_type == ED_DIFF) || (need_header_local = need_header, diff_type == NORMAL_DIFF)) {
	0000db34:CMP EAX,0x3
	0000db37:JZ 0x0000db47
	0000db39:LEA RAX,[0x3e374]
	0000db40:MOV EAX,dword ptr [RAX]
	0000db42:CMP EAX,0x2
	0000db45:JNZ 0x0000db4e
END_OF_LINE
----------------------------------------------
113: need_header_local = false;
	0000db47:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
115: version_controlled[0] = -1;
	0000db4e:MOV dword ptr [RBP + -0x204],0xffffffff
END_OF_LINE
----------------------------------------------
116: version_controlled[1] = -1;
	0000db58:MOV dword ptr [RBP + -0x200],0xffffffff
END_OF_LINE
----------------------------------------------
117: version_controlled[2] = -1;
	0000db62:MOV dword ptr [RBP + -0x1fc],0xffffffff
END_OF_LINE
----------------------------------------------
118: p_rfc934_nesting = 0;
	0000db6c:MOV dword ptr [0x00040478],0x0
END_OF_LINE
----------------------------------------------
119: p_timestamp[1].tv_sec = -1;
	0000db7d:MOV qword ptr [RAX + 0x10],-0x1
END_OF_LINE
----------------------------------------------
120: p_timestamp[0].tv_sec = -1;
	0000db97:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
121: p_says_nonexistent[1] = 0;
	0000db9a:MOV dword ptr [0x00040474],0x0
END_OF_LINE
----------------------------------------------
122: p_says_nonexistent[0] = 0;
	0000dbaa:MOV dword ptr [0x00040470],EAX
END_OF_LINE
----------------------------------------------
123: Fseek(pfp,p_base,0);
	0000dbc9:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
124: p_input_line = p_bline + -1;
	0000dbd5:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
125: bVar24 = false;
	0000d909:MOV byte ptr [RBP + -0x2c5],0x0
	0000d910:MOV byte ptr [RBP + -0x2c4],0x0
	0000d917:MOV byte ptr [RBP + -0x2c3],0x0
	0000d91e:MOV qword ptr [RBP + -0x280],0x0
	0000d929:MOV dword ptr [RBP + -0x2bc],0x0
	0000d933:JMP 0x0000d998
	0000d935:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d93b:LEA RDX,[RAX*0x8]
	0000d943:LEA RAX,[0x40480]
	0000d94a:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d94e:TEST RAX,RAX
	0000d951:JZ 0x0000d991
	0000d953:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d959:LEA RDX,[RAX*0x8]
	0000d961:LEA RAX,[0x40480]
	0000d968:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d96c:MOV RDI,RAX
	0000d96f:CALL 0x00005860
	0000d974:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d97a:LEA RDX,[RAX*0x8]
	0000d982:LEA RAX,[0x40480]
	0000d989:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d991:ADD dword ptr [RBP + -0x2bc],0x1
	0000d998:CMP dword ptr [RBP + -0x2bc],0x2
	0000d99f:JBE 0x0000d935
	0000d9a1:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9ab:JMP 0x0000d9d1
	0000d9ad:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9b3:LEA RDX,[RAX*0x8]
	0000d9bb:LEA RAX,[0x404a0]
	0000d9c2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d9ca:ADD dword ptr [RBP + -0x2bc],0x1
	0000d9d1:CMP dword ptr [RBP + -0x2bc],0x1
	0000d9d8:JBE 0x0000d9ad
	0000d9da:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9e4:JMP 0x0000da49
	0000d9e6:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9ec:LEA RDX,[RAX*0x8]
	0000d9f4:LEA RAX,[0x404b0]
	0000d9fb:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d9ff:TEST RAX,RAX
	0000da02:JZ 0x0000da42
	0000da04:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da0a:LEA RDX,[RAX*0x8]
	0000da12:LEA RAX,[0x404b0]
	0000da19:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da1d:MOV RDI,RAX
	0000da20:CALL 0x00005860
	0000da25:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da2b:LEA RDX,[RAX*0x8]
	0000da33:LEA RAX,[0x404b0]
	0000da3a:MOV qword ptr [RDX + RAX*0x1],0x0
	0000da42:ADD dword ptr [RBP + -0x2bc],0x1
	0000da49:CMP dword ptr [RBP + -0x2bc],0x1
	0000da50:JBE 0x0000d9e6
	0000da52:MOV dword ptr [RBP + -0x2bc],0x0
	0000da5c:JMP 0x0000dac1
	0000da5e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da64:LEA RDX,[RAX*0x8]
	0000da6c:LEA RAX,[0x404c0]
	0000da73:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da77:TEST RAX,RAX
	0000da7a:JZ 0x0000daba
	0000da7c:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da82:LEA RDX,[RAX*0x8]
	0000da8a:LEA RAX,[0x404c0]
	0000da91:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da95:MOV RDI,RAX
	0000da98:CALL 0x00005860
	0000da9d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000daa3:LEA RDX,[RAX*0x8]
	0000daab:LEA RAX,[0x404c0]
	0000dab2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000daba:ADD dword ptr [RBP + -0x2bc],0x1
	0000dac1:CMP dword ptr [RBP + -0x2bc],0x1
	0000dac8:JBE 0x0000da5e
	0000daca:MOV byte ptr [0x00040578],0x0
	0000dad1:MOV dword ptr [RBP + -0x2bc],0x0
	0000dadb:JMP 0x0000db22
	0000dadd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000dae3:LEA RDX,[RAX*0x4]
	0000daeb:LEA RAX,[0x404d0]
	0000daf2:MOV dword ptr [RDX + RAX*0x1],0x0
	0000daf9:LEA RDX,[0x40460]
	0000db00:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db06:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db0a:LEA RDX,[0x40462]
	0000db11:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db17:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db1b:ADD dword ptr [RBP + -0x2bc],0x1
	0000db22:CMP dword ptr [RBP + -0x2bc],0x1
	0000db29:JBE 0x0000dadd
	0000db2b:LEA RAX,[0x3e374]
	0000db32:MOV EAX,dword ptr [RAX]
	0000db34:CMP EAX,0x3
	0000db37:JZ 0x0000db47
	0000db39:LEA RAX,[0x3e374]
	0000db40:MOV EAX,dword ptr [RAX]
	0000db42:CMP EAX,0x2
	0000db45:JNZ 0x0000db4e
	0000db47:MOV byte ptr [RBP + -0x2d4],0x0
	0000db4e:MOV dword ptr [RBP + -0x204],0xffffffff
	0000db58:MOV dword ptr [RBP + -0x200],0xffffffff
	0000db62:MOV dword ptr [RBP + -0x1fc],0xffffffff
	0000db6c:MOV dword ptr [0x00040478],0x0
	0000db76:LEA RAX,[0x40440]
	0000db7d:MOV qword ptr [RAX + 0x10],-0x1
	0000db85:LEA RAX,[0x40440]
	0000db8c:MOV RDX,qword ptr [RAX + 0x10]
	0000db90:LEA RAX,[0x40440]
	0000db97:MOV qword ptr [RAX],RDX
	0000db9a:MOV dword ptr [0x00040474],0x0
	0000dba4:MOV EAX,dword ptr [0x00040474]
	0000dbaa:MOV dword ptr [0x00040470],EAX
	0000dbb0:MOV RCX,qword ptr [0x00040548]
	0000dbb7:MOV RAX,qword ptr [0x00040468]
	0000dbbe:MOV EDX,0x0
	0000dbc3:MOV RSI,RCX
	0000dbc6:MOV RDI,RAX
	0000dbc9:CALL 0x00019ceb
	0000dbce:MOV RAX,qword ptr [0x00040550]
	0000dbd5:SUB RAX,0x1
	0000dbd9:MOV qword ptr [0x00040518],RAX
END_OF_LINE
----------------------------------------------
126: bVar9 = false;
	0000d910:MOV byte ptr [RBP + -0x2c4],0x0
	0000d917:MOV byte ptr [RBP + -0x2c3],0x0
	0000d91e:MOV qword ptr [RBP + -0x280],0x0
	0000d929:MOV dword ptr [RBP + -0x2bc],0x0
	0000d933:JMP 0x0000d998
	0000d935:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d93b:LEA RDX,[RAX*0x8]
	0000d943:LEA RAX,[0x40480]
	0000d94a:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d94e:TEST RAX,RAX
	0000d951:JZ 0x0000d991
	0000d953:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d959:LEA RDX,[RAX*0x8]
	0000d961:LEA RAX,[0x40480]
	0000d968:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d96c:MOV RDI,RAX
	0000d96f:CALL 0x00005860
	0000d974:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d97a:LEA RDX,[RAX*0x8]
	0000d982:LEA RAX,[0x40480]
	0000d989:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d991:ADD dword ptr [RBP + -0x2bc],0x1
	0000d998:CMP dword ptr [RBP + -0x2bc],0x2
	0000d99f:JBE 0x0000d935
	0000d9a1:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9ab:JMP 0x0000d9d1
	0000d9ad:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9b3:LEA RDX,[RAX*0x8]
	0000d9bb:LEA RAX,[0x404a0]
	0000d9c2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000d9ca:ADD dword ptr [RBP + -0x2bc],0x1
	0000d9d1:CMP dword ptr [RBP + -0x2bc],0x1
	0000d9d8:JBE 0x0000d9ad
	0000d9da:MOV dword ptr [RBP + -0x2bc],0x0
	0000d9e4:JMP 0x0000da49
	0000d9e6:MOV EAX,dword ptr [RBP + -0x2bc]
	0000d9ec:LEA RDX,[RAX*0x8]
	0000d9f4:LEA RAX,[0x404b0]
	0000d9fb:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000d9ff:TEST RAX,RAX
	0000da02:JZ 0x0000da42
	0000da04:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da0a:LEA RDX,[RAX*0x8]
	0000da12:LEA RAX,[0x404b0]
	0000da19:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da1d:MOV RDI,RAX
	0000da20:CALL 0x00005860
	0000da25:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da2b:LEA RDX,[RAX*0x8]
	0000da33:LEA RAX,[0x404b0]
	0000da3a:MOV qword ptr [RDX + RAX*0x1],0x0
	0000da42:ADD dword ptr [RBP + -0x2bc],0x1
	0000da49:CMP dword ptr [RBP + -0x2bc],0x1
	0000da50:JBE 0x0000d9e6
	0000da52:MOV dword ptr [RBP + -0x2bc],0x0
	0000da5c:JMP 0x0000dac1
	0000da5e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da64:LEA RDX,[RAX*0x8]
	0000da6c:LEA RAX,[0x404c0]
	0000da73:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da77:TEST RAX,RAX
	0000da7a:JZ 0x0000daba
	0000da7c:MOV EAX,dword ptr [RBP + -0x2bc]
	0000da82:LEA RDX,[RAX*0x8]
	0000da8a:LEA RAX,[0x404c0]
	0000da91:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000da95:MOV RDI,RAX
	0000da98:CALL 0x00005860
	0000da9d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000daa3:LEA RDX,[RAX*0x8]
	0000daab:LEA RAX,[0x404c0]
	0000dab2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000daba:ADD dword ptr [RBP + -0x2bc],0x1
	0000dac1:CMP dword ptr [RBP + -0x2bc],0x1
	0000dac8:JBE 0x0000da5e
	0000daca:MOV byte ptr [0x00040578],0x0
	0000dad1:MOV dword ptr [RBP + -0x2bc],0x0
	0000dadb:JMP 0x0000db22
	0000dadd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000dae3:LEA RDX,[RAX*0x4]
	0000daeb:LEA RAX,[0x404d0]
	0000daf2:MOV dword ptr [RDX + RAX*0x1],0x0
	0000daf9:LEA RDX,[0x40460]
	0000db00:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db06:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db0a:LEA RDX,[0x40462]
	0000db11:MOV EAX,dword ptr [RBP + -0x2bc]
	0000db17:MOV byte ptr [RDX + RAX*0x1],0x0
	0000db1b:ADD dword ptr [RBP + -0x2bc],0x1
	0000db22:CMP dword ptr [RBP + -0x2bc],0x1
	0000db29:JBE 0x0000dadd
	0000db2b:LEA RAX,[0x3e374]
	0000db32:MOV EAX,dword ptr [RAX]
	0000db34:CMP EAX,0x3
	0000db37:JZ 0x0000db47
	0000db39:LEA RAX,[0x3e374]
	0000db40:MOV EAX,dword ptr [RAX]
	0000db42:CMP EAX,0x2
	0000db45:JNZ 0x0000db4e
	0000db47:MOV byte ptr [RBP + -0x2d4],0x0
	0000db4e:MOV dword ptr [RBP + -0x204],0xffffffff
	0000db58:MOV dword ptr [RBP + -0x200],0xffffffff
	0000db62:MOV dword ptr [RBP + -0x1fc],0xffffffff
	0000db6c:MOV dword ptr [0x00040478],0x0
	0000db76:LEA RAX,[0x40440]
	0000db7d:MOV qword ptr [RAX + 0x10],-0x1
	0000db85:LEA RAX,[0x40440]
	0000db8c:MOV RDX,qword ptr [RAX + 0x10]
	0000db90:LEA RAX,[0x40440]
	0000db97:MOV qword ptr [RAX],RDX
	0000db9a:MOV dword ptr [0x00040474],0x0
	0000dba4:MOV EAX,dword ptr [0x00040474]
	0000dbaa:MOV dword ptr [0x00040470],EAX
	0000dbb0:MOV RCX,qword ptr [0x00040548]
	0000dbb7:MOV RAX,qword ptr [0x00040468]
	0000dbbe:MOV EDX,0x0
	0000dbc3:MOV RSI,RCX
	0000dbc6:MOV RDI,RAX
	0000dbc9:CALL 0x00019ceb
	0000dbce:MOV RAX,qword ptr [0x00040550]
	0000dbd5:SUB RAX,0x1
	0000dbd9:MOV qword ptr [0x00040518],RAX
END_OF_LINE
----------------------------------------------
127: LAB_0000dbe0:
	0000dbe0:MOV RAX,qword ptr [RBP + -0x298]
END_OF_LINE
----------------------------------------------
128: bVar8 = bVar24;
	0000dbe0:MOV RAX,qword ptr [RBP + -0x298]
END_OF_LINE
----------------------------------------------
129: previous_line = this_line;
	0000dbe7:MOV qword ptr [RBP + -0x260],RAX
END_OF_LINE
----------------------------------------------
130: indent_last_line = indent;
	0000dc0f:MOV qword ptr [RBP + -0x258],RAX
END_OF_LINE
----------------------------------------------
131: indent = 0;
	0000dc16:MOV qword ptr [RBP + -0x280],0x0
END_OF_LINE
----------------------------------------------
132: this_line = ftell((FILE *)pfp);
	0000dc2b:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
133: chars_read = pget_line(0,0,false,false);
	0000dc4b:CALL 0x00013323
END_OF_LINE
----------------------------------------------
134: if (chars_read == 0xffffffffffffffff) {
	0000dc57:CMP qword ptr [RBP + -0x250],-0x1
	0000dc5f:JNZ 0x0000dc66
END_OF_LINE
----------------------------------------------
136: xalloc_die();
	0000dc61:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
138: if (chars_read == 0) {
	0000dc66:CMP qword ptr [RBP + -0x250],0x0
	0000dc6e:JNZ 0x0000dce2
END_OF_LINE
----------------------------------------------
139: if (first_ed_command_letter != '\0') {
	0000dc70:CMP byte ptr [RBP + -0x2c6],0x0
	0000dc77:JZ 0x0000dca4
END_OF_LINE
----------------------------------------------
140: p_start = first_command_line;
	0000dc80:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
141: p_sline = fcl_line;
	0000dc8e:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
142: retval = ED_DIFF;
	0000dc95:MOV dword ptr [RBP + -0x2b8],0x3
END_OF_LINE
----------------------------------------------
143: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
145: p_start = this_line;
	0000dcab:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
146: p_sline = p_input_line;
	0000dcb9:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
147: if (!bVar7) {
	0000dcc7:JZ 0x0000dcd8
END_OF_LINE
----------------------------------------------
148: retval = NO_DIFF;
	0000dcd8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
149: goto LAB_0000fba4;
	0000fba4:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
151: retval = UNI_DIFF;
	0000dcc9:MOV dword ptr [RBP + -0x2b8],0x5
END_OF_LINE
----------------------------------------------
152: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
154: if ((chars_read < 2) || (buf[chars_read - 2] != '\r')) {
	0000dcea:JBE 0x0000dd12
	0000dcec:LEA RAX,[0x3e240]
	0000dcf3:MOV RDX,qword ptr [RAX]
	0000dcf6:MOV RAX,qword ptr [RBP + -0x250]
	0000dcfd:SUB RAX,0x2
	0000dd01:ADD RAX,RDX
	0000dd04:MOVZX EAX,byte ptr [RAX]
	0000dd07:CMP AL,0xd
	0000dd09:JNZ 0x0000dd12
END_OF_LINE
----------------------------------------------
155: _Var15 = false;
	0000dd12:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
158: _Var15 = true;
	0000dd0b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
160: for (s = buf; ((*s == ' ' || (*s == '\t')) || (*s == 'X')); s = s + 1) {
	0000dd2e:MOV qword ptr [RBP + -0x278],RAX
	0000dd35:JMP 0x0000dd6d
	0000dd37:MOV RAX,qword ptr [RBP + -0x278]
	0000dd3e:MOVZX EAX,byte ptr [RAX]
	0000dd41:CMP AL,0x9
	0000dd43:JNZ 0x0000dd5d
	0000dd45:MOV RAX,qword ptr [RBP + -0x280]
	0000dd4c:ADD RAX,0x8
	0000dd50:AND RAX,-0x8
	0000dd54:MOV qword ptr [RBP + -0x280],RAX
	0000dd5b:JMP 0x0000dd65
	0000dd5d:ADD qword ptr [RBP + -0x280],0x1
	0000dd65:ADD qword ptr [RBP + -0x278],0x1
	0000dd6d:MOV RAX,qword ptr [RBP + -0x278]
	0000dd74:MOVZX EAX,byte ptr [RAX]
	0000dd77:CMP AL,0x20
	0000dd79:JZ 0x0000dd37
	0000dd7b:MOV RAX,qword ptr [RBP + -0x278]
	0000dd82:MOVZX EAX,byte ptr [RAX]
	0000dd85:CMP AL,0x9
	0000dd87:JZ 0x0000dd37
	0000dd89:MOV RAX,qword ptr [RBP + -0x278]
	0000dd90:MOVZX EAX,byte ptr [RAX]
	0000dd93:CMP AL,0x58
	0000dd95:JZ 0x0000dd37
END_OF_LINE
----------------------------------------------
161: if (*s == '\t') {
	0000dd3e:MOVZX EAX,byte ptr [RAX]
	0000dd41:CMP AL,0x9
	0000dd43:JNZ 0x0000dd5d
END_OF_LINE
----------------------------------------------
162: indent = indent + 8 & 0xfffffffffffffff8;
	0000dd4c:ADD RAX,0x8
	0000dd50:AND RAX,-0x8
END_OF_LINE
----------------------------------------------
165: indent = indent + 1;
	0000dd5d:ADD qword ptr [RBP + -0x280],0x1
END_OF_LINE
----------------------------------------------
168: pcVar21 = s;
	0000ddaa:JA 0x0000dea3
END_OF_LINE
----------------------------------------------
169: bVar24 = bVar8;
	0000ddaa:JA 0x0000dea3
END_OF_LINE
----------------------------------------------
170: if ((int)*s - 0x30U < 10) {
	0000dd9e:MOVZX EAX,byte ptr [RAX]
	0000dda1:MOVSX EAX,AL
	0000dda4:SUB EAX,0x30
	0000dda7:CMP EAX,0x9
	0000ddaa:JA 0x0000dea3
END_OF_LINE
----------------------------------------------
173: pcVar13 = pcVar21;
	0000ddcc:MOV RAX,qword ptr [RBP + -0x270]
END_OF_LINE
----------------------------------------------
174: t = pcVar13 + 1;
	0000ddb7:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
175: pcVar21 = t;
	0000dddf:JBE 0x0000ddc4
END_OF_LINE
----------------------------------------------
176: } while ((int)*t - 0x30U < 10);
	0000ddd3:MOVZX EAX,byte ptr [RAX]
	0000ddd6:MOVSX EAX,AL
	0000ddd9:SUB EAX,0x30
	0000dddc:CMP EAX,0x9
	0000dddf:JBE 0x0000ddc4
END_OF_LINE
----------------------------------------------
177: pcVar21 = t;
	0000dded:JZ 0x0000ddc4
END_OF_LINE
----------------------------------------------
178: } while (*t == ',');
	0000dde8:MOVZX EAX,byte ptr [RAX]
	0000ddeb:CMP AL,0x2c
	0000dded:JZ 0x0000ddc4
END_OF_LINE
----------------------------------------------
179: if (((*t == 'd') || (*t == 'c')) || (*t == 'a')) {
	0000ddf6:MOVZX EAX,byte ptr [RAX]
	0000ddf9:CMP AL,0x64
	0000ddfb:JZ 0x0000de1d
	0000ddfd:MOV RAX,qword ptr [RBP + -0x270]
	0000de04:MOVZX EAX,byte ptr [RAX]
	0000de07:CMP AL,0x63
	0000de09:JZ 0x0000de1d
	0000de0b:MOV RAX,qword ptr [RBP + -0x270]
	0000de12:MOVZX EAX,byte ptr [RAX]
	0000de15:CMP AL,0x61
	0000de17:JNZ 0x0000dea3
END_OF_LINE
----------------------------------------------
180: for (t = pcVar13 + 2; ((int)*t - 0x30U < 10 || (*t == ',')); t = t + 1) {
	0000de1d:ADD qword ptr [RBP + -0x270],0x1
	0000de25:JMP 0x0000de2f
	0000de27:ADD qword ptr [RBP + -0x270],0x1
	0000de2f:MOV RAX,qword ptr [RBP + -0x270]
	0000de36:MOVZX EAX,byte ptr [RAX]
	0000de39:MOVSX EAX,AL
	0000de3c:SUB EAX,0x30
	0000de3f:CMP EAX,0x9
	0000de42:JBE 0x0000de27
	0000de44:MOV RAX,qword ptr [RBP + -0x270]
	0000de4b:MOVZX EAX,byte ptr [RAX]
	0000de4e:CMP AL,0x2c
	0000de50:JZ 0x0000de27
END_OF_LINE
----------------------------------------------
182: for (; (*t == ' ' || (*t == '\t')); t = t + 1) {
	0000de54:ADD qword ptr [RBP + -0x270],0x1
	0000de5c:MOV RAX,qword ptr [RBP + -0x270]
	0000de63:MOVZX EAX,byte ptr [RAX]
	0000de66:CMP AL,0x20
	0000de68:JZ 0x0000de54
	0000de6a:MOV RAX,qword ptr [RBP + -0x270]
	0000de71:MOVZX EAX,byte ptr [RAX]
	0000de74:CMP AL,0x9
	0000de76:JZ 0x0000de54
END_OF_LINE
----------------------------------------------
184: if (*t == '\r') {
	0000de7f:MOVZX EAX,byte ptr [RAX]
	0000de82:CMP AL,0xd
	0000de84:JNZ 0x0000de8e
END_OF_LINE
----------------------------------------------
185: t = t + 1;
	0000de86:ADD qword ptr [RBP + -0x270],0x1
END_OF_LINE
----------------------------------------------
187: bVar24 = *t == '\n';
	0000de95:MOVZX EAX,byte ptr [RAX]
	0000de98:CMP AL,0xa
END_OF_LINE
----------------------------------------------
190: if (((need_header_local != true) && (first_command_line < 0)) &&
	0000dead:TEST AL,AL
	0000deaf:JZ 0x0000df26
	0000deb1:CMP qword ptr [RBP + -0x290],0x0
	0000deb9:JNS 0x0000df26
	0000debb:MOV RAX,qword ptr [RBP + -0x278]
	0000dec2:MOV RDI,RAX
	0000dec5:CALL 0x00013e52
	0000deca:MOV byte ptr [RBP + -0x2bf],AL
	0000ded0:CMP byte ptr [RBP + -0x2bf],0x0
	0000ded7:JNZ 0x0000dee2
	0000ded9:CMP byte ptr [RBP + -0x2c5],0x0
	0000dee0:JZ 0x0000df26
END_OF_LINE
----------------------------------------------
191: ((cVar14 = get_ed_command_letter(s), cVar14 != '\0' || (bVar24)))) {
	0000dec5:CALL 0x00013e52
	0000deca:MOV byte ptr [RBP + -0x2bf],AL
	0000ded0:CMP byte ptr [RBP + -0x2bf],0x0
	0000ded7:JNZ 0x0000dee2
	0000ded9:CMP byte ptr [RBP + -0x2c5],0x0
	0000dee0:JZ 0x0000df26
END_OF_LINE
----------------------------------------------
192: first_command_line = this_line;
	0000dee9:MOV qword ptr [RBP + -0x290],RAX
END_OF_LINE
----------------------------------------------
193: fcl_line = p_input_line;
	0000df04:MOV qword ptr [RBP + -0x288],RAX
END_OF_LINE
----------------------------------------------
194: p_indent = indent;
	0000df12:MOV qword ptr [0x00040538],RAX
END_OF_LINE
----------------------------------------------
195: p_strip_trailing_cr = _Var15;
	0000df20:MOV byte ptr [0x00040540],AL
END_OF_LINE
----------------------------------------------
196: first_ed_command_letter = cVar14;
	0000df20:MOV byte ptr [0x00040540],AL
END_OF_LINE
----------------------------------------------
198: if ((!bVar9) && (iVar18 = strncmp(s,"*** ",4), iVar18 == 0)) {
	0000df32:JZ 0x0000df98
	0000df34:MOV RAX,qword ptr [RBP + -0x278]
	0000df3b:MOV EDX,0x4
	0000df40:LEA RCX,[0x3300d]
	0000df47:MOV RSI,RCX
	0000df4a:MOV RDI,RAX
	0000df4d:CALL 0x00005920
	0000df52:TEST EAX,EAX
	0000df54:JNZ 0x0000df98
END_OF_LINE
----------------------------------------------
199: fetchname(s + 4,strippath,p_name,p_timestr,p_timestamp);
	0000df66:LEA RDI,[RDX + 0x4]
	0000df6a:LEA RDX,[0x40440]
	0000df71:MOV R8,RDX
	0000df74:LEA RDX,[0x404b0]
	0000df7b:MOV RCX,RDX
	0000df7e:LEA RDX,[0x40480]
	0000df85:MOV ESI,EAX
	0000df87:CALL 0x0001970d
END_OF_LINE
----------------------------------------------
200: need_header_local = false;
	0000df8c:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
201: goto LAB_0000e990;
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
203: iVar18 = strncmp(s,"+++ ",4);
	0000dfb1:CALL 0x00005920
END_OF_LINE
----------------------------------------------
204: if (iVar18 == 0) {
	0000dfb6:TEST EAX,EAX
	0000dfb8:JNZ 0x0000e009
END_OF_LINE
----------------------------------------------
205: fetchname(s + 4,strippath,p_name,p_timestr,p_timestamp);
	0000dfca:LEA RDI,[RDX + 0x4]
	0000dfce:LEA RDX,[0x40440]
	0000dfd5:MOV R8,RDX
	0000dfd8:LEA RDX,[0x404b0]
	0000dfdf:MOV RCX,RDX
	0000dfe2:LEA RDX,[0x40480]
	0000dfe9:MOV ESI,EAX
	0000dfeb:CALL 0x0001970d
END_OF_LINE
----------------------------------------------
206: need_header_local = false;
	0000dff0:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
207: p_strip_trailing_cr = _Var15;
	0000e004:JMP 0x0000e990
END_OF_LINE
----------------------------------------------
208: goto LAB_0000e990;
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
210: iVar18 = strncmp(s,"Index:",6);
	0000e022:CALL 0x00005920
END_OF_LINE
----------------------------------------------
211: if (iVar18 == 0) {
	0000e027:TEST EAX,EAX
	0000e029:JNZ 0x0000e071
END_OF_LINE
----------------------------------------------
212: fetchname(s + 6,strippath,p_name + 2,(char **)0x0,(timespec *)0x0);
	0000e03b:LEA RDI,[RDX + 0x6]
	0000e03f:MOV R8D,0x0
	0000e045:MOV ECX,0x0
	0000e04a:LEA RDX,[0x40490]
	0000e051:MOV ESI,EAX
	0000e053:CALL 0x0001970d
END_OF_LINE
----------------------------------------------
213: need_header_local = false;
	0000e058:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
214: p_strip_trailing_cr = _Var15;
	0000e06c:JMP 0x0000e990
END_OF_LINE
----------------------------------------------
215: goto LAB_0000e990;
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
217: iVar18 = strncmp(s,"Prereq:",7);
	0000e08a:CALL 0x00005920
END_OF_LINE
----------------------------------------------
218: if (iVar18 == 0) {
	0000e08f:TEST EAX,EAX
	0000e091:JNZ 0x0000e246
END_OF_LINE
----------------------------------------------
219: t = s + 7;
	0000e09e:ADD RAX,0x7
END_OF_LINE
----------------------------------------------
220: while (ppuVar20 = __ctype_b_loc(), ((*ppuVar20)[(byte)*t] & 0x2000) != 0) {
	0000e0b3:CALL 0x000060a0
	0000e0b8:MOV RDX,qword ptr [RAX]
	0000e0bb:MOV RAX,qword ptr [RBP + -0x270]
	0000e0c2:MOVZX EAX,byte ptr [RAX]
	0000e0c5:MOVZX EAX,AL
	0000e0c8:ADD RAX,RAX
	0000e0cb:ADD RAX,RDX
	0000e0ce:MOVZX EAX,word ptr [RAX]
	0000e0d1:MOVZX EAX,AX
	0000e0d4:AND EAX,0x2000
	0000e0d9:TEST EAX,EAX
	0000e0db:JNZ 0x0000e0ab
END_OF_LINE
----------------------------------------------
221: t = t + 1;
	0000e0ab:ADD qword ptr [RBP + -0x270],0x1
END_OF_LINE
----------------------------------------------
223: revision = t;
	0000e0eb:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
224: for (; *t != '\0'; t = t + 1) {
	0000e1b5:ADD qword ptr [RBP + -0x270],0x1
	0000e1bd:MOV RAX,qword ptr [RBP + -0x270]
	0000e1c4:MOVZX EAX,byte ptr [RAX]
	0000e1c7:TEST AL,AL
	0000e1c9:JNZ 0x0000e104
END_OF_LINE
----------------------------------------------
225: ppuVar20 = __ctype_b_loc();
	0000e104:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
226: pcVar21 = t;
	0000e12c:JZ 0x0000e1b5
END_OF_LINE
----------------------------------------------
227: if (((*ppuVar20)[(byte)*t] & 0x2000) != 0) goto LAB_0000e14e;
	0000e109:MOV RDX,qword ptr [RAX]
	0000e10c:MOV RAX,qword ptr [RBP + -0x270]
	0000e113:MOVZX EAX,byte ptr [RAX]
	0000e116:MOVZX EAX,AL
	0000e119:ADD RAX,RAX
	0000e11c:ADD RAX,RDX
	0000e11f:MOVZX EAX,word ptr [RAX]
	0000e122:MOVZX EAX,AX
	0000e125:AND EAX,0x2000
	0000e12a:TEST EAX,EAX
	0000e12c:JZ 0x0000e1b5
	0000e132:MOV RAX,qword ptr [RBP + -0x270]
	0000e139:ADD RAX,0x1
	0000e13d:MOV qword ptr [RBP + -0x268],RAX
	0000e144:JMP 0x0000e14e
	0000e146:ADD qword ptr [RBP + -0x268],0x1
	0000e14e:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
229: goto LAB_0000e1d2;
	0000e1d2:LEA RAX,[0x3e378]
END_OF_LINE
----------------------------------------------
231: iVar18 = strncmp(s,"diff --git ",0xb);
	0000e25f:CALL 0x00005920
END_OF_LINE
----------------------------------------------
232: if (iVar18 == 0) {
	0000e264:TEST EAX,EAX
	0000e266:JNZ 0x0000e425
END_OF_LINE
----------------------------------------------
233: if (bVar7) {
	0000e273:JZ 0x0000e2a0
END_OF_LINE
----------------------------------------------
234: p_start = this_line;
	0000e27c:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
235: p_sline = p_input_line;
	0000e28a:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
236: retval = UNI_DIFF;
	0000e291:MOV dword ptr [RBP + -0x2b8],0x5
END_OF_LINE
----------------------------------------------
237: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
239: for (i = OLD; i < INDEX; i = i + NEW) {
	0000e2a0:MOV dword ptr [RBP + -0x2bc],0x0
	0000e2aa:JMP 0x0000e2f1
	0000e2ac:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2b2:LEA RDX,[RAX*0x8]
	0000e2ba:LEA RAX,[0x40480]
	0000e2c1:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e2c5:MOV RDI,RAX
	0000e2c8:CALL 0x00005860
	0000e2cd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2d3:LEA RDX,[RAX*0x8]
	0000e2db:LEA RAX,[0x40480]
	0000e2e2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000e2ea:ADD dword ptr [RBP + -0x2bc],0x1
	0000e2f1:CMP dword ptr [RBP + -0x2bc],0x1
	0000e2f8:JBE 0x0000e2ac
END_OF_LINE
----------------------------------------------
240: free(p_name[i]);
	0000e2ac:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2b2:LEA RDX,[RAX*0x8]
	0000e2ba:LEA RAX,[0x40480]
	0000e2c1:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e2c5:MOV RDI,RAX
	0000e2c8:CALL 0x00005860
END_OF_LINE
----------------------------------------------
241: p_name[i] = (char *)0x0;
	0000e2cd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2d3:LEA RDX,[RAX*0x8]
	0000e2db:LEA RAX,[0x40480]
	0000e2e2:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
243: p_name[0] = parse_name(s + 0xb,strippath,&u_1);
	0000e30a:LEA RCX,[RDX + 0xb]
	0000e30e:LEA RDX,[RBP + -0x220]
	0000e315:MOV ESI,EAX
	0000e317:MOV RDI,RCX
	0000e31a:CALL 0x00019bd0
END_OF_LINE
----------------------------------------------
244: if ((((p_name[0] == (char *)0x0) ||
	0000e32d:TEST RAX,RAX
	0000e330:JZ 0x0000e3b8
	0000e336:CALL 0x000060a0
	0000e33b:MOV RDX,qword ptr [RAX]
	0000e33e:MOV RAX,qword ptr [RBP + -0x220]
	0000e345:MOVZX EAX,byte ptr [RAX]
	0000e348:MOVZX EAX,AL
	0000e34b:ADD RAX,RAX
	0000e34e:ADD RAX,RDX
	0000e351:MOVZX EAX,word ptr [RAX]
	0000e354:MOVZX EAX,AX
	0000e357:AND EAX,0x2000
	0000e35c:TEST EAX,EAX
	0000e35e:JZ 0x0000e3b8
	0000e360:LEA RAX,[0x3e364]
	0000e367:MOV ECX,dword ptr [RAX]
	0000e369:MOV RAX,qword ptr [RBP + -0x220]
	0000e370:LEA RDX,[RBP + -0x220]
	0000e377:MOV ESI,ECX
	0000e379:MOV RDI,RAX
	0000e37c:CALL 0x00019bd0
	0000e381:MOV qword ptr [0x00040488],RAX
	0000e388:MOV RAX,qword ptr [0x00040488]
	0000e38f:TEST RAX,RAX
	0000e392:JZ 0x0000e3b8
	0000e394:MOV RAX,qword ptr [RBP + -0x220]
	0000e39b:MOV RDI,RAX
	0000e39e:CALL 0x0000c950
	0000e3a3:MOV qword ptr [RBP + -0x220],RAX
	0000e3aa:MOV RAX,qword ptr [RBP + -0x220]
	0000e3b1:MOVZX EAX,byte ptr [RAX]
	0000e3b4:TEST AL,AL
	0000e3b6:JZ 0x0000e412
END_OF_LINE
----------------------------------------------
245: (ppuVar20 = __ctype_b_loc(), ((*ppuVar20)[(byte)*u_1] & 0x2000) == 0)) ||
	0000e336:CALL 0x000060a0
	0000e33b:MOV RDX,qword ptr [RAX]
	0000e33e:MOV RAX,qword ptr [RBP + -0x220]
	0000e345:MOVZX EAX,byte ptr [RAX]
	0000e348:MOVZX EAX,AL
	0000e34b:ADD RAX,RAX
	0000e34e:ADD RAX,RDX
	0000e351:MOVZX EAX,word ptr [RAX]
	0000e354:MOVZX EAX,AX
	0000e357:AND EAX,0x2000
	0000e35c:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
246: (p_name[1] = parse_name(u_1,strippath,&u_1), p_name[1] == (char *)0x0)) ||
	0000e370:LEA RDX,[RBP + -0x220]
	0000e377:MOV ESI,ECX
	0000e379:MOV RDI,RAX
	0000e37c:CALL 0x00019bd0
	0000e381:MOV qword ptr [0x00040488],RAX
	0000e388:MOV RAX,qword ptr [0x00040488]
	0000e38f:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
247: (u_1 = skip_spaces(u_1), *u_1 != '\0')) {
	0000e39e:CALL 0x0000c950
	0000e3a3:MOV qword ptr [RBP + -0x220],RAX
	0000e3aa:MOV RAX,qword ptr [RBP + -0x220]
	0000e3b1:MOVZX EAX,byte ptr [RAX]
	0000e3b4:TEST AL,AL
END_OF_LINE
----------------------------------------------
248: for (i = OLD; i < INDEX; i = i + NEW) {
	0000e3b8:MOV dword ptr [RBP + -0x2bc],0x0
	0000e3c2:JMP 0x0000e409
	0000e3c4:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3ca:LEA RDX,[RAX*0x8]
	0000e3d2:LEA RAX,[0x40480]
	0000e3d9:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e3dd:MOV RDI,RAX
	0000e3e0:CALL 0x00005860
	0000e3e5:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3eb:LEA RDX,[RAX*0x8]
	0000e3f3:LEA RAX,[0x40480]
	0000e3fa:MOV qword ptr [RDX + RAX*0x1],0x0
	0000e402:ADD dword ptr [RBP + -0x2bc],0x1
	0000e409:CMP dword ptr [RBP + -0x2bc],0x1
	0000e410:JBE 0x0000e3c4
END_OF_LINE
----------------------------------------------
249: free(p_name[i]);
	0000e3c4:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3ca:LEA RDX,[RAX*0x8]
	0000e3d2:LEA RAX,[0x40480]
	0000e3d9:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e3dd:MOV RDI,RAX
	0000e3e0:CALL 0x00005860
END_OF_LINE
----------------------------------------------
250: p_name[i] = (char *)0x0;
	0000e3e5:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3eb:LEA RDX,[RAX*0x8]
	0000e3f3:LEA RAX,[0x40480]
	0000e3fa:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
253: p_git_diff = true;
	0000e412:MOV byte ptr [0x00040578],0x1
END_OF_LINE
----------------------------------------------
254: need_header_local = false;
	0000e419:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
257: if ((p_git_diff != false) && (iVar18 = strncmp(s,"index ",6), iVar18 == 0)) {
	0000e42c:TEST AL,AL
	0000e42e:JZ 0x0000e5d7
	0000e434:MOV RAX,qword ptr [RBP + -0x278]
	0000e43b:MOV EDX,0x6
	0000e440:LEA RCX,[0x33065]
	0000e447:MOV RSI,RCX
	0000e44a:MOV RDI,RAX
	0000e44d:CALL 0x00005920
	0000e452:TEST EAX,EAX
	0000e454:JNZ 0x0000e5d7
END_OF_LINE
----------------------------------------------
258: u_2 = skip_hex_digits(s + 6);
	0000e461:ADD RAX,0x6
	0000e465:MOV RDI,RAX
	0000e468:CALL 0x0000d751
END_OF_LINE
----------------------------------------------
259: if ((((u_2 != (char *)0x0) && ((*u_2 == '.' && (u_2[1] == '.')))) &&
	0000e474:CMP qword ptr [RBP + -0x248],0x0
	0000e47c:JZ 0x0000e98f
	0000e482:MOV RAX,qword ptr [RBP + -0x248]
	0000e489:MOVZX EAX,byte ptr [RAX]
	0000e48c:CMP AL,0x2e
	0000e48e:JNZ 0x0000e98f
	0000e494:MOV RAX,qword ptr [RBP + -0x248]
	0000e49b:ADD RAX,0x1
	0000e49f:MOVZX EAX,byte ptr [RAX]
	0000e4a2:CMP AL,0x2e
	0000e4a4:JNZ 0x0000e98f
	0000e4aa:MOV RAX,qword ptr [RBP + -0x248]
	0000e4b1:ADD RAX,0x2
	0000e4b5:MOV RDI,RAX
	0000e4b8:CALL 0x0000d751
	0000e4bd:MOV qword ptr [RBP + -0x240],RAX
	0000e4c4:CMP qword ptr [RBP + -0x240],0x0
	0000e4cc:JZ 0x0000e98f
	0000e4d2:MOV RAX,qword ptr [RBP + -0x240]
	0000e4d9:MOVZX EAX,byte ptr [RAX]
	0000e4dc:TEST AL,AL
	0000e4de:JZ 0x0000e50e
	0000e4e0:CALL 0x000060a0
	0000e4e5:MOV RDX,qword ptr [RAX]
	0000e4e8:MOV RAX,qword ptr [RBP + -0x240]
	0000e4ef:MOVZX EAX,byte ptr [RAX]
	0000e4f2:MOVZX EAX,AL
	0000e4f5:ADD RAX,RAX
	0000e4f8:ADD RAX,RDX
	0000e4fb:MOVZX EAX,word ptr [RAX]
	0000e4fe:MOVZX EAX,AX
	0000e501:AND EAX,0x2000
	0000e506:TEST EAX,EAX
	0000e508:JZ 0x0000e98f
END_OF_LINE
----------------------------------------------
260: (v = skip_hex_digits(u_2 + 2), v != (char *)0x0)) &&
	0000e4b1:ADD RAX,0x2
	0000e4b5:MOV RDI,RAX
	0000e4b8:CALL 0x0000d751
	0000e4bd:MOV qword ptr [RBP + -0x240],RAX
	0000e4c4:CMP qword ptr [RBP + -0x240],0x0
END_OF_LINE
----------------------------------------------
261: ((*v == '\0' || (ppuVar20 = __ctype_b_loc(), ((*ppuVar20)[(byte)*v] & 0x2000) != 0)))) {
	0000e4d9:MOVZX EAX,byte ptr [RAX]
	0000e4dc:TEST AL,AL
	0000e4de:JZ 0x0000e50e
	0000e4e0:CALL 0x000060a0
	0000e4e5:MOV RDX,qword ptr [RAX]
	0000e4e8:MOV RAX,qword ptr [RBP + -0x240]
	0000e4ef:MOVZX EAX,byte ptr [RAX]
	0000e4f2:MOVZX EAX,AL
	0000e4f5:ADD RAX,RAX
	0000e4f8:ADD RAX,RDX
	0000e4fb:MOVZX EAX,word ptr [RAX]
	0000e4fe:MOVZX EAX,AX
	0000e501:AND EAX,0x2000
	0000e506:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
262: get_sha1(p_sha1,s + 6,u_2);
	0000e515:LEA RCX,[RAX + 0x6]
	0000e519:MOV RAX,qword ptr [RBP + -0x248]
	0000e520:MOV RDX,RAX
	0000e523:MOV RSI,RCX
	0000e526:LEA RAX,[0x404c0]
	0000e52d:MOV RDI,RAX
	0000e530:CALL 0x0000d652
END_OF_LINE
----------------------------------------------
263: get_sha1(p_sha1 + 1,u_2 + 2,v);
	0000e53c:LEA RCX,[RAX + 0x2]
	0000e540:MOV RAX,qword ptr [RBP + -0x240]
	0000e547:MOV RDX,RAX
	0000e54a:MOV RSI,RCX
	0000e54d:LEA RAX,[0x404c8]
	0000e554:MOV RDI,RAX
	0000e557:CALL 0x0000d652
END_OF_LINE
----------------------------------------------
264: p_says_nonexistent[0] = sha1_says_nonexistent(p_sha1[0]);
	0000e566:CALL 0x0000d6bb
END_OF_LINE
----------------------------------------------
265: p_says_nonexistent[1] = sha1_says_nonexistent(p_sha1[1]);
	0000e57b:CALL 0x0000d6bb
END_OF_LINE
----------------------------------------------
266: v = skip_spaces(v);
	0000e590:CALL 0x0000c950
END_OF_LINE
----------------------------------------------
267: if (*v != '\0') {
	0000e5a3:MOVZX EAX,byte ptr [RAX]
	0000e5a6:TEST AL,AL
	0000e5a8:JZ 0x0000e5cb
END_OF_LINE
----------------------------------------------
268: p_mode[0] = fetchmode(v);
	0000e5b4:CALL 0x0000d58c
END_OF_LINE
----------------------------------------------
269: p_mode[1] = p_mode[0];
	0000e5c5:MOV dword ptr [0x000404d0],EAX
END_OF_LINE
----------------------------------------------
271: bVar7 = true;
	0000e5cb:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
273: goto LAB_0000e990;
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
275: if ((p_git_diff == false) || (iVar18 = strncmp(s,"old mode ",9), iVar18 != 0)) {
	0000e5de:TEST AL,AL
	0000e5e0:JZ 0x0000e629
	0000e5e2:MOV RAX,qword ptr [RBP + -0x278]
	0000e5e9:MOV EDX,0x9
	0000e5ee:LEA RCX,[0x3306c]
	0000e5f5:MOV RSI,RCX
	0000e5f8:MOV RDI,RAX
	0000e5fb:CALL 0x00005920
	0000e600:TEST EAX,EAX
	0000e602:JNZ 0x0000e629
END_OF_LINE
----------------------------------------------
276: if ((p_git_diff == false) || (iVar18 = strncmp(s,"new mode ",9), iVar18 != 0)) {
	0000e630:TEST AL,AL
	0000e632:JZ 0x0000e67b
	0000e634:MOV RAX,qword ptr [RBP + -0x278]
	0000e63b:MOV EDX,0x9
	0000e640:LEA RCX,[0x33076]
	0000e647:MOV RSI,RCX
	0000e64a:MOV RDI,RAX
	0000e64d:CALL 0x00005920
	0000e652:TEST EAX,EAX
	0000e654:JNZ 0x0000e67b
END_OF_LINE
----------------------------------------------
277: if ((p_git_diff == false) || (iVar18 = strncmp(s,"deleted file mode ",0x12), iVar18 != 0)) {
	0000e682:TEST AL,AL
	0000e684:JZ 0x0000e6d7
	0000e686:MOV RAX,qword ptr [RBP + -0x278]
	0000e68d:MOV EDX,0x12
	0000e692:LEA RCX,[0x33080]
	0000e699:MOV RSI,RCX
	0000e69c:MOV RDI,RAX
	0000e69f:CALL 0x00005920
	0000e6a4:TEST EAX,EAX
	0000e6a6:JNZ 0x0000e6d7
END_OF_LINE
----------------------------------------------
278: if ((p_git_diff == false) || (iVar18 = strncmp(s,"new file mode ",0xe), iVar18 != 0)) {
	0000e6de:TEST AL,AL
	0000e6e0:JZ 0x0000e733
	0000e6e2:MOV RAX,qword ptr [RBP + -0x278]
	0000e6e9:MOV EDX,0xe
	0000e6ee:LEA RCX,[0x33093]
	0000e6f5:MOV RSI,RCX
	0000e6f8:MOV RDI,RAX
	0000e6fb:CALL 0x00005920
	0000e700:TEST EAX,EAX
	0000e702:JNZ 0x0000e733
END_OF_LINE
----------------------------------------------
279: if ((p_git_diff == false) || (iVar18 = strncmp(s,"rename from ",0xc), iVar18 != 0)) {
	0000e73a:TEST AL,AL
	0000e73c:JZ 0x0000e776
	0000e73e:MOV RAX,qword ptr [RBP + -0x278]
	0000e745:MOV EDX,0xc
	0000e74a:LEA RCX,[0x330a2]
	0000e751:MOV RSI,RCX
	0000e754:MOV RDI,RAX
	0000e757:CALL 0x00005920
	0000e75c:TEST EAX,EAX
	0000e75e:JNZ 0x0000e776
END_OF_LINE
----------------------------------------------
280: if ((p_git_diff == false) || (iVar18 = strncmp(s,"rename to ",10), iVar18 != 0)) {
	0000e77d:TEST AL,AL
	0000e77f:JZ 0x0000e7ba
	0000e781:MOV RAX,qword ptr [RBP + -0x278]
	0000e788:MOV EDX,0xa
	0000e78d:LEA RCX,[0x330af]
	0000e794:MOV RSI,RCX
	0000e797:MOV RDI,RAX
	0000e79a:CALL 0x00005920
	0000e79f:TEST EAX,EAX
	0000e7a1:JNZ 0x0000e7ba
END_OF_LINE
----------------------------------------------
281: if ((p_git_diff == false) || (iVar18 = strncmp(s,"copy from ",10), iVar18 != 0)) {
	0000e7c1:TEST AL,AL
	0000e7c3:JZ 0x0000e7fd
	0000e7c5:MOV RAX,qword ptr [RBP + -0x278]
	0000e7cc:MOV EDX,0xa
	0000e7d1:LEA RCX,[0x330ba]
	0000e7d8:MOV RSI,RCX
	0000e7db:MOV RDI,RAX
	0000e7de:CALL 0x00005920
	0000e7e3:TEST EAX,EAX
	0000e7e5:JNZ 0x0000e7fd
END_OF_LINE
----------------------------------------------
282: if ((p_git_diff == false) || (iVar18 = strncmp(s,"copy to ",8), iVar18 != 0)) {
	0000e804:TEST AL,AL
	0000e806:JZ 0x0000e841
	0000e808:MOV RAX,qword ptr [RBP + -0x278]
	0000e80f:MOV EDX,0x8
	0000e814:LEA RCX,[0x330c5]
	0000e81b:MOV RSI,RCX
	0000e81e:MOV RDI,RAX
	0000e821:CALL 0x00005920
	0000e826:TEST EAX,EAX
	0000e828:JNZ 0x0000e841
END_OF_LINE
----------------------------------------------
283: if ((p_git_diff != false) &&
	0000e848:TEST AL,AL
	0000e84a:JZ 0x0000e899
	0000e84c:MOV RAX,qword ptr [RBP + -0x278]
	0000e853:MOV EDX,0x10
	0000e858:LEA RCX,[0x330ce]
	0000e85f:MOV RSI,RCX
	0000e862:MOV RDI,RAX
	0000e865:CALL 0x00005920
	0000e86a:TEST EAX,EAX
	0000e86c:JNZ 0x0000e899
END_OF_LINE
----------------------------------------------
284: (iVar18 = strncmp(s,"GIT binary patch",0x10), iVar18 == 0)) {
	0000e865:CALL 0x00005920
	0000e86a:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
285: p_start = this_line;
	0000e875:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
286: p_sline = p_input_line;
	0000e883:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
287: retval = GIT_BINARY_DIFF;
	0000e88a:MOV dword ptr [RBP + -0x2b8],0x6
END_OF_LINE
----------------------------------------------
288: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
290: for (t = s; (*t == '-' && (t[1] == ' ')); t = t + 2) {
	0000e8a0:MOV qword ptr [RBP + -0x270],RAX
	0000e8a7:JMP 0x0000e8b1
	0000e8a9:ADD qword ptr [RBP + -0x270],0x2
	0000e8b1:MOV RAX,qword ptr [RBP + -0x270]
	0000e8b8:MOVZX EAX,byte ptr [RAX]
	0000e8bb:CMP AL,0x2d
	0000e8bd:JNZ 0x0000e8d1
	0000e8bf:MOV RAX,qword ptr [RBP + -0x270]
	0000e8c6:ADD RAX,0x1
	0000e8ca:MOVZX EAX,byte ptr [RAX]
	0000e8cd:CMP AL,0x20
	0000e8cf:JZ 0x0000e8a9
END_OF_LINE
----------------------------------------------
292: iVar18 = strncmp(t,"--- ",4);
	0000e8ea:CALL 0x00005920
END_OF_LINE
----------------------------------------------
293: if (iVar18 == 0) {
	0000e8ef:TEST EAX,EAX
	0000e8f1:JNZ 0x0000e990
END_OF_LINE
----------------------------------------------
294: u_1 = (char *)0xffffffffffffffff;
	0000e8f7:MOV qword ptr [RBP + -0x220],-0x1
END_OF_LINE
----------------------------------------------
295: fetchname(t + 4,strippath,p_name + 1,p_timestr + 1,(timespec *)&u_1);
	0000e912:LEA RDI,[RDX + 0x4]
	0000e916:LEA RDX,[RBP + -0x220]
	0000e91d:MOV R8,RDX
	0000e920:LEA RDX,[0x404b8]
	0000e927:MOV RCX,RDX
	0000e92a:LEA RDX,[0x40488]
	0000e931:MOV ESI,EAX
	0000e933:CALL 0x0001970d
END_OF_LINE
----------------------------------------------
296: need_header_local = false;
	0000e938:MOV byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
297: p_strip_trailing_cr = _Var15;
	0000e94a:JZ 0x0000e980
END_OF_LINE
----------------------------------------------
298: if (u_1 != (char *)0xffffffffffffffff) {
	0000e946:CMP RAX,-0x1
	0000e94a:JZ 0x0000e980
END_OF_LINE
----------------------------------------------
299: p_timestamp[1].tv_sec = (__time_t)u_1;
	0000e961:MOV qword ptr [RCX + 0x10],RAX
END_OF_LINE
----------------------------------------------
300: p_timestamp[1].tv_nsec = local_220;
	0000e965:MOV qword ptr [RCX + 0x18],RDX
END_OF_LINE
----------------------------------------------
301: p_rfc934_nesting = (int)((long)t - (long)s >> 1);
	0000e970:SUB RAX,qword ptr [RBP + -0x278]
	0000e977:SAR RAX,0x1
	0000e97a:MOV dword ptr [0x00040478],EAX
END_OF_LINE
----------------------------------------------
306: p_copy[1] = true;
	0000e831:MOV byte ptr [RAX + 0x1],0x1
END_OF_LINE
----------------------------------------------
307: bVar7 = true;
	0000e835:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
311: p_copy[0] = true;
	0000e7ee:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
312: bVar7 = true;
	0000e7f1:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
316: p_rename[1] = true;
	0000e7aa:MOV byte ptr [RAX + 0x1],0x1
END_OF_LINE
----------------------------------------------
317: bVar7 = true;
	0000e7ae:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
321: p_rename[0] = true;
	0000e767:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
322: bVar7 = true;
	0000e76a:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
326: p_mode[1] = fetchmode(s + 0xe);
	0000e70b:ADD RAX,0xe
	0000e70f:MOV RDI,RAX
	0000e712:CALL 0x0000d58c
END_OF_LINE
----------------------------------------------
327: p_says_nonexistent[0] = 2;
	0000e71d:MOV dword ptr [0x00040470],0x2
END_OF_LINE
----------------------------------------------
328: bVar7 = true;
	0000e727:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
332: p_mode[0] = fetchmode(s + 0x12);
	0000e6af:ADD RAX,0x12
	0000e6b3:MOV RDI,RAX
	0000e6b6:CALL 0x0000d58c
END_OF_LINE
----------------------------------------------
333: p_says_nonexistent[1] = 2;
	0000e6c1:MOV dword ptr [0x00040474],0x2
END_OF_LINE
----------------------------------------------
334: bVar7 = true;
	0000e6cb:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
338: p_mode[1] = fetchmode(s + 9);
	0000e65d:ADD RAX,0x9
	0000e661:MOV RDI,RAX
	0000e664:CALL 0x0000d58c
END_OF_LINE
----------------------------------------------
339: bVar7 = true;
	0000e66f:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
343: p_mode[0] = fetchmode(s + 9);
	0000e60b:ADD RAX,0x9
	0000e60f:MOV RDI,RAX
	0000e612:CALL 0x0000d58c
END_OF_LINE
----------------------------------------------
344: bVar7 = true;
	0000e61d:MOV byte ptr [RBP + -0x2c3],0x1
END_OF_LINE
----------------------------------------------
347: LAB_0000e990:
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
348: if (need_header_local != false) goto LAB_0000dbe0;
	0000dbe0:MOV RAX,qword ptr [RBP + -0x298]
	0000dbe7:MOV qword ptr [RBP + -0x260],RAX
	0000dbee:MOVZX EAX,byte ptr [RBP + -0x2c5]
	0000dbf5:MOV byte ptr [RBP + -0x2c2],AL
	0000dbfb:MOVZX EAX,byte ptr [RBP + -0x2c4]
	0000dc02:MOV byte ptr [RBP + -0x2c1],AL
	0000dc08:MOV RAX,qword ptr [RBP + -0x280]
	0000dc0f:MOV qword ptr [RBP + -0x258],RAX
	0000dc16:MOV qword ptr [RBP + -0x280],0x0
	0000dc21:MOV RAX,qword ptr [0x00040468]
	0000dc28:MOV RDI,RAX
	0000dc2b:CALL 0x00005d70
	0000dc30:MOV qword ptr [RBP + -0x298],RAX
	0000dc37:MOV ECX,0x0
	0000dc3c:MOV EDX,0x0
	0000dc41:MOV ESI,0x0
	0000dc46:MOV EDI,0x0
	0000dc4b:CALL 0x00013323
	0000dc50:MOV qword ptr [RBP + -0x250],RAX
	0000dc57:CMP qword ptr [RBP + -0x250],-0x1
	0000dc5f:JNZ 0x0000dc66
	0000dc61:CALL 0x000186cd
	0000dc66:CMP qword ptr [RBP + -0x250],0x0
	0000dc6e:JNZ 0x0000dce2
	0000dc70:CMP byte ptr [RBP + -0x2c6],0x0
	0000dc77:JZ 0x0000dca4
	0000dc79:MOV RAX,qword ptr [RBP + -0x290]
	0000dc80:MOV qword ptr [0x00040558],RAX
	0000dc87:MOV RAX,qword ptr [RBP + -0x288]
	0000dc8e:MOV qword ptr [0x00040560],RAX
	0000dc95:MOV dword ptr [RBP + -0x2b8],0x3
	0000dc9f:JMP 0x0000f001
	0000dca4:MOV RAX,qword ptr [RBP + -0x298]
	0000dcab:MOV qword ptr [0x00040558],RAX
	0000dcb2:MOV RAX,qword ptr [0x00040518]
	0000dcb9:MOV qword ptr [0x00040560],RAX
	0000dcc0:CMP byte ptr [RBP + -0x2c3],0x0
	0000dcc7:JZ 0x0000dcd8
	0000dcc9:MOV dword ptr [RBP + -0x2b8],0x5
	0000dcd3:JMP 0x0000f001
	0000dcd8:MOV EAX,0x0
	0000dcdd:JMP 0x0000fba4
	0000dce2:CMP qword ptr [RBP + -0x250],0x1
	0000dcea:JBE 0x0000dd12
	0000dcec:LEA RAX,[0x3e240]
	0000dcf3:MOV RDX,qword ptr [RAX]
	0000dcf6:MOV RAX,qword ptr [RBP + -0x250]
	0000dcfd:SUB RAX,0x2
	0000dd01:ADD RAX,RDX
	0000dd04:MOVZX EAX,byte ptr [RAX]
	0000dd07:CMP AL,0xd
	0000dd09:JNZ 0x0000dd12
	0000dd0b:MOV EAX,0x1
	0000dd10:JMP 0x0000dd17
	0000dd12:MOV EAX,0x0
	0000dd17:MOV byte ptr [RBP + -0x2c0],AL
	0000dd1d:AND byte ptr [RBP + -0x2c0],0x1
	0000dd24:LEA RAX,[0x3e240]
	0000dd2b:MOV RAX,qword ptr [RAX]
	0000dd2e:MOV qword ptr [RBP + -0x278],RAX
	0000dd35:JMP 0x0000dd6d
	0000dd37:MOV RAX,qword ptr [RBP + -0x278]
	0000dd3e:MOVZX EAX,byte ptr [RAX]
	0000dd41:CMP AL,0x9
	0000dd43:JNZ 0x0000dd5d
	0000dd45:MOV RAX,qword ptr [RBP + -0x280]
	0000dd4c:ADD RAX,0x8
	0000dd50:AND RAX,-0x8
	0000dd54:MOV qword ptr [RBP + -0x280],RAX
	0000dd5b:JMP 0x0000dd65
	0000dd5d:ADD qword ptr [RBP + -0x280],0x1
	0000dd65:ADD qword ptr [RBP + -0x278],0x1
	0000dd6d:MOV RAX,qword ptr [RBP + -0x278]
	0000dd74:MOVZX EAX,byte ptr [RAX]
	0000dd77:CMP AL,0x20
	0000dd79:JZ 0x0000dd37
	0000dd7b:MOV RAX,qword ptr [RBP + -0x278]
	0000dd82:MOVZX EAX,byte ptr [RAX]
	0000dd85:CMP AL,0x9
	0000dd87:JZ 0x0000dd37
	0000dd89:MOV RAX,qword ptr [RBP + -0x278]
	0000dd90:MOVZX EAX,byte ptr [RAX]
	0000dd93:CMP AL,0x58
	0000dd95:JZ 0x0000dd37
	0000dd97:MOV RAX,qword ptr [RBP + -0x278]
	0000dd9e:MOVZX EAX,byte ptr [RAX]
	0000dda1:MOVSX EAX,AL
	0000dda4:SUB EAX,0x30
	0000dda7:CMP EAX,0x9
	0000ddaa:JA 0x0000dea3
	0000ddb0:MOV RAX,qword ptr [RBP + -0x278]
	0000ddb7:ADD RAX,0x1
	0000ddbb:MOV qword ptr [RBP + -0x270],RAX
	0000ddc2:JMP 0x0000ddcc
	0000ddc4:ADD qword ptr [RBP + -0x270],0x1
	0000ddcc:MOV RAX,qword ptr [RBP + -0x270]
	0000ddd3:MOVZX EAX,byte ptr [RAX]
	0000ddd6:MOVSX EAX,AL
	0000ddd9:SUB EAX,0x30
	0000dddc:CMP EAX,0x9
	0000dddf:JBE 0x0000ddc4
	0000dde1:MOV RAX,qword ptr [RBP + -0x270]
	0000dde8:MOVZX EAX,byte ptr [RAX]
	0000ddeb:CMP AL,0x2c
	0000dded:JZ 0x0000ddc4
	0000ddef:MOV RAX,qword ptr [RBP + -0x270]
	0000ddf6:MOVZX EAX,byte ptr [RAX]
	0000ddf9:CMP AL,0x64
	0000ddfb:JZ 0x0000de1d
	0000ddfd:MOV RAX,qword ptr [RBP + -0x270]
	0000de04:MOVZX EAX,byte ptr [RAX]
	0000de07:CMP AL,0x63
	0000de09:JZ 0x0000de1d
	0000de0b:MOV RAX,qword ptr [RBP + -0x270]
	0000de12:MOVZX EAX,byte ptr [RAX]
	0000de15:CMP AL,0x61
	0000de17:JNZ 0x0000dea3
	0000de1d:ADD qword ptr [RBP + -0x270],0x1
	0000de25:JMP 0x0000de2f
	0000de27:ADD qword ptr [RBP + -0x270],0x1
	0000de2f:MOV RAX,qword ptr [RBP + -0x270]
	0000de36:MOVZX EAX,byte ptr [RAX]
	0000de39:MOVSX EAX,AL
	0000de3c:SUB EAX,0x30
	0000de3f:CMP EAX,0x9
	0000de42:JBE 0x0000de27
	0000de44:MOV RAX,qword ptr [RBP + -0x270]
	0000de4b:MOVZX EAX,byte ptr [RAX]
	0000de4e:CMP AL,0x2c
	0000de50:JZ 0x0000de27
	0000de52:JMP 0x0000de5c
	0000de54:ADD qword ptr [RBP + -0x270],0x1
	0000de5c:MOV RAX,qword ptr [RBP + -0x270]
	0000de63:MOVZX EAX,byte ptr [RAX]
	0000de66:CMP AL,0x20
	0000de68:JZ 0x0000de54
	0000de6a:MOV RAX,qword ptr [RBP + -0x270]
	0000de71:MOVZX EAX,byte ptr [RAX]
	0000de74:CMP AL,0x9
	0000de76:JZ 0x0000de54
	0000de78:MOV RAX,qword ptr [RBP + -0x270]
	0000de7f:MOVZX EAX,byte ptr [RAX]
	0000de82:CMP AL,0xd
	0000de84:JNZ 0x0000de8e
	0000de86:ADD qword ptr [RBP + -0x270],0x1
	0000de8e:MOV RAX,qword ptr [RBP + -0x270]
	0000de95:MOVZX EAX,byte ptr [RAX]
	0000de98:CMP AL,0xa
	0000de9a:SETZ AL
	0000de9d:MOV byte ptr [RBP + -0x2c5],AL
	0000dea3:MOVZX EAX,byte ptr [RBP + -0x2d4]
	0000deaa:XOR EAX,0x1
	0000dead:TEST AL,AL
	0000deaf:JZ 0x0000df26
	0000deb1:CMP qword ptr [RBP + -0x290],0x0
	0000deb9:JNS 0x0000df26
	0000debb:MOV RAX,qword ptr [RBP + -0x278]
	0000dec2:MOV RDI,RAX
	0000dec5:CALL 0x00013e52
	0000deca:MOV byte ptr [RBP + -0x2bf],AL
	0000ded0:CMP byte ptr [RBP + -0x2bf],0x0
	0000ded7:JNZ 0x0000dee2
	0000ded9:CMP byte ptr [RBP + -0x2c5],0x0
	0000dee0:JZ 0x0000df26
	0000dee2:MOV RAX,qword ptr [RBP + -0x298]
	0000dee9:MOV qword ptr [RBP + -0x290],RAX
	0000def0:MOVZX EAX,byte ptr [RBP + -0x2bf]
	0000def7:MOV byte ptr [RBP + -0x2c6],AL
	0000defd:MOV RAX,qword ptr [0x00040518]
	0000df04:MOV qword ptr [RBP + -0x288],RAX
	0000df0b:MOV RAX,qword ptr [RBP + -0x280]
	0000df12:MOV qword ptr [0x00040538],RAX
	0000df19:MOVZX EAX,byte ptr [RBP + -0x2c0]
	0000df20:MOV byte ptr [0x00040540],AL
	0000df26:MOVZX EAX,byte ptr [RBP + -0x2c1]
	0000df2d:XOR EAX,0x1
	0000df30:TEST AL,AL
	0000df32:JZ 0x0000df98
	0000df34:MOV RAX,qword ptr [RBP + -0x278]
	0000df3b:MOV EDX,0x4
	0000df40:LEA RCX,[0x3300d]
	0000df47:MOV RSI,RCX
	0000df4a:MOV RDI,RAX
	0000df4d:CALL 0x00005920
	0000df52:TEST EAX,EAX
	0000df54:JNZ 0x0000df98
	0000df56:LEA RAX,[0x3e364]
	0000df5d:MOV EAX,dword ptr [RAX]
	0000df5f:MOV RDX,qword ptr [RBP + -0x278]
	0000df66:LEA RDI,[RDX + 0x4]
	0000df6a:LEA RDX,[0x40440]
	0000df71:MOV R8,RDX
	0000df74:LEA RDX,[0x404b0]
	0000df7b:MOV RCX,RDX
	0000df7e:LEA RDX,[0x40480]
	0000df85:MOV ESI,EAX
	0000df87:CALL 0x0001970d
	0000df8c:MOV byte ptr [RBP + -0x2d4],0x0
	0000df93:JMP 0x0000e990
	0000df98:MOV RAX,qword ptr [RBP + -0x278]
	0000df9f:MOV EDX,0x4
	0000dfa4:LEA RCX,[0x33012]
	0000dfab:MOV RSI,RCX
	0000dfae:MOV RDI,RAX
	0000dfb1:CALL 0x00005920
	0000dfb6:TEST EAX,EAX
	0000dfb8:JNZ 0x0000e009
	0000dfba:LEA RAX,[0x3e364]
	0000dfc1:MOV EAX,dword ptr [RAX]
	0000dfc3:MOV RDX,qword ptr [RBP + -0x278]
	0000dfca:LEA RDI,[RDX + 0x4]
	0000dfce:LEA RDX,[0x40440]
	0000dfd5:MOV R8,RDX
	0000dfd8:LEA RDX,[0x404b0]
	0000dfdf:MOV RCX,RDX
	0000dfe2:LEA RDX,[0x40480]
	0000dfe9:MOV ESI,EAX
	0000dfeb:CALL 0x0001970d
	0000dff0:MOV byte ptr [RBP + -0x2d4],0x0
	0000dff7:MOVZX EAX,byte ptr [RBP + -0x2c0]
	0000dffe:MOV byte ptr [0x00040540],AL
	0000e004:JMP 0x0000e990
	0000e009:MOV RAX,qword ptr [RBP + -0x278]
	0000e010:MOV EDX,0x6
	0000e015:LEA RCX,[0x33017]
	0000e01c:MOV RSI,RCX
	0000e01f:MOV RDI,RAX
	0000e022:CALL 0x00005920
	0000e027:TEST EAX,EAX
	0000e029:JNZ 0x0000e071
	0000e02b:LEA RAX,[0x3e364]
	0000e032:MOV EAX,dword ptr [RAX]
	0000e034:MOV RDX,qword ptr [RBP + -0x278]
	0000e03b:LEA RDI,[RDX + 0x6]
	0000e03f:MOV R8D,0x0
	0000e045:MOV ECX,0x0
	0000e04a:LEA RDX,[0x40490]
	0000e051:MOV ESI,EAX
	0000e053:CALL 0x0001970d
	0000e058:MOV byte ptr [RBP + -0x2d4],0x0
	0000e05f:MOVZX EAX,byte ptr [RBP + -0x2c0]
	0000e066:MOV byte ptr [0x00040540],AL
	0000e06c:JMP 0x0000e990
	0000e071:MOV RAX,qword ptr [RBP + -0x278]
	0000e078:MOV EDX,0x7
	0000e07d:LEA RCX,[0x3301e]
	0000e084:MOV RSI,RCX
	0000e087:MOV RDI,RAX
	0000e08a:CALL 0x00005920
	0000e08f:TEST EAX,EAX
	0000e091:JNZ 0x0000e246
	0000e097:MOV RAX,qword ptr [RBP + -0x278]
	0000e09e:ADD RAX,0x7
	0000e0a2:MOV qword ptr [RBP + -0x270],RAX
	0000e0a9:JMP 0x0000e0b3
	0000e0ab:ADD qword ptr [RBP + -0x270],0x1
	0000e0b3:CALL 0x000060a0
	0000e0b8:MOV RDX,qword ptr [RAX]
	0000e0bb:MOV RAX,qword ptr [RBP + -0x270]
	0000e0c2:MOVZX EAX,byte ptr [RAX]
	0000e0c5:MOVZX EAX,AL
	0000e0c8:ADD RAX,RAX
	0000e0cb:ADD RAX,RDX
	0000e0ce:MOVZX EAX,word ptr [RAX]
	0000e0d1:MOVZX EAX,AX
	0000e0d4:AND EAX,0x2000
	0000e0d9:TEST EAX,EAX
	0000e0db:JNZ 0x0000e0ab
	0000e0dd:LEA RAX,[0x3e378]
	0000e0e4:MOV RDX,qword ptr [RBP + -0x270]
	0000e0eb:MOV qword ptr [RAX],RDX
	0000e0ee:LEA RAX,[0x3e378]
	0000e0f5:MOV RAX,qword ptr [RAX]
	0000e0f8:MOV qword ptr [RBP + -0x270],RAX
	0000e0ff:JMP 0x0000e1bd
	0000e104:CALL 0x000060a0
	0000e109:MOV RDX,qword ptr [RAX]
	0000e10c:MOV RAX,qword ptr [RBP + -0x270]
	0000e113:MOVZX EAX,byte ptr [RAX]
	0000e116:MOVZX EAX,AL
	0000e119:ADD RAX,RAX
	0000e11c:ADD RAX,RDX
	0000e11f:MOVZX EAX,word ptr [RAX]
	0000e122:MOVZX EAX,AX
	0000e125:AND EAX,0x2000
	0000e12a:TEST EAX,EAX
	0000e12c:JZ 0x0000e1b5
	0000e132:MOV RAX,qword ptr [RBP + -0x270]
	0000e139:ADD RAX,0x1
	0000e13d:MOV qword ptr [RBP + -0x268],RAX
	0000e144:JMP 0x0000e14e
	0000e146:ADD qword ptr [RBP + -0x268],0x1
	0000e14e:CALL 0x000060a0
	0000e153:MOV RDX,qword ptr [RAX]
	0000e156:MOV RAX,qword ptr [RBP + -0x268]
	0000e15d:MOVZX EAX,byte ptr [RAX]
	0000e160:MOVZX EAX,AL
	0000e163:ADD RAX,RAX
	0000e166:ADD RAX,RDX
	0000e169:MOVZX EAX,word ptr [RAX]
	0000e16c:MOVZX EAX,AX
	0000e16f:AND EAX,0x2000
	0000e174:TEST EAX,EAX
	0000e176:JNZ 0x0000e146
	0000e178:MOV RAX,qword ptr [RBP + -0x268]
	0000e17f:MOVZX EAX,byte ptr [RAX]
	0000e182:TEST AL,AL
	0000e184:JZ 0x0000e1d1
	0000e186:MOV RDX,qword ptr [RBP + -0x298]
	0000e18d:LEA RAX,[RBP + -0x30]
	0000e191:MOV RSI,RDX
	0000e194:MOV RDI,RAX
	0000e197:CALL 0x00018472
	0000e19c:MOV RSI,RAX
	0000e19f:LEA RAX,[0x33028]
	0000e1a6:MOV RDI,RAX
	0000e1a9:MOV EAX,0x0
	0000e1ae:CALL 0x000188a8
	0000e1b3:JMP 0x0000e1d1
	0000e1b5:ADD qword ptr [RBP + -0x270],0x1
	0000e1bd:MOV RAX,qword ptr [RBP + -0x270]
	0000e1c4:MOVZX EAX,byte ptr [RAX]
	0000e1c7:TEST AL,AL
	0000e1c9:JNZ 0x0000e104
	0000e1cf:JMP 0x0000e1d2
	0000e1d1:NOP
	0000e1d2:LEA RAX,[0x3e378]
	0000e1d9:MOV RAX,qword ptr [RAX]
	0000e1dc:CMP qword ptr [RBP + -0x270],RAX
	0000e1e3:JNZ 0x0000e1f8
	0000e1e5:LEA RAX,[0x3e378]
	0000e1ec:MOV qword ptr [RAX],0x0
	0000e1f3:JMP 0x0000e990
	0000e1f8:MOV RAX,qword ptr [RBP + -0x270]
	0000e1ff:MOVZX EAX,byte ptr [RAX]
	0000e202:MOV byte ptr [RBP + -0x2be],AL
	0000e208:MOV RAX,qword ptr [RBP + -0x270]
	0000e20f:MOV byte ptr [RAX],0x0
	0000e212:LEA RAX,[0x3e378]
	0000e219:MOV RAX,qword ptr [RAX]
	0000e21c:MOV RDI,RAX
	0000e21f:CALL 0x0002bee1
	0000e224:MOV RDX,RAX
	0000e227:LEA RAX,[0x3e378]
	0000e22e:MOV qword ptr [RAX],RDX
	0000e231:MOV RAX,qword ptr [RBP + -0x270]
	0000e238:MOVZX EDX,byte ptr [RBP + -0x2be]
	0000e23f:MOV byte ptr [RAX],DL
	0000e241:JMP 0x0000e990
	0000e246:MOV RAX,qword ptr [RBP + -0x278]
	0000e24d:MOV EDX,0xb
	0000e252:LEA RCX,[0x33059]
	0000e259:MOV RSI,RCX
	0000e25c:MOV RDI,RAX
	0000e25f:CALL 0x00005920
	0000e264:TEST EAX,EAX
	0000e266:JNZ 0x0000e425
	0000e26c:CMP byte ptr [RBP + -0x2c3],0x0
	0000e273:JZ 0x0000e2a0
	0000e275:MOV RAX,qword ptr [RBP + -0x298]
	0000e27c:MOV qword ptr [0x00040558],RAX
	0000e283:MOV RAX,qword ptr [0x00040518]
	0000e28a:MOV qword ptr [0x00040560],RAX
	0000e291:MOV dword ptr [RBP + -0x2b8],0x5
	0000e29b:JMP 0x0000f001
	0000e2a0:MOV dword ptr [RBP + -0x2bc],0x0
	0000e2aa:JMP 0x0000e2f1
	0000e2ac:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2b2:LEA RDX,[RAX*0x8]
	0000e2ba:LEA RAX,[0x40480]
	0000e2c1:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e2c5:MOV RDI,RAX
	0000e2c8:CALL 0x00005860
	0000e2cd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e2d3:LEA RDX,[RAX*0x8]
	0000e2db:LEA RAX,[0x40480]
	0000e2e2:MOV qword ptr [RDX + RAX*0x1],0x0
	0000e2ea:ADD dword ptr [RBP + -0x2bc],0x1
	0000e2f1:CMP dword ptr [RBP + -0x2bc],0x1
	0000e2f8:JBE 0x0000e2ac
	0000e2fa:LEA RAX,[0x3e364]
	0000e301:MOV EAX,dword ptr [RAX]
	0000e303:MOV RDX,qword ptr [RBP + -0x278]
	0000e30a:LEA RCX,[RDX + 0xb]
	0000e30e:LEA RDX,[RBP + -0x220]
	0000e315:MOV ESI,EAX
	0000e317:MOV RDI,RCX
	0000e31a:CALL 0x00019bd0
	0000e31f:MOV qword ptr [0x00040480],RAX
	0000e326:MOV RAX,qword ptr [0x00040480]
	0000e32d:TEST RAX,RAX
	0000e330:JZ 0x0000e3b8
	0000e336:CALL 0x000060a0
	0000e33b:MOV RDX,qword ptr [RAX]
	0000e33e:MOV RAX,qword ptr [RBP + -0x220]
	0000e345:MOVZX EAX,byte ptr [RAX]
	0000e348:MOVZX EAX,AL
	0000e34b:ADD RAX,RAX
	0000e34e:ADD RAX,RDX
	0000e351:MOVZX EAX,word ptr [RAX]
	0000e354:MOVZX EAX,AX
	0000e357:AND EAX,0x2000
	0000e35c:TEST EAX,EAX
	0000e35e:JZ 0x0000e3b8
	0000e360:LEA RAX,[0x3e364]
	0000e367:MOV ECX,dword ptr [RAX]
	0000e369:MOV RAX,qword ptr [RBP + -0x220]
	0000e370:LEA RDX,[RBP + -0x220]
	0000e377:MOV ESI,ECX
	0000e379:MOV RDI,RAX
	0000e37c:CALL 0x00019bd0
	0000e381:MOV qword ptr [0x00040488],RAX
	0000e388:MOV RAX,qword ptr [0x00040488]
	0000e38f:TEST RAX,RAX
	0000e392:JZ 0x0000e3b8
	0000e394:MOV RAX,qword ptr [RBP + -0x220]
	0000e39b:MOV RDI,RAX
	0000e39e:CALL 0x0000c950
	0000e3a3:MOV qword ptr [RBP + -0x220],RAX
	0000e3aa:MOV RAX,qword ptr [RBP + -0x220]
	0000e3b1:MOVZX EAX,byte ptr [RAX]
	0000e3b4:TEST AL,AL
	0000e3b6:JZ 0x0000e412
	0000e3b8:MOV dword ptr [RBP + -0x2bc],0x0
	0000e3c2:JMP 0x0000e409
	0000e3c4:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3ca:LEA RDX,[RAX*0x8]
	0000e3d2:LEA RAX,[0x40480]
	0000e3d9:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000e3dd:MOV RDI,RAX
	0000e3e0:CALL 0x00005860
	0000e3e5:MOV EAX,dword ptr [RBP + -0x2bc]
	0000e3eb:LEA RDX,[RAX*0x8]
	0000e3f3:LEA RAX,[0x40480]
	0000e3fa:MOV qword ptr [RDX + RAX*0x1],0x0
	0000e402:ADD dword ptr [RBP + -0x2bc],0x1
	0000e409:CMP dword ptr [RBP + -0x2bc],0x1
	0000e410:JBE 0x0000e3c4
	0000e412:MOV byte ptr [0x00040578],0x1
	0000e419:MOV byte ptr [RBP + -0x2d4],0x0
	0000e420:JMP 0x0000e990
	0000e425:MOVZX EAX,byte ptr [0x00040578]
	0000e42c:TEST AL,AL
	0000e42e:JZ 0x0000e5d7
	0000e434:MOV RAX,qword ptr [RBP + -0x278]
	0000e43b:MOV EDX,0x6
	0000e440:LEA RCX,[0x33065]
	0000e447:MOV RSI,RCX
	0000e44a:MOV RDI,RAX
	0000e44d:CALL 0x00005920
	0000e452:TEST EAX,EAX
	0000e454:JNZ 0x0000e5d7
	0000e45a:MOV RAX,qword ptr [RBP + -0x278]
	0000e461:ADD RAX,0x6
	0000e465:MOV RDI,RAX
	0000e468:CALL 0x0000d751
	0000e46d:MOV qword ptr [RBP + -0x248],RAX
	0000e474:CMP qword ptr [RBP + -0x248],0x0
	0000e47c:JZ 0x0000e98f
	0000e482:MOV RAX,qword ptr [RBP + -0x248]
	0000e489:MOVZX EAX,byte ptr [RAX]
	0000e48c:CMP AL,0x2e
	0000e48e:JNZ 0x0000e98f
	0000e494:MOV RAX,qword ptr [RBP + -0x248]
	0000e49b:ADD RAX,0x1
	0000e49f:MOVZX EAX,byte ptr [RAX]
	0000e4a2:CMP AL,0x2e
	0000e4a4:JNZ 0x0000e98f
	0000e4aa:MOV RAX,qword ptr [RBP + -0x248]
	0000e4b1:ADD RAX,0x2
	0000e4b5:MOV RDI,RAX
	0000e4b8:CALL 0x0000d751
	0000e4bd:MOV qword ptr [RBP + -0x240],RAX
	0000e4c4:CMP qword ptr [RBP + -0x240],0x0
	0000e4cc:JZ 0x0000e98f
	0000e4d2:MOV RAX,qword ptr [RBP + -0x240]
	0000e4d9:MOVZX EAX,byte ptr [RAX]
	0000e4dc:TEST AL,AL
	0000e4de:JZ 0x0000e50e
	0000e4e0:CALL 0x000060a0
	0000e4e5:MOV RDX,qword ptr [RAX]
	0000e4e8:MOV RAX,qword ptr [RBP + -0x240]
	0000e4ef:MOVZX EAX,byte ptr [RAX]
	0000e4f2:MOVZX EAX,AL
	0000e4f5:ADD RAX,RAX
	0000e4f8:ADD RAX,RDX
	0000e4fb:MOVZX EAX,word ptr [RAX]
	0000e4fe:MOVZX EAX,AX
	0000e501:AND EAX,0x2000
	0000e506:TEST EAX,EAX
	0000e508:JZ 0x0000e98f
	0000e50e:MOV RAX,qword ptr [RBP + -0x278]
	0000e515:LEA RCX,[RAX + 0x6]
	0000e519:MOV RAX,qword ptr [RBP + -0x248]
	0000e520:MOV RDX,RAX
	0000e523:MOV RSI,RCX
	0000e526:LEA RAX,[0x404c0]
	0000e52d:MOV RDI,RAX
	0000e530:CALL 0x0000d652
	0000e535:MOV RAX,qword ptr [RBP + -0x248]
	0000e53c:LEA RCX,[RAX + 0x2]
	0000e540:MOV RAX,qword ptr [RBP + -0x240]
	0000e547:MOV RDX,RAX
	0000e54a:MOV RSI,RCX
	0000e54d:LEA RAX,[0x404c8]
	0000e554:MOV RDI,RAX
	0000e557:CALL 0x0000d652
	0000e55c:MOV RAX,qword ptr [0x000404c0]
	0000e563:MOV RDI,RAX
	0000e566:CALL 0x0000d6bb
	0000e56b:MOV dword ptr [0x00040470],EAX
	0000e571:MOV RAX,qword ptr [0x000404c8]
	0000e578:MOV RDI,RAX
	0000e57b:CALL 0x0000d6bb
	0000e580:MOV dword ptr [0x00040474],EAX
	0000e586:MOV RAX,qword ptr [RBP + -0x240]
	0000e58d:MOV RDI,RAX
	0000e590:CALL 0x0000c950
	0000e595:MOV qword ptr [RBP + -0x240],RAX
	0000e59c:MOV RAX,qword ptr [RBP + -0x240]
	0000e5a3:MOVZX EAX,byte ptr [RAX]
	0000e5a6:TEST AL,AL
	0000e5a8:JZ 0x0000e5cb
	0000e5aa:MOV RAX,qword ptr [RBP + -0x240]
	0000e5b1:MOV RDI,RAX
	0000e5b4:CALL 0x0000d58c
	0000e5b9:MOV dword ptr [0x000404d4],EAX
	0000e5bf:MOV EAX,dword ptr [0x000404d4]
	0000e5c5:MOV dword ptr [0x000404d0],EAX
	0000e5cb:MOV byte ptr [RBP + -0x2c3],0x1
	0000e5d2:JMP 0x0000e98f
	0000e5d7:MOVZX EAX,byte ptr [0x00040578]
	0000e5de:TEST AL,AL
	0000e5e0:JZ 0x0000e629
	0000e5e2:MOV RAX,qword ptr [RBP + -0x278]
	0000e5e9:MOV EDX,0x9
	0000e5ee:LEA RCX,[0x3306c]
	0000e5f5:MOV RSI,RCX
	0000e5f8:MOV RDI,RAX
	0000e5fb:CALL 0x00005920
	0000e600:TEST EAX,EAX
	0000e602:JNZ 0x0000e629
	0000e604:MOV RAX,qword ptr [RBP + -0x278]
	0000e60b:ADD RAX,0x9
	0000e60f:MOV RDI,RAX
	0000e612:CALL 0x0000d58c
	0000e617:MOV dword ptr [0x000404d0],EAX
	0000e61d:MOV byte ptr [RBP + -0x2c3],0x1
	0000e624:JMP 0x0000e990
	0000e629:MOVZX EAX,byte ptr [0x00040578]
	0000e630:TEST AL,AL
	0000e632:JZ 0x0000e67b
	0000e634:MOV RAX,qword ptr [RBP + -0x278]
	0000e63b:MOV EDX,0x9
	0000e640:LEA RCX,[0x33076]
	0000e647:MOV RSI,RCX
	0000e64a:MOV RDI,RAX
	0000e64d:CALL 0x00005920
	0000e652:TEST EAX,EAX
	0000e654:JNZ 0x0000e67b
	0000e656:MOV RAX,qword ptr [RBP + -0x278]
	0000e65d:ADD RAX,0x9
	0000e661:MOV RDI,RAX
	0000e664:CALL 0x0000d58c
	0000e669:MOV dword ptr [0x000404d4],EAX
	0000e66f:MOV byte ptr [RBP + -0x2c3],0x1
	0000e676:JMP 0x0000e990
	0000e67b:MOVZX EAX,byte ptr [0x00040578]
	0000e682:TEST AL,AL
	0000e684:JZ 0x0000e6d7
	0000e686:MOV RAX,qword ptr [RBP + -0x278]
	0000e68d:MOV EDX,0x12
	0000e692:LEA RCX,[0x33080]
	0000e699:MOV RSI,RCX
	0000e69c:MOV RDI,RAX
	0000e69f:CALL 0x00005920
	0000e6a4:TEST EAX,EAX
	0000e6a6:JNZ 0x0000e6d7
	0000e6a8:MOV RAX,qword ptr [RBP + -0x278]
	0000e6af:ADD RAX,0x12
	0000e6b3:MOV RDI,RAX
	0000e6b6:CALL 0x0000d58c
	0000e6bb:MOV dword ptr [0x000404d0],EAX
	0000e6c1:MOV dword ptr [0x00040474],0x2
	0000e6cb:MOV byte ptr [RBP + -0x2c3],0x1
	0000e6d2:JMP 0x0000e990
	0000e6d7:MOVZX EAX,byte ptr [0x00040578]
	0000e6de:TEST AL,AL
	0000e6e0:JZ 0x0000e733
	0000e6e2:MOV RAX,qword ptr [RBP + -0x278]
	0000e6e9:MOV EDX,0xe
	0000e6ee:LEA RCX,[0x33093]
	0000e6f5:MOV RSI,RCX
	0000e6f8:MOV RDI,RAX
	0000e6fb:CALL 0x00005920
	0000e700:TEST EAX,EAX
	0000e702:JNZ 0x0000e733
	0000e704:MOV RAX,qword ptr [RBP + -0x278]
	0000e70b:ADD RAX,0xe
	0000e70f:MOV RDI,RAX
	0000e712:CALL 0x0000d58c
	0000e717:MOV dword ptr [0x000404d4],EAX
	0000e71d:MOV dword ptr [0x00040470],0x2
	0000e727:MOV byte ptr [RBP + -0x2c3],0x1
	0000e72e:JMP 0x0000e990
	0000e733:MOVZX EAX,byte ptr [0x00040578]
	0000e73a:TEST AL,AL
	0000e73c:JZ 0x0000e776
	0000e73e:MOV RAX,qword ptr [RBP + -0x278]
	0000e745:MOV EDX,0xc
	0000e74a:LEA RCX,[0x330a2]
	0000e751:MOV RSI,RCX
	0000e754:MOV RDI,RAX
	0000e757:CALL 0x00005920
	0000e75c:TEST EAX,EAX
	0000e75e:JNZ 0x0000e776
	0000e760:LEA RAX,[0x40462]
	0000e767:MOV byte ptr [RAX],0x1
	0000e76a:MOV byte ptr [RBP + -0x2c3],0x1
	0000e771:JMP 0x0000e990
	0000e776:MOVZX EAX,byte ptr [0x00040578]
	0000e77d:TEST AL,AL
	0000e77f:JZ 0x0000e7ba
	0000e781:MOV RAX,qword ptr [RBP + -0x278]
	0000e788:MOV EDX,0xa
	0000e78d:LEA RCX,[0x330af]
	0000e794:MOV RSI,RCX
	0000e797:MOV RDI,RAX
	0000e79a:CALL 0x00005920
	0000e79f:TEST EAX,EAX
	0000e7a1:JNZ 0x0000e7ba
	0000e7a3:LEA RAX,[0x40462]
	0000e7aa:MOV byte ptr [RAX + 0x1],0x1
	0000e7ae:MOV byte ptr [RBP + -0x2c3],0x1
	0000e7b5:JMP 0x0000e990
	0000e7ba:MOVZX EAX,byte ptr [0x00040578]
	0000e7c1:TEST AL,AL
	0000e7c3:JZ 0x0000e7fd
	0000e7c5:MOV RAX,qword ptr [RBP + -0x278]
	0000e7cc:MOV EDX,0xa
	0000e7d1:LEA RCX,[0x330ba]
	0000e7d8:MOV RSI,RCX
	0000e7db:MOV RDI,RAX
	0000e7de:CALL 0x00005920
	0000e7e3:TEST EAX,EAX
	0000e7e5:JNZ 0x0000e7fd
	0000e7e7:LEA RAX,[0x40460]
	0000e7ee:MOV byte ptr [RAX],0x1
	0000e7f1:MOV byte ptr [RBP + -0x2c3],0x1
	0000e7f8:JMP 0x0000e990
	0000e7fd:MOVZX EAX,byte ptr [0x00040578]
	0000e804:TEST AL,AL
	0000e806:JZ 0x0000e841
	0000e808:MOV RAX,qword ptr [RBP + -0x278]
	0000e80f:MOV EDX,0x8
	0000e814:LEA RCX,[0x330c5]
	0000e81b:MOV RSI,RCX
	0000e81e:MOV RDI,RAX
	0000e821:CALL 0x00005920
	0000e826:TEST EAX,EAX
	0000e828:JNZ 0x0000e841
	0000e82a:LEA RAX,[0x40460]
	0000e831:MOV byte ptr [RAX + 0x1],0x1
	0000e835:MOV byte ptr [RBP + -0x2c3],0x1
	0000e83c:JMP 0x0000e990
	0000e841:MOVZX EAX,byte ptr [0x00040578]
	0000e848:TEST AL,AL
	0000e84a:JZ 0x0000e899
	0000e84c:MOV RAX,qword ptr [RBP + -0x278]
	0000e853:MOV EDX,0x10
	0000e858:LEA RCX,[0x330ce]
	0000e85f:MOV RSI,RCX
	0000e862:MOV RDI,RAX
	0000e865:CALL 0x00005920
	0000e86a:TEST EAX,EAX
	0000e86c:JNZ 0x0000e899
	0000e86e:MOV RAX,qword ptr [RBP + -0x298]
	0000e875:MOV qword ptr [0x00040558],RAX
	0000e87c:MOV RAX,qword ptr [0x00040518]
	0000e883:MOV qword ptr [0x00040560],RAX
	0000e88a:MOV dword ptr [RBP + -0x2b8],0x6
	0000e894:JMP 0x0000f001
	0000e899:MOV RAX,qword ptr [RBP + -0x278]
	0000e8a0:MOV qword ptr [RBP + -0x270],RAX
	0000e8a7:JMP 0x0000e8b1
	0000e8a9:ADD qword ptr [RBP + -0x270],0x2
	0000e8b1:MOV RAX,qword ptr [RBP + -0x270]
	0000e8b8:MOVZX EAX,byte ptr [RAX]
	0000e8bb:CMP AL,0x2d
	0000e8bd:JNZ 0x0000e8d1
	0000e8bf:MOV RAX,qword ptr [RBP + -0x270]
	0000e8c6:ADD RAX,0x1
	0000e8ca:MOVZX EAX,byte ptr [RAX]
	0000e8cd:CMP AL,0x20
	0000e8cf:JZ 0x0000e8a9
	0000e8d1:MOV RAX,qword ptr [RBP + -0x270]
	0000e8d8:MOV EDX,0x4
	0000e8dd:LEA RCX,[0x330df]
	0000e8e4:MOV RSI,RCX
	0000e8e7:MOV RDI,RAX
	0000e8ea:CALL 0x00005920
	0000e8ef:TEST EAX,EAX
	0000e8f1:JNZ 0x0000e990
	0000e8f7:MOV qword ptr [RBP + -0x220],-0x1
	0000e902:LEA RAX,[0x3e364]
	0000e909:MOV EAX,dword ptr [RAX]
	0000e90b:MOV RDX,qword ptr [RBP + -0x270]
	0000e912:LEA RDI,[RDX + 0x4]
	0000e916:LEA RDX,[RBP + -0x220]
	0000e91d:MOV R8,RDX
	0000e920:LEA RDX,[0x404b8]
	0000e927:MOV RCX,RDX
	0000e92a:LEA RDX,[0x40488]
	0000e931:MOV ESI,EAX
	0000e933:CALL 0x0001970d
	0000e938:MOV byte ptr [RBP + -0x2d4],0x0
	0000e93f:MOV RAX,qword ptr [RBP + -0x220]
	0000e946:CMP RAX,-0x1
	0000e94a:JZ 0x0000e980
	0000e94c:LEA RCX,[0x40440]
	0000e953:MOV RAX,qword ptr [RBP + -0x220]
	0000e95a:MOV RDX,qword ptr [RBP + -0x218]
	0000e961:MOV qword ptr [RCX + 0x10],RAX
	0000e965:MOV qword ptr [RCX + 0x18],RDX
	0000e969:MOV RAX,qword ptr [RBP + -0x270]
	0000e970:SUB RAX,qword ptr [RBP + -0x278]
	0000e977:SAR RAX,0x1
	0000e97a:MOV dword ptr [0x00040478],EAX
	0000e980:MOVZX EAX,byte ptr [RBP + -0x2c0]
	0000e987:MOV byte ptr [0x00040540],AL
	0000e98d:JMP 0x0000e990
	0000e98f:NOP
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
	0000e997:JNZ 0x0000effa
END_OF_LINE
----------------------------------------------
349: if ((((diff_type == NO_DIFF) || (diff_type == ED_DIFF)) && (-1 < first_command_line)) &&
	0000e9a6:TEST EAX,EAX
	0000e9a8:JZ 0x0000e9b8
	0000e9aa:LEA RAX,[0x3e374]
	0000e9b1:MOV EAX,dword ptr [RAX]
	0000e9b3:CMP EAX,0x3
	0000e9b6:JNZ 0x0000ea0a
	0000e9b8:CMP qword ptr [RBP + -0x290],0x0
	0000e9c0:JS 0x0000ea0a
	0000e9c2:MOV RAX,qword ptr [RBP + -0x278]
	0000e9c9:LEA RDX,[0x330e4]
	0000e9d0:MOV RSI,RDX
	0000e9d3:MOV RDI,RAX
	0000e9d6:CALL 0x00005ce0
	0000e9db:TEST EAX,EAX
	0000e9dd:JNZ 0x0000ea0a
END_OF_LINE
----------------------------------------------
350: (iVar18 = strcmp(s,".\n"), iVar18 == 0)) {
	0000e9d6:CALL 0x00005ce0
	0000e9db:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
351: p_start = first_command_line;
	0000e9e6:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
352: p_sline = fcl_line;
	0000e9f4:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
353: retval = ED_DIFF;
	0000e9fb:MOV dword ptr [RBP + -0x2b8],0x3
END_OF_LINE
----------------------------------------------
354: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
356: if (((diff_type == NO_DIFF) || (diff_type == UNI_DIFF)) &&
	0000ea13:TEST EAX,EAX
	0000ea15:JZ 0x0000ea29
	0000ea17:LEA RAX,[0x3e374]
	0000ea1e:MOV EAX,dword ptr [RAX]
	0000ea20:CMP EAX,0x5
	0000ea23:JNZ 0x0000eca4
	0000ea29:MOV RAX,qword ptr [RBP + -0x278]
	0000ea30:MOV EDX,0x4
	0000ea35:LEA RCX,[0x330e7]
	0000ea3c:MOV RSI,RCX
	0000ea3f:MOV RDI,RAX
	0000ea42:CALL 0x00005920
	0000ea47:TEST EAX,EAX
	0000ea49:JNZ 0x0000eca4
END_OF_LINE
----------------------------------------------
357: (iVar18 = strncmp(s,"@@ -",4), pcVar13 = p_timestr[0], pcVar21 = p_name[0],
	0000ea42:CALL 0x00005920
END_OF_LINE
----------------------------------------------
358: _Var12 = p_timestamp[1].tv_sec, _Var6 = p_timestamp[0].tv_nsec, _Var5 = p_timestamp[0].tv_sec,
	0000ea42:CALL 0x00005920
END_OF_LINE
----------------------------------------------
359: iVar18 == 0)) {
	0000ea47:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
360: u_1 = (char *)p_timestamp[0].tv_sec;
	0000ea5d:MOV qword ptr [RBP + -0x220],RAX
END_OF_LINE
----------------------------------------------
361: local_220 = p_timestamp[0].tv_nsec;
	0000ea64:MOV qword ptr [RBP + -0x218],RDX
END_OF_LINE
----------------------------------------------
362: p_timestamp[0].tv_sec = p_timestamp[1].tv_sec;
	0000ea81:MOV qword ptr [RCX],RAX
END_OF_LINE
----------------------------------------------
363: p_timestamp[0].tv_nsec = p_timestamp[1].tv_nsec;
	0000ea84:MOV qword ptr [RCX + 0x8],RDX
END_OF_LINE
----------------------------------------------
364: p_timestamp[1].tv_sec = _Var5;
	0000ea9d:MOV qword ptr [RCX + 0x10],RAX
END_OF_LINE
----------------------------------------------
365: p_timestamp[1].tv_nsec = _Var6;
	0000eaa1:MOV qword ptr [RCX + 0x18],RDX
END_OF_LINE
----------------------------------------------
366: p_name[0] = p_name[1];
	0000eaba:MOV qword ptr [0x00040480],RAX
END_OF_LINE
----------------------------------------------
367: p_name[1] = pcVar21;
	0000eac8:MOV qword ptr [0x00040488],RAX
END_OF_LINE
----------------------------------------------
368: t = p_timestr[0];
	0000ead6:MOV qword ptr [RBP + -0x270],RAX
END_OF_LINE
----------------------------------------------
369: p_timestr[0] = p_timestr[1];
	0000eae4:MOV qword ptr [0x000404b0],RAX
END_OF_LINE
----------------------------------------------
370: p_timestr[1] = pcVar13;
	0000eaf2:MOV qword ptr [0x000404b8],RAX
END_OF_LINE
----------------------------------------------
371: pcVar21 = s + 4;
	0000eaf9:ADD qword ptr [RBP + -0x278],0x4
END_OF_LINE
----------------------------------------------
372: if ((*pcVar21 == '0') && (9 < (int)s[5] - 0x30U)) {
	0000eb08:MOVZX EAX,byte ptr [RAX]
	0000eb0b:CMP AL,0x30
	0000eb0d:JNZ 0x0000eb53
	0000eb0f:MOV RAX,qword ptr [RBP + -0x278]
	0000eb16:ADD RAX,0x1
	0000eb1a:MOVZX EAX,byte ptr [RAX]
	0000eb1d:MOVSX EAX,AL
	0000eb20:SUB EAX,0x30
	0000eb23:CMP EAX,0x9
	0000eb26:JBE 0x0000eb53
END_OF_LINE
----------------------------------------------
373: if (_Var12 == 0) {
	0000eb32:TEST RAX,RAX
	0000eb35:JNZ 0x0000eb3e
END_OF_LINE
----------------------------------------------
374: p_says_nonexistent[0] = 2;
	0000eb37:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
377: p_says_nonexistent[0] = 1;
	0000eb3e:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
380: while ((s = pcVar21, *s != ' ' && (*s != '\n'))) {
	0000eb53:MOV RAX,qword ptr [RBP + -0x278]
	0000eb5a:MOVZX EAX,byte ptr [RAX]
	0000eb5d:CMP AL,0x20
	0000eb5f:JZ 0x0000eb79
	0000eb61:MOV RAX,qword ptr [RBP + -0x278]
	0000eb68:MOVZX EAX,byte ptr [RAX]
	0000eb6b:CMP AL,0xa
	0000eb6d:JNZ 0x0000eb4b
END_OF_LINE
----------------------------------------------
381: pcVar21 = s + 1;
	0000eb4b:ADD qword ptr [RBP + -0x278],0x1
END_OF_LINE
----------------------------------------------
383: for (; *s == ' '; s = s + 1) {
	0000eb71:ADD qword ptr [RBP + -0x278],0x1
	0000eb79:MOV RAX,qword ptr [RBP + -0x278]
	0000eb80:MOVZX EAX,byte ptr [RAX]
	0000eb83:CMP AL,0x20
	0000eb85:JZ 0x0000eb71
END_OF_LINE
----------------------------------------------
385: if (((*s == '+') && (s[1] == '0')) && (9 < (int)s[2] - 0x30U)) {
	0000eb8e:MOVZX EAX,byte ptr [RAX]
	0000eb91:CMP AL,0x2b
	0000eb93:JNZ 0x0000ebe2
	0000eb95:MOV RAX,qword ptr [RBP + -0x278]
	0000eb9c:ADD RAX,0x1
	0000eba0:MOVZX EAX,byte ptr [RAX]
	0000eba3:CMP AL,0x30
	0000eba5:JNZ 0x0000ebe2
	0000eba7:MOV RAX,qword ptr [RBP + -0x278]
	0000ebae:ADD RAX,0x2
	0000ebb2:MOVZX EAX,byte ptr [RAX]
	0000ebb5:MOVSX EAX,AL
	0000ebb8:SUB EAX,0x30
	0000ebbb:CMP EAX,0x9
	0000ebbe:JBE 0x0000ebe2
END_OF_LINE
----------------------------------------------
386: if (_Var5 == 0) {
	0000ebcb:TEST RAX,RAX
	0000ebce:JNZ 0x0000ebd7
END_OF_LINE
----------------------------------------------
387: p_says_nonexistent[1] = 2;
	0000ebd0:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
390: p_says_nonexistent[1] = 1;
	0000ebd7:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
393: p_indent = indent;
	0000ebe9:MOV qword ptr [0x00040538],RAX
END_OF_LINE
----------------------------------------------
394: p_start = this_line;
	0000ebf7:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
395: p_sline = p_input_line;
	0000ec05:MOV qword ptr [0x00040560],RAX
END_OF_LINE
----------------------------------------------
396: retval = UNI_DIFF;
	0000ec0c:MOV dword ptr [RBP + -0x2b8],0x5
END_OF_LINE
----------------------------------------------
399: iVar18 = strncmp(s,"********",8);
	0000ecbd:CALL 0x00005920
END_OF_LINE
----------------------------------------------
400: bVar25 = iVar18 == 0;
	0000ecc2:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
401: if ((((diff_type != NO_DIFF) && (diff_type != CONTEXT_DIFF)) && (diff_type != NEW_CONTEXT_DIFF))
	0000ecd6:TEST EAX,EAX
	0000ecd8:JZ 0x0000ecfa
	0000ecda:LEA RAX,[0x3e374]
	0000ece1:MOV EAX,dword ptr [RAX]
	0000ece3:CMP EAX,0x1
	0000ece6:JZ 0x0000ecfa
	0000ece8:LEA RAX,[0x3e374]
	0000ecef:MOV EAX,dword ptr [RAX]
	0000ecf1:CMP EAX,0x4
	0000ecf4:JNZ 0x0000ef4c
	0000ecfa:CMP byte ptr [RBP + -0x2c1],0x0
	0000ed01:JZ 0x0000ef4c
	0000ed07:MOV RAX,qword ptr [RBP + -0x258]
	0000ed0e:CMP RAX,qword ptr [RBP + -0x280]
	0000ed15:JNZ 0x0000ef4c
	0000ed1b:MOV RAX,qword ptr [RBP + -0x278]
	0000ed22:MOV EDX,0x4
	0000ed27:LEA RCX,[0x3300d]
	0000ed2e:MOV RSI,RCX
	0000ed31:MOV RDI,RAX
	0000ed34:CALL 0x00005920
	0000ed39:TEST EAX,EAX
	0000ed3b:JNZ 0x0000ef4c
END_OF_LINE
----------------------------------------------
402: || (((!bVar9 || (indent_last_line != indent)) || (iVar18 = strncmp(s,"*** ",4), iVar18 != 0))
	0000ed01:JZ 0x0000ef4c
	0000ed07:MOV RAX,qword ptr [RBP + -0x258]
	0000ed0e:CMP RAX,qword ptr [RBP + -0x280]
	0000ed15:JNZ 0x0000ef4c
	0000ed1b:MOV RAX,qword ptr [RBP + -0x278]
	0000ed22:MOV EDX,0x4
	0000ed27:LEA RCX,[0x3300d]
	0000ed2e:MOV RSI,RCX
	0000ed31:MOV RDI,RAX
	0000ed34:CALL 0x00005920
	0000ed39:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
404: bVar9 = bVar25;
	0000ef57:JZ 0x0000ef6b
END_OF_LINE
----------------------------------------------
405: if (((diff_type == NO_DIFF) || (diff_type == NORMAL_DIFF)) &&
	0000ef55:TEST EAX,EAX
	0000ef57:JZ 0x0000ef6b
	0000ef59:LEA RAX,[0x3e374]
	0000ef60:MOV EAX,dword ptr [RAX]
	0000ef62:CMP EAX,0x2
	0000ef65:JNZ 0x0000dbe0
	0000ef6b:CMP byte ptr [RBP + -0x2c2],0x0
	0000ef72:JZ 0x0000dbe0
	0000ef78:MOV RAX,qword ptr [RBP + -0x278]
	0000ef7f:MOV EDX,0x2
	0000ef84:LEA RCX,[0x33165]
	0000ef8b:MOV RSI,RCX
	0000ef8e:MOV RDI,RAX
	0000ef91:CALL 0x00005920
	0000ef96:TEST EAX,EAX
	0000ef98:JZ 0x0000efc0
	0000ef9a:MOV RAX,qword ptr [RBP + -0x278]
	0000efa1:MOV EDX,0x2
	0000efa6:LEA RCX,[0x33168]
	0000efad:MOV RSI,RCX
	0000efb0:MOV RDI,RAX
	0000efb3:CALL 0x00005920
	0000efb8:TEST EAX,EAX
	0000efba:JNZ 0x0000dbe0
END_OF_LINE
----------------------------------------------
406: ((bVar8 && ((iVar18 = strncmp(s,"< ",2), iVar18 == 0 ||
	0000ef72:JZ 0x0000dbe0
	0000ef78:MOV RAX,qword ptr [RBP + -0x278]
	0000ef7f:MOV EDX,0x2
	0000ef84:LEA RCX,[0x33165]
	0000ef8b:MOV RSI,RCX
	0000ef8e:MOV RDI,RAX
	0000ef91:CALL 0x00005920
	0000ef96:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
407: (iVar18 = strncmp(s,"> ",2), iVar18 == 0)))))) goto LAB_0000efc0;
	0000efb3:CALL 0x00005920
	0000efb8:TEST EAX,EAX
	0000efba:JNZ 0x0000dbe0
	0000efc0:MOV RAX,qword ptr [RBP + -0x260]
END_OF_LINE
----------------------------------------------
408: goto LAB_0000dbe0;
	0000dbe0:MOV RAX,qword ptr [RBP + -0x298]
END_OF_LINE
----------------------------------------------
410: pcVar21 = s + 4;
	0000ed41:ADD qword ptr [RBP + -0x278],0x4
END_OF_LINE
----------------------------------------------
411: if ((*pcVar21 == '0') && (9 < (int)s[5] - 0x30U)) {
	0000ed50:MOVZX EAX,byte ptr [RAX]
	0000ed53:CMP AL,0x30
	0000ed55:JNZ 0x0000ed9b
	0000ed57:MOV RAX,qword ptr [RBP + -0x278]
	0000ed5e:ADD RAX,0x1
	0000ed62:MOVZX EAX,byte ptr [RAX]
	0000ed65:MOVSX EAX,AL
	0000ed68:SUB EAX,0x30
	0000ed6b:CMP EAX,0x9
	0000ed6e:JBE 0x0000ed9b
END_OF_LINE
----------------------------------------------
412: if (p_timestamp[0].tv_sec == 0) {
	0000ed7a:TEST RAX,RAX
	0000ed7d:JNZ 0x0000ed86
END_OF_LINE
----------------------------------------------
413: p_says_nonexistent[0] = 2;
	0000ed7f:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
416: p_says_nonexistent[0] = 1;
	0000ed86:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
419: while (s = pcVar21, *s != '\n') {
	0000ed9b:MOV RAX,qword ptr [RBP + -0x278]
	0000eda2:MOVZX EAX,byte ptr [RAX]
	0000eda5:CMP AL,0xa
	0000eda7:JNZ 0x0000ed93
END_OF_LINE
----------------------------------------------
420: pcVar21 = s + 1;
	0000ed93:ADD qword ptr [RBP + -0x278],0x1
END_OF_LINE
----------------------------------------------
422: p_indent = indent;
	0000edb0:MOV qword ptr [0x00040538],RAX
END_OF_LINE
----------------------------------------------
423: p_start = previous_line;
	0000edcb:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
424: p_sline = p_input_line + -1;
	0000edd9:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
425: if (s[-1] == '*') {
	0000edeb:SUB RAX,0x1
	0000edef:MOVZX EAX,byte ptr [RAX]
	0000edf2:CMP AL,0x2a
	0000edf4:JNZ 0x0000edfd
END_OF_LINE
----------------------------------------------
426: retval = NEW_CONTEXT_DIFF;
	0000edf6:MOV EAX,0x4
END_OF_LINE
----------------------------------------------
429: retval = CONTEXT_DIFF;
	0000edfd:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
431: saved_p_base = p_base;
	0000ee0f:MOV qword ptr [RBP + -0x238],RAX
END_OF_LINE
----------------------------------------------
432: saved_p_bline = p_bline;
	0000ee1d:MOV qword ptr [RBP + -0x230],RAX
END_OF_LINE
----------------------------------------------
433: p_strip_trailing_cr = _Var15;
	0000ee3d:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
434: Fseek(pfp,previous_line,0);
	0000ee3d:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
435: p_input_line = p_input_line + -2;
	0000ee49:SUB RAX,0x2
END_OF_LINE
----------------------------------------------
436: iVar18 = another_hunk(retval,false);
	0000ee61:CALL 0x0001022e
END_OF_LINE
----------------------------------------------
437: if (((iVar18 != 0) && (p_repl_lines == 0)) && (p_newfirst == 1)) {
	0000ee66:TEST EAX,EAX
	0000ee68:JZ 0x0000eea5
	0000ee6a:MOV RAX,qword ptr [0x000404f8]
	0000ee71:TEST RAX,RAX
	0000ee74:JNZ 0x0000eea5
	0000ee76:MOV RAX,qword ptr [0x000404e8]
	0000ee7d:CMP RAX,0x1
	0000ee81:JNZ 0x0000eea5
END_OF_LINE
----------------------------------------------
438: if (p_timestamp[1].tv_sec == 0) {
	0000ee8e:TEST RAX,RAX
	0000ee91:JNZ 0x0000ee9a
END_OF_LINE
----------------------------------------------
439: p_says_nonexistent[1] = 2;
	0000ee93:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
442: p_says_nonexistent[1] = 1;
	0000ee9a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
445: next_intuit_at(saved_p_base,saved_p_bline);
	0000eeb9:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
447: LAB_0000f001:
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE
----------------------------------------------
448: file_type = p_mode[0] & 0xf000;
	0000f007:AND EAX,0xf000
END_OF_LINE
----------------------------------------------
449: if (file_type == 0) {
	0000f012:CMP dword ptr [RBP + -0x2b4],0x0
	0000f019:JZ 0x0000f04f
END_OF_LINE
----------------------------------------------
450: file_type = p_mode[1] & 0xf000;
	0000f055:AND EAX,0xf000
END_OF_LINE
----------------------------------------------
451: if (file_type == 0) {
	0000f060:CMP dword ptr [RBP + -0x2b4],0x0
	0000f067:JNZ 0x0000f073
END_OF_LINE
----------------------------------------------
452: file_type = 0x8000;
	0000f069:MOV dword ptr [RBP + -0x2b4],0x8000
END_OF_LINE
----------------------------------------------
455: else if (((p_mode[1] & 0xf000) != 0) && (file_type != (p_mode[1] & 0xf000))) {
	0000f021:AND EAX,0xf000
	0000f026:MOV dword ptr [RBP + -0x2a4],EAX
	0000f02c:CMP dword ptr [RBP + -0x2a4],0x0
	0000f033:JZ 0x0000f073
	0000f035:MOV EAX,dword ptr [RBP + -0x2b4]
	0000f03b:CMP EAX,dword ptr [RBP + -0x2a4]
	0000f041:JZ 0x0000f073
END_OF_LINE
----------------------------------------------
456: file_type = 0;
	0000f043:MOV dword ptr [RBP + -0x2b4],0x0
END_OF_LINE
----------------------------------------------
458: *p_file_type = file_type;
	0000f080:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
459: i = NONE;
	0000f082:MOV dword ptr [RBP + -0x2bc],0x3
END_OF_LINE
----------------------------------------------
460: if (inname == (char *)0x0) {
	0000f096:TEST RAX,RAX
	0000f099:JNZ 0x0000f875
END_OF_LINE
----------------------------------------------
461: i0 = NONE;
	0000f09f:MOV dword ptr [RBP + -0x2b0],0x3
END_OF_LINE
----------------------------------------------
462: if (((posixly_correct != true) && ((p_name[0] != (char *)0x0 || (p_name[1] != (char *)0x0)))) &&
	0000f0b6:TEST AL,AL
	0000f0b8:JZ 0x0000f0f8
	0000f0ba:MOV RAX,qword ptr [0x00040480]
	0000f0c1:TEST RAX,RAX
	0000f0c4:JNZ 0x0000f0d2
	0000f0c6:MOV RAX,qword ptr [0x00040488]
	0000f0cd:TEST RAX,RAX
	0000f0d0:JZ 0x0000f0f8
	0000f0d2:MOV RAX,qword ptr [0x00040490]
	0000f0d9:TEST RAX,RAX
	0000f0dc:JZ 0x0000f0f8
END_OF_LINE
----------------------------------------------
463: (p_name[2] != (char *)0x0)) {
	0000f0d9:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
464: free(p_name[2]);
	0000f0e8:CALL 0x00005860
END_OF_LINE
----------------------------------------------
465: p_name[2] = (char *)0x0;
	0000f0ed:MOV qword ptr [0x00040490],0x0
END_OF_LINE
----------------------------------------------
467: for (i = OLD; i < NONE; i = i + NEW) {
	0000f0f8:MOV dword ptr [RBP + -0x2bc],0x0
	0000f102:JMP 0x0000f372
	0000f107:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f10d:LEA RDX,[RAX*0x8]
	0000f115:LEA RAX,[0x40480]
	0000f11c:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f120:TEST RAX,RAX
	0000f123:JZ 0x0000f36b
	0000f129:CMP dword ptr [RBP + -0x2b0],0x3
	0000f130:JZ 0x0000f28d
	0000f136:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f13c:LEA RDX,[RAX*0x8]
	0000f144:LEA RAX,[0x40480]
	0000f14b:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f14f:MOV EAX,dword ptr [RBP + -0x2b0]
	0000f155:LEA RCX,[RAX*0x8]
	0000f15d:LEA RAX,[0x40480]
	0000f164:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f168:MOV RSI,RDX
	0000f16b:MOV RDI,RAX
	0000f16e:CALL 0x00005ce0
	0000f173:TEST EAX,EAX
	0000f175:JNZ 0x0000f28d
	0000f17b:MOV EAX,dword ptr [RBP + -0x2b0]
	0000f181:MOV EDX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f188:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f18e:MOV dword ptr [RBP + RAX*0x4 + -0x210],EDX
	0000f195:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f19b:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f1a2:TEST EAX,EAX
	0000f1a4:JNZ 0x0000f35f
	0000f1aa:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f1b0:MOV RAX,RDX
	0000f1b3:SHL RAX,0x3
	0000f1b7:ADD RAX,RDX
	0000f1ba:SHL RAX,0x4
	0000f1be:LEA RAX,[RAX + -0x10]
	0000f1c2:ADD RAX,RBP
	0000f1c5:SUB RAX,0x1d0
	0000f1cb:MOV ECX,dword ptr [RBP + -0x2b0]
	0000f1d1:MOV RDX,RCX
	0000f1d4:SHL RDX,0x3
	0000f1d8:ADD RDX,RCX
	0000f1db:SHL RDX,0x4
	0000f1df:LEA RBX,[RDX + -0x10]
	0000f1e3:LEA RDX,[RBX + RBP*0x1]
	0000f1e7:SUB RDX,0x1d0
	0000f1ee:MOV RCX,qword ptr [RDX]
	0000f1f1:MOV RBX,qword ptr [RDX + 0x8]
	0000f1f5:MOV qword ptr [RAX],RCX
	0000f1f8:MOV qword ptr [RAX + 0x8],RBX
	0000f1fc:MOV RCX,qword ptr [RDX + 0x10]
	0000f200:MOV RBX,qword ptr [RDX + 0x18]
	0000f204:MOV qword ptr [RAX + 0x10],RCX
	0000f208:MOV qword ptr [RAX + 0x18],RBX
	0000f20c:MOV RCX,qword ptr [RDX + 0x20]
	0000f210:MOV RBX,qword ptr [RDX + 0x28]
	0000f214:MOV qword ptr [RAX + 0x20],RCX
	0000f218:MOV qword ptr [RAX + 0x28],RBX
	0000f21c:MOV RCX,qword ptr [RDX + 0x30]
	0000f220:MOV RBX,qword ptr [RDX + 0x38]
	0000f224:MOV qword ptr [RAX + 0x30],RCX
	0000f228:MOV qword ptr [RAX + 0x38],RBX
	0000f22c:MOV RCX,qword ptr [RDX + 0x40]
	0000f230:MOV RBX,qword ptr [RDX + 0x48]
	0000f234:MOV qword ptr [RAX + 0x40],RCX
	0000f238:MOV qword ptr [RAX + 0x48],RBX
	0000f23c:MOV RCX,qword ptr [RDX + 0x50]
	0000f240:MOV RBX,qword ptr [RDX + 0x58]
	0000f244:MOV qword ptr [RAX + 0x50],RCX
	0000f248:MOV qword ptr [RAX + 0x58],RBX
	0000f24c:MOV RCX,qword ptr [RDX + 0x60]
	0000f250:MOV RBX,qword ptr [RDX + 0x68]
	0000f254:MOV qword ptr [RAX + 0x60],RCX
	0000f258:MOV qword ptr [RAX + 0x68],RBX
	0000f25c:MOV RCX,qword ptr [RDX + 0x70]
	0000f260:MOV RBX,qword ptr [RDX + 0x78]
	0000f264:MOV qword ptr [RAX + 0x70],RCX
	0000f268:MOV qword ptr [RAX + 0x78],RBX
	0000f26c:MOV RCX,qword ptr [RDX + 0x80]
	0000f273:MOV RBX,qword ptr [RDX + 0x88]
	0000f27a:MOV qword ptr [RAX + 0x80],RCX
	0000f281:MOV qword ptr [RAX + 0x88],RBX
	0000f288:JMP 0x0000f35f
	0000f28d:LEA RCX,[RBP + -0x1e0]
	0000f294:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f29a:MOV RAX,RDX
	0000f29d:SHL RAX,0x3
	0000f2a1:ADD RAX,RDX
	0000f2a4:SHL RAX,0x4
	0000f2a8:LEA RDX,[RCX + RAX*0x1]
	0000f2ac:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f2b2:LEA RCX,[RAX*0x8]
	0000f2ba:LEA RAX,[0x40480]
	0000f2c1:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f2c5:MOV RSI,RDX
	0000f2c8:MOV RDI,RAX
	0000f2cb:CALL 0x00019f6e
	0000f2d0:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f2d6:MOV dword ptr [RBP + RDX*0x4 + -0x210],EAX
	0000f2dd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f2e3:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f2ea:TEST EAX,EAX
	0000f2ec:JNZ 0x0000f35f
	0000f2ee:LEA RCX,[RBP + -0x1e0]
	0000f2f5:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f2fb:MOV RAX,RDX
	0000f2fe:SHL RAX,0x3
	0000f302:ADD RAX,RDX
	0000f305:SHL RAX,0x4
	0000f309:ADD RAX,RCX
	0000f30c:MOV RDI,RAX
	0000f30f:CALL 0x000162fe
	0000f314:CMP EAX,0x2
	0000f317:JNZ 0x0000f32c
	0000f319:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f31f:MOV dword ptr [RBP + RAX*0x4 + -0x210],0x2
	0000f32a:JMP 0x0000f35f
	0000f32c:LEA RAX,[0x3e311]
	0000f333:MOVZX EAX,byte ptr [RAX]
	0000f336:TEST AL,AL
	0000f338:JZ 0x0000f35f
	0000f33a:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f340:LEA RDX,[RAX*0x8]
	0000f348:LEA RAX,[0x40480]
	0000f34f:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f353:MOV RDI,RAX
	0000f356:CALL 0x0000d7af
	0000f35b:TEST AL,AL
	0000f35d:JNZ 0x0000f381
	0000f35f:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f365:MOV dword ptr [RBP + -0x2b0],EAX
	0000f36b:ADD dword ptr [RBP + -0x2bc],0x1
	0000f372:CMP dword ptr [RBP + -0x2bc],0x2
	0000f379:JBE 0x0000f107
END_OF_LINE
----------------------------------------------
468: if (p_name[i] != (char *)0x0) {
	0000f107:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f10d:LEA RDX,[RAX*0x8]
	0000f115:LEA RAX,[0x40480]
	0000f11c:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f120:TEST RAX,RAX
	0000f123:JZ 0x0000f36b
END_OF_LINE
----------------------------------------------
469: if ((i0 == NONE) || (iVar18 = strcmp(p_name[i0],p_name[i]), iVar18 != 0)) {
	0000f129:CMP dword ptr [RBP + -0x2b0],0x3
	0000f130:JZ 0x0000f28d
	0000f136:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f13c:LEA RDX,[RAX*0x8]
	0000f144:LEA RAX,[0x40480]
	0000f14b:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f14f:MOV EAX,dword ptr [RBP + -0x2b0]
	0000f155:LEA RCX,[RAX*0x8]
	0000f15d:LEA RAX,[0x40480]
	0000f164:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f168:MOV RSI,RDX
	0000f16b:MOV RDI,RAX
	0000f16e:CALL 0x00005ce0
	0000f173:TEST EAX,EAX
	0000f175:JNZ 0x0000f28d
END_OF_LINE
----------------------------------------------
470: iVar18 = stat_file(p_name[i],st + i);
	0000f294:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f29a:MOV RAX,RDX
	0000f29d:SHL RAX,0x3
	0000f2a1:ADD RAX,RDX
	0000f2a4:SHL RAX,0x4
	0000f2a8:LEA RDX,[RCX + RAX*0x1]
	0000f2ac:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f2b2:LEA RCX,[RAX*0x8]
	0000f2ba:LEA RAX,[0x40480]
	0000f2c1:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f2c5:MOV RSI,RDX
	0000f2c8:MOV RDI,RAX
	0000f2cb:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
471: stat_errno[i] = iVar18;
	0000f2d0:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f2d6:MOV dword ptr [RBP + RDX*0x4 + -0x210],EAX
END_OF_LINE
----------------------------------------------
472: if (stat_errno[i] == 0) {
	0000f2dd:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f2e3:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f2ea:TEST EAX,EAX
	0000f2ec:JNZ 0x0000f35f
END_OF_LINE
----------------------------------------------
473: fVar16 = lookup_file_id(st + i);
	0000f2f5:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f2fb:MOV RAX,RDX
	0000f2fe:SHL RAX,0x3
	0000f302:ADD RAX,RDX
	0000f305:SHL RAX,0x4
	0000f309:ADD RAX,RCX
	0000f30c:MOV RDI,RAX
	0000f30f:CALL 0x000162fe
END_OF_LINE
----------------------------------------------
474: if (fVar16 == DELETE_LATER) {
	0000f314:CMP EAX,0x2
	0000f317:JNZ 0x0000f32c
END_OF_LINE
----------------------------------------------
475: stat_errno[i] = 2;
	0000f319:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f31f:MOV dword ptr [RBP + RAX*0x4 + -0x210],0x2
END_OF_LINE
----------------------------------------------
477: else if ((posixly_correct != false) && (_Var15 = name_is_valid(p_name[i]), _Var15))
	0000f336:TEST AL,AL
	0000f338:JZ 0x0000f35f
	0000f33a:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f340:LEA RDX,[RAX*0x8]
	0000f348:LEA RAX,[0x40480]
	0000f34f:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f353:MOV RDI,RAX
	0000f356:CALL 0x0000d7af
	0000f35b:TEST AL,AL
	0000f35d:JNZ 0x0000f381
END_OF_LINE
----------------------------------------------
482: stat_errno[i] = stat_errno[i0];
	0000f17b:MOV EAX,dword ptr [RBP + -0x2b0]
	0000f181:MOV EDX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f188:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f18e:MOV dword ptr [RBP + RAX*0x4 + -0x210],EDX
END_OF_LINE
----------------------------------------------
483: if (stat_errno[i] == 0) {
	0000f195:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f19b:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f1a2:TEST EAX,EAX
	0000f1a4:JNZ 0x0000f35f
END_OF_LINE
----------------------------------------------
484: uVar23 = (ulong)i;
	0000f1aa:MOV EDX,dword ptr [RBP + -0x2bc]
END_OF_LINE
----------------------------------------------
485: uVar22 = (ulong)i0;
	0000f1cb:MOV ECX,dword ptr [RBP + -0x2b0]
END_OF_LINE
----------------------------------------------
486: _Var2 = st[uVar22].st_ino;
	0000f1f1:MOV RBX,qword ptr [RDX + 0x8]
END_OF_LINE
----------------------------------------------
487: st[uVar23].st_dev = st[uVar22].st_dev;
	0000f1c5:SUB RAX,0x1d0
	0000f1cb:MOV ECX,dword ptr [RBP + -0x2b0]
	0000f1d1:MOV RDX,RCX
	0000f1d4:SHL RDX,0x3
	0000f1d8:ADD RDX,RCX
	0000f1db:SHL RDX,0x4
	0000f1df:LEA RBX,[RDX + -0x10]
	0000f1e3:LEA RDX,[RBX + RBP*0x1]
	0000f1e7:SUB RDX,0x1d0
	0000f1ee:MOV RCX,qword ptr [RDX]
	0000f1f1:MOV RBX,qword ptr [RDX + 0x8]
	0000f1f5:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
488: st[uVar23].st_ino = _Var2;
	0000f1f8:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
489: _Var10 = st[uVar22].st_mode;
	0000f200:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
490: _Var11 = st[uVar22].st_uid;
	0000f200:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
491: st[uVar23].st_nlink = st[uVar22].st_nlink;
	0000f1fc:MOV RCX,qword ptr [RDX + 0x10]
	0000f200:MOV RBX,qword ptr [RDX + 0x18]
	0000f204:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
492: st[uVar23].st_mode = _Var10;
	0000f208:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
493: st[uVar23].st_uid = _Var11;
	0000f208:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
494: iVar18 = st[uVar22].__pad0;
	0000f20c:MOV RCX,qword ptr [RDX + 0x20]
END_OF_LINE
----------------------------------------------
495: _Var3 = st[uVar22].st_rdev;
	0000f210:MOV RBX,qword ptr [RDX + 0x28]
END_OF_LINE
----------------------------------------------
496: st[uVar23].st_gid = st[uVar22].st_gid;
	0000f20c:MOV RCX,qword ptr [RDX + 0x20]
	0000f210:MOV RBX,qword ptr [RDX + 0x28]
	0000f214:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
497: st[uVar23].__pad0 = iVar18;
	0000f214:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
498: st[uVar23].st_rdev = _Var3;
	0000f218:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
499: _Var4 = st[uVar22].st_blksize;
	0000f220:MOV RBX,qword ptr [RDX + 0x38]
END_OF_LINE
----------------------------------------------
500: st[uVar23].st_size = st[uVar22].st_size;
	0000f21c:MOV RCX,qword ptr [RDX + 0x30]
	0000f220:MOV RBX,qword ptr [RDX + 0x38]
	0000f224:MOV qword ptr [RAX + 0x30],RCX
END_OF_LINE
----------------------------------------------
501: st[uVar23].st_blksize = _Var4;
	0000f228:MOV qword ptr [RAX + 0x38],RBX
END_OF_LINE
----------------------------------------------
502: _Var5 = st[uVar22].st_atim.tv_sec;
	0000f230:MOV RBX,qword ptr [RDX + 0x48]
END_OF_LINE
----------------------------------------------
503: st[uVar23].st_blocks = st[uVar22].st_blocks;
	0000f22c:MOV RCX,qword ptr [RDX + 0x40]
	0000f230:MOV RBX,qword ptr [RDX + 0x48]
	0000f234:MOV qword ptr [RAX + 0x40],RCX
END_OF_LINE
----------------------------------------------
504: st[uVar23].st_atim.tv_sec = _Var5;
	0000f238:MOV qword ptr [RAX + 0x48],RBX
END_OF_LINE
----------------------------------------------
505: _Var5 = st[uVar22].st_mtim.tv_sec;
	0000f240:MOV RBX,qword ptr [RDX + 0x58]
END_OF_LINE
----------------------------------------------
506: st[uVar23].st_atim.tv_nsec = st[uVar22].st_atim.tv_nsec;
	0000f23c:MOV RCX,qword ptr [RDX + 0x50]
	0000f240:MOV RBX,qword ptr [RDX + 0x58]
	0000f244:MOV qword ptr [RAX + 0x50],RCX
END_OF_LINE
----------------------------------------------
507: st[uVar23].st_mtim.tv_sec = _Var5;
	0000f248:MOV qword ptr [RAX + 0x58],RBX
END_OF_LINE
----------------------------------------------
508: _Var5 = st[uVar22].st_ctim.tv_sec;
	0000f250:MOV RBX,qword ptr [RDX + 0x68]
END_OF_LINE
----------------------------------------------
509: st[uVar23].st_mtim.tv_nsec = st[uVar22].st_mtim.tv_nsec;
	0000f24c:MOV RCX,qword ptr [RDX + 0x60]
	0000f250:MOV RBX,qword ptr [RDX + 0x68]
	0000f254:MOV qword ptr [RAX + 0x60],RCX
END_OF_LINE
----------------------------------------------
510: st[uVar23].st_ctim.tv_sec = _Var5;
	0000f258:MOV qword ptr [RAX + 0x68],RBX
END_OF_LINE
----------------------------------------------
511: _Var6 = st[uVar22].__glibc_reserved[0];
	0000f260:MOV RBX,qword ptr [RDX + 0x78]
END_OF_LINE
----------------------------------------------
512: st[uVar23].st_ctim.tv_nsec = st[uVar22].st_ctim.tv_nsec;
	0000f25c:MOV RCX,qword ptr [RDX + 0x70]
	0000f260:MOV RBX,qword ptr [RDX + 0x78]
	0000f264:MOV qword ptr [RAX + 0x70],RCX
END_OF_LINE
----------------------------------------------
513: st[uVar23].__glibc_reserved[0] = _Var6;
	0000f268:MOV qword ptr [RAX + 0x78],RBX
END_OF_LINE
----------------------------------------------
514: _Var6 = st[uVar22].__glibc_reserved[2];
	0000f273:MOV RBX,qword ptr [RDX + 0x88]
END_OF_LINE
----------------------------------------------
515: st[uVar23].__glibc_reserved[1] = st[uVar22].__glibc_reserved[1];
	0000f26c:MOV RCX,qword ptr [RDX + 0x80]
	0000f273:MOV RBX,qword ptr [RDX + 0x88]
	0000f27a:MOV qword ptr [RAX + 0x80],RCX
END_OF_LINE
----------------------------------------------
516: st[uVar23].__glibc_reserved[2] = _Var6;
	0000f281:MOV qword ptr [RAX + 0x88],RBX
END_OF_LINE
----------------------------------------------
519: i0 = i;
	0000f365:MOV dword ptr [RBP + -0x2b0],EAX
END_OF_LINE
----------------------------------------------
522: if (posixly_correct != true) {
	0000f38f:TEST AL,AL
	0000f391:JZ 0x0000f875
END_OF_LINE
----------------------------------------------
523: i = best_name(p_name,stat_errno);
	0000f397:LEA RAX,[RBP + -0x210]
	0000f39e:MOV RSI,RAX
	0000f3a1:LEA RAX,[0x40480]
	0000f3a8:MOV RDI,RAX
	0000f3ab:CALL 0x0000fccb
END_OF_LINE
----------------------------------------------
524: if ((i == NONE) && (patch_get != 0)) {
	0000f3b6:CMP dword ptr [RBP + -0x2bc],0x3
	0000f3bd:JNZ 0x0000f604
	0000f3c3:LEA RAX,[0x3e36c]
	0000f3ca:MOV EAX,dword ptr [RAX]
	0000f3cc:TEST EAX,EAX
	0000f3ce:JZ 0x0000f604
END_OF_LINE
----------------------------------------------
525: nope = NONE;
	0000f3d4:MOV dword ptr [RBP + -0x2ac],0x3
END_OF_LINE
----------------------------------------------
526: for (i = OLD; i < NONE; i = i + NEW) {
	0000f3de:MOV dword ptr [RBP + -0x2bc],0x0
	0000f3e8:JMP 0x0000f5f4
	0000f3ed:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f3f3:LEA RDX,[RAX*0x8]
	0000f3fb:LEA RAX,[0x40480]
	0000f402:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f406:TEST RAX,RAX
	0000f409:JZ 0x0000f5ed
	0000f40f:LEA RAX,[0x3e260]
	0000f416:MOV RAX,qword ptr [RAX]
	0000f419:TEST RAX,RAX
	0000f41c:JZ 0x0000f457
	0000f41e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f424:LEA RDX,[RAX*0x8]
	0000f42c:LEA RAX,[0x40480]
	0000f433:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f437:LEA RAX,[0x3e260]
	0000f43e:MOV RAX,qword ptr [RAX]
	0000f441:MOV RSI,RDX
	0000f444:MOV RDI,RAX
	0000f447:CALL 0x00005ce0
	0000f44c:TEST EAX,EAX
	0000f44e:JZ 0x0000f457
	0000f450:MOV EAX,0x1
	0000f455:JMP 0x0000f45c
	0000f457:MOV EAX,0x0
	0000f45c:MOV byte ptr [RBP + -0x2bd],AL
	0000f462:AND byte ptr [RBP + -0x2bd],0x1
	0000f469:CMP dword ptr [RBP + -0x2ac],0x3
	0000f470:JZ 0x0000f4b7
	0000f472:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f478:LEA RDX,[RAX*0x8]
	0000f480:LEA RAX,[0x40480]
	0000f487:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f48b:MOV EAX,dword ptr [RBP + -0x2ac]
	0000f491:LEA RCX,[RAX*0x8]
	0000f499:LEA RAX,[0x40480]
	0000f4a0:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f4a4:MOV RSI,RDX
	0000f4a7:MOV RDI,RAX
	0000f4aa:CALL 0x00005ce0
	0000f4af:TEST EAX,EAX
	0000f4b1:JZ 0x0000f5e1
	0000f4b7:MOVZX ESI,byte ptr [RBP + -0x2bd]
	0000f4be:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f4c4:LEA RDX,[RAX*0x8]
	0000f4cc:LEA RAX,[0x40480]
	0000f4d3:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f4d7:LEA RCX,[RBP + -0x220]
	0000f4de:LEA RDX,[RBP + -0x2a0]
	0000f4e5:MOV R8,RCX
	0000f4e8:MOV RCX,RDX
	0000f4eb:MOV EDX,0x0
	0000f4f0:MOV RDI,RAX
	0000f4f3:CALL 0x00017851
	0000f4f8:MOV qword ptr [RBP + -0x228],RAX
	0000f4ff:CMP qword ptr [RBP + -0x228],0x0
	0000f507:SETNZ AL
	0000f50a:MOVZX EDX,AL
	0000f50d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f513:MOV dword ptr [RBP + RAX*0x4 + -0x204],EDX
	0000f51a:CMP qword ptr [RBP + -0x228],0x0
	0000f522:JZ 0x0000f5e1
	0000f528:LEA RCX,[RBP + -0x1e0]
	0000f52f:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f535:MOV RAX,RDX
	0000f538:SHL RAX,0x3
	0000f53c:ADD RAX,RDX
	0000f53f:SHL RAX,0x4
	0000f543:LEA R8,[RCX + RAX*0x1]
	0000f547:MOV RDI,qword ptr [RBP + -0x2a0]
	0000f54e:MOVZX EDX,byte ptr [RBP + -0x2bd]
	0000f555:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f55b:LEA RCX,[RAX*0x8]
	0000f563:LEA RAX,[0x40480]
	0000f56a:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f56e:MOV RSI,qword ptr [RBP + -0x228]
	0000f575:MOV R9,R8
	0000f578:MOV R8,RDI
	0000f57b:MOV ECX,EDX
	0000f57d:MOV EDX,0x0
	0000f582:MOV RDI,RAX
	0000f585:CALL 0x000181e0
	0000f58a:TEST AL,AL
	0000f58c:JZ 0x0000f5a1
	0000f58e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f594:MOV dword ptr [RBP + RAX*0x4 + -0x210],0x0
	0000f59f:JMP 0x0000f5b2
	0000f5a1:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f5a7:MOV dword ptr [RBP + RAX*0x4 + -0x204],0x0
	0000f5b2:MOV RAX,qword ptr [RBP + -0x2a0]
	0000f5b9:MOV RDI,RAX
	0000f5bc:CALL 0x00005860
	0000f5c1:MOV RAX,qword ptr [RBP + -0x220]
	0000f5c8:MOV RDI,RAX
	0000f5cb:CALL 0x00005860
	0000f5d0:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f5d6:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f5dd:TEST EAX,EAX
	0000f5df:JZ 0x0000f603
	0000f5e1:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f5e7:MOV dword ptr [RBP + -0x2ac],EAX
	0000f5ed:ADD dword ptr [RBP + -0x2bc],0x1
	0000f5f4:CMP dword ptr [RBP + -0x2bc],0x2
	0000f5fb:JBE 0x0000f3ed
END_OF_LINE
----------------------------------------------
527: if (p_name[i] != (char *)0x0) {
	0000f3ed:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f3f3:LEA RDX,[RAX*0x8]
	0000f3fb:LEA RAX,[0x40480]
	0000f402:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f406:TEST RAX,RAX
	0000f409:JZ 0x0000f5ed
END_OF_LINE
----------------------------------------------
528: if ((outfile == (char *)0x0) || (iVar18 = strcmp(outfile,p_name[i]), iVar18 == 0)) {
	0000f419:TEST RAX,RAX
	0000f41c:JZ 0x0000f457
	0000f41e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f424:LEA RDX,[RAX*0x8]
	0000f42c:LEA RAX,[0x40480]
	0000f433:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f437:LEA RAX,[0x3e260]
	0000f43e:MOV RAX,qword ptr [RAX]
	0000f441:MOV RSI,RDX
	0000f444:MOV RDI,RAX
	0000f447:CALL 0x00005ce0
	0000f44c:TEST EAX,EAX
	0000f44e:JZ 0x0000f457
END_OF_LINE
----------------------------------------------
529: _Var15 = false;
	0000f457:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
532: _Var15 = true;
	0000f450:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
534: if ((nope == NONE) || (iVar18 = strcmp(p_name[nope],p_name[i]), iVar18 != 0)) {
	0000f469:CMP dword ptr [RBP + -0x2ac],0x3
	0000f470:JZ 0x0000f4b7
	0000f472:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f478:LEA RDX,[RAX*0x8]
	0000f480:LEA RAX,[0x40480]
	0000f487:MOV RDX,qword ptr [RDX + RAX*0x1]
	0000f48b:MOV EAX,dword ptr [RBP + -0x2ac]
	0000f491:LEA RCX,[RAX*0x8]
	0000f499:LEA RAX,[0x40480]
	0000f4a0:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f4a4:MOV RSI,RDX
	0000f4a7:MOV RDI,RAX
	0000f4aa:CALL 0x00005ce0
	0000f4af:TEST EAX,EAX
	0000f4b1:JZ 0x0000f5e1
END_OF_LINE
----------------------------------------------
535: cs = version_controller(p_name[i],_Var15,(stat *)0x0,&getbuf,&u_1);
	0000f4be:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f4c4:LEA RDX,[RAX*0x8]
	0000f4cc:LEA RAX,[0x40480]
	0000f4d3:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f4d7:LEA RCX,[RBP + -0x220]
	0000f4de:LEA RDX,[RBP + -0x2a0]
	0000f4e5:MOV R8,RCX
	0000f4e8:MOV RCX,RDX
	0000f4eb:MOV EDX,0x0
	0000f4f0:MOV RDI,RAX
	0000f4f3:CALL 0x00017851
END_OF_LINE
----------------------------------------------
536: version_controlled[i] = (uint)(cs != (char *)0x0);
	0000f4ff:CMP qword ptr [RBP + -0x228],0x0
	0000f507:SETNZ AL
	0000f50a:MOVZX EDX,AL
	0000f50d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f513:MOV dword ptr [RBP + RAX*0x4 + -0x204],EDX
END_OF_LINE
----------------------------------------------
537: if (cs != (char *)0x0) {
	0000f51a:CMP qword ptr [RBP + -0x228],0x0
	0000f522:JZ 0x0000f5e1
END_OF_LINE
----------------------------------------------
538: _Var15 = version_get(p_name[i],cs,false,_Var15,getbuf,st + i);
	0000f52f:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f535:MOV RAX,RDX
	0000f538:SHL RAX,0x3
	0000f53c:ADD RAX,RDX
	0000f53f:SHL RAX,0x4
	0000f543:LEA R8,[RCX + RAX*0x1]
	0000f547:MOV RDI,qword ptr [RBP + -0x2a0]
	0000f54e:MOVZX EDX,byte ptr [RBP + -0x2bd]
	0000f555:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f55b:LEA RCX,[RAX*0x8]
	0000f563:LEA RAX,[0x40480]
	0000f56a:MOV RAX,qword ptr [RCX + RAX*0x1]
	0000f56e:MOV RSI,qword ptr [RBP + -0x228]
	0000f575:MOV R9,R8
	0000f578:MOV R8,RDI
	0000f57b:MOV ECX,EDX
	0000f57d:MOV EDX,0x0
	0000f582:MOV RDI,RAX
	0000f585:CALL 0x000181e0
END_OF_LINE
----------------------------------------------
539: if (_Var15) {
	0000f58c:JZ 0x0000f5a1
END_OF_LINE
----------------------------------------------
540: stat_errno[i] = 0;
	0000f58e:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f594:MOV dword ptr [RBP + RAX*0x4 + -0x210],0x0
END_OF_LINE
----------------------------------------------
543: version_controlled[i] = 0;
	0000f5a1:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f5a7:MOV dword ptr [RBP + RAX*0x4 + -0x204],0x0
END_OF_LINE
----------------------------------------------
545: free(getbuf);
	0000f5bc:CALL 0x00005860
END_OF_LINE
----------------------------------------------
546: free(u_1);
	0000f5cb:CALL 0x00005860
END_OF_LINE
----------------------------------------------
547: if (stat_errno[i] == 0) break;
	0000f5d0:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f5d6:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x210]
	0000f5dd:TEST EAX,EAX
	0000f5df:JZ 0x0000f603
END_OF_LINE
----------------------------------------------
550: nope = i;
	0000f5e7:MOV dword ptr [RBP + -0x2ac],EAX
END_OF_LINE
----------------------------------------------
554: if ((i0 != NONE) && ((i == NONE || (file_type == (st[i].st_mode & 0xf000))))) {
	0000f604:CMP dword ptr [RBP + -0x2b0],0x3
	0000f60b:JZ 0x0000f6ee
	0000f611:CMP dword ptr [RBP + -0x2bc],0x3
	0000f618:JZ 0x0000f64e
	0000f61a:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f620:MOV RAX,RDX
	0000f623:SHL RAX,0x3
	0000f627:ADD RAX,RDX
	0000f62a:SHL RAX,0x4
	0000f62e:LEA RAX,[RAX + -0x10]
	0000f632:ADD RAX,RBP
	0000f635:SUB RAX,0x1b8
	0000f63b:MOV EAX,dword ptr [RAX]
	0000f63d:AND EAX,0xf000
	0000f642:CMP dword ptr [RBP + -0x2b4],EAX
	0000f648:JNZ 0x0000f6ee
END_OF_LINE
----------------------------------------------
555: if ((i == NONE) || (st[i].st_size == 0)) {
	0000f64e:CMP dword ptr [RBP + -0x2bc],0x3
	0000f655:JZ 0x0000f680
	0000f657:MOV EDX,dword ptr [RBP + -0x2bc]
	0000f65d:MOV RAX,RDX
	0000f660:SHL RAX,0x3
	0000f664:ADD RAX,RDX
	0000f667:SHL RAX,0x4
	0000f66b:LEA RAX,[RAX + -0x10]
	0000f66f:ADD RAX,RBP
	0000f672:SUB RAX,0x1a0
	0000f678:MOV RAX,qword ptr [RAX]
	0000f67b:TEST RAX,RAX
	0000f67e:JNZ 0x0000f687
END_OF_LINE
----------------------------------------------
556: _Var15 = true;
	0000f680:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
559: _Var15 = false;
	0000f687:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
561: nVar17 = i;
	0000f6a6:JNZ 0x0000f6b0
END_OF_LINE
----------------------------------------------
562: if (i == NONE) {
	0000f69f:CMP dword ptr [RBP + -0x2bc],0x3
	0000f6a6:JNZ 0x0000f6b0
END_OF_LINE
----------------------------------------------
563: nVar17 = i0;
	0000f6ae:JMP 0x0000f6b6
END_OF_LINE
----------------------------------------------
565: _Var15 = maybe_reverse(p_name[nVar17],i == NONE,_Var15);
	0000f692:CMP dword ptr [RBP + -0x2bc],0x3
	0000f699:SETZ AL
	0000f69c:MOVZX ECX,AL
	0000f69f:CMP dword ptr [RBP + -0x2bc],0x3
	0000f6a6:JNZ 0x0000f6b0
	0000f6a8:MOV EAX,dword ptr [RBP + -0x2b0]
	0000f6ae:JMP 0x0000f6b6
	0000f6b0:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f6b6:MOV EAX,EAX
	0000f6b8:LEA RSI,[RAX*0x8]
	0000f6c0:LEA RAX,[0x40480]
	0000f6c7:MOV RAX,qword ptr [RSI + RAX*0x1]
	0000f6cb:MOV ESI,ECX
	0000f6cd:MOV RDI,RAX
	0000f6d0:CALL 0x0000ceb5
END_OF_LINE
----------------------------------------------
566: if ((_Var15) && (i == NONE)) {
	0000f6d7:JZ 0x0000f6ee
	0000f6d9:CMP dword ptr [RBP + -0x2bc],0x3
	0000f6e0:JNZ 0x0000f6ee
END_OF_LINE
----------------------------------------------
567: i = i0;
	0000f6e8:MOV dword ptr [RBP + -0x2bc],EAX
END_OF_LINE
----------------------------------------------
570: if ((i == NONE) && (p_says_nonexistent[(int)(uint)reverse] != 0)) {
	0000f6ee:CMP dword ptr [RBP + -0x2bc],0x3
	0000f6f5:JNZ 0x0000f875
	0000f6fb:LEA RAX,[0x3e35b]
	0000f702:MOVZX EAX,byte ptr [RAX]
	0000f705:MOVZX EAX,AL
	0000f708:CDQE
	0000f70a:LEA RDX,[RAX*0x4]
	0000f712:LEA RAX,[0x40470]
	0000f719:MOV EAX,dword ptr [RDX + RAX*0x1]
	0000f71c:TEST EAX,EAX
	0000f71e:JZ 0x0000f875
END_OF_LINE
----------------------------------------------
571: newdirs_min = 0x7fffffff;
	0000f724:MOV dword ptr [RBP + -0x2a8],0x7fffffff
END_OF_LINE
----------------------------------------------
572: for (i = OLD; i < NONE; i = i + NEW) {
	0000f72e:MOV dword ptr [RBP + -0x2bc],0x0
	0000f738:JMP 0x0000f7ed
	0000f73d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f743:LEA RDX,[RAX*0x8]
	0000f74b:LEA RAX,[0x40480]
	0000f752:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f756:TEST RAX,RAX
	0000f759:JZ 0x0000f7e6
	0000f75f:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f765:LEA RDX,[RAX*0x8]
	0000f76d:LEA RAX,[0x40480]
	0000f774:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f778:MOV ESI,0x0
	0000f77d:MOV RDI,RAX
	0000f780:CALL 0x0000fbbe
	0000f785:MOV EBX,EAX
	0000f787:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f78d:LEA RDX,[RAX*0x8]
	0000f795:LEA RAX,[0x40480]
	0000f79c:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f7a0:MOV ESI,0x1
	0000f7a5:MOV RDI,RAX
	0000f7a8:CALL 0x0000fbbe
	0000f7ad:SUB EBX,EAX
	0000f7af:MOV EDX,EBX
	0000f7b1:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7b7:MOV dword ptr [RBP + RAX*0x4 + -0x1f8],EDX
	0000f7be:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7c4:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
	0000f7cb:CMP dword ptr [RBP + -0x2a8],EAX
	0000f7d1:JLE 0x0000f7e6
	0000f7d3:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7d9:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
	0000f7e0:MOV dword ptr [RBP + -0x2a8],EAX
	0000f7e6:ADD dword ptr [RBP + -0x2bc],0x1
	0000f7ed:CMP dword ptr [RBP + -0x2bc],0x2
	0000f7f4:JBE 0x0000f73d
END_OF_LINE
----------------------------------------------
573: if (p_name[i] != (char *)0x0) {
	0000f73d:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f743:LEA RDX,[RAX*0x8]
	0000f74b:LEA RAX,[0x40480]
	0000f752:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f756:TEST RAX,RAX
	0000f759:JZ 0x0000f7e6
END_OF_LINE
----------------------------------------------
574: iVar18 = prefix_components(p_name[i],false);
	0000f75f:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f765:LEA RDX,[RAX*0x8]
	0000f76d:LEA RAX,[0x40480]
	0000f774:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f778:MOV ESI,0x0
	0000f77d:MOV RDI,RAX
	0000f780:CALL 0x0000fbbe
END_OF_LINE
----------------------------------------------
575: iVar19 = prefix_components(p_name[i],true);
	0000f787:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f78d:LEA RDX,[RAX*0x8]
	0000f795:LEA RAX,[0x40480]
	0000f79c:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f7a0:MOV ESI,0x1
	0000f7a5:MOV RDI,RAX
	0000f7a8:CALL 0x0000fbbe
END_OF_LINE
----------------------------------------------
576: newdirs[i] = iVar18 - iVar19;
	0000f7ad:SUB EBX,EAX
	0000f7af:MOV EDX,EBX
	0000f7b1:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7b7:MOV dword ptr [RBP + RAX*0x4 + -0x1f8],EDX
END_OF_LINE
----------------------------------------------
577: if (newdirs[i] < newdirs_min) {
	0000f7be:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7c4:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
	0000f7cb:CMP dword ptr [RBP + -0x2a8],EAX
	0000f7d1:JLE 0x0000f7e6
END_OF_LINE
----------------------------------------------
578: newdirs_min = newdirs[i];
	0000f7d3:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f7d9:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
END_OF_LINE
----------------------------------------------
582: for (i = OLD; i < NONE; i = i + NEW) {
	0000f7fa:MOV dword ptr [RBP + -0x2bc],0x0
	0000f804:JMP 0x0000f84d
	0000f806:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f80c:LEA RDX,[RAX*0x8]
	0000f814:LEA RAX,[0x40480]
	0000f81b:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f81f:TEST RAX,RAX
	0000f822:JZ 0x0000f846
	0000f824:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f82a:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
	0000f831:SUB EAX,dword ptr [RBP + -0x2a8]
	0000f837:MOV EDX,EAX
	0000f839:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f83f:MOV dword ptr [RBP + RAX*0x4 + -0x1ec],EDX
	0000f846:ADD dword ptr [RBP + -0x2bc],0x1
	0000f84d:CMP dword ptr [RBP + -0x2bc],0x2
	0000f854:JBE 0x0000f806
END_OF_LINE
----------------------------------------------
583: if (p_name[i] != (char *)0x0) {
	0000f806:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f80c:LEA RDX,[RAX*0x8]
	0000f814:LEA RAX,[0x40480]
	0000f81b:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f81f:TEST RAX,RAX
	0000f822:JZ 0x0000f846
END_OF_LINE
----------------------------------------------
584: distance_from_minimum[i] = newdirs[i] - newdirs_min;
	0000f824:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f82a:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x1f8]
	0000f831:SUB EAX,dword ptr [RBP + -0x2a8]
	0000f837:MOV EDX,EAX
	0000f839:MOV EAX,dword ptr [RBP + -0x2bc]
	0000f83f:MOV dword ptr [RBP + RAX*0x4 + -0x1ec],EDX
END_OF_LINE
----------------------------------------------
587: i = best_name(p_name,distance_from_minimum);
	0000f856:LEA RAX,[RBP + -0x1ec]
	0000f85d:MOV RSI,RAX
	0000f860:LEA RAX,[0x40480]
	0000f867:MOV RDI,RAX
	0000f86a:CALL 0x0000fccb
END_OF_LINE
----------------------------------------------
591: _Var15 = pch_rename();
	0000f875:CALL 0x00013bbd
END_OF_LINE
----------------------------------------------
592: if ((((_Var15) || (_Var15 = pch_copy(), _Var15)) && (inname == (char *)0x0)) &&
	0000f87c:JNZ 0x0000f88b
	0000f87e:CALL 0x00013b87
	0000f883:TEST AL,AL
	0000f885:JZ 0x0000f9a8
	0000f88b:LEA RAX,[0x3e258]
	0000f892:MOV RAX,qword ptr [RAX]
	0000f895:TEST RAX,RAX
	0000f898:JNZ 0x0000f9a8
	0000f89e:CMP dword ptr [RBP + -0x2bc],0x0
	0000f8a5:JZ 0x0000f8b4
	0000f8a7:CMP dword ptr [RBP + -0x2bc],0x1
	0000f8ae:JNZ 0x0000f96e
	0000f8b4:LEA RAX,[0x3e35b]
	0000f8bb:MOVZX EAX,byte ptr [RAX]
	0000f8be:MOVZX EAX,AL
	0000f8c1:CDQE
	0000f8c3:LEA RDX,[RAX*0x8]
	0000f8cb:LEA RAX,[0x40480]
	0000f8d2:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f8d6:TEST RAX,RAX
	0000f8d9:JZ 0x0000f96e
	0000f8df:LEA RAX,[0x3e35b]
	0000f8e6:MOVZX EAX,byte ptr [RAX]
	0000f8e9:XOR EAX,0x1
	0000f8ec:MOVZX EAX,AL
	0000f8ef:CDQE
	0000f8f1:LEA RDX,[RAX*0x8]
	0000f8f9:LEA RAX,[0x40480]
	0000f900:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f904:TEST RAX,RAX
	0000f907:JZ 0x0000f96e
	0000f909:LEA RAX,[0x3e35b]
	0000f910:MOVZX EAX,byte ptr [RAX]
	0000f913:MOVZX EAX,AL
	0000f916:CDQE
	0000f918:LEA RDX,[RAX*0x8]
	0000f920:LEA RAX,[0x40480]
	0000f927:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f92b:MOV RDI,RAX
	0000f92e:CALL 0x0000d7af
	0000f933:XOR EAX,0x1
	0000f936:TEST AL,AL
	0000f938:JNZ 0x0000f96e
	0000f93a:LEA RAX,[0x3e35b]
	0000f941:MOVZX EAX,byte ptr [RAX]
	0000f944:XOR EAX,0x1
	0000f947:MOVZX EAX,AL
	0000f94a:CDQE
	0000f94c:LEA RDX,[RAX*0x8]
	0000f954:LEA RAX,[0x40480]
	0000f95b:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f95f:MOV RDI,RAX
	0000f962:CALL 0x0000d7af
	0000f967:XOR EAX,0x1
	0000f96a:TEST AL,AL
	0000f96c:JZ 0x0000f9a8
END_OF_LINE
----------------------------------------------
593: ((((i != OLD && (i != NEW)) ||
	0000f89e:CMP dword ptr [RBP + -0x2bc],0x0
	0000f8a5:JZ 0x0000f8b4
	0000f8a7:CMP dword ptr [RBP + -0x2bc],0x1
END_OF_LINE
----------------------------------------------
594: ((p_name[(int)(uint)reverse] == (char *)0x0 ||
	0000f8c1:CDQE
	0000f8c3:LEA RDX,[RAX*0x8]
	0000f8cb:LEA RAX,[0x40480]
	0000f8d2:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f8d6:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
595: ((p_name[(int)(uint)(reverse ^ 1)] == (char *)0x0 ||
	0000f8e9:XOR EAX,0x1
	0000f8ec:MOVZX EAX,AL
	0000f8ef:CDQE
	0000f8f1:LEA RDX,[RAX*0x8]
	0000f8f9:LEA RAX,[0x40480]
	0000f900:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f904:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
596: (_Var15 = name_is_valid(p_name[(int)(uint)reverse]), !_Var15)))))) ||
	0000f916:CDQE
	0000f918:LEA RDX,[RAX*0x8]
	0000f920:LEA RAX,[0x40480]
	0000f927:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f92b:MOV RDI,RAX
	0000f92e:CALL 0x0000d7af
	0000f933:XOR EAX,0x1
	0000f936:TEST AL,AL
	0000f938:JNZ 0x0000f96e
END_OF_LINE
----------------------------------------------
597: (_Var15 = name_is_valid(p_name[(int)(uint)(reverse ^ 1)]), !_Var15)))) {
	0000f944:XOR EAX,0x1
	0000f947:MOVZX EAX,AL
	0000f94a:CDQE
	0000f94c:LEA RDX,[RAX*0x8]
	0000f954:LEA RAX,[0x40480]
	0000f95b:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000f95f:MOV RDI,RAX
	0000f962:CALL 0x0000d7af
	0000f967:XOR EAX,0x1
	0000f96a:TEST AL,AL
	0000f96c:JZ 0x0000f9a8
END_OF_LINE
----------------------------------------------
598: _Var15 = pch_rename();
	0000f96e:CALL 0x00013bbd
END_OF_LINE
----------------------------------------------
599: if (_Var15) {
	0000f975:JZ 0x0000f980
END_OF_LINE
----------------------------------------------
600: pcVar21 = "rename";
	0000f977:LEA RAX,[0x3316b]
END_OF_LINE
----------------------------------------------
603: pcVar21 = "copy";
	0000f980:LEA RAX,[0x33172]
END_OF_LINE
----------------------------------------------
605: say("Cannot %s file without two valid file names\n",pcVar21);
	0000f999:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
606: skip_rest_of_patch = true;
	0000f9a5:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
608: if (i == NONE) {
	0000f9a8:CMP dword ptr [RBP + -0x2bc],0x3
	0000f9af:JNZ 0x0000fa80
END_OF_LINE
----------------------------------------------
609: if (inname == (char *)0x0) {
	0000f9bf:TEST RAX,RAX
	0000f9c2:JZ 0x0000fa6e
END_OF_LINE
----------------------------------------------
610: inerrno = -1;
	0000fa75:MOV dword ptr [RAX],0xffffffff
END_OF_LINE
----------------------------------------------
613: inerrno = stat_file(inname,&instat);
	0000f9df:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
614: if ((inerrno != 0) || (file_type == (instat.st_mode & 0xf000))) {
	0000f9f6:TEST EAX,EAX
	0000f9f8:JNZ 0x0000fa15
	0000f9fa:LEA RAX,[0x3e280]
	0000fa01:MOV EAX,dword ptr [RAX + 0x18]
	0000fa04:AND EAX,0xf000
	0000fa09:CMP dword ptr [RBP + -0x2b4],EAX
	0000fa0f:JNZ 0x0000fb9e
END_OF_LINE
----------------------------------------------
615: if ((inerrno == 0) && (instat.st_size != 0)) {
	0000fa1e:TEST EAX,EAX
	0000fa20:JNZ 0x0000fa32
	0000fa22:LEA RAX,[0x3e280]
	0000fa29:MOV RAX,qword ptr [RAX + 0x30]
	0000fa2d:TEST RAX,RAX
	0000fa30:JNZ 0x0000fa39
END_OF_LINE
----------------------------------------------
616: _Var15 = false;
	0000fa39:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
619: _Var15 = true;
	0000fa32:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
621: maybe_reverse(inname,inerrno != 0,_Var15);
	0000fa4d:TEST EAX,EAX
	0000fa4f:SETNZ AL
	0000fa52:MOVZX ECX,AL
	0000fa55:LEA RAX,[0x3e258]
	0000fa5c:MOV RAX,qword ptr [RAX]
	0000fa5f:MOV ESI,ECX
	0000fa61:MOV RDI,RAX
	0000fa64:CALL 0x0000ceb5
END_OF_LINE
----------------------------------------------
626: inname = xstrdup(p_name[i]);
	0000fa80:MOV EAX,dword ptr [RBP + -0x2bc]
	0000fa86:LEA RDX,[RAX*0x8]
	0000fa8e:LEA RAX,[0x40480]
	0000fa95:MOV RAX,qword ptr [RDX + RAX*0x1]
	0000fa99:MOV RDI,RAX
	0000fa9c:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
627: inerrno = stat_errno[i];
	0000faae:MOV EAX,dword ptr [RBP + -0x2bc]
	0000fab4:MOV EDX,dword ptr [RBP + RAX*0x4 + -0x210]
END_OF_LINE
----------------------------------------------
628: invc = version_controlled[i];
	0000fac4:MOV EAX,dword ptr [RBP + -0x2bc]
	0000faca:MOV EDX,dword ptr [RBP + RAX*0x4 + -0x204]
END_OF_LINE
----------------------------------------------
629: uVar22 = (ulong)i;
	0000fae1:MOV ECX,dword ptr [RBP + -0x2bc]
END_OF_LINE
----------------------------------------------
630: instat.st_dev = st[uVar22].st_dev;
	0000fafd:SUB RDX,0x1d0
	0000fb04:MOV RCX,qword ptr [RDX]
END_OF_LINE
----------------------------------------------
631: instat.st_ino = st[uVar22].st_ino;
	0000fb07:MOV RBX,qword ptr [RDX + 0x8]
END_OF_LINE
----------------------------------------------
632: instat.st_nlink = st[uVar22].st_nlink;
	0000fb12:MOV RCX,qword ptr [RDX + 0x10]
END_OF_LINE
----------------------------------------------
633: instat.st_mode = st[uVar22].st_mode;
	0000fb16:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
634: instat.st_uid = st[uVar22].st_uid;
	0000fb16:MOV RBX,qword ptr [RDX + 0x18]
END_OF_LINE
----------------------------------------------
635: instat.st_gid = st[uVar22].st_gid;
	0000fb22:MOV RCX,qword ptr [RDX + 0x20]
END_OF_LINE
----------------------------------------------
636: instat.__pad0 = st[uVar22].__pad0;
	0000fb22:MOV RCX,qword ptr [RDX + 0x20]
END_OF_LINE
----------------------------------------------
637: instat.st_rdev = st[uVar22].st_rdev;
	0000fb26:MOV RBX,qword ptr [RDX + 0x28]
END_OF_LINE
----------------------------------------------
638: instat.st_size = st[uVar22].st_size;
	0000fb32:MOV RCX,qword ptr [RDX + 0x30]
END_OF_LINE
----------------------------------------------
639: instat.st_blksize = st[uVar22].st_blksize;
	0000fb36:MOV RBX,qword ptr [RDX + 0x38]
END_OF_LINE
----------------------------------------------
640: instat.st_blocks = st[uVar22].st_blocks;
	0000fb42:MOV RCX,qword ptr [RDX + 0x40]
END_OF_LINE
----------------------------------------------
641: instat.st_atim.tv_sec = st[uVar22].st_atim.tv_sec;
	0000fb46:MOV RBX,qword ptr [RDX + 0x48]
END_OF_LINE
----------------------------------------------
642: instat.st_atim.tv_nsec = st[uVar22].st_atim.tv_nsec;
	0000fb52:MOV RCX,qword ptr [RDX + 0x50]
END_OF_LINE
----------------------------------------------
643: instat.st_mtim.tv_sec = st[uVar22].st_mtim.tv_sec;
	0000fb56:MOV RBX,qword ptr [RDX + 0x58]
END_OF_LINE
----------------------------------------------
644: instat.st_mtim.tv_nsec = st[uVar22].st_mtim.tv_nsec;
	0000fb62:MOV RCX,qword ptr [RDX + 0x60]
END_OF_LINE
----------------------------------------------
645: instat.st_ctim.tv_sec = st[uVar22].st_ctim.tv_sec;
	0000fb66:MOV RBX,qword ptr [RDX + 0x68]
END_OF_LINE
----------------------------------------------
646: instat.st_ctim.tv_nsec = st[uVar22].st_ctim.tv_nsec;
	0000fb72:MOV RCX,qword ptr [RDX + 0x70]
END_OF_LINE
----------------------------------------------
647: instat.__glibc_reserved[0] = st[uVar22].__glibc_reserved[0];
	0000fb76:MOV RBX,qword ptr [RDX + 0x78]
END_OF_LINE
----------------------------------------------
648: instat.__glibc_reserved[1] = st[uVar22].__glibc_reserved[1];
	0000fb82:MOV RCX,qword ptr [RDX + 0x80]
END_OF_LINE
----------------------------------------------
649: instat.__glibc_reserved[2] = st[uVar22].__glibc_reserved[2];
	0000fb89:MOV RBX,qword ptr [RDX + 0x88]
END_OF_LINE
----------------------------------------------
651: LAB_0000fba4:
	0000fba4:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
652: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000fba8:SUB RDX,qword ptr FS:[0x28]
	0000fbb1:JZ 0x0000fbb8
END_OF_LINE
----------------------------------------------
653: return retval;
	0000fbbd:RET
END_OF_LINE
----------------------------------------------
656: __stack_chk_fail();
	0000fbb3:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
657: LAB_0000e14e:
	0000e14e:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
659: u = pcVar21 + 1;
	0000e139:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
660: ppuVar20 = __ctype_b_loc();
	0000e14e:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
661: pcVar21 = u;
	0000e176:JNZ 0x0000e146
END_OF_LINE
----------------------------------------------
662: } while (((*ppuVar20)[(byte)*u] & 0x2000) != 0);
	0000e153:MOV RDX,qword ptr [RAX]
	0000e156:MOV RAX,qword ptr [RBP + -0x268]
	0000e15d:MOVZX EAX,byte ptr [RAX]
	0000e160:MOVZX EAX,AL
	0000e163:ADD RAX,RAX
	0000e166:ADD RAX,RDX
	0000e169:MOVZX EAX,word ptr [RAX]
	0000e16c:MOVZX EAX,AX
	0000e16f:AND EAX,0x2000
	0000e174:TEST EAX,EAX
	0000e176:JNZ 0x0000e146
END_OF_LINE
----------------------------------------------
663: if (*u != '\0') {
	0000e17f:MOVZX EAX,byte ptr [RAX]
	0000e182:TEST AL,AL
	0000e184:JZ 0x0000e1d1
END_OF_LINE
----------------------------------------------
664: pcVar21 = format_linenum(numbuf,this_line);
	0000e18d:LEA RAX,[RBP + -0x30]
	0000e191:MOV RSI,RDX
	0000e194:MOV RDI,RAX
	0000e197:CALL 0x00018472
END_OF_LINE
----------------------------------------------
665: say("Prereq: with multiple words at line %s of patch\n",pcVar21);
	0000e1ae:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
667: LAB_0000e1d2:
	0000e1d2:LEA RAX,[0x3e378]
END_OF_LINE
----------------------------------------------
668: if (t == revision) {
	0000e1dc:CMP qword ptr [RBP + -0x270],RAX
	0000e1e3:JNZ 0x0000e1f8
END_OF_LINE
----------------------------------------------
669: revision = (char *)0x0;
	0000e1ec:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
672: cVar14 = *t;
	0000e1ff:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
673: *t = '\0';
	0000e20f:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
674: revision = xstrdup(revision);
	0000e21f:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
675: *t = cVar14;
	0000e23f:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
677: goto LAB_0000e990;
	0000e990:CMP byte ptr [RBP + -0x2d4],0x0
END_OF_LINE
----------------------------------------------
678: LAB_0000efc0:
	0000efc0:MOV RAX,qword ptr [RBP + -0x260]
END_OF_LINE
----------------------------------------------
679: p_start = previous_line;
	0000efc7:MOV qword ptr [0x00040558],RAX
END_OF_LINE
----------------------------------------------
680: p_sline = p_input_line + -1;
	0000efd5:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
681: p_indent = indent;
	0000efe7:MOV qword ptr [0x00040538],RAX
END_OF_LINE
----------------------------------------------
682: retval = NORMAL_DIFF;
	0000efee:MOV dword ptr [RBP + -0x2b8],0x2
END_OF_LINE
----------------------------------------------
683: goto LAB_0000f001;
	0000f001:MOV EAX,dword ptr [0x000404d0]
END_OF_LINE



Function: prefix_components
----------------------------------------------
16: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	0000fbdc:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: count = 0;
	0000fbeb:MOV dword ptr [RBP + -0xb0],0x0
END_OF_LINE
----------------------------------------------
18: pcVar1 = filename;
	0000fc0f:JZ 0x0000fcaf
END_OF_LINE
----------------------------------------------
19: if (*filename != '\0') {
	0000fc0a:MOVZX EAX,byte ptr [RAX]
	0000fc0d:TEST AL,AL
	0000fc0f:JZ 0x0000fcaf
END_OF_LINE
----------------------------------------------
20: while (f = pcVar1, pcVar1 = f + 1, *pcVar1 != '\0') {
	0000fc95:ADD qword ptr [RBP + -0xa8],0x1
	0000fc9d:MOV RAX,qword ptr [RBP + -0xa8]
	0000fca4:MOVZX EAX,byte ptr [RAX]
	0000fca7:TEST AL,AL
	0000fca9:JNZ 0x0000fc17
END_OF_LINE
----------------------------------------------
21: if ((*pcVar1 == '/') && (*f != '/')) {
	0000fc1e:MOVZX EAX,byte ptr [RAX]
	0000fc21:CMP AL,0x2f
	0000fc23:JNZ 0x0000fc95
	0000fc25:MOV RAX,qword ptr [RBP + -0xa8]
	0000fc2c:SUB RAX,0x1
	0000fc30:MOVZX EAX,byte ptr [RAX]
	0000fc33:CMP AL,0x2f
	0000fc35:JZ 0x0000fc95
END_OF_LINE
----------------------------------------------
22: if (checkdirs) {
	0000fc3e:JZ 0x0000fc8e
END_OF_LINE
----------------------------------------------
23: *pcVar1 = '\0';
	0000fc47:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
24: iVar3 = safe_stat(filename,&stat_buf);
	0000fc4a:LEA RDX,[RBP + -0xa0]
	0000fc51:MOV RAX,qword ptr [RBP + -0xb8]
	0000fc58:MOV RSI,RDX
	0000fc5b:MOV RDI,RAX
	0000fc5e:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
25: *pcVar1 = '/';
	0000fc70:MOV byte ptr [RAX],0x2f
END_OF_LINE
----------------------------------------------
26: if ((iVar3 != 0) || ((stat_buf.st_mode & 0xf000) != 0x4000)) break;
	0000fc73:CMP dword ptr [RBP + -0xac],0x0
	0000fc7a:JNZ 0x0000fcaf
	0000fc7c:MOV EAX,dword ptr [RBP + -0x88]
	0000fc82:AND EAX,0xf000
	0000fc87:CMP EAX,0x4000
	0000fc8c:JNZ 0x0000fcaf
END_OF_LINE
----------------------------------------------
28: count = count + 1;
	0000fc8e:ADD dword ptr [RBP + -0xb0],0x1
END_OF_LINE
----------------------------------------------
32: if (lVar2 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000fcb9:SUB RDX,qword ptr FS:[0x28]
	0000fcc2:JZ 0x0000fcc9
END_OF_LINE
----------------------------------------------
33: return count;
	0000fcca:RET
END_OF_LINE
----------------------------------------------
36: __stack_chk_fail();
	0000fcc4:CALL 0x00005b00
END_OF_LINE



Function: best_name
----------------------------------------------
21: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0000fcdf:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
22: components_min = 0x7fffffff;
	0000fcee:MOV dword ptr [RBP + -0x64],0x7fffffff
END_OF_LINE
----------------------------------------------
23: basename_len_min = 0xffffffffffffffff;
	0000fcf5:MOV qword ptr [RBP + -0x60],-0x1
END_OF_LINE
----------------------------------------------
24: len_min = 0xffffffffffffffff;
	0000fcfd:MOV qword ptr [RBP + -0x58],-0x1
END_OF_LINE
----------------------------------------------
25: for (i = OLD; i < NONE; i = i + NEW) {
	0000fd05:MOV dword ptr [RBP + -0x68],0x0
	0000fd0c:JMP 0x0000fe19
	0000fd11:MOV EAX,dword ptr [RBP + -0x68]
	0000fd14:LEA RDX,[RAX*0x8]
	0000fd1c:MOV RAX,qword ptr [RBP + -0x78]
	0000fd20:ADD RAX,RDX
	0000fd23:MOV RAX,qword ptr [RAX]
	0000fd26:TEST RAX,RAX
	0000fd29:JZ 0x0000fe15
	0000fd2f:MOV EAX,dword ptr [RBP + -0x68]
	0000fd32:LEA RDX,[RAX*0x4]
	0000fd3a:MOV RAX,qword ptr [RBP + -0x80]
	0000fd3e:ADD RAX,RDX
	0000fd41:MOV EAX,dword ptr [RAX]
	0000fd43:TEST EAX,EAX
	0000fd45:JNZ 0x0000fe15
	0000fd4b:MOV EAX,dword ptr [RBP + -0x68]
	0000fd4e:LEA RDX,[RAX*0x8]
	0000fd56:MOV RAX,qword ptr [RBP + -0x78]
	0000fd5a:ADD RAX,RDX
	0000fd5d:MOV RAX,qword ptr [RAX]
	0000fd60:MOV ESI,0x0
	0000fd65:MOV RDI,RAX
	0000fd68:CALL 0x0000fbbe
	0000fd6d:MOV EDX,dword ptr [RBP + -0x68]
	0000fd70:MOV dword ptr [RBP + RDX*0x4 + -0x4c],EAX
	0000fd74:MOV EAX,dword ptr [RBP + -0x68]
	0000fd77:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
	0000fd7b:CMP dword ptr [RBP + -0x64],EAX
	0000fd7e:JL 0x0000fe0e
	0000fd84:MOV EAX,dword ptr [RBP + -0x68]
	0000fd87:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
	0000fd8b:MOV dword ptr [RBP + -0x64],EAX
	0000fd8e:MOV EAX,dword ptr [RBP + -0x68]
	0000fd91:LEA RDX,[RAX*0x8]
	0000fd99:MOV RAX,qword ptr [RBP + -0x78]
	0000fd9d:ADD RAX,RDX
	0000fda0:MOV RAX,qword ptr [RAX]
	0000fda3:MOV RDI,RAX
	0000fda6:CALL 0x0001e16b
	0000fdab:MOV EDX,dword ptr [RBP + -0x68]
	0000fdae:MOV qword ptr [RBP + RDX*0x8 + -0x40],RAX
	0000fdb3:MOV EAX,dword ptr [RBP + -0x68]
	0000fdb6:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
	0000fdbb:CMP qword ptr [RBP + -0x60],RAX
	0000fdbf:JC 0x0000fe11
	0000fdc1:MOV EAX,dword ptr [RBP + -0x68]
	0000fdc4:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
	0000fdc9:MOV qword ptr [RBP + -0x60],RAX
	0000fdcd:MOV EAX,dword ptr [RBP + -0x68]
	0000fdd0:LEA RDX,[RAX*0x8]
	0000fdd8:MOV RAX,qword ptr [RBP + -0x78]
	0000fddc:ADD RAX,RDX
	0000fddf:MOV RAX,qword ptr [RAX]
	0000fde2:MOV RDI,RAX
	0000fde5:CALL 0x00005ad0
	0000fdea:MOV EDX,dword ptr [RBP + -0x68]
	0000fded:MOV qword ptr [RBP + RDX*0x8 + -0x20],RAX
	0000fdf2:MOV EAX,dword ptr [RBP + -0x68]
	0000fdf5:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
	0000fdfa:CMP qword ptr [RBP + -0x58],RAX
	0000fdfe:JC 0x0000fe14
	0000fe00:MOV EAX,dword ptr [RBP + -0x68]
	0000fe03:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
	0000fe08:MOV qword ptr [RBP + -0x58],RAX
	0000fe0c:JMP 0x0000fe15
	0000fe0e:NOP
	0000fe0f:JMP 0x0000fe15
	0000fe11:NOP
	0000fe12:JMP 0x0000fe15
	0000fe14:NOP
	0000fe15:ADD dword ptr [RBP + -0x68],0x1
	0000fe19:CMP dword ptr [RBP + -0x68],0x2
	0000fe1d:JBE 0x0000fd11
END_OF_LINE
----------------------------------------------
26: if ((name[i] != (char *)0x0) && (ignore[i] == 0)) {
	0000fd11:MOV EAX,dword ptr [RBP + -0x68]
	0000fd14:LEA RDX,[RAX*0x8]
	0000fd1c:MOV RAX,qword ptr [RBP + -0x78]
	0000fd20:ADD RAX,RDX
	0000fd23:MOV RAX,qword ptr [RAX]
	0000fd26:TEST RAX,RAX
	0000fd29:JZ 0x0000fe15
	0000fd2f:MOV EAX,dword ptr [RBP + -0x68]
	0000fd32:LEA RDX,[RAX*0x4]
	0000fd3a:MOV RAX,qword ptr [RBP + -0x80]
	0000fd3e:ADD RAX,RDX
	0000fd41:MOV EAX,dword ptr [RAX]
	0000fd43:TEST EAX,EAX
	0000fd45:JNZ 0x0000fe15
END_OF_LINE
----------------------------------------------
27: iVar3 = prefix_components(name[i],false);
	0000fd4b:MOV EAX,dword ptr [RBP + -0x68]
	0000fd4e:LEA RDX,[RAX*0x8]
	0000fd56:MOV RAX,qword ptr [RBP + -0x78]
	0000fd5a:ADD RAX,RDX
	0000fd5d:MOV RAX,qword ptr [RAX]
	0000fd60:MOV ESI,0x0
	0000fd65:MOV RDI,RAX
	0000fd68:CALL 0x0000fbbe
END_OF_LINE
----------------------------------------------
28: components[i] = iVar3;
	0000fd6d:MOV EDX,dword ptr [RBP + -0x68]
	0000fd70:MOV dword ptr [RBP + RDX*0x4 + -0x4c],EAX
END_OF_LINE
----------------------------------------------
29: if (components[i] <= components_min) {
	0000fd74:MOV EAX,dword ptr [RBP + -0x68]
	0000fd77:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
	0000fd7b:CMP dword ptr [RBP + -0x64],EAX
	0000fd7e:JL 0x0000fe0e
END_OF_LINE
----------------------------------------------
30: components_min = components[i];
	0000fd84:MOV EAX,dword ptr [RBP + -0x68]
	0000fd87:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
END_OF_LINE
----------------------------------------------
31: sVar4 = base_len(name[i]);
	0000fd8e:MOV EAX,dword ptr [RBP + -0x68]
	0000fd91:LEA RDX,[RAX*0x8]
	0000fd99:MOV RAX,qword ptr [RBP + -0x78]
	0000fd9d:ADD RAX,RDX
	0000fda0:MOV RAX,qword ptr [RAX]
	0000fda3:MOV RDI,RAX
	0000fda6:CALL 0x0001e16b
END_OF_LINE
----------------------------------------------
32: basename_len[i] = sVar4;
	0000fdab:MOV EDX,dword ptr [RBP + -0x68]
	0000fdae:MOV qword ptr [RBP + RDX*0x8 + -0x40],RAX
END_OF_LINE
----------------------------------------------
33: if (basename_len[i] <= basename_len_min) {
	0000fdb3:MOV EAX,dword ptr [RBP + -0x68]
	0000fdb6:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
	0000fdbb:CMP qword ptr [RBP + -0x60],RAX
	0000fdbf:JC 0x0000fe11
END_OF_LINE
----------------------------------------------
34: basename_len_min = basename_len[i];
	0000fdc1:MOV EAX,dword ptr [RBP + -0x68]
	0000fdc4:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
END_OF_LINE
----------------------------------------------
35: sVar5 = strlen(name[i]);
	0000fdcd:MOV EAX,dword ptr [RBP + -0x68]
	0000fdd0:LEA RDX,[RAX*0x8]
	0000fdd8:MOV RAX,qword ptr [RBP + -0x78]
	0000fddc:ADD RAX,RDX
	0000fddf:MOV RAX,qword ptr [RAX]
	0000fde2:MOV RDI,RAX
	0000fde5:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
36: len[i] = sVar5;
	0000fdea:MOV EDX,dword ptr [RBP + -0x68]
	0000fded:MOV qword ptr [RBP + RDX*0x8 + -0x20],RAX
END_OF_LINE
----------------------------------------------
37: if (len[i] <= len_min) {
	0000fdf2:MOV EAX,dword ptr [RBP + -0x68]
	0000fdf5:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
	0000fdfa:CMP qword ptr [RBP + -0x58],RAX
	0000fdfe:JC 0x0000fe14
END_OF_LINE
----------------------------------------------
38: len_min = len[i];
	0000fe00:MOV EAX,dword ptr [RBP + -0x68]
	0000fe03:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
END_OF_LINE
----------------------------------------------
44: for (i = OLD; (i < NONE &&
	0000fe23:MOV dword ptr [RBP + -0x68],0x0
	0000fe2a:JMP 0x0000feab
	0000fe2c:MOV EAX,dword ptr [RBP + -0x68]
	0000fe2f:LEA RDX,[RAX*0x8]
	0000fe37:MOV RAX,qword ptr [RBP + -0x78]
	0000fe3b:ADD RAX,RDX
	0000fe3e:MOV RAX,qword ptr [RAX]
	0000fe41:TEST RAX,RAX
	0000fe44:JZ 0x0000fea7
	0000fe46:MOV EAX,dword ptr [RBP + -0x68]
	0000fe49:LEA RDX,[RAX*0x4]
	0000fe51:MOV RAX,qword ptr [RBP + -0x80]
	0000fe55:ADD RAX,RDX
	0000fe58:MOV EAX,dword ptr [RAX]
	0000fe5a:TEST EAX,EAX
	0000fe5c:JNZ 0x0000fea7
	0000fe5e:MOV EAX,dword ptr [RBP + -0x68]
	0000fe61:LEA RDX,[RAX*0x8]
	0000fe69:MOV RAX,qword ptr [RBP + -0x78]
	0000fe6d:ADD RAX,RDX
	0000fe70:MOV RAX,qword ptr [RAX]
	0000fe73:MOV RDI,RAX
	0000fe76:CALL 0x0000d7af
	0000fe7b:TEST AL,AL
	0000fe7d:JZ 0x0000fea7
	0000fe7f:MOV EAX,dword ptr [RBP + -0x68]
	0000fe82:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
	0000fe86:CMP dword ptr [RBP + -0x64],EAX
	0000fe89:JNZ 0x0000fea7
	0000fe8b:MOV EAX,dword ptr [RBP + -0x68]
	0000fe8e:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
	0000fe93:CMP qword ptr [RBP + -0x60],RAX
	0000fe97:JNZ 0x0000fea7
	0000fe99:MOV EAX,dword ptr [RBP + -0x68]
	0000fe9c:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
	0000fea1:CMP qword ptr [RBP + -0x58],RAX
	0000fea5:JZ 0x0000feb7
	0000fea7:ADD dword ptr [RBP + -0x68],0x1
	0000feab:CMP dword ptr [RBP + -0x68],0x2
	0000feaf:JBE 0x0000fe2c
END_OF_LINE
----------------------------------------------
45: ((((name[i] == (char *)0x0 || (ignore[i] != 0)) ||
	0000fe2c:MOV EAX,dword ptr [RBP + -0x68]
	0000fe2f:LEA RDX,[RAX*0x8]
	0000fe37:MOV RAX,qword ptr [RBP + -0x78]
	0000fe3b:ADD RAX,RDX
	0000fe3e:MOV RAX,qword ptr [RAX]
	0000fe41:TEST RAX,RAX
	0000fe44:JZ 0x0000fea7
	0000fe46:MOV EAX,dword ptr [RBP + -0x68]
	0000fe49:LEA RDX,[RAX*0x4]
	0000fe51:MOV RAX,qword ptr [RBP + -0x80]
	0000fe55:ADD RAX,RDX
	0000fe58:MOV EAX,dword ptr [RAX]
	0000fe5a:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
46: (_Var2 = name_is_valid(name[i]), !_Var2)) ||
	0000fe5e:MOV EAX,dword ptr [RBP + -0x68]
	0000fe61:LEA RDX,[RAX*0x8]
	0000fe69:MOV RAX,qword ptr [RBP + -0x78]
	0000fe6d:ADD RAX,RDX
	0000fe70:MOV RAX,qword ptr [RAX]
	0000fe73:MOV RDI,RAX
	0000fe76:CALL 0x0000d7af
	0000fe7b:TEST AL,AL
	0000fe7d:JZ 0x0000fea7
END_OF_LINE
----------------------------------------------
47: (((components_min != components[i] || (basename_len_min != basename_len[i])) ||
	0000fe7f:MOV EAX,dword ptr [RBP + -0x68]
	0000fe82:MOV EAX,dword ptr [RBP + RAX*0x4 + -0x4c]
	0000fe86:CMP dword ptr [RBP + -0x64],EAX
	0000fe89:JNZ 0x0000fea7
	0000fe8b:MOV EAX,dword ptr [RBP + -0x68]
	0000fe8e:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x40]
	0000fe93:CMP qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
48: (len_min != len[i])))))); i = i + NEW) {
	0000fe99:MOV EAX,dword ptr [RBP + -0x68]
	0000fe9c:MOV RAX,qword ptr [RBP + RAX*0x8 + -0x20]
	0000fea1:CMP qword ptr [RBP + -0x58],RAX
	0000fea5:JZ 0x0000feb7
	0000fea7:ADD dword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
50: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000febf:SUB RDX,qword ptr FS:[0x28]
	0000fec8:JZ 0x0000fecf
END_OF_LINE
----------------------------------------------
51: return i;
	0000fed0:RET
END_OF_LINE
----------------------------------------------
54: __stack_chk_fail();
	0000feca:CALL 0x00005b00
END_OF_LINE



Function: next_intuit_at
----------------------------------------------
8: p_base = file_pos;
	0000fee5:MOV qword ptr [0x00040548],RAX
END_OF_LINE
----------------------------------------------
9: p_bline = file_line;
	0000fef0:MOV qword ptr [0x00040550],RAX
END_OF_LINE
----------------------------------------------
10: return;
	0000fef9:RET
END_OF_LINE



Function: skip_to
----------------------------------------------
15: __stream_00 = pFRam0000000000144070;
	0000fefe:PUSH RBP
END_OF_LINE
----------------------------------------------
16: __stream = pfp;
	0000fefe:PUSH RBP
END_OF_LINE
----------------------------------------------
17: if (file_pos < p_base) {
	0000ff32:JGE 0x0000ff5c
END_OF_LINE
----------------------------------------------
19: __assert_fail("p_base <= file_pos","pch.c",0x450,"skip_to");
	0000ff57:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
21: if (((verbosity == _IScntrl) || (inname == (char *)0x0)) && (p_base < file_pos)) {
	0000ff65:CMP EAX,0x2
	0000ff68:JZ 0x0000ff7d
	0000ff6a:LEA RAX,[0x3e258]
	0000ff71:MOV RAX,qword ptr [RAX]
	0000ff74:TEST RAX,RAX
	0000ff77:JNZ 0x00010029
	0000ff7d:MOV RAX,qword ptr [0x00040548]
	0000ff84:CMP qword ptr [RBP + -0x28],RAX
	0000ff88:JLE 0x00010029
END_OF_LINE
----------------------------------------------
22: Fseek(pfp,p_base,0);
	0000ffa4:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
23: say("The text leading up to this was:\n--------------------------\n");
	0000ffb8:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
24: while( true ) {
	00010011:JG 0x0000ffbf
END_OF_LINE
----------------------------------------------
25: lVar1 = ftell((FILE *)__stream);
	00010008:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
26: if (file_pos <= lVar1) break;
	00010011:JG 0x0000ffbf
END_OF_LINE
----------------------------------------------
27: putc(0x7c,__stream_00);
	0000ffcb:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
29: __c = getc((FILE *)__stream);
	0000ffd7:CALL 0x00006070
END_OF_LINE
----------------------------------------------
30: if (__c == -1) {
	0000ffdf:CMP dword ptr [RBP + -0x14],-0x1
	0000ffe3:JNZ 0x0000ffea
END_OF_LINE
----------------------------------------------
32: read_fatal();
	0000ffe5:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
34: putc(__c,__stream_00);
	0000fff6:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
35: } while (__c != 10);
	0000fffb:CMP dword ptr [RBP + -0x14],0xa
	0000ffff:JNZ 0x0000ffd0
END_OF_LINE
----------------------------------------------
37: say("--------------------------\n");
	00010022:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
40: Fseek(pfp,file_pos,0);
	0001003c:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
42: p_input_line = file_line + -1;
	00010045:SUB RAX,0x1
	00010049:MOV qword ptr [0x00040518],RAX
END_OF_LINE
----------------------------------------------
43: return;
	00010052:RET
END_OF_LINE



Function: malformed
----------------------------------------------
11: pcVar1 = buf;
	00010057:PUSH RBP
END_OF_LINE
----------------------------------------------
12: pcVar2 = format_linenum(numbuf,p_input_line);
	00010080:LEA RAX,[RBP + -0x30]
	00010084:MOV RSI,RDX
	00010087:MOV RDI,RAX
	0001008a:CALL 0x00018472
END_OF_LINE
----------------------------------------------
14: fatal("malformed patch at line %s: %s",pcVar2,pcVar1);
	000100a4:CALL 0x000185b0
END_OF_LINE



Function: scan_linenum
----------------------------------------------
19: pcVar3 = buf;
	000100ad:PUSH RBP
END_OF_LINE
----------------------------------------------
20: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	000100be:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
21: n = 0;
	000100cd:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
22: bVar2 = false;
	000100d5:MOV byte ptr [RBP + -0x49],0x0
END_OF_LINE
----------------------------------------------
23: for (s = s0; (int)*s - 0x30U < 10; s = s + 1) {
	000100e1:JMP 0x00010157
	000100e3:MOV RDX,qword ptr [RBP + -0x40]
	000100e7:MOV RAX,RDX
	000100ea:SHL RAX,0x2
	000100ee:ADD RAX,RDX
	000100f1:ADD RAX,RAX
	000100f4:MOV RDX,RAX
	000100f7:MOV RAX,qword ptr [RBP + -0x48]
	000100fb:MOVZX EAX,byte ptr [RAX]
	000100fe:MOVSX EAX,AL
	00010101:SUB EAX,0x30
	00010104:CDQE
	00010106:ADD RAX,RDX
	00010109:MOV qword ptr [RBP + -0x38],RAX
	0001010d:MOVZX ESI,byte ptr [RBP + -0x49]
	00010111:MOV RCX,qword ptr [RBP + -0x38]
	00010115:MOV RDX,0x6666666666666667
	0001011f:MOV RAX,RCX
	00010122:IMUL RDX
	00010125:MOV RAX,RDX
	00010128:SAR RAX,0x2
	0001012c:SAR RCX,0x3f
	00010130:MOV RDX,RCX
	00010133:SUB RAX,RDX
	00010136:CMP qword ptr [RBP + -0x40],RAX
	0001013a:SETNZ AL
	0001013d:MOVZX EAX,AL
	00010140:OR EAX,ESI
	00010142:TEST EAX,EAX
	00010144:SETNZ AL
	00010147:MOV byte ptr [RBP + -0x49],AL
	0001014a:MOV RAX,qword ptr [RBP + -0x38]
	0001014e:MOV qword ptr [RBP + -0x40],RAX
	00010152:ADD qword ptr [RBP + -0x48],0x1
	00010157:MOV RAX,qword ptr [RBP + -0x48]
	0001015b:MOVZX EAX,byte ptr [RAX]
	0001015e:MOVSX EAX,AL
	00010161:SUB EAX,0x30
	00010164:CMP EAX,0x9
	00010167:JBE 0x000100e3
END_OF_LINE
----------------------------------------------
24: lVar4 = (long)(*s + -0x30) + n * 10;
	000100f1:ADD RAX,RAX
	000100f4:MOV RDX,RAX
	000100f7:MOV RAX,qword ptr [RBP + -0x48]
	000100fb:MOVZX EAX,byte ptr [RAX]
	000100fe:MOVSX EAX,AL
	00010101:SUB EAX,0x30
	00010104:CDQE
	00010106:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
25: bVar2 = (bool)(n != lVar4 / 10 | bVar2);
	00010128:SAR RAX,0x2
	0001012c:SAR RCX,0x3f
	00010130:MOV RDX,RCX
	00010133:SUB RAX,RDX
	00010136:CMP qword ptr [RBP + -0x40],RAX
	0001013a:SETNZ AL
	0001013d:MOVZX EAX,AL
	00010140:OR EAX,ESI
END_OF_LINE
----------------------------------------------
26: n = lVar4;
	00010152:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
28: if (s == s0) {
	00010171:CMP RAX,qword ptr [RBP + -0x58]
	00010175:JNZ 0x000101b1
END_OF_LINE
----------------------------------------------
29: pcVar5 = format_linenum(numbuf,p_input_line);
	00010188:LEA RAX,[RBP + -0x30]
	0001018c:MOV RSI,RDX
	0001018f:MOV RDI,RAX
	00010192:CALL 0x00018472
END_OF_LINE
----------------------------------------------
31: fatal("missing line number at line %s: %s",pcVar5,pcVar3);
	000101ac:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
33: if (bVar2) {
	000101b5:JZ 0x00010205
END_OF_LINE
----------------------------------------------
34: pcVar5 = format_linenum(numbuf,p_input_line);
	000101c8:LEA RAX,[RBP + -0x30]
	000101cc:MOV RSI,RDX
	000101cf:MOV RDI,RAX
	000101d2:CALL 0x00018472
END_OF_LINE
----------------------------------------------
36: fatal("line number %.*s is too large at line %s: %s",(ulong)(uint)((int)s - (int)s0),s0,pcVar5,
	000101de:SUB RAX,qword ptr [RBP + -0x58]
	000101e2:MOV ESI,EAX
	000101e4:MOV RAX,qword ptr [RBP + -0x58]
	000101e8:MOV R8,RBX
	000101eb:MOV RCX,RDX
	000101ee:MOV RDX,RAX
	000101f1:LEA RAX,[0x33260]
	000101f8:MOV RDI,RAX
	000101fb:MOV EAX,0x0
	00010200:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
37: pcVar3);
	00010200:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
39: *linenum = n;
	0001020d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
40: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00010218:SUB RDX,qword ptr FS:[0x28]
	00010221:JZ 0x00010228
END_OF_LINE
----------------------------------------------
42: __stack_chk_fail();
	00010223:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
44: return s;
	00010210:MOV RAX,qword ptr [RBP + -0x48]
	00010214:MOV RDX,qword ptr [RBP + -0x18]
	00010218:SUB RDX,qword ptr FS:[0x28]
	00010221:JZ 0x00010228
	00010223:CALL 0x00005b00
	00010228:MOV RBX,qword ptr [RBP + -0x8]
	0001022c:LEAVE
	0001022d:RET
END_OF_LINE



Function: another_hunk
----------------------------------------------
65: lVar5 = *(long *)(in_FS_OFFSET + 0x28);
	00010250:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
66: context = 0;
	0001025f:MOV qword ptr [RBP + -0x140],0x0
END_OF_LINE
----------------------------------------------
67: set_hunkmax();
	0001026a:CALL 0x0000cd1c
END_OF_LINE
----------------------------------------------
68: for (; -1 < p_end; p_end = p_end + -1) {
	000102bb:SUB RAX,0x1
	000102bf:MOV qword ptr [0x0003e040],RAX
	000102c6:MOV RAX,qword ptr [0x0003e040]
	000102cd:TEST RAX,RAX
	000102d0:JNS 0x00010271
END_OF_LINE
----------------------------------------------
69: if (p_end == p_efake) {
	0001027f:CMP RDX,RAX
	00010282:JNZ 0x00010294
END_OF_LINE
----------------------------------------------
70: p_end = p_bfake;
	0001028b:MOV qword ptr [0x0003e040],RAX
END_OF_LINE
----------------------------------------------
73: free(p_line[p_end]);
	000102a6:ADD RAX,RDX
	000102a9:MOV RAX,qword ptr [RAX]
	000102ac:MOV RDI,RAX
	000102af:CALL 0x00005860
END_OF_LINE
----------------------------------------------
76: if (p_end != -1) {
	000102d9:CMP RAX,-0x1
	000102dd:JZ 0x00010307
END_OF_LINE
----------------------------------------------
78: __assert_fail("p_end == -1","pch.c",0x4a6,"another_hunk");
	00010302:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
80: p_efake = -1;
	00010307:MOV qword ptr [0x0003e050],-0x1
END_OF_LINE
----------------------------------------------
81: if (p_c_function != (char *)0x0) {
	00010319:TEST RAX,RAX
	0001031c:JZ 0x00010338
END_OF_LINE
----------------------------------------------
82: free(p_c_function);
	00010328:CALL 0x00005860
END_OF_LINE
----------------------------------------------
83: p_c_function = (char *)0x0;
	0001032d:MOV qword ptr [0x00040570],0x0
END_OF_LINE
----------------------------------------------
85: p_max = hunkmax;
	0001033f:MOV qword ptr [0x00040500],RAX
END_OF_LINE
----------------------------------------------
86: if ((difftype == CONTEXT_DIFF) || (difftype == NEW_CONTEXT_DIFF)) {
	00010346:CMP dword ptr [RBP + -0x174],0x1
	0001034d:JZ 0x0001035c
	0001034f:CMP dword ptr [RBP + -0x174],0x4
	00010356:JNZ 0x00011b89
END_OF_LINE
----------------------------------------------
87: line_beginning = ftell((FILE *)pfp);
	00010366:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
88: repl_beginning = 0;
	00010372:MOV qword ptr [RBP + -0x130],0x0
END_OF_LINE
----------------------------------------------
89: fillcnt = 0;
	0001037d:MOV qword ptr [RBP + -0x128],0x0
END_OF_LINE
----------------------------------------------
90: bVar7 = false;
	00010388:MOV byte ptr [RBP + -0x163],0x0
END_OF_LINE
----------------------------------------------
91: bVar11 = false;
	0001038f:MOV byte ptr [RBP + -0x162],0x0
END_OF_LINE
----------------------------------------------
92: bVar6 = true;
	00010396:MOV byte ptr [RBP + -0x161],0x1
END_OF_LINE
----------------------------------------------
93: bVar10 = false;
	0001039d:MOV byte ptr [RBP + -0x160],0x0
END_OF_LINE
----------------------------------------------
94: bVar9 = false;
	000103a4:MOV byte ptr [RBP + -0x15f],0x0
END_OF_LINE
----------------------------------------------
95: repl_backtrack_position = 0;
	000103ab:MOV qword ptr [RBP + -0x110],0x0
END_OF_LINE
----------------------------------------------
96: ptrn_prefix_context = -1;
	000103b6:MOV qword ptr [RBP + -0xf8],-0x1
END_OF_LINE
----------------------------------------------
97: ptrn_suffix_context = -1;
	000103c1:MOV qword ptr [RBP + -0xf0],-0x1
END_OF_LINE
----------------------------------------------
98: repl_prefix_context = -1;
	000103cc:MOV qword ptr [RBP + -0xe8],-0x1
END_OF_LINE
----------------------------------------------
99: ptrn_copiable = 0;
	000103d7:MOV qword ptr [RBP + -0xe0],0x0
END_OF_LINE
----------------------------------------------
100: repl_copiable = 0;
	000103e2:MOV qword ptr [RBP + -0xd8],0x0
END_OF_LINE
----------------------------------------------
101: repl_context = 0;
	000103ed:MOV qword ptr [RBP + -0x100],0x0
END_OF_LINE
----------------------------------------------
102: repl_patch_line = 0;
	000103ff:MOV qword ptr [RBP + -0x108],RAX
END_OF_LINE
----------------------------------------------
103: filldst = 0;
	0001040d:MOV qword ptr [RBP + -0x118],RAX
END_OF_LINE
----------------------------------------------
104: fillsrc = 0;
	0001041b:MOV qword ptr [RBP + -0x120],RAX
END_OF_LINE
----------------------------------------------
105: chars_read = get_line();
	00010422:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
106: if ((chars_read != 0xffffffffffffffff) &&
	0001042e:CMP qword ptr [RBP + -0x138],-0x1
	00010436:JZ 0x00010467
	00010438:CMP qword ptr [RBP + -0x138],0x8
	00010440:JBE 0x00010467
	00010442:LEA RAX,[0x3e240]
	00010449:MOV RAX,qword ptr [RAX]
	0001044c:MOV EDX,0x8
	00010451:LEA RCX,[0x33125]
	00010458:MOV RSI,RCX
	0001045b:MOV RDI,RAX
	0001045e:CALL 0x00005920
	00010463:TEST EAX,EAX
	00010465:JZ 0x0001049e
END_OF_LINE
----------------------------------------------
107: ((8 < chars_read && (iVar13 = strncmp(buf,"********",8), iVar13 == 0)))) {
	00010440:JBE 0x00010467
	00010442:LEA RAX,[0x3e240]
	00010449:MOV RAX,qword ptr [RAX]
	0001044c:MOV EDX,0x8
	00010451:LEA RCX,[0x33125]
	00010458:MOV RSI,RCX
	0001045b:MOV RDI,RAX
	0001045e:CALL 0x00005920
	00010463:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
108: for (s = buf; *s == '*'; s = s + 1) {
	000104a8:MOV qword ptr [RBP + -0x148],RAX
	000104af:JMP 0x000104b9
	000104b1:ADD qword ptr [RBP + -0x148],0x1
	000104b9:MOV RAX,qword ptr [RBP + -0x148]
	000104c0:MOVZX EAX,byte ptr [RAX]
	000104c3:CMP AL,0x2a
	000104c5:JZ 0x000104b1
END_OF_LINE
----------------------------------------------
110: if (*s == ' ') {
	000104ce:MOVZX EAX,byte ptr [RAX]
	000104d1:CMP AL,0x20
	000104d3:JNZ 0x00010531
END_OF_LINE
----------------------------------------------
111: p_c_function = s;
	000104dc:MOV qword ptr [0x00040570],RAX
END_OF_LINE
----------------------------------------------
112: for (; *s != '\n'; s = s + 1) {
	000104e5:ADD qword ptr [RBP + -0x148],0x1
	000104ed:MOV RAX,qword ptr [RBP + -0x148]
	000104f4:MOVZX EAX,byte ptr [RAX]
	000104f7:CMP AL,0xa
	000104f9:JNZ 0x000104e5
END_OF_LINE
----------------------------------------------
114: *s = '\0';
	00010502:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
115: p_c_function = savestr(p_c_function);
	0001050f:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
116: if (p_c_function == (char *)0x0) {
	00010522:TEST RAX,RAX
	00010525:JNZ 0x00010531
END_OF_LINE
----------------------------------------------
117: iVar13 = -1;
	00010527:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
118: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
121: p_hunk_beg = p_input_line + 1;
	00010538:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
122: bVar8 = false;
	00010388:MOV byte ptr [RBP + -0x163],0x0
	0001038f:MOV byte ptr [RBP + -0x162],0x0
	00010396:MOV byte ptr [RBP + -0x161],0x1
	0001039d:MOV byte ptr [RBP + -0x160],0x0
	000103a4:MOV byte ptr [RBP + -0x15f],0x0
	000103ab:MOV qword ptr [RBP + -0x110],0x0
	000103b6:MOV qword ptr [RBP + -0xf8],-0x1
	000103c1:MOV qword ptr [RBP + -0xf0],-0x1
	000103cc:MOV qword ptr [RBP + -0xe8],-0x1
	000103d7:MOV qword ptr [RBP + -0xe0],0x0
	000103e2:MOV qword ptr [RBP + -0xd8],0x0
	000103ed:MOV qword ptr [RBP + -0x100],0x0
	000103f8:MOV RAX,qword ptr [RBP + -0x100]
	000103ff:MOV qword ptr [RBP + -0x108],RAX
	00010406:MOV RAX,qword ptr [RBP + -0x108]
	0001040d:MOV qword ptr [RBP + -0x118],RAX
	00010414:MOV RAX,qword ptr [RBP + -0x118]
	0001041b:MOV qword ptr [RBP + -0x120],RAX
	00010422:CALL 0x000132f0
	00010427:MOV qword ptr [RBP + -0x138],RAX
	0001042e:CMP qword ptr [RBP + -0x138],-0x1
	00010436:JZ 0x00010467
	00010438:CMP qword ptr [RBP + -0x138],0x8
	00010440:JBE 0x00010467
	00010442:LEA RAX,[0x3e240]
	00010449:MOV RAX,qword ptr [RAX]
	0001044c:MOV EDX,0x8
	00010451:LEA RCX,[0x33125]
	00010458:MOV RSI,RCX
	0001045b:MOV RDI,RAX
	0001045e:CALL 0x00005920
	00010463:TEST EAX,EAX
	00010465:JZ 0x0001049e
	00010467:MOV RDX,qword ptr [0x00040518]
	0001046e:MOV RAX,qword ptr [RBP + -0xa8]
	00010475:MOV RSI,RDX
	00010478:MOV RDI,RAX
	0001047b:CALL 0x0000fed1
	00010480:CMP qword ptr [RBP + -0x138],-0x1
	00010488:JNZ 0x00010494
	0001048a:MOV EAX,0xffffffff
	0001048f:JMP 0x000132ce
	00010494:MOV EAX,0x0
	00010499:JMP 0x000132ce
	0001049e:LEA RAX,[0x3e240]
	000104a5:MOV RAX,qword ptr [RAX]
	000104a8:MOV qword ptr [RBP + -0x148],RAX
	000104af:JMP 0x000104b9
	000104b1:ADD qword ptr [RBP + -0x148],0x1
	000104b9:MOV RAX,qword ptr [RBP + -0x148]
	000104c0:MOVZX EAX,byte ptr [RAX]
	000104c3:CMP AL,0x2a
	000104c5:JZ 0x000104b1
	000104c7:MOV RAX,qword ptr [RBP + -0x148]
	000104ce:MOVZX EAX,byte ptr [RAX]
	000104d1:CMP AL,0x20
	000104d3:JNZ 0x00010531
	000104d5:MOV RAX,qword ptr [RBP + -0x148]
	000104dc:MOV qword ptr [0x00040570],RAX
	000104e3:JMP 0x000104ed
	000104e5:ADD qword ptr [RBP + -0x148],0x1
	000104ed:MOV RAX,qword ptr [RBP + -0x148]
	000104f4:MOVZX EAX,byte ptr [RAX]
	000104f7:CMP AL,0xa
	000104f9:JNZ 0x000104e5
	000104fb:MOV RAX,qword ptr [RBP + -0x148]
	00010502:MOV byte ptr [RAX],0x0
	00010505:MOV RAX,qword ptr [0x00040570]
	0001050c:MOV RDI,RAX
	0001050f:CALL 0x000183f9
	00010514:MOV qword ptr [0x00040570],RAX
	0001051b:MOV RAX,qword ptr [0x00040570]
	00010522:TEST RAX,RAX
	00010525:JNZ 0x00010531
	00010527:MOV EAX,0xffffffff
	0001052c:JMP 0x000132ce
	00010531:MOV RAX,qword ptr [0x00040518]
	00010538:ADD RAX,0x1
	0001053c:MOV qword ptr [0x00040568],RAX
	00010543:JMP 0x00011479
END_OF_LINE
----------------------------------------------
123: LAB_00011479:
	00011479:MOV RDX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
124: if (p_max <= p_end) goto LAB_00011491;
	0001148a:JL 0x00010548
	00011490:NOP
	00011491:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
125: chars_read = get_line();
	00010548:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
126: if (chars_read == 0xffffffffffffffff) {
	00010554:CMP qword ptr [RBP + -0x138],-0x1
	0001055c:JNZ 0x00010568
END_OF_LINE
----------------------------------------------
127: iVar13 = -1;
	0001055e:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
128: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
130: if (chars_read == 0) {
	00010568:CMP qword ptr [RBP + -0x138],0x0
	00010570:JNZ 0x000105d9
END_OF_LINE
----------------------------------------------
131: if ((repl_beginning != 0) && (bVar6)) {
	00010572:CMP qword ptr [RBP + -0x130],0x0
	0001057a:JZ 0x00010591
	0001057c:CMP byte ptr [RBP + -0x161],0x0
	00010583:JZ 0x00010591
END_OF_LINE
----------------------------------------------
132: bVar9 = true;
	00010585:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
133: goto LAB_00011491;
	00011491:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
135: if (3 < p_max - p_end) {
	0001059f:SUB RAX,RDX
	000105a2:CMP RAX,0x3
	000105a6:JG 0x000105c5
END_OF_LINE
----------------------------------------------
137: fatal("unexpected end of file in patch");
	000105d4:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
139: *(undefined4 *)buf = 0xa2020;
	000105b2:MOV dword ptr [RAX],0xa2020
END_OF_LINE
----------------------------------------------
140: chars_read = 3;
	000105b8:MOV qword ptr [RBP + -0x138],0x3
END_OF_LINE
----------------------------------------------
142: pcVar16 = buf;
	000105d9:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
143: p_end = p_end + 1;
	000105e0:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
144: if (p_end == hunkmax) {
	000105f9:CMP RDX,RAX
	000105fc:JNZ 0x00010658
END_OF_LINE
----------------------------------------------
145: pcVar17 = format_linenum(numbuf1,p_input_line);
	0001060f:LEA RAX,[RBP + -0x80]
	00010613:MOV RSI,RDX
	00010616:MOV RDI,RAX
	00010619:CALL 0x00018472
END_OF_LINE
----------------------------------------------
146: lVar15 = pch_hunk_beg();
	00010621:CALL 0x00013da8
END_OF_LINE
----------------------------------------------
147: pcVar18 = format_linenum(numbuf0,lVar15);
	00010629:LEA RAX,[RBP + -0xa0]
	00010630:MOV RSI,RDX
	00010633:MOV RDI,RAX
	00010636:CALL 0x00018472
END_OF_LINE
----------------------------------------------
149: fatal("unterminated hunk starting at line %s; giving up at line %s: %s",pcVar18,pcVar17,
	00010653:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
150: pcVar16);
	00010653:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
152: if (hunkmax <= p_end) {
	00010669:JL 0x00010693
END_OF_LINE
----------------------------------------------
154: __assert_fail("p_end < hunkmax","pch.c",0x4f3,"another_hunk");
	0001068e:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
156: p_Char[p_end] = *buf;
	000106ab:ADD RDX,RCX
	000106ae:MOVZX EAX,byte ptr [RAX]
	000106b1:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
157: p_len[p_end] = 0;
	000106c5:ADD RAX,RDX
	000106c8:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
158: p_line[p_end] = (char *)0x0;
	000106e1:ADD RAX,RDX
	000106e4:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
159: pcVar16 = buf;
	000106e4:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
160: switch(*buf) {
	000106f5:MOVZX EAX,byte ptr [RAX]
	000106f8:MOVSX EAX,AL
	000106fb:SUB EAX,0x9
	000106fe:CMP EAX,0x24
	00010701:JA 0x00011458
	00010707:MOV EAX,EAX
	00010709:LEA RDX,[RAX*0x4]
	00010711:LEA RAX,[0x336fc]
	00010718:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001071b:CDQE
	0001071d:LEA RDX,[0x336fc]
	00010724:ADD RAX,RDX
	00010727:JMP RAX
END_OF_LINE
----------------------------------------------
161: case '\t':
	000110ea:MOV qword ptr [RBP + -0x148],RAX
END_OF_LINE
----------------------------------------------
162: case '\n':
	000110ea:MOV qword ptr [RBP + -0x148],RAX
END_OF_LINE
----------------------------------------------
163: s = buf;
	000110ea:MOV qword ptr [RBP + -0x148],RAX
END_OF_LINE
----------------------------------------------
164: if (*buf == '\t') {
	000110fb:MOVZX EAX,byte ptr [RAX]
	000110fe:CMP AL,0x9
	00011100:JNZ 0x00011112
END_OF_LINE
----------------------------------------------
165: s = buf + 1;
	00011102:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
166: chars_read = chars_read - 1;
	0001110a:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
168: if (((repl_beginning == 0) || (!bVar6)) || ((bVar7 && (difftype != NEW_CONTEXT_DIFF)))) {
	00011112:CMP qword ptr [RBP + -0x130],0x0
	0001111a:JZ 0x00011148
	0001111c:CMP byte ptr [RBP + -0x161],0x0
	00011123:JZ 0x00011148
	00011125:MOVZX EAX,byte ptr [RBP + -0x163]
	0001112c:XOR EAX,0x1
	0001112f:TEST AL,AL
	00011131:JNZ 0x0001113c
	00011133:CMP dword ptr [RBP + -0x174],0x4
	0001113a:JNZ 0x00011148
END_OF_LINE
----------------------------------------------
169: if (chars_read < 2) {
	00011150:JBE 0x00011188
END_OF_LINE
----------------------------------------------
170: LAB_00011188:
	00011188:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
171: iVar13 = 0;
	00011188:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
174: lVar15 = p_ptrn_lines;
	0001115a:JZ 0x00011165
END_OF_LINE
----------------------------------------------
175: if (repl_beginning != 0) {
	00011152:CMP qword ptr [RBP + -0x130],0x0
	0001115a:JZ 0x00011165
END_OF_LINE
----------------------------------------------
176: lVar15 = p_max;
	00011163:JMP 0x0001116c
END_OF_LINE
----------------------------------------------
178: if ((lVar15 != p_end) || (_Var12 = incomplete_line(), !_Var12)) goto LAB_00011188;
	00011173:CMP RAX,RDX
	00011176:JNZ 0x00011188
	00011178:CALL 0x0001359c
	0001117d:TEST AL,AL
	0001117f:JZ 0x00011188
	00011181:MOV EAX,0x1
	00011186:JMP 0x0001118d
	00011188:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
179: iVar13 = 1;
	00011181:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
181: chars_read = chars_read - (long)iVar13;
	0001118d:CDQE
	0001118f:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
182: p_len[p_end] = chars_read;
	000111a8:ADD RDX,RAX
	000111ab:MOV RAX,qword ptr [RBP + -0x138]
	000111b2:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
183: ppcVar2 = p_line + p_end;
	000111d1:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
184: pcVar16 = savebuf(buf,chars_read);
	000111e2:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
185: *ppcVar2 = pcVar16;
	000111e7:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
186: if ((chars_read != 0) && (p_line[p_end] == (char *)0x0)) {
	000111ea:CMP qword ptr [RBP + -0x138],0x0
	000111f2:JZ 0x0001122d
	000111f4:MOV RDX,qword ptr [0x00040520]
	000111fb:MOV RAX,qword ptr [0x0003e040]
	00011202:SHL RAX,0x3
	00011206:ADD RAX,RDX
	00011209:MOV RAX,qword ptr [RAX]
	0001120c:TEST RAX,RAX
	0001120f:JNZ 0x0001122d
END_OF_LINE
----------------------------------------------
187: p_end = p_end + -1;
	00011218:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
188: iVar13 = -1;
	00011223:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
189: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
191: if (p_ptrn_lines + 1 != p_end) {
	00011234:LEA RDX,[RAX + 0x1]
	00011238:MOV RAX,qword ptr [0x0003e040]
	0001123f:CMP RDX,RAX
	00011242:JZ 0x00011479
END_OF_LINE
----------------------------------------------
192: bVar7 = (bool)(repl_beginning != 0 | bVar8);
	0001124f:CMP qword ptr [RBP + -0x130],0x0
	00011257:SETNZ AL
	0001125a:MOVZX EAX,AL
	0001125d:OR EAX,EDX
END_OF_LINE
----------------------------------------------
193: bVar11 = true;
	0001126a:MOV byte ptr [RBP + -0x162],0x1
END_OF_LINE
----------------------------------------------
194: context = context + 1;
	00011271:ADD qword ptr [RBP + -0x140],0x1
END_OF_LINE
----------------------------------------------
195: if (repl_beginning == 0) {
	00011279:CMP qword ptr [RBP + -0x130],0x0
	00011281:JZ 0x0001128d
END_OF_LINE
----------------------------------------------
196: ptrn_copiable = ptrn_copiable + 1;
	0001128d:ADD qword ptr [RBP + -0xe0],0x1
END_OF_LINE
----------------------------------------------
199: repl_copiable = repl_copiable + 1;
	00011283:ADD qword ptr [RBP + -0xd8],0x1
END_OF_LINE
----------------------------------------------
201: p_Char[p_end] = ' ';
	000112a3:ADD RAX,RDX
	000112a6:MOV byte ptr [RAX],0x20
END_OF_LINE
----------------------------------------------
202: bVar8 = bVar7;
	000112a9:JMP 0x00011479
END_OF_LINE
----------------------------------------------
204: goto LAB_00011479;
	00011479:MOV RDX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
206: bVar9 = true;
	0001113c:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
208: default:
	00011458:CMP qword ptr [RBP + -0x130],0x0
END_OF_LINE
----------------------------------------------
209: if ((repl_beginning == 0) || (!bVar6)) {
	00011458:CMP qword ptr [RBP + -0x130],0x0
	00011460:JZ 0x00011474
	00011462:CMP byte ptr [RBP + -0x161],0x0
	00011469:JZ 0x00011474
END_OF_LINE
----------------------------------------------
211: malformed();
	00011474:CALL 0x00010053
END_OF_LINE
----------------------------------------------
213: bVar9 = true;
	0001146b:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
215: case ' ':
	000112b8:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
216: s = buf + 1;
	000112b8:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
217: chars_read = chars_read - 1;
	000112c3:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
218: if ((*s == '\n') && (canonicalize_ws != false)) {
	000112d2:MOVZX EAX,byte ptr [RAX]
	000112d5:CMP AL,0xa
	000112d7:JNZ 0x000112fe
	000112d9:LEA RAX,[0x3e368]
	000112e0:MOVZX EAX,byte ptr [RAX]
	000112e3:TEST AL,AL
	000112e5:JZ 0x000112fe
END_OF_LINE
----------------------------------------------
219: *(undefined2 *)s = 10;
	000112ee:MOV word ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
220: chars_read = 2;
	000112f3:MOV qword ptr [RBP + -0x138],0x2
END_OF_LINE
----------------------------------------------
222: if ((*s == ' ') || (*s == '\t')) {
	00011305:MOVZX EAX,byte ptr [RAX]
	00011308:CMP AL,0x20
	0001130a:JZ 0x0001131a
	0001130c:MOV RAX,qword ptr [RBP + -0x148]
	00011313:MOVZX EAX,byte ptr [RAX]
	00011316:CMP AL,0x9
	00011318:JNZ 0x0001132c
END_OF_LINE
----------------------------------------------
223: s = pcVar16 + 2;
	0001131a:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
224: chars_read = chars_read - 1;
	00011322:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
226: else if ((repl_beginning != 0) && (bVar6)) {
	0001132c:CMP qword ptr [RBP + -0x130],0x0
	00011334:JZ 0x0001134b
	00011336:CMP byte ptr [RBP + -0x161],0x0
	0001133d:JZ 0x0001134b
END_OF_LINE
----------------------------------------------
227: bVar9 = true;
	0001133f:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
230: bVar11 = true;
	0001134b:MOV byte ptr [RBP + -0x162],0x1
END_OF_LINE
----------------------------------------------
231: context = context + 1;
	00011352:ADD qword ptr [RBP + -0x140],0x1
END_OF_LINE
----------------------------------------------
232: if (repl_beginning == 0) {
	0001135a:CMP qword ptr [RBP + -0x130],0x0
	00011362:JZ 0x0001136e
END_OF_LINE
----------------------------------------------
233: ptrn_copiable = ptrn_copiable + 1;
	0001136e:ADD qword ptr [RBP + -0xe0],0x1
END_OF_LINE
----------------------------------------------
236: repl_copiable = repl_copiable + 1;
	00011364:ADD qword ptr [RBP + -0xd8],0x1
END_OF_LINE
----------------------------------------------
238: if (chars_read < 2) {
	0001137e:JBE 0x000113b6
END_OF_LINE
----------------------------------------------
239: LAB_000113b6:
	000113b6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
240: iVar13 = 0;
	000113b6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
243: lVar15 = p_ptrn_lines;
	00011388:JZ 0x00011393
END_OF_LINE
----------------------------------------------
244: if (repl_beginning != 0) {
	00011380:CMP qword ptr [RBP + -0x130],0x0
	00011388:JZ 0x00011393
END_OF_LINE
----------------------------------------------
245: lVar15 = p_max;
	00011391:JMP 0x0001139a
END_OF_LINE
----------------------------------------------
247: if ((lVar15 != p_end) || (_Var12 = incomplete_line(), !_Var12)) goto LAB_000113b6;
	000113a1:CMP RAX,RDX
	000113a4:JNZ 0x000113b6
	000113a6:CALL 0x0001359c
	000113ab:TEST AL,AL
	000113ad:JZ 0x000113b6
	000113af:MOV EAX,0x1
	000113b4:JMP 0x000113bb
	000113b6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
248: iVar13 = 1;
	000113af:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
250: chars_read = chars_read - (long)iVar13;
	000113bb:CDQE
	000113bd:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
251: p_len[p_end] = chars_read;
	000113d6:ADD RDX,RAX
	000113d9:MOV RAX,qword ptr [RBP + -0x138]
	000113e0:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
252: ppcVar2 = p_line + p_end;
	000113f5:LEA RBX,[RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
253: pcVar16 = savebuf(s,chars_read);
	0001140d:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
254: *ppcVar2 = pcVar16;
	00011412:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
255: if ((chars_read == 0) || (p_line[p_end] != (char *)0x0)) goto LAB_00011479;
	00011415:CMP qword ptr [RBP + -0x138],0x0
	0001141d:JZ 0x00011479
	0001141f:MOV RDX,qword ptr [0x00040520]
	00011426:MOV RAX,qword ptr [0x0003e040]
	0001142d:SHL RAX,0x3
	00011431:ADD RAX,RDX
	00011434:MOV RAX,qword ptr [RAX]
	00011437:TEST RAX,RAX
	0001143a:JNZ 0x00011479
	0001143c:MOV RAX,qword ptr [0x0003e040]
	00011443:SUB RAX,0x1
	00011447:MOV qword ptr [0x0003e040],RAX
	0001144e:MOV EAX,0xffffffff
	00011453:JMP 0x000132ce
	00011458:CMP qword ptr [RBP + -0x130],0x0
	00011460:JZ 0x00011474
	00011462:CMP byte ptr [RBP + -0x161],0x0
	00011469:JZ 0x00011474
	0001146b:MOV byte ptr [RBP + -0x15f],0x1
	00011472:JMP 0x00011491
	00011474:CALL 0x00010053
	00011479:MOV RDX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
256: p_end = p_end + -1;
	00011443:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
257: iVar13 = -1;
	0001144e:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
258: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
259: case '!':
	00010f07:MOV byte ptr [RBP + -0x161],0x0
END_OF_LINE
----------------------------------------------
260: case '+':
	00010f07:MOV byte ptr [RBP + -0x161],0x0
END_OF_LINE
----------------------------------------------
261: bVar6 = false;
	00010f07:MOV byte ptr [RBP + -0x161],0x0
END_OF_LINE
----------------------------------------------
262: goto LAB_00010f11;
	00010f11:LEA RAX,[0x3e240]
END_OF_LINE
----------------------------------------------
263: case '*':
	00010746:CALL 0x00005920
END_OF_LINE
----------------------------------------------
264: iVar13 = strncmp(buf,"********",8);
	00010746:CALL 0x00005920
END_OF_LINE
----------------------------------------------
265: psVar3 = p_len;
	00010746:CALL 0x00005920
END_OF_LINE
----------------------------------------------
266: pcVar16 = buf;
	00010746:CALL 0x00005920
END_OF_LINE
----------------------------------------------
267: if (iVar13 == 0) {
	0001074b:TEST EAX,EAX
	0001074d:JNZ 0x0001079e
END_OF_LINE
----------------------------------------------
268: if ((repl_beginning == 0) || (!bVar6)) {
	0001074f:CMP qword ptr [RBP + -0x130],0x0
	00010757:JZ 0x0001076e
	00010759:CMP byte ptr [RBP + -0x161],0x0
	00010760:JZ 0x0001076e
END_OF_LINE
----------------------------------------------
269: pcVar16 = format_linenum(numbuf0,p_input_line);
	00010775:LEA RAX,[RBP + -0xa0]
	0001077c:MOV RSI,RDX
	0001077f:MOV RDI,RAX
	00010782:CALL 0x00018472
END_OF_LINE
----------------------------------------------
271: fatal("unexpected end of hunk at line %s",pcVar16);
	00010799:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
273: bVar9 = true;
	00010762:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
276: if (p_end == 0) {
	000107a5:TEST RAX,RAX
	000107a8:JZ 0x00010806
END_OF_LINE
----------------------------------------------
277: context = 0;
	00010806:MOV qword ptr [RBP + -0x140],0x0
END_OF_LINE
----------------------------------------------
278: sVar20 = strlen(buf);
	00010834:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
279: *psVar3 = sVar20;
	00010839:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
280: ppcVar2 = p_line + p_end;
	00010858:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
281: pcVar16 = savestr(buf);
	0001085f:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
282: *ppcVar2 = pcVar16;
	00010864:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
283: if (*ppcVar2 == (char *)0x0) {
	00010867:MOV RAX,qword ptr [RBX]
	0001086a:TEST RAX,RAX
	0001086d:JNZ 0x0001088b
END_OF_LINE
----------------------------------------------
284: p_end = p_end + -1;
	00010876:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
285: iVar13 = -1;
	00010881:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
286: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
288: for (s = buf; (*s != '\0' && (9 < (int)*s - 0x30U)); s = s + 1) {
	00010895:MOV qword ptr [RBP + -0x148],RAX
	0001089c:JMP 0x000108a6
	0001089e:ADD qword ptr [RBP + -0x148],0x1
	000108a6:MOV RAX,qword ptr [RBP + -0x148]
	000108ad:MOVZX EAX,byte ptr [RAX]
	000108b0:TEST AL,AL
	000108b2:JZ 0x000108c9
	000108b4:MOV RAX,qword ptr [RBP + -0x148]
	000108bb:MOVZX EAX,byte ptr [RAX]
	000108be:MOVSX EAX,AL
	000108c1:SUB EAX,0x30
	000108c4:CMP EAX,0x9
	000108c7:JA 0x0001089e
END_OF_LINE
----------------------------------------------
290: iVar13 = strncmp(s,"0,0",3);
	000108e2:CALL 0x00005920
END_OF_LINE
----------------------------------------------
291: if (iVar13 == 0) {
	000108e7:TEST EAX,EAX
	000108e9:JNZ 0x000108ff
END_OF_LINE
----------------------------------------------
292: remove_prefix(s,2);
	000108fa:CALL 0x0001842a
END_OF_LINE
----------------------------------------------
294: s = scan_linenum(s,&p_first);
	00010913:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
295: if (*s == ',') {
	00010926:MOVZX EAX,byte ptr [RAX]
	00010929:CMP AL,0x2c
	0001092b:JNZ 0x000109a4
END_OF_LINE
----------------------------------------------
296: for (; (*s != '\0' && (9 < (int)*s - 0x30U)); s = s + 1) {
	0001092f:ADD qword ptr [RBP + -0x148],0x1
	00010937:MOV RAX,qword ptr [RBP + -0x148]
	0001093e:MOVZX EAX,byte ptr [RAX]
	00010941:TEST AL,AL
	00010943:JZ 0x0001095a
	00010945:MOV RAX,qword ptr [RBP + -0x148]
	0001094c:MOVZX EAX,byte ptr [RAX]
	0001094f:MOVSX EAX,AL
	00010952:SUB EAX,0x30
	00010955:CMP EAX,0x9
	00010958:JA 0x0001092f
END_OF_LINE
----------------------------------------------
298: scan_linenum(s,&p_ptrn_lines);
	0001096e:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
299: p_ptrn_lines = p_ptrn_lines + (1 - p_first);
	0001097f:SUB RDX,RAX
	00010982:MOV RAX,qword ptr [0x000404f0]
	00010989:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
300: if (p_ptrn_lines < 0) {
	0001099a:TEST RAX,RAX
	0001099d:JNS 0x000109d3
END_OF_LINE
----------------------------------------------
302: malformed();
	0001099f:CALL 0x00010053
END_OF_LINE
----------------------------------------------
305: else if (p_first == 0) {
	000109ab:TEST RAX,RAX
	000109ae:JZ 0x000109bd
END_OF_LINE
----------------------------------------------
306: p_ptrn_lines = 0;
	000109bd:MOV qword ptr [0x000404f0],0x0
END_OF_LINE
----------------------------------------------
307: p_first = 1;
	000109c8:MOV qword ptr [0x000404e0],0x1
END_OF_LINE
----------------------------------------------
310: p_ptrn_lines = 1;
	000109b0:MOV qword ptr [0x000404f0],0x1
END_OF_LINE
----------------------------------------------
312: if ((0x7fffffffffffffff - p_ptrn_lines <= p_first) ||
	000109e4:SUB RAX,RCX
	000109e7:MOV RDX,RAX
	000109ea:MOV RAX,qword ptr [0x000404e0]
	000109f1:CMP RDX,RAX
	000109f4:JLE 0x00010a0c
	000109f6:MOV RAX,qword ptr [0x000404f0]
	000109fd:MOV RDX,0x7ffffffffffffff8
	00010a07:CMP RAX,RDX
	00010a0a:JLE 0x00010a11
END_OF_LINE
----------------------------------------------
313: (0x7ffffffffffffff8 < p_ptrn_lines)) {
	00010a0a:JLE 0x00010a11
END_OF_LINE
----------------------------------------------
315: malformed();
	00010a0c:CALL 0x00010053
END_OF_LINE
----------------------------------------------
317: p_max = p_ptrn_lines + 6;
	00010a18:ADD RAX,0x6
END_OF_LINE
----------------------------------------------
318: while (hunkmax <= p_max + 1) {
	00010a42:LEA RDX,[RAX + 0x1]
	00010a46:MOV RAX,qword ptr [0x0003e048]
	00010a4d:CMP RDX,RAX
	00010a50:JGE 0x00010a25
END_OF_LINE
----------------------------------------------
319: _Var12 = grow_hunkmax();
	00010a25:CALL 0x0000cd95
END_OF_LINE
----------------------------------------------
320: if (!_Var12) {
	00010a2f:JZ 0x00010a3b
END_OF_LINE
----------------------------------------------
321: iVar13 = -1;
	00010a31:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
322: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
325: p_max = hunkmax;
	00010a59:MOV qword ptr [0x00040500],RAX
END_OF_LINE
----------------------------------------------
326: goto LAB_00011479;
	00011479:MOV RDX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
328: if ((repl_beginning == 0) || (!bVar6)) {
	000107aa:CMP qword ptr [RBP + -0x130],0x0
	000107b2:JZ 0x000107c9
	000107b4:CMP byte ptr [RBP + -0x161],0x0
	000107bb:JZ 0x000107c9
END_OF_LINE
----------------------------------------------
329: pcVar17 = format_linenum(numbuf0,p_input_line);
	000107da:LEA RAX,[RBP + -0xa0]
	000107e1:MOV RSI,RDX
	000107e4:MOV RDI,RAX
	000107e7:CALL 0x00018472
END_OF_LINE
----------------------------------------------
331: fatal("unexpected \'***\' at line %s: %s",pcVar17,pcVar16);
	00010801:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
333: bVar9 = true;
	000107bd:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
336: case '-':
	00010a6f:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
337: if (buf[1] == '-') {
	00010a6f:ADD RAX,0x1
	00010a73:MOVZX EAX,byte ptr [RAX]
	00010a76:CMP AL,0x2d
	00010a78:JNZ 0x00010f10
END_OF_LINE
----------------------------------------------
338: if (ptrn_prefix_context == -1) {
	00010a7e:CMP qword ptr [RBP + -0xf8],-0x1
	00010a86:JNZ 0x00010a96
END_OF_LINE
----------------------------------------------
339: ptrn_prefix_context = context;
	00010a8f:MOV qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
341: ptrn_suffix_context = context;
	00010a9d:MOV qword ptr [RBP + -0xf0],RAX
END_OF_LINE
----------------------------------------------
342: if ((repl_beginning != 0) ||
	00010aa4:CMP qword ptr [RBP + -0x130],0x0
	00010aac:JNZ 0x00010aed
	00010aae:MOV RAX,qword ptr [0x000404f0]
	00010ab5:LEA RCX,[RAX + 0x1]
	00010ab9:MOV RDX,qword ptr [0x00040530]
	00010ac0:MOV RAX,qword ptr [0x0003e040]
	00010ac7:SUB RAX,0x1
	00010acb:ADD RAX,RDX
	00010ace:MOVZX EAX,byte ptr [RAX]
	00010ad1:CMP AL,0xa
	00010ad3:SETZ AL
	00010ad6:MOVZX EAX,AL
	00010ad9:LEA RDX,[RCX + RAX*0x1]
	00010add:MOV RAX,qword ptr [0x0003e040]
	00010ae4:CMP RDX,RAX
	00010ae7:JZ 0x00010c48
END_OF_LINE
----------------------------------------------
343: (p_ptrn_lines + 1 + (ulong)(p_Char[p_end + -1] == '\n') != p_end)) {
	00010ab5:LEA RCX,[RAX + 0x1]
	00010ab9:MOV RDX,qword ptr [0x00040530]
	00010ac0:MOV RAX,qword ptr [0x0003e040]
	00010ac7:SUB RAX,0x1
	00010acb:ADD RAX,RDX
	00010ace:MOVZX EAX,byte ptr [RAX]
	00010ad1:CMP AL,0xa
	00010ad3:SETZ AL
	00010ad6:MOVZX EAX,AL
	00010ad9:LEA RDX,[RCX + RAX*0x1]
	00010add:MOV RAX,qword ptr [0x0003e040]
	00010ae4:CMP RDX,RAX
END_OF_LINE
----------------------------------------------
344: if (p_end != 1) {
	00010af4:CMP RAX,0x1
	00010af8:JNZ 0x00010b5c
END_OF_LINE
----------------------------------------------
345: if (repl_beginning == 0) {
	00010b5c:CMP qword ptr [RBP + -0x130],0x0
	00010b64:JNZ 0x00010bd8
END_OF_LINE
----------------------------------------------
346: pcVar16 = format_linenum(numbuf1,p_hunk_beg);
	00010b6d:LEA RAX,[RBP + -0x80]
	00010b71:MOV RSI,RDX
	00010b74:MOV RDI,RAX
	00010b77:CALL 0x00018472
END_OF_LINE
----------------------------------------------
347: pcVar17 = format_linenum(numbuf0,p_input_line);
	00010b86:LEA RAX,[RBP + -0xa0]
	00010b8d:MOV RSI,RDX
	00010b90:MOV RDI,RAX
	00010b93:CALL 0x00018472
END_OF_LINE
----------------------------------------------
348: if (p_ptrn_lines < p_end) {
	00010bac:JG 0x00010bb7
END_OF_LINE
----------------------------------------------
349: pcVar18 = "Overdue";
	00010bb7:LEA RAX,[0x33366]
END_OF_LINE
----------------------------------------------
352: pcVar18 = "Premature";
	00010bae:LEA RAX,[0x3335c]
END_OF_LINE
----------------------------------------------
355: fatal("%s \'---\' at line %s; check line numbers at line %s",pcVar18,pcVar17,pcVar16
	00010bd3:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
358: if (!bVar6) {
	00010be2:TEST AL,AL
	00010be4:JZ 0x00010c3c
END_OF_LINE
----------------------------------------------
359: pcVar16 = format_linenum(numbuf1,p_hunk_beg + repl_beginning);
	00010bf4:ADD RDX,RAX
	00010bf7:LEA RAX,[RBP + -0x80]
	00010bfb:MOV RSI,RDX
	00010bfe:MOV RDI,RAX
	00010c01:CALL 0x00018472
END_OF_LINE
----------------------------------------------
360: pcVar17 = format_linenum(numbuf0,p_input_line);
	00010c10:LEA RAX,[RBP + -0xa0]
	00010c17:MOV RSI,RDX
	00010c1a:MOV RDI,RAX
	00010c1d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
362: fatal("duplicate \'---\' at line %s; check line numbers at line %s",pcVar17,pcVar16)
	00010c37:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
365: bVar9 = true;
	00010c3c:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
368: bVar10 = true;
	00010afa:MOV byte ptr [RBP + -0x160],0x1
END_OF_LINE
----------------------------------------------
369: p_end = p_ptrn_lines + 1;
	00010b08:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
370: ptrn_suffix_context = -1;
	00010b13:MOV qword ptr [RBP + -0xf0],-0x1
END_OF_LINE
----------------------------------------------
371: ptrn_prefix_context = -1;
	00010b25:MOV qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
372: fillsrc = p_ptrn_lines + 2;
	00010b33:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
373: filldst = 1;
	00010b3e:MOV qword ptr [RBP + -0x118],0x1
END_OF_LINE
----------------------------------------------
374: fillcnt = p_ptrn_lines;
	00010b50:MOV qword ptr [RBP + -0x128],RAX
END_OF_LINE
----------------------------------------------
376: repl_beginning = p_end;
	00010c4f:MOV qword ptr [RBP + -0x130],RAX
END_OF_LINE
----------------------------------------------
377: repl_backtrack_position = ftell((FILE *)pfp);
	00010c60:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
378: repl_patch_line = p_input_line;
	00010c73:MOV qword ptr [RBP + -0x108],RAX
END_OF_LINE
----------------------------------------------
379: repl_context = context;
	00010c81:MOV qword ptr [RBP + -0x100],RAX
END_OF_LINE
----------------------------------------------
380: psVar3 = p_len + p_end;
	00010ca4:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
381: sVar20 = strlen(buf);
	00010cab:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
382: *psVar3 = sVar20;
	00010cb0:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
383: ppcVar2 = p_line + p_end;
	00010ccf:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
384: pcVar16 = savestr(buf);
	00010cd6:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
385: *ppcVar2 = pcVar16;
	00010cdb:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
386: if (*ppcVar2 == (char *)0x0) {
	00010cde:MOV RAX,qword ptr [RBX]
	00010ce1:TEST RAX,RAX
	00010ce4:JNZ 0x00010d02
END_OF_LINE
----------------------------------------------
387: p_end = p_end + -1;
	00010ced:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
388: iVar13 = -1;
	00010cf8:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
389: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
391: p_Char[p_end] = '=';
	00010d10:ADD RAX,RDX
	00010d13:MOV byte ptr [RAX],0x3d
END_OF_LINE
----------------------------------------------
392: for (s = buf; (*s != '\0' && (9 < (int)*s - 0x30U)); s = s + 1) {
	00010d20:MOV qword ptr [RBP + -0x148],RAX
	00010d27:JMP 0x00010d31
	00010d29:ADD qword ptr [RBP + -0x148],0x1
	00010d31:MOV RAX,qword ptr [RBP + -0x148]
	00010d38:MOVZX EAX,byte ptr [RAX]
	00010d3b:TEST AL,AL
	00010d3d:JZ 0x00010d54
	00010d3f:MOV RAX,qword ptr [RBP + -0x148]
	00010d46:MOVZX EAX,byte ptr [RAX]
	00010d49:MOVSX EAX,AL
	00010d4c:SUB EAX,0x30
	00010d4f:CMP EAX,0x9
	00010d52:JA 0x00010d29
END_OF_LINE
----------------------------------------------
394: s = scan_linenum(s,&p_newfirst);
	00010d68:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
395: if (*s == ',') {
	00010d7b:MOVZX EAX,byte ptr [RAX]
	00010d7e:CMP AL,0x2c
	00010d80:JNZ 0x00010dfc
END_OF_LINE
----------------------------------------------
397: s = s + 1;
	00010d82:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
398: if (*s == '\0') {
	00010d91:MOVZX EAX,byte ptr [RAX]
	00010d94:TEST AL,AL
	00010d96:JNZ 0x00010d9d
END_OF_LINE
----------------------------------------------
400: malformed();
	00010d98:CALL 0x00010053
END_OF_LINE
----------------------------------------------
402: } while (9 < (int)*s - 0x30U);
	00010da4:MOVZX EAX,byte ptr [RAX]
	00010da7:MOVSX EAX,AL
	00010daa:SUB EAX,0x30
	00010dad:CMP EAX,0x9
	00010db0:JA 0x00010d82
END_OF_LINE
----------------------------------------------
403: scan_linenum(s,&p_repl_lines);
	00010dc6:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
404: p_repl_lines = p_repl_lines + (1 - p_newfirst);
	00010dd7:SUB RDX,RAX
	00010dda:MOV RAX,qword ptr [0x000404f8]
	00010de1:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
405: if (p_repl_lines < 0) {
	00010df2:TEST RAX,RAX
	00010df5:JNS 0x00010e2b
END_OF_LINE
----------------------------------------------
407: malformed();
	00010df7:CALL 0x00010053
END_OF_LINE
----------------------------------------------
410: else if (p_newfirst == 0) {
	00010e03:TEST RAX,RAX
	00010e06:JZ 0x00010e15
END_OF_LINE
----------------------------------------------
411: p_repl_lines = 0;
	00010e15:MOV qword ptr [0x000404f8],0x0
END_OF_LINE
----------------------------------------------
412: p_newfirst = 1;
	00010e20:MOV qword ptr [0x000404e8],0x1
END_OF_LINE
----------------------------------------------
415: p_repl_lines = 1;
	00010e08:MOV qword ptr [0x000404f8],0x1
END_OF_LINE
----------------------------------------------
417: if ((0x7fffffffffffffff - p_repl_lines <= p_newfirst) ||
	00010e3c:SUB RAX,RCX
	00010e3f:MOV RDX,RAX
	00010e42:MOV RAX,qword ptr [0x000404e8]
	00010e49:CMP RDX,RAX
	00010e4c:JLE 0x00010e71
	00010e4e:MOV RCX,qword ptr [0x0003e040]
	00010e55:MOV RAX,0x7fffffffffffffff
	00010e5f:SUB RAX,RCX
	00010e62:MOV RDX,RAX
	00010e65:MOV RAX,qword ptr [0x000404f8]
	00010e6c:CMP RDX,RAX
	00010e6f:JG 0x00010e76
END_OF_LINE
----------------------------------------------
418: (0x7fffffffffffffff - p_end <= p_repl_lines)) {
	00010e5f:SUB RAX,RCX
	00010e62:MOV RDX,RAX
	00010e65:MOV RAX,qword ptr [0x000404f8]
	00010e6c:CMP RDX,RAX
	00010e6f:JG 0x00010e76
END_OF_LINE
----------------------------------------------
420: malformed();
	00010e71:CALL 0x00010053
END_OF_LINE
----------------------------------------------
422: p_max = p_end + p_repl_lines;
	00010e84:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
423: while (hunkmax <= p_max + 1) {
	00010ead:LEA RDX,[RAX + 0x1]
	00010eb1:MOV RAX,qword ptr [0x0003e048]
	00010eb8:CMP RDX,RAX
	00010ebb:JGE 0x00010e90
END_OF_LINE
----------------------------------------------
424: _Var12 = grow_hunkmax();
	00010e90:CALL 0x0000cd95
END_OF_LINE
----------------------------------------------
425: if (!_Var12) {
	00010e9a:JZ 0x00010ea6
END_OF_LINE
----------------------------------------------
426: iVar13 = -1;
	00010e9c:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
427: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
430: if ((ptrn_copiable != p_repl_lines) &&
	00010ec4:CMP qword ptr [RBP + -0xe0],RAX
	00010ecb:JZ 0x00010ef7
	00010ecd:MOV RAX,qword ptr [0x00040508]
	00010ed4:TEST RAX,RAX
	00010ed7:JNZ 0x00010ef0
	00010ed9:CMP qword ptr [RBP + -0x140],0x0
	00010ee1:JNZ 0x00010ef0
	00010ee3:MOV RAX,qword ptr [0x000404f8]
	00010eea:CMP RAX,0x1
	00010eee:JZ 0x00010ef7
END_OF_LINE
----------------------------------------------
431: (((p_prefix_context != 0 || (context != 0)) || (p_repl_lines != 1)))) {
	00010ed4:TEST RAX,RAX
	00010ed7:JNZ 0x00010ef0
	00010ed9:CMP qword ptr [RBP + -0x140],0x0
	00010ee1:JNZ 0x00010ef0
	00010ee3:MOV RAX,qword ptr [0x000404f8]
	00010eea:CMP RAX,0x1
END_OF_LINE
----------------------------------------------
432: bVar6 = false;
	00010ef0:MOV byte ptr [RBP + -0x161],0x0
END_OF_LINE
----------------------------------------------
434: context = 0;
	00010ef7:MOV qword ptr [RBP + -0x140],0x0
END_OF_LINE
----------------------------------------------
437: LAB_00010f11:
	00010f11:LEA RAX,[0x3e240]
END_OF_LINE
----------------------------------------------
438: s = buf + 1;
	00010f1b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
439: chars_read = chars_read - 1;
	00010f26:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
440: if ((*s == '\n') && (canonicalize_ws != false)) {
	00010f35:MOVZX EAX,byte ptr [RAX]
	00010f38:CMP AL,0xa
	00010f3a:JNZ 0x00010f65
	00010f3c:LEA RAX,[0x3e368]
	00010f43:MOVZX EAX,byte ptr [RAX]
	00010f46:TEST AL,AL
	00010f48:JZ 0x00010f65
END_OF_LINE
----------------------------------------------
441: *(undefined2 *)s = 0xa20;
	00010f51:MOV word ptr [RAX],0xa20
END_OF_LINE
----------------------------------------------
442: pcVar16[3] = '\0';
	00010f56:MOV byte ptr [RAX + 0x2],0x0
END_OF_LINE
----------------------------------------------
443: chars_read = 2;
	00010f5a:MOV qword ptr [RBP + -0x138],0x2
END_OF_LINE
----------------------------------------------
445: if ((*s == ' ') || (*s == '\t')) {
	00010f6c:MOVZX EAX,byte ptr [RAX]
	00010f6f:CMP AL,0x20
	00010f71:JZ 0x00010f81
	00010f73:MOV RAX,qword ptr [RBP + -0x148]
	00010f7a:MOVZX EAX,byte ptr [RAX]
	00010f7d:CMP AL,0x9
	00010f7f:JNZ 0x00010f93
END_OF_LINE
----------------------------------------------
446: s = pcVar16 + 2;
	00010f81:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
447: chars_read = chars_read - 1;
	00010f89:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
449: else if ((repl_beginning != 0) && (bVar6)) {
	00010f93:CMP qword ptr [RBP + -0x130],0x0
	00010f9b:JZ 0x00010fb2
	00010f9d:CMP byte ptr [RBP + -0x161],0x0
	00010fa4:JZ 0x00010fb2
END_OF_LINE
----------------------------------------------
450: bVar9 = true;
	00010fa6:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
453: if (repl_beginning == 0) {
	00010fb2:CMP qword ptr [RBP + -0x130],0x0
	00010fba:JNZ 0x00010fd6
END_OF_LINE
----------------------------------------------
454: if (ptrn_prefix_context == -1) {
	00010fbc:CMP qword ptr [RBP + -0xf8],-0x1
	00010fc4:JNZ 0x00010fee
END_OF_LINE
----------------------------------------------
455: ptrn_prefix_context = context;
	00010fcd:MOV qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
458: else if (repl_prefix_context == -1) {
	00010fd6:CMP qword ptr [RBP + -0xe8],-0x1
	00010fde:JNZ 0x00010fee
END_OF_LINE
----------------------------------------------
459: repl_prefix_context = context;
	00010fe7:MOV qword ptr [RBP + -0xe8],RAX
END_OF_LINE
----------------------------------------------
461: if (chars_read < 2) {
	00010ff6:JBE 0x0001102e
END_OF_LINE
----------------------------------------------
462: LAB_0001102e:
	0001102e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
463: iVar13 = 0;
	0001102e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
466: lVar15 = p_ptrn_lines;
	00011000:JZ 0x0001100b
END_OF_LINE
----------------------------------------------
467: if (repl_beginning != 0) {
	00010ff8:CMP qword ptr [RBP + -0x130],0x0
	00011000:JZ 0x0001100b
END_OF_LINE
----------------------------------------------
468: lVar15 = p_max;
	00011009:JMP 0x00011012
END_OF_LINE
----------------------------------------------
470: if ((lVar15 != p_end) || (_Var12 = incomplete_line(), !_Var12)) goto LAB_0001102e;
	00011019:CMP RAX,RDX
	0001101c:JNZ 0x0001102e
	0001101e:CALL 0x0001359c
	00011023:TEST AL,AL
	00011025:JZ 0x0001102e
	00011027:MOV EAX,0x1
	0001102c:JMP 0x00011033
	0001102e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
471: iVar13 = 1;
	00011027:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
473: chars_read = chars_read - (long)iVar13;
	00011033:CDQE
	00011035:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
474: p_len[p_end] = chars_read;
	0001104e:ADD RDX,RAX
	00011051:MOV RAX,qword ptr [RBP + -0x138]
	00011058:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
475: ppcVar2 = p_line + p_end;
	0001106d:LEA RBX,[RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
476: pcVar16 = savebuf(s,chars_read);
	00011085:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
477: *ppcVar2 = pcVar16;
	0001108a:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
478: if ((chars_read != 0) && (p_line[p_end] == (char *)0x0)) {
	0001108d:CMP qword ptr [RBP + -0x138],0x0
	00011095:JZ 0x000110d0
	00011097:MOV RDX,qword ptr [0x00040520]
	0001109e:MOV RAX,qword ptr [0x0003e040]
	000110a5:SHL RAX,0x3
	000110a9:ADD RAX,RDX
	000110ac:MOV RAX,qword ptr [RAX]
	000110af:TEST RAX,RAX
	000110b2:JNZ 0x000110d0
END_OF_LINE
----------------------------------------------
479: p_end = p_end + -1;
	000110bb:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
480: iVar13 = -1;
	000110c6:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
481: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
483: context = 0;
	000110d0:MOV qword ptr [RBP + -0x140],0x0
END_OF_LINE
----------------------------------------------
485: goto LAB_00011479;
	00011479:MOV RDX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
487: LAB_00011491:
	00011491:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
488: if ((-1 < p_end) && (repl_beginning == 0)) {
	00011498:TEST RAX,RAX
	0001149b:JS 0x000114d8
	0001149d:CMP qword ptr [RBP + -0x130],0x0
	000114a5:JNZ 0x000114d8
END_OF_LINE
----------------------------------------------
489: lVar15 = pch_hunk_beg();
	000114a7:CALL 0x00013da8
END_OF_LINE
----------------------------------------------
490: pcVar16 = format_linenum(numbuf0,lVar15);
	000114af:LEA RAX,[RBP + -0xa0]
	000114b6:MOV RSI,RDX
	000114b9:MOV RDI,RAX
	000114bc:CALL 0x00018472
END_OF_LINE
----------------------------------------------
492: fatal("no \'---\' found in patch at line %s",pcVar16);
	000114d3:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
494: if (bVar9) {
	000114df:JZ 0x000115b3
END_OF_LINE
----------------------------------------------
495: p_input_line = repl_patch_line;
	000114ec:MOV qword ptr [0x00040518],RAX
END_OF_LINE
----------------------------------------------
496: context = repl_context;
	000114fa:MOV qword ptr [RBP + -0x140],RAX
END_OF_LINE
----------------------------------------------
497: while (p_end = p_end + -1, repl_beginning < p_end) {
	00011508:SUB RAX,0x1
	0001150c:MOV qword ptr [0x0003e040],RAX
	00011513:JMP 0x00011547
	00011515:MOV RDX,qword ptr [0x00040520]
	0001151c:MOV RAX,qword ptr [0x0003e040]
	00011523:SHL RAX,0x3
	00011527:ADD RAX,RDX
	0001152a:MOV RAX,qword ptr [RAX]
	0001152d:MOV RDI,RAX
	00011530:CALL 0x00005860
	00011535:MOV RAX,qword ptr [0x0003e040]
	0001153c:SUB RAX,0x1
	00011540:MOV qword ptr [0x0003e040],RAX
	00011547:MOV RAX,qword ptr [0x0003e040]
	0001154e:CMP qword ptr [RBP + -0x130],RAX
	00011555:JL 0x00011515
END_OF_LINE
----------------------------------------------
498: free(p_line[p_end]);
	00011527:ADD RAX,RDX
	0001152a:MOV RAX,qword ptr [RAX]
	0001152d:MOV RDI,RAX
	00011530:CALL 0x00005860
END_OF_LINE
----------------------------------------------
500: Fseek(pfp,repl_backtrack_position,0);
	00011570:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
501: fillsrc = 1;
	00011575:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
502: filldst = repl_beginning + 1;
	00011587:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
503: fillcnt = p_repl_lines;
	00011599:MOV qword ptr [RBP + -0x128],RAX
END_OF_LINE
----------------------------------------------
504: p_end = p_max;
	000115a7:MOV qword ptr [0x0003e040],RAX
END_OF_LINE
----------------------------------------------
507: if ((!bVar10) && (ptrn_copiable != repl_copiable)) {
	000115bd:TEST AL,AL
	000115bf:JZ 0x00011601
	000115c1:MOV RAX,qword ptr [RBP + -0xe0]
	000115c8:CMP RAX,qword ptr [RBP + -0xd8]
	000115cf:JZ 0x00011601
END_OF_LINE
----------------------------------------------
508: pcVar16 = format_linenum(numbuf0,p_hunk_beg);
	000115d8:LEA RAX,[RBP + -0xa0]
	000115df:MOV RSI,RDX
	000115e2:MOV RDI,RAX
	000115e5:CALL 0x00018472
END_OF_LINE
----------------------------------------------
510: fatal("context mangled in hunk at line %s",pcVar16);
	000115fc:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
512: if ((!bVar11) && (fillcnt == 1)) {
	0001160b:TEST AL,AL
	0001160d:JZ 0x0001170f
	00011613:CMP qword ptr [RBP + -0x128],0x1
	0001161b:JNZ 0x0001170f
END_OF_LINE
----------------------------------------------
513: for (; filldst < p_end; filldst = filldst + 1) {
	000116b9:ADD qword ptr [RBP + -0x118],0x1
	000116c1:MOV RAX,qword ptr [0x0003e040]
	000116c8:CMP qword ptr [RBP + -0x118],RAX
	000116cf:JL 0x00011626
END_OF_LINE
----------------------------------------------
514: p_line[filldst] = p_line[filldst + 1];
	00011634:ADD RAX,0x1
	00011638:SHL RAX,0x3
	0001163c:ADD RAX,RDX
	0001163f:MOV RCX,qword ptr [0x00040520]
	00011646:MOV RDX,qword ptr [RBP + -0x118]
	0001164d:SHL RDX,0x3
	00011651:ADD RDX,RCX
	00011654:MOV RAX,qword ptr [RAX]
	00011657:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
515: p_Char[filldst] = p_Char[filldst + 1];
	00011668:ADD RAX,0x1
	0001166c:ADD RAX,RDX
	0001166f:MOV RCX,qword ptr [0x00040530]
	00011676:MOV RDX,qword ptr [RBP + -0x118]
	0001167d:ADD RDX,RCX
	00011680:MOVZX EAX,byte ptr [RAX]
	00011683:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
516: p_len[filldst] = p_len[filldst + 1];
	00011693:ADD RAX,0x1
	00011697:SHL RAX,0x3
	0001169b:ADD RAX,RDX
	0001169e:MOV RCX,qword ptr [0x00040528]
	000116a5:MOV RDX,qword ptr [RBP + -0x118]
	000116ac:SHL RDX,0x3
	000116b0:ADD RDX,RCX
	000116b3:MOV RAX,qword ptr [RAX]
	000116b6:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
518: p_end = p_end + -1;
	000116dc:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
519: p_first = p_first + 1;
	000116ee:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
520: fillcnt = 0;
	000116f9:MOV qword ptr [RBP + -0x128],0x0
END_OF_LINE
----------------------------------------------
521: p_ptrn_lines = 0;
	00011704:MOV qword ptr [0x000404f0],0x0
END_OF_LINE
----------------------------------------------
524: p_prefix_context = ptrn_prefix_context;
	00011717:JZ 0x00011733
END_OF_LINE
----------------------------------------------
525: if ((repl_prefix_context != -1) &&
	0001170f:CMP qword ptr [RBP + -0xe8],-0x1
	00011717:JZ 0x00011733
	00011719:CMP qword ptr [RBP + -0xf8],-0x1
	00011721:JZ 0x0001173c
	00011723:MOV RAX,qword ptr [RBP + -0xf8]
	0001172a:CMP RAX,qword ptr [RBP + -0xe8]
	00011731:JGE 0x0001173c
END_OF_LINE
----------------------------------------------
526: ((ptrn_prefix_context == -1 || (repl_prefix_context <= ptrn_prefix_context)))) {
	00011719:CMP qword ptr [RBP + -0xf8],-0x1
	00011721:JZ 0x0001173c
	00011723:MOV RAX,qword ptr [RBP + -0xf8]
	0001172a:CMP RAX,qword ptr [RBP + -0xe8]
	00011731:JGE 0x0001173c
END_OF_LINE
----------------------------------------------
527: p_prefix_context = repl_prefix_context;
	0001173c:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
529: p_suffix_context = context;
	00011752:JZ 0x0001176d
END_OF_LINE
----------------------------------------------
530: if ((ptrn_suffix_context != -1) && (ptrn_suffix_context < context)) {
	0001174a:CMP qword ptr [RBP + -0xf0],-0x1
	00011752:JZ 0x0001176d
	00011754:MOV RAX,qword ptr [RBP + -0xf0]
	0001175b:CMP RAX,qword ptr [RBP + -0x140]
	00011762:JGE 0x0001176d
END_OF_LINE
----------------------------------------------
531: p_suffix_context = ptrn_suffix_context;
	0001176b:JMP 0x00011774
END_OF_LINE
----------------------------------------------
533: if ((p_prefix_context == -1) || (p_suffix_context == -1)) {
	00011782:CMP RAX,-0x1
	00011786:JZ 0x00011795
	00011788:MOV RAX,qword ptr [0x00040510]
	0001178f:CMP RAX,-0x1
	00011793:JNZ 0x000117c5
END_OF_LINE
----------------------------------------------
534: pcVar16 = format_linenum(numbuf0,p_hunk_beg);
	0001179c:LEA RAX,[RBP + -0xa0]
	000117a3:MOV RSI,RDX
	000117a6:MOV RDI,RAX
	000117a9:CALL 0x00018472
END_OF_LINE
----------------------------------------------
536: fatal("replacement text or line numbers mangled in hunk at line %s",pcVar16);
	000117c0:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
538: if ((difftype == CONTEXT_DIFF) &&
	000117c5:CMP dword ptr [RBP + -0x174],0x1
	000117cc:JNZ 0x0001185c
	000117d2:CMP qword ptr [RBP + -0x128],0x0
	000117da:JNZ 0x00011803
	000117dc:MOV RAX,qword ptr [0x000404e0]
	000117e3:CMP RAX,0x1
	000117e7:JLE 0x0001185c
	000117e9:MOV RDX,qword ptr [0x00040508]
	000117f0:MOV RAX,qword ptr [0x00040510]
	000117f7:ADD RAX,RDX
	000117fa:CMP qword ptr [RBP + -0xe0],RAX
	00011801:JLE 0x0001185c
END_OF_LINE
----------------------------------------------
539: ((fillcnt != 0 || ((1 < p_first && (p_suffix_context + p_prefix_context < ptrn_copiable))))
	000117d2:CMP qword ptr [RBP + -0x128],0x0
	000117da:JNZ 0x00011803
	000117dc:MOV RAX,qword ptr [0x000404e0]
	000117e3:CMP RAX,0x1
	000117e7:JLE 0x0001185c
	000117e9:MOV RDX,qword ptr [0x00040508]
	000117f0:MOV RAX,qword ptr [0x00040510]
	000117f7:ADD RAX,RDX
	000117fa:CMP qword ptr [RBP + -0xe0],RAX
	00011801:JLE 0x0001185c
END_OF_LINE
----------------------------------------------
541: if (verbosity == _IScntrl) {
	0001180c:CMP EAX,0x2
	0001180f:JNZ 0x00011843
END_OF_LINE
----------------------------------------------
542: say("%s\n%s\n%s\n","(Fascinating -- this is really a new-style context diff but without",
	0001183e:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
543: "the telltale extra asterisks on the *** line that usually indicate",
	0001183e:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
544: "the new style...)");
	0001183e:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
546: diff_type = NEW_CONTEXT_DIFF;
	0001185a:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
548: if (fillcnt != 0) {
	0001185c:CMP qword ptr [RBP + -0x128],0x0
	00011864:JZ 0x00012fe1
END_OF_LINE
----------------------------------------------
549: p_bfake = filldst;
	00011871:MOV qword ptr [0x0003e058],RAX
END_OF_LINE
----------------------------------------------
550: p_efake = fillcnt + filldst + -1;
	00011886:ADD RAX,RDX
	00011889:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
551: while (lVar1 = fillcnt + -1, 0 < fillcnt) {
	000119c7:LEA RDX,[RAX + -0x1]
	000119cb:MOV qword ptr [RBP + -0x128],RDX
	000119d2:TEST RAX,RAX
	000119d5:JG 0x000118a1
END_OF_LINE
----------------------------------------------
552: for (; ((fillsrc <= p_end && (fillsrc != repl_beginning)) && (p_Char[fillsrc] != ' '));
	000118af:JG 0x000118d9
	000118b1:MOV RAX,qword ptr [RBP + -0x120]
	000118b8:CMP RAX,qword ptr [RBP + -0x130]
	000118bf:JZ 0x000118d9
	000118c1:MOV RDX,qword ptr [0x00040530]
	000118c8:MOV RAX,qword ptr [RBP + -0x120]
	000118cf:ADD RAX,RDX
	000118d2:MOVZX EAX,byte ptr [RAX]
	000118d5:CMP AL,0x20
	000118d7:JNZ 0x00011899
END_OF_LINE
----------------------------------------------
553: fillsrc = fillsrc + 1) {
	00011899:ADD qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
555: if ((p_end < fillsrc) || (fillsrc == repl_beginning)) {
	000118e7:JG 0x000118f9
	000118e9:MOV RAX,qword ptr [RBP + -0x120]
	000118f0:CMP RAX,qword ptr [RBP + -0x130]
	000118f7:JNZ 0x00011929
END_OF_LINE
----------------------------------------------
556: fillcnt = lVar1;
	0001190d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
557: pcVar16 = format_linenum(numbuf0,p_hunk_beg);
	00011900:LEA RAX,[RBP + -0xa0]
	00011907:MOV RSI,RDX
	0001190a:MOV RDI,RAX
	0001190d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
559: fatal("replacement text or line numbers mangled in hunk at line %s",pcVar16);
	00011924:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
561: p_line[filldst] = p_line[fillsrc];
	0001193b:ADD RAX,RDX
	0001193e:MOV RCX,qword ptr [0x00040520]
	00011945:MOV RDX,qword ptr [RBP + -0x118]
	0001194c:SHL RDX,0x3
	00011950:ADD RDX,RCX
	00011953:MOV RAX,qword ptr [RAX]
	00011956:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
562: p_Char[filldst] = p_Char[fillsrc];
	00011967:ADD RAX,RDX
	0001196a:MOV RCX,qword ptr [0x00040530]
	00011971:MOV RDX,qword ptr [RBP + -0x118]
	00011978:ADD RDX,RCX
	0001197b:MOVZX EAX,byte ptr [RAX]
	0001197e:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
563: p_len[filldst] = p_len[fillsrc];
	00011992:ADD RAX,RDX
	00011995:MOV RCX,qword ptr [0x00040528]
	0001199c:MOV RDX,qword ptr [RBP + -0x118]
	000119a3:SHL RDX,0x3
	000119a7:ADD RDX,RCX
	000119aa:MOV RAX,qword ptr [RAX]
	000119ad:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
564: fillsrc = fillsrc + 1;
	000119b0:ADD qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
565: filldst = filldst + 1;
	000119b8:ADD qword ptr [RBP + -0x118],0x1
END_OF_LINE
----------------------------------------------
566: fillcnt = lVar1;
	000119b8:ADD qword ptr [RBP + -0x118],0x1
END_OF_LINE
----------------------------------------------
568: for (; (fillsrc <= p_end && (fillsrc != repl_beginning)); fillsrc = fillsrc + 1) {
	00011a25:ADD qword ptr [RBP + -0x120],0x1
	00011a2d:MOV RAX,qword ptr [0x0003e040]
	00011a34:CMP qword ptr [RBP + -0x120],RAX
	00011a3b:JG 0x00011a4d
	00011a3d:MOV RAX,qword ptr [RBP + -0x120]
	00011a44:CMP RAX,qword ptr [RBP + -0x130]
	00011a4b:JNZ 0x000119dd
END_OF_LINE
----------------------------------------------
569: if (p_Char[fillsrc] == ' ') {
	000119eb:ADD RAX,RDX
	000119ee:MOVZX EAX,byte ptr [RAX]
	000119f1:CMP AL,0x20
	000119f3:JNZ 0x00011a25
END_OF_LINE
----------------------------------------------
570: fillcnt = lVar1;
	00011a09:CALL 0x00018472
END_OF_LINE
----------------------------------------------
571: pcVar16 = format_linenum(numbuf0,p_hunk_beg);
	000119fc:LEA RAX,[RBP + -0xa0]
	00011a03:MOV RSI,RDX
	00011a06:MOV RDI,RAX
	00011a09:CALL 0x00018472
END_OF_LINE
----------------------------------------------
573: fatal("replacement text or line numbers mangled in hunk at line %s",pcVar16);
	00011a20:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
576: fillcnt = lVar1;
	00011a5b:JZ 0x00011ae9
END_OF_LINE
----------------------------------------------
577: if ((debug & 0x40U) != 0) {
	00011a56:AND EAX,0x40
	00011a59:TEST EAX,EAX
	00011a5b:JZ 0x00011ae9
END_OF_LINE
----------------------------------------------
578: pcVar16 = format_linenum(numbuf3,p_end + 1);
	00011a68:LEA RDX,[RAX + 0x1]
	00011a6c:LEA RAX,[RBP + -0x40]
	00011a70:MOV RSI,RDX
	00011a73:MOV RDI,RAX
	00011a76:CALL 0x00018472
END_OF_LINE
----------------------------------------------
579: pcVar17 = format_linenum(numbuf2,repl_beginning);
	00011a85:LEA RAX,[RBP + -0x60]
	00011a89:MOV RSI,RDX
	00011a8c:MOV RDI,RAX
	00011a8f:CALL 0x00018472
END_OF_LINE
----------------------------------------------
580: pcVar18 = format_linenum(numbuf1,filldst);
	00011a9e:LEA RAX,[RBP + -0x80]
	00011aa2:MOV RSI,RDX
	00011aa5:MOV RDI,RAX
	00011aa8:CALL 0x00018472
END_OF_LINE
----------------------------------------------
581: pcVar19 = format_linenum(numbuf0,fillsrc);
	00011ab7:LEA RAX,[RBP + -0xa0]
	00011abe:MOV RSI,RDX
	00011ac1:MOV RDI,RAX
	00011ac4:CALL 0x00018472
END_OF_LINE
----------------------------------------------
582: printf("fillsrc %s, filldst %s, rb %s, e+1 %s\n",pcVar19,pcVar18,pcVar17,pcVar16);
	00011ae4:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
584: if ((fillsrc != p_end + 1) && (fillsrc != repl_beginning)) {
	00011af0:ADD RAX,0x1
	00011af4:CMP qword ptr [RBP + -0x120],RAX
	00011afb:JZ 0x00011b35
	00011afd:MOV RAX,qword ptr [RBP + -0x120]
	00011b04:CMP RAX,qword ptr [RBP + -0x130]
	00011b0b:JZ 0x00011b35
END_OF_LINE
----------------------------------------------
586: __assert_fail("fillsrc==p_end+1 || fillsrc==repl_beginning","pch.c",0x651,"another_hunk");
	00011b30:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
588: if ((filldst != p_end + 1) && (filldst != repl_beginning)) {
	00011b3c:ADD RAX,0x1
	00011b40:CMP qword ptr [RBP + -0x118],RAX
	00011b47:JZ 0x00012fe1
	00011b4d:MOV RAX,qword ptr [RBP + -0x118]
	00011b54:CMP RAX,qword ptr [RBP + -0x130]
	00011b5b:JZ 0x00012fe1
END_OF_LINE
----------------------------------------------
590: __assert_fail("filldst==p_end+1 || filldst==repl_beginning","pch.c",0x652,"another_hunk");
	00011b84:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
593: goto LAB_00012fe2;
	00012fe2:CMP byte ptr [RBP + -0x178],0x0
END_OF_LINE
----------------------------------------------
595: next_intuit_at(line_beginning,p_input_line);
	0001047b:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
596: if (chars_read == 0xffffffffffffffff) {
	00010480:CMP qword ptr [RBP + -0x138],-0x1
	00010488:JNZ 0x00010494
END_OF_LINE
----------------------------------------------
597: iVar13 = -1;
	0001048a:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
600: iVar13 = 0;
	00010494:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
603: else if (difftype == UNI_DIFF) {
	00011b89:CMP dword ptr [RBP + -0x174],0x5
	00011b90:JNZ 0x00012698
END_OF_LINE
----------------------------------------------
604: line_beginning_1 = ftell((FILE *)pfp);
	00011ba0:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
605: ch = '\0';
	00011bac:MOV byte ptr [RBP + -0x15e],0x0
END_OF_LINE
----------------------------------------------
606: chars_read = get_line();
	00011bb3:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
607: if (((chars_read == 0xffffffffffffffff) || (chars_read < 5)) ||
	00011bbf:CMP qword ptr [RBP + -0x138],-0x1
	00011bc7:JZ 0x00011bf8
	00011bc9:CMP qword ptr [RBP + -0x138],0x4
	00011bd1:JBE 0x00011bf8
	00011bd3:LEA RAX,[0x3e240]
	00011bda:MOV RAX,qword ptr [RAX]
	00011bdd:MOV EDX,0x4
	00011be2:LEA RCX,[0x330e7]
	00011be9:MOV RSI,RCX
	00011bec:MOV RDI,RAX
	00011bef:CALL 0x00005920
	00011bf4:TEST EAX,EAX
	00011bf6:JZ 0x00011c2f
END_OF_LINE
----------------------------------------------
608: (iVar13 = strncmp(buf,"@@ -",4), iVar13 != 0)) {
	00011bef:CALL 0x00005920
	00011bf4:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
609: next_intuit_at(line_beginning_1,p_input_line);
	00011c0c:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
610: if (chars_read == 0xffffffffffffffff) {
	00011c11:CMP qword ptr [RBP + -0x138],-0x1
	00011c19:JNZ 0x00011c25
END_OF_LINE
----------------------------------------------
611: iVar13 = -1;
	00011c1b:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
614: iVar13 = 0;
	00011c25:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
618: s = scan_linenum(buf + 4,&p_first);
	00011c39:ADD RAX,0x4
	00011c3d:LEA RDX,[0x404e0]
	00011c44:MOV RSI,RDX
	00011c47:MOV RDI,RAX
	00011c4a:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
619: if (*s == ',') {
	00011c5d:MOVZX EAX,byte ptr [RAX]
	00011c60:CMP AL,0x2c
	00011c62:JNZ 0x00011c8a
END_OF_LINE
----------------------------------------------
620: s = scan_linenum(s + 1,&p_ptrn_lines);
	00011c6b:ADD RAX,0x1
	00011c6f:LEA RDX,[0x404f0]
	00011c76:MOV RSI,RDX
	00011c79:MOV RDI,RAX
	00011c7c:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
623: p_ptrn_lines = 1;
	00011c8a:MOV qword ptr [0x000404f0],0x1
END_OF_LINE
----------------------------------------------
625: if (0x7fffffffffffffff - p_ptrn_lines <= p_first) {
	00011ca6:SUB RAX,RCX
	00011ca9:MOV RDX,RAX
	00011cac:MOV RAX,qword ptr [0x000404e0]
	00011cb3:CMP RDX,RAX
	00011cb6:JG 0x00011cbd
END_OF_LINE
----------------------------------------------
627: malformed();
	00011cb8:CALL 0x00010053
END_OF_LINE
----------------------------------------------
629: if (*s == ' ') {
	00011cc4:MOVZX EAX,byte ptr [RAX]
	00011cc7:CMP AL,0x20
	00011cc9:JNZ 0x00011cd3
END_OF_LINE
----------------------------------------------
630: s = s + 1;
	00011ccb:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
632: if (*s != '+') {
	00011cda:MOVZX EAX,byte ptr [RAX]
	00011cdd:CMP AL,0x2b
	00011cdf:JZ 0x00011ce6
END_OF_LINE
----------------------------------------------
634: malformed();
	00011ce1:CALL 0x00010053
END_OF_LINE
----------------------------------------------
636: s = scan_linenum(s + 1,&p_newfirst);
	00011ced:ADD RAX,0x1
	00011cf1:LEA RDX,[0x404e8]
	00011cf8:MOV RSI,RDX
	00011cfb:MOV RDI,RAX
	00011cfe:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
637: if (*s == ',') {
	00011d11:MOVZX EAX,byte ptr [RAX]
	00011d14:CMP AL,0x2c
	00011d16:JNZ 0x00011d3e
END_OF_LINE
----------------------------------------------
638: s = scan_linenum(s + 1,&p_repl_lines);
	00011d1f:ADD RAX,0x1
	00011d23:LEA RDX,[0x404f8]
	00011d2a:MOV RSI,RDX
	00011d2d:MOV RDI,RAX
	00011d30:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
641: p_repl_lines = 1;
	00011d3e:MOV qword ptr [0x000404f8],0x1
END_OF_LINE
----------------------------------------------
643: if (0x7fffffffffffffff - p_repl_lines <= p_newfirst) {
	00011d5a:SUB RAX,RCX
	00011d5d:MOV RDX,RAX
	00011d60:MOV RAX,qword ptr [0x000404e8]
	00011d67:CMP RDX,RAX
	00011d6a:JG 0x00011d71
END_OF_LINE
----------------------------------------------
645: malformed();
	00011d6c:CALL 0x00010053
END_OF_LINE
----------------------------------------------
647: if (*s == ' ') {
	00011d78:MOVZX EAX,byte ptr [RAX]
	00011d7b:CMP AL,0x20
	00011d7d:JNZ 0x00011d87
END_OF_LINE
----------------------------------------------
648: s = s + 1;
	00011d7f:ADD qword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
650: pcVar16 = s + 1;
	00011d8e:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
651: if (*s != '@') {
	00011d99:MOVZX EAX,byte ptr [RAX]
	00011d9c:CMP AL,0x40
	00011d9e:JZ 0x00011da5
END_OF_LINE
----------------------------------------------
652: s = pcVar16;
	00011da0:CALL 0x00010053
END_OF_LINE
----------------------------------------------
654: malformed();
	00011da0:CALL 0x00010053
END_OF_LINE
----------------------------------------------
656: pcVar17 = s + 2;
	00011dac:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
657: s = pcVar17;
	00011dbc:JNZ 0x00011e28
END_OF_LINE
----------------------------------------------
658: if ((*pcVar16 == '@') && (*pcVar17 == ' ')) {
	00011db7:MOVZX EAX,byte ptr [RAX]
	00011dba:CMP AL,0x40
	00011dbc:JNZ 0x00011e28
	00011dbe:MOV RAX,qword ptr [RBP + -0x148]
	00011dc5:MOVZX EAX,byte ptr [RAX]
	00011dc8:CMP AL,0x20
	00011dca:JNZ 0x00011e28
END_OF_LINE
----------------------------------------------
659: for (; *s != '\n'; s = s + 1) {
	00011ddc:ADD qword ptr [RBP + -0x148],0x1
	00011de4:MOV RAX,qword ptr [RBP + -0x148]
	00011deb:MOVZX EAX,byte ptr [RAX]
	00011dee:CMP AL,0xa
	00011df0:JNZ 0x00011ddc
END_OF_LINE
----------------------------------------------
661: p_c_function = pcVar17;
	00011df9:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
662: *s = '\0';
	00011df9:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
663: p_c_function = savestr(p_c_function);
	00011e06:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
664: if (p_c_function == (char *)0x0) {
	00011e19:TEST RAX,RAX
	00011e1c:JNZ 0x00011e28
END_OF_LINE
----------------------------------------------
665: iVar13 = -1;
	00011e1e:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
666: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
669: if (p_ptrn_lines == 0) {
	00011e2f:TEST RAX,RAX
	00011e32:JNZ 0x00011e46
END_OF_LINE
----------------------------------------------
670: p_first = p_first + 1;
	00011e3b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
672: if (p_repl_lines == 0) {
	00011e4d:TEST RAX,RAX
	00011e50:JNZ 0x00011e64
END_OF_LINE
----------------------------------------------
673: p_newfirst = p_newfirst + 1;
	00011e59:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
675: if (0x7ffffffffffffffe - p_repl_lines <= p_ptrn_lines) {
	00011e75:SUB RAX,RCX
	00011e78:MOV RDX,RAX
	00011e7b:MOV RAX,qword ptr [0x000404f0]
	00011e82:CMP RDX,RAX
	00011e85:JG 0x00011e8c
END_OF_LINE
----------------------------------------------
677: malformed();
	00011e87:CALL 0x00010053
END_OF_LINE
----------------------------------------------
679: p_max = p_repl_lines + p_ptrn_lines + 1;
	00011e9a:ADD RAX,RDX
	00011e9d:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
681: if (p_max + 1 < hunkmax) {
	00011ec7:LEA RDX,[RAX + 0x1]
	00011ecb:MOV RAX,qword ptr [0x0003e048]
	00011ed2:CMP RDX,RAX
	00011ed5:JGE 0x00011eaa
END_OF_LINE
----------------------------------------------
682: fillsrc_1 = 1;
	00011ed7:MOV qword ptr [RBP + -0xd0],0x1
END_OF_LINE
----------------------------------------------
683: filldst_1 = p_ptrn_lines + 1;
	00011ef0:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
684: p_end = filldst_1 + p_repl_lines;
	00011f08:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
685: pcVar16 = format_linenum(numbuf1,p_ptrn_lines + p_first + -1);
	00011f20:ADD RAX,RDX
	00011f23:LEA RDX,[RAX + -0x1]
	00011f27:LEA RAX,[RBP + -0x80]
	00011f2b:MOV RSI,RDX
	00011f2e:MOV RDI,RAX
	00011f31:CALL 0x00018472
END_OF_LINE
----------------------------------------------
686: pcVar17 = format_linenum(numbuf0,p_first);
	00011f40:LEA RAX,[RBP + -0xa0]
	00011f47:MOV RSI,RDX
	00011f4a:MOV RDI,RAX
	00011f4d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
687: sprintf(buf,"*** %s,%s ****\n",pcVar17,pcVar16);
	00011f71:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
688: psVar3 = p_len;
	00011f71:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
689: sVar20 = strlen(buf);
	00011f8a:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
690: *psVar3 = sVar20;
	00011f8f:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
691: ppcVar2 = p_line;
	00011f8f:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
692: pcVar16 = savestr(buf);
	00011fa6:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
693: *ppcVar2 = pcVar16;
	00011fab:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
694: if (*ppcVar2 == (char *)0x0) {
	00011fae:MOV RAX,qword ptr [RBX]
	00011fb1:TEST RAX,RAX
	00011fb4:JNZ 0x00011fcb
END_OF_LINE
----------------------------------------------
695: p_end = -1;
	00011fb6:MOV qword ptr [0x0003e040],-0x1
END_OF_LINE
----------------------------------------------
696: iVar13 = -1;
	00011fc1:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
697: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
699: *p_Char = '*';
	00011fd2:MOV byte ptr [RAX],0x2a
END_OF_LINE
----------------------------------------------
700: pcVar16 = format_linenum(numbuf1,p_repl_lines + p_newfirst + -1);
	00011fe3:ADD RAX,RDX
	00011fe6:LEA RDX,[RAX + -0x1]
	00011fea:LEA RAX,[RBP + -0x80]
	00011fee:MOV RSI,RDX
	00011ff1:MOV RDI,RAX
	00011ff4:CALL 0x00018472
END_OF_LINE
----------------------------------------------
701: pcVar17 = format_linenum(numbuf0,p_newfirst);
	00012003:LEA RAX,[RBP + -0xa0]
	0001200a:MOV RSI,RDX
	0001200d:MOV RDI,RAX
	00012010:CALL 0x00018472
END_OF_LINE
----------------------------------------------
702: sprintf(buf,"--- %s,%s ----\n",pcVar17,pcVar16);
	00012034:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
703: psVar3 = p_len + filldst_1;
	00012055:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
704: sVar20 = strlen(buf);
	0001205c:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
705: *psVar3 = sVar20;
	00012061:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
706: ppcVar2 = p_line + filldst_1;
	00012080:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
707: pcVar16 = savestr(buf);
	00012087:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
708: *ppcVar2 = pcVar16;
	0001208c:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
709: if (*ppcVar2 == (char *)0x0) {
	0001208f:MOV RAX,qword ptr [RBX]
	00012092:TEST RAX,RAX
	00012095:JNZ 0x000120ac
END_OF_LINE
----------------------------------------------
710: p_end = 0;
	00012097:MOV qword ptr [0x0003e040],0x0
END_OF_LINE
----------------------------------------------
711: iVar13 = -1;
	000120a2:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
712: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
714: p_Char[filldst_1] = '=';
	000120c5:ADD RAX,RCX
	000120c8:MOV byte ptr [RAX],0x3d
END_OF_LINE
----------------------------------------------
715: p_prefix_context = -1;
	000120cb:MOV qword ptr [0x00040508],-0x1
END_OF_LINE
----------------------------------------------
716: p_hunk_beg = p_input_line + 1;
	000120dd:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
717: filldst_1 = filldst_1 + 1;
	000120ba:LEA RDX,[RAX + 0x1]
	000120be:MOV qword ptr [RBP + -0xc8],RDX
	000120c5:ADD RAX,RCX
	000120c8:MOV byte ptr [RAX],0x3d
	000120cb:MOV qword ptr [0x00040508],-0x1
	000120d6:MOV RAX,qword ptr [0x00040518]
	000120dd:ADD RAX,0x1
	000120e1:MOV qword ptr [0x00040568],RAX
	000120e8:JMP 0x0001264b
END_OF_LINE
----------------------------------------------
718: goto LAB_0001264b;
	0001264b:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
720: _Var12 = grow_hunkmax();
	00011eaa:CALL 0x0000cd95
END_OF_LINE
----------------------------------------------
721: } while (_Var12);
	00011eb4:JZ 0x00011ec0
END_OF_LINE
----------------------------------------------
722: iVar13 = -1;
	00011eb6:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
726: line_beginning_2 = ftell((FILE *)pfp);
	000126a2:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
727: p_suffix_context = 0;
	000126ae:MOV qword ptr [0x00040510],0x0
END_OF_LINE
----------------------------------------------
728: p_prefix_context = 0;
	000126c0:MOV qword ptr [0x00040508],RAX
END_OF_LINE
----------------------------------------------
729: chars_read = get_line();
	000126c7:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
730: if (((chars_read == 0xffffffffffffffff) || (chars_read == 0)) || (9 < (int)*buf - 0x30U)) {
	000126d3:CMP qword ptr [RBP + -0x138],-0x1
	000126db:JZ 0x000126ff
	000126dd:CMP qword ptr [RBP + -0x138],0x0
	000126e5:JZ 0x000126ff
	000126e7:LEA RAX,[0x3e240]
	000126ee:MOV RAX,qword ptr [RAX]
	000126f1:MOVZX EAX,byte ptr [RAX]
	000126f4:MOVSX EAX,AL
	000126f7:SUB EAX,0x30
	000126fa:CMP EAX,0x9
	000126fd:JBE 0x00012736
END_OF_LINE
----------------------------------------------
731: next_intuit_at(line_beginning_2,p_input_line);
	00012713:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
732: if (chars_read == 0xffffffffffffffff) {
	00012718:CMP qword ptr [RBP + -0x138],-0x1
	00012720:JNZ 0x0001272c
END_OF_LINE
----------------------------------------------
733: iVar13 = -1;
	00012722:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
736: iVar13 = 0;
	0001272c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
740: s = scan_linenum(buf,&p_first);
	0001274d:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
741: if (*s == ',') {
	00012760:MOVZX EAX,byte ptr [RAX]
	00012763:CMP AL,0x2c
	00012765:JNZ 0x000127ad
END_OF_LINE
----------------------------------------------
742: s = scan_linenum(s + 1,&p_ptrn_lines);
	0001276e:ADD RAX,0x1
	00012772:LEA RDX,[0x404f0]
	00012779:MOV RSI,RDX
	0001277c:MOV RDI,RAX
	0001277f:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
743: p_ptrn_lines = p_ptrn_lines + (1 - p_first);
	00012797:SUB RDX,RAX
	0001279a:MOV RAX,qword ptr [0x000404f0]
	000127a1:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
746: p_ptrn_lines = (lin)(*s != 'a');
	000127b4:MOVZX EAX,byte ptr [RAX]
	000127b7:CMP AL,0x61
	000127b9:SETNZ AL
	000127bc:MOVZX EAX,AL
END_OF_LINE
----------------------------------------------
748: if (0x7fffffffffffffff - p_ptrn_lines <= p_first) {
	000127d7:SUB RAX,RCX
	000127da:MOV RDX,RAX
	000127dd:MOV RAX,qword ptr [0x000404e0]
	000127e4:CMP RDX,RAX
	000127e7:JG 0x000127ee
END_OF_LINE
----------------------------------------------
750: malformed();
	000127e9:CALL 0x00010053
END_OF_LINE
----------------------------------------------
752: cVar4 = *s;
	000127f5:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
753: if (cVar4 == 'a') {
	000127fe:CMP byte ptr [RBP + -0x15d],0x61
	00012805:JNZ 0x00012819
END_OF_LINE
----------------------------------------------
754: p_first = p_first + 1;
	0001280e:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
756: s = scan_linenum(s + 1,&min);
	00012820:LEA RDX,[RAX + 0x1]
	00012824:LEA RAX,[RBP + -0x158]
	0001282b:MOV RSI,RAX
	0001282e:MOV RDI,RDX
	00012831:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
757: if (*s == ',') {
	00012844:MOVZX EAX,byte ptr [RAX]
	00012847:CMP AL,0x2c
	00012849:JNZ 0x0001286a
END_OF_LINE
----------------------------------------------
758: scan_linenum(s + 1,&max);
	00012852:LEA RDX,[RAX + 0x1]
	00012856:LEA RAX,[RBP + -0x150]
	0001285d:MOV RSI,RAX
	00012860:MOV RDI,RDX
	00012863:CALL 0x000100a9
END_OF_LINE
----------------------------------------------
761: max = min;
	00012871:MOV qword ptr [RBP + -0x150],RAX
END_OF_LINE
----------------------------------------------
763: if ((max < min) || (max - min == 0x7fffffffffffffff)) {
	00012889:JG 0x000128ae
	0001288b:MOV RAX,qword ptr [RBP + -0x150]
	00012892:MOV RCX,qword ptr [RBP + -0x158]
	00012899:SUB RAX,RCX
	0001289c:MOV RDX,RAX
	0001289f:MOV RAX,0x7fffffffffffffff
	000128a9:CMP RDX,RAX
	000128ac:JNZ 0x000128b3
END_OF_LINE
----------------------------------------------
765: malformed();
	000128ae:CALL 0x00010053
END_OF_LINE
----------------------------------------------
767: if (cVar4 == 'd') {
	000128b3:CMP byte ptr [RBP + -0x15d],0x64
	000128ba:JNZ 0x000128ce
END_OF_LINE
----------------------------------------------
768: min = min + 1;
	000128c3:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
770: p_newfirst = min;
	000128d5:MOV qword ptr [0x000404e8],RAX
END_OF_LINE
----------------------------------------------
771: p_repl_lines = (max - min) + 1;
	000128ea:SUB RAX,RDX
	000128ed:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
772: if (0x7fffffffffffffff - p_repl_lines <= min) {
	00012909:SUB RAX,RCX
	0001290c:MOV RDX,RAX
	0001290f:MOV RAX,qword ptr [0x000404e8]
	00012916:CMP RDX,RAX
	00012919:JG 0x00012920
END_OF_LINE
----------------------------------------------
774: malformed();
	0001291b:CALL 0x00010053
END_OF_LINE
----------------------------------------------
776: if (0x7ffffffffffffffe - p_repl_lines <= p_ptrn_lines) {
	00012931:SUB RAX,RCX
	00012934:MOV RDX,RAX
	00012937:MOV RAX,qword ptr [0x000404f0]
	0001293e:CMP RDX,RAX
	00012941:JG 0x00012948
END_OF_LINE
----------------------------------------------
778: malformed();
	00012943:CALL 0x00010053
END_OF_LINE
----------------------------------------------
780: p_end = p_repl_lines + p_ptrn_lines + 1;
	00012956:ADD RAX,RDX
	00012959:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
782: if (p_end + 1 < hunkmax) {
	0001298e:LEA RDX,[RAX + 0x1]
	00012992:MOV RAX,qword ptr [0x0003e048]
	00012999:CMP RDX,RAX
	0001299c:JGE 0x00012966
END_OF_LINE
----------------------------------------------
783: pcVar16 = format_linenum(numbuf1,p_ptrn_lines + p_first + -1);
	000129ac:ADD RAX,RDX
	000129af:LEA RDX,[RAX + -0x1]
	000129b3:LEA RAX,[RBP + -0x80]
	000129b7:MOV RSI,RDX
	000129ba:MOV RDI,RAX
	000129bd:CALL 0x00018472
END_OF_LINE
----------------------------------------------
784: pcVar17 = format_linenum(numbuf0,p_first);
	000129cc:LEA RAX,[RBP + -0xa0]
	000129d3:MOV RSI,RDX
	000129d6:MOV RDI,RAX
	000129d9:CALL 0x00018472
END_OF_LINE
----------------------------------------------
785: sprintf(buf,"*** %s,%s\n",pcVar17,pcVar16);
	000129fd:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
786: psVar3 = p_len;
	000129fd:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
787: sVar20 = strlen(buf);
	00012a16:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
788: *psVar3 = sVar20;
	00012a1b:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
789: ppcVar2 = p_line;
	00012a1b:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
790: pcVar16 = savestr(buf);
	00012a32:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
791: *ppcVar2 = pcVar16;
	00012a37:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
792: if (*ppcVar2 == (char *)0x0) {
	00012a3a:MOV RAX,qword ptr [RBX]
	00012a3d:TEST RAX,RAX
	00012a40:JNZ 0x00012a57
END_OF_LINE
----------------------------------------------
793: p_end = -1;
	00012a42:MOV qword ptr [0x0003e040],-0x1
END_OF_LINE
----------------------------------------------
794: iVar13 = -1;
	00012a4d:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
795: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
797: *p_Char = '*';
	00012a5e:MOV byte ptr [RAX],0x2a
END_OF_LINE
----------------------------------------------
798: i = 1;
	00012a61:MOV dword ptr [RBP + -0x15c],0x1
END_OF_LINE
----------------------------------------------
799: goto LAB_00012c37;
	00012c37:MOV EAX,dword ptr [RBP + -0x15c]
END_OF_LINE
----------------------------------------------
801: _Var12 = grow_hunkmax();
	00012966:CALL 0x0000cd95
END_OF_LINE
----------------------------------------------
802: } while (_Var12);
	00012970:JZ 0x00012987
END_OF_LINE
----------------------------------------------
803: p_end = -1;
	00012972:MOV qword ptr [0x0003e040],-0x1
END_OF_LINE
----------------------------------------------
804: iVar13 = -1;
	0001297d:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
807: LAB_000132ce:
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
808: if (lVar5 != *(long *)(in_FS_OFFSET + 0x28)) {
	000132d2:SUB RDX,qword ptr FS:[0x28]
	000132db:JZ 0x000132e2
END_OF_LINE
----------------------------------------------
810: __stack_chk_fail();
	000132dd:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
812: return iVar13;
	000132ef:RET
END_OF_LINE
----------------------------------------------
813: LAB_00012c37:
	00012c37:MOV EAX,dword ptr [RBP + -0x15c]
END_OF_LINE
----------------------------------------------
814: if (p_ptrn_lines < i) goto code_r0x00012c50;
	00012c3d:MOVSXD RDX,EAX
	00012c40:MOV RAX,qword ptr [0x000404f0]
	00012c47:CMP RDX,RAX
	00012c4a:JLE 0x00012a70
	00012c50:CMP byte ptr [RBP + -0x15d],0x63
END_OF_LINE
----------------------------------------------
815: chars_read = get_line();
	00012a70:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
816: if (chars_read == 0xffffffffffffffff) {
	00012a7c:CMP qword ptr [RBP + -0x138],-0x1
	00012a84:JNZ 0x00012aa2
END_OF_LINE
----------------------------------------------
817: p_end = (lin)(i + -1);
	00012a8c:SUB EAX,0x1
	00012a8f:CDQE
END_OF_LINE
----------------------------------------------
818: iVar13 = -1;
	00012a98:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
819: chars_read = 0xffffffffffffffff;
	00012a9d:JMP 0x000132ce
END_OF_LINE
----------------------------------------------
820: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
822: if (chars_read == 0) {
	00012aa2:CMP qword ptr [RBP + -0x138],0x0
	00012aaa:JNZ 0x00012adc
END_OF_LINE
----------------------------------------------
823: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012ab3:LEA RAX,[RBP + -0xa0]
	00012aba:MOV RSI,RDX
	00012abd:MOV RDI,RAX
	00012ac0:CALL 0x00018472
END_OF_LINE
----------------------------------------------
825: fatal("unexpected end of file in patch at line %s",pcVar16);
	00012ad7:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
827: if ((*buf != '<') || ((buf[1] != ' ' && (buf[1] != '\t')))) {
	00012ae6:MOVZX EAX,byte ptr [RAX]
	00012ae9:CMP AL,0x3c
	00012aeb:JNZ 0x00012b17
	00012aed:LEA RAX,[0x3e240]
	00012af4:MOV RAX,qword ptr [RAX]
	00012af7:ADD RAX,0x1
	00012afb:MOVZX EAX,byte ptr [RAX]
	00012afe:CMP AL,0x20
	00012b00:JZ 0x00012b47
	00012b02:LEA RAX,[0x3e240]
	00012b09:MOV RAX,qword ptr [RAX]
	00012b0c:ADD RAX,0x1
	00012b10:MOVZX EAX,byte ptr [RAX]
	00012b13:CMP AL,0x9
	00012b15:JZ 0x00012b47
END_OF_LINE
----------------------------------------------
828: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012b1e:LEA RAX,[RBP + -0xa0]
	00012b25:MOV RSI,RDX
	00012b28:MOV RDI,RAX
	00012b2b:CALL 0x00018472
END_OF_LINE
----------------------------------------------
830: fatal("\'<\' followed by space or tab expected at line %s of patch",pcVar16);
	00012b42:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
832: if ((i == p_ptrn_lines) && (_Var12 = incomplete_line(), _Var12)) {
	00012b4d:MOVSXD RDX,EAX
	00012b50:MOV RAX,qword ptr [0x000404f0]
	00012b57:CMP RDX,RAX
	00012b5a:JNZ 0x00012b6c
	00012b5c:CALL 0x0001359c
	00012b61:TEST AL,AL
	00012b63:JZ 0x00012b6c
END_OF_LINE
----------------------------------------------
833: iVar13 = 1;
	00012b65:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
836: iVar13 = 0;
	00012b6c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
838: chars_read = chars_read - (long)(iVar13 + 2);
	00012b71:ADD EAX,0x2
	00012b74:CDQE
	00012b76:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
839: p_len[i] = chars_read;
	00012b8a:CDQE
	00012b8c:SHL RAX,0x3
	00012b90:ADD RDX,RAX
	00012b93:MOV RAX,qword ptr [RBP + -0x138]
	00012b9a:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
840: ppcVar2 = p_line + i;
	00012bb8:CDQE
	00012bba:SHL RAX,0x3
	00012bbe:LEA RBX,[RCX + RAX*0x1]
END_OF_LINE
----------------------------------------------
841: pcVar16 = savebuf(buf + 2,chars_read);
	00012ba7:LEA RDX,[RAX + 0x2]
	00012bab:MOV RCX,qword ptr [0x00040520]
	00012bb2:MOV EAX,dword ptr [RBP + -0x15c]
	00012bb8:CDQE
	00012bba:SHL RAX,0x3
	00012bbe:LEA RBX,[RCX + RAX*0x1]
	00012bc2:MOV RAX,qword ptr [RBP + -0x138]
	00012bc9:MOV RSI,RAX
	00012bcc:MOV RDI,RDX
	00012bcf:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
842: *ppcVar2 = pcVar16;
	00012bd4:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
843: if ((chars_read != 0) && (p_line[i] == (char *)0x0)) {
	00012bd7:CMP qword ptr [RBP + -0x138],0x0
	00012bdf:JZ 0x00012c1b
	00012be1:MOV RDX,qword ptr [0x00040520]
	00012be8:MOV EAX,dword ptr [RBP + -0x15c]
	00012bee:CDQE
	00012bf0:SHL RAX,0x3
	00012bf4:ADD RAX,RDX
	00012bf7:MOV RAX,qword ptr [RAX]
	00012bfa:TEST RAX,RAX
	00012bfd:JNZ 0x00012c1b
END_OF_LINE
----------------------------------------------
844: p_end = (lin)(i + -1);
	00012c05:SUB EAX,0x1
	00012c08:CDQE
END_OF_LINE
----------------------------------------------
845: iVar13 = -1;
	00012c11:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
846: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
848: p_Char[i] = '-';
	00012c28:CDQE
	00012c2a:ADD RAX,RDX
	00012c2d:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
849: i = i + 1;
	00012c30:ADD dword ptr [RBP + -0x15c],0x1
END_OF_LINE
----------------------------------------------
850: goto LAB_00012c37;
	00012c37:MOV EAX,dword ptr [RBP + -0x15c]
END_OF_LINE
----------------------------------------------
851: code_r0x00012c50:
	00012c50:CMP byte ptr [RBP + -0x15d],0x63
END_OF_LINE
----------------------------------------------
852: if (cVar4 == 'c') {
	00012c50:CMP byte ptr [RBP + -0x15d],0x63
	00012c57:JNZ 0x00012d0a
END_OF_LINE
----------------------------------------------
853: chars_read = get_line();
	00012c5d:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
854: if (chars_read == 0xffffffffffffffff) {
	00012c69:CMP qword ptr [RBP + -0x138],-0x1
	00012c71:JNZ 0x00012c8f
END_OF_LINE
----------------------------------------------
855: p_end = (lin)(i + -1);
	00012c79:SUB EAX,0x1
	00012c7c:CDQE
END_OF_LINE
----------------------------------------------
856: iVar13 = -1;
	00012c85:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
857: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
859: if (chars_read == 0) {
	00012c8f:CMP qword ptr [RBP + -0x138],0x0
	00012c97:JNZ 0x00012cc9
END_OF_LINE
----------------------------------------------
860: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012ca0:LEA RAX,[RBP + -0xa0]
	00012ca7:MOV RSI,RDX
	00012caa:MOV RDI,RAX
	00012cad:CALL 0x00018472
END_OF_LINE
----------------------------------------------
862: fatal("unexpected end of file in patch at line %s",pcVar16);
	00012cc4:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
864: if (*buf != '-') {
	00012cd3:MOVZX EAX,byte ptr [RAX]
	00012cd6:CMP AL,0x2d
	00012cd8:JZ 0x00012d0a
END_OF_LINE
----------------------------------------------
865: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012ce1:LEA RAX,[RBP + -0xa0]
	00012ce8:MOV RSI,RDX
	00012ceb:MOV RDI,RAX
	00012cee:CALL 0x00018472
END_OF_LINE
----------------------------------------------
867: fatal("\'---\' expected at line %s of patch",pcVar16);
	00012d05:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
870: pcVar16 = format_linenum(numbuf1,max);
	00012d11:LEA RAX,[RBP + -0x80]
	00012d15:MOV RSI,RDX
	00012d18:MOV RDI,RAX
	00012d1b:CALL 0x00018472
END_OF_LINE
----------------------------------------------
871: pcVar17 = format_linenum(numbuf0,min);
	00012d2a:LEA RAX,[RBP + -0xa0]
	00012d31:MOV RSI,RDX
	00012d34:MOV RDI,RAX
	00012d37:CALL 0x00018472
END_OF_LINE
----------------------------------------------
872: sprintf(buf,"--- %s,%s\n",pcVar17,pcVar16);
	00012d5b:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
873: psVar3 = p_len + i;
	00012d77:MOVSXD RDX,EDX
	00012d7a:SHL RDX,0x3
	00012d7e:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
874: sVar20 = strlen(buf);
	00012d85:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
875: *psVar3 = sVar20;
	00012d8a:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
876: ppcVar2 = p_line + i;
	00012da4:MOVSXD RDX,EDX
	00012da7:SHL RDX,0x3
	00012dab:LEA RBX,[RCX + RDX*0x1]
END_OF_LINE
----------------------------------------------
877: pcVar16 = savestr(buf);
	00012db2:CALL 0x000183f9
END_OF_LINE
----------------------------------------------
878: *ppcVar2 = pcVar16;
	00012db7:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
879: if (*ppcVar2 == (char *)0x0) {
	00012dba:MOV RAX,qword ptr [RBX]
	00012dbd:TEST RAX,RAX
	00012dc0:JNZ 0x00012dde
END_OF_LINE
----------------------------------------------
880: p_end = (lin)(i + -1);
	00012dc8:SUB EAX,0x1
	00012dcb:CDQE
END_OF_LINE
----------------------------------------------
881: iVar13 = -1;
	00012dd4:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
884: p_Char[i] = '=';
	00012deb:CDQE
	00012ded:ADD RAX,RDX
	00012df0:MOV byte ptr [RAX],0x3d
END_OF_LINE
----------------------------------------------
885: iVar13 = i;
	00012dfa:JMP 0x00012fc6
END_OF_LINE
----------------------------------------------
886: while (i = iVar13 + 1, i <= p_end) {
	00012df3:ADD dword ptr [RBP + -0x15c],0x1
	00012dfa:JMP 0x00012fc6
	00012dff:CALL 0x000132f0
	00012e04:MOV qword ptr [RBP + -0x138],RAX
	00012e0b:CMP qword ptr [RBP + -0x138],-0x1
	00012e13:JNZ 0x00012e31
	00012e15:MOV EAX,dword ptr [RBP + -0x15c]
	00012e1b:SUB EAX,0x1
	00012e1e:CDQE
	00012e20:MOV qword ptr [0x0003e040],RAX
	00012e27:MOV EAX,0xffffffff
	00012e2c:JMP 0x000132ce
	00012e31:CMP qword ptr [RBP + -0x138],0x0
	00012e39:JNZ 0x00012e6b
	00012e3b:MOV RDX,qword ptr [0x00040518]
	00012e42:LEA RAX,[RBP + -0xa0]
	00012e49:MOV RSI,RDX
	00012e4c:MOV RDI,RAX
	00012e4f:CALL 0x00018472
	00012e54:MOV RSI,RAX
	00012e57:LEA RAX,[0x335d0]
	00012e5e:MOV RDI,RAX
	00012e61:MOV EAX,0x0
	00012e66:CALL 0x000185b0
	00012e6b:LEA RAX,[0x3e240]
	00012e72:MOV RAX,qword ptr [RAX]
	00012e75:MOVZX EAX,byte ptr [RAX]
	00012e78:CMP AL,0x3e
	00012e7a:JNZ 0x00012ea6
	00012e7c:LEA RAX,[0x3e240]
	00012e83:MOV RAX,qword ptr [RAX]
	00012e86:ADD RAX,0x1
	00012e8a:MOVZX EAX,byte ptr [RAX]
	00012e8d:CMP AL,0x20
	00012e8f:JZ 0x00012ed6
	00012e91:LEA RAX,[0x3e240]
	00012e98:MOV RAX,qword ptr [RAX]
	00012e9b:ADD RAX,0x1
	00012e9f:MOVZX EAX,byte ptr [RAX]
	00012ea2:CMP AL,0x9
	00012ea4:JZ 0x00012ed6
	00012ea6:MOV RDX,qword ptr [0x00040518]
	00012ead:LEA RAX,[RBP + -0xa0]
	00012eb4:MOV RSI,RDX
	00012eb7:MOV RDI,RAX
	00012eba:CALL 0x00018472
	00012ebf:MOV RSI,RAX
	00012ec2:LEA RAX,[0x33670]
	00012ec9:MOV RDI,RAX
	00012ecc:MOV EAX,0x0
	00012ed1:CALL 0x000185b0
	00012ed6:MOV EAX,dword ptr [RBP + -0x15c]
	00012edc:MOVSXD RDX,EAX
	00012edf:MOV RAX,qword ptr [0x0003e040]
	00012ee6:CMP RDX,RAX
	00012ee9:JNZ 0x00012efb
	00012eeb:CALL 0x0001359c
	00012ef0:TEST AL,AL
	00012ef2:JZ 0x00012efb
	00012ef4:MOV EAX,0x1
	00012ef9:JMP 0x00012f00
	00012efb:MOV EAX,0x0
	00012f00:ADD EAX,0x2
	00012f03:CDQE
	00012f05:SUB qword ptr [RBP + -0x138],RAX
	00012f0c:MOV RDX,qword ptr [0x00040528]
	00012f13:MOV EAX,dword ptr [RBP + -0x15c]
	00012f19:CDQE
	00012f1b:SHL RAX,0x3
	00012f1f:ADD RDX,RAX
	00012f22:MOV RAX,qword ptr [RBP + -0x138]
	00012f29:MOV qword ptr [RDX],RAX
	00012f2c:LEA RAX,[0x3e240]
	00012f33:MOV RAX,qword ptr [RAX]
	00012f36:LEA RDX,[RAX + 0x2]
	00012f3a:MOV RCX,qword ptr [0x00040520]
	00012f41:MOV EAX,dword ptr [RBP + -0x15c]
	00012f47:CDQE
	00012f49:SHL RAX,0x3
	00012f4d:LEA RBX,[RCX + RAX*0x1]
	00012f51:MOV RAX,qword ptr [RBP + -0x138]
	00012f58:MOV RSI,RAX
	00012f5b:MOV RDI,RDX
	00012f5e:CALL 0x0001838d
	00012f63:MOV qword ptr [RBX],RAX
	00012f66:CMP qword ptr [RBP + -0x138],0x0
	00012f6e:JZ 0x00012faa
	00012f70:MOV RDX,qword ptr [0x00040520]
	00012f77:MOV EAX,dword ptr [RBP + -0x15c]
	00012f7d:CDQE
	00012f7f:SHL RAX,0x3
	00012f83:ADD RAX,RDX
	00012f86:MOV RAX,qword ptr [RAX]
	00012f89:TEST RAX,RAX
	00012f8c:JNZ 0x00012faa
	00012f8e:MOV EAX,dword ptr [RBP + -0x15c]
	00012f94:SUB EAX,0x1
	00012f97:CDQE
	00012f99:MOV qword ptr [0x0003e040],RAX
	00012fa0:MOV EAX,0xffffffff
	00012fa5:JMP 0x000132ce
	00012faa:MOV RDX,qword ptr [0x00040530]
	00012fb1:MOV EAX,dword ptr [RBP + -0x15c]
	00012fb7:CDQE
	00012fb9:ADD RAX,RDX
	00012fbc:MOV byte ptr [RAX],0x2b
	00012fbf:ADD dword ptr [RBP + -0x15c],0x1
	00012fc6:MOV EAX,dword ptr [RBP + -0x15c]
	00012fcc:MOVSXD RDX,EAX
	00012fcf:MOV RAX,qword ptr [0x0003e040]
	00012fd6:CMP RDX,RAX
	00012fd9:JLE 0x00012dff
END_OF_LINE
----------------------------------------------
887: chars_read = get_line();
	00012dff:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
888: if (chars_read == 0xffffffffffffffff) {
	00012e0b:CMP qword ptr [RBP + -0x138],-0x1
	00012e13:JNZ 0x00012e31
END_OF_LINE
----------------------------------------------
889: p_end = (lin)iVar13;
	00012e1e:CDQE
END_OF_LINE
----------------------------------------------
890: iVar13 = -1;
	00012e27:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
891: chars_read = 0xffffffffffffffff;
	00012e2c:JMP 0x000132ce
END_OF_LINE
----------------------------------------------
892: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
894: if (chars_read == 0) {
	00012e31:CMP qword ptr [RBP + -0x138],0x0
	00012e39:JNZ 0x00012e6b
END_OF_LINE
----------------------------------------------
895: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012e42:LEA RAX,[RBP + -0xa0]
	00012e49:MOV RSI,RDX
	00012e4c:MOV RDI,RAX
	00012e4f:CALL 0x00018472
END_OF_LINE
----------------------------------------------
897: fatal("unexpected end of file in patch at line %s",pcVar16);
	00012e66:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
899: if ((*buf != '>') || ((buf[1] != ' ' && (buf[1] != '\t')))) {
	00012e75:MOVZX EAX,byte ptr [RAX]
	00012e78:CMP AL,0x3e
	00012e7a:JNZ 0x00012ea6
	00012e7c:LEA RAX,[0x3e240]
	00012e83:MOV RAX,qword ptr [RAX]
	00012e86:ADD RAX,0x1
	00012e8a:MOVZX EAX,byte ptr [RAX]
	00012e8d:CMP AL,0x20
	00012e8f:JZ 0x00012ed6
	00012e91:LEA RAX,[0x3e240]
	00012e98:MOV RAX,qword ptr [RAX]
	00012e9b:ADD RAX,0x1
	00012e9f:MOVZX EAX,byte ptr [RAX]
	00012ea2:CMP AL,0x9
	00012ea4:JZ 0x00012ed6
END_OF_LINE
----------------------------------------------
900: pcVar16 = format_linenum(numbuf0,p_input_line);
	00012ead:LEA RAX,[RBP + -0xa0]
	00012eb4:MOV RSI,RDX
	00012eb7:MOV RDI,RAX
	00012eba:CALL 0x00018472
END_OF_LINE
----------------------------------------------
902: fatal("\'>\' followed by space or tab expected at line %s of patch",pcVar16);
	00012ed1:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
904: if ((i == p_end) && (_Var12 = incomplete_line(), _Var12)) {
	00012edc:MOVSXD RDX,EAX
	00012edf:MOV RAX,qword ptr [0x0003e040]
	00012ee6:CMP RDX,RAX
	00012ee9:JNZ 0x00012efb
	00012eeb:CALL 0x0001359c
	00012ef0:TEST AL,AL
	00012ef2:JZ 0x00012efb
END_OF_LINE
----------------------------------------------
905: iVar14 = 1;
	00012ef4:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
908: iVar14 = 0;
	00012efb:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
910: chars_read = chars_read - (long)(iVar14 + 2);
	00012f00:ADD EAX,0x2
	00012f03:CDQE
	00012f05:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
911: p_len[i] = chars_read;
	00012f19:CDQE
	00012f1b:SHL RAX,0x3
	00012f1f:ADD RDX,RAX
	00012f22:MOV RAX,qword ptr [RBP + -0x138]
	00012f29:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
912: ppcVar2 = p_line + i;
	00012f47:CDQE
	00012f49:SHL RAX,0x3
	00012f4d:LEA RBX,[RCX + RAX*0x1]
END_OF_LINE
----------------------------------------------
913: pcVar16 = savebuf(buf + 2,chars_read);
	00012f36:LEA RDX,[RAX + 0x2]
	00012f3a:MOV RCX,qword ptr [0x00040520]
	00012f41:MOV EAX,dword ptr [RBP + -0x15c]
	00012f47:CDQE
	00012f49:SHL RAX,0x3
	00012f4d:LEA RBX,[RCX + RAX*0x1]
	00012f51:MOV RAX,qword ptr [RBP + -0x138]
	00012f58:MOV RSI,RAX
	00012f5b:MOV RDI,RDX
	00012f5e:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
914: *ppcVar2 = pcVar16;
	00012f63:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
915: if ((chars_read != 0) && (p_line[i] == (char *)0x0)) {
	00012f66:CMP qword ptr [RBP + -0x138],0x0
	00012f6e:JZ 0x00012faa
	00012f70:MOV RDX,qword ptr [0x00040520]
	00012f77:MOV EAX,dword ptr [RBP + -0x15c]
	00012f7d:CDQE
	00012f7f:SHL RAX,0x3
	00012f83:ADD RAX,RDX
	00012f86:MOV RAX,qword ptr [RAX]
	00012f89:TEST RAX,RAX
	00012f8c:JNZ 0x00012faa
END_OF_LINE
----------------------------------------------
916: p_end = (lin)iVar13;
	00012f97:CDQE
END_OF_LINE
----------------------------------------------
917: iVar13 = -1;
	00012fa0:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
918: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
920: p_Char[i] = '+';
	00012fb7:CDQE
	00012fb9:ADD RAX,RDX
	00012fbc:MOV byte ptr [RAX],0x2b
END_OF_LINE
----------------------------------------------
921: iVar13 = i;
	00012fbf:ADD dword ptr [RBP + -0x15c],0x1
END_OF_LINE
----------------------------------------------
923: LAB_00012fe2:
	00012fe2:CMP byte ptr [RBP + -0x178],0x0
END_OF_LINE
----------------------------------------------
924: if ((rev) && (_Var12 = pch_swap(), !_Var12)) {
	00012fe9:JZ 0x0001300b
	00012feb:CALL 0x00013619
	00012ff0:XOR EAX,0x1
	00012ff3:TEST AL,AL
	00012ff5:JZ 0x0001300b
END_OF_LINE
----------------------------------------------
925: say("Not enough memory to swap next hunk!\n");
	00013006:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
927: if (hunkmax <= p_end + 1) {
	00013012:LEA RDX,[RAX + 0x1]
	00013016:MOV RAX,qword ptr [0x0003e048]
	0001301d:CMP RDX,RAX
	00013020:JL 0x0001304a
END_OF_LINE
----------------------------------------------
929: __assert_fail("p_end + 1 < hunkmax","pch.c",0x779,"another_hunk");
	00013045:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
931: p_Char[p_end + 1] = '^';
	00013058:ADD RAX,0x1
	0001305c:ADD RAX,RDX
	0001305f:MOV byte ptr [RAX],0x5e
END_OF_LINE
----------------------------------------------
932: if ((debug & 2U) != 0) {
	0001306b:AND EAX,0x2
	0001306e:TEST EAX,EAX
	00013070:JZ 0x000132c9
END_OF_LINE
----------------------------------------------
933: for (i_1 = 0; __stream = pFRam0000000000144490, i_1 <= p_end + 1; i_1 = i_1 + 1) {
	00013076:MOV qword ptr [RBP + -0xc0],0x0
	00013081:JMP 0x0001329f
	00013086:MOV RAX,qword ptr [0x0003dfe0]
	0001308d:MOV RBX,qword ptr [RAX]
	00013090:MOV RDX,qword ptr [RBP + -0xc0]
	00013097:LEA RAX,[RBP + -0xa0]
	0001309e:MOV RSI,RDX
	000130a1:MOV RDI,RAX
	000130a4:CALL 0x00018472
	000130a9:MOV RSI,RBX
	000130ac:MOV RDI,RAX
	000130af:CALL 0x00005c00
	000130b4:MOV RDX,qword ptr [0x00040530]
	000130bb:MOV RAX,qword ptr [RBP + -0xc0]
	000130c2:ADD RAX,RDX
	000130c5:MOVZX EAX,byte ptr [RAX]
	000130c8:CMP AL,0xa
	000130ca:JNZ 0x000130e8
	000130cc:MOV RAX,qword ptr [0x0003dfe0]
	000130d3:MOV RAX,qword ptr [RAX]
	000130d6:MOV RSI,RAX
	000130d9:MOV EDI,0xa
	000130de:CALL 0x00005c60
	000130e3:JMP 0x00013297
	000130e8:MOV RDX,qword ptr [0x00040530]
	000130ef:MOV RAX,qword ptr [RBP + -0xc0]
	000130f6:ADD RAX,RDX
	000130f9:MOVZX EAX,byte ptr [RAX]
	000130fc:MOVSX EDX,AL
	000130ff:MOV RAX,qword ptr [0x0003dfe0]
	00013106:MOV RAX,qword ptr [RAX]
	00013109:LEA RCX,[0x336ea]
	00013110:MOV RSI,RCX
	00013113:MOV RDI,RAX
	00013116:MOV EAX,0x0
	0001311b:CALL 0x00005d30
	00013120:MOV RDX,qword ptr [0x00040530]
	00013127:MOV RAX,qword ptr [RBP + -0xc0]
	0001312e:ADD RAX,RDX
	00013131:MOVZX EAX,byte ptr [RAX]
	00013134:CMP AL,0x2a
	00013136:JNZ 0x00013193
	00013138:MOV RDX,qword ptr [0x000404f0]
	0001313f:LEA RAX,[RBP + -0x80]
	00013143:MOV RSI,RDX
	00013146:MOV RDI,RAX
	00013149:CALL 0x00018472
	0001314e:MOV RBX,RAX
	00013151:MOV RDX,qword ptr [0x000404e0]
	00013158:LEA RAX,[RBP + -0xa0]
	0001315f:MOV RSI,RDX
	00013162:MOV RDI,RAX
	00013165:CALL 0x00018472
	0001316a:MOV RDX,RAX
	0001316d:MOV RAX,qword ptr [0x0003dfe0]
	00013174:MOV RAX,qword ptr [RAX]
	00013177:MOV RCX,RBX
	0001317a:LEA RSI,[0x336ee]
	00013181:MOV RDI,RAX
	00013184:MOV EAX,0x0
	00013189:CALL 0x00005d30
	0001318e:JMP 0x00013297
	00013193:MOV RDX,qword ptr [0x00040530]
	0001319a:MOV RAX,qword ptr [RBP + -0xc0]
	000131a1:ADD RAX,RDX
	000131a4:MOVZX EAX,byte ptr [RAX]
	000131a7:CMP AL,0x3d
	000131a9:JNZ 0x00013206
	000131ab:MOV RDX,qword ptr [0x000404f8]
	000131b2:LEA RAX,[RBP + -0x80]
	000131b6:MOV RSI,RDX
	000131b9:MOV RDI,RAX
	000131bc:CALL 0x00018472
	000131c1:MOV RBX,RAX
	000131c4:MOV RDX,qword ptr [0x000404e8]
	000131cb:LEA RAX,[RBP + -0xa0]
	000131d2:MOV RSI,RDX
	000131d5:MOV RDI,RAX
	000131d8:CALL 0x00018472
	000131dd:MOV RDX,RAX
	000131e0:MOV RAX,qword ptr [0x0003dfe0]
	000131e7:MOV RAX,qword ptr [RAX]
	000131ea:MOV RCX,RBX
	000131ed:LEA RSI,[0x336ee]
	000131f4:MOV RDI,RAX
	000131f7:MOV EAX,0x0
	000131fc:CALL 0x00005d30
	00013201:JMP 0x00013297
	00013206:MOV RDX,qword ptr [0x00040530]
	0001320d:MOV RAX,qword ptr [RBP + -0xc0]
	00013214:ADD RAX,RDX
	00013217:MOVZX EAX,byte ptr [RAX]
	0001321a:CMP AL,0x5e
	0001321c:JZ 0x00013280
	0001321e:MOV RAX,qword ptr [0x0003dfe0]
	00013225:MOV RAX,qword ptr [RAX]
	00013228:MOV RCX,RAX
	0001322b:MOV EDX,0x2
	00013230:MOV ESI,0x1
	00013235:LEA RAX,[0x336f6]
	0001323c:MOV RDI,RAX
	0001323f:CALL 0x00006010
	00013244:MOV RAX,qword ptr [0x0003dfe0]
	0001324b:MOV RDX,qword ptr [RAX]
	0001324e:MOV RAX,qword ptr [RBP + -0xc0]
	00013255:MOV RSI,RDX
	00013258:MOV RDI,RAX
	0001325b:CALL 0x00013ccf
	00013260:XOR EAX,0x1
	00013263:TEST AL,AL
	00013265:JZ 0x00013297
	00013267:MOV RAX,qword ptr [0x0003dfe0]
	0001326e:MOV RAX,qword ptr [RAX]
	00013271:MOV RSI,RAX
	00013274:MOV EDI,0xa
	00013279:CALL 0x00005c60
	0001327e:JMP 0x00013297
	00013280:MOV RAX,qword ptr [0x0003dfe0]
	00013287:MOV RAX,qword ptr [RAX]
	0001328a:MOV RSI,RAX
	0001328d:MOV EDI,0xa
	00013292:CALL 0x00005c60
	00013297:ADD qword ptr [RBP + -0xc0],0x1
	0001329f:MOV RAX,qword ptr [0x0003e040]
	000132a6:ADD RAX,0x1
	000132aa:CMP qword ptr [RBP + -0xc0],RAX
	000132b1:JLE 0x00013086
END_OF_LINE
----------------------------------------------
934: pcVar16 = format_linenum(numbuf0,i_1);
	00013097:LEA RAX,[RBP + -0xa0]
	0001309e:MOV RSI,RDX
	000130a1:MOV RDI,RAX
	000130a4:CALL 0x00018472
END_OF_LINE
----------------------------------------------
935: fputs(pcVar16,__stream);
	000130af:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
936: if (p_Char[i_1] == '\n') {
	000130c2:ADD RAX,RDX
	000130c5:MOVZX EAX,byte ptr [RAX]
	000130c8:CMP AL,0xa
	000130ca:JNZ 0x000130e8
END_OF_LINE
----------------------------------------------
937: fputc(10,pFRam0000000000144490);
	000130de:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
940: fprintf(pFRam0000000000144490," %c",(ulong)(uint)(int)p_Char[i_1]);
	000130f6:ADD RAX,RDX
	000130f9:MOVZX EAX,byte ptr [RAX]
	000130fc:MOVSX EDX,AL
	000130ff:MOV RAX,qword ptr [0x0003dfe0]
	00013106:MOV RAX,qword ptr [RAX]
	00013109:LEA RCX,[0x336ea]
	00013110:MOV RSI,RCX
	00013113:MOV RDI,RAX
	00013116:MOV EAX,0x0
	0001311b:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
941: if (p_Char[i_1] == '*') {
	0001312e:ADD RAX,RDX
	00013131:MOVZX EAX,byte ptr [RAX]
	00013134:CMP AL,0x2a
	00013136:JNZ 0x00013193
END_OF_LINE
----------------------------------------------
942: pcVar16 = format_linenum(numbuf1,p_ptrn_lines);
	0001313f:LEA RAX,[RBP + -0x80]
	00013143:MOV RSI,RDX
	00013146:MOV RDI,RAX
	00013149:CALL 0x00018472
END_OF_LINE
----------------------------------------------
943: pcVar17 = format_linenum(numbuf0,p_first);
	00013158:LEA RAX,[RBP + -0xa0]
	0001315f:MOV RSI,RDX
	00013162:MOV RDI,RAX
	00013165:CALL 0x00018472
END_OF_LINE
----------------------------------------------
944: fprintf(pFRam0000000000144490," %s,%s\n",pcVar17,pcVar16);
	00013189:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
946: else if (p_Char[i_1] == '=') {
	000131a1:ADD RAX,RDX
	000131a4:MOVZX EAX,byte ptr [RAX]
	000131a7:CMP AL,0x3d
	000131a9:JNZ 0x00013206
END_OF_LINE
----------------------------------------------
947: pcVar16 = format_linenum(numbuf1,p_repl_lines);
	000131b2:LEA RAX,[RBP + -0x80]
	000131b6:MOV RSI,RDX
	000131b9:MOV RDI,RAX
	000131bc:CALL 0x00018472
END_OF_LINE
----------------------------------------------
948: pcVar17 = format_linenum(numbuf0,p_newfirst);
	000131cb:LEA RAX,[RBP + -0xa0]
	000131d2:MOV RSI,RDX
	000131d5:MOV RDI,RAX
	000131d8:CALL 0x00018472
END_OF_LINE
----------------------------------------------
949: fprintf(pFRam0000000000144490," %s,%s\n",pcVar17,pcVar16);
	000131fc:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
951: else if (p_Char[i_1] == '^') {
	00013214:ADD RAX,RDX
	00013217:MOVZX EAX,byte ptr [RAX]
	0001321a:CMP AL,0x5e
	0001321c:JZ 0x00013280
END_OF_LINE
----------------------------------------------
952: fputc(10,pFRam0000000000144490);
	00013292:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
955: fwrite(&DAT_000336f6,1,2,pFRam0000000000144490);
	0001323f:CALL 0x00006010
END_OF_LINE
----------------------------------------------
956: _Var12 = pch_write_line(i_1,(FILE *)pFRam0000000000144490);
	0001325b:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
957: if (!_Var12) {
	00013265:JZ 0x00013297
END_OF_LINE
----------------------------------------------
958: fputc(10,pFRam0000000000144490);
	00013279:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
963: fflush(pFRam0000000000144490);
	000132c4:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
965: iVar13 = 1;
	000132c9:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
967: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
968: LAB_0001264b:
	0001264b:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
969: if ((p_ptrn_lines < fillsrc_1) && (p_end < filldst_1)) {
	00012659:JLE 0x000120ed
	0001265f:MOV RAX,qword ptr [0x0003e040]
	00012666:CMP qword ptr [RBP + -0xc8],RAX
	0001266d:JLE 0x000120ed
END_OF_LINE
----------------------------------------------
970: if (p_prefix_context == -1) {
	0001267a:CMP RAX,-0x1
	0001267e:JNZ 0x00012685
END_OF_LINE
----------------------------------------------
972: malformed();
	00012680:CALL 0x00010053
END_OF_LINE
----------------------------------------------
974: p_suffix_context = context;
	0001268c:MOV qword ptr [0x00040510],RAX
END_OF_LINE
----------------------------------------------
975: goto LAB_00012fe2;
	00012fe2:CMP byte ptr [RBP + -0x178],0x0
END_OF_LINE
----------------------------------------------
977: chars_read = get_line();
	000120ed:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
978: pcVar16 = buf;
	000120ed:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
979: if (chars_read == 0) {
	000120f9:CMP qword ptr [RBP + -0x138],0x0
	00012101:JNZ 0x0001214b
END_OF_LINE
----------------------------------------------
980: if (2 < p_max - filldst_1) {
	0001210a:SUB RAX,qword ptr [RBP + -0xc8]
	00012111:CMP RAX,0x2
	00012115:JG 0x00012137
END_OF_LINE
----------------------------------------------
982: fatal("unexpected end of file in patch");
	00012146:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
984: *(undefined2 *)buf = 0xa20;
	00012121:MOV word ptr [RAX],0xa20
END_OF_LINE
----------------------------------------------
985: pcVar16[2] = '\0';
	00012126:MOV byte ptr [RAX + 0x2],0x0
END_OF_LINE
----------------------------------------------
986: chars_read = 2;
	0001212a:MOV qword ptr [RBP + -0x138],0x2
END_OF_LINE
----------------------------------------------
988: if (chars_read == 0xffffffffffffffff) {
	0001214b:CMP qword ptr [RBP + -0x138],-0x1
	00012153:JNZ 0x00012165
END_OF_LINE
----------------------------------------------
989: s = (char *)0x0;
	00012155:MOV qword ptr [RBP + -0x148],0x0
END_OF_LINE
----------------------------------------------
991: else if ((*buf == '\t') || (*buf == '\n')) {
	0001216f:MOVZX EAX,byte ptr [RAX]
	00012172:CMP AL,0x9
	00012174:JZ 0x00012187
	00012176:LEA RAX,[0x3e240]
	0001217d:MOV RAX,qword ptr [RAX]
	00012180:MOVZX EAX,byte ptr [RAX]
	00012183:CMP AL,0xa
	00012185:JNZ 0x000121b3
END_OF_LINE
----------------------------------------------
992: ch = ' ';
	00012187:MOV byte ptr [RBP + -0x15e],0x20
END_OF_LINE
----------------------------------------------
993: s = savebuf(buf,chars_read);
	000121a5:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
996: ch = *buf;
	000121bd:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
997: chars_read = chars_read - 1;
	000121c6:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
998: s = savebuf(buf + 1,chars_read);
	000121d8:LEA RDX,[RAX + 0x1]
	000121dc:MOV RAX,qword ptr [RBP + -0x138]
	000121e3:MOV RSI,RAX
	000121e6:MOV RDI,RDX
	000121e9:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
1000: if ((chars_read != 0) && (s == (char *)0x0)) goto LAB_0001222b;
	000121f5:CMP qword ptr [RBP + -0x138],0x0
	000121fd:JZ 0x0001225f
	000121ff:CMP qword ptr [RBP + -0x148],0x0
	00012207:JNZ 0x0001225f
	00012209:JMP 0x0001222b
	0001220b:MOV RDX,qword ptr [0x00040520]
	00012212:MOV RAX,qword ptr [RBP + -0xc8]
	00012219:SHL RAX,0x3
	0001221d:ADD RAX,RDX
	00012220:MOV RAX,qword ptr [RAX]
	00012223:MOV RDI,RAX
	00012226:CALL 0x00005860
	0001222b:SUB qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
1001: if (ch == '=') {
	00012266:CMP EAX,0x3d
	00012269:JZ 0x0001236a
END_OF_LINE
----------------------------------------------
1002: ch = ' ';
	0001236a:MOV byte ptr [RBP + -0x15e],0x20
END_OF_LINE
----------------------------------------------
1003: LAB_00012371:
	00012371:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
1004: if (p_ptrn_lines < fillsrc_1) {
	0001237f:JLE 0x000123e1
END_OF_LINE
----------------------------------------------
1005: free(s);
	0001238b:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1006: while (filldst_1 = filldst_1 + -1, p_ptrn_lines < filldst_1) {
	000123b2:SUB qword ptr [RBP + -0xc8],0x1
	000123ba:MOV RAX,qword ptr [0x000404f0]
	000123c1:CMP qword ptr [RBP + -0xc8],RAX
	000123c8:JG 0x00012392
END_OF_LINE
----------------------------------------------
1007: free(p_line[filldst_1]);
	000123a4:ADD RAX,RDX
	000123a7:MOV RAX,qword ptr [RAX]
	000123aa:MOV RDI,RAX
	000123ad:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1009: p_end = fillsrc_1 + -1;
	000123d1:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
1011: malformed();
	000123dc:CALL 0x00010053
END_OF_LINE
----------------------------------------------
1013: context = context + 1;
	000123e1:ADD qword ptr [RBP + -0x140],0x1
END_OF_LINE
----------------------------------------------
1014: if ((fillsrc_1 == p_ptrn_lines) && (_Var12 = incomplete_line(), _Var12)) {
	000123f0:CMP qword ptr [RBP + -0xd0],RAX
	000123f7:JNZ 0x00012409
	000123f9:CALL 0x0001359c
	000123fe:TEST AL,AL
	00012400:JZ 0x00012409
END_OF_LINE
----------------------------------------------
1015: iVar13 = 1;
	00012402:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
1018: iVar13 = 0;
	00012409:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
1020: chars_read = chars_read - (long)iVar13;
	0001240e:CDQE
	00012410:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
1021: p_Char[fillsrc_1] = ch;
	00012425:ADD RDX,RAX
	00012428:MOVZX EAX,byte ptr [RBP + -0x15e]
	0001242f:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
1022: p_line[fillsrc_1] = s;
	00012443:ADD RDX,RAX
	00012446:MOV RAX,qword ptr [RBP + -0x148]
	0001244d:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1023: p_len[fillsrc_1] = chars_read;
	0001246d:LEA RDX,[RCX + RAX*0x1]
	00012471:MOV RAX,qword ptr [RBP + -0x138]
	00012478:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1024: fillsrc_1 = fillsrc_1 + 1;
	0001245e:LEA RDX,[RAX + 0x1]
	00012462:MOV qword ptr [RBP + -0xd0],RDX
	00012469:SHL RAX,0x3
	0001246d:LEA RDX,[RCX + RAX*0x1]
	00012471:MOV RAX,qword ptr [RBP + -0x138]
	00012478:MOV qword ptr [RDX],RAX
	0001247b:MOV RDX,qword ptr [RBP + -0x138]
	00012482:MOV RAX,qword ptr [RBP + -0x148]
	00012489:MOV RSI,RDX
	0001248c:MOV RDI,RAX
	0001248f:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
1025: s = savebuf(s,chars_read);
	0001248f:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
1026: if ((chars_read != 0) && (s == (char *)0x0)) goto LAB_000124d1;
	0001249b:CMP qword ptr [RBP + -0x138],0x0
	000124a3:JZ 0x00012505
	000124a5:CMP qword ptr [RBP + -0x148],0x0
	000124ad:JNZ 0x00012505
	000124af:JMP 0x000124d1
	000124b1:MOV RDX,qword ptr [0x00040520]
	000124b8:MOV RAX,qword ptr [RBP + -0xc8]
	000124bf:SHL RAX,0x3
	000124c3:ADD RAX,RDX
	000124c6:MOV RAX,qword ptr [RAX]
	000124c9:MOV RDI,RAX
	000124cc:CALL 0x00005860
	000124d1:SUB qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
1027: LAB_00012505:
	00012505:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
1028: if (p_end < filldst_1) {
	00012513:JLE 0x00012575
END_OF_LINE
----------------------------------------------
1029: free(s);
	0001251f:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1030: while (filldst_1 = filldst_1 + -1, p_ptrn_lines < filldst_1) {
	00012546:SUB qword ptr [RBP + -0xc8],0x1
	0001254e:MOV RAX,qword ptr [0x000404f0]
	00012555:CMP qword ptr [RBP + -0xc8],RAX
	0001255c:JG 0x00012526
END_OF_LINE
----------------------------------------------
1031: free(p_line[filldst_1]);
	00012538:ADD RAX,RDX
	0001253b:MOV RAX,qword ptr [RAX]
	0001253e:MOV RDI,RAX
	00012541:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1033: p_end = fillsrc_1 + -1;
	00012565:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
1035: malformed();
	00012570:CALL 0x00010053
END_OF_LINE
----------------------------------------------
1037: if ((filldst_1 == p_end) && (_Var12 = incomplete_line(), _Var12)) {
	0001257c:CMP qword ptr [RBP + -0xc8],RAX
	00012583:JNZ 0x00012595
	00012585:CALL 0x0001359c
	0001258a:TEST AL,AL
	0001258c:JZ 0x00012595
END_OF_LINE
----------------------------------------------
1038: iVar13 = 1;
	0001258e:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
1041: iVar13 = 0;
	00012595:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
1043: chars_read = chars_read - (long)iVar13;
	0001259a:CDQE
	0001259c:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
1044: p_Char[filldst_1] = ch;
	000125b1:ADD RDX,RAX
	000125b4:MOVZX EAX,byte ptr [RBP + -0x15e]
	000125bb:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
1045: p_line[filldst_1] = s;
	000125cf:ADD RDX,RAX
	000125d2:MOV RAX,qword ptr [RBP + -0x148]
	000125d9:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1046: p_len[filldst_1] = chars_read;
	000125f9:LEA RDX,[RCX + RAX*0x1]
	000125fd:MOV RAX,qword ptr [RBP + -0x138]
	00012604:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1047: filldst_1 = filldst_1 + 1;
	000125ea:LEA RDX,[RAX + 0x1]
	000125ee:MOV qword ptr [RBP + -0xc8],RDX
	000125f5:SHL RAX,0x3
	000125f9:LEA RDX,[RCX + RAX*0x1]
	000125fd:MOV RAX,qword ptr [RBP + -0x138]
	00012604:MOV qword ptr [RDX],RAX
	00012607:JMP 0x0001261c
END_OF_LINE
----------------------------------------------
1050: if ('=' < ch) {
	00012272:JG 0x00012609
END_OF_LINE
----------------------------------------------
1051: LAB_00012609:
	00012609:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
1052: p_end = filldst_1;
	00012610:MOV qword ptr [0x0003e040],RAX
END_OF_LINE
----------------------------------------------
1054: malformed();
	00012617:CALL 0x00010053
END_OF_LINE
----------------------------------------------
1056: if (ch != '-') {
	00012278:CMP EAX,0x2d
	0001227b:JZ 0x0001229d
END_OF_LINE
----------------------------------------------
1057: if ('-' < ch) goto LAB_00012609;
	00012280:JG 0x00012609
	00012286:CMP EAX,0x20
	00012289:JZ 0x00012371
	0001228f:CMP EAX,0x2b
	00012292:JZ 0x00012505
	00012298:JMP 0x00012609
	0001229d:MOV RAX,qword ptr [0x000404f0]
	000122a4:CMP qword ptr [RBP + -0xd0],RAX
	000122ab:JLE 0x000122d3
	000122ad:MOV RAX,qword ptr [RBP + -0x148]
	000122b4:MOV RDI,RAX
	000122b7:CALL 0x00005860
	000122bc:MOV RAX,qword ptr [RBP + -0xc8]
	000122c3:SUB RAX,0x1
	000122c7:MOV qword ptr [0x0003e040],RAX
	000122ce:CALL 0x00010053
	000122d3:MOV RAX,qword ptr [0x000404f0]
	000122da:CMP qword ptr [RBP + -0xd0],RAX
	000122e1:JNZ 0x000122f3
	000122e3:CALL 0x0001359c
	000122e8:TEST AL,AL
	000122ea:JZ 0x000122f3
	000122ec:MOV EAX,0x1
	000122f1:JMP 0x000122f8
	000122f3:MOV EAX,0x0
	000122f8:CDQE
	000122fa:SUB qword ptr [RBP + -0x138],RAX
	00012301:MOV RDX,qword ptr [0x00040530]
	00012308:MOV RAX,qword ptr [RBP + -0xd0]
	0001230f:ADD RDX,RAX
	00012312:MOVZX EAX,byte ptr [RBP + -0x15e]
	00012319:MOV byte ptr [RDX],AL
	0001231b:MOV RDX,qword ptr [0x00040520]
	00012322:MOV RAX,qword ptr [RBP + -0xd0]
	00012329:SHL RAX,0x3
	0001232d:ADD RDX,RAX
	00012330:MOV RAX,qword ptr [RBP + -0x148]
	00012337:MOV qword ptr [RDX],RAX
	0001233a:MOV RCX,qword ptr [0x00040528]
	00012341:MOV RAX,qword ptr [RBP + -0xd0]
	00012348:LEA RDX,[RAX + 0x1]
	0001234c:MOV qword ptr [RBP + -0xd0],RDX
	00012353:SHL RAX,0x3
	00012357:LEA RDX,[RCX + RAX*0x1]
	0001235b:MOV RAX,qword ptr [RBP + -0x138]
	00012362:MOV qword ptr [RDX],RAX
	00012365:JMP 0x0001261c
	0001236a:MOV byte ptr [RBP + -0x15e],0x20
	00012371:MOV RAX,qword ptr [0x000404f0]
	00012378:CMP qword ptr [RBP + -0xd0],RAX
	0001237f:JLE 0x000123e1
	00012381:MOV RAX,qword ptr [RBP + -0x148]
	00012388:MOV RDI,RAX
	0001238b:CALL 0x00005860
	00012390:JMP 0x000123b2
	00012392:MOV RDX,qword ptr [0x00040520]
	00012399:MOV RAX,qword ptr [RBP + -0xc8]
	000123a0:SHL RAX,0x3
	000123a4:ADD RAX,RDX
	000123a7:MOV RAX,qword ptr [RAX]
	000123aa:MOV RDI,RAX
	000123ad:CALL 0x00005860
	000123b2:SUB qword ptr [RBP + -0xc8],0x1
	000123ba:MOV RAX,qword ptr [0x000404f0]
	000123c1:CMP qword ptr [RBP + -0xc8],RAX
	000123c8:JG 0x00012392
	000123ca:MOV RAX,qword ptr [RBP + -0xd0]
	000123d1:SUB RAX,0x1
	000123d5:MOV qword ptr [0x0003e040],RAX
	000123dc:CALL 0x00010053
	000123e1:ADD qword ptr [RBP + -0x140],0x1
	000123e9:MOV RAX,qword ptr [0x000404f0]
	000123f0:CMP qword ptr [RBP + -0xd0],RAX
	000123f7:JNZ 0x00012409
	000123f9:CALL 0x0001359c
	000123fe:TEST AL,AL
	00012400:JZ 0x00012409
	00012402:MOV EAX,0x1
	00012407:JMP 0x0001240e
	00012409:MOV EAX,0x0
	0001240e:CDQE
	00012410:SUB qword ptr [RBP + -0x138],RAX
	00012417:MOV RDX,qword ptr [0x00040530]
	0001241e:MOV RAX,qword ptr [RBP + -0xd0]
	00012425:ADD RDX,RAX
	00012428:MOVZX EAX,byte ptr [RBP + -0x15e]
	0001242f:MOV byte ptr [RDX],AL
	00012431:MOV RDX,qword ptr [0x00040520]
	00012438:MOV RAX,qword ptr [RBP + -0xd0]
	0001243f:SHL RAX,0x3
	00012443:ADD RDX,RAX
	00012446:MOV RAX,qword ptr [RBP + -0x148]
	0001244d:MOV qword ptr [RDX],RAX
	00012450:MOV RCX,qword ptr [0x00040528]
	00012457:MOV RAX,qword ptr [RBP + -0xd0]
	0001245e:LEA RDX,[RAX + 0x1]
	00012462:MOV qword ptr [RBP + -0xd0],RDX
	00012469:SHL RAX,0x3
	0001246d:LEA RDX,[RCX + RAX*0x1]
	00012471:MOV RAX,qword ptr [RBP + -0x138]
	00012478:MOV qword ptr [RDX],RAX
	0001247b:MOV RDX,qword ptr [RBP + -0x138]
	00012482:MOV RAX,qword ptr [RBP + -0x148]
	00012489:MOV RSI,RDX
	0001248c:MOV RDI,RAX
	0001248f:CALL 0x0001838d
	00012494:MOV qword ptr [RBP + -0x148],RAX
	0001249b:CMP qword ptr [RBP + -0x138],0x0
	000124a3:JZ 0x00012505
	000124a5:CMP qword ptr [RBP + -0x148],0x0
	000124ad:JNZ 0x00012505
	000124af:JMP 0x000124d1
	000124b1:MOV RDX,qword ptr [0x00040520]
	000124b8:MOV RAX,qword ptr [RBP + -0xc8]
	000124bf:SHL RAX,0x3
	000124c3:ADD RAX,RDX
	000124c6:MOV RAX,qword ptr [RAX]
	000124c9:MOV RDI,RAX
	000124cc:CALL 0x00005860
	000124d1:SUB qword ptr [RBP + -0xc8],0x1
	000124d9:MOV RAX,qword ptr [0x000404f0]
	000124e0:CMP qword ptr [RBP + -0xc8],RAX
	000124e7:JG 0x000124b1
	000124e9:MOV RAX,qword ptr [RBP + -0xd0]
	000124f0:SUB RAX,0x1
	000124f4:MOV qword ptr [0x0003e040],RAX
	000124fb:MOV EAX,0xffffffff
	00012500:JMP 0x000132ce
	00012505:MOV RAX,qword ptr [0x0003e040]
	0001250c:CMP qword ptr [RBP + -0xc8],RAX
	00012513:JLE 0x00012575
	00012515:MOV RAX,qword ptr [RBP + -0x148]
	0001251c:MOV RDI,RAX
	0001251f:CALL 0x00005860
	00012524:JMP 0x00012546
	00012526:MOV RDX,qword ptr [0x00040520]
	0001252d:MOV RAX,qword ptr [RBP + -0xc8]
	00012534:SHL RAX,0x3
	00012538:ADD RAX,RDX
	0001253b:MOV RAX,qword ptr [RAX]
	0001253e:MOV RDI,RAX
	00012541:CALL 0x00005860
	00012546:SUB qword ptr [RBP + -0xc8],0x1
	0001254e:MOV RAX,qword ptr [0x000404f0]
	00012555:CMP qword ptr [RBP + -0xc8],RAX
	0001255c:JG 0x00012526
	0001255e:MOV RAX,qword ptr [RBP + -0xd0]
	00012565:SUB RAX,0x1
	00012569:MOV qword ptr [0x0003e040],RAX
	00012570:CALL 0x00010053
	00012575:MOV RAX,qword ptr [0x0003e040]
	0001257c:CMP qword ptr [RBP + -0xc8],RAX
	00012583:JNZ 0x00012595
	00012585:CALL 0x0001359c
	0001258a:TEST AL,AL
	0001258c:JZ 0x00012595
	0001258e:MOV EAX,0x1
	00012593:JMP 0x0001259a
	00012595:MOV EAX,0x0
	0001259a:CDQE
	0001259c:SUB qword ptr [RBP + -0x138],RAX
	000125a3:MOV RDX,qword ptr [0x00040530]
	000125aa:MOV RAX,qword ptr [RBP + -0xc8]
	000125b1:ADD RDX,RAX
	000125b4:MOVZX EAX,byte ptr [RBP + -0x15e]
	000125bb:MOV byte ptr [RDX],AL
	000125bd:MOV RDX,qword ptr [0x00040520]
	000125c4:MOV RAX,qword ptr [RBP + -0xc8]
	000125cb:SHL RAX,0x3
	000125cf:ADD RDX,RAX
	000125d2:MOV RAX,qword ptr [RBP + -0x148]
	000125d9:MOV qword ptr [RDX],RAX
	000125dc:MOV RCX,qword ptr [0x00040528]
	000125e3:MOV RAX,qword ptr [RBP + -0xc8]
	000125ea:LEA RDX,[RAX + 0x1]
	000125ee:MOV qword ptr [RBP + -0xc8],RDX
	000125f5:SHL RAX,0x3
	000125f9:LEA RDX,[RCX + RAX*0x1]
	000125fd:MOV RAX,qword ptr [RBP + -0x138]
	00012604:MOV qword ptr [RDX],RAX
	00012607:JMP 0x0001261c
	00012609:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
1058: if (ch == ' ') goto LAB_00012371;
	00012286:CMP EAX,0x20
	00012289:JZ 0x00012371
	0001228f:CMP EAX,0x2b
	00012292:JZ 0x00012505
	00012298:JMP 0x00012609
	0001229d:MOV RAX,qword ptr [0x000404f0]
	000122a4:CMP qword ptr [RBP + -0xd0],RAX
	000122ab:JLE 0x000122d3
	000122ad:MOV RAX,qword ptr [RBP + -0x148]
	000122b4:MOV RDI,RAX
	000122b7:CALL 0x00005860
	000122bc:MOV RAX,qword ptr [RBP + -0xc8]
	000122c3:SUB RAX,0x1
	000122c7:MOV qword ptr [0x0003e040],RAX
	000122ce:CALL 0x00010053
	000122d3:MOV RAX,qword ptr [0x000404f0]
	000122da:CMP qword ptr [RBP + -0xd0],RAX
	000122e1:JNZ 0x000122f3
	000122e3:CALL 0x0001359c
	000122e8:TEST AL,AL
	000122ea:JZ 0x000122f3
	000122ec:MOV EAX,0x1
	000122f1:JMP 0x000122f8
	000122f3:MOV EAX,0x0
	000122f8:CDQE
	000122fa:SUB qword ptr [RBP + -0x138],RAX
	00012301:MOV RDX,qword ptr [0x00040530]
	00012308:MOV RAX,qword ptr [RBP + -0xd0]
	0001230f:ADD RDX,RAX
	00012312:MOVZX EAX,byte ptr [RBP + -0x15e]
	00012319:MOV byte ptr [RDX],AL
	0001231b:MOV RDX,qword ptr [0x00040520]
	00012322:MOV RAX,qword ptr [RBP + -0xd0]
	00012329:SHL RAX,0x3
	0001232d:ADD RDX,RAX
	00012330:MOV RAX,qword ptr [RBP + -0x148]
	00012337:MOV qword ptr [RDX],RAX
	0001233a:MOV RCX,qword ptr [0x00040528]
	00012341:MOV RAX,qword ptr [RBP + -0xd0]
	00012348:LEA RDX,[RAX + 0x1]
	0001234c:MOV qword ptr [RBP + -0xd0],RDX
	00012353:SHL RAX,0x3
	00012357:LEA RDX,[RCX + RAX*0x1]
	0001235b:MOV RAX,qword ptr [RBP + -0x138]
	00012362:MOV qword ptr [RDX],RAX
	00012365:JMP 0x0001261c
	0001236a:MOV byte ptr [RBP + -0x15e],0x20
	00012371:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
1059: if (ch != '+') goto LAB_00012609;
	0001228f:CMP EAX,0x2b
	00012292:JZ 0x00012505
	00012298:JMP 0x00012609
	0001229d:MOV RAX,qword ptr [0x000404f0]
	000122a4:CMP qword ptr [RBP + -0xd0],RAX
	000122ab:JLE 0x000122d3
	000122ad:MOV RAX,qword ptr [RBP + -0x148]
	000122b4:MOV RDI,RAX
	000122b7:CALL 0x00005860
	000122bc:MOV RAX,qword ptr [RBP + -0xc8]
	000122c3:SUB RAX,0x1
	000122c7:MOV qword ptr [0x0003e040],RAX
	000122ce:CALL 0x00010053
	000122d3:MOV RAX,qword ptr [0x000404f0]
	000122da:CMP qword ptr [RBP + -0xd0],RAX
	000122e1:JNZ 0x000122f3
	000122e3:CALL 0x0001359c
	000122e8:TEST AL,AL
	000122ea:JZ 0x000122f3
	000122ec:MOV EAX,0x1
	000122f1:JMP 0x000122f8
	000122f3:MOV EAX,0x0
	000122f8:CDQE
	000122fa:SUB qword ptr [RBP + -0x138],RAX
	00012301:MOV RDX,qword ptr [0x00040530]
	00012308:MOV RAX,qword ptr [RBP + -0xd0]
	0001230f:ADD RDX,RAX
	00012312:MOVZX EAX,byte ptr [RBP + -0x15e]
	00012319:MOV byte ptr [RDX],AL
	0001231b:MOV RDX,qword ptr [0x00040520]
	00012322:MOV RAX,qword ptr [RBP + -0xd0]
	00012329:SHL RAX,0x3
	0001232d:ADD RDX,RAX
	00012330:MOV RAX,qword ptr [RBP + -0x148]
	00012337:MOV qword ptr [RDX],RAX
	0001233a:MOV RCX,qword ptr [0x00040528]
	00012341:MOV RAX,qword ptr [RBP + -0xd0]
	00012348:LEA RDX,[RAX + 0x1]
	0001234c:MOV qword ptr [RBP + -0xd0],RDX
	00012353:SHL RAX,0x3
	00012357:LEA RDX,[RCX + RAX*0x1]
	0001235b:MOV RAX,qword ptr [RBP + -0x138]
	00012362:MOV qword ptr [RDX],RAX
	00012365:JMP 0x0001261c
	0001236a:MOV byte ptr [RBP + -0x15e],0x20
	00012371:MOV RAX,qword ptr [0x000404f0]
	00012378:CMP qword ptr [RBP + -0xd0],RAX
	0001237f:JLE 0x000123e1
	00012381:MOV RAX,qword ptr [RBP + -0x148]
	00012388:MOV RDI,RAX
	0001238b:CALL 0x00005860
	00012390:JMP 0x000123b2
	00012392:MOV RDX,qword ptr [0x00040520]
	00012399:MOV RAX,qword ptr [RBP + -0xc8]
	000123a0:SHL RAX,0x3
	000123a4:ADD RAX,RDX
	000123a7:MOV RAX,qword ptr [RAX]
	000123aa:MOV RDI,RAX
	000123ad:CALL 0x00005860
	000123b2:SUB qword ptr [RBP + -0xc8],0x1
	000123ba:MOV RAX,qword ptr [0x000404f0]
	000123c1:CMP qword ptr [RBP + -0xc8],RAX
	000123c8:JG 0x00012392
	000123ca:MOV RAX,qword ptr [RBP + -0xd0]
	000123d1:SUB RAX,0x1
	000123d5:MOV qword ptr [0x0003e040],RAX
	000123dc:CALL 0x00010053
	000123e1:ADD qword ptr [RBP + -0x140],0x1
	000123e9:MOV RAX,qword ptr [0x000404f0]
	000123f0:CMP qword ptr [RBP + -0xd0],RAX
	000123f7:JNZ 0x00012409
	000123f9:CALL 0x0001359c
	000123fe:TEST AL,AL
	00012400:JZ 0x00012409
	00012402:MOV EAX,0x1
	00012407:JMP 0x0001240e
	00012409:MOV EAX,0x0
	0001240e:CDQE
	00012410:SUB qword ptr [RBP + -0x138],RAX
	00012417:MOV RDX,qword ptr [0x00040530]
	0001241e:MOV RAX,qword ptr [RBP + -0xd0]
	00012425:ADD RDX,RAX
	00012428:MOVZX EAX,byte ptr [RBP + -0x15e]
	0001242f:MOV byte ptr [RDX],AL
	00012431:MOV RDX,qword ptr [0x00040520]
	00012438:MOV RAX,qword ptr [RBP + -0xd0]
	0001243f:SHL RAX,0x3
	00012443:ADD RDX,RAX
	00012446:MOV RAX,qword ptr [RBP + -0x148]
	0001244d:MOV qword ptr [RDX],RAX
	00012450:MOV RCX,qword ptr [0x00040528]
	00012457:MOV RAX,qword ptr [RBP + -0xd0]
	0001245e:LEA RDX,[RAX + 0x1]
	00012462:MOV qword ptr [RBP + -0xd0],RDX
	00012469:SHL RAX,0x3
	0001246d:LEA RDX,[RCX + RAX*0x1]
	00012471:MOV RAX,qword ptr [RBP + -0x138]
	00012478:MOV qword ptr [RDX],RAX
	0001247b:MOV RDX,qword ptr [RBP + -0x138]
	00012482:MOV RAX,qword ptr [RBP + -0x148]
	00012489:MOV RSI,RDX
	0001248c:MOV RDI,RAX
	0001248f:CALL 0x0001838d
	00012494:MOV qword ptr [RBP + -0x148],RAX
	0001249b:CMP qword ptr [RBP + -0x138],0x0
	000124a3:JZ 0x00012505
	000124a5:CMP qword ptr [RBP + -0x148],0x0
	000124ad:JNZ 0x00012505
	000124af:JMP 0x000124d1
	000124b1:MOV RDX,qword ptr [0x00040520]
	000124b8:MOV RAX,qword ptr [RBP + -0xc8]
	000124bf:SHL RAX,0x3
	000124c3:ADD RAX,RDX
	000124c6:MOV RAX,qword ptr [RAX]
	000124c9:MOV RDI,RAX
	000124cc:CALL 0x00005860
	000124d1:SUB qword ptr [RBP + -0xc8],0x1
	000124d9:MOV RAX,qword ptr [0x000404f0]
	000124e0:CMP qword ptr [RBP + -0xc8],RAX
	000124e7:JG 0x000124b1
	000124e9:MOV RAX,qword ptr [RBP + -0xd0]
	000124f0:SUB RAX,0x1
	000124f4:MOV qword ptr [0x0003e040],RAX
	000124fb:MOV EAX,0xffffffff
	00012500:JMP 0x000132ce
	00012505:MOV RAX,qword ptr [0x0003e040]
	0001250c:CMP qword ptr [RBP + -0xc8],RAX
	00012513:JLE 0x00012575
	00012515:MOV RAX,qword ptr [RBP + -0x148]
	0001251c:MOV RDI,RAX
	0001251f:CALL 0x00005860
	00012524:JMP 0x00012546
	00012526:MOV RDX,qword ptr [0x00040520]
	0001252d:MOV RAX,qword ptr [RBP + -0xc8]
	00012534:SHL RAX,0x3
	00012538:ADD RAX,RDX
	0001253b:MOV RAX,qword ptr [RAX]
	0001253e:MOV RDI,RAX
	00012541:CALL 0x00005860
	00012546:SUB qword ptr [RBP + -0xc8],0x1
	0001254e:MOV RAX,qword ptr [0x000404f0]
	00012555:CMP qword ptr [RBP + -0xc8],RAX
	0001255c:JG 0x00012526
	0001255e:MOV RAX,qword ptr [RBP + -0xd0]
	00012565:SUB RAX,0x1
	00012569:MOV qword ptr [0x0003e040],RAX
	00012570:CALL 0x00010053
	00012575:MOV RAX,qword ptr [0x0003e040]
	0001257c:CMP qword ptr [RBP + -0xc8],RAX
	00012583:JNZ 0x00012595
	00012585:CALL 0x0001359c
	0001258a:TEST AL,AL
	0001258c:JZ 0x00012595
	0001258e:MOV EAX,0x1
	00012593:JMP 0x0001259a
	00012595:MOV EAX,0x0
	0001259a:CDQE
	0001259c:SUB qword ptr [RBP + -0x138],RAX
	000125a3:MOV RDX,qword ptr [0x00040530]
	000125aa:MOV RAX,qword ptr [RBP + -0xc8]
	000125b1:ADD RDX,RAX
	000125b4:MOVZX EAX,byte ptr [RBP + -0x15e]
	000125bb:MOV byte ptr [RDX],AL
	000125bd:MOV RDX,qword ptr [0x00040520]
	000125c4:MOV RAX,qword ptr [RBP + -0xc8]
	000125cb:SHL RAX,0x3
	000125cf:ADD RDX,RAX
	000125d2:MOV RAX,qword ptr [RBP + -0x148]
	000125d9:MOV qword ptr [RDX],RAX
	000125dc:MOV RCX,qword ptr [0x00040528]
	000125e3:MOV RAX,qword ptr [RBP + -0xc8]
	000125ea:LEA RDX,[RAX + 0x1]
	000125ee:MOV qword ptr [RBP + -0xc8],RDX
	000125f5:SHL RAX,0x3
	000125f9:LEA RDX,[RCX + RAX*0x1]
	000125fd:MOV RAX,qword ptr [RBP + -0x138]
	00012604:MOV qword ptr [RDX],RAX
	00012607:JMP 0x0001261c
	00012609:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
1060: goto LAB_00012505;
	00012505:MOV RAX,qword ptr [0x0003e040]
END_OF_LINE
----------------------------------------------
1062: if (p_ptrn_lines < fillsrc_1) {
	000122ab:JLE 0x000122d3
END_OF_LINE
----------------------------------------------
1063: free(s);
	000122b7:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1064: p_end = filldst_1 + -1;
	000122c3:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
1066: malformed();
	000122ce:CALL 0x00010053
END_OF_LINE
----------------------------------------------
1068: if ((fillsrc_1 == p_ptrn_lines) && (_Var12 = incomplete_line(), _Var12)) {
	000122da:CMP qword ptr [RBP + -0xd0],RAX
	000122e1:JNZ 0x000122f3
	000122e3:CALL 0x0001359c
	000122e8:TEST AL,AL
	000122ea:JZ 0x000122f3
END_OF_LINE
----------------------------------------------
1069: iVar13 = 1;
	000122ec:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
1072: iVar13 = 0;
	000122f3:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
1074: chars_read = chars_read - (long)iVar13;
	000122f8:CDQE
	000122fa:SUB qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
1075: p_Char[fillsrc_1] = '-';
	0001230f:ADD RDX,RAX
	00012312:MOVZX EAX,byte ptr [RBP + -0x15e]
	00012319:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
1076: p_line[fillsrc_1] = s;
	0001232d:ADD RDX,RAX
	00012330:MOV RAX,qword ptr [RBP + -0x148]
	00012337:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1077: p_len[fillsrc_1] = chars_read;
	00012357:LEA RDX,[RCX + RAX*0x1]
	0001235b:MOV RAX,qword ptr [RBP + -0x138]
	00012362:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
1078: fillsrc_1 = fillsrc_1 + 1;
	00012348:LEA RDX,[RAX + 0x1]
	0001234c:MOV qword ptr [RBP + -0xd0],RDX
	00012353:SHL RAX,0x3
	00012357:LEA RDX,[RCX + RAX*0x1]
	0001235b:MOV RAX,qword ptr [RBP + -0x138]
	00012362:MOV qword ptr [RDX],RAX
	00012365:JMP 0x0001261c
END_OF_LINE
----------------------------------------------
1080: if (ch != ' ') {
	0001261c:CMP byte ptr [RBP + -0x15e],0x20
	00012623:JZ 0x0001264b
END_OF_LINE
----------------------------------------------
1081: if (p_prefix_context == -1) {
	0001262c:CMP RAX,-0x1
	00012630:JNZ 0x00012640
END_OF_LINE
----------------------------------------------
1082: p_prefix_context = context;
	00012639:MOV qword ptr [0x00040508],RAX
END_OF_LINE
----------------------------------------------
1084: context = 0;
	00012640:MOV qword ptr [RBP + -0x140],0x0
END_OF_LINE
----------------------------------------------
1086: goto LAB_0001264b;
	0001264b:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
1087: LAB_0001222b:
	0001222b:SUB qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
1088: while (filldst_1 = filldst_1 + -1, p_ptrn_lines < filldst_1) {
	0001222b:SUB qword ptr [RBP + -0xc8],0x1
	00012233:MOV RAX,qword ptr [0x000404f0]
	0001223a:CMP qword ptr [RBP + -0xc8],RAX
	00012241:JG 0x0001220b
END_OF_LINE
----------------------------------------------
1089: free(p_line[filldst_1]);
	0001221d:ADD RAX,RDX
	00012220:MOV RAX,qword ptr [RAX]
	00012223:MOV RDI,RAX
	00012226:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1091: p_end = fillsrc_1 + -1;
	0001224a:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
1092: iVar13 = -1;
	00012255:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
1093: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
1094: LAB_000124d1:
	000124d1:SUB qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
1095: while (filldst_1 = filldst_1 + -1, p_ptrn_lines < filldst_1) {
	000124d1:SUB qword ptr [RBP + -0xc8],0x1
	000124d9:MOV RAX,qword ptr [0x000404f0]
	000124e0:CMP qword ptr [RBP + -0xc8],RAX
	000124e7:JG 0x000124b1
END_OF_LINE
----------------------------------------------
1096: free(p_line[filldst_1]);
	000124c3:ADD RAX,RDX
	000124c6:MOV RAX,qword ptr [RAX]
	000124c9:MOV RDI,RAX
	000124cc:CALL 0x00005860
END_OF_LINE
----------------------------------------------
1098: p_end = fillsrc_1 + -1;
	000124f0:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
1099: iVar13 = -1;
	000124fb:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
1100: goto LAB_000132ce;
	000132ce:MOV RDX,qword ptr [RBP + -0x28]
END_OF_LINE



Function: get_line
----------------------------------------------
9: sVar1 = pget_line(p_indent,p_rfc934_nesting,p_strip_trailing_cr,p_pass_comments_through);
	0001331c:CALL 0x00013323
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00013322:RET
END_OF_LINE



Function: pget_line
----------------------------------------------
21: __stream = pfp;
	00013327:PUSH RBP
END_OF_LINE
----------------------------------------------
22: rfc934_nesting_local = rfc934_nesting;
	00013345:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
24: i = 0;
	00013349:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
25: while( true ) {
	0001338d:JBE 0x000133ba
END_OF_LINE
----------------------------------------------
26: c = getc((FILE *)__stream);
	00013358:CALL 0x00006070
END_OF_LINE
----------------------------------------------
27: pcVar2 = buf;
	00013358:CALL 0x00006070
END_OF_LINE
----------------------------------------------
28: if (c == -1) {
	00013360:CMP dword ptr [RBP + -0x24],-0x1
	00013364:JNZ 0x00013385
END_OF_LINE
----------------------------------------------
29: iVar4 = ferror((FILE *)__stream);
	0001336d:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
30: if (iVar4 == 0) {
	00013372:TEST EAX,EAX
	00013374:JZ 0x0001337b
END_OF_LINE
----------------------------------------------
31: return 0;
	0001359a:LEAVE
	0001359b:RET
END_OF_LINE
----------------------------------------------
34: read_fatal();
	00013376:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
36: if (indent <= i) break;
	0001338d:JBE 0x000133ba
END_OF_LINE
----------------------------------------------
37: if ((c == 0x20) || (c == 0x58)) {
	0001338f:CMP dword ptr [RBP + -0x24],0x20
	00013393:JZ 0x0001339b
	00013395:CMP dword ptr [RBP + -0x24],0x58
	00013399:JNZ 0x000133a2
END_OF_LINE
----------------------------------------------
38: i = i + 1;
	0001339b:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
41: if (c != 9) break;
	000133a2:CMP dword ptr [RBP + -0x24],0x9
	000133a6:JNZ 0x000133bd
END_OF_LINE
----------------------------------------------
42: i = i + 8 & 0xfffffffffffffff8;
	000133ac:ADD RAX,0x8
	000133b0:AND RAX,-0x8
END_OF_LINE
----------------------------------------------
45: i = 0;
	000133be:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
46: b = buf;
	000133d0:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
47: while( true ) {
	000133f3:JZ 0x00013406
END_OF_LINE
----------------------------------------------
48: if ((c != 0x2d) ||
	0001341f:CMP dword ptr [RBP + -0x24],0x2d
	00013423:JNZ 0x0001342f
	00013425:SUB dword ptr [RBP + -0x3c],0x1
	00013429:CMP dword ptr [RBP + -0x3c],0x0
	0001342d:JNS 0x000133d6
END_OF_LINE
----------------------------------------------
49: (rfc934_nesting_local = rfc934_nesting_local + -1, rfc934_nesting_local < 0))
	00013425:SUB dword ptr [RBP + -0x3c],0x1
	00013429:CMP dword ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
50: goto LAB_0001342f;
	0001342f:LEA RAX,[0x3e248]
END_OF_LINE
----------------------------------------------
51: c = getc((FILE *)__stream);
	000133dd:CALL 0x00006070
END_OF_LINE
----------------------------------------------
52: if (c == -1) goto LAB_0001356c;
	000133e5:CMP dword ptr [RBP + -0x24],-0x1
	000133e9:JZ 0x00013565
	000133ef:CMP dword ptr [RBP + -0x24],0x20
	000133f3:JZ 0x00013406
	000133f5:MOV qword ptr [RBP + -0x20],0x1
	000133fd:MOV RAX,qword ptr [RBP + -0x18]
	00013401:MOV byte ptr [RAX],0x2d
	00013404:JMP 0x0001342f
	00013406:MOV RAX,qword ptr [RBP + -0x8]
	0001340a:MOV RDI,RAX
	0001340d:CALL 0x00006070
	00013412:MOV dword ptr [RBP + -0x24],EAX
	00013415:CMP dword ptr [RBP + -0x24],-0x1
	00013419:JZ 0x00013568
	0001341f:CMP dword ptr [RBP + -0x24],0x2d
	00013423:JNZ 0x0001342f
	00013425:SUB dword ptr [RBP + -0x3c],0x1
	00013429:CMP dword ptr [RBP + -0x3c],0x0
	0001342d:JNS 0x000133d6
	0001342f:LEA RAX,[0x3e248]
	00013436:MOV RAX,qword ptr [RAX]
	00013439:MOV qword ptr [RBP + -0x10],RAX
	0001343d:MOV RAX,qword ptr [RBP + -0x10]
	00013441:SUB RAX,0x1
	00013445:CMP qword ptr [RBP + -0x20],RAX
	00013449:JNZ 0x000134ab
	0001344b:SHL qword ptr [RBP + -0x10],0x1
	0001344f:MOV RDX,qword ptr [RBP + -0x10]
	00013453:MOV RAX,qword ptr [RBP + -0x18]
	00013457:MOV RSI,RDX
	0001345a:MOV RDI,RAX
	0001345d:CALL 0x00005ea0
	00013462:MOV qword ptr [RBP + -0x18],RAX
	00013466:CMP qword ptr [RBP + -0x18],0x0
	0001346b:JNZ 0x0001348f
	0001346d:LEA RAX,[0x3e250]
	00013474:MOVZX EAX,byte ptr [RAX]
	00013477:XOR EAX,0x1
	0001347a:TEST AL,AL
	0001347c:JZ 0x00013483
	0001347e:CALL 0x000186cd
	00013483:MOV RAX,-0x1
	0001348a:JMP 0x0001359a
	0001348f:LEA RAX,[0x3e240]
	00013496:MOV RDX,qword ptr [RBP + -0x18]
	0001349a:MOV qword ptr [RAX],RDX
	0001349d:LEA RAX,[0x3e248]
	000134a4:MOV RDX,qword ptr [RBP + -0x10]
	000134a8:MOV qword ptr [RAX],RDX
	000134ab:MOV RAX,qword ptr [RBP + -0x20]
	000134af:LEA RDX,[RAX + 0x1]
	000134b3:MOV qword ptr [RBP + -0x20],RDX
	000134b7:MOV RDX,qword ptr [RBP + -0x18]
	000134bb:ADD RAX,RDX
	000134be:MOV EDX,dword ptr [RBP + -0x24]
	000134c1:MOV byte ptr [RAX],DL
	000134c3:CMP dword ptr [RBP + -0x24],0xa
	000134c7:JZ 0x000134e7
	000134c9:MOV RAX,qword ptr [RBP + -0x8]
	000134cd:MOV RDI,RAX
	000134d0:CALL 0x00006070
	000134d5:MOV dword ptr [RBP + -0x24],EAX
	000134d8:CMP dword ptr [RBP + -0x24],-0x1
	000134dc:JZ 0x0001356b
	000134e2:JMP 0x0001343d
	000134e7:NOP
	000134e8:MOV RAX,qword ptr [0x00040518]
	000134ef:ADD RAX,0x1
	000134f3:MOV qword ptr [0x00040518],RAX
	000134fa:MOV RAX,qword ptr [RBP + -0x18]
	000134fe:MOVZX EAX,byte ptr [RAX]
	00013501:CMP AL,0x23
	00013503:JNZ 0x00013514
	00013505:MOVZX EAX,byte ptr [RBP + -0x44]
	00013509:XOR EAX,0x1
	0001350c:TEST AL,AL
	0001350e:JNZ 0x00013349
	00013514:CMP byte ptr [RBP + -0x40],0x0
	00013518:JZ 0x00013551
	0001351a:CMP qword ptr [RBP + -0x20],0x1
	0001351f:JBE 0x00013551
	00013521:MOV RAX,qword ptr [RBP + -0x20]
	00013525:LEA RDX,[RAX + -0x2]
	00013529:MOV RAX,qword ptr [RBP + -0x18]
	0001352d:ADD RAX,RDX
	00013530:MOVZX EAX,byte ptr [RAX]
	00013533:CMP AL,0xd
	00013535:JNZ 0x00013551
	00013537:MOV RAX,qword ptr [RBP + -0x20]
	0001353b:LEA RDX,[RAX + -0x1]
	0001353f:MOV qword ptr [RBP + -0x20],RDX
	00013543:LEA RDX,[RAX + -0x2]
	00013547:MOV RAX,qword ptr [RBP + -0x18]
	0001354b:ADD RAX,RDX
	0001354e:MOV byte ptr [RAX],0xa
	00013551:MOV RDX,qword ptr [RBP + -0x18]
	00013555:MOV RAX,qword ptr [RBP + -0x20]
	00013559:ADD RAX,RDX
	0001355c:MOV byte ptr [RAX],0x0
	0001355f:MOV RAX,qword ptr [RBP + -0x20]
	00013563:JMP 0x0001359a
	00013565:NOP
	00013566:JMP 0x0001356c
	00013568:NOP
	00013569:JMP 0x0001356c
	0001356b:NOP
	0001356c:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
53: if (c != 0x20) break;
	000133ef:CMP dword ptr [RBP + -0x24],0x20
	000133f3:JZ 0x00013406
END_OF_LINE
----------------------------------------------
54: c = getc((FILE *)__stream);
	0001340d:CALL 0x00006070
END_OF_LINE
----------------------------------------------
55: if (c == -1) goto LAB_0001356c;
	00013415:CMP dword ptr [RBP + -0x24],-0x1
	00013419:JZ 0x00013568
	0001341f:CMP dword ptr [RBP + -0x24],0x2d
	00013423:JNZ 0x0001342f
	00013425:SUB dword ptr [RBP + -0x3c],0x1
	00013429:CMP dword ptr [RBP + -0x3c],0x0
	0001342d:JNS 0x000133d6
	0001342f:LEA RAX,[0x3e248]
	00013436:MOV RAX,qword ptr [RAX]
	00013439:MOV qword ptr [RBP + -0x10],RAX
	0001343d:MOV RAX,qword ptr [RBP + -0x10]
	00013441:SUB RAX,0x1
	00013445:CMP qword ptr [RBP + -0x20],RAX
	00013449:JNZ 0x000134ab
	0001344b:SHL qword ptr [RBP + -0x10],0x1
	0001344f:MOV RDX,qword ptr [RBP + -0x10]
	00013453:MOV RAX,qword ptr [RBP + -0x18]
	00013457:MOV RSI,RDX
	0001345a:MOV RDI,RAX
	0001345d:CALL 0x00005ea0
	00013462:MOV qword ptr [RBP + -0x18],RAX
	00013466:CMP qword ptr [RBP + -0x18],0x0
	0001346b:JNZ 0x0001348f
	0001346d:LEA RAX,[0x3e250]
	00013474:MOVZX EAX,byte ptr [RAX]
	00013477:XOR EAX,0x1
	0001347a:TEST AL,AL
	0001347c:JZ 0x00013483
	0001347e:CALL 0x000186cd
	00013483:MOV RAX,-0x1
	0001348a:JMP 0x0001359a
	0001348f:LEA RAX,[0x3e240]
	00013496:MOV RDX,qword ptr [RBP + -0x18]
	0001349a:MOV qword ptr [RAX],RDX
	0001349d:LEA RAX,[0x3e248]
	000134a4:MOV RDX,qword ptr [RBP + -0x10]
	000134a8:MOV qword ptr [RAX],RDX
	000134ab:MOV RAX,qword ptr [RBP + -0x20]
	000134af:LEA RDX,[RAX + 0x1]
	000134b3:MOV qword ptr [RBP + -0x20],RDX
	000134b7:MOV RDX,qword ptr [RBP + -0x18]
	000134bb:ADD RAX,RDX
	000134be:MOV EDX,dword ptr [RBP + -0x24]
	000134c1:MOV byte ptr [RAX],DL
	000134c3:CMP dword ptr [RBP + -0x24],0xa
	000134c7:JZ 0x000134e7
	000134c9:MOV RAX,qword ptr [RBP + -0x8]
	000134cd:MOV RDI,RAX
	000134d0:CALL 0x00006070
	000134d5:MOV dword ptr [RBP + -0x24],EAX
	000134d8:CMP dword ptr [RBP + -0x24],-0x1
	000134dc:JZ 0x0001356b
	000134e2:JMP 0x0001343d
	000134e7:NOP
	000134e8:MOV RAX,qword ptr [0x00040518]
	000134ef:ADD RAX,0x1
	000134f3:MOV qword ptr [0x00040518],RAX
	000134fa:MOV RAX,qword ptr [RBP + -0x18]
	000134fe:MOVZX EAX,byte ptr [RAX]
	00013501:CMP AL,0x23
	00013503:JNZ 0x00013514
	00013505:MOVZX EAX,byte ptr [RBP + -0x44]
	00013509:XOR EAX,0x1
	0001350c:TEST AL,AL
	0001350e:JNZ 0x00013349
	00013514:CMP byte ptr [RBP + -0x40],0x0
	00013518:JZ 0x00013551
	0001351a:CMP qword ptr [RBP + -0x20],0x1
	0001351f:JBE 0x00013551
	00013521:MOV RAX,qword ptr [RBP + -0x20]
	00013525:LEA RDX,[RAX + -0x2]
	00013529:MOV RAX,qword ptr [RBP + -0x18]
	0001352d:ADD RAX,RDX
	00013530:MOVZX EAX,byte ptr [RAX]
	00013533:CMP AL,0xd
	00013535:JNZ 0x00013551
	00013537:MOV RAX,qword ptr [RBP + -0x20]
	0001353b:LEA RDX,[RAX + -0x1]
	0001353f:MOV qword ptr [RBP + -0x20],RDX
	00013543:LEA RDX,[RAX + -0x2]
	00013547:MOV RAX,qword ptr [RBP + -0x18]
	0001354b:ADD RAX,RDX
	0001354e:MOV byte ptr [RAX],0xa
	00013551:MOV RDX,qword ptr [RBP + -0x18]
	00013555:MOV RAX,qword ptr [RBP + -0x20]
	00013559:ADD RAX,RDX
	0001355c:MOV byte ptr [RAX],0x0
	0001355f:MOV RAX,qword ptr [RBP + -0x20]
	00013563:JMP 0x0001359a
	00013565:NOP
	00013566:JMP 0x0001356c
	00013568:NOP
	00013569:JMP 0x0001356c
	0001356b:NOP
	0001356c:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
57: i = 1;
	000133f5:MOV qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
58: *pcVar2 = '-';
	00013401:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
59: LAB_0001342f:
	0001342f:LEA RAX,[0x3e248]
END_OF_LINE
----------------------------------------------
60: s = bufsize;
	00013439:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
61: while( true ) {
	000134c7:JZ 0x000134e7
END_OF_LINE
----------------------------------------------
62: pcVar2 = buf;
	00013449:JNZ 0x000134ab
END_OF_LINE
----------------------------------------------
63: sVar3 = bufsize;
	00013449:JNZ 0x000134ab
END_OF_LINE
----------------------------------------------
64: if (i == s - 1) {
	00013441:SUB RAX,0x1
	00013445:CMP qword ptr [RBP + -0x20],RAX
	00013449:JNZ 0x000134ab
END_OF_LINE
----------------------------------------------
65: s = s << 1;
	0001344b:SHL qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
66: b = (char *)realloc(b,s);
	0001345d:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
67: pcVar2 = b;
	0001346b:JNZ 0x0001348f
END_OF_LINE
----------------------------------------------
68: sVar3 = s;
	0001346b:JNZ 0x0001348f
END_OF_LINE
----------------------------------------------
69: if (b == (char *)0x0) {
	00013466:CMP qword ptr [RBP + -0x18],0x0
	0001346b:JNZ 0x0001348f
END_OF_LINE
----------------------------------------------
70: if (using_plan_a == true) {
	0001347a:TEST AL,AL
	0001347c:JZ 0x00013483
END_OF_LINE
----------------------------------------------
71: return 0xffffffffffffffff;
	0001359a:LEAVE
	0001359b:RET
END_OF_LINE
----------------------------------------------
74: xalloc_die();
	0001347e:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
77: bufsize = sVar3;
	000134ab:MOV RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
78: buf = pcVar2;
	000134ab:MOV RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
79: uVar1 = i + 1;
	000134af:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
80: b[i] = (char)c;
	000134bb:ADD RAX,RDX
	000134be:MOV EDX,dword ptr [RBP + -0x24]
	000134c1:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
81: if (c == 10) break;
	000134c3:CMP dword ptr [RBP + -0x24],0xa
	000134c7:JZ 0x000134e7
END_OF_LINE
----------------------------------------------
82: c = getc((FILE *)__stream);
	000134d0:CALL 0x00006070
END_OF_LINE
----------------------------------------------
83: i = uVar1;
	000134dc:JZ 0x0001356b
END_OF_LINE
----------------------------------------------
84: if (c == -1) {
	000134d8:CMP dword ptr [RBP + -0x24],-0x1
	000134dc:JZ 0x0001356b
END_OF_LINE
----------------------------------------------
85: LAB_0001356c:
	0001356c:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
86: iVar4 = ferror((FILE *)__stream);
	00013573:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
87: if (iVar4 == 0) {
	00013578:TEST EAX,EAX
	0001357a:JZ 0x00013581
END_OF_LINE
----------------------------------------------
88: say("patch unexpectedly ends in middle of line\n");
	00013590:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
89: return 0;
	0001359a:LEAVE
	0001359b:RET
END_OF_LINE
----------------------------------------------
92: read_fatal();
	0001357c:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
95: p_input_line = p_input_line + 1;
	000134ef:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
96: if ((*b != '#') || (pass_comments_through)) {
	000134fe:MOVZX EAX,byte ptr [RAX]
	00013501:CMP AL,0x23
	00013503:JNZ 0x00013514
	00013505:MOVZX EAX,byte ptr [RBP + -0x44]
	00013509:XOR EAX,0x1
	0001350c:TEST AL,AL
	0001350e:JNZ 0x00013349
END_OF_LINE
----------------------------------------------
97: if ((strip_trailing_cr) && ((1 < uVar1 && (b[i - 1] == '\r')))) {
	00013518:JZ 0x00013551
	0001351a:CMP qword ptr [RBP + -0x20],0x1
	0001351f:JBE 0x00013551
	00013521:MOV RAX,qword ptr [RBP + -0x20]
	00013525:LEA RDX,[RAX + -0x2]
	00013529:MOV RAX,qword ptr [RBP + -0x18]
	0001352d:ADD RAX,RDX
	00013530:MOVZX EAX,byte ptr [RAX]
	00013533:CMP AL,0xd
	00013535:JNZ 0x00013551
END_OF_LINE
----------------------------------------------
98: b[i - 1] = '\n';
	00013543:LEA RDX,[RAX + -0x2]
	00013547:MOV RAX,qword ptr [RBP + -0x18]
	0001354b:ADD RAX,RDX
	0001354e:MOV byte ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
99: uVar1 = i;
	0001354e:MOV byte ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
101: i = uVar1;
	00013551:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
102: b[i] = '\0';
	00013559:ADD RAX,RDX
	0001355c:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
103: return i;
	0001359a:LEAVE
	0001359b:RET
END_OF_LINE



Function: incomplete_line
----------------------------------------------
15: __stream = pfp;
	000135a0:PUSH RBP
END_OF_LINE
----------------------------------------------
16: offset = ftell((FILE *)pfp);
	000135ba:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
17: iVar2 = getc((FILE *)__stream);
	000135ca:CALL 0x00006070
END_OF_LINE
----------------------------------------------
18: if (iVar2 == 0x5c) {
	000135cf:CMP EAX,0x5c
	000135d2:JNZ 0x000135f7
END_OF_LINE
----------------------------------------------
20: iVar2 = getc((FILE *)__stream);
	000135dc:CALL 0x00006070
END_OF_LINE
----------------------------------------------
21: if (iVar2 == 10) break;
	000135e4:CMP dword ptr [RBP + -0x14],0xa
	000135e8:JZ 0x000135f0
END_OF_LINE
----------------------------------------------
22: } while (iVar2 != -1);
	000135ea:CMP dword ptr [RBP + -0x14],-0x1
	000135ee:JNZ 0x000135d5
END_OF_LINE
----------------------------------------------
23: _Var1 = true;
	000135f0:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
26: Fseek(pfp,offset,0);
	0001360d:CALL 0x00019ceb
END_OF_LINE
----------------------------------------------
27: _Var1 = false;
	00013612:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
29: return _Var1;
	00013618:RET
END_OF_LINE



Function: pch_swap
----------------------------------------------
22: __ptr_01 = p_Char;
	0001361d:PUSH RBP
END_OF_LINE
----------------------------------------------
23: __ptr_00 = p_len;
	0001361d:PUSH RBP
END_OF_LINE
----------------------------------------------
24: __ptr = p_line;
	0001361d:PUSH RBP
END_OF_LINE
----------------------------------------------
25: lVar2 = p_first;
	0001361d:PUSH RBP
END_OF_LINE
----------------------------------------------
26: p_first = p_newfirst;
	0001363b:MOV qword ptr [0x000404e0],RAX
END_OF_LINE
----------------------------------------------
27: p_newfirst = lVar2;
	00013646:MOV qword ptr [0x000404e8],RAX
END_OF_LINE
----------------------------------------------
28: p_line = (char **)0x0;
	0001366e:MOV qword ptr [0x00040520],0x0
END_OF_LINE
----------------------------------------------
29: p_len = (size_t *)0x0;
	00013679:MOV qword ptr [0x00040528],0x0
END_OF_LINE
----------------------------------------------
30: p_Char = (char *)0x0;
	00013684:MOV qword ptr [0x00040530],0x0
END_OF_LINE
----------------------------------------------
31: set_hunkmax();
	0001368f:CALL 0x0000cd1c
END_OF_LINE
----------------------------------------------
32: if (((p_line == (char **)0x0) || (p_len == (size_t *)0x0)) || (p_Char == (char *)0x0)) {
	0001369b:TEST RAX,RAX
	0001369e:JZ 0x000136b8
	000136a0:MOV RAX,qword ptr [0x00040528]
	000136a7:TEST RAX,RAX
	000136aa:JZ 0x000136b8
	000136ac:MOV RAX,qword ptr [0x00040530]
	000136b3:TEST RAX,RAX
	000136b6:JNZ 0x00013710
END_OF_LINE
----------------------------------------------
33: free(p_line);
	000136c2:CALL 0x00005860
END_OF_LINE
----------------------------------------------
34: p_line = __ptr;
	000136dc:CALL 0x00005860
END_OF_LINE
----------------------------------------------
35: free(p_len);
	000136dc:CALL 0x00005860
END_OF_LINE
----------------------------------------------
36: p_len = __ptr_00;
	000136f6:CALL 0x00005860
END_OF_LINE
----------------------------------------------
37: free(p_Char);
	000136f6:CALL 0x00005860
END_OF_LINE
----------------------------------------------
38: _Var3 = false;
	00013706:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
39: p_Char = __ptr_01;
	0001370b:JMP 0x00013b2e
END_OF_LINE
----------------------------------------------
42: i = p_ptrn_lines + 1;
	00013717:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
43: cVar1 = __ptr_01[i];
	00013727:ADD RAX,RDX
	0001372a:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
44: if (cVar1 == '\n') {
	0001372d:CMP AL,0xa
	0001372f:JNZ 0x0001373a
END_OF_LINE
----------------------------------------------
45: i = p_ptrn_lines + 2;
	00013735:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
47: if (-1 < p_efake) {
	00013741:TEST RAX,RAX
	00013744:JS 0x0001379f
END_OF_LINE
----------------------------------------------
48: if (i < p_efake) {
	00013751:JL 0x0001376a
END_OF_LINE
----------------------------------------------
49: n = -i;
	0001376e:NEG RAX
END_OF_LINE
----------------------------------------------
52: n = p_end - p_ptrn_lines;
	00013761:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
54: p_efake = n + p_efake;
	00013780:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
55: p_bfake = n + p_bfake;
	00013795:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
57: n = 0;
	0001379f:MOV qword ptr [RBP + -0x28],0x0
END_OF_LINE
----------------------------------------------
58: for (; i <= p_end; i = i + 1) {
	00013846:ADD qword ptr [RBP + -0x30],0x1
	0001384b:ADD qword ptr [RBP + -0x28],0x1
	00013850:MOV RAX,qword ptr [0x0003e040]
	00013857:CMP qword ptr [RBP + -0x30],RAX
	0001385b:JLE 0x000137ac
END_OF_LINE
----------------------------------------------
59: p_line[n] = __ptr[i];
	000137bc:ADD RAX,RDX
	000137bf:MOV RCX,qword ptr [0x00040520]
	000137c6:MOV RDX,qword ptr [RBP + -0x28]
	000137ca:SHL RDX,0x3
	000137ce:ADD RDX,RCX
	000137d1:MOV RAX,qword ptr [RAX]
	000137d4:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
60: p_Char[n] = __ptr_01[i];
	000137df:ADD RAX,RDX
	000137e2:MOV RCX,qword ptr [0x00040530]
	000137e9:MOV RDX,qword ptr [RBP + -0x28]
	000137ed:ADD RDX,RCX
	000137f0:MOVZX EAX,byte ptr [RAX]
	000137f3:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
61: if (p_Char[n] == '+') {
	00013800:ADD RAX,RDX
	00013803:MOVZX EAX,byte ptr [RAX]
	00013806:CMP AL,0x2b
	00013808:JNZ 0x0001381b
END_OF_LINE
----------------------------------------------
62: p_Char[n] = '-';
	00013815:ADD RAX,RDX
	00013818:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
64: p_len[n] = __ptr_00[i];
	0001382b:ADD RAX,RDX
	0001382e:MOV RCX,qword ptr [0x00040528]
	00013835:MOV RDX,qword ptr [RBP + -0x28]
	00013839:SHL RDX,0x3
	0001383d:ADD RDX,RCX
	00013840:MOV RAX,qword ptr [RAX]
	00013843:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
65: n = n + 1;
	0001384b:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
67: if (cVar1 == '\n') {
	0001372d:CMP AL,0xa
	0001372f:JNZ 0x0001373a
	00013731:MOV byte ptr [RBP + -0x31],0x1
	00013735:ADD qword ptr [RBP + -0x30],0x1
	0001373a:MOV RAX,qword ptr [0x0003e050]
	00013741:TEST RAX,RAX
	00013744:JS 0x0001379f
	00013746:MOV RAX,qword ptr [0x0003e050]
	0001374d:CMP qword ptr [RBP + -0x30],RAX
	00013751:JL 0x0001376a
	00013753:MOV RAX,qword ptr [0x0003e040]
	0001375a:MOV RDX,qword ptr [0x000404f0]
	00013761:SUB RAX,RDX
	00013764:MOV qword ptr [RBP + -0x28],RAX
	00013768:JMP 0x00013775
	0001376a:MOV RAX,qword ptr [RBP + -0x30]
	0001376e:NEG RAX
	00013771:MOV qword ptr [RBP + -0x28],RAX
	00013775:MOV RDX,qword ptr [0x0003e050]
	0001377c:MOV RAX,qword ptr [RBP + -0x28]
	00013780:ADD RAX,RDX
	00013783:MOV qword ptr [0x0003e050],RAX
	0001378a:MOV RDX,qword ptr [0x0003e058]
	00013791:MOV RAX,qword ptr [RBP + -0x28]
	00013795:ADD RAX,RDX
	00013798:MOV qword ptr [0x0003e058],RAX
	0001379f:MOV qword ptr [RBP + -0x28],0x0
	000137a7:JMP 0x00013850
	000137ac:MOV RAX,qword ptr [RBP + -0x30]
	000137b0:LEA RDX,[RAX*0x8]
	000137b8:MOV RAX,qword ptr [RBP + -0x18]
	000137bc:ADD RAX,RDX
	000137bf:MOV RCX,qword ptr [0x00040520]
	000137c6:MOV RDX,qword ptr [RBP + -0x28]
	000137ca:SHL RDX,0x3
	000137ce:ADD RDX,RCX
	000137d1:MOV RAX,qword ptr [RAX]
	000137d4:MOV qword ptr [RDX],RAX
	000137d7:MOV RDX,qword ptr [RBP + -0x30]
	000137db:MOV RAX,qword ptr [RBP + -0x8]
	000137df:ADD RAX,RDX
	000137e2:MOV RCX,qword ptr [0x00040530]
	000137e9:MOV RDX,qword ptr [RBP + -0x28]
	000137ed:ADD RDX,RCX
	000137f0:MOVZX EAX,byte ptr [RAX]
	000137f3:MOV byte ptr [RDX],AL
	000137f5:MOV RDX,qword ptr [0x00040530]
	000137fc:MOV RAX,qword ptr [RBP + -0x28]
	00013800:ADD RAX,RDX
	00013803:MOVZX EAX,byte ptr [RAX]
	00013806:CMP AL,0x2b
	00013808:JNZ 0x0001381b
	0001380a:MOV RDX,qword ptr [0x00040530]
	00013811:MOV RAX,qword ptr [RBP + -0x28]
	00013815:ADD RAX,RDX
	00013818:MOV byte ptr [RAX],0x2d
	0001381b:MOV RAX,qword ptr [RBP + -0x30]
	0001381f:LEA RDX,[RAX*0x8]
	00013827:MOV RAX,qword ptr [RBP + -0x10]
	0001382b:ADD RAX,RDX
	0001382e:MOV RCX,qword ptr [0x00040528]
	00013835:MOV RDX,qword ptr [RBP + -0x28]
	00013839:SHL RDX,0x3
	0001383d:ADD RDX,RCX
	00013840:MOV RAX,qword ptr [RAX]
	00013843:MOV qword ptr [RDX],RAX
	00013846:ADD qword ptr [RBP + -0x30],0x1
	0001384b:ADD qword ptr [RBP + -0x28],0x1
	00013850:MOV RAX,qword ptr [0x0003e040]
	00013857:CMP qword ptr [RBP + -0x30],RAX
	0001385b:JLE 0x000137ac
	00013861:CMP byte ptr [RBP + -0x31],0x0
	00013865:JZ 0x000138f3
END_OF_LINE
----------------------------------------------
68: lVar4 = p_ptrn_lines + 1;
	00013872:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
69: p_line[n] = __ptr[lVar4];
	0001388a:ADD RAX,RDX
	0001388d:MOV RCX,qword ptr [0x00040520]
	00013894:MOV RDX,qword ptr [RBP + -0x28]
	00013898:SHL RDX,0x3
	0001389c:ADD RDX,RCX
	0001389f:MOV RAX,qword ptr [RAX]
	000138a2:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
70: p_Char[n] = __ptr_01[lVar4];
	000138ad:ADD RAX,RDX
	000138b0:MOV RCX,qword ptr [0x00040530]
	000138b7:MOV RDX,qword ptr [RBP + -0x28]
	000138bb:ADD RDX,RCX
	000138be:MOVZX EAX,byte ptr [RAX]
	000138c1:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
71: p_len[n] = __ptr_00[lVar4];
	000138d3:ADD RAX,RDX
	000138d6:MOV RCX,qword ptr [0x00040528]
	000138dd:MOV RDX,qword ptr [RBP + -0x28]
	000138e1:SHL RDX,0x3
	000138e5:ADD RDX,RCX
	000138e8:MOV RAX,qword ptr [RAX]
	000138eb:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
72: n = n + 1;
	000138ee:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
74: if (*p_Char != '=') {
	000138fa:MOVZX EAX,byte ptr [RAX]
	000138fd:CMP AL,0x3d
	000138ff:JZ 0x00013929
END_OF_LINE
----------------------------------------------
76: __assert_fail("p_Char[0] == \'=\'","pch.c",0x861,"pch_swap");
	00013924:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
78: *p_Char = '*';
	00013930:MOV byte ptr [RAX],0x2a
END_OF_LINE
----------------------------------------------
79: for (s = *p_line; *s != '\0'; s = s + 1) {
	0001393a:MOV RAX,qword ptr [RAX]
	0001393d:MOV qword ptr [RBP + -0x20],RAX
	00013941:JMP 0x0001395a
	00013943:MOV RAX,qword ptr [RBP + -0x20]
	00013947:MOVZX EAX,byte ptr [RAX]
	0001394a:CMP AL,0x2d
	0001394c:JNZ 0x00013955
	0001394e:MOV RAX,qword ptr [RBP + -0x20]
	00013952:MOV byte ptr [RAX],0x2a
	00013955:ADD qword ptr [RBP + -0x20],0x1
	0001395a:MOV RAX,qword ptr [RBP + -0x20]
	0001395e:MOVZX EAX,byte ptr [RAX]
	00013961:TEST AL,AL
	00013963:JNZ 0x00013943
END_OF_LINE
----------------------------------------------
80: if (*s == '-') {
	00013947:MOVZX EAX,byte ptr [RAX]
	0001394a:CMP AL,0x2d
	0001394c:JNZ 0x00013955
END_OF_LINE
----------------------------------------------
81: *s = '*';
	00013952:MOV byte ptr [RAX],0x2a
END_OF_LINE
----------------------------------------------
84: if (*__ptr_01 != '*') {
	00013969:MOVZX EAX,byte ptr [RAX]
	0001396c:CMP AL,0x2a
	0001396e:JZ 0x00013998
END_OF_LINE
----------------------------------------------
86: __assert_fail("tp_char[0] == \'*\'","pch.c",0x869,"pch_swap");
	00013993:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
88: *__ptr_01 = '=';
	0001399c:MOV byte ptr [RAX],0x3d
END_OF_LINE
----------------------------------------------
89: for (s = *__ptr; *s != '\0'; s = s + 1) {
	000139a3:MOV RAX,qword ptr [RAX]
	000139a6:MOV qword ptr [RBP + -0x20],RAX
	000139aa:JMP 0x000139c3
	000139ac:MOV RAX,qword ptr [RBP + -0x20]
	000139b0:MOVZX EAX,byte ptr [RAX]
	000139b3:CMP AL,0x2a
	000139b5:JNZ 0x000139be
	000139b7:MOV RAX,qword ptr [RBP + -0x20]
	000139bb:MOV byte ptr [RAX],0x2d
	000139be:ADD qword ptr [RBP + -0x20],0x1
	000139c3:MOV RAX,qword ptr [RBP + -0x20]
	000139c7:MOVZX EAX,byte ptr [RAX]
	000139ca:TEST AL,AL
	000139cc:JNZ 0x000139ac
END_OF_LINE
----------------------------------------------
90: if (*s == '*') {
	000139b0:MOVZX EAX,byte ptr [RAX]
	000139b3:CMP AL,0x2a
	000139b5:JNZ 0x000139be
END_OF_LINE
----------------------------------------------
91: *s = '-';
	000139bb:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
94: i = 0;
	000139ce:MOV qword ptr [RBP + -0x30],0x0
END_OF_LINE
----------------------------------------------
95: for (; lVar2 = p_ptrn_lines, n <= p_end; n = n + 1) {
	00013a7a:ADD qword ptr [RBP + -0x28],0x1
	00013a7f:MOV RAX,qword ptr [0x0003e040]
	00013a86:CMP qword ptr [RBP + -0x28],RAX
	00013a8a:JLE 0x000139db
END_OF_LINE
----------------------------------------------
96: p_line[n] = __ptr[i];
	000139eb:ADD RAX,RDX
	000139ee:MOV RCX,qword ptr [0x00040520]
	000139f5:MOV RDX,qword ptr [RBP + -0x28]
	000139f9:SHL RDX,0x3
	000139fd:ADD RDX,RCX
	00013a00:MOV RAX,qword ptr [RAX]
	00013a03:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
97: p_Char[n] = __ptr_01[i];
	00013a0e:ADD RAX,RDX
	00013a11:MOV RCX,qword ptr [0x00040530]
	00013a18:MOV RDX,qword ptr [RBP + -0x28]
	00013a1c:ADD RDX,RCX
	00013a1f:MOVZX EAX,byte ptr [RAX]
	00013a22:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
98: if (p_Char[n] == '-') {
	00013a2f:ADD RAX,RDX
	00013a32:MOVZX EAX,byte ptr [RAX]
	00013a35:CMP AL,0x2d
	00013a37:JNZ 0x00013a4a
END_OF_LINE
----------------------------------------------
99: p_Char[n] = '+';
	00013a44:ADD RAX,RDX
	00013a47:MOV byte ptr [RAX],0x2b
END_OF_LINE
----------------------------------------------
101: p_len[n] = __ptr_00[i];
	00013a5a:ADD RAX,RDX
	00013a5d:MOV RCX,qword ptr [0x00040528]
	00013a64:MOV RDX,qword ptr [RBP + -0x28]
	00013a68:SHL RDX,0x3
	00013a6c:ADD RDX,RCX
	00013a6f:MOV RAX,qword ptr [RAX]
	00013a72:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
102: i = i + 1;
	00013a75:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
104: if (i != p_ptrn_lines + 1) {
	00013a97:ADD RAX,0x1
	00013a9b:CMP qword ptr [RBP + -0x30],RAX
	00013a9f:JZ 0x00013ac9
END_OF_LINE
----------------------------------------------
106: __assert_fail("i == p_ptrn_lines + 1","pch.c",0x875,"pch_swap");
	00013ac4:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
108: p_ptrn_lines = p_repl_lines;
	00013adb:MOV qword ptr [0x000404f0],RAX
END_OF_LINE
----------------------------------------------
109: p_repl_lines = lVar2;
	00013ae6:MOV qword ptr [0x000404f8],RAX
END_OF_LINE
----------------------------------------------
110: p_Char[p_end + 1] = '^';
	00013afb:ADD RAX,0x1
	00013aff:ADD RAX,RDX
	00013b02:MOV byte ptr [RAX],0x5e
END_OF_LINE
----------------------------------------------
111: free(__ptr);
	00013b0c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
112: free(__ptr_00);
	00013b18:CALL 0x00005860
END_OF_LINE
----------------------------------------------
113: free(__ptr_01);
	00013b24:CALL 0x00005860
END_OF_LINE
----------------------------------------------
114: _Var3 = true;
	00013b29:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
116: return _Var3;
	00013b2f:RET
END_OF_LINE



Function: pch_says_nonexistent
----------------------------------------------
7: return p_says_nonexistent[(int)(uint)which];
	00013b41:CDQE
	00013b43:LEA RDX,[RAX*0x4]
	00013b4b:LEA RAX,[0x40470]
	00013b52:MOV EAX,dword ptr [RDX + RAX*0x1]
	00013b55:POP RBP
	00013b56:RET
END_OF_LINE



Function: pch_name
----------------------------------------------
8: if (type == NONE) {
	00013b62:CMP dword ptr [RBP + -0x4],0x3
	00013b66:JZ 0x00013b80
END_OF_LINE
----------------------------------------------
9: pcVar1 = (char *)0x0;
	00013b80:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
12: pcVar1 = p_name[type];
	00013b68:MOV EAX,dword ptr [RBP + -0x4]
	00013b6b:LEA RDX,[RAX*0x8]
	00013b73:LEA RAX,[0x40480]
	00013b7a:MOV RAX,qword ptr [RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
14: return pcVar1;
	00013b86:RET
END_OF_LINE



Function: pch_copy
----------------------------------------------
9: if ((p_copy[0]) && (p_copy[1])) {
	00013b9b:JZ 0x00013bb3
	00013b9d:LEA RAX,[0x40460]
	00013ba4:MOVZX EAX,byte ptr [RAX + 0x1]
	00013ba8:TEST AL,AL
	00013baa:JZ 0x00013bb3
END_OF_LINE
----------------------------------------------
10: _Var1 = true;
	00013bac:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
13: _Var1 = false;
	00013bb3:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: return _Var1;
	00013bbc:RET
END_OF_LINE



Function: pch_rename
----------------------------------------------
9: if ((p_rename[0]) && (p_rename[1])) {
	00013bd1:JZ 0x00013be9
	00013bd3:LEA RAX,[0x40462]
	00013bda:MOVZX EAX,byte ptr [RAX + 0x1]
	00013bde:TEST AL,AL
	00013be0:JZ 0x00013be9
END_OF_LINE
----------------------------------------------
10: _Var1 = true;
	00013be2:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
13: _Var1 = false;
	00013be9:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: return _Var1;
	00013bf2:RET
END_OF_LINE



Function: pch_first
----------------------------------------------
7: return p_first;
	00013bfb:MOV RAX,qword ptr [0x000404e0]
	00013c02:POP RBP
	00013c03:RET
END_OF_LINE



Function: pch_ptrn_lines
----------------------------------------------
7: return p_ptrn_lines;
	00013c0c:MOV RAX,qword ptr [0x000404f0]
	00013c13:POP RBP
	00013c14:RET
END_OF_LINE



Function: pch_newfirst
----------------------------------------------
7: return p_newfirst;
	00013c1d:MOV RAX,qword ptr [0x000404e8]
	00013c24:POP RBP
	00013c25:RET
END_OF_LINE



Function: pch_repl_lines
----------------------------------------------
7: return p_repl_lines;
	00013c2e:MOV RAX,qword ptr [0x000404f8]
	00013c35:POP RBP
	00013c36:RET
END_OF_LINE



Function: pch_end
----------------------------------------------
7: return p_end;
	00013c3f:MOV RAX,qword ptr [0x0003e040]
	00013c46:POP RBP
	00013c47:RET
END_OF_LINE



Function: pch_prefix_context
----------------------------------------------
7: return p_prefix_context;
	00013c50:MOV RAX,qword ptr [0x00040508]
	00013c57:POP RBP
	00013c58:RET
END_OF_LINE



Function: pch_suffix_context
----------------------------------------------
7: return p_suffix_context;
	00013c61:MOV RAX,qword ptr [0x00040510]
	00013c68:POP RBP
	00013c69:RET
END_OF_LINE



Function: pch_line_len
----------------------------------------------
7: return p_len[line];
	00013c85:ADD RAX,RDX
	00013c88:MOV RAX,qword ptr [RAX]
	00013c8b:POP RBP
	00013c8c:RET
END_OF_LINE



Function: pch_char
----------------------------------------------
7: return p_Char[line];
	00013ca4:ADD RAX,RDX
	00013ca7:MOVZX EAX,byte ptr [RAX]
	00013caa:POP RBP
	00013cab:RET
END_OF_LINE



Function: pfetch
----------------------------------------------
7: return p_line[line];
	00013cc7:ADD RAX,RDX
	00013cca:MOV RAX,qword ptr [RAX]
	00013ccd:POP RBP
	00013cce:RET
END_OF_LINE



Function: pch_write_line
----------------------------------------------
11: if ((p_len[line] == 0) || (p_line[line][p_len[line] - 1] != '\n')) {
	00013cf2:ADD RAX,RDX
	00013cf5:MOV RAX,qword ptr [RAX]
	00013cf8:TEST RAX,RAX
	00013cfb:JZ 0x00013d3c
	00013cfd:MOV RDX,qword ptr [0x00040520]
	00013d04:MOV RAX,qword ptr [RBP + -0x18]
	00013d08:SHL RAX,0x3
	00013d0c:ADD RAX,RDX
	00013d0f:MOV RDX,qword ptr [RAX]
	00013d12:MOV RCX,qword ptr [0x00040528]
	00013d19:MOV RAX,qword ptr [RBP + -0x18]
	00013d1d:SHL RAX,0x3
	00013d21:ADD RAX,RCX
	00013d24:MOV RAX,qword ptr [RAX]
	00013d27:SUB RAX,0x1
	00013d2b:ADD RAX,RDX
	00013d2e:MOVZX EAX,byte ptr [RAX]
	00013d31:CMP AL,0xa
	00013d33:JNZ 0x00013d3c
END_OF_LINE
----------------------------------------------
12: _Var1 = false;
	00013d3c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: _Var1 = true;
	00013d35:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
17: sVar2 = fwrite(p_line[line],1,p_len[line],(FILE *)file);
	00013d57:ADD RAX,RDX
	00013d5a:MOV RDX,qword ptr [RAX]
	00013d5d:MOV RCX,qword ptr [0x00040520]
	00013d64:MOV RAX,qword ptr [RBP + -0x18]
	00013d68:SHL RAX,0x3
	00013d6c:ADD RAX,RCX
	00013d6f:MOV RAX,qword ptr [RAX]
	00013d72:MOV RCX,qword ptr [RBP + -0x20]
	00013d76:MOV ESI,0x1
	00013d7b:MOV RDI,RAX
	00013d7e:CALL 0x00006010
END_OF_LINE
----------------------------------------------
18: if (sVar2 < p_len[line]) {
	00013d92:ADD RDX,RCX
	00013d95:MOV RDX,qword ptr [RDX]
	00013d98:CMP RAX,RDX
	00013d9b:JNC 0x00013da2
END_OF_LINE
----------------------------------------------
20: write_fatal();
	00013d9d:CALL 0x00018705
END_OF_LINE
----------------------------------------------
22: return _Var1;
	00013da7:RET
END_OF_LINE



Function: pch_hunk_beg
----------------------------------------------
7: return p_hunk_beg;
	00013db0:MOV RAX,qword ptr [0x00040568]
	00013db7:POP RBP
	00013db8:RET
END_OF_LINE



Function: pch_c_function
----------------------------------------------
7: return p_c_function;
	00013dc1:MOV RAX,qword ptr [0x00040570]
	00013dc8:POP RBP
	00013dc9:RET
END_OF_LINE



Function: pch_git_diff
----------------------------------------------
7: return p_git_diff;
	00013dda:RET
END_OF_LINE



Function: pch_timestr
----------------------------------------------
7: return p_timestr[(int)(uint)which];
	00013dec:CDQE
	00013dee:LEA RDX,[RAX*0x8]
	00013df6:LEA RAX,[0x404b0]
	00013dfd:MOV RAX,qword ptr [RDX + RAX*0x1]
	00013e01:POP RBP
	00013e02:RET
END_OF_LINE



Function: pch_sha1
----------------------------------------------
7: return p_sha1[(int)(uint)which];
	00013e14:CDQE
	00013e16:LEA RDX,[RAX*0x8]
	00013e1e:LEA RAX,[0x404c0]
	00013e25:MOV RAX,qword ptr [RDX + RAX*0x1]
	00013e29:POP RBP
	00013e2a:RET
END_OF_LINE



Function: pch_mode
----------------------------------------------
7: return p_mode[(int)(uint)which];
	00013e3c:CDQE
	00013e3e:LEA RDX,[RAX*0x4]
	00013e46:LEA RAX,[0x404d0]
	00013e4d:MOV EAX,dword ptr [RDX + RAX*0x1]
	00013e50:POP RBP
	00013e51:RET
END_OF_LINE



Function: get_ed_command_letter
----------------------------------------------
14: bVar2 = false;
	00013e6a:MOV byte ptr [RBP + -0xa],0x0
END_OF_LINE
----------------------------------------------
15: pcVar1 = line;
	00013e7e:JA 0x00013ee0
END_OF_LINE
----------------------------------------------
16: if ((int)*line - 0x30U < 10) {
	00013e72:MOVZX EAX,byte ptr [RAX]
	00013e75:MOVSX EAX,AL
	00013e78:SUB EAX,0x30
	00013e7b:CMP EAX,0x9
	00013e7e:JA 0x00013ee0
END_OF_LINE
----------------------------------------------
18: p = pcVar1;
	00013e81:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
19: pcVar1 = p + 1;
	00013e81:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
20: } while ((int)*pcVar1 - 0x30U < 10);
	00013e8a:MOVZX EAX,byte ptr [RAX]
	00013e8d:MOVSX EAX,AL
	00013e90:SUB EAX,0x30
	00013e93:CMP EAX,0x9
	00013e96:JBE 0x00013e81
END_OF_LINE
----------------------------------------------
21: if (*pcVar1 == ',') {
	00013e9c:MOVZX EAX,byte ptr [RAX]
	00013e9f:CMP AL,0x2c
	00013ea1:JNZ 0x00013ee0
END_OF_LINE
----------------------------------------------
22: p = p + 2;
	00013ea3:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
23: if (9 < (int)*p - 0x30U) {
	00013eac:MOVZX EAX,byte ptr [RAX]
	00013eaf:MOVSX EAX,AL
	00013eb2:SUB EAX,0x30
	00013eb5:CMP EAX,0x9
	00013eb8:JBE 0x00013ec4
END_OF_LINE
----------------------------------------------
24: return '\0';
	00013f94:RET
END_OF_LINE
----------------------------------------------
27: p = p + 1;
	00013ec5:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
28: } while ((int)*p - 0x30U < 10);
	00013ece:MOVZX EAX,byte ptr [RAX]
	00013ed1:MOVSX EAX,AL
	00013ed4:SUB EAX,0x30
	00013ed7:CMP EAX,0x9
	00013eda:JBE 0x00013ec5
END_OF_LINE
----------------------------------------------
29: bVar2 = true;
	00013edc:MOV byte ptr [RBP + -0xa],0x1
END_OF_LINE
----------------------------------------------
30: pcVar1 = p;
	00013edc:MOV byte ptr [RBP + -0xa],0x1
END_OF_LINE
----------------------------------------------
33: p = pcVar1;
	00013ee0:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
34: pcVar1 = p + 1;
	00013ee4:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
35: cVar3 = *p;
	00013eec:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
36: iVar4 = (int)cVar3;
	00013ef2:MOVSX EAX,byte ptr [RBP + -0x9]
END_OF_LINE
----------------------------------------------
37: if (iVar4 == 0x73) {
	00013ef6:CMP EAX,0x73
	00013ef9:JZ 0x00013f2b
END_OF_LINE
----------------------------------------------
38: iVar4 = strncmp(pcVar1,"/.//",4);
	00013f41:CALL 0x00005920
END_OF_LINE
----------------------------------------------
39: if (iVar4 != 0) {
	00013f46:TEST EAX,EAX
	00013f48:JZ 0x00013f51
END_OF_LINE
----------------------------------------------
40: return '\0';
	00013f94:RET
END_OF_LINE
----------------------------------------------
42: p = p + 5;
	00013f51:ADD qword ptr [RBP + -0x8],0x4
	00013f56:JMP 0x00013f60
END_OF_LINE
----------------------------------------------
43: LAB_00013f67:
	00013f67:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
44: for (; (*p == ' ' || (*p == '\t')); p = p + 1) {
	00013f62:ADD qword ptr [RBP + -0x8],0x1
	00013f67:MOV RAX,qword ptr [RBP + -0x8]
	00013f6b:MOVZX EAX,byte ptr [RAX]
	00013f6e:CMP AL,0x20
	00013f70:JZ 0x00013f62
	00013f72:MOV RAX,qword ptr [RBP + -0x8]
	00013f76:MOVZX EAX,byte ptr [RAX]
	00013f79:CMP AL,0x9
	00013f7b:JZ 0x00013f62
END_OF_LINE
----------------------------------------------
46: if (*p != '\n') {
	00013f81:MOVZX EAX,byte ptr [RAX]
	00013f84:CMP AL,0xa
	00013f86:JNZ 0x00013f8e
END_OF_LINE
----------------------------------------------
47: cVar3 = '\0';
	00013f8e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
51: if (iVar4 < 0x74) {
	00013efe:JG 0x00013f58
END_OF_LINE
----------------------------------------------
52: p = pcVar1;
	00013f03:JZ 0x00013f1e
END_OF_LINE
----------------------------------------------
53: if (iVar4 == 0x69) {
	00013f00:CMP EAX,0x69
	00013f03:JZ 0x00013f1e
END_OF_LINE
----------------------------------------------
54: LAB_00013f1e:
	00013f1e:CMP byte ptr [RBP + -0xa],0x0
END_OF_LINE
----------------------------------------------
55: if (bVar2) {
	00013f22:JZ 0x00013f5f
END_OF_LINE
----------------------------------------------
56: return '\0';
	00013f94:RET
END_OF_LINE
----------------------------------------------
58: goto LAB_00013f67;
	00013f67:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
60: if (iVar4 < 0x6a) {
	00013f08:JG 0x00013f58
END_OF_LINE
----------------------------------------------
61: if (iVar4 == 0x61) goto LAB_00013f1e;
	00013f0a:CMP EAX,0x61
	00013f0d:JZ 0x00013f1e
	00013f0f:CMP EAX,0x61
	00013f12:JL 0x00013f58
	00013f14:SUB EAX,0x63
	00013f17:CMP EAX,0x1
	00013f1a:JA 0x00013f58
	00013f1c:JMP 0x00013f60
	00013f1e:CMP byte ptr [RBP + -0xa],0x0
END_OF_LINE
----------------------------------------------
62: if ((0x60 < iVar4) && (iVar4 - 99U < 2)) goto LAB_00013f67;
	00013f12:JL 0x00013f58
	00013f14:SUB EAX,0x63
	00013f17:CMP EAX,0x1
	00013f1a:JA 0x00013f58
	00013f1c:JMP 0x00013f60
	00013f1e:CMP byte ptr [RBP + -0xa],0x0
	00013f22:JZ 0x00013f5f
	00013f24:MOV EAX,0x0
	00013f29:JMP 0x00013f93
	00013f2b:MOV RAX,qword ptr [RBP + -0x8]
	00013f2f:MOV EDX,0x4
	00013f34:LEA RCX,[0x337f4]
	00013f3b:MOV RSI,RCX
	00013f3e:MOV RDI,RAX
	00013f41:CALL 0x00005920
	00013f46:TEST EAX,EAX
	00013f48:JZ 0x00013f51
	00013f4a:MOV EAX,0x0
	00013f4f:JMP 0x00013f93
	00013f51:ADD qword ptr [RBP + -0x8],0x4
	00013f56:JMP 0x00013f60
	00013f58:MOV EAX,0x0
	00013f5d:JMP 0x00013f93
	00013f5f:NOP
	00013f60:JMP 0x00013f67
	00013f62:ADD qword ptr [RBP + -0x8],0x1
	00013f67:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
65: cVar3 = '\0';
	00013f58:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
67: return cVar3;
	00013f94:RET
END_OF_LINE



Function: do_ed_script
----------------------------------------------
33: ppFVar7 = &ofp_local;
	00013f9d:SUB RSP,0x70
END_OF_LINE
----------------------------------------------
34: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	00013fb1:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
35: tmpfp = (FILE *)0x0;
	00013fc0:MOV qword ptr [RBP + -0x30],0x0
END_OF_LINE
----------------------------------------------
36: tmpfd = -1;
	00013fc8:MOV dword ptr [RBP + -0x44],0xffffffff
END_OF_LINE
----------------------------------------------
37: if (*outname_needs_removal == false) {
	00013fd3:MOVZX EAX,byte ptr [RAX]
	00013fd6:TEST AL,AL
	00013fd8:JZ 0x00013fe1
END_OF_LINE
----------------------------------------------
38: exclusive = 0x80;
	00013fe1:MOV EAX,0x80
END_OF_LINE
----------------------------------------------
41: exclusive = 0;
	00013fda:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
43: ofp_local = ofp;
	00013ff8:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
44: outname_needs_removal_local = outname_needs_removal;
	00013ff8:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
45: outname_local = outname;
	00013ff8:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
46: inname_local = inname;
	00013ff8:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
47: if ((!dry_run) && (!skip_rest_of_patch)) {
	00013ff8:JZ 0x000140bb
	00013ffe:LEA RAX,[0x3e360]
	00014005:MOVZX EAX,byte ptr [RAX]
	00014008:XOR EAX,0x1
	0001400b:TEST AL,AL
	0001400d:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
48: tmpfd = make_tempfile(&TMPEDNAME,'e',(char *)0x0,2,0);
	00014032:CALL 0x00019da4
END_OF_LINE
----------------------------------------------
49: if (tmpfd == -1) {
	0001403a:CMP dword ptr [RBP + -0x44],-0x1
	0001403e:JNZ 0x00014069
END_OF_LINE
----------------------------------------------
50: pcVar4 = quotearg(TMPEDNAME);
	0001404d:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
52: pfatal("Can\'t create temporary file %s",pcVar4);
	00014064:CALL 0x00018721
END_OF_LINE
----------------------------------------------
54: TMPEDNAME_needs_removal = true;
	00014070:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
55: tmpfp = (FILE *)fdopen(tmpfd,"w+b");
	00014082:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
56: if ((FILE *)tmpfp == (FILE *)0x0) {
	0001408b:CMP qword ptr [RBP + -0x30],0x0
	00014090:JNZ 0x000140bb
END_OF_LINE
----------------------------------------------
57: pcVar4 = quotearg(TMPEDNAME);
	0001409f:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
59: pfatal("Can\'t open stream for file %s",pcVar4);
	000140b6:CALL 0x00018721
END_OF_LINE
----------------------------------------------
62: while( true ) {
	000140dc:JNZ 0x000140f9
END_OF_LINE
----------------------------------------------
63: beginning_of_this_line = ftell((FILE *)pfp);
	000140c5:CALL 0x00005d70
END_OF_LINE
----------------------------------------------
64: chars_read = get_line();
	000140ce:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
65: if (chars_read == 0) break;
	000140d7:CMP qword ptr [RBP + -0x20],0x0
	000140dc:JNZ 0x000140f9
END_OF_LINE
----------------------------------------------
66: ed_command_letter = get_ed_command_letter(buf);
	00014106:CALL 0x00013e52
END_OF_LINE
----------------------------------------------
67: if (ed_command_letter == '\0') {
	0001410e:CMP byte ptr [RBP + -0x45],0x0
	00014112:JZ 0x000141dd
END_OF_LINE
----------------------------------------------
68: next_intuit_at(beginning_of_this_line,p_input_line);
	000141ee:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
69: goto LAB_000141f3;
	000141f3:LEA RAX,[0x3e310]
END_OF_LINE
----------------------------------------------
71: if ((tmpfp != (FILE *)0x0) &&
	00014118:CMP qword ptr [RBP + -0x30],0x0
	0001411d:JZ 0x00014149
	0001411f:LEA RAX,[0x3e240]
	00014126:MOV RAX,qword ptr [RAX]
	00014129:MOV RCX,qword ptr [RBP + -0x30]
	0001412d:MOV RDX,qword ptr [RBP + -0x20]
	00014131:MOV ESI,0x1
	00014136:MOV RDI,RAX
	00014139:CALL 0x00006010
	0001413e:CMP qword ptr [RBP + -0x20],RAX
	00014142:JBE 0x00014149
END_OF_LINE
----------------------------------------------
72: (sVar5 = fwrite(buf,1,chars_read,(FILE *)tmpfp), sVar5 < chars_read)) {
	00014139:CALL 0x00006010
	0001413e:CMP qword ptr [RBP + -0x20],RAX
	00014142:JBE 0x00014149
END_OF_LINE
----------------------------------------------
74: write_fatal();
	00014144:CALL 0x00018705
END_OF_LINE
----------------------------------------------
76: if ((ed_command_letter != 'd') && (ed_command_letter != 's')) {
	00014149:CMP byte ptr [RBP + -0x45],0x64
	0001414d:JZ 0x000140bb
	00014153:CMP byte ptr [RBP + -0x45],0x73
	00014157:JZ 0x000140bb
END_OF_LINE
----------------------------------------------
77: p_pass_comments_through = true;
	0001415d:MOV byte ptr [0x00040541],0x1
END_OF_LINE
----------------------------------------------
79: chars_read = get_line();
	000141be:CALL 0x000132f0
END_OF_LINE
----------------------------------------------
80: if (chars_read == 0) break;
	000141c7:CMP qword ptr [RBP + -0x20],0x0
	000141cc:JNZ 0x00014166
END_OF_LINE
----------------------------------------------
81: if ((tmpfp != (FILE *)0x0) &&
	00014166:CMP qword ptr [RBP + -0x30],0x0
	0001416b:JZ 0x00014197
	0001416d:LEA RAX,[0x3e240]
	00014174:MOV RAX,qword ptr [RAX]
	00014177:MOV RCX,qword ptr [RBP + -0x30]
	0001417b:MOV RDX,qword ptr [RBP + -0x20]
	0001417f:MOV ESI,0x1
	00014184:MOV RDI,RAX
	00014187:CALL 0x00006010
	0001418c:CMP qword ptr [RBP + -0x20],RAX
	00014190:JBE 0x00014197
END_OF_LINE
----------------------------------------------
82: (sVar5 = fwrite(buf,1,chars_read,(FILE *)tmpfp), sVar5 < chars_read)) {
	00014187:CALL 0x00006010
	0001418c:CMP qword ptr [RBP + -0x20],RAX
	00014190:JBE 0x00014197
END_OF_LINE
----------------------------------------------
84: write_fatal();
	00014192:CALL 0x00018705
END_OF_LINE
----------------------------------------------
86: } while ((chars_read != 2) || (iVar2 = strcmp(buf,".\n"), iVar2 != 0));
	00014197:CMP qword ptr [RBP + -0x20],0x2
	0001419c:JNZ 0x000141be
	0001419e:LEA RAX,[0x3e240]
	000141a5:MOV RAX,qword ptr [RAX]
	000141a8:LEA RDX,[0x330e4]
	000141af:MOV RSI,RDX
	000141b2:MOV RDI,RAX
	000141b5:CALL 0x00005ce0
	000141ba:TEST EAX,EAX
	000141bc:JZ 0x000141d0
END_OF_LINE
----------------------------------------------
87: p_pass_comments_through = false;
	000141d1:MOV byte ptr [0x00040541],0x0
END_OF_LINE
----------------------------------------------
90: next_intuit_at(beginning_of_this_line,p_input_line);
	000140ef:CALL 0x0000fed1
END_OF_LINE
----------------------------------------------
91: LAB_000141f3:
	000141f3:LEA RAX,[0x3e310]
END_OF_LINE
----------------------------------------------
92: ppFVar8 = &ofp_local;
	00013f9d:SUB RSP,0x70
	00013fa1:MOV qword ptr [RBP + -0x58],RDI
	00013fa5:MOV qword ptr [RBP + -0x60],RSI
	00013fa9:MOV qword ptr [RBP + -0x68],RDX
	00013fad:MOV qword ptr [RBP + -0x70],RCX
	00013fb1:MOV RAX,qword ptr FS:[0x28]
	00013fba:MOV qword ptr [RBP + -0x8],RAX
	00013fbe:XOR EAX,EAX
	00013fc0:MOV qword ptr [RBP + -0x30],0x0
	00013fc8:MOV dword ptr [RBP + -0x44],0xffffffff
	00013fcf:MOV RAX,qword ptr [RBP + -0x68]
	00013fd3:MOVZX EAX,byte ptr [RAX]
	00013fd6:TEST AL,AL
	00013fd8:JZ 0x00013fe1
	00013fda:MOV EAX,0x0
	00013fdf:JMP 0x00013fe6
	00013fe1:MOV EAX,0x80
	00013fe6:MOV dword ptr [RBP + -0x40],EAX
	00013fe9:LEA RAX,[0x3e310]
	00013ff0:MOVZX EAX,byte ptr [RAX]
	00013ff3:XOR EAX,0x1
	00013ff6:TEST AL,AL
	00013ff8:JZ 0x000140bb
	00013ffe:LEA RAX,[0x3e360]
	00014005:MOVZX EAX,byte ptr [RAX]
	00014008:XOR EAX,0x1
	0001400b:TEST AL,AL
	0001400d:JZ 0x000140bb
	00014013:MOV R8D,0x0
	00014019:MOV ECX,0x2
	0001401e:MOV EDX,0x0
	00014023:MOV ESI,0x65
	00014028:LEA RAX,[0x3e348]
	0001402f:MOV RDI,RAX
	00014032:CALL 0x00019da4
	00014037:MOV dword ptr [RBP + -0x44],EAX
	0001403a:CMP dword ptr [RBP + -0x44],-0x1
	0001403e:JNZ 0x00014069
	00014040:LEA RAX,[0x3e348]
	00014047:MOV RAX,qword ptr [RAX]
	0001404a:MOV RDI,RAX
	0001404d:CALL 0x0002a515
	00014052:MOV RSI,RAX
	00014055:LEA RAX,[0x32c28]
	0001405c:MOV RDI,RAX
	0001405f:MOV EAX,0x0
	00014064:CALL 0x00018721
	00014069:LEA RAX,[0x3e353]
	00014070:MOV byte ptr [RAX],0x1
	00014073:MOV EAX,dword ptr [RBP + -0x44]
	00014076:LEA RDX,[0x32c47]
	0001407d:MOV RSI,RDX
	00014080:MOV EDI,EAX
	00014082:CALL 0x00005eb0
	00014087:MOV qword ptr [RBP + -0x30],RAX
	0001408b:CMP qword ptr [RBP + -0x30],0x0
	00014090:JNZ 0x000140bb
	00014092:LEA RAX,[0x3e348]
	00014099:MOV RAX,qword ptr [RAX]
	0001409c:MOV RDI,RAX
	0001409f:CALL 0x0002a515
	000140a4:MOV RSI,RAX
	000140a7:LEA RAX,[0x32c4b]
	000140ae:MOV RDI,RAX
	000140b1:MOV EAX,0x0
	000140b6:CALL 0x00018721
	000140bb:MOV RAX,qword ptr [0x00040468]
	000140c2:MOV RDI,RAX
	000140c5:CALL 0x00005d70
	000140ca:MOV qword ptr [RBP + -0x28],RAX
	000140ce:CALL 0x000132f0
	000140d3:MOV qword ptr [RBP + -0x20],RAX
	000140d7:CMP qword ptr [RBP + -0x20],0x0
	000140dc:JNZ 0x000140f9
	000140de:MOV RDX,qword ptr [0x00040518]
	000140e5:MOV RAX,qword ptr [RBP + -0x28]
	000140e9:MOV RSI,RDX
	000140ec:MOV RDI,RAX
	000140ef:CALL 0x0000fed1
	000140f4:JMP 0x000141f3
	000140f9:LEA RAX,[0x3e240]
	00014100:MOV RAX,qword ptr [RAX]
	00014103:MOV RDI,RAX
	00014106:CALL 0x00013e52
	0001410b:MOV byte ptr [RBP + -0x45],AL
	0001410e:CMP byte ptr [RBP + -0x45],0x0
	00014112:JZ 0x000141dd
	00014118:CMP qword ptr [RBP + -0x30],0x0
	0001411d:JZ 0x00014149
	0001411f:LEA RAX,[0x3e240]
	00014126:MOV RAX,qword ptr [RAX]
	00014129:MOV RCX,qword ptr [RBP + -0x30]
	0001412d:MOV RDX,qword ptr [RBP + -0x20]
	00014131:MOV ESI,0x1
	00014136:MOV RDI,RAX
	00014139:CALL 0x00006010
	0001413e:CMP qword ptr [RBP + -0x20],RAX
	00014142:JBE 0x00014149
	00014144:CALL 0x00018705
	00014149:CMP byte ptr [RBP + -0x45],0x64
	0001414d:JZ 0x000140bb
	00014153:CMP byte ptr [RBP + -0x45],0x73
	00014157:JZ 0x000140bb
	0001415d:MOV byte ptr [0x00040541],0x1
	00014164:JMP 0x000141be
	00014166:CMP qword ptr [RBP + -0x30],0x0
	0001416b:JZ 0x00014197
	0001416d:LEA RAX,[0x3e240]
	00014174:MOV RAX,qword ptr [RAX]
	00014177:MOV RCX,qword ptr [RBP + -0x30]
	0001417b:MOV RDX,qword ptr [RBP + -0x20]
	0001417f:MOV ESI,0x1
	00014184:MOV RDI,RAX
	00014187:CALL 0x00006010
	0001418c:CMP qword ptr [RBP + -0x20],RAX
	00014190:JBE 0x00014197
	00014192:CALL 0x00018705
	00014197:CMP qword ptr [RBP + -0x20],0x2
	0001419c:JNZ 0x000141be
	0001419e:LEA RAX,[0x3e240]
	000141a5:MOV RAX,qword ptr [RAX]
	000141a8:LEA RDX,[0x330e4]
	000141af:MOV RSI,RDX
	000141b2:MOV RDI,RAX
	000141b5:CALL 0x00005ce0
	000141ba:TEST EAX,EAX
	000141bc:JZ 0x000141d0
	000141be:CALL 0x000132f0
	000141c3:MOV qword ptr [RBP + -0x20],RAX
	000141c7:CMP qword ptr [RBP + -0x20],0x0
	000141cc:JNZ 0x00014166
	000141ce:JMP 0x000141d1
	000141d0:NOP
	000141d1:MOV byte ptr [0x00040541],0x0
	000141d8:JMP 0x000140bb
	000141dd:MOV RDX,qword ptr [0x00040518]
	000141e4:MOV RAX,qword ptr [RBP + -0x28]
	000141e8:MOV RSI,RDX
	000141eb:MOV RDI,RAX
	000141ee:CALL 0x0000fed1
	000141f3:LEA RAX,[0x3e310]
	000141fa:MOVZX EAX,byte ptr [RAX]
	000141fd:TEST AL,AL
	000141ff:JNZ 0x00014565
END_OF_LINE
----------------------------------------------
93: if ((dry_run != false) || (ppFVar8 = &ofp_local, skip_rest_of_patch != false)) goto LAB_00014566;
	00013f9d:SUB RSP,0x70
	00013fa1:MOV qword ptr [RBP + -0x58],RDI
	00013fa5:MOV qword ptr [RBP + -0x60],RSI
	00013fa9:MOV qword ptr [RBP + -0x68],RDX
	00013fad:MOV qword ptr [RBP + -0x70],RCX
	00013fb1:MOV RAX,qword ptr FS:[0x28]
	00013fba:MOV qword ptr [RBP + -0x8],RAX
	00013fbe:XOR EAX,EAX
	00013fc0:MOV qword ptr [RBP + -0x30],0x0
	00013fc8:MOV dword ptr [RBP + -0x44],0xffffffff
	00013fcf:MOV RAX,qword ptr [RBP + -0x68]
	00013fd3:MOVZX EAX,byte ptr [RAX]
	00013fd6:TEST AL,AL
	00013fd8:JZ 0x00013fe1
	00013fda:MOV EAX,0x0
	00013fdf:JMP 0x00013fe6
	00013fe1:MOV EAX,0x80
	00013fe6:MOV dword ptr [RBP + -0x40],EAX
	00013fe9:LEA RAX,[0x3e310]
	00013ff0:MOVZX EAX,byte ptr [RAX]
	00013ff3:XOR EAX,0x1
	00013ff6:TEST AL,AL
	00013ff8:JZ 0x000140bb
	00013ffe:LEA RAX,[0x3e360]
	00014005:MOVZX EAX,byte ptr [RAX]
	00014008:XOR EAX,0x1
	0001400b:TEST AL,AL
	0001400d:JZ 0x000140bb
	00014013:MOV R8D,0x0
	00014019:MOV ECX,0x2
	0001401e:MOV EDX,0x0
	00014023:MOV ESI,0x65
	00014028:LEA RAX,[0x3e348]
	0001402f:MOV RDI,RAX
	00014032:CALL 0x00019da4
	00014037:MOV dword ptr [RBP + -0x44],EAX
	0001403a:CMP dword ptr [RBP + -0x44],-0x1
	0001403e:JNZ 0x00014069
	00014040:LEA RAX,[0x3e348]
	00014047:MOV RAX,qword ptr [RAX]
	0001404a:MOV RDI,RAX
	0001404d:CALL 0x0002a515
	00014052:MOV RSI,RAX
	00014055:LEA RAX,[0x32c28]
	0001405c:MOV RDI,RAX
	0001405f:MOV EAX,0x0
	00014064:CALL 0x00018721
	00014069:LEA RAX,[0x3e353]
	00014070:MOV byte ptr [RAX],0x1
	00014073:MOV EAX,dword ptr [RBP + -0x44]
	00014076:LEA RDX,[0x32c47]
	0001407d:MOV RSI,RDX
	00014080:MOV EDI,EAX
	00014082:CALL 0x00005eb0
	00014087:MOV qword ptr [RBP + -0x30],RAX
	0001408b:CMP qword ptr [RBP + -0x30],0x0
	00014090:JNZ 0x000140bb
	00014092:LEA RAX,[0x3e348]
	00014099:MOV RAX,qword ptr [RAX]
	0001409c:MOV RDI,RAX
	0001409f:CALL 0x0002a515
	000140a4:MOV RSI,RAX
	000140a7:LEA RAX,[0x32c4b]
	000140ae:MOV RDI,RAX
	000140b1:MOV EAX,0x0
	000140b6:CALL 0x00018721
	000140bb:MOV RAX,qword ptr [0x00040468]
	000140c2:MOV RDI,RAX
	000140c5:CALL 0x00005d70
	000140ca:MOV qword ptr [RBP + -0x28],RAX
	000140ce:CALL 0x000132f0
	000140d3:MOV qword ptr [RBP + -0x20],RAX
	000140d7:CMP qword ptr [RBP + -0x20],0x0
	000140dc:JNZ 0x000140f9
	000140de:MOV RDX,qword ptr [0x00040518]
	000140e5:MOV RAX,qword ptr [RBP + -0x28]
	000140e9:MOV RSI,RDX
	000140ec:MOV RDI,RAX
	000140ef:CALL 0x0000fed1
	000140f4:JMP 0x000141f3
	000140f9:LEA RAX,[0x3e240]
	00014100:MOV RAX,qword ptr [RAX]
	00014103:MOV RDI,RAX
	00014106:CALL 0x00013e52
	0001410b:MOV byte ptr [RBP + -0x45],AL
	0001410e:CMP byte ptr [RBP + -0x45],0x0
	00014112:JZ 0x000141dd
	00014118:CMP qword ptr [RBP + -0x30],0x0
	0001411d:JZ 0x00014149
	0001411f:LEA RAX,[0x3e240]
	00014126:MOV RAX,qword ptr [RAX]
	00014129:MOV RCX,qword ptr [RBP + -0x30]
	0001412d:MOV RDX,qword ptr [RBP + -0x20]
	00014131:MOV ESI,0x1
	00014136:MOV RDI,RAX
	00014139:CALL 0x00006010
	0001413e:CMP qword ptr [RBP + -0x20],RAX
	00014142:JBE 0x00014149
	00014144:CALL 0x00018705
	00014149:CMP byte ptr [RBP + -0x45],0x64
	0001414d:JZ 0x000140bb
	00014153:CMP byte ptr [RBP + -0x45],0x73
	00014157:JZ 0x000140bb
	0001415d:MOV byte ptr [0x00040541],0x1
	00014164:JMP 0x000141be
	00014166:CMP qword ptr [RBP + -0x30],0x0
	0001416b:JZ 0x00014197
	0001416d:LEA RAX,[0x3e240]
	00014174:MOV RAX,qword ptr [RAX]
	00014177:MOV RCX,qword ptr [RBP + -0x30]
	0001417b:MOV RDX,qword ptr [RBP + -0x20]
	0001417f:MOV ESI,0x1
	00014184:MOV RDI,RAX
	00014187:CALL 0x00006010
	0001418c:CMP qword ptr [RBP + -0x20],RAX
	00014190:JBE 0x00014197
	00014192:CALL 0x00018705
	00014197:CMP qword ptr [RBP + -0x20],0x2
	0001419c:JNZ 0x000141be
	0001419e:LEA RAX,[0x3e240]
	000141a5:MOV RAX,qword ptr [RAX]
	000141a8:LEA RDX,[0x330e4]
	000141af:MOV RSI,RDX
	000141b2:MOV RDI,RAX
	000141b5:CALL 0x00005ce0
	000141ba:TEST EAX,EAX
	000141bc:JZ 0x000141d0
	000141be:CALL 0x000132f0
	000141c3:MOV qword ptr [RBP + -0x20],RAX
	000141c7:CMP qword ptr [RBP + -0x20],0x0
	000141cc:JNZ 0x00014166
	000141ce:JMP 0x000141d1
	000141d0:NOP
	000141d1:MOV byte ptr [0x00040541],0x0
	000141d8:JMP 0x000140bb
	000141dd:MOV RDX,qword ptr [0x00040518]
	000141e4:MOV RAX,qword ptr [RBP + -0x28]
	000141e8:MOV RSI,RDX
	000141eb:MOV RDI,RAX
	000141ee:CALL 0x0000fed1
	000141f3:LEA RAX,[0x3e310]
	000141fa:MOVZX EAX,byte ptr [RAX]
	000141fd:TEST AL,AL
	000141ff:JNZ 0x00014565
	00014205:LEA RAX,[0x3e360]
	0001420c:MOVZX EAX,byte ptr [RAX]
	0001420f:TEST AL,AL
	00014211:JNZ 0x00014565
	00014217:MOV RAX,qword ptr [RBP + -0x30]
	0001421b:MOV RCX,RAX
	0001421e:MOV EDX,0x4
	00014223:MOV ESI,0x1
	00014228:LEA RAX,[0x337f9]
	0001422f:MOV RDI,RAX
	00014232:CALL 0x00006010
	00014237:CMP RAX,0x3
	0001423b:JBE 0x0001424d
	0001423d:MOV RAX,qword ptr [RBP + -0x30]
	00014241:MOV RDI,RAX
	00014244:CALL 0x00005e00
	00014249:TEST EAX,EAX
	0001424b:JZ 0x00014252
	0001424d:CALL 0x00018705
	00014252:MOV EAX,dword ptr [RBP + -0x44]
	00014255:MOV EDX,0x0
	0001425a:MOV ESI,0x0
	0001425f:MOV EDI,EAX
	00014261:CALL 0x00005bd0
	00014266:CMP RAX,-0x1
	0001426a:JNZ 0x00014295
	0001426c:LEA RAX,[0x3e348]
	00014273:MOV RAX,qword ptr [RAX]
	00014276:MOV RDI,RAX
	00014279:CALL 0x0002a515
	0001427e:MOV RSI,RAX
	00014281:LEA RAX,[0x33800]
	00014288:MOV RDI,RAX
	0001428b:MOV EAX,0x0
	00014290:CALL 0x00018721
	00014295:LEA RAX,[0x3e268]
	0001429c:MOV EAX,dword ptr [RAX]
	0001429e:CMP EAX,0x2
	000142a1:JZ 0x000142d7
	000142a3:MOV RAX,qword ptr [RBP + -0x68]
	000142a7:MOV byte ptr [RAX],0x1
	000142aa:LEA RAX,[0x3e280]
	000142b1:MOV ECX,dword ptr [RAX + 0x18]
	000142b4:MOV EDX,dword ptr [RBP + -0x40]
	000142b7:MOV RSI,qword ptr [RBP + -0x60]
	000142bb:MOV RAX,qword ptr [RBP + -0x58]
	000142bf:MOV R9D,0x1
	000142c5:MOV R8D,ECX
	000142c8:MOV ECX,EDX
	000142ca:MOV EDX,0x0
	000142cf:MOV RDI,RAX
	000142d2:CALL 0x000174dd
	000142d7:MOV RAX,qword ptr [0x0003df90]
	000142de:MOV RAX,qword ptr [RAX]
	000142e1:MOV RDI,RAX
	000142e4:CALL 0x00005e00
	000142e9:MOV EDI,0x0
	000142ee:CALL 0x00005bc0
	000142f3:MOV dword ptr [RBP + -0x3c],EAX
	000142f6:CMP dword ptr [RBP + -0x3c],-0x1
	000142fa:JZ 0x00014310
	000142fc:MOV EAX,dword ptr [RBP + -0x44]
	000142ff:MOV ESI,0x0
	00014304:MOV EDI,EAX
	00014306:CALL 0x00005b50
	0001430b:CMP EAX,-0x1
	0001430e:JNZ 0x00014324
	00014310:LEA RAX,[0x33830]
	00014317:MOV RDI,RAX
	0001431a:MOV EAX,0x0
	0001431f:CALL 0x00018721
	00014324:MOV RAX,qword ptr [RBP + -0x60]
	00014328:MOVZX EAX,byte ptr [RAX]
	0001432b:CMP AL,0x21
	0001432d:JZ 0x0001433a
	0001432f:MOV RAX,qword ptr [RBP + -0x60]
	00014333:MOVZX EAX,byte ptr [RAX]
	00014336:CMP AL,0x2d
	00014338:JNZ 0x00014362
	0001433a:LEA RAX,[0x338d8]
	00014341:MOV RCX,RAX
	00014344:MOV EDX,0x9ae
	00014349:LEA RAX,[0x32c69]
	00014350:MOV RSI,RAX
	00014353:LEA RAX,[0x33858]
	0001435a:MOV RDI,RAX
	0001435d:CALL 0x00005bf0
	00014362:MOV EAX,0x10
	00014367:SUB RAX,0x1
	0001436b:ADD RAX,0x28
	0001436f:MOV ECX,0x10
	00014374:MOV EDX,0x0
	00014379:DIV RCX
	0001437c:IMUL RAX,RAX,0x10
	00014380:MOV RCX,RAX
	00014383:AND RCX,-0x1000
	0001438a:MOV RDX,RSP
	0001438d:SUB RDX,RCX
	00014390:CMP RSP,RDX
	00014393:JZ 0x000143a7
	00014395:SUB RSP,0x1000
	0001439c:OR qword ptr [RSP + 0xff8],0x0
	000143a5:JMP 0x00014390
	000143a7:MOV RDX,RAX
	000143aa:AND EDX,0xfff
	000143b0:SUB RSP,RDX
	000143b3:MOV RDX,RAX
	000143b6:AND EDX,0xfff
	000143bc:TEST RDX,RDX
	000143bf:JZ 0x000143d1
	000143c1:AND EAX,0xfff
	000143c6:SUB RAX,0x8
	000143ca:ADD RAX,RSP
	000143cd:OR qword ptr [RAX],0x0
	000143d1:MOV RAX,RSP
	000143d4:ADD RAX,0xf
	000143d8:SHR RAX,0x4
	000143dc:SHL RAX,0x4
	000143e0:MOV qword ptr [RBP + -0x18],RAX
	000143e4:MOV RAX,qword ptr [RBP + -0x18]
	000143e8:LEA RDX,[0x338e8]
	000143ef:MOV qword ptr [RAX],RDX
	000143f2:MOV RAX,qword ptr [RBP + -0x18]
	000143f6:ADD RAX,0x8
	000143fa:LEA RDX,[0x32c00]
	00014401:MOV qword ptr [RAX],RDX
	00014404:MOV RAX,qword ptr [RBP + -0x18]
	00014408:LEA RDX,[RAX + 0x10]
	0001440c:MOV RAX,qword ptr [RBP + -0x60]
	00014410:MOV qword ptr [RDX],RAX
	00014413:MOV RAX,qword ptr [RBP + -0x18]
	00014417:ADD RAX,0x18
	0001441b:MOV qword ptr [RAX],0x0
	00014422:MOV RAX,qword ptr [RBP + -0x18]
	00014426:PUSH 0x0
	00014428:PUSH 0x0
	0001442a:PUSH 0x1
	0001442c:PUSH 0x0
	0001442e:MOV R9D,0x0
	00014434:MOV R8D,0x0
	0001443a:MOV ECX,0x0
	0001443f:MOV RDX,RAX
	00014442:LEA RAX,[0x338e8]
	00014449:MOV RSI,RAX
	0001444c:LEA RAX,[0x338e8]
	00014453:MOV RDI,RAX
	00014456:CALL 0x0001e1be
	0001445b:ADD RSP,0x20
	0001445f:MOV dword ptr [RBP + -0x38],EAX
	00014462:CMP dword ptr [RBP + -0x38],0x0
	00014466:JZ 0x00014486
	00014468:LEA RAX,[0x338e8]
	0001446f:MOV RSI,RAX
	00014472:LEA RAX,[0x3387f]
	00014479:MOV RDI,RAX
	0001447c:MOV EAX,0x0
	00014481:CALL 0x000185b0
	00014486:MOV EAX,dword ptr [RBP + -0x3c]
	00014489:MOV ESI,0x0
	0001448e:MOV EDI,EAX
	00014490:CALL 0x00005b50
	00014495:CMP EAX,-0x1
	00014498:JZ 0x000144a9
	0001449a:MOV EAX,dword ptr [RBP + -0x3c]
	0001449d:MOV EDI,EAX
	0001449f:CALL 0x00005c30
	000144a4:CMP EAX,-0x1
	000144a7:JNZ 0x000144bd
	000144a9:LEA RAX,[0x33830]
	000144b0:MOV RDI,RAX
	000144b3:MOV EAX,0x0
	000144b8:CALL 0x00018721
	000144bd:MOV RAX,qword ptr [RBP + -0x30]
	000144c1:MOV RDI,RAX
	000144c4:CALL 0x00005a80
	000144c9:CMP qword ptr [RBP + -0x70],0x0
	000144ce:JZ 0x00014566
	000144d4:MOV RAX,qword ptr [RBP + -0x60]
	000144d8:LEA RDX,[0x32c02]
	000144df:MOV RSI,RDX
	000144e2:MOV RDI,RAX
	000144e5:CALL 0x00005f50
	000144ea:MOV qword ptr [RBP + -0x10],RAX
	000144ee:CMP qword ptr [RBP + -0x10],0x0
	000144f3:JNZ 0x0001452b
	000144f5:MOV RAX,qword ptr [RBP + -0x60]
	000144f9:MOV RSI,RAX
	000144fc:LEA RAX,[0x33889]
	00014503:MOV RDI,RAX
	00014506:MOV EAX,0x0
	0001450b:CALL 0x00018721
	00014510:MOV RDX,qword ptr [RBP + -0x70]
	00014514:MOV EAX,dword ptr [RBP + -0x34]
	00014517:MOV RSI,RDX
	0001451a:MOV EDI,EAX
	0001451c:CALL 0x00005cf0
	00014521:CMP EAX,-0x1
	00014524:JNZ 0x0001452b
	00014526:CALL 0x00018705
	0001452b:MOV RAX,qword ptr [RBP + -0x10]
	0001452f:MOV RDI,RAX
	00014532:CALL 0x00006070
	00014537:MOV dword ptr [RBP + -0x34],EAX
	0001453a:CMP dword ptr [RBP + -0x34],-0x1
	0001453e:JNZ 0x00014510
	00014540:MOV RAX,qword ptr [RBP + -0x10]
	00014544:MOV RDI,RAX
	00014547:CALL 0x000059a0
	0001454c:TEST EAX,EAX
	0001454e:JNZ 0x00014560
	00014550:MOV RAX,qword ptr [RBP + -0x10]
	00014554:MOV RDI,RAX
	00014557:CALL 0x00005a80
	0001455c:TEST EAX,EAX
	0001455e:JZ 0x00014566
	00014560:CALL 0x000186e9
	00014565:NOP
	00014566:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
94: sVar5 = fwrite(&DAT_000337f9,1,4,(FILE *)tmpfp);
	00014232:CALL 0x00006010
END_OF_LINE
----------------------------------------------
95: if ((sVar5 < 4) || (iVar2 = fflush((FILE *)tmpfp), iVar2 != 0)) {
	0001423b:JBE 0x0001424d
	0001423d:MOV RAX,qword ptr [RBP + -0x30]
	00014241:MOV RDI,RAX
	00014244:CALL 0x00005e00
	00014249:TEST EAX,EAX
	0001424b:JZ 0x00014252
END_OF_LINE
----------------------------------------------
97: write_fatal();
	0001424d:CALL 0x00018705
END_OF_LINE
----------------------------------------------
99: _Var6 = lseek(tmpfd,0,0);
	00014261:CALL 0x00005bd0
END_OF_LINE
----------------------------------------------
100: if (_Var6 == -1) {
	00014266:CMP RAX,-0x1
	0001426a:JNZ 0x00014295
END_OF_LINE
----------------------------------------------
101: pcVar4 = quotearg(TMPEDNAME);
	00014279:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
103: pfatal("Can\'t rewind to the beginning of file %s",pcVar4);
	00014290:CALL 0x00018721
END_OF_LINE
----------------------------------------------
105: if (inerrno != 2) {
	0001429e:CMP EAX,0x2
	000142a1:JZ 0x000142d7
END_OF_LINE
----------------------------------------------
106: *outname_needs_removal_local = true;
	000142a7:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
107: copy_file(inname_local,outname_local,(stat *)0x0,exclusive,instat.st_mode,true);
	000142d2:CALL 0x000174dd
END_OF_LINE
----------------------------------------------
109: fflush(pFRam0000000000144070);
	000142e4:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
110: stdin_dup = dup(0);
	000142ee:CALL 0x00005bc0
END_OF_LINE
----------------------------------------------
111: if ((stdin_dup == -1) || (iVar2 = dup2(tmpfd,0), iVar2 == -1)) {
	000142f6:CMP dword ptr [RBP + -0x3c],-0x1
	000142fa:JZ 0x00014310
	000142fc:MOV EAX,dword ptr [RBP + -0x44]
	000142ff:MOV ESI,0x0
	00014304:MOV EDI,EAX
	00014306:CALL 0x00005b50
	0001430b:CMP EAX,-0x1
	0001430e:JNZ 0x00014324
END_OF_LINE
----------------------------------------------
113: pfatal("Failed to duplicate standard input");
	0001431f:CALL 0x00018721
END_OF_LINE
----------------------------------------------
115: if ((*outname_local == '!') || (*outname_local == '-')) {
	00014328:MOVZX EAX,byte ptr [RAX]
	0001432b:CMP AL,0x21
	0001432d:JZ 0x0001433a
	0001432f:MOV RAX,qword ptr [RBP + -0x60]
	00014333:MOVZX EAX,byte ptr [RAX]
	00014336:CMP AL,0x2d
	00014338:JNZ 0x00014362
END_OF_LINE
----------------------------------------------
117: __assert_fail("outname[0] != \'!\' && outname[0] != \'-\'","pch.c",0x9ae,"do_ed_script");
	0001435d:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
119: for (; ppFVar7 != &ofp_local; ppFVar7 = (FILE **)((long)ppFVar7 + -0x1000)) {
	00013f9d:SUB RSP,0x70
	00013fa1:MOV qword ptr [RBP + -0x58],RDI
	00013fa5:MOV qword ptr [RBP + -0x60],RSI
	00013fa9:MOV qword ptr [RBP + -0x68],RDX
	00013fad:MOV qword ptr [RBP + -0x70],RCX
	00013fb1:MOV RAX,qword ptr FS:[0x28]
	00013fba:MOV qword ptr [RBP + -0x8],RAX
	00013fbe:XOR EAX,EAX
	00013fc0:MOV qword ptr [RBP + -0x30],0x0
	00013fc8:MOV dword ptr [RBP + -0x44],0xffffffff
	00013fcf:MOV RAX,qword ptr [RBP + -0x68]
	00013fd3:MOVZX EAX,byte ptr [RAX]
	00013fd6:TEST AL,AL
	00013fd8:JZ 0x00013fe1
	00013fda:MOV EAX,0x0
	00013fdf:JMP 0x00013fe6
	00013fe1:MOV EAX,0x80
	00013fe6:MOV dword ptr [RBP + -0x40],EAX
	00013fe9:LEA RAX,[0x3e310]
	00013ff0:MOVZX EAX,byte ptr [RAX]
	00013ff3:XOR EAX,0x1
	00013ff6:TEST AL,AL
	00013ff8:JZ 0x000140bb
	00013ffe:LEA RAX,[0x3e360]
	00014005:MOVZX EAX,byte ptr [RAX]
	00014008:XOR EAX,0x1
	0001400b:TEST AL,AL
	0001400d:JZ 0x000140bb
	00014013:MOV R8D,0x0
	00014019:MOV ECX,0x2
	0001401e:MOV EDX,0x0
	00014023:MOV ESI,0x65
	00014028:LEA RAX,[0x3e348]
	0001402f:MOV RDI,RAX
	00014032:CALL 0x00019da4
	00014037:MOV dword ptr [RBP + -0x44],EAX
	0001403a:CMP dword ptr [RBP + -0x44],-0x1
	0001403e:JNZ 0x00014069
	00014040:LEA RAX,[0x3e348]
	00014047:MOV RAX,qword ptr [RAX]
	0001404a:MOV RDI,RAX
	0001404d:CALL 0x0002a515
	00014052:MOV RSI,RAX
	00014055:LEA RAX,[0x32c28]
	0001405c:MOV RDI,RAX
	0001405f:MOV EAX,0x0
	00014064:CALL 0x00018721
	00014069:LEA RAX,[0x3e353]
	00014070:MOV byte ptr [RAX],0x1
	00014073:MOV EAX,dword ptr [RBP + -0x44]
	00014076:LEA RDX,[0x32c47]
	0001407d:MOV RSI,RDX
	00014080:MOV EDI,EAX
	00014082:CALL 0x00005eb0
	00014087:MOV qword ptr [RBP + -0x30],RAX
	0001408b:CMP qword ptr [RBP + -0x30],0x0
	00014090:JNZ 0x000140bb
	00014092:LEA RAX,[0x3e348]
	00014099:MOV RAX,qword ptr [RAX]
	0001409c:MOV RDI,RAX
	0001409f:CALL 0x0002a515
	000140a4:MOV RSI,RAX
	000140a7:LEA RAX,[0x32c4b]
	000140ae:MOV RDI,RAX
	000140b1:MOV EAX,0x0
	000140b6:CALL 0x00018721
	000140bb:MOV RAX,qword ptr [0x00040468]
	000140c2:MOV RDI,RAX
	000140c5:CALL 0x00005d70
	000140ca:MOV qword ptr [RBP + -0x28],RAX
	000140ce:CALL 0x000132f0
	000140d3:MOV qword ptr [RBP + -0x20],RAX
	000140d7:CMP qword ptr [RBP + -0x20],0x0
	000140dc:JNZ 0x000140f9
	000140de:MOV RDX,qword ptr [0x00040518]
	000140e5:MOV RAX,qword ptr [RBP + -0x28]
	000140e9:MOV RSI,RDX
	000140ec:MOV RDI,RAX
	000140ef:CALL 0x0000fed1
	000140f4:JMP 0x000141f3
	000140f9:LEA RAX,[0x3e240]
	00014100:MOV RAX,qword ptr [RAX]
	00014103:MOV RDI,RAX
	00014106:CALL 0x00013e52
	0001410b:MOV byte ptr [RBP + -0x45],AL
	0001410e:CMP byte ptr [RBP + -0x45],0x0
	00014112:JZ 0x000141dd
	00014118:CMP qword ptr [RBP + -0x30],0x0
	0001411d:JZ 0x00014149
	0001411f:LEA RAX,[0x3e240]
	00014126:MOV RAX,qword ptr [RAX]
	00014129:MOV RCX,qword ptr [RBP + -0x30]
	0001412d:MOV RDX,qword ptr [RBP + -0x20]
	00014131:MOV ESI,0x1
	00014136:MOV RDI,RAX
	00014139:CALL 0x00006010
	0001413e:CMP qword ptr [RBP + -0x20],RAX
	00014142:JBE 0x00014149
	00014144:CALL 0x00018705
	00014149:CMP byte ptr [RBP + -0x45],0x64
	0001414d:JZ 0x000140bb
	00014153:CMP byte ptr [RBP + -0x45],0x73
	00014157:JZ 0x000140bb
	0001415d:MOV byte ptr [0x00040541],0x1
	00014164:JMP 0x000141be
	00014166:CMP qword ptr [RBP + -0x30],0x0
	0001416b:JZ 0x00014197
	0001416d:LEA RAX,[0x3e240]
	00014174:MOV RAX,qword ptr [RAX]
	00014177:MOV RCX,qword ptr [RBP + -0x30]
	0001417b:MOV RDX,qword ptr [RBP + -0x20]
	0001417f:MOV ESI,0x1
	00014184:MOV RDI,RAX
	00014187:CALL 0x00006010
	0001418c:CMP qword ptr [RBP + -0x20],RAX
	00014190:JBE 0x00014197
	00014192:CALL 0x00018705
	00014197:CMP qword ptr [RBP + -0x20],0x2
	0001419c:JNZ 0x000141be
	0001419e:LEA RAX,[0x3e240]
	000141a5:MOV RAX,qword ptr [RAX]
	000141a8:LEA RDX,[0x330e4]
	000141af:MOV RSI,RDX
	000141b2:MOV RDI,RAX
	000141b5:CALL 0x00005ce0
	000141ba:TEST EAX,EAX
	000141bc:JZ 0x000141d0
	000141be:CALL 0x000132f0
	000141c3:MOV qword ptr [RBP + -0x20],RAX
	000141c7:CMP qword ptr [RBP + -0x20],0x0
	000141cc:JNZ 0x00014166
	000141ce:JMP 0x000141d1
	000141d0:NOP
	000141d1:MOV byte ptr [0x00040541],0x0
	000141d8:JMP 0x000140bb
	000141dd:MOV RDX,qword ptr [0x00040518]
	000141e4:MOV RAX,qword ptr [RBP + -0x28]
	000141e8:MOV RSI,RDX
	000141eb:MOV RDI,RAX
	000141ee:CALL 0x0000fed1
	000141f3:LEA RAX,[0x3e310]
	000141fa:MOVZX EAX,byte ptr [RAX]
	000141fd:TEST AL,AL
	000141ff:JNZ 0x00014565
	00014205:LEA RAX,[0x3e360]
	0001420c:MOVZX EAX,byte ptr [RAX]
	0001420f:TEST AL,AL
	00014211:JNZ 0x00014565
	00014217:MOV RAX,qword ptr [RBP + -0x30]
	0001421b:MOV RCX,RAX
	0001421e:MOV EDX,0x4
	00014223:MOV ESI,0x1
	00014228:LEA RAX,[0x337f9]
	0001422f:MOV RDI,RAX
	00014232:CALL 0x00006010
	00014237:CMP RAX,0x3
	0001423b:JBE 0x0001424d
	0001423d:MOV RAX,qword ptr [RBP + -0x30]
	00014241:MOV RDI,RAX
	00014244:CALL 0x00005e00
	00014249:TEST EAX,EAX
	0001424b:JZ 0x00014252
	0001424d:CALL 0x00018705
	00014252:MOV EAX,dword ptr [RBP + -0x44]
	00014255:MOV EDX,0x0
	0001425a:MOV ESI,0x0
	0001425f:MOV EDI,EAX
	00014261:CALL 0x00005bd0
	00014266:CMP RAX,-0x1
	0001426a:JNZ 0x00014295
	0001426c:LEA RAX,[0x3e348]
	00014273:MOV RAX,qword ptr [RAX]
	00014276:MOV RDI,RAX
	00014279:CALL 0x0002a515
	0001427e:MOV RSI,RAX
	00014281:LEA RAX,[0x33800]
	00014288:MOV RDI,RAX
	0001428b:MOV EAX,0x0
	00014290:CALL 0x00018721
	00014295:LEA RAX,[0x3e268]
	0001429c:MOV EAX,dword ptr [RAX]
	0001429e:CMP EAX,0x2
	000142a1:JZ 0x000142d7
	000142a3:MOV RAX,qword ptr [RBP + -0x68]
	000142a7:MOV byte ptr [RAX],0x1
	000142aa:LEA RAX,[0x3e280]
	000142b1:MOV ECX,dword ptr [RAX + 0x18]
	000142b4:MOV EDX,dword ptr [RBP + -0x40]
	000142b7:MOV RSI,qword ptr [RBP + -0x60]
	000142bb:MOV RAX,qword ptr [RBP + -0x58]
	000142bf:MOV R9D,0x1
	000142c5:MOV R8D,ECX
	000142c8:MOV ECX,EDX
	000142ca:MOV EDX,0x0
	000142cf:MOV RDI,RAX
	000142d2:CALL 0x000174dd
	000142d7:MOV RAX,qword ptr [0x0003df90]
	000142de:MOV RAX,qword ptr [RAX]
	000142e1:MOV RDI,RAX
	000142e4:CALL 0x00005e00
	000142e9:MOV EDI,0x0
	000142ee:CALL 0x00005bc0
	000142f3:MOV dword ptr [RBP + -0x3c],EAX
	000142f6:CMP dword ptr [RBP + -0x3c],-0x1
	000142fa:JZ 0x00014310
	000142fc:MOV EAX,dword ptr [RBP + -0x44]
	000142ff:MOV ESI,0x0
	00014304:MOV EDI,EAX
	00014306:CALL 0x00005b50
	0001430b:CMP EAX,-0x1
	0001430e:JNZ 0x00014324
	00014310:LEA RAX,[0x33830]
	00014317:MOV RDI,RAX
	0001431a:MOV EAX,0x0
	0001431f:CALL 0x00018721
	00014324:MOV RAX,qword ptr [RBP + -0x60]
	00014328:MOVZX EAX,byte ptr [RAX]
	0001432b:CMP AL,0x21
	0001432d:JZ 0x0001433a
	0001432f:MOV RAX,qword ptr [RBP + -0x60]
	00014333:MOVZX EAX,byte ptr [RAX]
	00014336:CMP AL,0x2d
	00014338:JNZ 0x00014362
	0001433a:LEA RAX,[0x338d8]
	00014341:MOV RCX,RAX
	00014344:MOV EDX,0x9ae
	00014349:LEA RAX,[0x32c69]
	00014350:MOV RSI,RAX
	00014353:LEA RAX,[0x33858]
	0001435a:MOV RDI,RAX
	0001435d:CALL 0x00005bf0
	00014362:MOV EAX,0x10
	00014367:SUB RAX,0x1
	0001436b:ADD RAX,0x28
	0001436f:MOV ECX,0x10
	00014374:MOV EDX,0x0
	00014379:DIV RCX
	0001437c:IMUL RAX,RAX,0x10
	00014380:MOV RCX,RAX
	00014383:AND RCX,-0x1000
	0001438a:MOV RDX,RSP
	0001438d:SUB RDX,RCX
	00014390:CMP RSP,RDX
	00014393:JZ 0x000143a7
	00014395:SUB RSP,0x1000
END_OF_LINE
----------------------------------------------
120: *(undefined8 *)((long)ppFVar7 + -8) = *(undefined8 *)((long)ppFVar7 + -8);
	0001439c:OR qword ptr [RSP + 0xff8],0x0
END_OF_LINE
----------------------------------------------
122: *(undefined8 *)((long)ppFVar7 + -8) = *(undefined8 *)((long)ppFVar7 + -8);
	000143ca:ADD RAX,RSP
	000143cd:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
123: prog_argv = (char **)((ulong)((long)ppFVar7 + -0x21) & 0xfffffffffffffff0);
	000143d4:ADD RAX,0xf
	000143d8:SHR RAX,0x4
	000143dc:SHL RAX,0x4
END_OF_LINE
----------------------------------------------
124: ed_argv = prog_argv;
	000143e0:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
125: *prog_argv = "/usr/bin/ed";
	000143ef:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
126: prog_argv[1] = "-";
	000143f6:ADD RAX,0x8
	000143fa:LEA RDX,[0x32c00]
	00014401:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
127: prog_argv[2] = outname_local;
	00014408:LEA RDX,[RAX + 0x10]
	0001440c:MOV RAX,qword ptr [RBP + -0x60]
	00014410:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
128: prog_argv[3] = (char *)0x0;
	00014417:ADD RAX,0x18
	0001441b:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
129: *(undefined8 *)((long)ppFVar7 + -0x38) = 0;
	00014426:PUSH 0x0
END_OF_LINE
----------------------------------------------
130: *(undefined8 *)((long)ppFVar7 + -0x40) = 0;
	00014428:PUSH 0x0
END_OF_LINE
----------------------------------------------
131: *(undefined8 *)((long)ppFVar7 + -0x48) = 1;
	0001442a:PUSH 0x1
END_OF_LINE
----------------------------------------------
132: *(undefined8 *)((long)ppFVar7 + -0x50) = 0;
	0001442c:PUSH 0x0
END_OF_LINE
----------------------------------------------
133: *(undefined8 *)((long)ppFVar7 + -0x58) = 0x1445b;
	00014456:CALL 0x0001e1be
END_OF_LINE
----------------------------------------------
134: status = execute("/usr/bin/ed","/usr/bin/ed",prog_argv,false,false,false,
	00014456:CALL 0x0001e1be
END_OF_LINE
----------------------------------------------
135: *(_Bool *)((long)ppFVar7 + -0x50),*(_Bool *)((long)ppFVar7 + -0x48),
	0001442c:PUSH 0x0
	0001442e:MOV R9D,0x0
	00014434:MOV R8D,0x0
	0001443a:MOV ECX,0x0
	0001443f:MOV RDX,RAX
	00014442:LEA RAX,[0x338e8]
	00014449:MOV RSI,RAX
	0001444c:LEA RAX,[0x338e8]
	00014453:MOV RDI,RAX
	00014456:CALL 0x0001e1be
END_OF_LINE
----------------------------------------------
136: *(_Bool *)((long)ppFVar7 + -0x40),*(int **)((long)ppFVar7 + -0x38));
	00014456:CALL 0x0001e1be
END_OF_LINE
----------------------------------------------
137: iVar2 = stdin_dup;
	00014456:CALL 0x0001e1be
END_OF_LINE
----------------------------------------------
138: if (status != 0) {
	00014462:CMP dword ptr [RBP + -0x38],0x0
	00014466:JZ 0x00014486
END_OF_LINE
----------------------------------------------
140: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14486;
	00014481:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
141: fatal("%s FAILED","/usr/bin/ed");
	00014481:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
143: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14495;
	00014490:CALL 0x00005b50
END_OF_LINE
----------------------------------------------
144: iVar3 = dup2(iVar2,0);
	00014490:CALL 0x00005b50
END_OF_LINE
----------------------------------------------
145: iVar2 = stdin_dup;
	00014490:CALL 0x00005b50
END_OF_LINE
----------------------------------------------
146: if (iVar3 != -1) {
	00014495:CMP EAX,-0x1
	00014498:JZ 0x000144a9
END_OF_LINE
----------------------------------------------
147: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x144a4;
	0001449f:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
148: iVar2 = close(iVar2);
	0001449f:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
149: pFVar1 = tmpfp;
	0001449f:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
150: if (iVar2 != -1) {
	000144a4:CMP EAX,-0x1
	000144a7:JNZ 0x000144bd
END_OF_LINE
----------------------------------------------
151: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x144c9;
	000144c4:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
152: fclose((FILE *)pFVar1);
	000144c4:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
153: pcVar4 = outname_local;
	000144c4:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
154: ppFVar8 = (FILE **)((long)ppFVar7 + -0x30);
	000143b0:SUB RSP,RDX
	000143b3:MOV RDX,RAX
	000143b6:AND EDX,0xfff
	000143bc:TEST RDX,RDX
	000143bf:JZ 0x000143d1
	000143c1:AND EAX,0xfff
	000143c6:SUB RAX,0x8
	000143ca:ADD RAX,RSP
	000143cd:OR qword ptr [RAX],0x0
	000143d1:MOV RAX,RSP
	000143d4:ADD RAX,0xf
	000143d8:SHR RAX,0x4
	000143dc:SHL RAX,0x4
	000143e0:MOV qword ptr [RBP + -0x18],RAX
	000143e4:MOV RAX,qword ptr [RBP + -0x18]
	000143e8:LEA RDX,[0x338e8]
	000143ef:MOV qword ptr [RAX],RDX
	000143f2:MOV RAX,qword ptr [RBP + -0x18]
	000143f6:ADD RAX,0x8
	000143fa:LEA RDX,[0x32c00]
	00014401:MOV qword ptr [RAX],RDX
	00014404:MOV RAX,qword ptr [RBP + -0x18]
	00014408:LEA RDX,[RAX + 0x10]
	0001440c:MOV RAX,qword ptr [RBP + -0x60]
	00014410:MOV qword ptr [RDX],RAX
	00014413:MOV RAX,qword ptr [RBP + -0x18]
	00014417:ADD RAX,0x18
	0001441b:MOV qword ptr [RAX],0x0
	00014422:MOV RAX,qword ptr [RBP + -0x18]
	00014426:PUSH 0x0
	00014428:PUSH 0x0
	0001442a:PUSH 0x1
	0001442c:PUSH 0x0
	0001442e:MOV R9D,0x0
	00014434:MOV R8D,0x0
	0001443a:MOV ECX,0x0
	0001443f:MOV RDX,RAX
	00014442:LEA RAX,[0x338e8]
	00014449:MOV RSI,RAX
	0001444c:LEA RAX,[0x338e8]
	00014453:MOV RDI,RAX
	00014456:CALL 0x0001e1be
	0001445b:ADD RSP,0x20
	0001445f:MOV dword ptr [RBP + -0x38],EAX
	00014462:CMP dword ptr [RBP + -0x38],0x0
	00014466:JZ 0x00014486
	00014468:LEA RAX,[0x338e8]
	0001446f:MOV RSI,RAX
	00014472:LEA RAX,[0x3387f]
	00014479:MOV RDI,RAX
	0001447c:MOV EAX,0x0
	00014481:CALL 0x000185b0
	00014486:MOV EAX,dword ptr [RBP + -0x3c]
	00014489:MOV ESI,0x0
	0001448e:MOV EDI,EAX
	00014490:CALL 0x00005b50
	00014495:CMP EAX,-0x1
	00014498:JZ 0x000144a9
	0001449a:MOV EAX,dword ptr [RBP + -0x3c]
	0001449d:MOV EDI,EAX
	0001449f:CALL 0x00005c30
	000144a4:CMP EAX,-0x1
	000144a7:JNZ 0x000144bd
	000144a9:LEA RAX,[0x33830]
	000144b0:MOV RDI,RAX
	000144b3:MOV EAX,0x0
	000144b8:CALL 0x00018721
	000144bd:MOV RAX,qword ptr [RBP + -0x30]
	000144c1:MOV RDI,RAX
	000144c4:CALL 0x00005a80
	000144c9:CMP qword ptr [RBP + -0x70],0x0
	000144ce:JZ 0x00014566
END_OF_LINE
----------------------------------------------
155: if (ofp_local != (FILE *)0x0) {
	000144c9:CMP qword ptr [RBP + -0x70],0x0
	000144ce:JZ 0x00014566
END_OF_LINE
----------------------------------------------
156: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x144ea;
	000144e5:CALL 0x00005f50
END_OF_LINE
----------------------------------------------
157: ifp = (FILE *)fopen(pcVar4,"r");
	000144e5:CALL 0x00005f50
END_OF_LINE
----------------------------------------------
158: pcVar4 = outname_local;
	000144e5:CALL 0x00005f50
END_OF_LINE
----------------------------------------------
159: if ((FILE *)ifp == (FILE *)0x0) {
	000144ee:CMP qword ptr [RBP + -0x10],0x0
	000144f3:JNZ 0x0001452b
END_OF_LINE
----------------------------------------------
161: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14510;
	0001450b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
162: pfatal("can\'t open \'%s\'",pcVar4);
	0001450b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
164: while( true ) {
	0001453e:JNZ 0x00014510
END_OF_LINE
----------------------------------------------
165: pFVar1 = ifp;
	0001452b:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
166: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14537;
	00014532:CALL 0x00006070
END_OF_LINE
----------------------------------------------
167: iVar2 = getc((FILE *)pFVar1);
	00014532:CALL 0x00006070
END_OF_LINE
----------------------------------------------
168: __stream = ifp;
	00014532:CALL 0x00006070
END_OF_LINE
----------------------------------------------
169: pFVar1 = ofp_local;
	00014532:CALL 0x00006070
END_OF_LINE
----------------------------------------------
170: c = iVar2;
	0001453e:JNZ 0x00014510
END_OF_LINE
----------------------------------------------
171: if (iVar2 == -1) break;
	0001453a:CMP dword ptr [RBP + -0x34],-0x1
	0001453e:JNZ 0x00014510
END_OF_LINE
----------------------------------------------
172: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14521;
	0001451c:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
173: iVar2 = putc(iVar2,(FILE *)pFVar1);
	0001451c:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
174: if (iVar2 == -1) {
	00014521:CMP EAX,-0x1
	00014524:JNZ 0x0001452b
END_OF_LINE
----------------------------------------------
176: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x1452b;
	00014526:CALL 0x00018705
END_OF_LINE
----------------------------------------------
177: write_fatal();
	00014526:CALL 0x00018705
END_OF_LINE
----------------------------------------------
180: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x1454c;
	00014547:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
181: iVar2 = ferror((FILE *)__stream);
	00014547:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
182: pFVar1 = ifp;
	00014547:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
183: if (iVar2 == 0) {
	0001454c:TEST EAX,EAX
	0001454e:JNZ 0x00014560
END_OF_LINE
----------------------------------------------
184: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x1455c;
	00014557:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
185: iVar2 = fclose((FILE *)pFVar1);
	00014557:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
186: ppFVar8 = (FILE **)((long)ppFVar7 + -0x30);
	000143b0:SUB RSP,RDX
	000143b3:MOV RDX,RAX
	000143b6:AND EDX,0xfff
	000143bc:TEST RDX,RDX
	000143bf:JZ 0x000143d1
	000143c1:AND EAX,0xfff
	000143c6:SUB RAX,0x8
	000143ca:ADD RAX,RSP
	000143cd:OR qword ptr [RAX],0x0
	000143d1:MOV RAX,RSP
	000143d4:ADD RAX,0xf
	000143d8:SHR RAX,0x4
	000143dc:SHL RAX,0x4
	000143e0:MOV qword ptr [RBP + -0x18],RAX
	000143e4:MOV RAX,qword ptr [RBP + -0x18]
	000143e8:LEA RDX,[0x338e8]
	000143ef:MOV qword ptr [RAX],RDX
	000143f2:MOV RAX,qword ptr [RBP + -0x18]
	000143f6:ADD RAX,0x8
	000143fa:LEA RDX,[0x32c00]
	00014401:MOV qword ptr [RAX],RDX
	00014404:MOV RAX,qword ptr [RBP + -0x18]
	00014408:LEA RDX,[RAX + 0x10]
	0001440c:MOV RAX,qword ptr [RBP + -0x60]
	00014410:MOV qword ptr [RDX],RAX
	00014413:MOV RAX,qword ptr [RBP + -0x18]
	00014417:ADD RAX,0x18
	0001441b:MOV qword ptr [RAX],0x0
	00014422:MOV RAX,qword ptr [RBP + -0x18]
	00014426:PUSH 0x0
	00014428:PUSH 0x0
	0001442a:PUSH 0x1
	0001442c:PUSH 0x0
	0001442e:MOV R9D,0x0
	00014434:MOV R8D,0x0
	0001443a:MOV ECX,0x0
	0001443f:MOV RDX,RAX
	00014442:LEA RAX,[0x338e8]
	00014449:MOV RSI,RAX
	0001444c:LEA RAX,[0x338e8]
	00014453:MOV RDI,RAX
	00014456:CALL 0x0001e1be
	0001445b:ADD RSP,0x20
	0001445f:MOV dword ptr [RBP + -0x38],EAX
	00014462:CMP dword ptr [RBP + -0x38],0x0
	00014466:JZ 0x00014486
	00014468:LEA RAX,[0x338e8]
	0001446f:MOV RSI,RAX
	00014472:LEA RAX,[0x3387f]
	00014479:MOV RDI,RAX
	0001447c:MOV EAX,0x0
	00014481:CALL 0x000185b0
	00014486:MOV EAX,dword ptr [RBP + -0x3c]
	00014489:MOV ESI,0x0
	0001448e:MOV EDI,EAX
	00014490:CALL 0x00005b50
	00014495:CMP EAX,-0x1
	00014498:JZ 0x000144a9
	0001449a:MOV EAX,dword ptr [RBP + -0x3c]
	0001449d:MOV EDI,EAX
	0001449f:CALL 0x00005c30
	000144a4:CMP EAX,-0x1
	000144a7:JNZ 0x000144bd
	000144a9:LEA RAX,[0x33830]
	000144b0:MOV RDI,RAX
	000144b3:MOV EAX,0x0
	000144b8:CALL 0x00018721
	000144bd:MOV RAX,qword ptr [RBP + -0x30]
	000144c1:MOV RDI,RAX
	000144c4:CALL 0x00005a80
	000144c9:CMP qword ptr [RBP + -0x70],0x0
	000144ce:JZ 0x00014566
	000144d4:MOV RAX,qword ptr [RBP + -0x60]
	000144d8:LEA RDX,[0x32c02]
	000144df:MOV RSI,RDX
	000144e2:MOV RDI,RAX
	000144e5:CALL 0x00005f50
	000144ea:MOV qword ptr [RBP + -0x10],RAX
	000144ee:CMP qword ptr [RBP + -0x10],0x0
	000144f3:JNZ 0x0001452b
	000144f5:MOV RAX,qword ptr [RBP + -0x60]
	000144f9:MOV RSI,RAX
	000144fc:LEA RAX,[0x33889]
	00014503:MOV RDI,RAX
	00014506:MOV EAX,0x0
	0001450b:CALL 0x00018721
	00014510:MOV RDX,qword ptr [RBP + -0x70]
	00014514:MOV EAX,dword ptr [RBP + -0x34]
	00014517:MOV RSI,RDX
	0001451a:MOV EDI,EAX
	0001451c:CALL 0x00005cf0
	00014521:CMP EAX,-0x1
	00014524:JNZ 0x0001452b
	00014526:CALL 0x00018705
	0001452b:MOV RAX,qword ptr [RBP + -0x10]
	0001452f:MOV RDI,RAX
	00014532:CALL 0x00006070
	00014537:MOV dword ptr [RBP + -0x34],EAX
	0001453a:CMP dword ptr [RBP + -0x34],-0x1
	0001453e:JNZ 0x00014510
	00014540:MOV RAX,qword ptr [RBP + -0x10]
	00014544:MOV RDI,RAX
	00014547:CALL 0x000059a0
	0001454c:TEST EAX,EAX
	0001454e:JNZ 0x00014560
	00014550:MOV RAX,qword ptr [RBP + -0x10]
	00014554:MOV RDI,RAX
	00014557:CALL 0x00005a80
	0001455c:TEST EAX,EAX
	0001455e:JZ 0x00014566
END_OF_LINE
----------------------------------------------
187: if (iVar2 == 0) goto LAB_00014566;
	0001455c:TEST EAX,EAX
	0001455e:JZ 0x00014566
	00014560:CALL 0x000186e9
	00014565:NOP
	00014566:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
190: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x14565;
	00014560:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
191: read_fatal();
	00014560:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
193: LAB_00014566:
	00014566:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
194: if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001456a:SUB RAX,qword ptr FS:[0x28]
	00014573:JZ 0x0001457a
END_OF_LINE
----------------------------------------------
196: *(undefined8 *)((long)ppFVar8 + -8) = 0x1457a;
	00014575:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
197: __stack_chk_fail();
	00014575:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
199: return;
	0001457b:RET
END_OF_LINE
----------------------------------------------
203: *(undefined8 *)((long)ppFVar7 + -0x38) = 0x144bd;
	000144b8:CALL 0x00018721
END_OF_LINE
----------------------------------------------
204: pfatal("Failed to duplicate standard input");
	000144b8:CALL 0x00018721
END_OF_LINE



Function: pch_normalize
----------------------------------------------
9: old = 1;
	00014587:MOV qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
10: for (new = p_ptrn_lines + 1; (p_Char[new] == '=' || (p_Char[new] == '\n')); new = new + 1) {
	00014596:ADD RAX,0x1
	0001459a:MOV qword ptr [RBP + -0x8],RAX
	0001459e:JMP 0x000145a5
	000145a0:ADD qword ptr [RBP + -0x8],0x1
	000145a5:MOV RDX,qword ptr [0x00040530]
	000145ac:MOV RAX,qword ptr [RBP + -0x8]
	000145b0:ADD RAX,RDX
	000145b3:MOVZX EAX,byte ptr [RAX]
	000145b6:CMP AL,0x3d
	000145b8:JZ 0x000145a0
	000145ba:MOV RDX,qword ptr [0x00040530]
	000145c1:MOV RAX,qword ptr [RBP + -0x8]
	000145c5:ADD RAX,RDX
	000145c8:MOVZX EAX,byte ptr [RAX]
	000145cb:CMP AL,0xa
	000145cd:JZ 0x000145a0
END_OF_LINE
----------------------------------------------
12: if (format == UNI_DIFF) {
	000145cf:CMP dword ptr [RBP + -0x14],0x5
	000145d3:JNZ 0x00014784
END_OF_LINE
----------------------------------------------
13: for (; old <= p_ptrn_lines; old = old + 1) {
	00014601:ADD qword ptr [RBP + -0x10],0x1
	00014606:MOV RAX,qword ptr [0x000404f0]
	0001460d:CMP qword ptr [RBP + -0x10],RAX
	00014611:JLE 0x000145db
END_OF_LINE
----------------------------------------------
14: if (p_Char[old] == '!') {
	000145e6:ADD RAX,RDX
	000145e9:MOVZX EAX,byte ptr [RAX]
	000145ec:CMP AL,0x21
	000145ee:JNZ 0x00014601
END_OF_LINE
----------------------------------------------
15: p_Char[old] = '-';
	000145fb:ADD RAX,RDX
	000145fe:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
18: for (; new <= p_end; new = new + 1) {
	0001463b:ADD qword ptr [RBP + -0x8],0x1
	00014640:MOV RAX,qword ptr [0x0003e040]
	00014647:CMP qword ptr [RBP + -0x8],RAX
	0001464b:JLE 0x00014615
END_OF_LINE
----------------------------------------------
19: if (p_Char[new] == '!') {
	00014620:ADD RAX,RDX
	00014623:MOVZX EAX,byte ptr [RAX]
	00014626:CMP AL,0x21
	00014628:JNZ 0x0001463b
END_OF_LINE
----------------------------------------------
20: p_Char[new] = '+';
	00014635:ADD RAX,RDX
	00014638:MOV byte ptr [RAX],0x2b
END_OF_LINE
----------------------------------------------
25: LAB_00014784:
	00014784:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
26: if (old <= p_ptrn_lines) {
	0001478f:JLE 0x00014652
END_OF_LINE
----------------------------------------------
27: if (p_Char[old] == '-') {
	0001465d:ADD RAX,RDX
	00014660:MOVZX EAX,byte ptr [RAX]
	00014663:CMP AL,0x2d
	00014665:JNZ 0x0001472f
END_OF_LINE
----------------------------------------------
28: if ((p_end < new) || (p_Char[new] != '+')) {
	00014676:JG 0x00014703
	0001467c:MOV RDX,qword ptr [0x00040530]
	00014683:MOV RAX,qword ptr [RBP + -0x8]
	00014687:ADD RAX,RDX
	0001468a:MOVZX EAX,byte ptr [RAX]
	0001468d:CMP AL,0x2b
	0001468f:JNZ 0x00014703
END_OF_LINE
----------------------------------------------
30: old = old + 1;
	00014703:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
31: if (p_ptrn_lines < old) break;
	00014713:JG 0x00014784
END_OF_LINE
----------------------------------------------
32: } while (p_Char[old] == '-');
	00014720:ADD RAX,RDX
	00014723:MOVZX EAX,byte ptr [RAX]
	00014726:CMP AL,0x2d
	00014728:JZ 0x00014703
END_OF_LINE
----------------------------------------------
36: p_Char[old] = '!';
	0001469c:ADD RAX,RDX
	0001469f:MOV byte ptr [RAX],0x21
END_OF_LINE
----------------------------------------------
37: old = old + 1;
	000146a2:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
38: if (p_ptrn_lines < old) break;
	000146b2:JG 0x000146c9
END_OF_LINE
----------------------------------------------
39: } while (p_Char[old] == '-');
	000146bf:ADD RAX,RDX
	000146c2:MOVZX EAX,byte ptr [RAX]
	000146c5:CMP AL,0x2d
	000146c7:JZ 0x00014691
END_OF_LINE
----------------------------------------------
41: p_Char[new] = '!';
	000146d4:ADD RAX,RDX
	000146d7:MOV byte ptr [RAX],0x21
END_OF_LINE
----------------------------------------------
42: new = new + 1;
	000146da:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
43: if (p_end < new) break;
	000146ea:JG 0x0001472c
END_OF_LINE
----------------------------------------------
44: } while (p_Char[new] == '+');
	000146f7:ADD RAX,RDX
	000146fa:MOVZX EAX,byte ptr [RAX]
	000146fd:CMP AL,0x2b
	000146ff:JZ 0x000146c9
END_OF_LINE
----------------------------------------------
47: else if ((p_end < new) || (p_Char[new] != '+')) {
	0001473a:JG 0x0001477a
	0001473c:MOV RDX,qword ptr [0x00040530]
	00014743:MOV RAX,qword ptr [RBP + -0x8]
	00014747:ADD RAX,RDX
	0001474a:MOVZX EAX,byte ptr [RAX]
	0001474d:CMP AL,0x2b
	0001474f:JNZ 0x0001477a
END_OF_LINE
----------------------------------------------
48: old = old + 1;
	0001477a:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
49: new = new + 1;
	0001477f:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
53: new = new + 1;
	00014751:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
54: if (p_end < new) break;
	00014761:JG 0x00014784
END_OF_LINE
----------------------------------------------
55: } while (p_Char[new] == '+');
	0001476e:ADD RAX,RDX
	00014771:MOVZX EAX,byte ptr [RAX]
	00014774:CMP AL,0x2b
	00014776:JZ 0x00014751
END_OF_LINE
----------------------------------------------
57: goto LAB_00014784;
	00014784:MOV RAX,qword ptr [0x000404f0]
END_OF_LINE
----------------------------------------------
60: return;
	00014797:RET
END_OF_LINE



Function: INIT_LIST_HEAD
----------------------------------------------
7: list->next = list;
	000147a8:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
8: list->prev = list;
	000147b3:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
9: return;
	000147b9:RET
END_OF_LINE



Function: list_add
----------------------------------------------
10: plVar1 = head->next;
	000147ca:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
11: entry->prev = head;
	000147d9:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
12: entry->next = plVar1;
	000147e5:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
13: head->next = entry;
	000147f0:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
14: plVar1->prev = head->next;
	000147f7:MOV RDX,qword ptr [RAX]
	000147fa:MOV RAX,qword ptr [RBP + -0x8]
	000147fe:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
15: return;
	00014804:RET
END_OF_LINE



Function: list_del
----------------------------------------------
11: plVar1 = entry->next;
	00014811:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
12: plVar2 = entry->prev;
	0001481c:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
13: plVar1->prev = plVar2;
	0001482c:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
14: plVar2->next = plVar1;
	00014838:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
15: return;
	0001483d:RET
END_OF_LINE



Function: list_del_init
----------------------------------------------
7: list_del(entry);
	00014851:CALL 0x00014805
END_OF_LINE
----------------------------------------------
8: INIT_LIST_HEAD(entry);
	0001485d:CALL 0x00014798
END_OF_LINE
----------------------------------------------
9: return;
	00014864:RET
END_OF_LINE



Function: list_empty
----------------------------------------------
7: return head == head->next;
	00014871:MOV RAX,qword ptr [RAX]
	00014874:CMP qword ptr [RBP + -0x8],RAX
	00014878:SETZ AL
	0001487b:POP RBP
	0001487c:RET
END_OF_LINE



Function: hash_cached_dirfd
----------------------------------------------
11: sVar1 = hash_string(*(char **)((long)entry + 0x38),table_size);
	0001489d:MOV RAX,qword ptr [RAX + 0x38]
	000148a1:MOV RDX,qword ptr [RBP + -0x20]
	000148a5:MOV RSI,RDX
	000148a8:MOV RDI,RAX
	000148ab:CALL 0x0001f1a9
END_OF_LINE
----------------------------------------------
12: return ((long)*(int *)(*(long *)((long)entry + 0x30) + 0x40) + sVar1 * 0x1f) % table_size;
	000148bf:SUB RAX,RDX
	000148c2:MOV RCX,RAX
	000148c5:MOV RAX,qword ptr [RBP + -0x10]
	000148c9:MOV RAX,qword ptr [RAX + 0x30]
	000148cd:MOV EAX,dword ptr [RAX + 0x40]
	000148d0:CDQE
	000148d2:ADD RAX,RCX
	000148d5:MOV EDX,0x0
	000148da:DIV qword ptr [RBP + -0x20]
	000148de:MOV RAX,RDX
	000148e1:LEAVE
	000148e2:RET
END_OF_LINE



Function: compare_cached_dirfds
----------------------------------------------
11: if ((*(int *)(*(long *)((long)_a + 0x30) + 0x40) == *(int *)(*(long *)((long)_b + 0x30) + 0x40))
	0001490b:MOV RAX,qword ptr [RAX + 0x30]
	0001490f:MOV EDX,dword ptr [RAX + 0x40]
	00014912:MOV RAX,qword ptr [RBP + -0x8]
	00014916:MOV RAX,qword ptr [RAX + 0x30]
	0001491a:MOV EAX,dword ptr [RAX + 0x40]
	0001491d:CMP EDX,EAX
	0001491f:JNZ 0x00014947
	00014921:MOV RAX,qword ptr [RBP + -0x8]
	00014925:MOV RDX,qword ptr [RAX + 0x38]
	00014929:MOV RAX,qword ptr [RBP + -0x10]
	0001492d:MOV RAX,qword ptr [RAX + 0x38]
	00014931:MOV RSI,RDX
	00014934:MOV RDI,RAX
	00014937:CALL 0x00005ce0
	0001493c:TEST EAX,EAX
	0001493e:JNZ 0x00014947
END_OF_LINE
----------------------------------------------
12: && (iVar1 = strcmp(*(char **)((long)_a + 0x38),*(char **)((long)_b + 0x38)), iVar1 == 0)) {
	00014925:MOV RDX,qword ptr [RAX + 0x38]
	00014929:MOV RAX,qword ptr [RBP + -0x10]
	0001492d:MOV RAX,qword ptr [RAX + 0x38]
	00014931:MOV RSI,RDX
	00014934:MOV RDI,RAX
	00014937:CALL 0x00005ce0
	0001493c:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
13: return true;
	00014950:RET
END_OF_LINE
----------------------------------------------
15: return false;
	00014950:RET
END_OF_LINE



Function: free_cached_dirfd
----------------------------------------------
7: list_del(&entry->children_link);
	00014965:ADD RAX,0x10
	00014969:MOV RDI,RAX
	0001496c:CALL 0x00014805
END_OF_LINE
----------------------------------------------
8: free(entry->name);
	00014975:MOV RAX,qword ptr [RAX + 0x38]
	00014979:MOV RDI,RAX
	0001497c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
9: free(entry);
	00014988:CALL 0x00005860
END_OF_LINE
----------------------------------------------
10: return;
	0001498f:RET
END_OF_LINE



Function: init_dirfd_cache
----------------------------------------------
12: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001499c:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
13: iVar2 = getrlimit(RLIMIT_NOFILE,(rlimit *)&nofile);
	000149ab:LEA RAX,[RBP + -0x20]
	000149af:MOV RSI,RAX
	000149b2:MOV EDI,0x7
	000149b7:CALL 0x00006020
END_OF_LINE
----------------------------------------------
14: if (iVar2 == 0) {
	000149bc:TEST EAX,EAX
	000149be:JNZ 0x000149f9
END_OF_LINE
----------------------------------------------
15: if (nofile.rlim_cur == 0xffffffffffffffff) {
	000149c4:CMP RAX,-0x1
	000149c8:JNZ 0x000149d7
END_OF_LINE
----------------------------------------------
16: max_cached_fds = 0xffffffffffffffff;
	000149ca:MOV qword ptr [0x00040638],-0x1
END_OF_LINE
----------------------------------------------
19: max_cached_fds = min_cached_fds;
	000149ec:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
20: if (min_cached_fds <= nofile.rlim_cur >> 2) {
	000149db:SHR RAX,0x2
	000149df:MOV RDX,RAX
	000149e2:MOV RAX,qword ptr [0x0003e060]
	000149e9:CMP RDX,RAX
	000149ec:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
21: max_cached_fds = nofile.rlim_cur >> 2;
	000149db:SHR RAX,0x2
	000149df:MOV RDX,RAX
	000149e2:MOV RAX,qword ptr [0x0003e060]
	000149e9:CMP RDX,RAX
	000149ec:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
26: max_cached_fds = min_cached_fds;
	00014a00:MOV qword ptr [0x00040638],RAX
END_OF_LINE
----------------------------------------------
28: cached_dirfds =
	00014a2d:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
29: hash_initialize(min_cached_fds,(Hash_tuning *)0x0,hash_cached_dirfd,compare_cached_dirfds,
	00014a2d:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
30: (Hash_data_freer)0x0);
	00014a2d:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
31: if (cached_dirfds != (Hash_table *)0x0) {
	00014a40:TEST RAX,RAX
	00014a43:JNZ 0x00014a4a
END_OF_LINE
----------------------------------------------
32: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00014a4f:SUB RAX,qword ptr FS:[0x28]
	00014a58:JZ 0x00014a5f
END_OF_LINE
----------------------------------------------
33: return;
	00014a60:RET
END_OF_LINE
----------------------------------------------
36: __stack_chk_fail();
	00014a5a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
39: xalloc_die();
	00014a45:CALL 0x000186cd
END_OF_LINE



Function: lookup_cached_dirfd
----------------------------------------------
12: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00014a75:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
13: entry = (cached_dirfd *)0x0;
	00014a84:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
14: if (cached_dirfds != (Hash_table *)0x0) {
	00014a93:TEST RAX,RAX
	00014a96:JZ 0x00014ac2
END_OF_LINE
----------------------------------------------
15: key.parent = dir;
	00014ab9:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
16: key.name = name;
	00014ab9:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
17: entry = (cached_dirfd *)hash_lookup(cached_dirfds,&key);
	00014aaf:LEA RDX,[RBP + -0x50]
	00014ab3:MOV RSI,RDX
	00014ab6:MOV RDI,RAX
	00014ab9:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
19: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00014aca:SUB RDX,qword ptr FS:[0x28]
	00014ad3:JZ 0x00014ada
END_OF_LINE
----------------------------------------------
21: __stack_chk_fail();
	00014ad5:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
23: return entry;
	00014ac2:MOV RAX,qword ptr [RBP + -0x58]
	00014ac6:MOV RDX,qword ptr [RBP + -0x8]
	00014aca:SUB RDX,qword ptr FS:[0x28]
	00014ad3:JZ 0x00014ada
	00014ad5:CALL 0x00005b00
	00014ada:LEAVE
	00014adb:RET
END_OF_LINE



Function: remove_cached_dirfd
----------------------------------------------
10: while( true ) {
	00014b39:JNZ 0x00014aee
END_OF_LINE
----------------------------------------------
11: _Var1 = list_empty(&entry->children);
	00014b28:ADD RAX,0x20
	00014b2c:MOV RDI,RAX
	00014b2f:CALL 0x00014865
END_OF_LINE
----------------------------------------------
12: if (_Var1) break;
	00014b39:JNZ 0x00014aee
END_OF_LINE
----------------------------------------------
13: entry_00 = (entry->children).next;
	00014af2:MOV RAX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
14: list_del_init(entry_00);
	00014b09:CALL 0x0001483e
END_OF_LINE
----------------------------------------------
15: hash_delete(cached_dirfds,entry_00 + -1);
	00014af6:SUB RAX,0x10
	00014afa:MOV qword ptr [RBP + -0x8],RAX
	00014afe:MOV RAX,qword ptr [RBP + -0x8]
	00014b02:ADD RAX,0x10
	00014b06:MOV RDI,RAX
	00014b09:CALL 0x0001483e
	00014b0e:MOV RAX,qword ptr [0x00040630]
	00014b15:MOV RDX,qword ptr [RBP + -0x8]
	00014b19:MOV RSI,RDX
	00014b1c:MOV RDI,RAX
	00014b1f:CALL 0x00020342
END_OF_LINE
----------------------------------------------
17: list_del(&entry->lru_link);
	00014b42:CALL 0x00014805
END_OF_LINE
----------------------------------------------
18: hash_delete(cached_dirfds,entry);
	00014b58:CALL 0x00020342
END_OF_LINE
----------------------------------------------
19: close(entry->fd);
	00014b61:MOV EAX,dword ptr [RAX + 0x40]
	00014b64:MOV EDI,EAX
	00014b66:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
20: free_cached_dirfd(entry);
	00014b72:CALL 0x00014951
END_OF_LINE
----------------------------------------------
21: return;
	00014b79:RET
END_OF_LINE



Function: insert_cached_dirfd
----------------------------------------------
12: if (cached_dirfds == (Hash_table *)0x0) {
	00014b94:TEST RAX,RAX
	00014b97:JNZ 0x00014b9e
END_OF_LINE
----------------------------------------------
13: init_dirfd_cache();
	00014b99:CALL 0x00014990
END_OF_LINE
----------------------------------------------
15: if (max_cached_fds != 0xffffffffffffffff) {
	00014ba5:CMP RAX,-0x1
	00014ba9:JZ 0x00014c21
END_OF_LINE
----------------------------------------------
16: while (((sVar2 = hash_get_n_entries(cached_dirfds), max_cached_fds <= sVar2 &&
	00014bf2:JZ 0x00014c20
	00014bf4:MOV RAX,qword ptr [RBP + -0x8]
	00014bf8:MOV RDI,RAX
	00014bfb:CALL 0x00014adc
	00014c00:MOV RAX,qword ptr [0x00040630]
	00014c07:MOV RDI,RAX
	00014c0a:CALL 0x0001ec04
	00014c0f:MOV RDX,qword ptr [0x00040638]
	00014c16:CMP RAX,RDX
END_OF_LINE
----------------------------------------------
17: (last = (cached_dirfd *)lru_list.prev, lru_list.prev != &lru_list)) &&
	00014bb8:MOV qword ptr [RBP + -0x8],RAX
	00014bbc:MOV RAX,qword ptr [RBP + -0x8]
	00014bc0:LEA RDX,[0x3e0d0]
	00014bc7:CMP RAX,RDX
END_OF_LINE
----------------------------------------------
18: ((keepfd != *(int *)&lru_list.prev[4].next ||
	00014bd0:MOV EAX,dword ptr [RAX + 0x40]
	00014bd3:CMP dword ptr [RBP + -0x1c],EAX
END_OF_LINE
----------------------------------------------
19: (last = (cached_dirfd *)(lru_list.prev)->prev, last != (cached_dirfd *)&lru_list))))) {
	00014bdc:MOV RAX,qword ptr [RAX + 0x8]
	00014be0:MOV qword ptr [RBP + -0x8],RAX
	00014be4:MOV RAX,qword ptr [RBP + -0x8]
	00014be8:LEA RDX,[0x3e0d0]
	00014bef:CMP RAX,RDX
END_OF_LINE
----------------------------------------------
20: remove_cached_dirfd(last);
	00014bfb:CALL 0x00014adc
END_OF_LINE
----------------------------------------------
23: _Var1 = list_empty(&entry->children_link);
	00014c25:ADD RAX,0x10
	00014c29:MOV RDI,RAX
	00014c2c:CALL 0x00014865
END_OF_LINE
----------------------------------------------
24: if ((!_Var1) && (pcVar3 = (cached_dirfd *)hash_insert(cached_dirfds,entry), entry != pcVar3)) {
	00014c36:JZ 0x00014c7c
	00014c38:MOV RAX,qword ptr [0x00040630]
	00014c3f:MOV RDX,qword ptr [RBP + -0x18]
	00014c43:MOV RSI,RDX
	00014c46:MOV RDI,RAX
	00014c49:CALL 0x000202d2
	00014c4e:CMP qword ptr [RBP + -0x18],RAX
	00014c52:JZ 0x00014c7c
END_OF_LINE
----------------------------------------------
26: __assert_fail("hash_insert (cached_dirfds, entry) == entry","safe.c",0xb3,"insert_cached_dirfd")
	00014c77:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
29: return;
	00014c7e:RET
END_OF_LINE



Function: invalidate_cached_dirfd
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00014c9b:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: if (cached_dirfds != (Hash_table *)0x0) {
	00014cb1:TEST RAX,RAX
	00014cb4:JZ 0x00014d0d
END_OF_LINE
----------------------------------------------
16: key.parent = &dir;
	00014cbf:LEA RAX,[RBP + -0xa0]
END_OF_LINE
----------------------------------------------
17: dir.fd = dirfd;
	00014ce6:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
18: key.name = name;
	00014ce6:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
19: entry_00 = (cached_dirfd *)hash_lookup(cached_dirfds,&key);
	00014cdc:LEA RDX,[RBP + -0x50]
	00014ce0:MOV RSI,RDX
	00014ce3:MOV RDI,RAX
	00014ce6:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
20: if (entry_00 != (cached_dirfd *)0x0) {
	00014cf2:CMP qword ptr [RBP + -0xa8],0x0
	00014cfa:JZ 0x00014d0e
END_OF_LINE
----------------------------------------------
21: remove_cached_dirfd(entry_00);
	00014d06:CALL 0x00014adc
END_OF_LINE
----------------------------------------------
24: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00014d12:SUB RAX,qword ptr FS:[0x28]
	00014d1b:JZ 0x00014d22
END_OF_LINE
----------------------------------------------
26: __stack_chk_fail();
	00014d1d:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
28: return;
	00014d23:RET
END_OF_LINE



Function: put_path
----------------------------------------------
11: iVar1 = entry->fd;
	00014d38:MOV EAX,dword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
12: entry_local = entry;
	00014d3e:JMP 0x00014d71
END_OF_LINE
----------------------------------------------
13: while ((entry_local != (cached_dirfd *)0x0 &&
	00014d51:JZ 0x00014d7a
	00014d53:MOV RAX,qword ptr [RBP + -0x18]
	00014d57:LEA RDX,[0x3e0d0]
	00014d5e:MOV RSI,RDX
	00014d61:MOV RDI,RAX
	00014d64:CALL 0x000147ba
	00014d69:MOV RAX,qword ptr [RBP + -0x8]
	00014d6d:MOV qword ptr [RBP + -0x18],RAX
	00014d71:CMP qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
14: (pcVar2 = entry_local->parent, pcVar2 != (cached_dirfd *)0x0))) {
	00014d44:MOV RAX,qword ptr [RAX + 0x30]
	00014d48:MOV qword ptr [RBP + -0x8],RAX
	00014d4c:CMP qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
15: list_add(&entry_local->lru_link,&lru_list);
	00014d64:CALL 0x000147ba
END_OF_LINE
----------------------------------------------
16: entry_local = pcVar2;
	00014d6d:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
18: return iVar1;
	00014d7f:RET
END_OF_LINE



Function: new_cached_dirfd
----------------------------------------------
12: list = (cached_dirfd *)xmalloc(0x48);
	00014d9c:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
13: INIT_LIST_HEAD((list_head *)list);
	00014dac:CALL 0x00014798
END_OF_LINE
----------------------------------------------
14: list_add(&list->children_link,&dir->children);
	00014db5:LEA RDX,[RAX + 0x20]
	00014db9:MOV RAX,qword ptr [RBP + -0x8]
	00014dbd:ADD RAX,0x10
	00014dc1:MOV RSI,RDX
	00014dc4:MOV RDI,RAX
	00014dc7:CALL 0x000147ba
END_OF_LINE
----------------------------------------------
15: INIT_LIST_HEAD(&list->children);
	00014dd0:ADD RAX,0x20
	00014dd4:MOV RDI,RAX
	00014dd7:CALL 0x00014798
END_OF_LINE
----------------------------------------------
16: list->parent = dir;
	00014de4:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
17: pcVar1 = xstrdup(name);
	00014def:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
18: list->name = pcVar1;
	00014dfb:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
19: list->fd = fd;
	00014e06:MOV dword ptr [RAX + 0x40],EDX
END_OF_LINE
----------------------------------------------
20: return list;
	00014e09:MOV RAX,qword ptr [RBP + -0x8]
	00014e0d:LEAVE
	00014e0e:RET
END_OF_LINE



Function: openat_cached
----------------------------------------------
13: entry_00 = lookup_cached_dirfd(dir,name);
	00014e34:CALL 0x00014a61
END_OF_LINE
----------------------------------------------
14: if (entry_00 == (cached_dirfd *)0x0) {
	00014e3d:CMP qword ptr [RBP + -0x8],0x0
	00014e42:JZ 0x00014e52
END_OF_LINE
----------------------------------------------
15: dirfd_cache_misses = dirfd_cache_misses + 1;
	00014e5b:LEA EDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
16: fd_00 = openat(dir->fd,name,0x30000);
	00014e6b:MOV EAX,dword ptr [RAX + 0x40]
	00014e6e:MOV RCX,qword ptr [RBP + -0x20]
	00014e72:MOV EDX,0x30000
	00014e77:MOV RSI,RCX
	00014e7a:MOV EDI,EAX
	00014e7c:MOV EAX,0x0
	00014e81:CALL 0x00005ae0
END_OF_LINE
----------------------------------------------
17: if (fd_00 < 0) {
	00014e89:CMP dword ptr [RBP + -0xc],0x0
	00014e8d:JNS 0x00014e96
END_OF_LINE
----------------------------------------------
18: entry_00 = (cached_dirfd *)0x0;
	00014e8f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
21: entry_00 = new_cached_dirfd(dir,name,fd_00);
	00014ea7:CALL 0x00014d80
END_OF_LINE
----------------------------------------------
22: insert_cached_dirfd(entry_00,keepfd);
	00014ebc:CALL 0x00014b7a
END_OF_LINE
----------------------------------------------
26: list_del_init(&entry_00->lru_link);
	00014e4b:CALL 0x0001483e
END_OF_LINE
----------------------------------------------
28: return entry_00;
	00014ec6:RET
END_OF_LINE



Function: count_path_components
----------------------------------------------
8: for (path_local = path; *path_local == '/'; path_local = path_local + 1) {
	00014ed3:JMP 0x00014eda
	00014ed5:ADD qword ptr [RBP + -0x18],0x1
	00014eda:MOV RAX,qword ptr [RBP + -0x18]
	00014ede:MOVZX EAX,byte ptr [RAX]
	00014ee1:CMP AL,0x2f
	00014ee3:JZ 0x00014ed5
END_OF_LINE
----------------------------------------------
10: if (*path_local == '\0') {
	00014ee9:MOVZX EAX,byte ptr [RAX]
	00014eec:TEST AL,AL
	00014eee:JNZ 0x00014ef7
END_OF_LINE
----------------------------------------------
11: components = 1;
	00014ef0:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
14: components = 0;
	00014ef7:MOV dword ptr [RBP + -0x4],0x0
END_OF_LINE
----------------------------------------------
15: while (*path_local != '\0') {
	00014f35:MOVZX EAX,byte ptr [RAX]
	00014f38:TEST AL,AL
	00014f3a:JNZ 0x00014f05
END_OF_LINE
----------------------------------------------
16: for (; (*path_local != '\0' && (*path_local != '/')); path_local = path_local + 1) {
	00014f00:ADD qword ptr [RBP + -0x18],0x1
	00014f05:MOV RAX,qword ptr [RBP + -0x18]
	00014f09:MOVZX EAX,byte ptr [RAX]
	00014f0c:TEST AL,AL
	00014f0e:JZ 0x00014f22
	00014f10:MOV RAX,qword ptr [RBP + -0x18]
	00014f14:MOVZX EAX,byte ptr [RAX]
	00014f17:CMP AL,0x2f
	00014f19:JNZ 0x00014f00
END_OF_LINE
----------------------------------------------
18: for (; *path_local == '/'; path_local = path_local + 1) {
	00014f1d:ADD qword ptr [RBP + -0x18],0x1
	00014f22:MOV RAX,qword ptr [RBP + -0x18]
	00014f26:MOVZX EAX,byte ptr [RAX]
	00014f29:CMP AL,0x2f
	00014f2b:JZ 0x00014f1d
END_OF_LINE
----------------------------------------------
20: components = components + 1;
	00014f2d:ADD dword ptr [RBP + -0x4],0x1
END_OF_LINE
----------------------------------------------
23: return components;
	00014f40:RET
END_OF_LINE



Function: push_symlink
----------------------------------------------
8: symlink->prev = *stack;
	00014f55:MOV RDX,qword ptr [RAX]
	00014f58:MOV RAX,qword ptr [RBP + -0x10]
	00014f5c:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
9: *stack = symlink;
	00014f67:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
10: return;
	00014f6c:RET
END_OF_LINE



Function: pop_symlink
----------------------------------------------
9: __ptr = *stack;
	00014f81:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
10: *stack = __ptr->prev;
	00014f8c:MOV RDX,qword ptr [RAX]
	00014f8f:MOV RAX,qword ptr [RBP + -0x18]
	00014f93:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
11: free(__ptr);
	00014f9d:CALL 0x00005860
END_OF_LINE
----------------------------------------------
12: return;
	00014fa4:RET
END_OF_LINE



Function: read_symlink
----------------------------------------------
25: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	00014fc1:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
26: piVar5 = __errno_location();
	00014fd0:CALL 0x00005900
END_OF_LINE
----------------------------------------------
27: iVar4 = *piVar5;
	00014fd5:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
28: iVar3 = fstatat(dirfd,name,(stat *)&st,0x100);
	00014fdd:LEA RDX,[RBP + -0xa0]
	00014fe4:MOV RSI,qword ptr [RBP + -0xe0]
	00014feb:MOV EAX,dword ptr [RBP + -0xd4]
	00014ff1:MOV ECX,0x100
	00014ff6:MOV EDI,EAX
	00014ff8:CALL 0x00006090
END_OF_LINE
----------------------------------------------
29: if ((iVar3 != 0) || ((st.st_mode & 0xf000) != 0xa000)) {
	00014ffd:TEST EAX,EAX
	00014fff:JNZ 0x00015013
	00015001:MOV EAX,dword ptr [RBP + -0x88]
	00015007:AND EAX,0xf000
	0001500c:CMP EAX,0xa000
	00015011:JZ 0x0001502a
END_OF_LINE
----------------------------------------------
30: piVar5 = __errno_location();
	00015013:CALL 0x00005900
END_OF_LINE
----------------------------------------------
31: *piVar5 = iVar4;
	0001501e:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
32: __ptr = (symlink *)0x0;
	00015020:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
33: goto LAB_0001529e;
	0001529e:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
35: __ptr = (symlink *)xmalloc(st.st_size + 0x11);
	0001502e:ADD RAX,0x11
	00015032:MOV RDI,RAX
	00015035:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
36: __buf = __ptr + 1;
	00015048:ADD RAX,0x10
END_OF_LINE
----------------------------------------------
37: sVar6 = readlinkat(dirfd,name,(char *)__buf,st.st_size);
	00015070:CALL 0x00005d10
END_OF_LINE
----------------------------------------------
38: if (0 < sVar6) {
	00015084:JLE 0x00015289
END_OF_LINE
----------------------------------------------
39: *(char *)((long)&__buf->prev + sVar6) = '\0';
	00015098:ADD RAX,RDX
	0001509b:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
40: __ptr->path = (char *)__buf;
	000150ac:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
41: if (*(char *)&__buf->prev != '/') goto LAB_0001529e;
	000150b7:MOVZX EAX,byte ptr [RAX]
	000150ba:CMP AL,0x2f
	000150bc:JNZ 0x00015272
	000150c2:LEA RAX,[0x3e068]
	000150c9:MOV EAX,dword ptr [RAX]
	000150cb:CMP EAX,-0x1
	000150ce:JNZ 0x00015115
	000150d0:LEA RAX,[0x405a0]
	000150d7:MOV RSI,RAX
	000150da:LEA RAX,[0x3393c]
	000150e1:MOV RDI,RAX
	000150e4:CALL 0x00005d80
	000150e9:TEST EAX,EAX
	000150eb:JZ 0x000150f6
	000150ed:CALL 0x00005900
	000150f2:MOV EAX,dword ptr [RAX]
	000150f4:JMP 0x000150fb
	000150f6:MOV EAX,0x0
	000150fb:LEA RDX,[0x3e068]
	00015102:MOV dword ptr [RDX],EAX
	00015104:LEA RAX,[0x3e068]
	0001510b:MOV EAX,dword ptr [RAX]
	0001510d:TEST EAX,EAX
	0001510f:JNZ 0x0001527b
	00015115:MOV RDX,qword ptr [RBP + -0xa8]
	0001511c:MOV RAX,qword ptr [RBP + -0xb0]
	00015123:ADD RAX,RDX
	00015126:MOV qword ptr [RBP + -0xc0],RAX
	0001512d:MOV RAX,qword ptr [RBP + -0xc0]
	00015134:MOVZX EAX,byte ptr [RAX]
	00015137:MOV byte ptr [RBP + -0xc9],AL
	0001513d:MOV RAX,qword ptr [RBP + -0xc0]
	00015144:MOV byte ptr [RAX],0x0
	00015147:MOV RAX,qword ptr [RBP + -0xb8]
	0001514e:MOV RAX,qword ptr [RAX + 0x8]
	00015152:LEA RDX,[RBP + -0xa0]
	00015159:MOV RSI,RDX
	0001515c:MOV RDI,RAX
	0001515f:CALL 0x00005d80
	00015164:MOV dword ptr [RBP + -0xc4],EAX
	0001516a:MOV RAX,qword ptr [RBP + -0xc0]
	00015171:MOVZX EDX,byte ptr [RBP + -0xc9]
	00015178:MOV byte ptr [RAX],DL
	0001517a:CMP dword ptr [RBP + -0xc4],0x0
	00015181:JNZ 0x000151e6
	00015183:MOV RDX,qword ptr [RBP + -0xa0]
	0001518a:LEA RAX,[0x405a0]
	00015191:MOV RAX,qword ptr [RAX]
	00015194:CMP RDX,RAX
	00015197:JNZ 0x000151e6
	00015199:MOV RDX,qword ptr [RBP + -0x98]
	000151a0:LEA RAX,[0x405a0]
	000151a7:MOV RAX,qword ptr [RAX + 0x8]
	000151ab:CMP RDX,RAX
	000151ae:JNZ 0x000151e6
	000151b0:JMP 0x000151ba
	000151b2:ADD qword ptr [RBP + -0xc0],0x1
	000151ba:MOV RAX,qword ptr [RBP + -0xc0]
	000151c1:MOVZX EAX,byte ptr [RAX]
	000151c4:CMP AL,0x2f
	000151c6:JZ 0x000151b2
	000151c8:MOV RAX,qword ptr [RBP + -0xb8]
	000151cf:MOV RDX,qword ptr [RBP + -0xc0]
	000151d6:MOV qword ptr [RAX + 0x8],RDX
	000151da:MOV RAX,qword ptr [RBP + -0xb8]
	000151e1:JMP 0x0001529e
	000151e6:SUB qword ptr [RBP + -0xc0],0x1
	000151ee:MOV RAX,qword ptr [RBP + -0xb8]
	000151f5:MOV RAX,qword ptr [RAX + 0x8]
	000151f9:CMP qword ptr [RBP + -0xc0],RAX
	00015200:JZ 0x0001526f
	00015202:JMP 0x0001520c
	00015204:SUB qword ptr [RBP + -0xc0],0x1
	0001520c:MOV RAX,qword ptr [RBP + -0xb8]
	00015213:MOV RAX,qword ptr [RAX + 0x8]
	00015217:ADD RAX,0x1
	0001521b:CMP qword ptr [RBP + -0xc0],RAX
	00015222:JZ 0x0001523c
	00015224:MOV RAX,qword ptr [RBP + -0xc0]
	0001522b:MOVZX EAX,byte ptr [RAX]
	0001522e:CMP AL,0x2f
	00015230:JNZ 0x00015204
	00015232:JMP 0x0001523c
	00015234:SUB qword ptr [RBP + -0xc0],0x1
	0001523c:MOV RAX,qword ptr [RBP + -0xb8]
	00015243:MOV RAX,qword ptr [RAX + 0x8]
	00015247:ADD RAX,0x1
	0001524b:CMP qword ptr [RBP + -0xc0],RAX
	00015252:JZ 0x0001512d
	00015258:MOV RAX,qword ptr [RBP + -0xc0]
	0001525f:SUB RAX,0x1
	00015263:MOVZX EAX,byte ptr [RAX]
	00015266:CMP AL,0x2f
	00015268:JZ 0x00015234
	0001526a:JMP 0x0001512d
	0001526f:NOP
	00015270:JMP 0x0001527c
	00015272:MOV RAX,qword ptr [RBP + -0xb8]
	00015279:JMP 0x0001529e
	0001527b:NOP
	0001527c:CALL 0x00005900
	00015281:MOV dword ptr [RAX],0x12
	00015287:JMP 0x0001528a
	00015289:NOP
	0001528a:MOV RAX,qword ptr [RBP + -0xb8]
	00015291:MOV RDI,RAX
	00015294:CALL 0x00005860
	00015299:MOV EAX,0x0
	0001529e:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
42: if (cwd_stat_errno == -1) {
	000150cb:CMP EAX,-0x1
	000150ce:JNZ 0x00015115
END_OF_LINE
----------------------------------------------
43: iVar4 = stat(".",(stat *)&cwd_stat);
	000150e4:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
44: if (iVar4 == 0) {
	000150e9:TEST EAX,EAX
	000150eb:JZ 0x000150f6
END_OF_LINE
----------------------------------------------
45: cwd_stat_errno = 0;
	000150f6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
48: piVar5 = __errno_location();
	000150ed:CALL 0x00005900
END_OF_LINE
----------------------------------------------
49: cwd_stat_errno = *piVar5;
	000150f2:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
51: if (cwd_stat_errno == 0) goto LAB_00015115;
	0001510d:TEST EAX,EAX
	0001510f:JNZ 0x0001527b
	00015115:MOV RDX,qword ptr [RBP + -0xa8]
END_OF_LINE
----------------------------------------------
54: LAB_00015115:
	00015115:MOV RDX,qword ptr [RBP + -0xa8]
END_OF_LINE
----------------------------------------------
55: end = (char *)((long)&__buf->prev + sVar6);
	00015123:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
56: while( true ) {
	00015200:JZ 0x0001526f
END_OF_LINE
----------------------------------------------
57: cVar1 = *end;
	00015134:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
58: *end = '\0';
	00015144:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
59: iVar4 = stat(__ptr->path,(stat *)&st);
	0001514e:MOV RAX,qword ptr [RAX + 0x8]
	00015152:LEA RDX,[RBP + -0xa0]
	00015159:MOV RSI,RDX
	0001515c:MOV RDI,RAX
	0001515f:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
60: *end = cVar1;
	00015178:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
61: if (((iVar4 == 0) && (st.st_dev == cwd_stat.st_dev)) && (st.st_ino == cwd_stat.st_ino))
	0001517a:CMP dword ptr [RBP + -0xc4],0x0
	00015181:JNZ 0x000151e6
	00015183:MOV RDX,qword ptr [RBP + -0xa0]
	0001518a:LEA RAX,[0x405a0]
	00015191:MOV RAX,qword ptr [RAX]
	00015194:CMP RDX,RAX
	00015197:JNZ 0x000151e6
	00015199:MOV RDX,qword ptr [RBP + -0x98]
	000151a0:LEA RAX,[0x405a0]
	000151a7:MOV RAX,qword ptr [RAX + 0x8]
	000151ab:CMP RDX,RAX
	000151ae:JNZ 0x000151e6
END_OF_LINE
----------------------------------------------
62: goto LAB_000151ba;
	000151ba:MOV RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
63: end = end + -1;
	000151e6:SUB qword ptr [RBP + -0xc0],0x1
END_OF_LINE
----------------------------------------------
64: if (end == __ptr->path) break;
	000151f5:MOV RAX,qword ptr [RAX + 0x8]
	000151f9:CMP qword ptr [RBP + -0xc0],RAX
	00015200:JZ 0x0001526f
END_OF_LINE
----------------------------------------------
65: for (; (end != __ptr->path + 1 && (*end != '/')); end = end + -1) {
	00015204:SUB qword ptr [RBP + -0xc0],0x1
	0001520c:MOV RAX,qword ptr [RBP + -0xb8]
	00015213:MOV RAX,qword ptr [RAX + 0x8]
	00015217:ADD RAX,0x1
	0001521b:CMP qword ptr [RBP + -0xc0],RAX
	00015222:JZ 0x0001523c
	00015224:MOV RAX,qword ptr [RBP + -0xc0]
	0001522b:MOVZX EAX,byte ptr [RAX]
	0001522e:CMP AL,0x2f
	00015230:JNZ 0x00015204
END_OF_LINE
----------------------------------------------
67: for (; (end != __ptr->path + 1 && (end[-1] == '/')); end = end + -1) {
	00015234:SUB qword ptr [RBP + -0xc0],0x1
	0001523c:MOV RAX,qword ptr [RBP + -0xb8]
	00015243:MOV RAX,qword ptr [RAX + 0x8]
	00015247:ADD RAX,0x1
	0001524b:CMP qword ptr [RBP + -0xc0],RAX
	00015252:JZ 0x0001512d
	00015258:MOV RAX,qword ptr [RBP + -0xc0]
	0001525f:SUB RAX,0x1
	00015263:MOVZX EAX,byte ptr [RAX]
	00015266:CMP AL,0x2f
	00015268:JZ 0x00015234
END_OF_LINE
----------------------------------------------
71: piVar5 = __errno_location();
	0001527c:CALL 0x00005900
END_OF_LINE
----------------------------------------------
72: *piVar5 = 0x12;
	00015281:MOV dword ptr [RAX],0x12
END_OF_LINE
----------------------------------------------
74: free(__ptr);
	00015294:CALL 0x00005860
END_OF_LINE
----------------------------------------------
75: __ptr = (symlink *)0x0;
	00015299:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
76: LAB_0001529e:
	0001529e:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
77: if (lVar2 == *(long *)(in_FS_OFFSET + 0x28)) {
	000152a2:SUB RDX,qword ptr FS:[0x28]
	000152ab:JZ 0x000152b2
END_OF_LINE
----------------------------------------------
78: return __ptr;
	000152b3:RET
END_OF_LINE
----------------------------------------------
81: __stack_chk_fail();
	000152ad:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
82: LAB_000151ba:
	000151ba:MOV RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
83: for (; *end == '/'; end = end + 1) {
	000151b2:ADD qword ptr [RBP + -0xc0],0x1
	000151ba:MOV RAX,qword ptr [RBP + -0xc0]
	000151c1:MOVZX EAX,byte ptr [RAX]
	000151c4:CMP AL,0x2f
	000151c6:JZ 0x000151b2
END_OF_LINE
----------------------------------------------
85: __ptr->path = end;
	000151d6:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
86: goto LAB_0001529e;
	0001529e:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE



Function: traverse_next
----------------------------------------------
26: pppsVar8 = &symlink_local;
	000152bc:SUB RSP,0x40
END_OF_LINE
----------------------------------------------
27: dir_local = dir;
	000152c0:MOV qword ptr [RBP + -0x28],RDI
END_OF_LINE
----------------------------------------------
28: path_local = path;
	000152c4:MOV qword ptr [RBP + -0x30],RSI
END_OF_LINE
----------------------------------------------
29: keepfd_local = keepfd;
	000152c8:MOV dword ptr [RBP + -0x34],EDX
END_OF_LINE
----------------------------------------------
30: symlink_local = symlink;
	000152cb:MOV qword ptr [RBP + -0x40],RCX
END_OF_LINE
----------------------------------------------
31: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	000152cf:MOV RAX,qword ptr FS:[0x28]
	000152d8:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
32: entry = dir;
	000152ed:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
33: for (p = *path; (*p != '\0' && (*p != '/')); p = p + 1) {
	000152e2:MOV RAX,qword ptr [RAX]
	000152e5:MOV qword ptr [RBP + -0x20],RAX
	000152e9:MOV RAX,qword ptr [RBP + -0x28]
	000152ed:MOV qword ptr [RBP + -0x18],RAX
	000152f1:JMP 0x000152f8
	000152f3:ADD qword ptr [RBP + -0x20],0x1
	000152f8:MOV RAX,qword ptr [RBP + -0x20]
	000152fc:MOVZX EAX,byte ptr [RAX]
	000152ff:TEST AL,AL
	00015301:JZ 0x0001530e
	00015303:MOV RAX,qword ptr [RBP + -0x20]
	00015307:MOVZX EAX,byte ptr [RAX]
	0001530a:CMP AL,0x2f
	0001530c:JNZ 0x000152f3
END_OF_LINE
----------------------------------------------
35: if ((**path != '.') || (pppsVar9 = &symlink_local, p != *path + 1)) {
	000152bc:SUB RSP,0x40
	000152c0:MOV qword ptr [RBP + -0x28],RDI
	000152c4:MOV qword ptr [RBP + -0x30],RSI
	000152c8:MOV dword ptr [RBP + -0x34],EDX
	000152cb:MOV qword ptr [RBP + -0x40],RCX
	000152cf:MOV RAX,qword ptr FS:[0x28]
	000152d8:MOV qword ptr [RBP + -0x8],RAX
	000152dc:XOR EAX,EAX
	000152de:MOV RAX,qword ptr [RBP + -0x30]
	000152e2:MOV RAX,qword ptr [RAX]
	000152e5:MOV qword ptr [RBP + -0x20],RAX
	000152e9:MOV RAX,qword ptr [RBP + -0x28]
	000152ed:MOV qword ptr [RBP + -0x18],RAX
	000152f1:JMP 0x000152f8
	000152f3:ADD qword ptr [RBP + -0x20],0x1
	000152f8:MOV RAX,qword ptr [RBP + -0x20]
	000152fc:MOVZX EAX,byte ptr [RAX]
	000152ff:TEST AL,AL
	00015301:JZ 0x0001530e
	00015303:MOV RAX,qword ptr [RBP + -0x20]
	00015307:MOVZX EAX,byte ptr [RAX]
	0001530a:CMP AL,0x2f
	0001530c:JNZ 0x000152f3
	0001530e:MOV RAX,qword ptr [RBP + -0x30]
	00015312:MOV RAX,qword ptr [RAX]
	00015315:MOVZX EAX,byte ptr [RAX]
	00015318:CMP AL,0x2e
	0001531a:JNZ 0x00015331
	0001531c:MOV RAX,qword ptr [RBP + -0x30]
	00015320:MOV RAX,qword ptr [RAX]
	00015323:ADD RAX,0x1
	00015327:CMP qword ptr [RBP + -0x20],RAX
	0001532b:JZ 0x00015548
END_OF_LINE
----------------------------------------------
36: if ((**path == '.') && (((*path)[1] == '.' && (p == *path + 2)))) {
	00015335:MOV RAX,qword ptr [RAX]
	00015338:MOVZX EAX,byte ptr [RAX]
	0001533b:CMP AL,0x2e
	0001533d:JNZ 0x000153e0
	00015343:MOV RAX,qword ptr [RBP + -0x30]
	00015347:MOV RAX,qword ptr [RAX]
	0001534a:ADD RAX,0x1
	0001534e:MOVZX EAX,byte ptr [RAX]
	00015351:CMP AL,0x2e
	00015353:JNZ 0x000153e0
	00015359:MOV RAX,qword ptr [RBP + -0x30]
	0001535d:MOV RAX,qword ptr [RAX]
	00015360:ADD RAX,0x2
	00015364:CMP qword ptr [RBP + -0x20],RAX
	00015368:JNZ 0x000153e0
END_OF_LINE
----------------------------------------------
37: entry = dir->parent;
	0001536e:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
38: if (entry == (cached_dirfd *)0x0) {
	00015376:CMP qword ptr [RBP + -0x18],0x0
	0001537b:JNZ 0x0001538d
END_OF_LINE
----------------------------------------------
39: piVar5 = __errno_location();
	0001537d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
40: *piVar5 = 0x12;
	00015382:MOV dword ptr [RAX],0x12
END_OF_LINE
----------------------------------------------
41: pppsVar9 = &symlink_local;
	000152bc:SUB RSP,0x40
	000152c0:MOV qword ptr [RBP + -0x28],RDI
	000152c4:MOV qword ptr [RBP + -0x30],RSI
	000152c8:MOV dword ptr [RBP + -0x34],EDX
	000152cb:MOV qword ptr [RBP + -0x40],RCX
	000152cf:MOV RAX,qword ptr FS:[0x28]
	000152d8:MOV qword ptr [RBP + -0x8],RAX
	000152dc:XOR EAX,EAX
	000152de:MOV RAX,qword ptr [RBP + -0x30]
	000152e2:MOV RAX,qword ptr [RAX]
	000152e5:MOV qword ptr [RBP + -0x20],RAX
	000152e9:MOV RAX,qword ptr [RBP + -0x28]
	000152ed:MOV qword ptr [RBP + -0x18],RAX
	000152f1:JMP 0x000152f8
	000152f3:ADD qword ptr [RBP + -0x20],0x1
	000152f8:MOV RAX,qword ptr [RBP + -0x20]
	000152fc:MOVZX EAX,byte ptr [RAX]
	000152ff:TEST AL,AL
	00015301:JZ 0x0001530e
	00015303:MOV RAX,qword ptr [RBP + -0x20]
	00015307:MOVZX EAX,byte ptr [RAX]
	0001530a:CMP AL,0x2f
	0001530c:JNZ 0x000152f3
	0001530e:MOV RAX,qword ptr [RBP + -0x30]
	00015312:MOV RAX,qword ptr [RAX]
	00015315:MOVZX EAX,byte ptr [RAX]
	00015318:CMP AL,0x2e
	0001531a:JNZ 0x00015331
	0001531c:MOV RAX,qword ptr [RBP + -0x30]
	00015320:MOV RAX,qword ptr [RAX]
	00015323:ADD RAX,0x1
	00015327:CMP qword ptr [RBP + -0x20],RAX
	0001532b:JZ 0x00015548
	00015331:MOV RAX,qword ptr [RBP + -0x30]
	00015335:MOV RAX,qword ptr [RAX]
	00015338:MOVZX EAX,byte ptr [RAX]
	0001533b:CMP AL,0x2e
	0001533d:JNZ 0x000153e0
	00015343:MOV RAX,qword ptr [RBP + -0x30]
	00015347:MOV RAX,qword ptr [RAX]
	0001534a:ADD RAX,0x1
	0001534e:MOVZX EAX,byte ptr [RAX]
	00015351:CMP AL,0x2e
	00015353:JNZ 0x000153e0
	00015359:MOV RAX,qword ptr [RBP + -0x30]
	0001535d:MOV RAX,qword ptr [RAX]
	00015360:ADD RAX,0x2
	00015364:CMP qword ptr [RBP + -0x20],RAX
	00015368:JNZ 0x000153e0
	0001536a:MOV RAX,qword ptr [RBP + -0x28]
	0001536e:MOV RAX,qword ptr [RAX + 0x30]
	00015372:MOV qword ptr [RBP + -0x18],RAX
	00015376:CMP qword ptr [RBP + -0x18],0x0
	0001537b:JNZ 0x0001538d
	0001537d:CALL 0x00005900
	00015382:MOV dword ptr [RAX],0x12
	00015388:JMP 0x00015561
END_OF_LINE
----------------------------------------------
42: goto LAB_00015561;
	00015561:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
44: _Var4 = list_empty(&dir->lru_link);
	00015394:CALL 0x00014865
END_OF_LINE
----------------------------------------------
45: if (!_Var4) {
	0001539b:JNZ 0x000153c5
END_OF_LINE
----------------------------------------------
47: __assert_fail("list_empty (&dir->lru_link)","safe.c",0x185,"traverse_next");
	000153c0:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
49: list_add(&dir_local->lru_link,&lru_list);
	000153d6:CALL 0x000147ba
END_OF_LINE
----------------------------------------------
50: pppsVar9 = &symlink_local;
	000152bc:SUB RSP,0x40
	000152c0:MOV qword ptr [RBP + -0x28],RDI
	000152c4:MOV qword ptr [RBP + -0x30],RSI
	000152c8:MOV dword ptr [RBP + -0x34],EDX
	000152cb:MOV qword ptr [RBP + -0x40],RCX
	000152cf:MOV RAX,qword ptr FS:[0x28]
	000152d8:MOV qword ptr [RBP + -0x8],RAX
	000152dc:XOR EAX,EAX
	000152de:MOV RAX,qword ptr [RBP + -0x30]
	000152e2:MOV RAX,qword ptr [RAX]
	000152e5:MOV qword ptr [RBP + -0x20],RAX
	000152e9:MOV RAX,qword ptr [RBP + -0x28]
	000152ed:MOV qword ptr [RBP + -0x18],RAX
	000152f1:JMP 0x000152f8
	000152f3:ADD qword ptr [RBP + -0x20],0x1
	000152f8:MOV RAX,qword ptr [RBP + -0x20]
	000152fc:MOVZX EAX,byte ptr [RAX]
	000152ff:TEST AL,AL
	00015301:JZ 0x0001530e
	00015303:MOV RAX,qword ptr [RBP + -0x20]
	00015307:MOVZX EAX,byte ptr [RAX]
	0001530a:CMP AL,0x2f
	0001530c:JNZ 0x000152f3
	0001530e:MOV RAX,qword ptr [RBP + -0x30]
	00015312:MOV RAX,qword ptr [RAX]
	00015315:MOVZX EAX,byte ptr [RAX]
	00015318:CMP AL,0x2e
	0001531a:JNZ 0x00015331
	0001531c:MOV RAX,qword ptr [RBP + -0x30]
	00015320:MOV RAX,qword ptr [RAX]
	00015323:ADD RAX,0x1
	00015327:CMP qword ptr [RBP + -0x20],RAX
	0001532b:JZ 0x00015548
	00015331:MOV RAX,qword ptr [RBP + -0x30]
	00015335:MOV RAX,qword ptr [RAX]
	00015338:MOVZX EAX,byte ptr [RAX]
	0001533b:CMP AL,0x2e
	0001533d:JNZ 0x000153e0
	00015343:MOV RAX,qword ptr [RBP + -0x30]
	00015347:MOV RAX,qword ptr [RAX]
	0001534a:ADD RAX,0x1
	0001534e:MOVZX EAX,byte ptr [RAX]
	00015351:CMP AL,0x2e
	00015353:JNZ 0x000153e0
	00015359:MOV RAX,qword ptr [RBP + -0x30]
	0001535d:MOV RAX,qword ptr [RAX]
	00015360:ADD RAX,0x2
	00015364:CMP qword ptr [RBP + -0x20],RAX
	00015368:JNZ 0x000153e0
	0001536a:MOV RAX,qword ptr [RBP + -0x28]
	0001536e:MOV RAX,qword ptr [RAX + 0x30]
	00015372:MOV qword ptr [RBP + -0x18],RAX
	00015376:CMP qword ptr [RBP + -0x18],0x0
	0001537b:JNZ 0x0001538d
	0001537d:CALL 0x00005900
	00015382:MOV dword ptr [RAX],0x12
	00015388:JMP 0x00015561
	0001538d:MOV RAX,qword ptr [RBP + -0x28]
	00015391:MOV RDI,RAX
	00015394:CALL 0x00014865
	00015399:TEST AL,AL
	0001539b:JNZ 0x000153c5
	0001539d:LEA RAX,[0x339b8]
	000153a4:MOV RCX,RAX
	000153a7:MOV EDX,0x185
	000153ac:LEA RAX,[0x33904]
	000153b3:MOV RSI,RAX
	000153b6:LEA RAX,[0x3393e]
	000153bd:MOV RDI,RAX
	000153c0:CALL 0x00005bf0
	000153c5:MOV RAX,qword ptr [RBP + -0x28]
	000153c9:LEA RDX,[0x3e0d0]
	000153d0:MOV RSI,RDX
	000153d3:MOV RDI,RAX
	000153d6:CALL 0x000147ba
	000153db:JMP 0x0001554c
END_OF_LINE
----------------------------------------------
53: uVar6 = ((ulong)(p + (0x18 - (long)*path)) / 0x10) * 0x10;
	000153e4:MOV RDX,qword ptr [RAX]
	000153e7:MOV RAX,qword ptr [RBP + -0x20]
	000153eb:SUB RAX,RDX
	000153ee:ADD RAX,0x1
	000153f2:LEA RDX,[RAX + 0x8]
	000153f6:MOV EAX,0x10
	000153fb:SUB RAX,0x1
	000153ff:ADD RAX,RDX
	00015402:MOV ESI,0x10
	00015407:MOV EDX,0x0
	0001540c:DIV RSI
	0001540f:IMUL RAX,RAX,0x10
END_OF_LINE
----------------------------------------------
54: for (; pppsVar8 != (symlink ***)((long)&symlink_local - (uVar6 & 0xfffffffffffff000));
	00015416:AND RCX,-0x1000
	0001541d:MOV RDX,RSP
	00015420:SUB RDX,RCX
	00015423:CMP RSP,RDX
	00015426:JZ 0x0001543a
END_OF_LINE
----------------------------------------------
55: pppsVar8 = (symlink ***)((long)pppsVar8 + -0x1000)) {
	00015428:SUB RSP,0x1000
END_OF_LINE
----------------------------------------------
56: *(undefined8 *)((long)pppsVar8 + -8) = *(undefined8 *)((long)pppsVar8 + -8);
	0001542f:OR qword ptr [RSP + 0xff8],0x0
END_OF_LINE
----------------------------------------------
58: lVar3 = -(ulong)((uint)uVar6 & 0xfff);
	0001543d:AND EDX,0xfff
	00015443:SUB RSP,RDX
END_OF_LINE
----------------------------------------------
59: if ((uVar6 & 0xfff) != 0) {
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
END_OF_LINE
----------------------------------------------
60: *(undefined8 *)((long)pppsVar8 + ((ulong)((uint)uVar6 & 0xfff) - 8) + lVar3) =
	0001543d:AND EDX,0xfff
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
61: *(undefined8 *)((long)pppsVar8 + ((ulong)((uint)uVar6 & 0xfff) - 8) + lVar3);
	0001543d:AND EDX,0xfff
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
63: __n = (long)p - (long)*path_local;
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
64: pcVar2 = *path_local;
	0001548c:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
65: name = (char *)((ulong)((long)pppsVar8 + lVar3 + 0xf) & 0xfffffffffffffff0);
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
66: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x1549e;
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
67: memcpy((char *)((ulong)((long)pppsVar8 + lVar3 + 0xf) & 0xfffffffffffffff0),pcVar2,__n);
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
68: pcVar2 = name;
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
69: dir_00 = dir_local;
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
70: iVar1 = keepfd_local;
	00015499:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
71: name[(long)p - (long)*path_local] = '\0';
	000154a2:MOV RDX,qword ptr [RAX]
	000154a5:MOV RAX,qword ptr [RBP + -0x20]
	000154a9:SUB RAX,RDX
	000154ac:MOV RDX,RAX
	000154af:MOV RAX,qword ptr [RBP + -0x10]
	000154b3:ADD RAX,RDX
	000154b6:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
72: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x154cf;
	000154ca:CALL 0x00014e0f
END_OF_LINE
----------------------------------------------
73: entry = openat_cached(dir_00,pcVar2,iVar1);
	000154ca:CALL 0x00014e0f
END_OF_LINE
----------------------------------------------
74: pppsVar9 = (symlink ***)((long)pppsVar8 + lVar3);
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
	00015464:MOV RAX,RSP
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
	0001549e:MOV RAX,qword ptr [RBP + -0x30]
	000154a2:MOV RDX,qword ptr [RAX]
	000154a5:MOV RAX,qword ptr [RBP + -0x20]
	000154a9:SUB RAX,RDX
	000154ac:MOV RDX,RAX
	000154af:MOV RAX,qword ptr [RBP + -0x10]
	000154b3:ADD RAX,RDX
	000154b6:MOV byte ptr [RAX],0x0
	000154b9:MOV EDX,dword ptr [RBP + -0x34]
	000154bc:MOV RCX,qword ptr [RBP + -0x10]
	000154c0:MOV RAX,qword ptr [RBP + -0x28]
	000154c4:MOV RSI,RCX
	000154c7:MOV RDI,RAX
	000154ca:CALL 0x00014e0f
	000154cf:MOV qword ptr [RBP + -0x18],RAX
	000154d3:CMP qword ptr [RBP + -0x18],0x0
	000154d8:JNZ 0x0001554b
END_OF_LINE
----------------------------------------------
75: if (entry == (cached_dirfd *)0x0) {
	000154d3:CMP qword ptr [RBP + -0x18],0x0
	000154d8:JNZ 0x0001554b
END_OF_LINE
----------------------------------------------
76: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x154df;
	000154da:CALL 0x00005900
END_OF_LINE
----------------------------------------------
77: piVar5 = __errno_location();
	000154da:CALL 0x00005900
END_OF_LINE
----------------------------------------------
78: if (*piVar5 != 0x28) {
	000154df:MOV EAX,dword ptr [RAX]
	000154e1:CMP EAX,0x28
	000154e4:JZ 0x00015509
END_OF_LINE
----------------------------------------------
79: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x154eb;
	000154e6:CALL 0x00005900
END_OF_LINE
----------------------------------------------
80: piVar5 = __errno_location();
	000154e6:CALL 0x00005900
END_OF_LINE
----------------------------------------------
81: if (*piVar5 != 0x1f) {
	000154eb:MOV EAX,dword ptr [RAX]
	000154ed:CMP EAX,0x1f
	000154f0:JZ 0x00015509
END_OF_LINE
----------------------------------------------
82: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x154f7;
	000154f2:CALL 0x00005900
END_OF_LINE
----------------------------------------------
83: piVar5 = __errno_location();
	000154f2:CALL 0x00005900
END_OF_LINE
----------------------------------------------
84: if (*piVar5 != 0) {
	000154f7:MOV EAX,dword ptr [RAX]
	000154f9:TEST EAX,EAX
	000154fb:JZ 0x00015509
END_OF_LINE
----------------------------------------------
85: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x15502;
	000154fd:CALL 0x00005900
END_OF_LINE
----------------------------------------------
86: piVar5 = __errno_location();
	000154fd:CALL 0x00005900
END_OF_LINE
----------------------------------------------
87: pppsVar9 = (symlink ***)((long)pppsVar8 + lVar3);
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
	00015464:MOV RAX,RSP
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
	0001549e:MOV RAX,qword ptr [RBP + -0x30]
	000154a2:MOV RDX,qword ptr [RAX]
	000154a5:MOV RAX,qword ptr [RBP + -0x20]
	000154a9:SUB RAX,RDX
	000154ac:MOV RDX,RAX
	000154af:MOV RAX,qword ptr [RBP + -0x10]
	000154b3:ADD RAX,RDX
	000154b6:MOV byte ptr [RAX],0x0
	000154b9:MOV EDX,dword ptr [RBP + -0x34]
	000154bc:MOV RCX,qword ptr [RBP + -0x10]
	000154c0:MOV RAX,qword ptr [RBP + -0x28]
	000154c4:MOV RSI,RCX
	000154c7:MOV RDI,RAX
	000154ca:CALL 0x00014e0f
	000154cf:MOV qword ptr [RBP + -0x18],RAX
	000154d3:CMP qword ptr [RBP + -0x18],0x0
	000154d8:JNZ 0x0001554b
	000154da:CALL 0x00005900
	000154df:MOV EAX,dword ptr [RAX]
	000154e1:CMP EAX,0x28
	000154e4:JZ 0x00015509
	000154e6:CALL 0x00005900
	000154eb:MOV EAX,dword ptr [RAX]
	000154ed:CMP EAX,0x1f
	000154f0:JZ 0x00015509
	000154f2:CALL 0x00005900
	000154f7:MOV EAX,dword ptr [RAX]
	000154f9:TEST EAX,EAX
	000154fb:JZ 0x00015509
	000154fd:CALL 0x00005900
	00015502:MOV EAX,dword ptr [RAX]
	00015504:CMP EAX,0x14
	00015507:JNZ 0x00015560
END_OF_LINE
----------------------------------------------
88: if (*piVar5 != 0x14) goto LAB_00015561;
	00015502:MOV EAX,dword ptr [RAX]
	00015504:CMP EAX,0x14
	00015507:JNZ 0x00015560
	00015509:MOV RAX,qword ptr [RBP + -0x28]
	0001550d:MOV EAX,dword ptr [RAX + 0x40]
	00015510:MOV RDX,qword ptr [RBP + -0x10]
	00015514:MOV RSI,RDX
	00015517:MOV EDI,EAX
	00015519:CALL 0x00014fa5
	0001551e:MOV RDX,qword ptr [RBP + -0x40]
	00015522:MOV qword ptr [RDX],RAX
	00015525:MOV RAX,qword ptr [RBP + -0x40]
	00015529:MOV RAX,qword ptr [RAX]
	0001552c:TEST RAX,RAX
	0001552f:JZ 0x0001553b
	00015531:MOV RAX,qword ptr [RBP + -0x28]
	00015535:MOV qword ptr [RBP + -0x18],RAX
	00015539:JMP 0x0001554c
	0001553b:CALL 0x00005900
	00015540:MOV dword ptr [RAX],0x28
	00015546:JMP 0x00015560
	00015548:NOP
	00015549:JMP 0x00015553
	0001554b:NOP
	0001554c:JMP 0x00015553
	0001554e:ADD qword ptr [RBP + -0x20],0x1
	00015553:MOV RAX,qword ptr [RBP + -0x20]
	00015557:MOVZX EAX,byte ptr [RAX]
	0001555a:CMP AL,0x2f
	0001555c:JZ 0x0001554e
	0001555e:JMP 0x00015561
	00015560:NOP
	00015561:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
92: pcVar2 = name;
	00015509:MOV RAX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
93: iVar1 = dir_local->fd;
	0001550d:MOV EAX,dword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
94: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x1551e;
	00015519:CALL 0x00014fa5
END_OF_LINE
----------------------------------------------
95: psVar7 = read_symlink(iVar1,pcVar2);
	00015519:CALL 0x00014fa5
END_OF_LINE
----------------------------------------------
96: *symlink_local = psVar7;
	00015522:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
97: if (*symlink_local == (symlink *)0x0) {
	00015529:MOV RAX,qword ptr [RAX]
	0001552c:TEST RAX,RAX
	0001552f:JZ 0x0001553b
END_OF_LINE
----------------------------------------------
98: *(undefined8 *)((long)pppsVar8 + lVar3 + -8) = 0x15540;
	0001553b:CALL 0x00005900
END_OF_LINE
----------------------------------------------
99: piVar5 = __errno_location();
	0001553b:CALL 0x00005900
END_OF_LINE
----------------------------------------------
100: *piVar5 = 0x28;
	00015540:MOV dword ptr [RAX],0x28
END_OF_LINE
----------------------------------------------
101: pppsVar9 = (symlink ***)((long)pppsVar8 + lVar3);
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
	00015464:MOV RAX,RSP
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
	0001549e:MOV RAX,qword ptr [RBP + -0x30]
	000154a2:MOV RDX,qword ptr [RAX]
	000154a5:MOV RAX,qword ptr [RBP + -0x20]
	000154a9:SUB RAX,RDX
	000154ac:MOV RDX,RAX
	000154af:MOV RAX,qword ptr [RBP + -0x10]
	000154b3:ADD RAX,RDX
	000154b6:MOV byte ptr [RAX],0x0
	000154b9:MOV EDX,dword ptr [RBP + -0x34]
	000154bc:MOV RCX,qword ptr [RBP + -0x10]
	000154c0:MOV RAX,qword ptr [RBP + -0x28]
	000154c4:MOV RSI,RCX
	000154c7:MOV RDI,RAX
	000154ca:CALL 0x00014e0f
	000154cf:MOV qword ptr [RBP + -0x18],RAX
	000154d3:CMP qword ptr [RBP + -0x18],0x0
	000154d8:JNZ 0x0001554b
	000154da:CALL 0x00005900
	000154df:MOV EAX,dword ptr [RAX]
	000154e1:CMP EAX,0x28
	000154e4:JZ 0x00015509
	000154e6:CALL 0x00005900
	000154eb:MOV EAX,dword ptr [RAX]
	000154ed:CMP EAX,0x1f
	000154f0:JZ 0x00015509
	000154f2:CALL 0x00005900
	000154f7:MOV EAX,dword ptr [RAX]
	000154f9:TEST EAX,EAX
	000154fb:JZ 0x00015509
	000154fd:CALL 0x00005900
	00015502:MOV EAX,dword ptr [RAX]
	00015504:CMP EAX,0x14
	00015507:JNZ 0x00015560
	00015509:MOV RAX,qword ptr [RBP + -0x28]
	0001550d:MOV EAX,dword ptr [RAX + 0x40]
	00015510:MOV RDX,qword ptr [RBP + -0x10]
	00015514:MOV RSI,RDX
	00015517:MOV EDI,EAX
	00015519:CALL 0x00014fa5
	0001551e:MOV RDX,qword ptr [RBP + -0x40]
	00015522:MOV qword ptr [RDX],RAX
	00015525:MOV RAX,qword ptr [RBP + -0x40]
	00015529:MOV RAX,qword ptr [RAX]
	0001552c:TEST RAX,RAX
	0001552f:JZ 0x0001553b
	00015531:MOV RAX,qword ptr [RBP + -0x28]
	00015535:MOV qword ptr [RBP + -0x18],RAX
	00015539:JMP 0x0001554c
	0001553b:CALL 0x00005900
	00015540:MOV dword ptr [RAX],0x28
	00015546:JMP 0x00015560
END_OF_LINE
----------------------------------------------
102: goto LAB_00015561;
	00015561:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
104: entry = dir_local;
	00015535:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
105: pppsVar9 = (symlink ***)((long)pppsVar8 + lVar3);
	00015443:SUB RSP,RDX
	00015446:MOV RDX,RAX
	00015449:AND EDX,0xfff
	0001544f:TEST RDX,RDX
	00015452:JZ 0x00015464
	00015454:AND EAX,0xfff
	00015459:SUB RAX,0x8
	0001545d:ADD RAX,RSP
	00015460:OR qword ptr [RAX],0x0
	00015464:MOV RAX,RSP
	00015467:ADD RAX,0xf
	0001546b:SHR RAX,0x4
	0001546f:SHL RAX,0x4
	00015473:MOV qword ptr [RBP + -0x10],RAX
	00015477:MOV RAX,qword ptr [RBP + -0x30]
	0001547b:MOV RDX,qword ptr [RAX]
	0001547e:MOV RAX,qword ptr [RBP + -0x20]
	00015482:SUB RAX,RDX
	00015485:MOV RDX,RAX
	00015488:MOV RAX,qword ptr [RBP + -0x30]
	0001548c:MOV RCX,qword ptr [RAX]
	0001548f:MOV RAX,qword ptr [RBP + -0x10]
	00015493:MOV RSI,RCX
	00015496:MOV RDI,RAX
	00015499:CALL 0x00005d90
	0001549e:MOV RAX,qword ptr [RBP + -0x30]
	000154a2:MOV RDX,qword ptr [RAX]
	000154a5:MOV RAX,qword ptr [RBP + -0x20]
	000154a9:SUB RAX,RDX
	000154ac:MOV RDX,RAX
	000154af:MOV RAX,qword ptr [RBP + -0x10]
	000154b3:ADD RAX,RDX
	000154b6:MOV byte ptr [RAX],0x0
	000154b9:MOV EDX,dword ptr [RBP + -0x34]
	000154bc:MOV RCX,qword ptr [RBP + -0x10]
	000154c0:MOV RAX,qword ptr [RBP + -0x28]
	000154c4:MOV RSI,RCX
	000154c7:MOV RDI,RAX
	000154ca:CALL 0x00014e0f
	000154cf:MOV qword ptr [RBP + -0x18],RAX
	000154d3:CMP qword ptr [RBP + -0x18],0x0
	000154d8:JNZ 0x0001554b
	000154da:CALL 0x00005900
	000154df:MOV EAX,dword ptr [RAX]
	000154e1:CMP EAX,0x28
	000154e4:JZ 0x00015509
	000154e6:CALL 0x00005900
	000154eb:MOV EAX,dword ptr [RAX]
	000154ed:CMP EAX,0x1f
	000154f0:JZ 0x00015509
	000154f2:CALL 0x00005900
	000154f7:MOV EAX,dword ptr [RAX]
	000154f9:TEST EAX,EAX
	000154fb:JZ 0x00015509
	000154fd:CALL 0x00005900
	00015502:MOV EAX,dword ptr [RAX]
	00015504:CMP EAX,0x14
	00015507:JNZ 0x00015560
	00015509:MOV RAX,qword ptr [RBP + -0x28]
	0001550d:MOV EAX,dword ptr [RAX + 0x40]
	00015510:MOV RDX,qword ptr [RBP + -0x10]
	00015514:MOV RSI,RDX
	00015517:MOV EDI,EAX
	00015519:CALL 0x00014fa5
	0001551e:MOV RDX,qword ptr [RBP + -0x40]
	00015522:MOV qword ptr [RDX],RAX
	00015525:MOV RAX,qword ptr [RBP + -0x40]
	00015529:MOV RAX,qword ptr [RAX]
	0001552c:TEST RAX,RAX
	0001552f:JZ 0x0001553b
	00015531:MOV RAX,qword ptr [RBP + -0x28]
	00015535:MOV qword ptr [RBP + -0x18],RAX
	00015539:JMP 0x0001554c
END_OF_LINE
----------------------------------------------
109: for (; *p == '/'; p = p + 1) {
	0001554e:ADD qword ptr [RBP + -0x20],0x1
	00015553:MOV RAX,qword ptr [RBP + -0x20]
	00015557:MOVZX EAX,byte ptr [RAX]
	0001555a:CMP AL,0x2f
	0001555c:JZ 0x0001554e
END_OF_LINE
----------------------------------------------
111: LAB_00015561:
	00015561:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
112: *path_local = p;
	00015569:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
113: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	00015574:SUB RDX,qword ptr FS:[0x28]
	0001557d:JZ 0x00015584
END_OF_LINE
----------------------------------------------
114: return entry;
	0001556c:MOV RAX,qword ptr [RBP + -0x18]
	00015570:MOV RDX,qword ptr [RBP + -0x8]
	00015574:SUB RDX,qword ptr FS:[0x28]
	0001557d:JZ 0x00015584
	0001557f:CALL 0x00005b00
	00015584:LEAVE
	00015585:RET
END_OF_LINE
----------------------------------------------
117: *(undefined8 *)((long)pppsVar9 + -8) = 0x15584;
	0001557f:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
118: __stack_chk_fail();
	0001557f:CALL 0x00005b00
END_OF_LINE



Function: traverse_another_path
----------------------------------------------
37: puVar11 = auStack_88;
	0001558f:SUB RSP,0x78
END_OF_LINE
----------------------------------------------
38: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	0001559a:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
39: misses = dirfd_cache_misses;
	000155b2:MOV dword ptr [RBP + -0x6c],EAX
END_OF_LINE
----------------------------------------------
40: path = *pathname;
	000155b9:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
41: dir = &traverse_another_path::cwd;
	000155c7:MOV qword ptr [RBP + -0x48],RAX
END_OF_LINE
----------------------------------------------
42: stack = (symlink *)0x0;
	000155cb:MOV qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
43: keepfd_local = keepfd;
	000155da:CALL 0x00014ec7
END_OF_LINE
----------------------------------------------
44: pathname_local = pathname;
	000155da:CALL 0x00014ec7
END_OF_LINE
----------------------------------------------
45: steps = count_path_components(path);
	000155da:CALL 0x00014ec7
END_OF_LINE
----------------------------------------------
46: traversed_symlink = (cached_dirfd *)0x0;
	000155e2:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
47: INIT_LIST_HEAD(&traverse_another_path::cwd.children);
	000155f4:CALL 0x00014798
END_OF_LINE
----------------------------------------------
48: pcVar2 = path;
	000155f4:CALL 0x00014798
END_OF_LINE
----------------------------------------------
49: if (steps < 0x401) {
	00015601:JBE 0x00015618
END_OF_LINE
----------------------------------------------
50: if ((*path == '\0') || (*path == '/')) {
	0001561c:MOVZX EAX,byte ptr [RAX]
	0001561f:TEST AL,AL
	00015621:JZ 0x0001562e
	00015623:MOV RAX,qword ptr [RBP + -0x68]
	00015627:MOVZX EAX,byte ptr [RAX]
	0001562a:CMP AL,0x2f
	0001562c:JNZ 0x00015638
END_OF_LINE
----------------------------------------------
51: iVar6 = -100;
	0001562e:MOV EAX,0xffffff9c
END_OF_LINE
----------------------------------------------
52: puVar11 = auStack_88;
	0001558f:SUB RSP,0x78
	00015593:MOV qword ptr [RBP + -0x78],RDI
	00015597:MOV dword ptr [RBP + -0x7c],ESI
	0001559a:MOV RAX,qword ptr FS:[0x28]
	000155a3:MOV qword ptr [RBP + -0x18],RAX
	000155a7:XOR EAX,EAX
	000155a9:LEA RAX,[0x40584]
	000155b0:MOV EAX,dword ptr [RAX]
	000155b2:MOV dword ptr [RBP + -0x6c],EAX
	000155b5:MOV RAX,qword ptr [RBP + -0x78]
	000155b9:MOV RAX,qword ptr [RAX]
	000155bc:MOV qword ptr [RBP + -0x68],RAX
	000155c0:LEA RAX,[0x3e080]
	000155c7:MOV qword ptr [RBP + -0x48],RAX
	000155cb:MOV qword ptr [RBP + -0x60],0x0
	000155d3:MOV RAX,qword ptr [RBP + -0x68]
	000155d7:MOV RDI,RAX
	000155da:CALL 0x00014ec7
	000155df:MOV dword ptr [RBP + -0x70],EAX
	000155e2:MOV qword ptr [RBP + -0x40],0x0
	000155ea:LEA RAX,[0x3e0a0]
	000155f1:MOV RDI,RAX
	000155f4:CALL 0x00014798
	000155f9:MOV EAX,0x400
	000155fe:CMP dword ptr [RBP + -0x70],EAX
	00015601:JBE 0x00015618
	00015603:CALL 0x00005900
	00015608:MOV dword ptr [RAX],0x28
	0001560e:MOV EAX,0xffffffff
	00015613:JMP 0x00015a94
	00015618:MOV RAX,qword ptr [RBP + -0x68]
	0001561c:MOVZX EAX,byte ptr [RAX]
	0001561f:TEST AL,AL
	00015621:JZ 0x0001562e
	00015623:MOV RAX,qword ptr [RBP + -0x68]
	00015627:MOVZX EAX,byte ptr [RAX]
	0001562a:CMP AL,0x2f
	0001562c:JNZ 0x00015638
	0001562e:MOV EAX,0xffffff9c
	00015633:JMP 0x00015a94
END_OF_LINE
----------------------------------------------
55: sVar8 = strlen(path);
	0001563f:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
56: last = pcVar2 + (sVar8 - 1);
	00015647:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
57: cVar1 = *last;
	00015653:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
58: while ((cVar1 == '/' && (last != path))) {
	00015656:CMP AL,0x2f
	00015658:JNZ 0x00015680
	0001565a:JMP 0x0001566c
	0001565c:SUB qword ptr [RBP + -0x50],0x1
	00015661:MOV RAX,qword ptr [RBP + -0x50]
	00015665:MOVZX EAX,byte ptr [RAX]
	00015668:CMP AL,0x2f
	0001566a:JNZ 0x00015678
	0001566c:MOV RAX,qword ptr [RBP + -0x68]
	00015670:CMP qword ptr [RBP + -0x50],RAX
	00015674:JNZ 0x0001565c
END_OF_LINE
----------------------------------------------
59: last = last + -1;
	0001565c:SUB qword ptr [RBP + -0x50],0x1
END_OF_LINE
----------------------------------------------
60: cVar1 = *last;
	00015665:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
62: for (; (last != path && (last[-1] != '/')); last = last + -1) {
	0001567b:SUB qword ptr [RBP + -0x50],0x1
	00015680:MOV RAX,qword ptr [RBP + -0x68]
	00015684:CMP qword ptr [RBP + -0x50],RAX
	00015688:JZ 0x00015699
	0001568a:MOV RAX,qword ptr [RBP + -0x50]
	0001568e:SUB RAX,0x1
	00015692:MOVZX EAX,byte ptr [RAX]
	00015695:CMP AL,0x2f
	00015697:JNZ 0x0001567b
END_OF_LINE
----------------------------------------------
64: if (last != path) {
	0001569d:CMP qword ptr [RBP + -0x50],RAX
	000156a1:JNZ 0x000156ad
END_OF_LINE
----------------------------------------------
65: puVar11 = auStack_88;
	0001558f:SUB RSP,0x78
	00015593:MOV qword ptr [RBP + -0x78],RDI
	00015597:MOV dword ptr [RBP + -0x7c],ESI
	0001559a:MOV RAX,qword ptr FS:[0x28]
	000155a3:MOV qword ptr [RBP + -0x18],RAX
	000155a7:XOR EAX,EAX
	000155a9:LEA RAX,[0x40584]
	000155b0:MOV EAX,dword ptr [RAX]
	000155b2:MOV dword ptr [RBP + -0x6c],EAX
	000155b5:MOV RAX,qword ptr [RBP + -0x78]
	000155b9:MOV RAX,qword ptr [RAX]
	000155bc:MOV qword ptr [RBP + -0x68],RAX
	000155c0:LEA RAX,[0x3e080]
	000155c7:MOV qword ptr [RBP + -0x48],RAX
	000155cb:MOV qword ptr [RBP + -0x60],0x0
	000155d3:MOV RAX,qword ptr [RBP + -0x68]
	000155d7:MOV RDI,RAX
	000155da:CALL 0x00014ec7
	000155df:MOV dword ptr [RBP + -0x70],EAX
	000155e2:MOV qword ptr [RBP + -0x40],0x0
	000155ea:LEA RAX,[0x3e0a0]
	000155f1:MOV RDI,RAX
	000155f4:CALL 0x00014798
	000155f9:MOV EAX,0x400
	000155fe:CMP dword ptr [RBP + -0x70],EAX
	00015601:JBE 0x00015618
	00015603:CALL 0x00005900
	00015608:MOV dword ptr [RAX],0x28
	0001560e:MOV EAX,0xffffffff
	00015613:JMP 0x00015a94
	00015618:MOV RAX,qword ptr [RBP + -0x68]
	0001561c:MOVZX EAX,byte ptr [RAX]
	0001561f:TEST AL,AL
	00015621:JZ 0x0001562e
	00015623:MOV RAX,qword ptr [RBP + -0x68]
	00015627:MOVZX EAX,byte ptr [RAX]
	0001562a:CMP AL,0x2f
	0001562c:JNZ 0x00015638
	0001562e:MOV EAX,0xffffff9c
	00015633:JMP 0x00015a94
	00015638:MOV RBX,qword ptr [RBP + -0x68]
	0001563c:MOV RDI,RBX
	0001563f:CALL 0x00005ad0
	00015644:ADD RAX,RBX
	00015647:SUB RAX,0x1
	0001564b:MOV qword ptr [RBP + -0x50],RAX
	0001564f:MOV RAX,qword ptr [RBP + -0x50]
	00015653:MOVZX EAX,byte ptr [RAX]
	00015656:CMP AL,0x2f
	00015658:JNZ 0x00015680
	0001565a:JMP 0x0001566c
	0001565c:SUB qword ptr [RBP + -0x50],0x1
	00015661:MOV RAX,qword ptr [RBP + -0x50]
	00015665:MOVZX EAX,byte ptr [RAX]
	00015668:CMP AL,0x2f
	0001566a:JNZ 0x00015678
	0001566c:MOV RAX,qword ptr [RBP + -0x68]
	00015670:CMP qword ptr [RBP + -0x50],RAX
	00015674:JNZ 0x0001565c
	00015676:JMP 0x00015680
	00015678:NOP
	00015679:JMP 0x00015680
	0001567b:SUB qword ptr [RBP + -0x50],0x1
	00015680:MOV RAX,qword ptr [RBP + -0x68]
	00015684:CMP qword ptr [RBP + -0x50],RAX
	00015688:JZ 0x00015699
	0001568a:MOV RAX,qword ptr [RBP + -0x50]
	0001568e:SUB RAX,0x1
	00015692:MOVZX EAX,byte ptr [RAX]
	00015695:CMP AL,0x2f
	00015697:JNZ 0x0001567b
	00015699:MOV RAX,qword ptr [RBP + -0x68]
	0001569d:CMP qword ptr [RBP + -0x50],RAX
	000156a1:JNZ 0x000156ad
	000156a3:MOV EAX,0xffffff9c
	000156a8:JMP 0x00015a94
	000156ad:LEA RAX,[0x3e354]
	000156b4:MOV EAX,dword ptr [RAX]
	000156b6:AND EAX,0x20
	000156b9:TEST EAX,EAX
	000156bb:JZ 0x000159a8
END_OF_LINE
----------------------------------------------
66: if ((debug & 0x20U) != 0) {
	000156b6:AND EAX,0x20
	000156b9:TEST EAX,EAX
	000156bb:JZ 0x000159a8
END_OF_LINE
----------------------------------------------
67: printf("Resolving path \"%.*s\"",(long)last - (long)path & 0xffffffff,path);
	000156cd:SUB RDX,RCX
	000156d0:MOV ECX,EDX
	000156d2:MOV RDX,RAX
	000156d5:MOV ESI,ECX
	000156d7:LEA RAX,[0x3395a]
	000156de:MOV RDI,RAX
	000156e1:MOV EAX,0x0
	000156e6:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
68: puVar11 = auStack_88;
	0001558f:SUB RSP,0x78
	00015593:MOV qword ptr [RBP + -0x78],RDI
	00015597:MOV dword ptr [RBP + -0x7c],ESI
	0001559a:MOV RAX,qword ptr FS:[0x28]
	000155a3:MOV qword ptr [RBP + -0x18],RAX
	000155a7:XOR EAX,EAX
	000155a9:LEA RAX,[0x40584]
	000155b0:MOV EAX,dword ptr [RAX]
	000155b2:MOV dword ptr [RBP + -0x6c],EAX
	000155b5:MOV RAX,qword ptr [RBP + -0x78]
	000155b9:MOV RAX,qword ptr [RAX]
	000155bc:MOV qword ptr [RBP + -0x68],RAX
	000155c0:LEA RAX,[0x3e080]
	000155c7:MOV qword ptr [RBP + -0x48],RAX
	000155cb:MOV qword ptr [RBP + -0x60],0x0
	000155d3:MOV RAX,qword ptr [RBP + -0x68]
	000155d7:MOV RDI,RAX
	000155da:CALL 0x00014ec7
	000155df:MOV dword ptr [RBP + -0x70],EAX
	000155e2:MOV qword ptr [RBP + -0x40],0x0
	000155ea:LEA RAX,[0x3e0a0]
	000155f1:MOV RDI,RAX
	000155f4:CALL 0x00014798
	000155f9:MOV EAX,0x400
	000155fe:CMP dword ptr [RBP + -0x70],EAX
	00015601:JBE 0x00015618
	00015603:CALL 0x00005900
	00015608:MOV dword ptr [RAX],0x28
	0001560e:MOV EAX,0xffffffff
	00015613:JMP 0x00015a94
	00015618:MOV RAX,qword ptr [RBP + -0x68]
	0001561c:MOVZX EAX,byte ptr [RAX]
	0001561f:TEST AL,AL
	00015621:JZ 0x0001562e
	00015623:MOV RAX,qword ptr [RBP + -0x68]
	00015627:MOVZX EAX,byte ptr [RAX]
	0001562a:CMP AL,0x2f
	0001562c:JNZ 0x00015638
	0001562e:MOV EAX,0xffffff9c
	00015633:JMP 0x00015a94
	00015638:MOV RBX,qword ptr [RBP + -0x68]
	0001563c:MOV RDI,RBX
	0001563f:CALL 0x00005ad0
	00015644:ADD RAX,RBX
	00015647:SUB RAX,0x1
	0001564b:MOV qword ptr [RBP + -0x50],RAX
	0001564f:MOV RAX,qword ptr [RBP + -0x50]
	00015653:MOVZX EAX,byte ptr [RAX]
	00015656:CMP AL,0x2f
	00015658:JNZ 0x00015680
	0001565a:JMP 0x0001566c
	0001565c:SUB qword ptr [RBP + -0x50],0x1
	00015661:MOV RAX,qword ptr [RBP + -0x50]
	00015665:MOVZX EAX,byte ptr [RAX]
	00015668:CMP AL,0x2f
	0001566a:JNZ 0x00015678
	0001566c:MOV RAX,qword ptr [RBP + -0x68]
	00015670:CMP qword ptr [RBP + -0x50],RAX
	00015674:JNZ 0x0001565c
	00015676:JMP 0x00015680
	00015678:NOP
	00015679:JMP 0x00015680
	0001567b:SUB qword ptr [RBP + -0x50],0x1
	00015680:MOV RAX,qword ptr [RBP + -0x68]
	00015684:CMP qword ptr [RBP + -0x50],RAX
	00015688:JZ 0x00015699
	0001568a:MOV RAX,qword ptr [RBP + -0x50]
	0001568e:SUB RAX,0x1
	00015692:MOVZX EAX,byte ptr [RAX]
	00015695:CMP AL,0x2f
	00015697:JNZ 0x0001567b
	00015699:MOV RAX,qword ptr [RBP + -0x68]
	0001569d:CMP qword ptr [RBP + -0x50],RAX
	000156a1:JNZ 0x000156ad
	000156a3:MOV EAX,0xffffff9c
	000156a8:JMP 0x00015a94
	000156ad:LEA RAX,[0x3e354]
	000156b4:MOV EAX,dword ptr [RAX]
	000156b6:AND EAX,0x20
	000156b9:TEST EAX,EAX
	000156bb:JZ 0x000159a8
	000156c1:MOV RAX,qword ptr [RBP + -0x68]
	000156c5:MOV RCX,qword ptr [RBP + -0x68]
	000156c9:MOV RDX,qword ptr [RBP + -0x50]
	000156cd:SUB RDX,RCX
	000156d0:MOV ECX,EDX
	000156d2:MOV RDX,RAX
	000156d5:MOV ESI,ECX
	000156d7:LEA RAX,[0x3395a]
	000156de:MOV RDI,RAX
	000156e1:MOV EAX,0x0
	000156e6:CALL 0x00005b70
	000156eb:JMP 0x000159a8
END_OF_LINE
----------------------------------------------
70: LAB_000159a8:
	000159a8:MOV RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
71: pcVar4 = dir;
	000159a8:MOV RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
72: iVar6 = keepfd_local;
	000159a8:MOV RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
73: if ((stack == (symlink *)0x0) && (last == path)) {
	000159ac:TEST RAX,RAX
	000159af:JNZ 0x000156f0
	000159b5:MOV RAX,qword ptr [RBP + -0x68]
	000159b9:CMP qword ptr [RBP + -0x50],RAX
	000159bd:JNZ 0x000156f0
END_OF_LINE
----------------------------------------------
74: *pathname_local = last;
	000159cb:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
75: if ((debug & 0x20U) != 0) {
	000159d7:AND EAX,0x20
	000159da:TEST EAX,EAX
	000159dc:JZ 0x00015a4a
END_OF_LINE
----------------------------------------------
76: misses = dirfd_cache_misses - misses;
	000159ea:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
77: if (misses == 0) {
	000159ef:CMP dword ptr [RBP + -0x6c],0x0
	000159f3:JNZ 0x00015a06
END_OF_LINE
----------------------------------------------
78: *(undefined8 *)(puVar11 + -8) = 0x15a04;
	000159ff:CALL 0x00005990
END_OF_LINE
----------------------------------------------
79: puts(" (cached)");
	000159ff:CALL 0x00005990
END_OF_LINE
----------------------------------------------
82: if (misses == 1) {
	00015a06:CMP dword ptr [RBP + -0x6c],0x1
	00015a0a:JNZ 0x00015a15
END_OF_LINE
----------------------------------------------
83: puVar10 = &DAT_00033984;
	00015a0c:LEA RAX,[0x33984]
END_OF_LINE
----------------------------------------------
86: puVar10 = &DAT_00033985;
	00015a15:LEA RAX,[0x33985]
END_OF_LINE
----------------------------------------------
88: uVar9 = (ulong)misses;
	00015a22:MOV ESI,ECX
END_OF_LINE
----------------------------------------------
89: *(undefined8 *)(puVar11 + -8) = 0x15a38;
	00015a33:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
90: printf(" (%u miss%s)\n",uVar9,puVar10);
	00015a33:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
92: *(undefined8 *)(puVar11 + -8) = 0x15a4a;
	00015a45:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
93: fflush(pFRam0000000000144070);
	00015a45:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
95: pcVar4 = dir;
	00015a4a:MOV RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
96: *(undefined8 *)(puVar11 + -8) = 0x15a56;
	00015a51:CALL 0x00014d24
END_OF_LINE
----------------------------------------------
97: iVar6 = put_path(pcVar4);
	00015a51:CALL 0x00014d24
END_OF_LINE
----------------------------------------------
98: goto LAB_00015a94;
	00015a94:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
100: symlink = (symlink *)0x0;
	000156f0:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
101: prev = path;
	000156fc:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
102: if (stack == (symlink *)0x0) {
	00015704:TEST RAX,RAX
	00015707:JZ 0x00015713
END_OF_LINE
----------------------------------------------
103: path_00 = &path;
	00015713:LEA RAX,[RBP + -0x68]
END_OF_LINE
----------------------------------------------
106: path_00 = &stack->path;
	0001570d:ADD RAX,0x8
END_OF_LINE
----------------------------------------------
108: *(undefined8 *)(puVar11 + -8) = 0x1572a;
	00015725:CALL 0x000152b4
END_OF_LINE
----------------------------------------------
109: entry = traverse_next(pcVar4,path_00,iVar6,&symlink);
	00015717:LEA RCX,[RBP + -0x58]
	0001571b:MOV EDX,dword ptr [RBP + -0x7c]
	0001571e:MOV RDI,qword ptr [RBP + -0x48]
	00015722:MOV RSI,RAX
	00015725:CALL 0x000152b4
END_OF_LINE
----------------------------------------------
110: if (entry == (cached_dirfd *)0x0) {
	0001572e:CMP qword ptr [RBP + -0x28],0x0
	00015733:JNZ 0x0001576f
END_OF_LINE
----------------------------------------------
111: if ((debug & 0x20U) != 0) {
	0001573e:AND EAX,0x20
	00015741:TEST EAX,EAX
	00015743:JZ 0x00015a58
END_OF_LINE
----------------------------------------------
112: *(undefined8 *)(puVar11 + -8) = 0x15758;
	00015753:CALL 0x00005990
END_OF_LINE
----------------------------------------------
113: puts(" (failed)");
	00015753:CALL 0x00005990
END_OF_LINE
----------------------------------------------
114: *(undefined8 *)(puVar11 + -8) = 0x1576a;
	00015765:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
115: fflush(pFRam0000000000144070);
	00015765:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
117: goto LAB_00015a59;
	00015a59:CMP qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
119: dir = entry;
	00015773:MOV qword ptr [RBP + -0x48],RAX
END_OF_LINE
----------------------------------------------
120: if ((stack == (symlink *)0x0) && (symlink != (symlink *)0x0)) {
	0001577b:TEST RAX,RAX
	0001577e:JNZ 0x00015896
	00015784:MOV RAX,qword ptr [RBP + -0x58]
	00015788:TEST RAX,RAX
	0001578b:JZ 0x00015896
END_OF_LINE
----------------------------------------------
121: for (p = prev; (*p != '\0' && (*p != '/')); p = p + 1) {
	00015795:MOV qword ptr [RBP + -0x38],RAX
	00015799:JMP 0x000157a0
	0001579b:ADD qword ptr [RBP + -0x38],0x1
	000157a0:MOV RAX,qword ptr [RBP + -0x38]
	000157a4:MOVZX EAX,byte ptr [RAX]
	000157a7:TEST AL,AL
	000157a9:JZ 0x000157b6
	000157ab:MOV RAX,qword ptr [RBP + -0x38]
	000157af:MOVZX EAX,byte ptr [RAX]
	000157b2:CMP AL,0x2f
	000157b4:JNZ 0x0001579b
END_OF_LINE
----------------------------------------------
123: uVar9 = ((ulong)(p + (0x18 - (long)prev)) / 0x10) * 0x10;
	000157c2:LEA RDX,[RAX + 0x8]
	000157c6:MOV EAX,0x10
	000157cb:SUB RAX,0x1
	000157cf:ADD RAX,RDX
	000157d2:MOV EBX,0x10
	000157d7:MOV EDX,0x0
	000157dc:DIV RBX
	000157df:IMUL RAX,RAX,0x10
END_OF_LINE
----------------------------------------------
124: for (puVar10 = puVar11; puVar10 != puVar11 + -(uVar9 & 0xfffffffffffff000);
	000157e6:AND RCX,-0x1000
	000157ed:MOV RDX,RSP
	000157f0:SUB RDX,RCX
	000157f3:CMP RSP,RDX
	000157f6:JZ 0x0001580a
END_OF_LINE
----------------------------------------------
125: puVar10 = puVar10 + -0x1000) {
	000157f8:SUB RSP,0x1000
END_OF_LINE
----------------------------------------------
126: *(undefined8 *)(puVar10 + -8) = *(undefined8 *)(puVar10 + -8);
	000157ff:OR qword ptr [RSP + 0xff8],0x0
END_OF_LINE
----------------------------------------------
128: lVar3 = -(ulong)((uint)uVar9 & 0xfff);
	0001580d:AND EDX,0xfff
	00015813:SUB RSP,RDX
END_OF_LINE
----------------------------------------------
129: puVar11 = puVar10 + lVar3;
	00015813:SUB RSP,RDX
END_OF_LINE
----------------------------------------------
130: if ((uVar9 & 0xfff) != 0) {
	00015819:AND EDX,0xfff
	0001581f:TEST RDX,RDX
	00015822:JZ 0x00015834
END_OF_LINE
----------------------------------------------
131: *(undefined8 *)(puVar10 + ((ulong)((uint)uVar9 & 0xfff) - 8) + lVar3) =
	0001580d:AND EDX,0xfff
	00015813:SUB RSP,RDX
	00015816:MOV RDX,RAX
	00015819:AND EDX,0xfff
	0001581f:TEST RDX,RDX
	00015822:JZ 0x00015834
	00015824:AND EAX,0xfff
	00015829:SUB RAX,0x8
	0001582d:ADD RAX,RSP
	00015830:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
132: *(undefined8 *)(puVar10 + ((ulong)((uint)uVar9 & 0xfff) - 8) + lVar3);
	0001580d:AND EDX,0xfff
	00015813:SUB RSP,RDX
	00015816:MOV RDX,RAX
	00015819:AND EDX,0xfff
	0001581f:TEST RDX,RDX
	00015822:JZ 0x00015834
	00015824:AND EAX,0xfff
	00015829:SUB RAX,0x8
	0001582d:ADD RAX,RSP
	00015830:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
134: pcVar2 = prev;
	00015834:MOV RAX,RSP
END_OF_LINE
----------------------------------------------
135: sVar8 = (long)p - (long)prev;
	0001584b:SUB RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
136: name = (char *)((ulong)(puVar10 + lVar3 + 0xf) & 0xfffffffffffffff0);
	00015837:ADD RAX,0xf
	0001583b:SHR RAX,0x4
	0001583f:SHL RAX,0x4
	00015843:MOV qword ptr [RBP + -0x20],RAX
	00015847:MOV RAX,qword ptr [RBP + -0x38]
	0001584b:SUB RAX,qword ptr [RBP + -0x30]
	0001584f:MOV RDX,RAX
	00015852:MOV RCX,qword ptr [RBP + -0x30]
	00015856:MOV RAX,qword ptr [RBP + -0x20]
	0001585a:MOV RSI,RCX
	0001585d:MOV RDI,RAX
	00015860:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
137: *(undefined8 *)(puVar10 + lVar3 + -8) = 0x15865;
	00015860:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
138: memcpy((char *)((ulong)(puVar10 + lVar3 + 0xf) & 0xfffffffffffffff0),pcVar2,sVar8);
	00015837:ADD RAX,0xf
	0001583b:SHR RAX,0x4
	0001583f:SHL RAX,0x4
	00015843:MOV qword ptr [RBP + -0x20],RAX
	00015847:MOV RAX,qword ptr [RBP + -0x38]
	0001584b:SUB RAX,qword ptr [RBP + -0x30]
	0001584f:MOV RDX,RAX
	00015852:MOV RCX,qword ptr [RBP + -0x30]
	00015856:MOV RAX,qword ptr [RBP + -0x20]
	0001585a:MOV RSI,RCX
	0001585d:MOV RDI,RAX
	00015860:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
139: pcVar2 = name;
	00015860:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
140: pcVar4 = dir;
	00015860:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
141: name[(long)p - (long)prev] = '\0';
	00015869:SUB RAX,qword ptr [RBP + -0x30]
	0001586d:MOV RDX,RAX
	00015870:MOV RAX,qword ptr [RBP + -0x20]
	00015874:ADD RAX,RDX
	00015877:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
142: *(undefined8 *)(puVar10 + lVar3 + -8) = 0x15892;
	0001588d:CALL 0x00014d80
END_OF_LINE
----------------------------------------------
143: traversed_symlink = new_cached_dirfd(pcVar4,pcVar2,-1);
	0001588d:CALL 0x00014d80
END_OF_LINE
----------------------------------------------
145: if ((stack != (symlink *)0x0) && (*stack->path == '\0')) {
	0001589a:TEST RAX,RAX
	0001589d:JZ 0x000158ba
	0001589f:MOV RAX,qword ptr [RBP + -0x60]
	000158a3:MOV RAX,qword ptr [RAX + 0x8]
	000158a7:MOVZX EAX,byte ptr [RAX]
	000158aa:TEST AL,AL
	000158ac:JNZ 0x000158ba
END_OF_LINE
----------------------------------------------
146: *(undefined8 *)(puVar11 + -8) = 0x158ba;
	000158b5:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
147: pop_symlink(&stack);
	000158ae:LEA RAX,[RBP + -0x60]
	000158b2:MOV RDI,RAX
	000158b5:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
149: symlink_00 = symlink;
	000158ba:MOV RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
150: if ((symlink == (symlink *)0x0) || (*symlink->path == '\0')) {
	000158be:TEST RAX,RAX
	000158c1:JZ 0x00015912
	000158c3:MOV RAX,qword ptr [RBP + -0x58]
	000158c7:MOV RAX,qword ptr [RAX + 0x8]
	000158cb:MOVZX EAX,byte ptr [RAX]
	000158ce:TEST AL,AL
	000158d0:JZ 0x00015912
END_OF_LINE
----------------------------------------------
151: if (symlink != (symlink *)0x0) {
	00015916:TEST RAX,RAX
	00015919:JZ 0x00015927
END_OF_LINE
----------------------------------------------
152: *(undefined8 *)(puVar11 + -8) = 0x15927;
	00015922:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
153: pop_symlink(&symlink);
	0001591b:LEA RAX,[RBP + -0x58]
	0001591f:MOV RDI,RAX
	00015922:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
157: *(undefined8 *)(puVar11 + -8) = 0x158e5;
	000158e0:CALL 0x00014f41
END_OF_LINE
----------------------------------------------
158: push_symlink(&stack,symlink_00);
	000158d6:LEA RAX,[RBP + -0x60]
	000158da:MOV RSI,RDX
	000158dd:MOV RDI,RAX
	000158e0:CALL 0x00014f41
END_OF_LINE
----------------------------------------------
159: pcVar2 = symlink->path;
	000158e9:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
160: *(undefined8 *)(puVar11 + -8) = 0x158f5;
	000158f0:CALL 0x00014ec7
END_OF_LINE
----------------------------------------------
161: uVar5 = count_path_components(pcVar2);
	000158f0:CALL 0x00014ec7
END_OF_LINE
----------------------------------------------
162: steps = steps + uVar5;
	000158f5:ADD dword ptr [RBP + -0x70],EAX
END_OF_LINE
----------------------------------------------
163: if (0x400 < steps) goto code_r0x00015902;
	00015900:JBE 0x00015927
	00015902:CALL 0x00005900
END_OF_LINE
----------------------------------------------
165: if ((traversed_symlink != (cached_dirfd *)0x0) && (stack == (symlink *)0x0)) {
	00015927:CMP qword ptr [RBP + -0x40],0x0
	0001592c:JZ 0x000159a8
	0001592e:MOV RAX,qword ptr [RBP + -0x60]
	00015932:TEST RAX,RAX
	00015935:JNZ 0x000159a8
END_OF_LINE
----------------------------------------------
166: if (entry->fd == -100) {
	0001593b:MOV EAX,dword ptr [RAX + 0x40]
	0001593e:CMP EAX,-0x64
	00015941:JZ 0x00015953
END_OF_LINE
----------------------------------------------
167: iVar6 = -100;
	00015953:MOV EAX,0xffffff9c
END_OF_LINE
----------------------------------------------
170: iVar6 = entry->fd;
	00015947:MOV EAX,dword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
171: *(undefined8 *)(puVar11 + -8) = 0x15951;
	0001594c:CALL 0x00005bc0
END_OF_LINE
----------------------------------------------
172: iVar6 = dup(iVar6);
	0001594c:CALL 0x00005bc0
END_OF_LINE
----------------------------------------------
174: pcVar4 = traversed_symlink;
	00015958:MOV RDX,qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
175: keepfd_00 = keepfd_local;
	00015958:MOV RDX,qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
176: traversed_symlink->fd = iVar6;
	0001595c:MOV dword ptr [RDX + 0x40],EAX
END_OF_LINE
----------------------------------------------
177: if (traversed_symlink->fd == -1) {
	00015963:MOV EAX,dword ptr [RAX + 0x40]
	00015966:CMP EAX,-0x1
	00015969:JZ 0x00015994
END_OF_LINE
----------------------------------------------
178: *(undefined8 *)(puVar11 + -8) = 0x159a0;
	0001599b:CALL 0x00014951
END_OF_LINE
----------------------------------------------
179: free_cached_dirfd(pcVar4);
	0001599b:CALL 0x00014951
END_OF_LINE
----------------------------------------------
182: *(undefined8 *)(puVar11 + -8) = 0x1597c;
	00015977:CALL 0x00014b7a
END_OF_LINE
----------------------------------------------
183: insert_cached_dirfd(pcVar4,keepfd_00);
	00015977:CALL 0x00014b7a
END_OF_LINE
----------------------------------------------
184: pcVar4 = traversed_symlink;
	00015977:CALL 0x00014b7a
END_OF_LINE
----------------------------------------------
185: *(undefined8 *)(puVar11 + -8) = 0x15992;
	0001598d:CALL 0x000147ba
END_OF_LINE
----------------------------------------------
186: list_add(&pcVar4->lru_link,&lru_list);
	0001598d:CALL 0x000147ba
END_OF_LINE
----------------------------------------------
188: traversed_symlink = (cached_dirfd *)0x0;
	000159a0:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
190: goto LAB_000159a8;
	000159a8:MOV RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
192: iVar6 = -100;
	000156a3:MOV EAX,0xffffff9c
END_OF_LINE
----------------------------------------------
196: piVar7 = __errno_location();
	00015603:CALL 0x00005900
END_OF_LINE
----------------------------------------------
197: *piVar7 = 0x28;
	00015608:MOV dword ptr [RAX],0x28
END_OF_LINE
----------------------------------------------
198: iVar6 = -1;
	0001560e:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
199: puVar11 = auStack_88;
	0001558f:SUB RSP,0x78
	00015593:MOV qword ptr [RBP + -0x78],RDI
	00015597:MOV dword ptr [RBP + -0x7c],ESI
	0001559a:MOV RAX,qword ptr FS:[0x28]
	000155a3:MOV qword ptr [RBP + -0x18],RAX
	000155a7:XOR EAX,EAX
	000155a9:LEA RAX,[0x40584]
	000155b0:MOV EAX,dword ptr [RAX]
	000155b2:MOV dword ptr [RBP + -0x6c],EAX
	000155b5:MOV RAX,qword ptr [RBP + -0x78]
	000155b9:MOV RAX,qword ptr [RAX]
	000155bc:MOV qword ptr [RBP + -0x68],RAX
	000155c0:LEA RAX,[0x3e080]
	000155c7:MOV qword ptr [RBP + -0x48],RAX
	000155cb:MOV qword ptr [RBP + -0x60],0x0
	000155d3:MOV RAX,qword ptr [RBP + -0x68]
	000155d7:MOV RDI,RAX
	000155da:CALL 0x00014ec7
	000155df:MOV dword ptr [RBP + -0x70],EAX
	000155e2:MOV qword ptr [RBP + -0x40],0x0
	000155ea:LEA RAX,[0x3e0a0]
	000155f1:MOV RDI,RAX
	000155f4:CALL 0x00014798
	000155f9:MOV EAX,0x400
	000155fe:CMP dword ptr [RBP + -0x70],EAX
	00015601:JBE 0x00015618
	00015603:CALL 0x00005900
	00015608:MOV dword ptr [RAX],0x28
	0001560e:MOV EAX,0xffffffff
	00015613:JMP 0x00015a94
END_OF_LINE
----------------------------------------------
201: LAB_00015a94:
	00015a94:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
202: if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
	00015a98:SUB RDX,qword ptr FS:[0x28]
	00015aa1:JZ 0x00015aa8
END_OF_LINE
----------------------------------------------
204: *(undefined8 *)(puVar11 + -8) = 0x15aa8;
	00015aa3:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
205: __stack_chk_fail();
	00015aa3:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
207: return iVar6;
	00015aad:RET
END_OF_LINE
----------------------------------------------
208: code_r0x00015902:
	00015902:CALL 0x00005900
END_OF_LINE
----------------------------------------------
209: *(undefined8 *)(puVar11 + -8) = 0x15907;
	00015902:CALL 0x00005900
END_OF_LINE
----------------------------------------------
210: piVar7 = __errno_location();
	00015902:CALL 0x00005900
END_OF_LINE
----------------------------------------------
211: *piVar7 = 0x28;
	00015907:MOV dword ptr [RAX],0x28
END_OF_LINE
----------------------------------------------
212: LAB_00015a59:
	00015a59:CMP qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
213: pcVar4 = traversed_symlink;
	00015a59:CMP qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
214: if (traversed_symlink != (cached_dirfd *)0x0) {
	00015a59:CMP qword ptr [RBP + -0x40],0x0
	00015a5e:JZ 0x00015a6c
END_OF_LINE
----------------------------------------------
215: *(undefined8 *)(puVar11 + -8) = 0x15a6c;
	00015a67:CALL 0x00014951
END_OF_LINE
----------------------------------------------
216: free_cached_dirfd(pcVar4);
	00015a67:CALL 0x00014951
END_OF_LINE
----------------------------------------------
218: pcVar4 = dir;
	00015a6c:MOV RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
219: *(undefined8 *)(puVar11 + -8) = 0x15a78;
	00015a73:CALL 0x00014d24
END_OF_LINE
----------------------------------------------
220: put_path(pcVar4);
	00015a73:CALL 0x00014d24
END_OF_LINE
----------------------------------------------
221: while (stack != (symlink *)0x0) {
	00015a8a:TEST RAX,RAX
	00015a8d:JNZ 0x00015a7a
END_OF_LINE
----------------------------------------------
222: *(undefined8 *)(puVar11 + -8) = 0x15a86;
	00015a81:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
223: pop_symlink(&stack);
	00015a7a:LEA RAX,[RBP + -0x60]
	00015a7e:MOV RDI,RAX
	00015a81:CALL 0x00014f6d
END_OF_LINE
----------------------------------------------
225: iVar6 = -1;
	00015a8f:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
226: goto LAB_00015a94;
	00015a94:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE



Function: traverse_path
----------------------------------------------
8: iVar1 = traverse_another_path(pathname,-1);
	00015aca:CALL 0x00015586
END_OF_LINE
----------------------------------------------
9: return iVar1;
	00015ad0:RET
END_OF_LINE



Function: safe_xstat
----------------------------------------------
10: pathname_local = pathname;
	00015af4:JZ 0x00015b10
END_OF_LINE
----------------------------------------------
11: if (unsafe) {
	00015af4:JZ 0x00015b10
END_OF_LINE
----------------------------------------------
12: dirfd = fstatat(-100,pathname,(stat *)buf,flags);
	00015b09:CALL 0x00006090
END_OF_LINE
----------------------------------------------
15: dirfd = traverse_path(&pathname_local);
	00015b10:LEA RAX,[RBP + -0x18]
	00015b14:MOV RDI,RAX
	00015b17:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
16: if ((-1 < dirfd) || (dirfd == -100)) {
	00015b1f:CMP dword ptr [RBP + -0x4],0x0
	00015b23:JNS 0x00015b30
	00015b25:CMP dword ptr [RBP + -0x4],-0x64
	00015b29:JZ 0x00015b30
END_OF_LINE
----------------------------------------------
17: dirfd = fstatat(dirfd,pathname_local,(stat *)buf,flags);
	00015b40:CALL 0x00006090
END_OF_LINE
----------------------------------------------
20: return dirfd;
	00015b46:RET
END_OF_LINE



Function: safe_stat
----------------------------------------------
9: iVar1 = safe_xstat(pathname,buf,0);
	00015b6e:CALL 0x00015ad1
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00015b74:RET
END_OF_LINE



Function: safe_lstat
----------------------------------------------
9: iVar1 = safe_xstat(pathname,buf,0x100);
	00015b9c:CALL 0x00015ad1
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00015ba2:RET
END_OF_LINE



Function: safe_open
----------------------------------------------
10: pathname_local = pathname;
	00015bc5:JZ 0x00015be2
END_OF_LINE
----------------------------------------------
11: if (unsafe) {
	00015bc5:JZ 0x00015be2
END_OF_LINE
----------------------------------------------
12: dirfd = open(pathname,flags,(ulong)mode);
	00015bcb:MOV EDX,dword ptr [RBP + -0x20]
	00015bce:MOV ECX,dword ptr [RBP + -0x1c]
	00015bd1:MOV ESI,ECX
	00015bd3:MOV RDI,RAX
	00015bd6:MOV EAX,0x0
	00015bdb:CALL 0x00005f30
END_OF_LINE
----------------------------------------------
15: dirfd = traverse_path(&pathname_local);
	00015be2:LEA RAX,[RBP + -0x18]
	00015be6:MOV RDI,RAX
	00015be9:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
16: if ((-1 < dirfd) || (dirfd == -100)) {
	00015bf1:CMP dword ptr [RBP + -0x4],0x0
	00015bf5:JNS 0x00015c02
	00015bf7:CMP dword ptr [RBP + -0x4],-0x64
	00015bfb:JZ 0x00015c02
END_OF_LINE
----------------------------------------------
17: dirfd = openat(dirfd,pathname_local,flags,(ulong)mode);
	00015c06:MOV ECX,dword ptr [RBP + -0x20]
	00015c09:MOV EDX,dword ptr [RBP + -0x1c]
	00015c0c:MOV EAX,dword ptr [RBP + -0x4]
	00015c0f:MOV EDI,EAX
	00015c11:MOV EAX,0x0
	00015c16:CALL 0x00005ae0
END_OF_LINE
----------------------------------------------
20: return dirfd;
	00015c1c:RET
END_OF_LINE



Function: safe_rename
----------------------------------------------
11: newpath_local = newpath;
	00015c3d:JZ 0x00015c57
END_OF_LINE
----------------------------------------------
12: oldpath_local = oldpath;
	00015c3d:JZ 0x00015c57
END_OF_LINE
----------------------------------------------
13: if (unsafe) {
	00015c3d:JZ 0x00015c57
END_OF_LINE
----------------------------------------------
14: ret = rename(oldpath,newpath);
	00015c4d:CALL 0x00005f70
END_OF_LINE
----------------------------------------------
17: ret = traverse_path(&oldpath_local);
	00015c57:LEA RAX,[RBP + -0x18]
	00015c5b:MOV RDI,RAX
	00015c5e:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
18: if ((((-1 < ret) || (ret == -100)) &&
	00015c66:CMP dword ptr [RBP + -0xc],0x0
	00015c6a:JNS 0x00015c77
	00015c6c:CMP dword ptr [RBP + -0xc],-0x64
	00015c70:JZ 0x00015c77
	00015c72:MOV EAX,dword ptr [RBP + -0xc]
	00015c75:JMP 0x00015cdf
	00015c77:MOV EDX,dword ptr [RBP + -0xc]
	00015c7a:LEA RAX,[RBP + -0x20]
	00015c7e:MOV ESI,EDX
	00015c80:MOV RDI,RAX
	00015c83:CALL 0x00015586
	00015c88:MOV dword ptr [RBP + -0x8],EAX
	00015c8b:CMP dword ptr [RBP + -0x8],0x0
	00015c8f:JNS 0x00015c9c
	00015c91:CMP dword ptr [RBP + -0x8],-0x64
	00015c95:JZ 0x00015c9c
	00015c97:MOV EAX,dword ptr [RBP + -0x8]
	00015c9a:JMP 0x00015cdf
	00015c9c:MOV RCX,qword ptr [RBP + -0x20]
	00015ca0:MOV RSI,qword ptr [RBP + -0x18]
	00015ca4:MOV EDX,dword ptr [RBP + -0x8]
	00015ca7:MOV EAX,dword ptr [RBP + -0xc]
	00015caa:MOV EDI,EAX
	00015cac:CALL 0x00005fd0
	00015cb1:MOV dword ptr [RBP + -0x4],EAX
	00015cb4:CMP dword ptr [RBP + -0x4],0x0
	00015cb8:JNZ 0x00015cdc
END_OF_LINE
----------------------------------------------
19: ((olddirfd = ret, ret = traverse_another_path(&newpath_local,ret), -1 < ret || (ret == -100)
	00015c7a:LEA RAX,[RBP + -0x20]
	00015c7e:MOV ESI,EDX
	00015c80:MOV RDI,RAX
	00015c83:CALL 0x00015586
	00015c88:MOV dword ptr [RBP + -0x8],EAX
	00015c8b:CMP dword ptr [RBP + -0x8],0x0
	00015c8f:JNS 0x00015c9c
	00015c91:CMP dword ptr [RBP + -0x8],-0x64
END_OF_LINE
----------------------------------------------
20: ))) && (newdirfd = ret, ret = renameat(olddirfd,oldpath_local,ret,newpath_local), ret == 0)
	00015cac:CALL 0x00005fd0
	00015cb1:MOV dword ptr [RBP + -0x4],EAX
	00015cb4:CMP dword ptr [RBP + -0x4],0x0
END_OF_LINE
----------------------------------------------
22: invalidate_cached_dirfd(olddirfd,oldpath_local);
	00015cc6:CALL 0x00014c7f
END_OF_LINE
----------------------------------------------
23: invalidate_cached_dirfd(newdirfd,newpath_local);
	00015cd7:CALL 0x00014c7f
END_OF_LINE
----------------------------------------------
26: return ret;
	00015ce0:RET
END_OF_LINE



Function: safe_mkdir
----------------------------------------------
9: pathname_local = pathname;
	00015d00:JZ 0x00015d15
END_OF_LINE
----------------------------------------------
10: if (unsafe) {
	00015d00:JZ 0x00015d15
END_OF_LINE
----------------------------------------------
11: dirfd = mkdir(pathname,mode);
	00015d0e:CALL 0x00005960
END_OF_LINE
----------------------------------------------
14: dirfd = traverse_path(&pathname_local);
	00015d15:LEA RAX,[RBP + -0x18]
	00015d19:MOV RDI,RAX
	00015d1c:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
15: if ((-1 < dirfd) || (dirfd == -100)) {
	00015d24:CMP dword ptr [RBP + -0x4],0x0
	00015d28:JNS 0x00015d35
	00015d2a:CMP dword ptr [RBP + -0x4],-0x64
	00015d2e:JZ 0x00015d35
END_OF_LINE
----------------------------------------------
16: dirfd = mkdirat(dirfd,pathname_local,mode);
	00015d44:CALL 0x00005d60
END_OF_LINE
----------------------------------------------
19: return dirfd;
	00015d4a:RET
END_OF_LINE



Function: safe_rmdir
----------------------------------------------
9: pathname_local = pathname;
	00015d67:JZ 0x00015d77
END_OF_LINE
----------------------------------------------
10: if (unsafe) {
	00015d67:JZ 0x00015d77
END_OF_LINE
----------------------------------------------
11: ret = rmdir(pathname);
	00015d70:CALL 0x00005ab0
END_OF_LINE
----------------------------------------------
14: ret = traverse_path(&pathname_local);
	00015d77:LEA RAX,[RBP + -0x18]
	00015d7b:MOV RDI,RAX
	00015d7e:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
15: if (((-1 < ret) || (ret == -100)) &&
	00015d86:CMP dword ptr [RBP + -0x8],0x0
	00015d8a:JNS 0x00015d97
	00015d8c:CMP dword ptr [RBP + -0x8],-0x64
	00015d90:JZ 0x00015d97
	00015d92:MOV EAX,dword ptr [RBP + -0x8]
	00015d95:JMP 0x00015dca
	00015d97:MOV RCX,qword ptr [RBP + -0x18]
	00015d9b:MOV EAX,dword ptr [RBP + -0x8]
	00015d9e:MOV EDX,0x200
	00015da3:MOV RSI,RCX
	00015da6:MOV EDI,EAX
	00015da8:CALL 0x00005980
	00015dad:MOV dword ptr [RBP + -0x4],EAX
	00015db0:CMP dword ptr [RBP + -0x4],0x0
	00015db4:JNZ 0x00015dc7
END_OF_LINE
----------------------------------------------
16: (dirfd = ret, ret = unlinkat(ret,pathname_local,0x200), ret == 0)) {
	00015da8:CALL 0x00005980
	00015dad:MOV dword ptr [RBP + -0x4],EAX
	00015db0:CMP dword ptr [RBP + -0x4],0x0
END_OF_LINE
----------------------------------------------
17: invalidate_cached_dirfd(dirfd,pathname_local);
	00015dc2:CALL 0x00014c7f
END_OF_LINE
----------------------------------------------
20: return ret;
	00015dcb:RET
END_OF_LINE



Function: safe_unlink
----------------------------------------------
8: pathname_local = pathname;
	00015de8:JZ 0x00015df8
END_OF_LINE
----------------------------------------------
9: if (unsafe) {
	00015de8:JZ 0x00015df8
END_OF_LINE
----------------------------------------------
10: dirfd = unlink(pathname);
	00015df1:CALL 0x00005910
END_OF_LINE
----------------------------------------------
13: dirfd = traverse_path(&pathname_local);
	00015df8:LEA RAX,[RBP + -0x18]
	00015dfc:MOV RDI,RAX
	00015dff:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
14: if ((-1 < dirfd) || (dirfd == -100)) {
	00015e07:CMP dword ptr [RBP + -0x4],0x0
	00015e0b:JNS 0x00015e18
	00015e0d:CMP dword ptr [RBP + -0x4],-0x64
	00015e11:JZ 0x00015e18
END_OF_LINE
----------------------------------------------
15: dirfd = unlinkat(dirfd,pathname_local,0);
	00015e29:CALL 0x00005980
END_OF_LINE
----------------------------------------------
18: return dirfd;
	00015e2f:RET
END_OF_LINE



Function: safe_symlink
----------------------------------------------
9: linkpath_local = linkpath;
	00015e50:JZ 0x00015e67
END_OF_LINE
----------------------------------------------
10: target_local = target;
	00015e50:JZ 0x00015e67
END_OF_LINE
----------------------------------------------
11: if (unsafe) {
	00015e50:JZ 0x00015e67
END_OF_LINE
----------------------------------------------
12: dirfd = symlink(target,linkpath);
	00015e60:CALL 0x00005b80
END_OF_LINE
----------------------------------------------
15: dirfd = traverse_path(&linkpath_local);
	00015e67:LEA RAX,[RBP + -0x20]
	00015e6b:MOV RDI,RAX
	00015e6e:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
16: if ((-1 < dirfd) || (dirfd == -100)) {
	00015e76:CMP dword ptr [RBP + -0x4],0x0
	00015e7a:JNS 0x00015e87
	00015e7c:CMP dword ptr [RBP + -0x4],-0x64
	00015e80:JZ 0x00015e87
END_OF_LINE
----------------------------------------------
17: dirfd = symlinkat(target_local,dirfd,linkpath_local);
	00015e97:CALL 0x00006040
END_OF_LINE
----------------------------------------------
20: return dirfd;
	00015e9d:RET
END_OF_LINE



Function: safe_chmod
----------------------------------------------
9: pathname_local = pathname;
	00015ebd:JZ 0x00015ed2
END_OF_LINE
----------------------------------------------
10: if (unsafe) {
	00015ebd:JZ 0x00015ed2
END_OF_LINE
----------------------------------------------
11: dirfd = chmod(pathname,mode);
	00015ecb:CALL 0x00005ee0
END_OF_LINE
----------------------------------------------
14: dirfd = traverse_path(&pathname_local);
	00015ed2:LEA RAX,[RBP + -0x18]
	00015ed6:MOV RDI,RAX
	00015ed9:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
15: if ((-1 < dirfd) || (dirfd == -100)) {
	00015ee1:CMP dword ptr [RBP + -0x4],0x0
	00015ee5:JNS 0x00015ef2
	00015ee7:CMP dword ptr [RBP + -0x4],-0x64
	00015eeb:JZ 0x00015ef2
END_OF_LINE
----------------------------------------------
16: dirfd = fchmodat(dirfd,pathname_local,mode,0);
	00015f03:CALL 0x00005e10
END_OF_LINE
----------------------------------------------
19: return dirfd;
	00015f09:RET
END_OF_LINE



Function: safe_lchown
----------------------------------------------
10: pathname_local = pathname;
	00015f2c:JZ 0x00015f44
END_OF_LINE
----------------------------------------------
11: if (unsafe) {
	00015f2c:JZ 0x00015f44
END_OF_LINE
----------------------------------------------
12: dirfd = lchown(pathname,owner,group);
	00015f3d:CALL 0x00005e40
END_OF_LINE
----------------------------------------------
15: dirfd = traverse_path(&pathname_local);
	00015f44:LEA RAX,[RBP + -0x18]
	00015f48:MOV RDI,RAX
	00015f4b:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
16: if ((-1 < dirfd) || (dirfd == -100)) {
	00015f53:CMP dword ptr [RBP + -0x4],0x0
	00015f57:JNS 0x00015f64
	00015f59:CMP dword ptr [RBP + -0x4],-0x64
	00015f5d:JZ 0x00015f64
END_OF_LINE
----------------------------------------------
17: dirfd = fchownat(dirfd,pathname_local,owner,group,0x100);
	00015f79:CALL 0x00005fc0
END_OF_LINE
----------------------------------------------
20: return dirfd;
	00015f7f:RET
END_OF_LINE



Function: safe_lutimens
----------------------------------------------
9: pathname_local = pathname;
	00015fa0:JZ 0x00015fbe
END_OF_LINE
----------------------------------------------
10: if (unsafe) {
	00015fa0:JZ 0x00015fbe
END_OF_LINE
----------------------------------------------
11: dirfd = utimensat(-100,pathname,(timespec *)times,0x100);
	00015fb7:CALL 0x000058c0
END_OF_LINE
----------------------------------------------
14: dirfd = traverse_path(&pathname_local);
	00015fbe:LEA RAX,[RBP + -0x18]
	00015fc2:MOV RDI,RAX
	00015fc5:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
15: if ((-1 < dirfd) || (dirfd == -100)) {
	00015fcd:CMP dword ptr [RBP + -0x4],0x0
	00015fd1:JNS 0x00015fde
	00015fd3:CMP dword ptr [RBP + -0x4],-0x64
	00015fd7:JZ 0x00015fde
END_OF_LINE
----------------------------------------------
16: dirfd = utimensat(dirfd,pathname_local,(timespec *)times,0x100);
	00015ff0:CALL 0x000058c0
END_OF_LINE
----------------------------------------------
19: return dirfd;
	00015ff6:RET
END_OF_LINE



Function: safe_readlink
----------------------------------------------
11: pathname_local = pathname;
	0001601b:JZ 0x00016036
END_OF_LINE
----------------------------------------------
12: if (unsafe) {
	0001601b:JZ 0x00016036
END_OF_LINE
----------------------------------------------
13: sVar1 = readlink(pathname,buf,bufsiz);
	0001602f:CALL 0x00005a00
END_OF_LINE
----------------------------------------------
16: dirfd = traverse_path(&pathname_local);
	00016036:LEA RAX,[RBP + -0x18]
	0001603a:MOV RDI,RAX
	0001603d:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
17: if ((dirfd < 0) && (dirfd != -100)) {
	00016045:CMP dword ptr [RBP + -0x4],0x0
	00016049:JNS 0x00016058
	0001604b:CMP dword ptr [RBP + -0x4],-0x64
	0001604f:JZ 0x00016058
END_OF_LINE
----------------------------------------------
18: sVar1 = (ssize_t)dirfd;
	00016054:CDQE
END_OF_LINE
----------------------------------------------
21: sVar1 = readlinkat(dirfd,pathname_local,buf,bufsiz);
	00016069:CALL 0x00005d10
END_OF_LINE
----------------------------------------------
24: return sVar1;
	0001606f:RET
END_OF_LINE



Function: safe_access
----------------------------------------------
9: pathname_local = pathname;
	0001608f:JZ 0x000160a4
END_OF_LINE
----------------------------------------------
10: if (unsafe) {
	0001608f:JZ 0x000160a4
END_OF_LINE
----------------------------------------------
11: dirfd = access(pathname,mode);
	0001609d:CALL 0x00005f40
END_OF_LINE
----------------------------------------------
14: dirfd = traverse_path(&pathname_local);
	000160a4:LEA RAX,[RBP + -0x18]
	000160a8:MOV RDI,RAX
	000160ab:CALL 0x00015aae
END_OF_LINE
----------------------------------------------
15: if ((-1 < dirfd) || (dirfd == -100)) {
	000160b3:CMP dword ptr [RBP + -0x4],0x0
	000160b7:JNS 0x000160c4
	000160b9:CMP dword ptr [RBP + -0x4],-0x64
	000160bd:JZ 0x000160c4
END_OF_LINE
----------------------------------------------
16: dirfd = faccessat(dirfd,pathname_local,mode,0);
	000160d5:CALL 0x000059f0
END_OF_LINE
----------------------------------------------
19: return dirfd;
	000160db:RET
END_OF_LINE



Function: file_id_hasher
----------------------------------------------
11: return (ulong)(*entry + *(long *)((long)entry + 8)) % table_size;
	000160f8:MOV RDX,qword ptr [RAX + 0x8]
	000160fc:MOV RAX,qword ptr [RBP + -0x10]
	00016100:MOV RAX,qword ptr [RAX]
	00016103:ADD RAX,RDX
	00016106:MOV qword ptr [RBP + -0x8],RAX
	0001610a:MOV RAX,qword ptr [RBP + -0x8]
	0001610e:MOV EDX,0x0
	00016113:DIV qword ptr [RBP + -0x20]
	00016117:MOV RAX,RDX
	0001611a:POP RBP
	0001611b:RET
END_OF_LINE



Function: file_id_comparator
----------------------------------------------
13: if ((*(long *)((long)entry1 + 8) == *(long *)((long)entry2 + 8)) && (*entry1 == *entry2)) {
	00016140:MOV RDX,qword ptr [RAX + 0x8]
	00016144:MOV RAX,qword ptr [RBP + -0x8]
	00016148:MOV RAX,qword ptr [RAX + 0x8]
	0001614c:CMP RDX,RAX
	0001614f:JNZ 0x0001616b
	00016151:MOV RAX,qword ptr [RBP + -0x10]
	00016155:MOV RDX,qword ptr [RAX]
	00016158:MOV RAX,qword ptr [RBP + -0x8]
	0001615c:MOV RAX,qword ptr [RAX]
	0001615f:CMP RDX,RAX
	00016162:JNZ 0x0001616b
END_OF_LINE
----------------------------------------------
14: _Var1 = true;
	00016164:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
17: _Var1 = false;
	0001616b:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
19: return _Var1;
	00016174:RET
END_OF_LINE



Function: init_backup_hash_table
----------------------------------------------
7: file_id_table =
	000161a5:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
8: hash_initialize(0,(Hash_tuning *)0x0,file_id_hasher,file_id_comparator,
	000161a5:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
9: (Hash_data_freer)(undefined *)0x1444a0);
	000161a5:CALL 0x0001f591
END_OF_LINE
----------------------------------------------
10: if (file_id_table == (Hash_table *)0x0) {
	000161b8:TEST RAX,RAX
	000161bb:JNZ 0x000161c2
END_OF_LINE
----------------------------------------------
12: xalloc_die();
	000161bd:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
14: return;
	000161c4:RET
END_OF_LINE



Function: __insert_file_id
----------------------------------------------
10: if (__insert_file_id::next_slot == (file_id *)0x0) {
	000161df:TEST RAX,RAX
	000161e2:JNZ 0x000161f5
END_OF_LINE
----------------------------------------------
11: __insert_file_id::next_slot = (file_id *)xmalloc(0x18);
	000161e9:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
13: __insert_file_id::next_slot->dev = st->st_dev;
	00016200:MOV RDX,qword ptr [RDX]
	00016203:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
14: __insert_file_id::next_slot->ino = st->st_ino;
	00016211:MOV RDX,qword ptr [RDX + 0x8]
	00016215:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
15: __insert_file_id::next_slot->queued_output = false;
	00016220:MOV byte ptr [RAX + 0x14],0x0
END_OF_LINE
----------------------------------------------
16: pfVar1 = (file_id *)hash_insert(file_id_table,__insert_file_id::next_slot);
	00016238:CALL 0x000202d2
END_OF_LINE
----------------------------------------------
17: if (pfVar1 == (file_id *)0x0) {
	00016241:CMP qword ptr [RBP + -0x8],0x0
	00016246:JNZ 0x0001624d
END_OF_LINE
----------------------------------------------
19: xalloc_die();
	00016248:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
21: if (pfVar1 == __insert_file_id::next_slot) {
	00016254:CMP qword ptr [RBP + -0x8],RAX
	00016258:JNZ 0x00016265
END_OF_LINE
----------------------------------------------
22: __insert_file_id::next_slot = (file_id *)0x0;
	0001625a:MOV qword ptr [0x00040770],0x0
END_OF_LINE
----------------------------------------------
24: pfVar1->type = type;
	0001626c:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
25: return pfVar1;
	0001626f:MOV RAX,qword ptr [RBP + -0x8]
	00016273:LEAVE
	00016274:RET
END_OF_LINE



Function: __lookup_file_id
----------------------------------------------
11: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00016285:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
12: f.dev = st->st_dev;
	00016298:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
13: f.ino = st->st_ino;
	000162a3:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
14: pfVar2 = (file_id *)hash_lookup(file_id_table,&f);
	000162b2:LEA RDX,[RBP + -0x20]
	000162b6:MOV RSI,RDX
	000162b9:MOV RDI,RAX
	000162bc:CALL 0x0001eedc
END_OF_LINE
----------------------------------------------
15: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000162c5:SUB RDX,qword ptr FS:[0x28]
	000162ce:JZ 0x000162d5
END_OF_LINE
----------------------------------------------
17: __stack_chk_fail();
	000162d0:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
19: return pfVar2;
	000162d6:RET
END_OF_LINE



Function: insert_file_id
----------------------------------------------
8: __insert_file_id(st,type);
	000162f6:CALL 0x000161c5
END_OF_LINE
----------------------------------------------
9: return;
	000162fd:RET
END_OF_LINE



Function: lookup_file_id
----------------------------------------------
10: pfVar2 = __lookup_file_id(st);
	00016315:CALL 0x00016275
END_OF_LINE
----------------------------------------------
11: if (pfVar2 == (file_id *)0x0) {
	0001631e:CMP qword ptr [RBP + -0x8],0x0
	00016323:JZ 0x0001632e
END_OF_LINE
----------------------------------------------
12: fVar1 = UNKNOWN;
	0001632e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: fVar1 = pfVar2->type;
	00016329:MOV EAX,dword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
17: return fVar1;
	00016334:RET
END_OF_LINE



Function: set_queued_output
----------------------------------------------
9: p = __lookup_file_id(st);
	00016351:CALL 0x00016275
END_OF_LINE
----------------------------------------------
10: if (p == (file_id *)0x0) {
	0001635a:CMP qword ptr [RBP + -0x8],0x0
	0001635f:JNZ 0x00016376
END_OF_LINE
----------------------------------------------
11: p = __insert_file_id(st,UNKNOWN);
	0001636d:CALL 0x000161c5
END_OF_LINE
----------------------------------------------
13: p->queued_output = queued_output;
	0001637e:MOV byte ptr [RAX + 0x14],DL
END_OF_LINE
----------------------------------------------
14: return;
	00016383:RET
END_OF_LINE



Function: has_queued_output
----------------------------------------------
10: pfVar2 = __lookup_file_id(st);
	0001639b:CALL 0x00016275
END_OF_LINE
----------------------------------------------
11: if ((pfVar2 == (file_id *)0x0) || (pfVar2->queued_output == false)) {
	000163a4:CMP qword ptr [RBP + -0x8],0x0
	000163a9:JZ 0x000163be
	000163ab:MOV RAX,qword ptr [RBP + -0x8]
	000163af:MOVZX EAX,byte ptr [RAX + 0x14]
	000163b3:TEST AL,AL
	000163b5:JZ 0x000163be
END_OF_LINE
----------------------------------------------
12: _Var1 = false;
	000163be:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: _Var1 = true;
	000163b7:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
17: return _Var1;
	000163c7:RET
END_OF_LINE



Function: contains_slash
----------------------------------------------
7: s_local = s;
	000163d4:JMP 0x000163ed
END_OF_LINE
----------------------------------------------
8: while( true ) {
	000163df:JNZ 0x000163e8
END_OF_LINE
----------------------------------------------
9: if (*s_local == '\0') {
	000163f1:MOVZX EAX,byte ptr [RAX]
	000163f4:TEST AL,AL
	000163f6:JNZ 0x000163d6
END_OF_LINE
----------------------------------------------
10: return false;
	000163fe:RET
END_OF_LINE
----------------------------------------------
12: if (*s_local == '/') break;
	000163da:MOVZX EAX,byte ptr [RAX]
	000163dd:CMP AL,0x2f
	000163df:JNZ 0x000163e8
END_OF_LINE
----------------------------------------------
13: s_local = s_local + 1;
	000163e8:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
15: return true;
	000163fe:RET
END_OF_LINE



Function: copy_attr
----------------------------------------------
8: return 0;
	00016415:RET
END_OF_LINE



Function: set_file_attributes
----------------------------------------------
24: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00016439:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
25: if ((attr & FA_TIMES) != 0) {
	0001644b:AND EAX,0x1
	0001644e:TEST EAX,EAX
	00016450:JZ 0x00016506
END_OF_LINE
----------------------------------------------
26: if (new_time == (timespec *)0x0) {
	00016456:CMP qword ptr [RBP + -0x68],0x0
	0001645b:JZ 0x00016482
END_OF_LINE
----------------------------------------------
27: times[0] = get_stat_atime(st);
	00016489:CALL 0x0002af9b
END_OF_LINE
----------------------------------------------
28: times[1] = get_stat_mtime(st);
	0001649d:CALL 0x0002afcf
END_OF_LINE
----------------------------------------------
31: times[0] = *new_time;
	00016465:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
32: times[1] = *new_time;
	00016465:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
34: iVar2 = safe_lutimens(to,times);
	000164aa:LEA RDX,[RBP + -0x30]
	000164ae:MOV RAX,qword ptr [RBP + -0x48]
	000164b2:MOV RSI,RDX
	000164b5:MOV RDI,RAX
	000164b8:CALL 0x00015f80
END_OF_LINE
----------------------------------------------
35: if (iVar2 != 0) {
	000164bd:TEST EAX,EAX
	000164bf:JZ 0x00016506
END_OF_LINE
----------------------------------------------
36: pcVar3 = quotearg(to);
	000164c8:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
37: if ((mode & 0xf000) == 0xa000) {
	000164d3:AND EAX,0xf000
	000164d8:CMP EAX,0xa000
	000164dd:JNZ 0x000164e8
END_OF_LINE
----------------------------------------------
38: pcVar4 = "symbolic link";
	000164df:LEA RAX,[0x339d0]
END_OF_LINE
----------------------------------------------
41: pcVar4 = "file";
	000164e8:LEA RAX,[0x339de]
END_OF_LINE
----------------------------------------------
44: pfatal("Failed to set the timestamps of %s %s",pcVar4,pcVar3);
	00016501:CALL 0x00018721
END_OF_LINE
----------------------------------------------
47: if ((attr & FA_IDS) != 0) {
	00016509:AND EAX,0x2
	0001650c:TEST EAX,EAX
	0001650e:JZ 0x00016641
END_OF_LINE
----------------------------------------------
48: if (set_file_attributes::lexical_block_7::euid == 0xffffffff) {
	0001651a:CMP EAX,-0x1
	0001651d:JNZ 0x00016535
END_OF_LINE
----------------------------------------------
49: set_file_attributes::lexical_block_7::euid = geteuid();
	0001651f:CALL 0x00005c20
END_OF_LINE
----------------------------------------------
50: set_file_attributes::lexical_block_7::egid = getegid();
	0001652a:CALL 0x00005e50
END_OF_LINE
----------------------------------------------
52: if (st->st_uid == set_file_attributes::lexical_block_7::euid) {
	00016539:MOV EDX,dword ptr [RAX + 0x1c]
	0001653c:MOV EAX,dword ptr [0x0003e0e0]
	00016542:CMP EDX,EAX
	00016544:JZ 0x0001654f
END_OF_LINE
----------------------------------------------
53: uid = 0xffffffff;
	0001654f:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
56: uid = st->st_uid;
	0001654a:MOV EAX,dword ptr [RAX + 0x1c]
END_OF_LINE
----------------------------------------------
58: if (st->st_gid == set_file_attributes::lexical_block_7::egid) {
	0001655b:MOV EDX,dword ptr [RAX + 0x20]
	0001655e:MOV EAX,dword ptr [0x0003e0e4]
	00016564:CMP EDX,EAX
	00016566:JZ 0x00016571
END_OF_LINE
----------------------------------------------
59: group = 0xffffffff;
	00016571:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
62: group = st->st_gid;
	0001656c:MOV EAX,dword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
64: if ((uid != 0xffffffff) || (group != 0xffffffff)) {
	00016579:CMP dword ptr [RBP + -0x38],-0x1
	0001657d:JNZ 0x00016589
	0001657f:CMP dword ptr [RBP + -0x34],-0x1
	00016583:JZ 0x00016641
END_OF_LINE
----------------------------------------------
65: iVar2 = safe_lchown(to,uid,group);
	00016598:CALL 0x00015f0a
END_OF_LINE
----------------------------------------------
66: if (iVar2 != 0) {
	0001659d:TEST EAX,EAX
	0001659f:JZ 0x00016641
END_OF_LINE
----------------------------------------------
67: piVar5 = __errno_location();
	000165a5:CALL 0x00005900
END_OF_LINE
----------------------------------------------
68: if (*piVar5 != 1) {
	000165aa:MOV EAX,dword ptr [RAX]
	000165ac:CMP EAX,0x1
	000165af:JNZ 0x000165e6
END_OF_LINE
----------------------------------------------
69: LAB_000165e6:
	000165e6:MOV RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
70: pcVar3 = quotearg(to);
	000165ed:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
71: if ((mode & 0xf000) == 0xa000) {
	000165f8:AND EAX,0xf000
	000165fd:CMP EAX,0xa000
	00016602:JNZ 0x0001660d
END_OF_LINE
----------------------------------------------
72: pcVar4 = "symbolic link";
	00016604:LEA RDX,[0x339d0]
END_OF_LINE
----------------------------------------------
75: pcVar4 = "file";
	0001660d:LEA RDX,[0x339de]
END_OF_LINE
----------------------------------------------
77: if (uid == 0xffffffff) {
	00016614:CMP dword ptr [RBP + -0x38],-0x1
	00016618:JNZ 0x00016623
END_OF_LINE
----------------------------------------------
78: pcVar6 = "owner";
	0001661a:LEA RAX,[0x33a0e]
END_OF_LINE
----------------------------------------------
81: pcVar6 = "owning group";
	00016623:LEA RAX,[0x33a14]
END_OF_LINE
----------------------------------------------
84: pfatal("Failed to set the %s of %s %s",pcVar6,pcVar4,pcVar3);
	0001663c:CALL 0x00018721
END_OF_LINE
----------------------------------------------
86: if (uid != 0xffffffff) {
	000165b1:CMP dword ptr [RBP + -0x38],-0x1
	000165b5:JZ 0x00016641
END_OF_LINE
----------------------------------------------
87: uid = 0xffffffff;
	000165bb:MOV dword ptr [RBP + -0x38],0xffffffff
END_OF_LINE
----------------------------------------------
88: iVar2 = safe_lchown(to,0xffffffff,group);
	000165d1:CALL 0x00015f0a
END_OF_LINE
----------------------------------------------
89: if (iVar2 != 0) {
	000165d6:TEST EAX,EAX
	000165d8:JZ 0x00016641
END_OF_LINE
----------------------------------------------
90: piVar5 = __errno_location();
	000165da:CALL 0x00005900
END_OF_LINE
----------------------------------------------
91: if (*piVar5 != 1) goto LAB_000165e6;
	000165df:MOV EAX,dword ptr [RAX]
	000165e1:CMP EAX,0x1
	000165e4:JZ 0x00016641
	000165e6:MOV RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
97: if ((attr & FA_XATTRS) != 0) {
	00016644:AND EAX,0x8
	00016647:TEST EAX,EAX
	00016649:JZ 0x00016690
END_OF_LINE
----------------------------------------------
98: iVar2 = copy_attr(from,to);
	00016659:CALL 0x000163ff
END_OF_LINE
----------------------------------------------
99: if (iVar2 != 0) {
	0001665e:TEST EAX,EAX
	00016660:JZ 0x00016690
END_OF_LINE
----------------------------------------------
100: piVar5 = __errno_location();
	00016662:CALL 0x00005900
END_OF_LINE
----------------------------------------------
101: if (*piVar5 != 0x26) {
	00016667:MOV EAX,dword ptr [RAX]
	00016669:CMP EAX,0x26
	0001666c:JZ 0x00016690
END_OF_LINE
----------------------------------------------
102: piVar5 = __errno_location();
	0001666e:CALL 0x00005900
END_OF_LINE
----------------------------------------------
103: if (*piVar5 != 0x5f) {
	00016673:MOV EAX,dword ptr [RAX]
	00016675:CMP EAX,0x5f
	00016678:JZ 0x00016690
END_OF_LINE
----------------------------------------------
104: piVar5 = __errno_location();
	0001667a:CALL 0x00005900
END_OF_LINE
----------------------------------------------
105: if (*piVar5 != 1) {
	0001667f:MOV EAX,dword ptr [RAX]
	00016681:CMP EAX,0x1
	00016684:JZ 0x00016690
END_OF_LINE
----------------------------------------------
107: fatal_exit(0);
	0001668b:CALL 0x0000c837
END_OF_LINE
----------------------------------------------
113: if (((attr & FA_MODE) != 0) && ((mode & 0xf000) != 0xa000)) {
	00016693:AND EAX,0x4
	00016696:TEST EAX,EAX
	00016698:JZ 0x00016703
	0001669a:MOV EAX,dword ptr [RBP + -0x50]
	0001669d:AND EAX,0xf000
	000166a2:CMP EAX,0xa000
	000166a7:JZ 0x00016703
END_OF_LINE
----------------------------------------------
114: iVar2 = safe_chmod(to,mode);
	000166b5:CALL 0x00015e9e
END_OF_LINE
----------------------------------------------
115: if (iVar2 != 0) {
	000166ba:TEST EAX,EAX
	000166bc:JZ 0x00016703
END_OF_LINE
----------------------------------------------
116: pcVar3 = quotearg(to);
	000166c5:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
117: if ((mode & 0xf000) == 0xa000) {
	000166d0:AND EAX,0xf000
	000166d5:CMP EAX,0xa000
	000166da:JNZ 0x000166e5
END_OF_LINE
----------------------------------------------
118: pcVar4 = "symbolic link";
	000166dc:LEA RAX,[0x339d0]
END_OF_LINE
----------------------------------------------
121: pcVar4 = "file";
	000166e5:LEA RAX,[0x339de]
END_OF_LINE
----------------------------------------------
124: pfatal("Failed to set the permissions of %s %s",pcVar4,pcVar3);
	000166fe:CALL 0x00018721
END_OF_LINE
----------------------------------------------
127: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00016708:SUB RAX,qword ptr FS:[0x28]
	00016711:JZ 0x00016718
END_OF_LINE
----------------------------------------------
129: __stack_chk_fail();
	00016713:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
131: return;
	00016719:RET
END_OF_LINE



Function: create_backup_copy
----------------------------------------------
10: copy_file(from,to,(stat *)0x0,0,st->st_mode,to_dir_known_to_exist);
	0001673f:MOV EDX,dword ptr [RAX + 0x18]
	00016742:MOV RSI,qword ptr [RBP + -0x10]
	00016746:MOV RAX,qword ptr [RBP + -0x8]
	0001674a:MOV R9D,ECX
	0001674d:MOV R8D,EDX
	00016750:MOV ECX,0x0
	00016755:MOV EDX,0x0
	0001675a:MOV RDI,RAX
	0001675d:CALL 0x000174dd
END_OF_LINE
----------------------------------------------
11: set_file_attributes(to,FA_TIMES|FA_IDS|FA_MODE,from,st,st->st_mode,(timespec *)0x0);
	00016766:MOV ESI,dword ptr [RAX + 0x18]
	00016769:MOV RCX,qword ptr [RBP + -0x18]
	0001676d:MOV RDX,qword ptr [RBP + -0x8]
	00016771:MOV RAX,qword ptr [RBP + -0x10]
	00016775:MOV R9D,0x0
	0001677b:MOV R8D,ESI
	0001677e:MOV ESI,0x7
	00016783:MOV RDI,RAX
	00016786:CALL 0x00016416
END_OF_LINE
----------------------------------------------
12: return;
	0001678d:RET
END_OF_LINE



Function: create_backup
----------------------------------------------
34: if (((to_st != (stat *)0x0) && ((to_st->st_mode & 0xf000) != 0x8000)) &&
	000167ae:CMP qword ptr [RBP + -0x80],0x0
	000167b3:JZ 0x0001681c
	000167b5:MOV RAX,qword ptr [RBP + -0x80]
	000167b9:MOV EAX,dword ptr [RAX + 0x18]
	000167bc:AND EAX,0xf000
	000167c1:CMP EAX,0x8000
	000167c6:JZ 0x0001681c
	000167c8:MOV RAX,qword ptr [RBP + -0x80]
	000167cc:MOV EAX,dword ptr [RAX + 0x18]
	000167cf:AND EAX,0xf000
	000167d4:CMP EAX,0xa000
	000167d9:JZ 0x0001681c
END_OF_LINE
----------------------------------------------
35: ((to_st->st_mode & 0xf000) != 0xa000)) {
	000167cc:MOV EAX,dword ptr [RAX + 0x18]
	000167cf:AND EAX,0xf000
	000167d4:CMP EAX,0xa000
END_OF_LINE
----------------------------------------------
36: if ((to_st->st_mode & 0xf000) == 0xa000) {
	000167df:MOV EAX,dword ptr [RAX + 0x18]
	000167e2:AND EAX,0xf000
	000167e7:CMP EAX,0xa000
	000167ec:JNZ 0x000167f7
END_OF_LINE
----------------------------------------------
37: pcVar4 = "symbolic link";
	000167ee:LEA RAX,[0x339d0]
END_OF_LINE
----------------------------------------------
40: pcVar4 = "regular file";
	000167f7:LEA RAX,[0x33a67]
END_OF_LINE
----------------------------------------------
43: fatal("File %s is not a %s -- refusing to create backup",to,pcVar4);
	00016817:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
45: if ((to_st == (stat *)0x0) || (fVar2 = lookup_file_id(to_st), fVar2 != CREATED)) {
	0001681c:CMP qword ptr [RBP + -0x80],0x0
	00016821:JZ 0x00016870
	00016823:MOV RAX,qword ptr [RBP + -0x80]
	00016827:MOV RDI,RAX
	0001682a:CALL 0x000162fe
	0001682f:CMP EAX,0x1
	00016832:JNZ 0x00016870
END_OF_LINE
----------------------------------------------
46: try_makedirs_errno = 0;
	00016870:MOV dword ptr [RBP + -0x70],0x0
END_OF_LINE
----------------------------------------------
47: if (((origprae == (char *)0x0) && (origbase == (char *)0x0)) && (origsuff == (char *)0x0)) {
	00016881:TEST RAX,RAX
	00016884:JNZ 0x000168a8
	00016886:LEA RAX,[0x3e320]
	0001688d:MOV RAX,qword ptr [RAX]
	00016890:TEST RAX,RAX
	00016893:JNZ 0x000168a8
	00016895:LEA RAX,[0x3e328]
	0001689c:MOV RAX,qword ptr [RAX]
	0001689f:TEST RAX,RAX
	000168a2:JZ 0x00016b07
END_OF_LINE
----------------------------------------------
48: bakname = find_backup_file_name(to,backup_type);
	00016b19:CALL 0x0001dd46
END_OF_LINE
----------------------------------------------
49: if (bakname == (char *)0x0) {
	00016b22:CMP qword ptr [RBP + -0x68],0x0
	00016b27:JNZ 0x00016b2f
END_OF_LINE
----------------------------------------------
51: xalloc_die();
	00016b29:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
55: pcVar4 = origprae;
	000168b5:JZ 0x000168c3
END_OF_LINE
----------------------------------------------
56: if (origprae == (char *)0x0) {
	000168b2:TEST RAX,RAX
	000168b5:JZ 0x000168c3
END_OF_LINE
----------------------------------------------
57: pcVar4 = "";
	000168c3:LEA RAX,[0x33abf]
END_OF_LINE
----------------------------------------------
59: pcVar8 = origbase;
	000168db:JZ 0x000168e9
END_OF_LINE
----------------------------------------------
60: if (origbase == (char *)0x0) {
	000168d8:TEST RAX,RAX
	000168db:JZ 0x000168e9
END_OF_LINE
----------------------------------------------
61: pcVar8 = "";
	000168e9:LEA RAX,[0x33abf]
END_OF_LINE
----------------------------------------------
63: __s = origsuff;
	00016901:JZ 0x0001690f
END_OF_LINE
----------------------------------------------
64: if (origsuff == (char *)0x0) {
	000168fe:TEST RAX,RAX
	00016901:JZ 0x0001690f
END_OF_LINE
----------------------------------------------
65: __s = "";
	0001690f:LEA RAX,[0x33abf]
END_OF_LINE
----------------------------------------------
67: __n = strlen(pcVar4);
	00016929:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
68: __n_00 = strlen(pcVar8);
	00016939:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
69: sVar5 = strlen(__s);
	00016949:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
70: sVar6 = strlen(to);
	00016959:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
71: for (o = to + sVar6; (to < o && (o[-1] != '/')); o = o + -1) {
	0001696a:ADD RAX,RDX
	0001696d:MOV qword ptr [RBP + -0x60],RAX
	00016971:MOV qword ptr [RBP + -0x18],0x0
	00016979:JMP 0x00016980
	0001697b:SUB qword ptr [RBP + -0x60],0x1
	00016980:MOV RAX,qword ptr [RBP + -0x60]
	00016984:CMP RAX,qword ptr [RBP + -0x40]
	00016988:JBE 0x00016999
	0001698a:MOV RAX,qword ptr [RBP + -0x60]
	0001698e:SUB RAX,0x1
	00016992:MOVZX EAX,byte ptr [RAX]
	00016995:CMP AL,0x2f
	00016997:JNZ 0x0001697b
END_OF_LINE
----------------------------------------------
73: __n_01 = to + (sVar6 - (long)o);
	000169a4:SUB RAX,qword ptr [RBP + -0x60]
END_OF_LINE
----------------------------------------------
74: sVar6 = sVar6 - (long)__n_01;
	000169b0:SUB qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
75: bakname = (char *)xmalloc((size_t)(__n_01 + sVar5 + __n + sVar6 + __n_00 + 1));
	000169bc:ADD RDX,RAX
	000169bf:MOV RAX,qword ptr [RBP + -0x30]
	000169c3:ADD RDX,RAX
	000169c6:MOV RAX,qword ptr [RBP + -0x18]
	000169ca:ADD RDX,RAX
	000169cd:MOV RAX,qword ptr [RBP + -0x28]
	000169d1:ADD RAX,RDX
	000169d4:ADD RAX,0x1
	000169d8:MOV RDI,RAX
	000169db:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
76: memcpy(bakname,pcVar4,__n);
	000169f6:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
77: memcpy(bakname + __n,to,sVar6);
	00016a03:LEA RCX,[RDX + RAX*0x1]
	00016a07:MOV RDX,qword ptr [RBP + -0x20]
	00016a0b:MOV RAX,qword ptr [RBP + -0x40]
	00016a0f:MOV RSI,RAX
	00016a12:MOV RDI,RCX
	00016a15:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
78: memcpy(bakname + __n + sVar6,pcVar8,__n_00);
	00016a22:ADD RDX,RAX
	00016a25:MOV RAX,qword ptr [RBP + -0x68]
	00016a29:LEA RCX,[RDX + RAX*0x1]
	00016a2d:MOV RDX,qword ptr [RBP + -0x30]
	00016a31:MOV RAX,qword ptr [RBP + -0x50]
	00016a35:MOV RSI,RAX
	00016a38:MOV RDI,RCX
	00016a3b:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
79: memcpy(bakname + __n + sVar6 + __n_00,o,(size_t)__n_01);
	00016a48:ADD RDX,RAX
	00016a4b:MOV RAX,qword ptr [RBP + -0x30]
	00016a4f:ADD RDX,RAX
	00016a52:MOV RAX,qword ptr [RBP + -0x68]
	00016a56:LEA RCX,[RDX + RAX*0x1]
	00016a5a:MOV RDX,qword ptr [RBP + -0x18]
	00016a5e:MOV RAX,qword ptr [RBP + -0x60]
	00016a62:MOV RSI,RAX
	00016a65:MOV RDI,RCX
	00016a68:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
80: memcpy(bakname + (long)(__n_01 + __n + sVar6 + __n_00),__s,sVar5 + 1);
	00016a71:LEA RDX,[RAX + 0x1]
	00016a75:MOV RCX,qword ptr [RBP + -0x38]
	00016a79:MOV RAX,qword ptr [RBP + -0x20]
	00016a7d:ADD RCX,RAX
	00016a80:MOV RAX,qword ptr [RBP + -0x30]
	00016a84:ADD RCX,RAX
	00016a87:MOV RAX,qword ptr [RBP + -0x18]
	00016a8b:ADD RCX,RAX
	00016a8e:MOV RAX,qword ptr [RBP + -0x68]
	00016a92:ADD RCX,RAX
	00016a95:MOV RAX,qword ptr [RBP + -0x48]
	00016a99:MOV RSI,RAX
	00016a9c:MOV RDI,RCX
	00016a9f:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
81: if (((origprae != (char *)0x0) &&
	00016aae:TEST RAX,RAX
	00016ab1:JZ 0x00016ad9
	00016ab3:LEA RAX,[0x3e318]
	00016aba:MOV RAX,qword ptr [RAX]
	00016abd:MOV RDI,RAX
	00016ac0:CALL 0x000163c8
	00016ac5:TEST AL,AL
	00016ac7:JNZ 0x00016afe
	00016ac9:MOV RAX,qword ptr [RBP + -0x78]
	00016acd:MOV RDI,RAX
	00016ad0:CALL 0x000163c8
	00016ad5:TEST AL,AL
	00016ad7:JNZ 0x00016afe
	00016ad9:LEA RAX,[0x3e320]
	00016ae0:MOV RAX,qword ptr [RAX]
	00016ae3:TEST RAX,RAX
	00016ae6:JZ 0x00016b2e
	00016ae8:LEA RAX,[0x3e320]
	00016aef:MOV RAX,qword ptr [RAX]
	00016af2:MOV RDI,RAX
	00016af5:CALL 0x000163c8
	00016afa:TEST AL,AL
	00016afc:JZ 0x00016b2e
END_OF_LINE
----------------------------------------------
82: ((_Var1 = contains_slash(origprae), _Var1 || (_Var1 = contains_slash(to), _Var1)))) ||
	00016ac0:CALL 0x000163c8
	00016ac5:TEST AL,AL
	00016ac7:JNZ 0x00016afe
	00016ac9:MOV RAX,qword ptr [RBP + -0x78]
	00016acd:MOV RDI,RAX
	00016ad0:CALL 0x000163c8
	00016ad5:TEST AL,AL
	00016ad7:JNZ 0x00016afe
END_OF_LINE
----------------------------------------------
83: ((origbase != (char *)0x0 && (_Var1 = contains_slash(origbase), _Var1)))) {
	00016ae3:TEST RAX,RAX
	00016ae6:JZ 0x00016b2e
	00016ae8:LEA RAX,[0x3e320]
	00016aef:MOV RAX,qword ptr [RAX]
	00016af2:MOV RDI,RAX
	00016af5:CALL 0x000163c8
	00016afa:TEST AL,AL
	00016afc:JZ 0x00016b2e
END_OF_LINE
----------------------------------------------
84: try_makedirs_errno = 2;
	00016afe:MOV dword ptr [RBP + -0x70],0x2
END_OF_LINE
----------------------------------------------
87: if (to_st == (stat *)0x0) {
	00016b2f:CMP qword ptr [RBP + -0x80],0x0
	00016b34:JNZ 0x00016c18
END_OF_LINE
----------------------------------------------
88: if ((debug & 4U) != 0) {
	00016b43:AND EAX,0x4
	00016b46:TEST EAX,EAX
	00016b48:JZ 0x00016b6d
END_OF_LINE
----------------------------------------------
89: pcVar4 = quotearg(bakname);
	00016b51:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
90: say("Creating empty file %s\n",pcVar4);
	00016b68:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
92: try_makedirs_errno = 2;
	00016b6d:MOV dword ptr [RBP + -0x70],0x2
END_OF_LINE
----------------------------------------------
93: safe_unlink(bakname);
	00016b7b:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
94: while (iVar3 = safe_open(bakname,0x2c1,0x1b6), iVar3 < 0) {
	00016bd5:CALL 0x00015ba3
	00016bda:MOV dword ptr [RBP + -0x6c],EAX
	00016bdd:CMP dword ptr [RBP + -0x6c],0x0
	00016be1:JS 0x00016b82
END_OF_LINE
----------------------------------------------
95: piVar7 = __errno_location();
	00016b82:CALL 0x00005900
END_OF_LINE
----------------------------------------------
96: if (try_makedirs_errno != *piVar7) {
	00016b87:MOV EAX,dword ptr [RAX]
	00016b89:CMP dword ptr [RBP + -0x70],EAX
	00016b8c:JZ 0x00016bb1
END_OF_LINE
----------------------------------------------
97: pcVar4 = quotearg(bakname);
	00016b95:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
99: pfatal("Can\'t create file %s",pcVar4);
	00016bac:CALL 0x00018721
END_OF_LINE
----------------------------------------------
101: makedirs(bakname);
	00016bb8:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
102: try_makedirs_errno = 0;
	00016bbd:MOV dword ptr [RBP + -0x70],0x0
END_OF_LINE
----------------------------------------------
104: iVar3 = close(iVar3);
	00016be8:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
105: if (iVar3 != 0) {
	00016bed:TEST EAX,EAX
	00016bef:JZ 0x00016d4f
END_OF_LINE
----------------------------------------------
106: pcVar4 = quotearg(bakname);
	00016bfc:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
108: pfatal("Can\'t close file %s",pcVar4);
	00016c13:CALL 0x00018721
END_OF_LINE
----------------------------------------------
111: else if (leave_original) {
	00016c1f:JZ 0x00016c44
END_OF_LINE
----------------------------------------------
112: create_backup_copy(to,bakname,to_st,try_makedirs_errno == 0);
	00016c21:CMP dword ptr [RBP + -0x70],0x0
	00016c25:SETZ AL
	00016c28:MOVZX ECX,AL
	00016c2b:MOV RDX,qword ptr [RBP + -0x80]
	00016c2f:MOV RSI,qword ptr [RBP + -0x68]
	00016c33:MOV RAX,qword ptr [RBP + -0x78]
	00016c37:MOV RDI,RAX
	00016c3a:CALL 0x0001671a
END_OF_LINE
----------------------------------------------
115: if ((debug & 4U) != 0) {
	00016c4d:AND EAX,0x4
	00016c50:TEST EAX,EAX
	00016c52:JZ 0x00016d34
END_OF_LINE
----------------------------------------------
116: pcVar4 = quotearg_n(L'\x01',bakname);
	00016c64:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
117: pcVar8 = quotearg_n(L'\0',to);
	00016c78:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
118: say("Renaming file %s to %s\n",pcVar8,pcVar4);
	00016c92:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
120: while (iVar3 = safe_rename(to,bakname), iVar3 != 0) {
	00016d42:CALL 0x00015c1d
	00016d47:TEST EAX,EAX
	00016d49:JNZ 0x00016c9c
END_OF_LINE
----------------------------------------------
121: piVar7 = __errno_location();
	00016c9c:CALL 0x00005900
END_OF_LINE
----------------------------------------------
122: if (try_makedirs_errno != *piVar7) {
	00016ca1:MOV EAX,dword ptr [RAX]
	00016ca3:CMP dword ptr [RBP + -0x70],EAX
	00016ca6:JNZ 0x00016cbd
END_OF_LINE
----------------------------------------------
123: piVar7 = __errno_location();
	00016cbd:CALL 0x00005900
END_OF_LINE
----------------------------------------------
124: if (*piVar7 != 0x12) {
	00016cc2:MOV EAX,dword ptr [RAX]
	00016cc4:CMP EAX,0x12
	00016cc7:JNZ 0x00016cf5
END_OF_LINE
----------------------------------------------
125: pcVar4 = quotearg_n(L'\x01',bakname);
	00016d01:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
126: pcVar8 = quotearg_n(L'\0',to);
	00016d15:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
128: pfatal("Can\'t rename file %s to %s",pcVar8,pcVar4);
	00016d2f:CALL 0x00018721
END_OF_LINE
----------------------------------------------
130: create_backup_copy(to,bakname,to_st,try_makedirs_errno == 0);
	00016cc9:CMP dword ptr [RBP + -0x70],0x0
	00016ccd:SETZ AL
	00016cd0:MOVZX ECX,AL
	00016cd3:MOV RDX,qword ptr [RBP + -0x80]
	00016cd7:MOV RSI,qword ptr [RBP + -0x68]
	00016cdb:MOV RAX,qword ptr [RBP + -0x78]
	00016cdf:MOV RDI,RAX
	00016ce2:CALL 0x0001671a
END_OF_LINE
----------------------------------------------
131: safe_unlink(to);
	00016cee:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
134: makedirs(bakname);
	00016caf:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
135: try_makedirs_errno = 0;
	00016cb4:MOV dword ptr [RBP + -0x70],0x0
END_OF_LINE
----------------------------------------------
138: free(bakname);
	00016d56:CALL 0x00005860
END_OF_LINE
----------------------------------------------
140: else if ((debug & 4U) != 0) {
	0001683d:AND EAX,0x4
	00016840:TEST EAX,EAX
	00016842:JZ 0x00016d5c
END_OF_LINE
----------------------------------------------
141: pcVar4 = quotearg(to);
	0001684f:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
142: say("File %s already seen\n",pcVar4);
	00016866:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
144: return;
	00016d62:RET
END_OF_LINE



Function: move_file
----------------------------------------------
31: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00016d9f:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
32: iVar3 = stat_file(to,&to_st);
	00016dae:LEA RDX,[RBP + -0x140]
	00016db5:MOV RAX,qword ptr [RBP + -0x180]
	00016dbc:MOV RSI,RDX
	00016dbf:MOV RDI,RAX
	00016dc2:CALL 0x00019f6e
END_OF_LINE
----------------------------------------------
33: if (backup) {
	00016dd4:JZ 0x00016e04
END_OF_LINE
----------------------------------------------
34: if (iVar3 == 0) {
	00016dd6:CMP dword ptr [RBP + -0x154],0x0
	00016ddd:JNZ 0x00016de8
END_OF_LINE
----------------------------------------------
35: to_st_00 = &to_st;
	00016ddf:LEA RAX,[RBP + -0x140]
END_OF_LINE
----------------------------------------------
38: to_st_00 = (stat *)0x0;
	00016de8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
40: create_backup(to,to_st_00,false);
	00016dff:CALL 0x0001678e
END_OF_LINE
----------------------------------------------
42: if (iVar3 == 0) {
	00016e04:CMP dword ptr [RBP + -0x154],0x0
	00016e0b:JNZ 0x00016e21
END_OF_LINE
----------------------------------------------
43: insert_file_id(&to_st,OVERWRITTEN);
	00016e0d:LEA RAX,[RBP + -0x140]
	00016e14:MOV ESI,0x3
	00016e19:MOV RDI,RAX
	00016e1c:CALL 0x000162d7
END_OF_LINE
----------------------------------------------
45: if (from == (char *)0x0) {
	00016e21:CMP qword ptr [RBP + -0x168],0x0
	00016e29:JZ 0x00017283
END_OF_LINE
----------------------------------------------
46: if (!backup) {
	0001728f:JZ 0x0001730c
END_OF_LINE
----------------------------------------------
47: if ((debug & 4U) != 0) {
	0001729a:AND EAX,0x4
	0001729d:TEST EAX,EAX
	0001729f:JZ 0x000172c7
END_OF_LINE
----------------------------------------------
48: pcVar5 = quotearg(to);
	000172ab:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
49: say("Removing file %s\n",pcVar5);
	000172c2:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
51: iVar3 = safe_unlink(to);
	000172d1:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
52: if ((iVar3 != 0) && (piVar7 = __errno_location(), *piVar7 != 2)) {
	000172d6:TEST EAX,EAX
	000172d8:JZ 0x0001730c
	000172da:CALL 0x00005900
	000172df:MOV EAX,dword ptr [RAX]
	000172e1:CMP EAX,0x2
	000172e4:JZ 0x0001730c
END_OF_LINE
----------------------------------------------
53: pcVar5 = quotearg(to);
	000172f0:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
55: pfatal("Can\'t remove file %s",pcVar5);
	00017307:CALL 0x00018721
END_OF_LINE
----------------------------------------------
58: goto LAB_0001730c;
	0001730c:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
60: if ((mode & 0xf000) == 0xa000) {
	00016e35:AND EAX,0xf000
	00016e3a:CMP EAX,0xa000
	00016e3f:JNZ 0x00017056
END_OF_LINE
----------------------------------------------
61: bVar2 = false;
	00016e45:MOV byte ptr [RBP + -0x15a],0x0
END_OF_LINE
----------------------------------------------
62: pcVar5 = (char *)xmalloc(0x1000);
	00016e51:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
63: size = 0;
	00016e5d:MOV dword ptr [RBP + -0x158],0x0
END_OF_LINE
----------------------------------------------
64: iVar3 = safe_open(from,0,0);
	00016e7b:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
65: if (iVar3 < 0) {
	00016e86:CMP dword ptr [RBP + -0x150],0x0
	00016e8d:JNS 0x00016ec1
END_OF_LINE
----------------------------------------------
66: pcVar5 = quotearg(from);
	00016e99:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
68: pfatal("Can\'t reopen file %s",pcVar5);
	00016eb0:CALL 0x00018721
END_OF_LINE
----------------------------------------------
70: while( true ) {
	00016eff:JG 0x00016eb5
END_OF_LINE
----------------------------------------------
71: sVar6 = read(iVar3,pcVar5 + size,(long)(0x1000 - size));
	00016ec6:SUB EAX,dword ptr [RBP + -0x158]
	00016ecc:MOVSXD RDX,EAX
	00016ecf:MOV EAX,dword ptr [RBP + -0x158]
	00016ed5:MOVSXD RCX,EAX
	00016ed8:MOV RAX,qword ptr [RBP + -0x148]
	00016edf:ADD RCX,RAX
	00016ee2:MOV EAX,dword ptr [RBP + -0x150]
	00016ee8:MOV RSI,RCX
	00016eeb:MOV EDI,EAX
	00016eed:CALL 0x00005c80
END_OF_LINE
----------------------------------------------
72: iVar4 = (int)sVar6;
	00016ef2:MOV dword ptr [RBP + -0x14c],EAX
END_OF_LINE
----------------------------------------------
73: if (iVar4 < 1) break;
	00016eff:JG 0x00016eb5
END_OF_LINE
----------------------------------------------
74: size = size + iVar4;
	00016ebb:ADD dword ptr [RBP + -0x158],EAX
END_OF_LINE
----------------------------------------------
76: if ((iVar4 != 0) || (iVar3 = close(iVar3), iVar3 != 0)) {
	00016f01:CMP dword ptr [RBP + -0x14c],0x0
	00016f08:JNZ 0x00016f1b
	00016f0a:MOV EAX,dword ptr [RBP + -0x150]
	00016f10:MOV EDI,EAX
	00016f12:CALL 0x00005c30
	00016f17:TEST EAX,EAX
	00016f19:JZ 0x00016f20
END_OF_LINE
----------------------------------------------
78: read_fatal();
	00016f1b:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
80: pcVar5[size] = '\0';
	00016f26:MOVSXD RDX,EAX
	00016f29:MOV RAX,qword ptr [RBP + -0x148]
	00016f30:ADD RAX,RDX
	00016f33:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
81: if ((!backup) && (iVar3 = safe_unlink(to), iVar3 == 0)) {
	00016f40:TEST AL,AL
	00016f42:JZ 0x00016f5e
	00016f44:MOV RAX,qword ptr [RBP + -0x180]
	00016f4b:MOV RDI,RAX
	00016f4e:CALL 0x00015dcc
	00016f53:TEST EAX,EAX
	00016f55:JNZ 0x00016f5e
END_OF_LINE
----------------------------------------------
82: bVar2 = true;
	00016f57:MOV byte ptr [RBP + -0x15a],0x1
END_OF_LINE
----------------------------------------------
84: iVar3 = safe_symlink(pcVar5,to);
	00016f72:CALL 0x00015e30
END_OF_LINE
----------------------------------------------
85: if (iVar3 != 0) {
	00016f77:TEST EAX,EAX
	00016f79:JZ 0x00016fe9
END_OF_LINE
----------------------------------------------
86: piVar7 = __errno_location();
	00016f7b:CALL 0x00005900
END_OF_LINE
----------------------------------------------
87: if ((*piVar7 == 2) && (!bVar2)) {
	00016f80:MOV EAX,dword ptr [RAX]
	00016f82:CMP EAX,0x2
	00016f85:JNZ 0x00016fa4
	00016f87:MOVZX EAX,byte ptr [RBP + -0x15a]
	00016f8e:XOR EAX,0x1
	00016f91:TEST AL,AL
	00016f93:JZ 0x00016fa4
END_OF_LINE
----------------------------------------------
88: makedirs(to);
	00016f9f:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
90: iVar3 = safe_symlink(pcVar5,to);
	00016fb8:CALL 0x00015e30
END_OF_LINE
----------------------------------------------
91: if (iVar3 != 0) {
	00016fbd:TEST EAX,EAX
	00016fbf:JZ 0x00016fe9
END_OF_LINE
----------------------------------------------
93: pfatal("Can\'t create %s %s","symbolic link",to);
	00016fe4:CALL 0x00018721
END_OF_LINE
----------------------------------------------
96: free(pcVar5);
	00016ff3:CALL 0x00005860
END_OF_LINE
----------------------------------------------
97: iVar3 = safe_lstat(to,&to_st);
	00016ff8:LEA RDX,[RBP + -0x140]
	00016fff:MOV RAX,qword ptr [RBP + -0x180]
	00017006:MOV RSI,RDX
	00017009:MOV RDI,RAX
	0001700c:CALL 0x00015b75
END_OF_LINE
----------------------------------------------
98: if (iVar3 != 0) {
	00017011:TEST EAX,EAX
	00017013:JZ 0x0001703d
END_OF_LINE
----------------------------------------------
100: pfatal("Can\'t get file attributes of %s %s","symbolic link",to);
	00017038:CALL 0x00018721
END_OF_LINE
----------------------------------------------
102: insert_file_id(&to_st,CREATED);
	0001703d:LEA RAX,[RBP + -0x140]
	00017044:MOV ESI,0x1
	00017049:MOV RDI,RAX
	0001704c:CALL 0x000162d7
END_OF_LINE
----------------------------------------------
103: goto LAB_0001730c;
	0001730c:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
105: if ((debug & 4U) != 0) {
	0001705f:AND EAX,0x4
	00017062:TEST EAX,EAX
	00017064:JZ 0x000170ab
END_OF_LINE
----------------------------------------------
106: pcVar5 = quotearg_n(L'\x01',to);
	00017075:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
107: pcVar8 = quotearg_n(L'\0',from);
	0001708c:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
108: say("Renaming file %s to %s\n",pcVar8,pcVar5);
	000170a6:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
110: iVar4 = safe_rename(from,to);
	000170bf:CALL 0x00015c1d
END_OF_LINE
----------------------------------------------
111: if (iVar4 == 0) {
	000170c4:TEST EAX,EAX
	000170c6:JZ 0x00017227
END_OF_LINE
----------------------------------------------
112: LAB_0001722b:
	0001722b:MOV RAX,qword ptr [RBP + -0x178]
END_OF_LINE
----------------------------------------------
113: insert_file_id(fromst,CREATED);
	0001723a:CALL 0x000162d7
END_OF_LINE
----------------------------------------------
114: if (((0 < iVar3) || ((iVar3 == 0 && (to_st.st_nlink < 2)))) &&
	00017246:JG 0x00017266
	00017248:CMP dword ptr [RBP + -0x154],0x0
	0001724f:JNZ 0x0001730c
	00017255:MOV RAX,qword ptr [RBP + -0x130]
	0001725c:CMP RAX,0x1
	00017260:JA 0x0001730c
	00017266:CMP qword ptr [RBP + -0x170],0x0
	0001726e:JZ 0x0001730c
END_OF_LINE
----------------------------------------------
115: (from_needs_removal != (_Bool *)0x0)) {
	00017266:CMP qword ptr [RBP + -0x170],0x0
END_OF_LINE
----------------------------------------------
116: *from_needs_removal = false;
	0001727b:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
120: to_dir_known_to_exist_1 = false;
	000170cc:MOV byte ptr [RBP + -0x159],0x0
END_OF_LINE
----------------------------------------------
121: piVar7 = __errno_location();
	000170d3:CALL 0x00005900
END_OF_LINE
----------------------------------------------
122: if ((*piVar7 == 2) && ((iVar3 == -1 || (iVar3 == 2)))) {
	000170d8:MOV EAX,dword ptr [RAX]
	000170da:CMP EAX,0x2
	000170dd:JNZ 0x00017128
	000170df:CMP dword ptr [RBP + -0x154],-0x1
	000170e6:JZ 0x000170f1
	000170e8:CMP dword ptr [RBP + -0x154],0x2
	000170ef:JNZ 0x00017128
END_OF_LINE
----------------------------------------------
123: makedirs(to);
	000170fb:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
124: to_dir_known_to_exist_1 = true;
	00017100:MOV byte ptr [RBP + -0x159],0x1
END_OF_LINE
----------------------------------------------
125: iVar4 = safe_rename(from,to);
	0001711b:CALL 0x00015c1d
END_OF_LINE
----------------------------------------------
126: if (iVar4 == 0) goto LAB_0001722b;
	00017120:TEST EAX,EAX
	00017122:JZ 0x0001722a
	00017128:CALL 0x00005900
	0001712d:MOV EAX,dword ptr [RAX]
	0001712f:CMP EAX,0x12
	00017132:JNZ 0x000171e2
	00017138:MOVZX EAX,byte ptr [RBP + -0x188]
	0001713f:XOR EAX,0x1
	00017142:TEST AL,AL
	00017144:JZ 0x00017194
	00017146:MOV RAX,qword ptr [RBP + -0x180]
	0001714d:MOV RDI,RAX
	00017150:CALL 0x00015dcc
	00017155:TEST EAX,EAX
	00017157:JNZ 0x00017162
	00017159:MOV byte ptr [RBP + -0x159],0x1
	00017160:JMP 0x00017194
	00017162:CALL 0x00005900
	00017167:MOV EAX,dword ptr [RAX]
	00017169:CMP EAX,0x2
	0001716c:JZ 0x00017194
	0001716e:MOV RAX,qword ptr [RBP + -0x180]
	00017175:MOV RDI,RAX
	00017178:CALL 0x0002a515
	0001717d:MOV RSI,RAX
	00017180:LEA RAX,[0x33b83]
	00017187:MOV RDI,RAX
	0001718a:MOV EAX,0x0
	0001718f:CALL 0x00018721
	00017194:MOVZX EDI,byte ptr [RBP + -0x159]
	0001719b:MOV ECX,dword ptr [RBP + -0x184]
	000171a1:LEA RDX,[RBP + -0xb0]
	000171a8:MOV RSI,qword ptr [RBP + -0x180]
	000171af:MOV RAX,qword ptr [RBP + -0x168]
	000171b6:MOV R9D,EDI
	000171b9:MOV R8D,ECX
	000171bc:MOV ECX,0x0
	000171c1:MOV RDI,RAX
	000171c4:CALL 0x000174dd
	000171c9:LEA RAX,[RBP + -0xb0]
	000171d0:MOV ESI,0x1
	000171d5:MOV RDI,RAX
	000171d8:CALL 0x000162d7
	000171dd:JMP 0x0001730c
	000171e2:MOV RAX,qword ptr [RBP + -0x180]
	000171e9:MOV RSI,RAX
	000171ec:MOV EDI,0x1
	000171f1:CALL 0x0002a4af
	000171f6:MOV RBX,RAX
	000171f9:MOV RAX,qword ptr [RBP + -0x168]
	00017200:MOV RSI,RAX
	00017203:MOV EDI,0x0
	00017208:CALL 0x0002a4af
	0001720d:MOV RDX,RBX
	00017210:MOV RSI,RAX
	00017213:LEA RAX,[0x33b19]
	0001721a:MOV RDI,RAX
	0001721d:MOV EAX,0x0
	00017222:CALL 0x00018721
	00017227:NOP
	00017228:JMP 0x0001722b
	0001722a:NOP
	0001722b:MOV RAX,qword ptr [RBP + -0x178]
END_OF_LINE
----------------------------------------------
128: piVar7 = __errno_location();
	00017128:CALL 0x00005900
END_OF_LINE
----------------------------------------------
129: if (*piVar7 != 0x12) {
	0001712d:MOV EAX,dword ptr [RAX]
	0001712f:CMP EAX,0x12
	00017132:JNZ 0x000171e2
END_OF_LINE
----------------------------------------------
130: pcVar5 = quotearg_n(L'\x01',to);
	000171f1:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
131: pcVar8 = quotearg_n(L'\0',from);
	00017208:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
133: pfatal("Can\'t rename file %s to %s",pcVar8,pcVar5);
	00017222:CALL 0x00018721
END_OF_LINE
----------------------------------------------
135: if (!backup) {
	00017144:JZ 0x00017194
END_OF_LINE
----------------------------------------------
136: iVar3 = safe_unlink(to);
	00017150:CALL 0x00015dcc
END_OF_LINE
----------------------------------------------
137: if (iVar3 == 0) {
	00017155:TEST EAX,EAX
	00017157:JNZ 0x00017162
END_OF_LINE
----------------------------------------------
138: to_dir_known_to_exist_1 = true;
	00017159:MOV byte ptr [RBP + -0x159],0x1
END_OF_LINE
----------------------------------------------
141: piVar7 = __errno_location();
	00017162:CALL 0x00005900
END_OF_LINE
----------------------------------------------
142: if (*piVar7 != 2) {
	00017167:MOV EAX,dword ptr [RAX]
	00017169:CMP EAX,0x2
	0001716c:JZ 0x00017194
END_OF_LINE
----------------------------------------------
143: pcVar5 = quotearg(to);
	00017178:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
145: pfatal("Can\'t remove file %s",pcVar5);
	0001718f:CALL 0x00018721
END_OF_LINE
----------------------------------------------
149: copy_file(from,to,&tost,0,mode,to_dir_known_to_exist_1);
	000171a1:LEA RDX,[RBP + -0xb0]
	000171a8:MOV RSI,qword ptr [RBP + -0x180]
	000171af:MOV RAX,qword ptr [RBP + -0x168]
	000171b6:MOV R9D,EDI
	000171b9:MOV R8D,ECX
	000171bc:MOV ECX,0x0
	000171c1:MOV RDI,RAX
	000171c4:CALL 0x000174dd
END_OF_LINE
----------------------------------------------
150: insert_file_id(&tost,CREATED);
	000171c9:LEA RAX,[RBP + -0xb0]
	000171d0:MOV ESI,0x1
	000171d5:MOV RDI,RAX
	000171d8:CALL 0x000162d7
END_OF_LINE
----------------------------------------------
152: LAB_0001730c:
	0001730c:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
153: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00017310:SUB RAX,qword ptr FS:[0x28]
	00017319:JZ 0x00017320
END_OF_LINE
----------------------------------------------
154: return;
	00017325:RET
END_OF_LINE
----------------------------------------------
157: __stack_chk_fail();
	0001731b:CALL 0x00005b00
END_OF_LINE



Function: create_file
----------------------------------------------
16: if (to_dir_known_to_exist) {
	00017345:JZ 0x0001734e
END_OF_LINE
----------------------------------------------
17: try_makedirs_errno = 0;
	00017347:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
20: try_makedirs_errno = 2;
	0001734e:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
23: iVar1 = safe_open(file,open_flags | 0x240,mode & 0xffffffb6 | 0x180);
	0001735d:AND dword ptr [RBP + -0x20],0xffffffb6
	00017361:MOV EAX,dword ptr [RBP + -0x1c]
	00017364:OR EAX,0x240
	00017369:MOV ECX,EAX
	0001736b:MOV EDX,dword ptr [RBP + -0x20]
	0001736e:MOV RAX,qword ptr [RBP + -0x18]
	00017372:MOV ESI,ECX
	00017374:MOV RDI,RAX
	00017377:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
24: if (iVar1 < 0) {
	0001737f:CMP dword ptr [RBP + -0xc],0x0
	00017383:JNS 0x000173e3
END_OF_LINE
----------------------------------------------
25: piVar2 = __errno_location();
	00017385:CALL 0x00005900
END_OF_LINE
----------------------------------------------
26: if (try_makedirs_errno != *piVar2) {
	0001738a:MOV EAX,dword ptr [RAX]
	0001738c:CMP dword ptr [RBP + -0x10],EAX
	0001738f:JZ 0x000173b4
END_OF_LINE
----------------------------------------------
27: pcVar3 = quotearg(file);
	00017398:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
29: pfatal("Can\'t create file %s",pcVar3);
	000173af:CALL 0x00018721
END_OF_LINE
----------------------------------------------
31: pcVar3 = xstrdup(file);
	000173bb:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
32: makedirs(pcVar3);
	000173cb:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
33: free(pcVar3);
	000173d7:CALL 0x00005860
END_OF_LINE
----------------------------------------------
34: try_makedirs_errno = 0;
	000173dc:MOV dword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
36: } while (iVar1 < 0);
	000173e3:CMP dword ptr [RBP + -0xc],0x0
	000173e7:JS 0x00017361
END_OF_LINE
----------------------------------------------
37: return iVar1;
	000173f1:RET
END_OF_LINE



Function: copy_to_fd
----------------------------------------------
15: from_flags = 0;
	00017405:MOV dword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
16: if (!follow_symlinks) {
	0001741b:JZ 0x00017424
END_OF_LINE
----------------------------------------------
17: from_flags = 0x20000;
	0001741d:OR dword ptr [RBP + -0x10],0x20000
END_OF_LINE
----------------------------------------------
19: iVar1 = safe_open(from,from_flags,0);
	00017435:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
20: if (iVar1 < 0) {
	0001743d:CMP dword ptr [RBP + -0xc],0x0
	00017441:JNS 0x0001749b
END_OF_LINE
----------------------------------------------
21: pcVar2 = quotearg(from);
	0001744a:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
23: pfatal("Can\'t reopen file %s",pcVar2);
	00017461:CALL 0x00018721
END_OF_LINE
----------------------------------------------
26: count = read(iVar1,buf,bufsize);
	000174b7:CALL 0x00005c80
END_OF_LINE
----------------------------------------------
27: if (count == 0) {
	000174c0:CMP qword ptr [RBP + -0x8],0x0
	000174c5:JNZ 0x00017466
END_OF_LINE
----------------------------------------------
28: iVar1 = close(iVar1);
	000174cc:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
29: if (iVar1 != 0) {
	000174d1:TEST EAX,EAX
	000174d3:JZ 0x000174da
END_OF_LINE
----------------------------------------------
31: read_fatal();
	000174d5:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
33: return;
	000174dc:RET
END_OF_LINE
----------------------------------------------
35: if (count == 0xffffffffffffffff) {
	00017466:CMP qword ptr [RBP + -0x8],-0x1
	0001746b:JNZ 0x00017472
END_OF_LINE
----------------------------------------------
37: read_fatal();
	0001746d:CALL 0x000186e9
END_OF_LINE
----------------------------------------------
39: sVar3 = full_write(tofd,buf,count);
	00017488:CALL 0x0001ead7
END_OF_LINE
----------------------------------------------
40: } while (sVar3 == count);
	00017491:CMP RAX,RDX
	00017494:JZ 0x0001749b
END_OF_LINE
----------------------------------------------
42: write_fatal();
	00017496:CALL 0x00018705
END_OF_LINE



Function: copy_file
----------------------------------------------
21: if ((debug & 4U) != 0) {
	0001750c:AND EAX,0x4
	0001750f:TEST EAX,EAX
	00017511:JZ 0x00017574
END_OF_LINE
----------------------------------------------
22: pcVar3 = quotearg_n(L'\x01',to);
	0001751f:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
23: pcVar4 = quotearg_n(L'\0',from);
	00017533:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
24: if ((mode & 0xf000) == 0xa000) {
	0001753e:AND EAX,0xf000
	00017543:CMP EAX,0xa000
	00017548:JNZ 0x00017553
END_OF_LINE
----------------------------------------------
25: pcVar5 = "symbolic link";
	0001754a:LEA RAX,[0x339d0]
END_OF_LINE
----------------------------------------------
28: pcVar5 = "file";
	00017553:LEA RAX,[0x339de]
END_OF_LINE
----------------------------------------------
30: say("Copying %s %s to %s\n",pcVar5,pcVar4,pcVar3);
	0001756f:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
32: if ((mode & 0xf000) == 0xa000) {
	00017577:AND EAX,0xf000
	0001757c:CMP EAX,0xa000
	00017581:JNZ 0x0001767b
END_OF_LINE
----------------------------------------------
33: pcVar3 = (char *)xmalloc(0x1001);
	0001758c:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
34: sVar6 = safe_readlink(from,pcVar3,0x1000);
	000175a8:CALL 0x00015ff7
END_OF_LINE
----------------------------------------------
35: if (sVar6 < 0) {
	000175b1:CMP qword ptr [RBP + -0x18],0x0
	000175b6:JNS 0x000175dd
END_OF_LINE
----------------------------------------------
37: pfatal("Can\'t read %s %s","symbolic link",from);
	000175d8:CALL 0x00018721
END_OF_LINE
----------------------------------------------
39: pcVar3[sVar6] = '\0';
	000175e5:ADD RAX,RDX
	000175e8:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
40: iVar1 = safe_symlink(pcVar3,to);
	000175f9:CALL 0x00015e30
END_OF_LINE
----------------------------------------------
41: if (iVar1 != 0) {
	000175fe:TEST EAX,EAX
	00017600:JZ 0x00017627
END_OF_LINE
----------------------------------------------
43: pfatal("Can\'t create %s %s","symbolic link",to);
	00017622:CALL 0x00018721
END_OF_LINE
----------------------------------------------
45: if (tost != (stat *)0x0) {
	00017627:CMP qword ptr [RBP + -0x48],0x0
	0001762c:JZ 0x0001766a
END_OF_LINE
----------------------------------------------
46: iVar1 = safe_lstat(to,tost);
	0001763c:CALL 0x00015b75
END_OF_LINE
----------------------------------------------
47: if (iVar1 != 0) {
	00017641:TEST EAX,EAX
	00017643:JZ 0x0001766a
END_OF_LINE
----------------------------------------------
49: pfatal("Can\'t get file attributes of %s %s","symbolic link",to);
	00017665:CALL 0x00018721
END_OF_LINE
----------------------------------------------
52: free(pcVar3);
	00017671:CALL 0x00005860
END_OF_LINE
----------------------------------------------
55: if ((mode & 0xf000) != 0x8000) {
	0001767e:AND EAX,0xf000
	00017683:CMP EAX,0x8000
	00017688:JZ 0x000176b2
END_OF_LINE
----------------------------------------------
57: __assert_fail("S_ISREG (mode)","util.c",0x276,"copy_file");
	000176ad:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
59: to_flags_local = to_flags;
	000176c1:JZ 0x000176ca
END_OF_LINE
----------------------------------------------
60: if (follow_symlinks != true) {
	000176bf:TEST AL,AL
	000176c1:JZ 0x000176ca
END_OF_LINE
----------------------------------------------
61: to_flags_local = to_flags | 0x20000;
	000176c3:OR dword ptr [RBP + -0x4c],0x20000
END_OF_LINE
----------------------------------------------
63: iVar1 = create_file(to,to_flags_local | 1,mode,to_dir_known_to_exist);
	000176d1:OR EAX,0x1
	000176d4:MOV ESI,EAX
	000176d6:MOV EDX,dword ptr [RBP + -0x50]
	000176d9:MOV RAX,qword ptr [RBP + -0x40]
	000176dd:MOV RDI,RAX
	000176e0:CALL 0x00017326
END_OF_LINE
----------------------------------------------
64: copy_to_fd(from,iVar1);
	000176f4:CALL 0x000173f2
END_OF_LINE
----------------------------------------------
65: if (tost != (stat *)0x0) {
	000176f9:CMP qword ptr [RBP + -0x48],0x0
	000176fe:JZ 0x0001773a
END_OF_LINE
----------------------------------------------
66: iVar2 = fstat(iVar1,(stat *)tost);
	0001770c:CALL 0x00006060
END_OF_LINE
----------------------------------------------
67: if (iVar2 != 0) {
	00017711:TEST EAX,EAX
	00017713:JZ 0x0001773a
END_OF_LINE
----------------------------------------------
69: pfatal("Can\'t get file attributes of %s %s",&DAT_000339de,to);
	00017735:CALL 0x00018721
END_OF_LINE
----------------------------------------------
72: iVar1 = close(iVar1);
	0001773f:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
73: if (iVar1 != 0) {
	00017744:TEST EAX,EAX
	00017746:JZ 0x0001774d
END_OF_LINE
----------------------------------------------
75: write_fatal();
	00017748:CALL 0x00018705
END_OF_LINE
----------------------------------------------
78: return;
	00017753:RET
END_OF_LINE



Function: append_to_file
----------------------------------------------
12: to_flags = 0x401;
	00017768:MOV dword ptr [RBP + -0x8],0x401
END_OF_LINE
----------------------------------------------
13: if (!follow_symlinks) {
	0001777e:JZ 0x00017787
END_OF_LINE
----------------------------------------------
14: to_flags = 0x20401;
	00017780:OR dword ptr [RBP + -0x8],0x20000
END_OF_LINE
----------------------------------------------
16: iVar1 = safe_open(to,to_flags,0);
	00017798:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
17: if (iVar1 < 0) {
	000177a0:CMP dword ptr [RBP + -0x4],0x0
	000177a4:JNS 0x000177c9
END_OF_LINE
----------------------------------------------
18: pcVar2 = quotearg(to);
	000177ad:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
20: pfatal("Can\'t reopen file %s",pcVar2);
	000177c4:CALL 0x00018721
END_OF_LINE
----------------------------------------------
22: copy_to_fd(from,iVar1);
	000177d5:CALL 0x000173f2
END_OF_LINE
----------------------------------------------
23: iVar1 = close(iVar1);
	000177df:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
24: if (iVar1 != 0) {
	000177e4:TEST EAX,EAX
	000177e6:JZ 0x000177ed
END_OF_LINE
----------------------------------------------
26: write_fatal();
	000177e8:CALL 0x00018705
END_OF_LINE
----------------------------------------------
28: return;
	000177ef:RET
END_OF_LINE



Function: quote_system_arg
----------------------------------------------
12: __s = quotearg_style(shell_quoting_style,arg);
	00017810:CALL 0x0002a631
END_OF_LINE
----------------------------------------------
13: sVar1 = strlen(__s);
	00017820:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
14: if (quoted != (char *)0x0) {
	00017829:CMP qword ptr [RBP + -0x18],0x0
	0001782e:JZ 0x0001784b
END_OF_LINE
----------------------------------------------
15: memcpy(quoted,__s,sVar1 + 1);
	00017834:LEA RDX,[RAX + 0x1]
	00017838:MOV RCX,qword ptr [RBP + -0x10]
	0001783c:MOV RAX,qword ptr [RBP + -0x18]
	00017840:MOV RSI,RCX
	00017843:MOV RDI,RAX
	00017846:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
17: return sVar1;
	0001784b:MOV RAX,qword ptr [RBP + -0x8]
	0001784f:LEAVE
	00017850:RET
END_OF_LINE



Function: version_controller
----------------------------------------------
45: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00017885:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
46: __s = dir_name(filename);
	0001789e:CALL 0x0001df25
END_OF_LINE
----------------------------------------------
47: __s_00 = base_name(filename);
	000178b4:CALL 0x0001df57
END_OF_LINE
----------------------------------------------
48: if (*filename == '-') {
	000178c7:MOVZX EAX,byte ptr [RAX]
	000178ca:CMP AL,0x2d
	000178cc:JNZ 0x000178d7
END_OF_LINE
----------------------------------------------
49: puVar5 = &DAT_00033c71;
	000178ce:LEA RAX,[0x33c71]
END_OF_LINE
----------------------------------------------
52: puVar5 = &DAT_00033abf;
	000178d7:LEA RAX,[0x33abf]
END_OF_LINE
----------------------------------------------
54: sVar6 = strlen(__s);
	000178ef:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
55: lVar7 = sVar6 + 1;
	000178f4:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
56: sVar6 = strlen(__s_00);
	00017914:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
57: sVar8 = quote_system_arg((char *)0x0,__s);
	00017947:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
58: sVar9 = quote_system_arg((char *)0x0,__s_00);
	0001795e:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
59: n = sVar9 + sVar8 + 0x1e;
	00017963:ADD RAX,RBX
	00017966:MOV qword ptr [RBP + -0x100],RAX
	0001796d:MOV RDX,qword ptr [RBP + -0x100]
	00017974:MOV RAX,qword ptr [RBP + -0x110]
	0001797b:ADD RAX,RDX
	0001797e:ADD RAX,0x17
END_OF_LINE
----------------------------------------------
60: sVar8 = (sVar9 + sVar8 + 0xe) * 2 + 7;
	00017963:ADD RAX,RBX
	00017966:MOV qword ptr [RBP + -0x100],RAX
	0001796d:MOV RDX,qword ptr [RBP + -0x100]
	00017974:MOV RAX,qword ptr [RBP + -0x110]
	0001797b:ADD RAX,RDX
	0001797e:ADD RAX,0x17
	00017982:MOV qword ptr [RBP + -0xf8],RAX
	00017989:MOV RAX,qword ptr [RBP + -0x100]
	00017990:ADD RAX,0xe
	00017994:LEA RDX,[RAX + RAX*0x1]
	00017998:MOV RAX,qword ptr [RBP + -0x110]
	0001799f:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
61: __s_01 = (char *)xmalloc(lVar7 + sVar6 + 8);
	00017920:ADD RDX,RAX
	00017923:MOV RAX,qword ptr [RBP + -0x110]
	0001792a:ADD RAX,RDX
	0001792d:ADD RAX,0x1
	00017931:MOV qword ptr [RBP + -0x108],RAX
	00017938:MOV RAX,qword ptr [RBP + -0x130]
	0001793f:MOV RSI,RAX
	00017942:MOV EDI,0x0
	00017947:CALL 0x000177f0
	0001794c:MOV RBX,RAX
	0001794f:MOV RAX,qword ptr [RBP + -0x128]
	00017956:MOV RSI,RAX
	00017959:MOV EDI,0x0
	0001795e:CALL 0x000177f0
	00017963:ADD RAX,RBX
	00017966:MOV qword ptr [RBP + -0x100],RAX
	0001796d:MOV RDX,qword ptr [RBP + -0x100]
	00017974:MOV RAX,qword ptr [RBP + -0x110]
	0001797b:ADD RAX,RDX
	0001797e:ADD RAX,0x17
	00017982:MOV qword ptr [RBP + -0xf8],RAX
	00017989:MOV RAX,qword ptr [RBP + -0x100]
	00017990:ADD RAX,0xe
	00017994:LEA RDX,[RAX + RAX*0x1]
	00017998:MOV RAX,qword ptr [RBP + -0x110]
	0001799f:ADD RAX,RDX
	000179a2:MOV qword ptr [RBP + -0xf0],RAX
	000179a9:MOV RAX,qword ptr [RBP + -0x108]
	000179b0:MOV RDI,RAX
	000179b3:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
62: r = (char *)0x0;
	000179bf:MOV qword ptr [RBP + -0x138],0x0
END_OF_LINE
----------------------------------------------
63: sprintf(__s_01,"%s/",__s);
	000179ea:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
64: sprintf(__s_01 + lVar7,"RCS/%s%s",__s_00,",v");
	000179fd:LEA RDI,[RDX + RAX*0x1]
	00017a01:MOV RAX,qword ptr [RBP + -0x128]
	00017a08:LEA RDX,[0x33bf2]
	00017a0f:MOV RCX,RDX
	00017a12:MOV RDX,RAX
	00017a15:LEA RAX,[0x33c78]
	00017a1c:MOV RSI,RAX
	00017a1f:MOV EAX,0x0
	00017a24:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
65: iVar4 = safe_stat(__s_01,&cstat);
	00017a29:LEA RDX,[RBP + -0xb0]
	00017a30:MOV RAX,qword ptr [RBP + -0xe8]
	00017a37:MOV RSI,RDX
	00017a3a:MOV RDI,RAX
	00017a3d:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
66: if (iVar4 == 0) {
	00017a42:TEST EAX,EAX
	00017a44:JZ 0x00017af5
END_OF_LINE
----------------------------------------------
67: LAB_00017af5:
	00017af5:CMP qword ptr [RBP + -0x158],0x0
END_OF_LINE
----------------------------------------------
68: if (((filestat == (stat *)0x0) || (filestat->st_dev != cstat.st_dev)) ||
	00017af5:CMP qword ptr [RBP + -0x158],0x0
	00017afd:JZ 0x00017b30
	00017aff:MOV RAX,qword ptr [RBP + -0x158]
	00017b06:MOV RDX,qword ptr [RAX]
	00017b09:MOV RAX,qword ptr [RBP + -0xb0]
	00017b10:CMP RDX,RAX
	00017b13:JNZ 0x00017b30
	00017b15:MOV RAX,qword ptr [RBP + -0x158]
	00017b1c:MOV RDX,qword ptr [RAX + 0x8]
	00017b20:MOV RAX,qword ptr [RBP + -0xa8]
	00017b27:CMP RDX,RAX
	00017b2a:JZ 0x00017cbc
END_OF_LINE
----------------------------------------------
69: (filestat->st_ino != cstat.st_ino)) {
	00017b1c:MOV RDX,qword ptr [RAX + 0x8]
	00017b20:MOV RAX,qword ptr [RBP + -0xa8]
	00017b27:CMP RDX,RAX
END_OF_LINE
----------------------------------------------
70: if (getbuf != (char **)0x0) {
	00017b30:CMP qword ptr [RBP + -0x160],0x0
	00017b38:JZ 0x00017be2
END_OF_LINE
----------------------------------------------
71: pcVar10 = (char *)xmalloc(n);
	00017b48:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
72: *getbuf = pcVar10;
	00017b57:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
73: pcVar10 = *getbuf;
	00017b61:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
74: if (readonly) {
	00017b72:JZ 0x00017b7d
END_OF_LINE
----------------------------------------------
75: pcVar11 = "co %s";
	00017b74:LEA RAX,[0x33bf5]
END_OF_LINE
----------------------------------------------
78: pcVar11 = "co -l %s";
	00017b7d:LEA RAX,[0x33c00]
END_OF_LINE
----------------------------------------------
80: sprintf(pcVar10,pcVar11,puVar5);
	00017b9d:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
81: sVar6 = strlen(pcVar10);
	00017bac:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
82: sVar9 = quote_system_arg(pcVar10 + sVar6,filename);
	00017bb1:ADD qword ptr [RBP + -0xe0],RAX
	00017bb8:MOV RDX,qword ptr [RBP + -0x148]
	00017bbf:MOV RAX,qword ptr [RBP + -0xe0]
	00017bc6:MOV RSI,RDX
	00017bc9:MOV RDI,RAX
	00017bcc:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
83: (pcVar10 + sVar6)[sVar9] = '\0';
	00017bb1:ADD qword ptr [RBP + -0xe0],RAX
	00017bb8:MOV RDX,qword ptr [RBP + -0x148]
	00017bbf:MOV RAX,qword ptr [RBP + -0xe0]
	00017bc6:MOV RSI,RDX
	00017bc9:MOV RDI,RAX
	00017bcc:CALL 0x000177f0
	00017bd1:ADD qword ptr [RBP + -0xe0],RAX
	00017bd8:MOV RAX,qword ptr [RBP + -0xe0]
	00017bdf:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
85: if (diffbuf != (char **)0x0) {
	00017be2:CMP qword ptr [RBP + -0x168],0x0
	00017bea:JZ 0x00017ca9
END_OF_LINE
----------------------------------------------
86: pcVar10 = (char *)xmalloc(sVar8);
	00017bfa:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
87: *diffbuf = pcVar10;
	00017c09:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
88: pcVar10 = *diffbuf;
	00017c13:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
89: sprintf(pcVar10,"rcsdiff %s",puVar5);
	00017c3d:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
90: sVar6 = strlen(pcVar10);
	00017c4c:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
91: sVar8 = quote_system_arg(pcVar10 + sVar6,filename);
	00017c51:ADD qword ptr [RBP + -0xd8],RAX
	00017c58:MOV RDX,qword ptr [RBP + -0x148]
	00017c5f:MOV RAX,qword ptr [RBP + -0xd8]
	00017c66:MOV RSI,RDX
	00017c69:MOV RDI,RAX
	00017c6c:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
92: pcVar10 = pcVar10 + sVar6 + sVar8;
	00017c51:ADD qword ptr [RBP + -0xd8],RAX
	00017c58:MOV RDX,qword ptr [RBP + -0x148]
	00017c5f:MOV RAX,qword ptr [RBP + -0xd8]
	00017c66:MOV RSI,RDX
	00017c69:MOV RDI,RAX
	00017c6c:CALL 0x000177f0
	00017c71:ADD qword ptr [RBP + -0xd8],RAX
END_OF_LINE
----------------------------------------------
93: *pcVar10 = '>';
	00017c8a:MOV byte ptr [RAX],0x3e
END_OF_LINE
----------------------------------------------
94: *(undefined8 *)(pcVar10 + 1) = 0x6c756e2f7665642f;
	00017c7f:LEA RDX,[RAX + 0x1]
	00017c83:MOV qword ptr [RBP + -0xd8],RDX
	00017c8a:MOV byte ptr [RAX],0x3e
	00017c8d:MOV RAX,qword ptr [RBP + -0xd8]
	00017c94:MOV RDX,qword ptr [0x00033be8]
	00017c9b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
95: *(undefined2 *)(pcVar10 + 9) = 0x6c;
	00017ca5:MOV word ptr [RAX + 0x8],DX
END_OF_LINE
----------------------------------------------
97: r = "RCS";
	00017cb0:MOV qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
98: goto LAB_00018192;
	00018192:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
102: sprintf(__s_01 + lVar7,"RCS/%s",__s_00);
	00017a58:LEA RCX,[RDX + RAX*0x1]
	00017a5c:MOV RAX,qword ptr [RBP + -0x128]
	00017a63:MOV RDX,RAX
	00017a66:LEA RAX,[0x33c81]
	00017a6d:MOV RSI,RAX
	00017a70:MOV RDI,RCX
	00017a73:MOV EAX,0x0
	00017a78:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
103: iVar4 = safe_stat(__s_01,&cstat);
	00017a7d:LEA RDX,[RBP + -0xb0]
	00017a84:MOV RAX,qword ptr [RBP + -0xe8]
	00017a8b:MOV RSI,RDX
	00017a8e:MOV RDI,RAX
	00017a91:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
104: if (iVar4 == 0) goto LAB_00017af5;
	00017a96:TEST EAX,EAX
	00017a98:JZ 0x00017af5
	00017a9a:MOV RDX,qword ptr [RBP + -0xe8]
	00017aa1:MOV RAX,qword ptr [RBP + -0x118]
	00017aa8:LEA RDI,[RDX + RAX*0x1]
	00017aac:MOV RAX,qword ptr [RBP + -0x128]
	00017ab3:LEA RDX,[0x33bf2]
	00017aba:MOV RCX,RDX
	00017abd:MOV RDX,RAX
	00017ac0:LEA RAX,[0x33c88]
	00017ac7:MOV RSI,RAX
	00017aca:MOV EAX,0x0
	00017acf:CALL 0x00005fe0
	00017ad4:LEA RDX,[RBP + -0xb0]
	00017adb:MOV RAX,qword ptr [RBP + -0xe8]
	00017ae2:MOV RSI,RDX
	00017ae5:MOV RDI,RAX
	00017ae8:CALL 0x00015b47
	00017aed:TEST EAX,EAX
	00017aef:JNZ 0x00017cbc
	00017af5:CMP qword ptr [RBP + -0x158],0x0
END_OF_LINE
----------------------------------------------
105: sprintf(__s_01 + lVar7,"%s%s",__s_00,",v");
	00017aa8:LEA RDI,[RDX + RAX*0x1]
	00017aac:MOV RAX,qword ptr [RBP + -0x128]
	00017ab3:LEA RDX,[0x33bf2]
	00017aba:MOV RCX,RDX
	00017abd:MOV RDX,RAX
	00017ac0:LEA RAX,[0x33c88]
	00017ac7:MOV RSI,RAX
	00017aca:MOV EAX,0x0
	00017acf:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
106: iVar4 = safe_stat(__s_01,&cstat);
	00017ad4:LEA RDX,[RBP + -0xb0]
	00017adb:MOV RAX,qword ptr [RBP + -0xe8]
	00017ae2:MOV RSI,RDX
	00017ae5:MOV RDI,RAX
	00017ae8:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
107: if (iVar4 == 0) goto LAB_00017af5;
	00017aed:TEST EAX,EAX
	00017aef:JNZ 0x00017cbc
	00017af5:CMP qword ptr [RBP + -0x158],0x0
END_OF_LINE
----------------------------------------------
109: sprintf(__s_01 + lVar7,"SCCS/%s%s","s.",__s_00);
	00017cca:LEA RDI,[RDX + RAX*0x1]
	00017cce:MOV RAX,qword ptr [RBP + -0x128]
	00017cd5:MOV RCX,RAX
	00017cd8:LEA RAX,[0x33c1b]
	00017cdf:MOV RDX,RAX
	00017ce2:LEA RAX,[0x33c91]
	00017ce9:MOV RSI,RAX
	00017cec:MOV EAX,0x0
	00017cf1:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
110: iVar4 = safe_stat(__s_01,&cstat);
	00017cf6:LEA RDX,[RBP + -0xb0]
	00017cfd:MOV RAX,qword ptr [RBP + -0xe8]
	00017d04:MOV RSI,RDX
	00017d07:MOV RDI,RAX
	00017d0a:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
111: if (iVar4 != 0) {
	00017d0f:TEST EAX,EAX
	00017d11:JZ 0x00017d6e
END_OF_LINE
----------------------------------------------
112: sprintf(__s_01 + lVar7,"%s%s","s.",__s_00);
	00017d21:LEA RDI,[RDX + RAX*0x1]
	00017d25:MOV RAX,qword ptr [RBP + -0x128]
	00017d2c:MOV RCX,RAX
	00017d2f:LEA RAX,[0x33c1b]
	00017d36:MOV RDX,RAX
	00017d39:LEA RAX,[0x33c88]
	00017d40:MOV RSI,RAX
	00017d43:MOV EAX,0x0
	00017d48:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
113: iVar4 = safe_stat(__s_01,&cstat);
	00017d4d:LEA RDX,[RBP + -0xb0]
	00017d54:MOV RAX,qword ptr [RBP + -0xe8]
	00017d5b:MOV RSI,RDX
	00017d5e:MOV RDI,RAX
	00017d61:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
114: if (iVar4 != 0) {
	00017d66:TEST EAX,EAX
	00017d68:JNZ 0x00017f2c
END_OF_LINE
----------------------------------------------
115: if ((!readonly) && (filestat != (stat *)0x0)) {
	00017f38:JZ 0x00018088
	00017f3e:CMP qword ptr [RBP + -0x158],0x0
	00017f46:JZ 0x00018088
END_OF_LINE
----------------------------------------------
116: sprintf(__s_01 + lVar7,"%s@@",__s_00);
	00017f5a:LEA RCX,[RDX + RAX*0x1]
	00017f5e:MOV RAX,qword ptr [RBP + -0x128]
	00017f65:MOV RDX,RAX
	00017f68:LEA RAX,[0x33ca0]
	00017f6f:MOV RSI,RAX
	00017f72:MOV RDI,RCX
	00017f75:MOV EAX,0x0
	00017f7a:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
117: iVar4 = safe_stat(__s_01,&cstat);
	00017f7f:LEA RDX,[RBP + -0xb0]
	00017f86:MOV RAX,qword ptr [RBP + -0xe8]
	00017f8d:MOV RSI,RDX
	00017f90:MOV RDI,RAX
	00017f93:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
118: if ((iVar4 == 0) && ((cstat.st_mode & 0xf000) == 0x4000)) {
	00017f98:TEST EAX,EAX
	00017f9a:JNZ 0x00018088
	00017fa0:MOV EAX,dword ptr [RBP + -0x98]
	00017fa6:AND EAX,0xf000
	00017fab:CMP EAX,0x4000
	00017fb0:JNZ 0x00018088
END_OF_LINE
----------------------------------------------
119: if (getbuf != (char **)0x0) {
	00017fb6:CMP qword ptr [RBP + -0x160],0x0
	00017fbe:JZ 0x0001805d
END_OF_LINE
----------------------------------------------
120: pcVar10 = (char *)xmalloc(n);
	00017fce:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
121: *getbuf = pcVar10;
	00017fdd:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
122: puVar3 = (undefined8 *)*getbuf;
	00017fe7:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
123: *puVar3 = 0x6f6f747261656c63;
	00018006:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
124: puVar3[1] = 0x6e752d206f63206c;
	00018009:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
125: *(undefined4 *)(puVar3 + 2) = 0x6e2d2072;
	00018013:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
126: *(undefined2 *)((long)puVar3 + 0x14) = 0x2063;
	0001801d:MOV word ptr [RAX + 0x14],DX
END_OF_LINE
----------------------------------------------
127: *(undefined *)((long)puVar3 + 0x16) = 0;
	00018028:MOV byte ptr [RAX + 0x16],DL
END_OF_LINE
----------------------------------------------
128: sVar8 = quote_system_arg((char *)((long)puVar3 + 0x16),filename);
	0001802b:ADD qword ptr [RBP + -0xd0],0x16
	00018033:MOV RDX,qword ptr [RBP + -0x148]
	0001803a:MOV RAX,qword ptr [RBP + -0xd0]
	00018041:MOV RSI,RDX
	00018044:MOV RDI,RAX
	00018047:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
129: ((char *)((long)puVar3 + 0x16))[sVar8] = '\0';
	0001802b:ADD qword ptr [RBP + -0xd0],0x16
	00018033:MOV RDX,qword ptr [RBP + -0x148]
	0001803a:MOV RAX,qword ptr [RBP + -0xd0]
	00018041:MOV RSI,RDX
	00018044:MOV RDI,RAX
	00018047:CALL 0x000177f0
	0001804c:ADD qword ptr [RBP + -0xd0],RAX
	00018053:MOV RAX,qword ptr [RBP + -0xd0]
	0001805a:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
131: if (diffbuf != (char **)0x0) {
	0001805d:CMP qword ptr [RBP + -0x168],0x0
	00018065:JZ 0x00018075
END_OF_LINE
----------------------------------------------
132: *diffbuf = (char *)0x0;
	0001806e:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
134: r = "ClearCase";
	0001807c:MOV qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
135: goto LAB_00018192;
	00018192:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
138: if ((!readonly) && (filestat != (stat *)0x0)) {
	00018092:TEST AL,AL
	00018094:JZ 0x00018192
	0001809a:CMP qword ptr [RBP + -0x158],0x0
	000180a2:JZ 0x00018192
END_OF_LINE
----------------------------------------------
139: pcVar10 = getenv("P4PORT");
	000180b2:CALL 0x00005880
END_OF_LINE
----------------------------------------------
140: if (pcVar10 == (char *)0x0) {
	000180b7:TEST RAX,RAX
	000180ba:JNZ 0x000180e8
END_OF_LINE
----------------------------------------------
141: pcVar10 = getenv("P4USER");
	000180c6:CALL 0x00005880
END_OF_LINE
----------------------------------------------
142: if (pcVar10 == (char *)0x0) {
	000180cb:TEST RAX,RAX
	000180ce:JNZ 0x000180e8
END_OF_LINE
----------------------------------------------
143: pcVar10 = getenv("P4CONFIG");
	000180da:CALL 0x00005880
END_OF_LINE
----------------------------------------------
144: if (pcVar10 == (char *)0x0) goto LAB_00018192;
	000180df:TEST RAX,RAX
	000180e2:JZ 0x00018192
	000180e8:CMP qword ptr [RBP + -0x160],0x0
	000180f0:JZ 0x0001816c
	000180f2:MOV RAX,qword ptr [RBP + -0xf8]
	000180f9:MOV RDI,RAX
	000180fc:CALL 0x0002bd43
	00018101:MOV RDX,RAX
	00018104:MOV RAX,qword ptr [RBP + -0x160]
	0001810b:MOV qword ptr [RAX],RDX
	0001810e:MOV RAX,qword ptr [RBP + -0x160]
	00018115:MOV RAX,qword ptr [RAX]
	00018118:MOV qword ptr [RBP + -0xc8],RAX
	0001811f:MOV RAX,qword ptr [RBP + -0xc8]
	00018126:MOV RDX,qword ptr [0x00033c68]
	0001812d:MOV qword ptr [RAX],RDX
	00018130:MOVZX EDX,byte ptr [0x00033c70]
	00018137:MOV byte ptr [RAX + 0x8],DL
	0001813a:ADD qword ptr [RBP + -0xc8],0x8
	00018142:MOV RDX,qword ptr [RBP + -0x148]
	00018149:MOV RAX,qword ptr [RBP + -0xc8]
	00018150:MOV RSI,RDX
	00018153:MOV RDI,RAX
	00018156:CALL 0x000177f0
	0001815b:ADD qword ptr [RBP + -0xc8],RAX
	00018162:MOV RAX,qword ptr [RBP + -0xc8]
	00018169:MOV byte ptr [RAX],0x0
	0001816c:CMP qword ptr [RBP + -0x168],0x0
	00018174:JZ 0x00018184
	00018176:MOV RAX,qword ptr [RBP + -0x168]
	0001817d:MOV qword ptr [RAX],0x0
	00018184:LEA RAX,[0x33cc6]
	0001818b:MOV qword ptr [RBP + -0x138],RAX
	00018192:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
147: if (getbuf != (char **)0x0) {
	000180e8:CMP qword ptr [RBP + -0x160],0x0
	000180f0:JZ 0x0001816c
END_OF_LINE
----------------------------------------------
148: pcVar10 = (char *)xmalloc(n);
	000180fc:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
149: *getbuf = pcVar10;
	0001810b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
150: puVar3 = (undefined8 *)*getbuf;
	00018115:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
151: *puVar3 = 0x2074696465203470;
	0001812d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
152: *(undefined *)(puVar3 + 1) = 0;
	00018137:MOV byte ptr [RAX + 0x8],DL
END_OF_LINE
----------------------------------------------
153: sVar8 = quote_system_arg((char *)(puVar3 + 1),filename);
	0001813a:ADD qword ptr [RBP + -0xc8],0x8
	00018142:MOV RDX,qword ptr [RBP + -0x148]
	00018149:MOV RAX,qword ptr [RBP + -0xc8]
	00018150:MOV RSI,RDX
	00018153:MOV RDI,RAX
	00018156:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
154: *(undefined *)((long)(puVar3 + 1) + sVar8) = 0;
	0001813a:ADD qword ptr [RBP + -0xc8],0x8
	00018142:MOV RDX,qword ptr [RBP + -0x148]
	00018149:MOV RAX,qword ptr [RBP + -0xc8]
	00018150:MOV RSI,RDX
	00018153:MOV RDI,RAX
	00018156:CALL 0x000177f0
	0001815b:ADD qword ptr [RBP + -0xc8],RAX
	00018162:MOV RAX,qword ptr [RBP + -0xc8]
	00018169:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
156: if (diffbuf != (char **)0x0) {
	0001816c:CMP qword ptr [RBP + -0x168],0x0
	00018174:JZ 0x00018184
END_OF_LINE
----------------------------------------------
157: *diffbuf = (char *)0x0;
	0001817d:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
159: r = "Perforce";
	0001818b:MOV qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
161: goto LAB_00018192;
	00018192:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
164: if (getbuf != (char **)0x0) {
	00017d6e:CMP qword ptr [RBP + -0x160],0x0
	00017d76:JZ 0x00017e19
END_OF_LINE
----------------------------------------------
165: pcVar10 = (char *)xmalloc(n);
	00017d86:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
166: *getbuf = pcVar10;
	00017d95:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
167: pcVar10 = *getbuf;
	00017d9f:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
168: if (readonly) {
	00017db0:JZ 0x00017dbb
END_OF_LINE
----------------------------------------------
169: pcVar11 = "get ";
	00017db2:LEA RAX,[0x33c1e]
END_OF_LINE
----------------------------------------------
172: pcVar11 = "get -e ";
	00017dbb:LEA RAX,[0x33c28]
END_OF_LINE
----------------------------------------------
174: sprintf(pcVar10,pcVar11);
	00017dd4:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
175: sVar6 = strlen(pcVar10);
	00017de3:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
176: sVar9 = quote_system_arg(pcVar10 + sVar6,__s_01);
	00017de8:ADD qword ptr [RBP + -0xc0],RAX
	00017def:MOV RDX,qword ptr [RBP + -0xe8]
	00017df6:MOV RAX,qword ptr [RBP + -0xc0]
	00017dfd:MOV RSI,RDX
	00017e00:MOV RDI,RAX
	00017e03:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
177: (pcVar10 + sVar6)[sVar9] = '\0';
	00017de8:ADD qword ptr [RBP + -0xc0],RAX
	00017def:MOV RDX,qword ptr [RBP + -0xe8]
	00017df6:MOV RAX,qword ptr [RBP + -0xc0]
	00017dfd:MOV RSI,RDX
	00017e00:MOV RDI,RAX
	00017e03:CALL 0x000177f0
	00017e08:ADD qword ptr [RBP + -0xc0],RAX
	00017e0f:MOV RAX,qword ptr [RBP + -0xc0]
	00017e16:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
179: if (diffbuf != (char **)0x0) {
	00017e19:CMP qword ptr [RBP + -0x168],0x0
	00017e21:JZ 0x00017f19
END_OF_LINE
----------------------------------------------
180: pcVar10 = (char *)xmalloc(sVar8);
	00017e31:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
181: *diffbuf = pcVar10;
	00017e40:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
182: pacVar2 = (char (*) [8])*diffbuf;
	00017e4a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
183: *pacVar2 = (char  [8])0x20702d20746567;
	00017e62:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
184: pcVar10 = *pacVar2 + 7;
	00017e65:ADD qword ptr [RBP + -0xb8],0x7
END_OF_LINE
----------------------------------------------
185: sVar8 = quote_system_arg(pcVar10,__s_01);
	00017e81:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
186: pcVar10 = pcVar10 + sVar8;
	00017e86:ADD qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
187: sprintf(pcVar10,"|diff - %s",puVar5);
	00017ead:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
188: sVar6 = strlen(pcVar10);
	00017ebc:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
189: sVar8 = quote_system_arg(pcVar10 + sVar6,filename);
	00017ec1:ADD qword ptr [RBP + -0xb8],RAX
	00017ec8:MOV RDX,qword ptr [RBP + -0x148]
	00017ecf:MOV RAX,qword ptr [RBP + -0xb8]
	00017ed6:MOV RSI,RDX
	00017ed9:MOV RDI,RAX
	00017edc:CALL 0x000177f0
END_OF_LINE
----------------------------------------------
190: pcVar10 = pcVar10 + sVar6 + sVar8;
	00017ec1:ADD qword ptr [RBP + -0xb8],RAX
	00017ec8:MOV RDX,qword ptr [RBP + -0x148]
	00017ecf:MOV RAX,qword ptr [RBP + -0xb8]
	00017ed6:MOV RSI,RDX
	00017ed9:MOV RDI,RAX
	00017edc:CALL 0x000177f0
	00017ee1:ADD qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
191: *pcVar10 = '>';
	00017efa:MOV byte ptr [RAX],0x3e
END_OF_LINE
----------------------------------------------
192: *(undefined8 *)(pcVar10 + 1) = 0x6c756e2f7665642f;
	00017eef:LEA RDX,[RAX + 0x1]
	00017ef3:MOV qword ptr [RBP + -0xb8],RDX
	00017efa:MOV byte ptr [RAX],0x3e
	00017efd:MOV RAX,qword ptr [RBP + -0xb8]
	00017f04:MOV RDX,qword ptr [0x00033be8]
	00017f0b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
193: *(undefined2 *)(pcVar10 + 9) = 0x6c;
	00017f15:MOV word ptr [RAX + 0x8],DX
END_OF_LINE
----------------------------------------------
195: r = "SCCS";
	00017f20:MOV qword ptr [RBP + -0x138],RAX
END_OF_LINE
----------------------------------------------
196: LAB_00018192:
	00018192:MOV RAX,qword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
197: free(__s_01);
	0001819c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
198: free(__s_00);
	000181ab:CALL 0x00005860
END_OF_LINE
----------------------------------------------
199: free(__s);
	000181ba:CALL 0x00005860
END_OF_LINE
----------------------------------------------
200: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000181ca:SUB RDX,qword ptr FS:[0x28]
	000181d3:JZ 0x000181da
END_OF_LINE
----------------------------------------------
202: __stack_chk_fail();
	000181d5:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
204: return r;
	000181bf:MOV RAX,qword ptr [RBP + -0x138]
	000181c6:MOV RDX,qword ptr [RBP + -0x18]
	000181ca:SUB RDX,qword ptr FS:[0x28]
	000181d3:JZ 0x000181da
	000181d5:CALL 0x00005b00
	000181da:MOV RBX,qword ptr [RBP + -0x8]
	000181de:LEAVE
	000181df:RET
END_OF_LINE



Function: version_get
----------------------------------------------
15: if (patch_get < 0) {
	0001820e:TEST EAX,EAX
	00018210:JNS 0x00018270
END_OF_LINE
----------------------------------------------
16: if (readonly) {
	00018216:JZ 0x00018221
END_OF_LINE
----------------------------------------------
17: pcVar3 = "";
	00018218:LEA RBX,[0x33abf]
END_OF_LINE
----------------------------------------------
20: pcVar3 = " with lock";
	00018221:LEA RBX,[0x33ccf]
END_OF_LINE
----------------------------------------------
22: pcVar2 = quotearg(filename);
	0001822f:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
23: ask("Get file %s from %s%s? [y] ",pcVar2,cs,pcVar3);
	00018250:CALL 0x00018977
END_OF_LINE
----------------------------------------------
24: if (*buf == 'n') {
	0001825f:MOVZX EAX,byte ptr [RAX]
	00018262:CMP AL,0x6e
	00018264:JNZ 0x00018270
END_OF_LINE
----------------------------------------------
25: return false;
	0001838c:RET
END_OF_LINE
----------------------------------------------
28: if (dry_run == false) {
	0001827a:TEST AL,AL
	0001827c:JZ 0x000182ba
END_OF_LINE
----------------------------------------------
29: if (verbosity == _IScntrl) {
	000182c3:CMP EAX,0x2
	000182c6:JNZ 0x0001830b
END_OF_LINE
----------------------------------------------
30: if (readonly) {
	000182cc:JZ 0x000182d7
END_OF_LINE
----------------------------------------------
31: pcVar3 = "";
	000182ce:LEA RBX,[0x33abf]
END_OF_LINE
----------------------------------------------
34: pcVar3 = " with lock";
	000182d7:LEA RBX,[0x33ccf]
END_OF_LINE
----------------------------------------------
36: pcVar2 = quotearg(filename);
	000182e5:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
37: say("Getting file %s from %s%s...\n",pcVar2,cs,pcVar3);
	00018306:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
39: iVar1 = systemic(getbuf);
	00018312:CALL 0x00019101
END_OF_LINE
----------------------------------------------
40: if (iVar1 != 0) {
	00018317:TEST EAX,EAX
	00018319:JZ 0x00018348
END_OF_LINE
----------------------------------------------
41: pcVar3 = quotearg(filename);
	00018322:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
43: fatal("Can\'t get file %s from %s",pcVar3,cs);
	00018343:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
45: iVar1 = safe_stat(filename,filestat);
	00018356:CALL 0x00015b47
END_OF_LINE
----------------------------------------------
46: if (iVar1 != 0) {
	0001835b:TEST EAX,EAX
	0001835d:JZ 0x00018382
END_OF_LINE
----------------------------------------------
47: pcVar3 = quotearg(filename);
	00018366:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
49: pfatal("%s",pcVar3);
	0001837d:CALL 0x00018721
END_OF_LINE
----------------------------------------------
52: else if (!exists) {
	00018287:JZ 0x00018382
END_OF_LINE
----------------------------------------------
53: pcVar3 = quotearg(filename);
	00018294:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
55: fatal("can\'t do dry run on nonexistent version-controlled file %s; invoke \'%s\' and try again"
	000182b5:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
56: ,pcVar3,getbuf);
	000182b5:CALL 0x000185b0
END_OF_LINE
----------------------------------------------
58: return true;
	0001838c:RET
END_OF_LINE



Function: savebuf
----------------------------------------------
10: if (size == 0) {
	000183a1:CMP qword ptr [RBP + -0x20],0x0
	000183a6:JNZ 0x000183af
END_OF_LINE
----------------------------------------------
11: __dest = (char *)0x0;
	000183a8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: __dest = (char *)malloc(size);
	000183b6:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
15: if (__dest == (char *)0x0) {
	000183bf:CMP qword ptr [RBP + -0x8],0x0
	000183c4:JNZ 0x000183dc
END_OF_LINE
----------------------------------------------
16: if (using_plan_a != true) {
	000183d3:TEST AL,AL
	000183d5:JZ 0x000183f3
END_OF_LINE
----------------------------------------------
18: xalloc_die();
	000183d7:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
22: memcpy(__dest,s,size);
	000183ee:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
25: return __dest;
	000183f8:RET
END_OF_LINE



Function: savestr
----------------------------------------------
9: sVar1 = strlen(s);
	00018410:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
10: pcVar2 = savebuf(s,sVar1 + 1);
	00018415:LEA RDX,[RAX + 0x1]
	00018419:MOV RAX,qword ptr [RBP + -0x8]
	0001841d:MOV RSI,RDX
	00018420:MOV RDI,RAX
	00018423:CALL 0x0001838d
END_OF_LINE
----------------------------------------------
11: return pcVar2;
	00018429:RET
END_OF_LINE



Function: remove_prefix
----------------------------------------------
10: p_local = p;
	00018445:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
11: s = p + prefixlen;
	00018442:ADD RAX,RDX
	00018445:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
13: *p_local = *s;
	00018462:MOVZX EDX,byte ptr [RDX]
	00018465:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
14: cVar1 = *p_local;
	00018467:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
15: p_local = p_local + 1;
	0001845a:LEA RCX,[RAX + 0x1]
	0001845e:MOV qword ptr [RBP + -0x18],RCX
	00018462:MOVZX EDX,byte ptr [RDX]
	00018465:MOV byte ptr [RAX],DL
	00018467:MOVZX EAX,byte ptr [RAX]
	0001846a:TEST AL,AL
	0001846c:JNZ 0x0001844a
END_OF_LINE
----------------------------------------------
16: s = s + 1;
	0001844e:LEA RAX,[RDX + 0x1]
	00018452:MOV qword ptr [RBP + -0x8],RAX
	00018456:MOV RAX,qword ptr [RBP + -0x18]
	0001845a:LEA RCX,[RAX + 0x1]
	0001845e:MOV qword ptr [RBP + -0x18],RCX
	00018462:MOVZX EDX,byte ptr [RDX]
	00018465:MOV byte ptr [RAX],DL
	00018467:MOVZX EAX,byte ptr [RAX]
	0001846a:TEST AL,AL
	0001846c:JNZ 0x0001844a
END_OF_LINE
----------------------------------------------
17: } while (cVar1 != '\0');
	0001846a:TEST AL,AL
	0001846c:JNZ 0x0001844a
END_OF_LINE
----------------------------------------------
18: return;
	00018471:RET
END_OF_LINE



Function: format_linenum
----------------------------------------------
10: p = numbuf + 0x16;
	00018486:ADD RAX,0x16
END_OF_LINE
----------------------------------------------
11: *p = '\0';
	00018492:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
12: n_local = n;
	0001849a:JNS 0x0001852d
END_OF_LINE
----------------------------------------------
13: pcVar1 = p;
	0001849a:JNS 0x0001852d
END_OF_LINE
----------------------------------------------
14: if (n < 0) {
	00018495:CMP qword ptr [RBP + -0x20],0x0
	0001849a:JNS 0x0001852d
END_OF_LINE
----------------------------------------------
16: p = pcVar1;
	000184a0:MOV RCX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
17: p[-1] = '0' - ((char)n_local + (char)(n_local / 10) * -10);
	000184b7:SAR RAX,0x2
	000184bb:MOV RSI,RCX
	000184be:SAR RSI,0x3f
	000184c2:SUB RAX,RSI
	000184c5:MOV RDX,RAX
	000184c8:MOV RAX,RDX
	000184cb:SHL RAX,0x2
	000184cf:ADD RAX,RDX
	000184d2:ADD RAX,RAX
	000184d5:SUB RCX,RAX
	000184d8:MOV RDX,RCX
	000184db:MOV EAX,0x30
	000184e0:SUB EAX,EDX
	000184e2:SUB qword ptr [RBP + -0x8],0x1
	000184e7:MOV EDX,EAX
	000184e9:MOV RAX,qword ptr [RBP + -0x8]
	000184ed:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
18: n_local = n_local / 10;
	00018506:SAR RAX,0x2
END_OF_LINE
----------------------------------------------
19: pcVar1 = p + -1;
	000184e2:SUB qword ptr [RBP + -0x8],0x1
	000184e7:MOV EDX,EAX
	000184e9:MOV RAX,qword ptr [RBP + -0x8]
	000184ed:MOV byte ptr [RAX],DL
	000184ef:MOV RCX,qword ptr [RBP + -0x20]
	000184f3:MOV RDX,0x6666666666666667
	000184fd:MOV RAX,RCX
	00018500:IMUL RDX
	00018503:MOV RAX,RDX
	00018506:SAR RAX,0x2
	0001850a:SAR RCX,0x3f
	0001850e:MOV RDX,RCX
	00018511:SUB RAX,RDX
	00018514:MOV qword ptr [RBP + -0x20],RAX
	00018518:CMP qword ptr [RBP + -0x20],0x0
	0001851d:JNZ 0x000184a0
END_OF_LINE
----------------------------------------------
20: } while (n_local != 0);
	00018518:CMP qword ptr [RBP + -0x20],0x0
	0001851d:JNZ 0x000184a0
END_OF_LINE
----------------------------------------------
21: p = p + -2;
	0001851f:SUB qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
22: *p = '-';
	00018528:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
26: p = p + -1;
	0001856d:SUB qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
27: *p = (char)n_local + (char)(n_local / 10) * -10 + '0';
	00018544:SAR RAX,0x2
	00018548:MOV RSI,RCX
	0001854b:SAR RSI,0x3f
	0001854f:SUB RAX,RSI
	00018552:MOV RDX,RAX
	00018555:MOV RAX,RDX
	00018558:SHL RAX,0x2
	0001855c:ADD RAX,RDX
	0001855f:ADD RAX,RAX
	00018562:SUB RCX,RAX
	00018565:MOV RDX,RCX
	00018568:MOV EAX,EDX
	0001856a:ADD EAX,0x30
	0001856d:SUB qword ptr [RBP + -0x8],0x1
	00018572:MOV EDX,EAX
	00018574:MOV RAX,qword ptr [RBP + -0x8]
	00018578:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
28: n_local = n_local / 10;
	00018591:SAR RAX,0x2
END_OF_LINE
----------------------------------------------
29: } while (n_local != 0);
	000185a3:CMP qword ptr [RBP + -0x20],0x0
	000185a8:JNZ 0x0001852d
END_OF_LINE
----------------------------------------------
31: return p;
	000185aa:MOV RAX,qword ptr [RBP + -0x8]
	000185ae:POP RBP
	000185af:RET
END_OF_LINE



Function: fatal
----------------------------------------------
36: if (in_AL != '\0') {
	000185e9:TEST AL,AL
	000185eb:JZ 0x0001860d
END_OF_LINE
----------------------------------------------
37: local_88 = in_XMM0_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
38: local_78 = in_XMM1_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
39: local_68 = in_XMM2_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
40: local_58 = in_XMM3_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
41: local_48 = in_XMM4_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_38 = in_XMM5_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_28 = in_XMM6_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_18 = in_XMM7_Da;
	00018609:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_b0 = in_RSI;
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
47: local_a8 = in_RDX;
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
48: local_a0 = in_RCX;
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
49: local_98 = in_R8;
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
50: local_90 = in_R9;
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
51: fprintf(pFRam0000000000144490,"%s: **** ",program_name);
	00018645:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
52: args[0].gp_offset = 8;
	0001864a:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
53: args[0].fp_offset = 0x30;
	00018654:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
54: args[0].overflow_arg_area = &stack0x00000008;
	0001865e:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
55: args[0].reg_save_area = local_b8;
	00018669:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
56: vfprintf(pFRam0000000000144490,format,args);
	00018681:LEA RDX,[RBP + -0xd0]
	00018688:MOV RCX,qword ptr [RBP + -0xd8]
	0001868f:MOV RSI,RCX
	00018692:MOV RDI,RAX
	00018695:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
57: putc(10,pFRam0000000000144490);
	000186ac:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
58: fflush(pFRam0000000000144490);
	000186be:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
60: fatal_exit(0);
	000186c8:CALL 0x0000c837
END_OF_LINE



Function: xalloc_die
----------------------------------------------
8: fatal("out of memory");
	000186e4:CALL 0x000185b0
END_OF_LINE



Function: read_fatal
----------------------------------------------
8: pfatal("read error");
	00018700:CALL 0x00018721
END_OF_LINE



Function: write_fatal
----------------------------------------------
8: pfatal("write error");
	0001871c:CALL 0x00018721
END_OF_LINE



Function: pfatal
----------------------------------------------
39: if (in_AL != '\0') {
	0001875a:TEST AL,AL
	0001875c:JZ 0x0001877e
END_OF_LINE
----------------------------------------------
40: local_88 = in_XMM0_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
41: local_78 = in_XMM1_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_68 = in_XMM2_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_58 = in_XMM3_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_48 = in_XMM4_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_38 = in_XMM5_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_28 = in_XMM6_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
47: local_18 = in_XMM7_Da;
	0001877a:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
49: local_b0 = in_RSI;
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
50: local_a8 = in_RDX;
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
51: local_a0 = in_RCX;
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
52: local_98 = in_R8;
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
53: local_90 = in_R9;
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
54: piVar2 = __errno_location();
	00018790:CALL 0x00005900
END_OF_LINE
----------------------------------------------
55: iVar1 = *piVar2;
	00018795:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
56: fprintf(pFRam0000000000144490,"%s: **** ",program_name);
	000187c3:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
57: args[0].gp_offset = 8;
	000187c8:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
58: args[0].fp_offset = 0x30;
	000187d2:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
59: args[0].overflow_arg_area = &stack0x00000008;
	000187dc:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
60: args[0].reg_save_area = local_b8;
	000187e7:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
61: vfprintf(pFRam0000000000144490,format,args);
	000187ff:LEA RDX,[RBP + -0xd0]
	00018806:MOV RCX,qword ptr [RBP + -0xe8]
	0001880d:MOV RSI,RCX
	00018810:MOV RDI,RAX
	00018813:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
62: fflush(pFRam0000000000144490);
	00018825:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
63: piVar2 = __errno_location();
	0001882a:CALL 0x00005900
END_OF_LINE
----------------------------------------------
64: *piVar2 = iVar1;
	00018835:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
65: perror(" ");
	00018841:CALL 0x00005f60
END_OF_LINE
----------------------------------------------
66: fflush(pFRam0000000000144490);
	00018853:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
68: fatal_exit(0);
	0001885d:CALL 0x0000c837
END_OF_LINE



Function: vsay
----------------------------------------------
8: vfprintf(pFRam0000000000144070,format,args);
	0001888e:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
9: fflush(pFRam0000000000144070);
	000188a0:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
10: return;
	000188a7:RET
END_OF_LINE



Function: say
----------------------------------------------
38: if (in_AL != '\0') {
	000188e1:TEST AL,AL
	000188e3:JZ 0x00018905
END_OF_LINE
----------------------------------------------
39: local_88 = in_XMM0_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
40: local_78 = in_XMM1_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
41: local_68 = in_XMM2_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_58 = in_XMM3_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_48 = in_XMM4_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_38 = in_XMM5_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_28 = in_XMM6_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_18 = in_XMM7_Da;
	00018901:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
48: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00018905:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
49: args[0].gp_offset = 8;
	00018917:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
50: args[0].fp_offset = 0x30;
	00018921:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
51: args[0].overflow_arg_area = &stack0x00000008;
	0001892b:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
52: args[0].reg_save_area = local_b8;
	00018936:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
53: local_b0 = in_RSI;
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
54: local_a8 = in_RDX;
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
55: local_a0 = in_RCX;
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
56: local_98 = in_R8;
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
57: local_90 = in_R9;
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
58: vsay(format,args);
	00018944:LEA RDX,[RBP + -0xd0]
	0001894b:MOV RAX,qword ptr [RBP + -0xd8]
	00018952:MOV RSI,RDX
	00018955:MOV RDI,RAX
	00018958:CALL 0x00018862
END_OF_LINE
----------------------------------------------
59: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00018965:SUB RAX,qword ptr FS:[0x28]
	0001896e:JZ 0x00018975
END_OF_LINE
----------------------------------------------
61: __stack_chk_fail();
	00018970:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
63: return;
	00018976:RET
END_OF_LINE



Function: ask
----------------------------------------------
43: if (in_AL != '\0') {
	000189b0:TEST AL,AL
	000189b2:JZ 0x000189d4
END_OF_LINE
----------------------------------------------
44: local_88 = in_XMM0_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_78 = in_XMM1_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_68 = in_XMM2_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
47: local_58 = in_XMM3_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
48: local_48 = in_XMM4_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
49: local_38 = in_XMM5_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
50: local_28 = in_XMM6_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
51: local_18 = in_XMM7_Da;
	000189d0:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
53: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	000189d4:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
54: args[0].gp_offset = 8;
	000189e6:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
55: args[0].fp_offset = 0x30;
	000189f0:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
56: args[0].overflow_arg_area = &stack0x00000008;
	000189fa:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
57: args[0].reg_save_area = local_b8;
	00018a05:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
58: local_b0 = in_RSI;
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
59: local_a8 = in_RDX;
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
60: local_a0 = in_RCX;
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
61: local_98 = in_R8;
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
62: local_90 = in_R9;
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
63: vfprintf(pFRam0000000000144070,format,args);
	00018a1d:LEA RDX,[RBP + -0xd0]
	00018a24:MOV RCX,qword ptr [RBP + -0xf8]
	00018a2b:MOV RSI,RCX
	00018a2e:MOV RDI,RAX
	00018a31:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
64: fflush(pFRam0000000000144070);
	00018a43:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
65: if (ask::ttyfd == -2) {
	00018a4e:CMP EAX,-0x2
	00018a51:JNZ 0x00018a95
END_OF_LINE
----------------------------------------------
66: if ((posixly_correct == false) && (iVar2 = isatty(1), iVar2 == 0)) {
	00018a5d:TEST AL,AL
	00018a5f:JNZ 0x00018a6f
	00018a61:MOV EDI,0x1
	00018a66:CALL 0x000059c0
	00018a6b:TEST EAX,EAX
	00018a6d:JZ 0x00018a8a
END_OF_LINE
----------------------------------------------
67: ask::ttyfd = -1;
	00018a8a:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
70: ask::ttyfd = open("/dev/tty",0);
	00018a83:CALL 0x00005f30
END_OF_LINE
----------------------------------------------
73: if (ask::ttyfd < 0) {
	00018a9b:TEST EAX,EAX
	00018a9d:JNS 0x00018acc
END_OF_LINE
----------------------------------------------
74: putchar(10);
	00018aa4:CALL 0x000058d0
END_OF_LINE
----------------------------------------------
75: *buf = '\n';
	00018ab3:MOV byte ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
76: buf[1] = '\0';
	00018ac0:ADD RAX,0x1
	00018ac4:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
79: s = 0;
	00018acc:MOV qword ptr [RBP + -0xd8],0x0
END_OF_LINE
----------------------------------------------
80: while ((r = read(ask::ttyfd,buf + s,(bufsize - s) - 1), r == (bufsize - s) + -1 &&
	00018b4d:SUB RAX,qword ptr [RBP + -0xd8]
	00018b54:LEA RDX,[RAX + -0x1]
	00018b58:LEA RAX,[0x3e240]
	00018b5f:MOV RCX,qword ptr [RAX]
	00018b62:MOV RAX,qword ptr [RBP + -0xd8]
	00018b69:ADD RCX,RAX
	00018b6c:MOV EAX,dword ptr [0x0003e0e8]
	00018b72:MOV RSI,RCX
	00018b75:MOV EDI,EAX
	00018b77:CALL 0x00005c80
	00018b7c:MOV qword ptr [RBP + -0xe0],RAX
	00018b83:LEA RAX,[0x3e248]
	00018b8a:MOV RAX,qword ptr [RAX]
	00018b8d:SUB RAX,qword ptr [RBP + -0xd8]
	00018b94:SUB RAX,0x1
	00018b98:CMP qword ptr [RBP + -0xe0],RAX
	00018b9f:JNZ 0x00018bc7
	00018ba1:LEA RAX,[0x3e240]
	00018ba8:MOV RDX,qword ptr [RAX]
	00018bab:LEA RAX,[0x3e248]
	00018bb2:MOV RAX,qword ptr [RAX]
	00018bb5:SUB RAX,0x2
	00018bb9:ADD RAX,RDX
	00018bbc:MOVZX EAX,byte ptr [RAX]
	00018bbf:CMP AL,0xa
	00018bc1:JNZ 0x00018ad9
END_OF_LINE
----------------------------------------------
81: (buf[bufsize - 2] != '\n'))) {
	00018bb5:SUB RAX,0x2
	00018bb9:ADD RAX,RDX
	00018bbc:MOVZX EAX,byte ptr [RAX]
	00018bbf:CMP AL,0xa
END_OF_LINE
----------------------------------------------
82: s = bufsize - 1;
	00018ae3:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
83: bufsize = bufsize * 2;
	00018af8:LEA RDX,[RAX + RAX*0x1]
END_OF_LINE
----------------------------------------------
84: buf = (char *)realloc(buf,bufsize);
	00018b20:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
85: if (buf == (char *)0x0) {
	00018b39:TEST RAX,RAX
	00018b3c:JNZ 0x00018b43
END_OF_LINE
----------------------------------------------
87: xalloc_die();
	00018b3e:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
90: if (r == 0) {
	00018bc7:CMP qword ptr [RBP + -0xe0],0x0
	00018bcf:JNZ 0x00018be2
END_OF_LINE
----------------------------------------------
91: puts("EOF");
	00018bdb:CALL 0x00005990
END_OF_LINE
----------------------------------------------
93: else if (r < 0) {
	00018be2:CMP qword ptr [RBP + -0xe0],0x0
	00018bea:JNS 0x00018c33
END_OF_LINE
----------------------------------------------
94: piVar3 = __errno_location();
	00018bec:CALL 0x00005900
END_OF_LINE
----------------------------------------------
95: error(0,*piVar3,"tty read failed");
	00018bf1:MOV EAX,dword ptr [RAX]
	00018bf3:LEA RDX,[0x33dc7]
	00018bfa:MOV ESI,EAX
	00018bfc:MOV EDI,0x0
	00018c01:MOV EAX,0x0
	00018c06:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
96: close(ask::ttyfd);
	00018c13:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
97: ask::ttyfd = -1;
	00018c1e:MOV dword ptr [0x0003e0e8],0xffffffff
END_OF_LINE
----------------------------------------------
98: r = 0;
	00018c28:MOV qword ptr [RBP + -0xe0],0x0
END_OF_LINE
----------------------------------------------
100: buf[s + r] = '\0';
	00018c4b:ADD RDX,RCX
	00018c4e:ADD RAX,RDX
	00018c51:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
102: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00018c5c:SUB RAX,qword ptr FS:[0x28]
	00018c65:JZ 0x00018c6c
END_OF_LINE
----------------------------------------------
103: return;
	00018c6d:RET
END_OF_LINE
----------------------------------------------
106: __stack_chk_fail();
	00018c67:CALL 0x00005b00
END_OF_LINE



Function: ok_to_reverse
----------------------------------------------
40: if (in_AL != '\0') {
	00018ca7:TEST AL,AL
	00018ca9:JZ 0x00018ccb
END_OF_LINE
----------------------------------------------
41: local_88 = in_XMM0_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_78 = in_XMM1_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_68 = in_XMM2_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_58 = in_XMM3_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_48 = in_XMM4_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_38 = in_XMM5_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
47: local_28 = in_XMM6_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
48: local_18 = in_XMM7_Da;
	00018cc7:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
50: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00018ccb:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
51: r = false;
	00018cdd:MOV byte ptr [RBP + -0xd1],0x0
END_OF_LINE
----------------------------------------------
52: local_b0 = in_RSI;
	00018cf0:JNZ 0x00018d11
END_OF_LINE
----------------------------------------------
53: local_a8 = in_RDX;
	00018cf0:JNZ 0x00018d11
END_OF_LINE
----------------------------------------------
54: local_a0 = in_RCX;
	00018cf0:JNZ 0x00018d11
END_OF_LINE
----------------------------------------------
55: local_98 = in_R8;
	00018cf0:JNZ 0x00018d11
END_OF_LINE
----------------------------------------------
56: local_90 = in_R9;
	00018cf0:JNZ 0x00018d11
END_OF_LINE
----------------------------------------------
57: if (((noreverse) || (!force)) || (verbosity != _ISblank)) {
	00018cf0:JNZ 0x00018d11
	00018cf2:LEA RAX,[0x3e358]
	00018cf9:MOVZX EAX,byte ptr [RAX]
	00018cfc:XOR EAX,0x1
	00018cff:TEST AL,AL
	00018d01:JNZ 0x00018d11
	00018d03:LEA RAX,[0x3e35c]
	00018d0a:MOV EAX,dword ptr [RAX]
	00018d0c:CMP EAX,0x1
	00018d0f:JZ 0x00018d57
END_OF_LINE
----------------------------------------------
58: args[0].gp_offset = 8;
	00018d11:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
59: args[0].fp_offset = 0x30;
	00018d1b:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
60: args[0].overflow_arg_area = &stack0x00000008;
	00018d25:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
61: args[0].reg_save_area = local_b8;
	00018d30:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
62: vsay(format,args);
	00018d3e:LEA RDX,[RBP + -0xd0]
	00018d45:MOV RAX,qword ptr [RBP + -0xe8]
	00018d4c:MOV RSI,RDX
	00018d4f:MOV RDI,RAX
	00018d52:CALL 0x00018862
END_OF_LINE
----------------------------------------------
64: if (noreverse == false) {
	00018d61:TEST AL,AL
	00018d63:JZ 0x00018d88
END_OF_LINE
----------------------------------------------
65: if (force == false) {
	00018d92:TEST AL,AL
	00018d94:JZ 0x00018dc1
END_OF_LINE
----------------------------------------------
66: if (batch == false) {
	00018dcb:TEST AL,AL
	00018dcd:JZ 0x00018e06
END_OF_LINE
----------------------------------------------
67: if (reverse == false) {
	00018e10:TEST AL,AL
	00018e12:JZ 0x00018e1d
END_OF_LINE
----------------------------------------------
68: pcVar2 = "  Assume -R? [n] ";
	00018e1d:LEA RAX,[0x33e33]
END_OF_LINE
----------------------------------------------
71: pcVar2 = "  Ignore -R? [n] ";
	00018e14:LEA RAX,[0x33e21]
END_OF_LINE
----------------------------------------------
73: ask(pcVar2);
	00018e2c:CALL 0x00018977
END_OF_LINE
----------------------------------------------
74: r = *buf == 'y';
	00018e3b:MOVZX EAX,byte ptr [RAX]
	00018e3e:CMP AL,0x79
END_OF_LINE
----------------------------------------------
75: if (!r) {
	00018e55:JZ 0x00018ea8
END_OF_LINE
----------------------------------------------
76: ask("Apply anyway? [n] ");
	00018e66:CALL 0x00018977
END_OF_LINE
----------------------------------------------
77: if (*buf != 'y') {
	00018e75:MOVZX EAX,byte ptr [RAX]
	00018e78:CMP AL,0x79
	00018e7a:JZ 0x00018ea8
END_OF_LINE
----------------------------------------------
78: if (verbosity != _ISblank) {
	00018e85:CMP EAX,0x1
	00018e88:JZ 0x00018e9e
END_OF_LINE
----------------------------------------------
79: say("Skipping patch.\n");
	00018e99:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
81: skip_rest_of_patch = true;
	00018ea5:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
86: if (reverse == false) {
	00018dd9:TEST AL,AL
	00018ddb:JZ 0x00018de6
END_OF_LINE
----------------------------------------------
87: pcVar2 = "  Assuming -R.\n";
	00018de6:LEA RAX,[0x33e11]
END_OF_LINE
----------------------------------------------
90: pcVar2 = "  Ignoring -R.\n";
	00018ddd:LEA RAX,[0x33e01]
END_OF_LINE
----------------------------------------------
92: say(pcVar2);
	00018df5:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
93: r = true;
	00018dfa:MOV byte ptr [RBP + -0xd1],0x1
END_OF_LINE
----------------------------------------------
96: else if (verbosity != _ISblank) {
	00018d9f:CMP EAX,0x1
	00018da2:JZ 0x00018ea8
END_OF_LINE
----------------------------------------------
97: say("  Applying it anyway.\n");
	00018db7:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
101: say("  Skipping patch.\n");
	00018d74:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
102: skip_rest_of_patch = true;
	00018d80:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
104: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00018eb6:SUB RDX,qword ptr FS:[0x28]
	00018ebf:JZ 0x00018ec6
END_OF_LINE
----------------------------------------------
106: __stack_chk_fail();
	00018ec1:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
108: return r;
	00018ec7:RET
END_OF_LINE



Function: set_signals
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00018edf:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: fatal_act.__sigaction_handler.sa_handler = fatal_exit;
	00018ef5:MOV qword ptr [RBP + -0xa0],RAX
END_OF_LINE
----------------------------------------------
16: sigemptyset((sigset_t *)&fatal_act.sa_mask);
	00018f03:ADD RAX,0x8
	00018f07:MOV RDI,RAX
	00018f0a:CALL 0x00005d50
END_OF_LINE
----------------------------------------------
17: fatal_act.sa_flags = 0;
	00018f0f:MOV dword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
18: if (reset) {
	00018f22:JZ 0x0001901c
END_OF_LINE
----------------------------------------------
19: sigprocmask(2,(sigset_t *)&initial_signal_mask,(sigset_t *)0x0);
	00019030:CALL 0x00005890
END_OF_LINE
----------------------------------------------
22: signal(0x11,(__sighandler_t)0x0);
	00018f32:CALL 0x00005d00
END_OF_LINE
----------------------------------------------
23: sigemptyset((sigset_t *)&signals_to_block);
	00018f41:CALL 0x00005d50
END_OF_LINE
----------------------------------------------
24: for (i = 0; i < 6; i = i + 1) {
	00018f46:MOV dword ptr [RBP + -0x144],0x0
	00018f50:JMP 0x0001900d
	00018f55:MOV EAX,dword ptr [RBP + -0x144]
	00018f5b:CDQE
	00018f5d:LEA RDX,[RAX*0x4]
	00018f65:LEA RAX,[0x33e70]
	00018f6c:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018f6f:LEA RDX,[RBP + -0x140]
	00018f76:MOV ESI,0x0
	00018f7b:MOV EDI,EAX
	00018f7d:CALL 0x000059d0
	00018f82:TEST EAX,EAX
	00018f84:JNZ 0x00019005
	00018f86:MOV RAX,qword ptr [RBP + -0x140]
	00018f8d:CMP RAX,0x1
	00018f91:SETZ AL
	00018f94:MOV byte ptr [RBP + -0x145],AL
	00018f9a:MOVZX EAX,byte ptr [RBP + -0x145]
	00018fa1:XOR EAX,0x1
	00018fa4:TEST AL,AL
	00018fa6:JZ 0x00019006
	00018fa8:MOV EAX,dword ptr [RBP + -0x144]
	00018fae:CDQE
	00018fb0:LEA RDX,[RAX*0x4]
	00018fb8:LEA RAX,[0x33e70]
	00018fbf:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018fc2:MOV ESI,EAX
	00018fc4:LEA RAX,[0x406e0]
	00018fcb:MOV RDI,RAX
	00018fce:CALL 0x00006080
	00018fd3:MOV EAX,dword ptr [RBP + -0x144]
	00018fd9:CDQE
	00018fdb:LEA RDX,[RAX*0x4]
	00018fe3:LEA RAX,[0x33e70]
	00018fea:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018fed:LEA RCX,[RBP + -0xa0]
	00018ff4:MOV EDX,0x0
	00018ff9:MOV RSI,RCX
	00018ffc:MOV EDI,EAX
	00018ffe:CALL 0x000059d0
	00019003:JMP 0x00019006
	00019005:NOP
	00019006:ADD dword ptr [RBP + -0x144],0x1
	0001900d:CMP dword ptr [RBP + -0x144],0x5
	00019014:JLE 0x00018f55
END_OF_LINE
----------------------------------------------
25: iVar2 = sigaction(sigs[i],(sigaction *)0x0,(sigaction *)&initial_act);
	00018f5b:CDQE
	00018f5d:LEA RDX,[RAX*0x4]
	00018f65:LEA RAX,[0x33e70]
	00018f6c:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018f6f:LEA RDX,[RBP + -0x140]
	00018f76:MOV ESI,0x0
	00018f7b:MOV EDI,EAX
	00018f7d:CALL 0x000059d0
END_OF_LINE
----------------------------------------------
26: if ((iVar2 == 0) &&
	00018f82:TEST EAX,EAX
	00018f84:JNZ 0x00019005
	00018f86:MOV RAX,qword ptr [RBP + -0x140]
	00018f8d:CMP RAX,0x1
	00018f91:SETZ AL
	00018f94:MOV byte ptr [RBP + -0x145],AL
	00018f9a:MOVZX EAX,byte ptr [RBP + -0x145]
	00018fa1:XOR EAX,0x1
	00018fa4:TEST AL,AL
	00018fa6:JZ 0x00019006
END_OF_LINE
----------------------------------------------
27: (initial_act.__sigaction_handler.sa_handler !=
	00018f8d:CMP RAX,0x1
END_OF_LINE
----------------------------------------------
28: (__sighandler_t)Elf64_Ehdr_00000000.e_ident_magic_str)) {
	00018f8d:CMP RAX,0x1
END_OF_LINE
----------------------------------------------
29: sigaddset((sigset_t *)&signals_to_block,sigs[i]);
	00018fae:CDQE
	00018fb0:LEA RDX,[RAX*0x4]
	00018fb8:LEA RAX,[0x33e70]
	00018fbf:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018fc2:MOV ESI,EAX
	00018fc4:LEA RAX,[0x406e0]
	00018fcb:MOV RDI,RAX
	00018fce:CALL 0x00006080
END_OF_LINE
----------------------------------------------
30: sigaction(sigs[i],(sigaction *)&fatal_act,(sigaction *)0x0);
	00018fd9:CDQE
	00018fdb:LEA RDX,[RAX*0x4]
	00018fe3:LEA RAX,[0x33e70]
	00018fea:MOV EAX,dword ptr [RDX + RAX*0x1]
	00018fed:LEA RCX,[RBP + -0xa0]
	00018ff4:MOV EDX,0x0
	00018ff9:MOV RSI,RCX
	00018ffc:MOV EDI,EAX
	00018ffe:CALL 0x000059d0
END_OF_LINE
----------------------------------------------
34: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001903a:SUB RAX,qword ptr FS:[0x28]
	00019043:JZ 0x0001904a
END_OF_LINE
----------------------------------------------
35: return;
	0001904b:RET
END_OF_LINE
----------------------------------------------
38: __stack_chk_fail();
	00019045:CALL 0x00005b00
END_OF_LINE



Function: ignore_signals
----------------------------------------------
7: sigprocmask(0,(sigset_t *)&signals_to_block,(sigset_t *)&initial_signal_mask);
	0001906d:CALL 0x00005890
END_OF_LINE
----------------------------------------------
8: return;
	00019074:RET
END_OF_LINE



Function: exit_with_signal
----------------------------------------------
8: signal(sig,(__sighandler_t)0x0);
	000190a6:CALL 0x00005d00
END_OF_LINE
----------------------------------------------
9: sigemptyset((sigset_t *)&s);
	000190ab:LEA RAX,[RBP + -0x90]
	000190b2:MOV RDI,RAX
	000190b5:CALL 0x00005d50
END_OF_LINE
----------------------------------------------
10: sigaddset((sigset_t *)&s,sig);
	000190c0:LEA RAX,[RBP + -0x90]
	000190c7:MOV ESI,EDX
	000190c9:MOV RDI,RAX
	000190cc:CALL 0x00006080
END_OF_LINE
----------------------------------------------
11: sigprocmask(1,(sigset_t *)&s,(sigset_t *)0x0);
	000190d1:LEA RAX,[RBP + -0x90]
	000190d8:MOV EDX,0x0
	000190dd:MOV RSI,RAX
	000190e0:MOV EDI,0x1
	000190e5:CALL 0x00005890
END_OF_LINE
----------------------------------------------
12: raise(sig);
	000190f2:CALL 0x000058a0
END_OF_LINE
----------------------------------------------
14: exit(2);
	000190fc:CALL 0x00005ff0
END_OF_LINE



Function: systemic
----------------------------------------------
8: if ((debug & 8U) != 0) {
	0001911a:AND EAX,0x8
	0001911d:TEST EAX,EAX
	0001911f:JZ 0x0001913c
END_OF_LINE
----------------------------------------------
9: say("+ %s\n",command);
	00019137:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
11: fflush(pFRam0000000000144070);
	00019149:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
12: iVar1 = system(command);
	00019155:CALL 0x00005b40
END_OF_LINE
----------------------------------------------
13: return iVar1;
	0001915b:RET
END_OF_LINE



Function: replace_slashes
----------------------------------------------
12: last_location_replaced = (char *)0x0;
	00019168:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
13: for (f = filename; *f == '/'; f = f + 1) {
	00019178:JMP 0x0001917f
	0001917a:ADD qword ptr [RBP + -0x20],0x1
	0001917f:MOV RAX,qword ptr [RBP + -0x20]
	00019183:MOVZX EAX,byte ptr [RAX]
	00019186:CMP AL,0x2f
	00019188:JZ 0x0001917a
END_OF_LINE
----------------------------------------------
15: component_start = f;
	0001918e:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
17: pcVar1 = f;
	00019217:MOV RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
18: if (*f == '\0') {
	0001921b:MOVZX EAX,byte ptr [RAX]
	0001921e:TEST AL,AL
	00019220:JNZ 0x00019197
END_OF_LINE
----------------------------------------------
19: return last_location_replaced;
	00019229:MOV RAX,qword ptr [RBP + -0x18]
	0001922d:POP RBP
	0001922e:RET
END_OF_LINE
----------------------------------------------
21: if (*f == '/') {
	0001919b:MOVZX EAX,byte ptr [RAX]
	0001919e:CMP AL,0x2f
	000191a0:JNZ 0x00019212
END_OF_LINE
----------------------------------------------
22: for (; f[1] == '/'; f = f + 1) {
	000191ac:ADD qword ptr [RBP + -0x20],0x1
	000191b1:MOV RAX,qword ptr [RBP + -0x20]
	000191b5:ADD RAX,0x1
	000191b9:MOVZX EAX,byte ptr [RAX]
	000191bc:CMP AL,0x2f
	000191be:JZ 0x000191ac
END_OF_LINE
----------------------------------------------
24: if (f[1] == '\0') {
	000191c4:ADD RAX,0x1
	000191c8:MOVZX EAX,byte ptr [RAX]
	000191cb:TEST AL,AL
	000191cd:JZ 0x00019228
END_OF_LINE
----------------------------------------------
25: return last_location_replaced;
	00019229:MOV RAX,qword ptr [RBP + -0x18]
	0001922d:POP RBP
	0001922e:RET
END_OF_LINE
----------------------------------------------
27: if (((2 < (long)pcVar1 - (long)component_start) || (*component_start != '.')) ||
	000191d3:SUB RAX,qword ptr [RBP + -0x10]
	000191d7:CMP RAX,0x2
	000191db:JG 0x000191f7
	000191dd:MOV RAX,qword ptr [RBP + -0x10]
	000191e1:MOVZX EAX,byte ptr [RAX]
	000191e4:CMP AL,0x2e
	000191e6:JNZ 0x000191f7
	000191e8:MOV RAX,qword ptr [RBP + -0x8]
	000191ec:SUB RAX,0x1
	000191f0:MOVZX EAX,byte ptr [RAX]
	000191f3:CMP AL,0x2e
	000191f5:JZ 0x00019206
END_OF_LINE
----------------------------------------------
28: (pcVar1[-1] != '.')) {
	000191ec:SUB RAX,0x1
	000191f0:MOVZX EAX,byte ptr [RAX]
	000191f3:CMP AL,0x2e
END_OF_LINE
----------------------------------------------
29: *pcVar1 = '\0';
	000191fb:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
30: last_location_replaced = pcVar1;
	00019202:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
32: component_start = f + 1;
	0001920a:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
34: f = f + 1;
	00019212:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
35: } while( true );
	00019212:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE



Function: makedirs
----------------------------------------------
12: filename_00 = xstrdup(name);
	00019246:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
13: pcVar1 = replace_slashes(filename_00);
	00019256:CALL 0x0001915c
END_OF_LINE
----------------------------------------------
14: f = filename_00;
	00019264:JZ 0x000192a2
END_OF_LINE
----------------------------------------------
15: if (pcVar1 != (char *)0x0) {
	0001925f:CMP qword ptr [RBP + -0x8],0x0
	00019264:JZ 0x000192a2
END_OF_LINE
----------------------------------------------
16: for (; f <= pcVar1; f = f + 1) {
	00019293:ADD qword ptr [RBP + -0x18],0x1
	00019298:MOV RAX,qword ptr [RBP + -0x18]
	0001929c:CMP RAX,qword ptr [RBP + -0x8]
	000192a0:JBE 0x00019270
END_OF_LINE
----------------------------------------------
17: if (*f == '\0') {
	00019274:MOVZX EAX,byte ptr [RAX]
	00019277:TEST AL,AL
	00019279:JNZ 0x00019293
END_OF_LINE
----------------------------------------------
18: safe_mkdir(filename_00,0x1ff);
	00019287:CALL 0x00015ce1
END_OF_LINE
----------------------------------------------
19: *f = '/';
	00019290:MOV byte ptr [RAX],0x2f
END_OF_LINE
----------------------------------------------
23: free(filename_00);
	000192a9:CALL 0x00005860
END_OF_LINE
----------------------------------------------
24: return;
	000192b0:RET
END_OF_LINE



Function: removedirs
----------------------------------------------
12: __s = xstrdup(name);
	000192c8:CALL 0x0002bee1
END_OF_LINE
----------------------------------------------
13: for (i = strlen(__s); i != 0; i = i - 1) {
	000192d8:CALL 0x00005ad0
	000192dd:MOV qword ptr [RBP + -0x10],RAX
	000192e1:JMP 0x000193e6
	000192e6:MOV RDX,qword ptr [RBP + -0x8]
	000192ea:MOV RAX,qword ptr [RBP + -0x10]
	000192ee:ADD RAX,RDX
	000192f1:MOVZX EAX,byte ptr [RAX]
	000192f4:CMP AL,0x2f
	000192f6:JNZ 0x000193e1
	000192fc:MOV RAX,qword ptr [RBP + -0x10]
	00019300:LEA RDX,[RAX + -0x1]
	00019304:MOV RAX,qword ptr [RBP + -0x8]
	00019308:ADD RAX,RDX
	0001930b:MOVZX EAX,byte ptr [RAX]
	0001930e:CMP AL,0x2f
	00019310:JZ 0x000193e1
	00019316:MOV RAX,qword ptr [RBP + -0x10]
	0001931a:LEA RDX,[RAX + -0x1]
	0001931e:MOV RAX,qword ptr [RBP + -0x8]
	00019322:ADD RAX,RDX
	00019325:MOVZX EAX,byte ptr [RAX]
	00019328:CMP AL,0x2e
	0001932a:JNZ 0x00019384
	0001932c:CMP qword ptr [RBP + -0x10],0x1
	00019331:JZ 0x000193e1
	00019337:MOV RAX,qword ptr [RBP + -0x10]
	0001933b:LEA RDX,[RAX + -0x2]
	0001933f:MOV RAX,qword ptr [RBP + -0x8]
	00019343:ADD RAX,RDX
	00019346:MOVZX EAX,byte ptr [RAX]
	00019349:CMP AL,0x2f
	0001934b:JZ 0x000193e1
	00019351:MOV RAX,qword ptr [RBP + -0x10]
	00019355:LEA RDX,[RAX + -0x2]
	00019359:MOV RAX,qword ptr [RBP + -0x8]
	0001935d:ADD RAX,RDX
	00019360:MOVZX EAX,byte ptr [RAX]
	00019363:CMP AL,0x2e
	00019365:JNZ 0x00019384
	00019367:CMP qword ptr [RBP + -0x10],0x2
	0001936c:JZ 0x000193e1
	0001936e:MOV RAX,qword ptr [RBP + -0x10]
	00019372:LEA RDX,[RAX + -0x3]
	00019376:MOV RAX,qword ptr [RBP + -0x8]
	0001937a:ADD RAX,RDX
	0001937d:MOVZX EAX,byte ptr [RAX]
	00019380:CMP AL,0x2f
	00019382:JZ 0x000193e1
	00019384:MOV RDX,qword ptr [RBP + -0x8]
	00019388:MOV RAX,qword ptr [RBP + -0x10]
	0001938c:ADD RAX,RDX
	0001938f:MOV byte ptr [RAX],0x0
	00019392:MOV RAX,qword ptr [RBP + -0x8]
	00019396:MOV RDI,RAX
	00019399:CALL 0x00015d4b
	0001939e:TEST EAX,EAX
	000193a0:JNZ 0x000193d3
	000193a2:LEA RAX,[0x3e35c]
	000193a9:MOV EAX,dword ptr [RAX]
	000193ab:CMP EAX,0x2
	000193ae:JNZ 0x000193d3
	000193b0:MOV RAX,qword ptr [RBP + -0x8]
	000193b4:MOV RDI,RAX
	000193b7:CALL 0x0002a515
	000193bc:MOV RSI,RAX
	000193bf:LEA RAX,[0x33e8e]
	000193c6:MOV RDI,RAX
	000193c9:MOV EAX,0x0
	000193ce:CALL 0x000188a8
	000193d3:MOV RDX,qword ptr [RBP + -0x8]
	000193d7:MOV RAX,qword ptr [RBP + -0x10]
	000193db:ADD RAX,RDX
	000193de:MOV byte ptr [RAX],0x2f
	000193e1:SUB qword ptr [RBP + -0x10],0x1
	000193e6:CMP qword ptr [RBP + -0x10],0x0
	000193eb:JNZ 0x000192e6
END_OF_LINE
----------------------------------------------
14: if (((__s[i] == '/') && (__s[i - 1] != '/')) &&
	000192ee:ADD RAX,RDX
	000192f1:MOVZX EAX,byte ptr [RAX]
	000192f4:CMP AL,0x2f
	000192f6:JNZ 0x000193e1
	000192fc:MOV RAX,qword ptr [RBP + -0x10]
	00019300:LEA RDX,[RAX + -0x1]
	00019304:MOV RAX,qword ptr [RBP + -0x8]
	00019308:ADD RAX,RDX
	0001930b:MOVZX EAX,byte ptr [RAX]
	0001930e:CMP AL,0x2f
	00019310:JZ 0x000193e1
	00019316:MOV RAX,qword ptr [RBP + -0x10]
	0001931a:LEA RDX,[RAX + -0x1]
	0001931e:MOV RAX,qword ptr [RBP + -0x8]
	00019322:ADD RAX,RDX
	00019325:MOVZX EAX,byte ptr [RAX]
	00019328:CMP AL,0x2e
	0001932a:JNZ 0x00019384
	0001932c:CMP qword ptr [RBP + -0x10],0x1
	00019331:JZ 0x000193e1
	00019337:MOV RAX,qword ptr [RBP + -0x10]
	0001933b:LEA RDX,[RAX + -0x2]
	0001933f:MOV RAX,qword ptr [RBP + -0x8]
	00019343:ADD RAX,RDX
	00019346:MOVZX EAX,byte ptr [RAX]
	00019349:CMP AL,0x2f
	0001934b:JZ 0x000193e1
	00019351:MOV RAX,qword ptr [RBP + -0x10]
	00019355:LEA RDX,[RAX + -0x2]
	00019359:MOV RAX,qword ptr [RBP + -0x8]
	0001935d:ADD RAX,RDX
	00019360:MOVZX EAX,byte ptr [RAX]
	00019363:CMP AL,0x2e
	00019365:JNZ 0x00019384
	00019367:CMP qword ptr [RBP + -0x10],0x2
	0001936c:JZ 0x000193e1
	0001936e:MOV RAX,qword ptr [RBP + -0x10]
	00019372:LEA RDX,[RAX + -0x3]
	00019376:MOV RAX,qword ptr [RBP + -0x8]
	0001937a:ADD RAX,RDX
	0001937d:MOVZX EAX,byte ptr [RAX]
	00019380:CMP AL,0x2f
	00019382:JZ 0x000193e1
END_OF_LINE
----------------------------------------------
15: ((__s[i - 1] != '.' ||
	0001931a:LEA RDX,[RAX + -0x1]
	0001931e:MOV RAX,qword ptr [RBP + -0x8]
	00019322:ADD RAX,RDX
	00019325:MOVZX EAX,byte ptr [RAX]
	00019328:CMP AL,0x2e
END_OF_LINE
----------------------------------------------
16: (((i != 1 && (__s[i - 2] != '/')) &&
	0001932c:CMP qword ptr [RBP + -0x10],0x1
	00019331:JZ 0x000193e1
	00019337:MOV RAX,qword ptr [RBP + -0x10]
	0001933b:LEA RDX,[RAX + -0x2]
	0001933f:MOV RAX,qword ptr [RBP + -0x8]
	00019343:ADD RAX,RDX
	00019346:MOVZX EAX,byte ptr [RAX]
	00019349:CMP AL,0x2f
END_OF_LINE
----------------------------------------------
17: ((__s[i - 2] != '.' || ((i != 2 && (__s[i - 3] != '/')))))))))) {
	00019355:LEA RDX,[RAX + -0x2]
	00019359:MOV RAX,qword ptr [RBP + -0x8]
	0001935d:ADD RAX,RDX
	00019360:MOVZX EAX,byte ptr [RAX]
	00019363:CMP AL,0x2e
	00019365:JNZ 0x00019384
	00019367:CMP qword ptr [RBP + -0x10],0x2
	0001936c:JZ 0x000193e1
	0001936e:MOV RAX,qword ptr [RBP + -0x10]
	00019372:LEA RDX,[RAX + -0x3]
	00019376:MOV RAX,qword ptr [RBP + -0x8]
	0001937a:ADD RAX,RDX
	0001937d:MOVZX EAX,byte ptr [RAX]
	00019380:CMP AL,0x2f
END_OF_LINE
----------------------------------------------
18: __s[i] = '\0';
	0001938c:ADD RAX,RDX
	0001938f:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
19: iVar1 = safe_rmdir(__s);
	00019399:CALL 0x00015d4b
END_OF_LINE
----------------------------------------------
20: if ((iVar1 == 0) && (verbosity == _IScntrl)) {
	0001939e:TEST EAX,EAX
	000193a0:JNZ 0x000193d3
	000193a2:LEA RAX,[0x3e35c]
	000193a9:MOV EAX,dword ptr [RAX]
	000193ab:CMP EAX,0x2
	000193ae:JNZ 0x000193d3
END_OF_LINE
----------------------------------------------
21: pcVar2 = quotearg(__s);
	000193b7:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
22: say("Removed empty directory %s\n",pcVar2);
	000193ce:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
24: __s[i] = '/';
	000193db:ADD RAX,RDX
	000193de:MOV byte ptr [RAX],0x2f
END_OF_LINE
----------------------------------------------
27: free(__s);
	000193f8:CALL 0x00005860
END_OF_LINE
----------------------------------------------
28: return;
	000193ff:RET
END_OF_LINE



Function: init_time
----------------------------------------------
7: gettime(&initial_time);
	00019412:CALL 0x0001eb5c
END_OF_LINE
----------------------------------------------
8: return;
	00019419:RET
END_OF_LINE



Function: parse_c_string
----------------------------------------------
17: if (*s != '\"') {
	00019432:MOVZX EAX,byte ptr [RAX]
	00019435:CMP AL,0x22
	00019437:JZ 0x00019461
END_OF_LINE
----------------------------------------------
19: __assert_fail("*s == \'\"\'","util.c",0x54a,"parse_c_string");
	0001945c:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
21: s_local = s + 1;
	00019461:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
22: n = strlen(s_local);
	0001946d:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
23: u = (char *)xmalloc(n);
	00019475:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
24: v = u;
	00019482:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
26: pcVar1 = s_local + 1;
	0001948a:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
27: cVar2 = *s_local;
	00019492:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
28: if (cVar2 == '\\') {
	0001949c:CMP EAX,0x5c
	0001949f:JZ 0x00019525
END_OF_LINE
----------------------------------------------
29: pcVar4 = s_local + 2;
	0001952a:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
30: c = *pcVar1;
	00019532:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
31: pcVar1 = pcVar4;
	00019568:JMP RAX
END_OF_LINE
----------------------------------------------
32: switch(c) {
	00019568:JMP RAX
END_OF_LINE
----------------------------------------------
33: case '\"':
	00019607:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
34: case '\\':
	00019607:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
36: default:
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
37: LAB_00019628:
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
38: s_local = pcVar1;
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
39: free(u);
	0001962f:CALL 0x00005860
END_OF_LINE
----------------------------------------------
40: if (endp != (char **)0x0) {
	00019634:CMP qword ptr [RBP + -0x30],0x0
	00019639:JZ 0x00019646
END_OF_LINE
----------------------------------------------
41: *endp = s_local;
	00019643:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
43: return (char *)0x0;
	0001964b:LEAVE
	0001964c:RET
END_OF_LINE
----------------------------------------------
44: case '0':
	000195a5:SHL EAX,0x6
END_OF_LINE
----------------------------------------------
45: case '1':
	000195a5:SHL EAX,0x6
END_OF_LINE
----------------------------------------------
46: case '2':
	000195a5:SHL EAX,0x6
END_OF_LINE
----------------------------------------------
47: case '3':
	000195a5:SHL EAX,0x6
END_OF_LINE
----------------------------------------------
48: pcVar1 = s_local + 3;
	000195af:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
49: cVar2 = *pcVar4;
	000195b7:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
50: if ((cVar2 < '0') || ('7' < cVar2)) goto LAB_00019628;
	000195c1:JLE 0x00019624
	000195c3:CMP byte ptr [RBP + -0x15],0x37
	000195c7:JG 0x00019624
	000195c9:MOVSX EAX,byte ptr [RBP + -0x15]
	000195cd:SUB EAX,0x30
	000195d0:SHL EAX,0x3
	000195d3:OR dword ptr [RBP + -0x14],EAX
	000195d6:MOV RAX,qword ptr [RBP + -0x28]
	000195da:LEA RDX,[RAX + 0x1]
	000195de:MOV qword ptr [RBP + -0x28],RDX
	000195e2:MOVZX EAX,byte ptr [RAX]
	000195e5:MOV byte ptr [RBP + -0x15],AL
	000195e8:CMP byte ptr [RBP + -0x15],0x2f
	000195ec:JLE 0x00019627
	000195ee:CMP byte ptr [RBP + -0x15],0x37
	000195f2:JG 0x00019627
	000195f4:MOVSX EAX,byte ptr [RBP + -0x15]
	000195f8:SUB EAX,0x30
	000195fb:OR dword ptr [RBP + -0x14],EAX
	000195fe:MOV EAX,dword ptr [RBP + -0x14]
	00019601:MOV byte ptr [RBP + -0x15],AL
	00019604:JMP 0x00019607
	00019606:NOP
	00019607:MOV RAX,qword ptr [RBP + -0x8]
	0001960b:LEA RDX,[RAX + 0x1]
	0001960f:MOV qword ptr [RBP + -0x8],RDX
	00019613:MOVZX EDX,byte ptr [RBP + -0x15]
	00019617:MOV byte ptr [RAX],DL
	00019619:JMP 0x00019486
	0001961e:NOP
	0001961f:JMP 0x00019628
	00019621:NOP
	00019622:JMP 0x00019628
	00019624:NOP
	00019625:JMP 0x00019628
	00019627:NOP
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
51: pcVar4 = s_local + 4;
	000195da:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
52: cVar3 = *pcVar1;
	000195e2:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
53: pcVar1 = pcVar4;
	000195ec:JLE 0x00019627
END_OF_LINE
----------------------------------------------
54: if ((cVar3 < '0') || ('7' < cVar3)) goto LAB_00019628;
	000195ec:JLE 0x00019627
	000195ee:CMP byte ptr [RBP + -0x15],0x37
	000195f2:JG 0x00019627
	000195f4:MOVSX EAX,byte ptr [RBP + -0x15]
	000195f8:SUB EAX,0x30
	000195fb:OR dword ptr [RBP + -0x14],EAX
	000195fe:MOV EAX,dword ptr [RBP + -0x14]
	00019601:MOV byte ptr [RBP + -0x15],AL
	00019604:JMP 0x00019607
	00019606:NOP
	00019607:MOV RAX,qword ptr [RBP + -0x8]
	0001960b:LEA RDX,[RAX + 0x1]
	0001960f:MOV qword ptr [RBP + -0x8],RDX
	00019613:MOVZX EDX,byte ptr [RBP + -0x15]
	00019617:MOV byte ptr [RAX],DL
	00019619:JMP 0x00019486
	0001961e:NOP
	0001961f:JMP 0x00019628
	00019621:NOP
	00019622:JMP 0x00019628
	00019624:NOP
	00019625:JMP 0x00019628
	00019627:NOP
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
55: c = c * '@' | (cVar2 + -0x30) * '\b' | cVar3 - 0x30U;
	000195a5:SHL EAX,0x6
	000195a8:MOV dword ptr [RBP + -0x14],EAX
	000195ab:MOV RAX,qword ptr [RBP + -0x28]
	000195af:LEA RDX,[RAX + 0x1]
	000195b3:MOV qword ptr [RBP + -0x28],RDX
	000195b7:MOVZX EAX,byte ptr [RAX]
	000195ba:MOV byte ptr [RBP + -0x15],AL
	000195bd:CMP byte ptr [RBP + -0x15],0x2f
	000195c1:JLE 0x00019624
	000195c3:CMP byte ptr [RBP + -0x15],0x37
	000195c7:JG 0x00019624
	000195c9:MOVSX EAX,byte ptr [RBP + -0x15]
	000195cd:SUB EAX,0x30
	000195d0:SHL EAX,0x3
	000195d3:OR dword ptr [RBP + -0x14],EAX
	000195d6:MOV RAX,qword ptr [RBP + -0x28]
	000195da:LEA RDX,[RAX + 0x1]
	000195de:MOV qword ptr [RBP + -0x28],RDX
	000195e2:MOVZX EAX,byte ptr [RAX]
	000195e5:MOV byte ptr [RBP + -0x15],AL
	000195e8:CMP byte ptr [RBP + -0x15],0x2f
	000195ec:JLE 0x00019627
	000195ee:CMP byte ptr [RBP + -0x15],0x37
	000195f2:JG 0x00019627
	000195f4:MOVSX EAX,byte ptr [RBP + -0x15]
	000195f8:SUB EAX,0x30
	000195fb:OR dword ptr [RBP + -0x14],EAX
END_OF_LINE
----------------------------------------------
57: case 'a':
	0001956b:MOV byte ptr [RBP + -0x15],0x7
END_OF_LINE
----------------------------------------------
58: c = '\a';
	0001956b:MOV byte ptr [RBP + -0x15],0x7
END_OF_LINE
----------------------------------------------
60: case 'b':
	00019574:MOV byte ptr [RBP + -0x15],0x8
END_OF_LINE
----------------------------------------------
61: c = '\b';
	00019574:MOV byte ptr [RBP + -0x15],0x8
END_OF_LINE
----------------------------------------------
63: case 'f':
	0001957d:MOV byte ptr [RBP + -0x15],0xc
END_OF_LINE
----------------------------------------------
64: c = '\f';
	0001957d:MOV byte ptr [RBP + -0x15],0xc
END_OF_LINE
----------------------------------------------
66: case 'n':
	00019586:MOV byte ptr [RBP + -0x15],0xa
END_OF_LINE
----------------------------------------------
67: c = '\n';
	00019586:MOV byte ptr [RBP + -0x15],0xa
END_OF_LINE
----------------------------------------------
69: case 'r':
	0001958c:MOV byte ptr [RBP + -0x15],0xd
END_OF_LINE
----------------------------------------------
70: c = '\r';
	0001958c:MOV byte ptr [RBP + -0x15],0xd
END_OF_LINE
----------------------------------------------
72: case 't':
	00019592:MOV byte ptr [RBP + -0x15],0x9
END_OF_LINE
----------------------------------------------
73: c = '\t';
	00019592:MOV byte ptr [RBP + -0x15],0x9
END_OF_LINE
----------------------------------------------
75: case 'v':
	00019598:MOV byte ptr [RBP + -0x15],0xb
END_OF_LINE
----------------------------------------------
76: c = '\v';
	00019598:MOV byte ptr [RBP + -0x15],0xb
END_OF_LINE
----------------------------------------------
78: s_local = pcVar4;
	00019607:MOV RAX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
79: *v = c;
	00019617:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
82: if (cVar2 < ']') {
	000194a8:JG 0x0001950e
END_OF_LINE
----------------------------------------------
83: if (cVar2 == '\0') goto LAB_00019628;
	000194aa:TEST EAX,EAX
	000194ac:JZ 0x0001961e
	000194b2:CMP EAX,0x22
	000194b5:JNZ 0x0001950e
	000194b7:MOV RAX,qword ptr [RBP + -0x8]
	000194bb:LEA RDX,[RAX + 0x1]
	000194bf:MOV qword ptr [RBP + -0x8],RDX
	000194c3:MOV byte ptr [RAX],0x0
	000194c6:MOV RAX,qword ptr [RBP + -0x8]
	000194ca:SUB RAX,qword ptr [RBP + -0x10]
	000194ce:MOV RDX,RAX
	000194d1:MOV RAX,qword ptr [RBP + -0x10]
	000194d5:MOV RSI,RDX
	000194d8:MOV RDI,RAX
	000194db:CALL 0x00005ea0
	000194e0:MOV qword ptr [RBP + -0x8],RAX
	000194e4:CMP qword ptr [RBP + -0x8],0x0
	000194e9:JZ 0x000194f3
	000194eb:MOV RAX,qword ptr [RBP + -0x8]
	000194ef:MOV qword ptr [RBP + -0x10],RAX
	000194f3:CMP qword ptr [RBP + -0x30],0x0
	000194f8:JZ 0x00019505
	000194fa:MOV RAX,qword ptr [RBP + -0x30]
	000194fe:MOV RDX,qword ptr [RBP + -0x28]
	00019502:MOV qword ptr [RAX],RDX
	00019505:MOV RAX,qword ptr [RBP + -0x10]
	00019509:JMP 0x0001964b
	0001950e:MOV RAX,qword ptr [RBP + -0x8]
	00019512:LEA RDX,[RAX + 0x1]
	00019516:MOV qword ptr [RBP + -0x8],RDX
	0001951a:MOVZX EDX,byte ptr [RBP + -0x15]
	0001951e:MOV byte ptr [RAX],DL
	00019520:JMP 0x00019619
	00019525:NOP
	00019526:MOV RAX,qword ptr [RBP + -0x28]
	0001952a:LEA RDX,[RAX + 0x1]
	0001952e:MOV qword ptr [RBP + -0x28],RDX
	00019532:MOVZX EAX,byte ptr [RAX]
	00019535:MOV byte ptr [RBP + -0x15],AL
	00019538:MOVSX EAX,byte ptr [RBP + -0x15]
	0001953c:SUB EAX,0x22
	0001953f:CMP EAX,0x54
	00019542:JA 0x00019621
	00019548:MOV EAX,EAX
	0001954a:LEA RDX,[RAX*0x4]
	00019552:LEA RAX,[0x33eb4]
	00019559:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001955c:CDQE
	0001955e:LEA RDX,[0x33eb4]
	00019565:ADD RAX,RDX
	00019568:JMP RAX
	0001956b:MOV byte ptr [RBP + -0x15],0x7
	0001956f:JMP 0x00019607
	00019574:MOV byte ptr [RBP + -0x15],0x8
	00019578:JMP 0x00019607
	0001957d:MOV byte ptr [RBP + -0x15],0xc
	00019581:JMP 0x00019607
	00019586:MOV byte ptr [RBP + -0x15],0xa
	0001958a:JMP 0x00019607
	0001958c:MOV byte ptr [RBP + -0x15],0xd
	00019590:JMP 0x00019607
	00019592:MOV byte ptr [RBP + -0x15],0x9
	00019596:JMP 0x00019607
	00019598:MOV byte ptr [RBP + -0x15],0xb
	0001959c:JMP 0x00019607
	0001959e:MOVSX EAX,byte ptr [RBP + -0x15]
	000195a2:SUB EAX,0x30
	000195a5:SHL EAX,0x6
	000195a8:MOV dword ptr [RBP + -0x14],EAX
	000195ab:MOV RAX,qword ptr [RBP + -0x28]
	000195af:LEA RDX,[RAX + 0x1]
	000195b3:MOV qword ptr [RBP + -0x28],RDX
	000195b7:MOVZX EAX,byte ptr [RAX]
	000195ba:MOV byte ptr [RBP + -0x15],AL
	000195bd:CMP byte ptr [RBP + -0x15],0x2f
	000195c1:JLE 0x00019624
	000195c3:CMP byte ptr [RBP + -0x15],0x37
	000195c7:JG 0x00019624
	000195c9:MOVSX EAX,byte ptr [RBP + -0x15]
	000195cd:SUB EAX,0x30
	000195d0:SHL EAX,0x3
	000195d3:OR dword ptr [RBP + -0x14],EAX
	000195d6:MOV RAX,qword ptr [RBP + -0x28]
	000195da:LEA RDX,[RAX + 0x1]
	000195de:MOV qword ptr [RBP + -0x28],RDX
	000195e2:MOVZX EAX,byte ptr [RAX]
	000195e5:MOV byte ptr [RBP + -0x15],AL
	000195e8:CMP byte ptr [RBP + -0x15],0x2f
	000195ec:JLE 0x00019627
	000195ee:CMP byte ptr [RBP + -0x15],0x37
	000195f2:JG 0x00019627
	000195f4:MOVSX EAX,byte ptr [RBP + -0x15]
	000195f8:SUB EAX,0x30
	000195fb:OR dword ptr [RBP + -0x14],EAX
	000195fe:MOV EAX,dword ptr [RBP + -0x14]
	00019601:MOV byte ptr [RBP + -0x15],AL
	00019604:JMP 0x00019607
	00019606:NOP
	00019607:MOV RAX,qword ptr [RBP + -0x8]
	0001960b:LEA RDX,[RAX + 0x1]
	0001960f:MOV qword ptr [RBP + -0x8],RDX
	00019613:MOVZX EDX,byte ptr [RBP + -0x15]
	00019617:MOV byte ptr [RAX],DL
	00019619:JMP 0x00019486
	0001961e:NOP
	0001961f:JMP 0x00019628
	00019621:NOP
	00019622:JMP 0x00019628
	00019624:NOP
	00019625:JMP 0x00019628
	00019627:NOP
	00019628:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
84: if (cVar2 == '\"') {
	000194b2:CMP EAX,0x22
	000194b5:JNZ 0x0001950e
END_OF_LINE
----------------------------------------------
85: *v = '\0';
	000194c3:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
86: pcVar4 = (char *)realloc(u,(size_t)(v + (1 - (long)u)));
	000194ca:SUB RAX,qword ptr [RBP + -0x10]
	000194ce:MOV RDX,RAX
	000194d1:MOV RAX,qword ptr [RBP + -0x10]
	000194d5:MOV RSI,RDX
	000194d8:MOV RDI,RAX
	000194db:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
87: if (pcVar4 != (char *)0x0) {
	000194e4:CMP qword ptr [RBP + -0x8],0x0
	000194e9:JZ 0x000194f3
END_OF_LINE
----------------------------------------------
88: u = pcVar4;
	000194ef:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
90: if (endp == (char **)0x0) {
	000194f3:CMP qword ptr [RBP + -0x30],0x0
	000194f8:JZ 0x00019505
END_OF_LINE
----------------------------------------------
91: return u;
	0001964b:LEAVE
	0001964c:RET
END_OF_LINE
----------------------------------------------
93: *endp = pcVar1;
	00019502:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
94: return u;
	0001964b:LEAVE
	0001964c:RET
END_OF_LINE
----------------------------------------------
97: *v = cVar2;
	0001951e:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
98: s_local = pcVar1;
	00019520:JMP 0x00019619
END_OF_LINE
----------------------------------------------
100: v = v + 1;
	00019512:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
101: } while( true );
	00019619:JMP 0x00019486
END_OF_LINE



Function: strip_leading_slashes
----------------------------------------------
13: s = strip_leading;
	00019676:JMP 0x000196ba
END_OF_LINE
----------------------------------------------
14: n = name;
	00019676:JMP 0x000196ba
END_OF_LINE
----------------------------------------------
15: for (p = name; *p != '\0'; p = p + 1) {
	00019676:JMP 0x000196ba
	00019678:MOV RAX,qword ptr [RBP + -0x10]
	0001967c:MOVZX EAX,byte ptr [RAX]
	0001967f:CMP AL,0x2f
	00019681:JNZ 0x000196b5
	00019683:JMP 0x0001968a
	00019685:ADD qword ptr [RBP + -0x10],0x1
	0001968a:MOV RAX,qword ptr [RBP + -0x10]
	0001968e:ADD RAX,0x1
	00019692:MOVZX EAX,byte ptr [RAX]
	00019695:CMP AL,0x2f
	00019697:JZ 0x00019685
	00019699:CMP dword ptr [RBP + -0x2c],0x0
	0001969d:JS 0x000196a9
	0001969f:SUB dword ptr [RBP + -0x14],0x1
	000196a3:CMP dword ptr [RBP + -0x14],0x0
	000196a7:JS 0x000196b5
	000196a9:MOV RAX,qword ptr [RBP + -0x10]
	000196ad:ADD RAX,0x1
	000196b1:MOV qword ptr [RBP + -0x8],RAX
	000196b5:ADD qword ptr [RBP + -0x10],0x1
	000196ba:MOV RAX,qword ptr [RBP + -0x10]
	000196be:MOVZX EAX,byte ptr [RAX]
	000196c1:TEST AL,AL
	000196c3:JNZ 0x00019678
END_OF_LINE
----------------------------------------------
16: if (*p == '/') {
	0001967c:MOVZX EAX,byte ptr [RAX]
	0001967f:CMP AL,0x2f
	00019681:JNZ 0x000196b5
END_OF_LINE
----------------------------------------------
17: for (; p[1] == '/'; p = p + 1) {
	00019685:ADD qword ptr [RBP + -0x10],0x1
	0001968a:MOV RAX,qword ptr [RBP + -0x10]
	0001968e:ADD RAX,0x1
	00019692:MOVZX EAX,byte ptr [RAX]
	00019695:CMP AL,0x2f
	00019697:JZ 0x00019685
END_OF_LINE
----------------------------------------------
19: if ((strip_leading < 0) || (s = s + -1, -1 < s)) {
	00019699:CMP dword ptr [RBP + -0x2c],0x0
	0001969d:JS 0x000196a9
	0001969f:SUB dword ptr [RBP + -0x14],0x1
	000196a3:CMP dword ptr [RBP + -0x14],0x0
	000196a7:JS 0x000196b5
END_OF_LINE
----------------------------------------------
20: n = p + 1;
	000196ad:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
24: if (((strip_leading < 0) || (s < 1)) && (*n != '\0')) {
	000196c5:CMP dword ptr [RBP + -0x2c],0x0
	000196c9:JS 0x000196d1
	000196cb:CMP dword ptr [RBP + -0x14],0x0
	000196cf:JG 0x00019706
	000196d1:MOV RAX,qword ptr [RBP + -0x8]
	000196d5:MOVZX EAX,byte ptr [RAX]
	000196d8:TEST AL,AL
	000196da:JZ 0x00019706
END_OF_LINE
----------------------------------------------
25: sVar2 = strlen(n);
	000196e3:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
26: memmove(name,n,sVar2 + 1);
	000196e8:LEA RDX,[RAX + 0x1]
	000196ec:MOV RCX,qword ptr [RBP + -0x8]
	000196f0:MOV RAX,qword ptr [RBP + -0x28]
	000196f4:MOV RSI,RCX
	000196f7:MOV RDI,RAX
	000196fa:CALL 0x00005f00
END_OF_LINE
----------------------------------------------
27: _Var1 = true;
	000196ff:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
30: _Var1 = false;
	00019706:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
32: return _Var1;
	0001970c:RET
END_OF_LINE



Function: fetchname
----------------------------------------------
28: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001973f:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
29: timestr = (char *)0x0;
	0001974e:MOV qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
30: stamp.tv_sec = -1;
	00019756:MOV qword ptr [RBP + -0x50],-0x1
END_OF_LINE
----------------------------------------------
31: stamp.tv_nsec = 0;
	0001975e:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
32: at_local = at;
	00019766:JMP 0x00019770
END_OF_LINE
----------------------------------------------
33: while (ppuVar4 = __ctype_b_loc(), ((*ppuVar4)[(byte)*at_local] & 0x2000) != 0) {
	00019770:CALL 0x000060a0
	00019775:MOV RDX,qword ptr [RAX]
	00019778:MOV RAX,qword ptr [RBP + -0x88]
	0001977f:MOVZX EAX,byte ptr [RAX]
	00019782:MOVZX EAX,AL
	00019785:ADD RAX,RAX
	00019788:ADD RAX,RDX
	0001978b:MOVZX EAX,word ptr [RAX]
	0001978e:MOVZX EAX,AX
	00019791:AND EAX,0x2000
	00019796:TEST EAX,EAX
	00019798:JNZ 0x00019768
END_OF_LINE
----------------------------------------------
34: at_local = at_local + 1;
	00019768:ADD qword ptr [RBP + -0x88],0x1
END_OF_LINE
----------------------------------------------
36: if ((debug & 0x80U) != 0) {
	000197a3:AND EAX,0x80
	000197a8:TEST EAX,EAX
	000197aa:JZ 0x000197d0
END_OF_LINE
----------------------------------------------
37: say("fetchname %s %d\n",at_local,(ulong)(uint)strip_leading);
	000197ac:MOV EDX,dword ptr [RBP + -0x8c]
	000197b2:MOV RAX,qword ptr [RBP + -0x88]
	000197b9:MOV RSI,RAX
	000197bc:LEA RAX,[0x34008]
	000197c3:MOV RDI,RAX
	000197c6:MOV EAX,0x0
	000197cb:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
39: if (*at_local == '\"') {
	000197d7:MOVZX EAX,byte ptr [RAX]
	000197da:CMP AL,0x22
	000197dc:JNZ 0x00019844
END_OF_LINE
----------------------------------------------
40: name = parse_c_string(at_local,&t);
	000197de:LEA RDX,[RBP + -0x78]
	000197e2:MOV RAX,qword ptr [RBP + -0x88]
	000197e9:MOV RSI,RDX
	000197ec:MOV RDI,RAX
	000197ef:CALL 0x0001941a
END_OF_LINE
----------------------------------------------
41: if (name == (char *)0x0) {
	000197f8:CMP qword ptr [RBP + -0x70],0x0
	000197fd:JNZ 0x0001993b
END_OF_LINE
----------------------------------------------
42: if ((debug & 0x80U) != 0) {
	0001980c:AND EAX,0x80
	00019811:TEST EAX,EAX
	00019813:JZ 0x00019bb2
END_OF_LINE
----------------------------------------------
43: pcVar5 = quotearg(at_local);
	00019823:CALL 0x0002a515
END_OF_LINE
----------------------------------------------
44: say("ignoring malformed filename %s\n",pcVar5);
	0001983a:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
46: goto LAB_00019bb6;
	00019bb6:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
50: for (t = at_local; *t != '\0'; t = t + 1) {
	0001984b:MOV qword ptr [RBP + -0x78],RAX
	0001984f:JMP 0x00019905
	00019854:CALL 0x000060a0
	00019859:MOV RDX,qword ptr [RAX]
	0001985c:MOV RAX,qword ptr [RBP + -0x78]
	00019860:MOVZX EAX,byte ptr [RAX]
	00019863:MOVZX EAX,AL
	00019866:ADD RAX,RAX
	00019869:ADD RAX,RDX
	0001986c:MOVZX EAX,word ptr [RAX]
	0001986f:MOVZX EAX,AX
	00019872:AND EAX,0x2000
	00019877:TEST EAX,EAX
	00019879:JZ 0x000198f9
	0001987b:MOV RAX,qword ptr [RBP + -0x78]
	0001987f:MOV qword ptr [RBP + -0x60],RAX
	00019883:JMP 0x0001988a
	00019885:ADD qword ptr [RBP + -0x60],0x1
	0001988a:MOV RAX,qword ptr [RBP + -0x60]
	0001988e:MOVZX EAX,byte ptr [RAX]
	00019891:CMP AL,0x9
	00019893:JZ 0x000198c0
	00019895:CALL 0x000060a0
	0001989a:MOV RDX,qword ptr [RAX]
	0001989d:MOV RAX,qword ptr [RBP + -0x60]
	000198a1:ADD RAX,0x1
	000198a5:MOVZX EAX,byte ptr [RAX]
	000198a8:MOVZX EAX,AL
	000198ab:ADD RAX,RAX
	000198ae:ADD RAX,RDX
	000198b1:MOVZX EAX,word ptr [RAX]
	000198b4:MOVZX EAX,AX
	000198b7:AND EAX,0x2000
	000198bc:TEST EAX,EAX
	000198be:JNZ 0x00019885
	000198c0:MOV RAX,qword ptr [RBP + -0x60]
	000198c4:MOVZX EAX,byte ptr [RAX]
	000198c7:CMP AL,0x9
	000198c9:JZ 0x00019916
	000198cb:CMP qword ptr [RBP + -0xa8],0x0
	000198d3:JZ 0x000198dc
	000198d5:MOV EDX,0x9
	000198da:JMP 0x000198e1
	000198dc:MOV EDX,0xa
	000198e1:MOV RAX,qword ptr [RBP + -0x60]
	000198e5:ADD RAX,0x1
	000198e9:MOV ESI,EDX
	000198eb:MOV RDI,RAX
	000198ee:CALL 0x00005b60
	000198f3:TEST RAX,RAX
	000198f6:JZ 0x00019916
	000198f8:NOP
	000198f9:MOV RAX,qword ptr [RBP + -0x78]
	000198fd:ADD RAX,0x1
	00019901:MOV qword ptr [RBP + -0x78],RAX
	00019905:MOV RAX,qword ptr [RBP + -0x78]
	00019909:MOVZX EAX,byte ptr [RAX]
	0001990c:TEST AL,AL
	0001990e:JNZ 0x00019854
END_OF_LINE
----------------------------------------------
51: ppuVar4 = __ctype_b_loc();
	00019854:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
52: if (((*ppuVar4)[(byte)*t] & 0x2000) != 0) {
	00019859:MOV RDX,qword ptr [RAX]
	0001985c:MOV RAX,qword ptr [RBP + -0x78]
	00019860:MOVZX EAX,byte ptr [RAX]
	00019863:MOVZX EAX,AL
	00019866:ADD RAX,RAX
	00019869:ADD RAX,RDX
	0001986c:MOVZX EAX,word ptr [RAX]
	0001986f:MOVZX EAX,AX
	00019872:AND EAX,0x2000
	00019877:TEST EAX,EAX
	00019879:JZ 0x000198f9
END_OF_LINE
----------------------------------------------
53: u = t;
	0001987f:MOV qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
54: while ((*u != '\t' && (ppuVar4 = __ctype_b_loc(), ((*ppuVar4)[(byte)u[1]] & 0x2000) != 0)))
	0001988e:MOVZX EAX,byte ptr [RAX]
	00019891:CMP AL,0x9
	00019893:JZ 0x000198c0
	00019895:CALL 0x000060a0
	0001989a:MOV RDX,qword ptr [RAX]
	0001989d:MOV RAX,qword ptr [RBP + -0x60]
	000198a1:ADD RAX,0x1
	000198a5:MOVZX EAX,byte ptr [RAX]
	000198a8:MOVZX EAX,AL
	000198ab:ADD RAX,RAX
	000198ae:ADD RAX,RDX
	000198b1:MOVZX EAX,word ptr [RAX]
	000198b4:MOVZX EAX,AX
	000198b7:AND EAX,0x2000
	000198bc:TEST EAX,EAX
	000198be:JNZ 0x00019885
END_OF_LINE
----------------------------------------------
56: u = u + 1;
	00019885:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
58: if (*u == '\t') break;
	000198c4:MOVZX EAX,byte ptr [RAX]
	000198c7:CMP AL,0x9
	000198c9:JZ 0x00019916
END_OF_LINE
----------------------------------------------
59: if (pstamp == (timespec *)0x0) {
	000198cb:CMP qword ptr [RBP + -0xa8],0x0
	000198d3:JZ 0x000198dc
END_OF_LINE
----------------------------------------------
60: iVar3 = 10;
	000198dc:MOV EDX,0xa
END_OF_LINE
----------------------------------------------
63: iVar3 = 9;
	000198d5:MOV EDX,0x9
END_OF_LINE
----------------------------------------------
65: pcVar5 = strchr(u + 1,iVar3);
	000198e5:ADD RAX,0x1
	000198e9:MOV ESI,EDX
	000198eb:MOV RDI,RAX
	000198ee:CALL 0x00005b60
END_OF_LINE
----------------------------------------------
66: if (pcVar5 == (char *)0x0) break;
	000198f3:TEST RAX,RAX
	000198f6:JZ 0x00019916
END_OF_LINE
----------------------------------------------
69: name = xmemdup0(at_local,(long)t - (long)at_local);
	0001991b:SUB RAX,qword ptr [RBP + -0x88]
	00019922:MOV RDX,RAX
	00019925:MOV RAX,qword ptr [RBP + -0x88]
	0001992c:MOV RSI,RDX
	0001992f:MOV RDI,RAX
	00019932:CALL 0x0002cd3c
END_OF_LINE
----------------------------------------------
71: iVar3 = strcmp(name,"/dev/null");
	0001994c:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
72: if (iVar3 == 0) {
	00019951:TEST EAX,EAX
	00019953:JNZ 0x00019991
END_OF_LINE
----------------------------------------------
73: free(name);
	0001995c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
74: if (pstamp != (timespec *)0x0) {
	00019961:CMP qword ptr [RBP + -0xa8],0x0
	00019969:JZ 0x00019bb5
END_OF_LINE
----------------------------------------------
75: pstamp->tv_sec = 0;
	00019976:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
76: pstamp->tv_nsec = 0;
	00019984:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
80: _Var2 = strip_leading_slashes(name,strip_leading);
	000199a0:CALL 0x0001964d
END_OF_LINE
----------------------------------------------
81: pcVar5 = t;
	000199a0:CALL 0x0001964d
END_OF_LINE
----------------------------------------------
82: if (_Var2) {
	000199aa:JZ 0x000199bd
END_OF_LINE
----------------------------------------------
83: if (ptimestr != (char **)0x0) {
	000199bd:CMP qword ptr [RBP + -0xa0],0x0
	000199c5:JZ 0x00019a3b
END_OF_LINE
----------------------------------------------
84: sVar6 = strlen(t);
	000199d2:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
85: u_1 = pcVar5 + sVar6;
	000199d7:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
86: if ((u_1 != t) && (u_1[-1] == '\n')) {
	000199e2:CMP qword ptr [RBP + -0x58],RAX
	000199e6:JZ 0x000199fc
	000199e8:MOV RAX,qword ptr [RBP + -0x58]
	000199ec:SUB RAX,0x1
	000199f0:MOVZX EAX,byte ptr [RAX]
	000199f3:CMP AL,0xa
	000199f5:JNZ 0x000199fc
END_OF_LINE
----------------------------------------------
87: u_1 = u_1 + -1;
	000199f7:SUB qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
89: if ((u_1 != t) && (u_1[-1] == '\r')) {
	00019a00:CMP qword ptr [RBP + -0x58],RAX
	00019a04:JZ 0x00019a1a
	00019a06:MOV RAX,qword ptr [RBP + -0x58]
	00019a0a:SUB RAX,0x1
	00019a0e:MOVZX EAX,byte ptr [RAX]
	00019a11:CMP AL,0xd
	00019a13:JNZ 0x00019a1a
END_OF_LINE
----------------------------------------------
90: u_1 = u_1 + -1;
	00019a15:SUB qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
92: timestr = xmemdup0(t,(long)u_1 - (long)t);
	00019a22:SUB RAX,RDX
	00019a25:MOV RDX,RAX
	00019a28:MOV RAX,qword ptr [RBP + -0x78]
	00019a2c:MOV RSI,RDX
	00019a2f:MOV RDI,RAX
	00019a32:CALL 0x0002cd3c
END_OF_LINE
----------------------------------------------
94: if (*t != '\n') {
	00019a3f:MOVZX EAX,byte ptr [RAX]
	00019a42:CMP AL,0xa
	00019a44:JZ 0x00019b46
END_OF_LINE
----------------------------------------------
95: if (pstamp == (timespec *)0x0) {
	00019a4a:CMP qword ptr [RBP + -0xa8],0x0
	00019a52:JNZ 0x00019a71
END_OF_LINE
----------------------------------------------
96: free(name);
	00019a5b:CALL 0x00005860
END_OF_LINE
----------------------------------------------
97: free(timestr);
	00019a67:CALL 0x00005860
END_OF_LINE
----------------------------------------------
98: goto LAB_00019bb6;
	00019bb6:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
100: if ((set_utc | set_time) == 0) {
	00019a85:OR EAX,EDX
	00019a87:TEST AL,AL
	00019a89:JZ 0x00019aaa
END_OF_LINE
----------------------------------------------
101: _Var2 = parse_datetime(&stamp,t,&initial_time);
	00019ade:LEA RAX,[RBP + -0x50]
	00019ae2:LEA RDX,[0x40760]
	00019ae9:MOV RSI,RCX
	00019aec:MOV RDI,RAX
	00019aef:CALL 0x00026cce
END_OF_LINE
----------------------------------------------
102: if (((_Var2) &&
	00019af6:JZ 0x00019b46
	00019af8:MOV RAX,qword ptr [RBP + -0x40]
	00019afc:MOV RDX,qword ptr [RBP + -0x38]
	00019b00:MOV RDI,qword ptr [RBP + -0x50]
	00019b04:MOV RSI,qword ptr [RBP + -0x48]
	00019b08:MOV RCX,RDX
	00019b0b:MOV RDX,RAX
	00019b0e:CALL 0x0002b604
	00019b13:TEST EAX,EAX
	00019b15:JLE 0x00019b46
	00019b17:MOV RAX,qword ptr [RBP + -0x30]
	00019b1b:MOV RDX,qword ptr [RBP + -0x28]
	00019b1f:MOV RDI,qword ptr [RBP + -0x50]
	00019b23:MOV RSI,qword ptr [RBP + -0x48]
	00019b27:MOV RCX,RDX
	00019b2a:MOV RDX,RAX
	00019b2d:CALL 0x0002b604
	00019b32:TEST EAX,EAX
	00019b34:JNS 0x00019b46
END_OF_LINE
----------------------------------------------
103: (a.tv_nsec = stamp.tv_nsec, a.tv_sec = stamp.tv_sec,
	00019b04:MOV RSI,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
104: iVar3 = timespec_cmp(a,(timespec)ZEXT816(0xfffffffffffea070)), 0 < iVar3)) &&
	00019afc:MOV RDX,qword ptr [RBP + -0x38]
	00019b00:MOV RDI,qword ptr [RBP + -0x50]
	00019b04:MOV RSI,qword ptr [RBP + -0x48]
	00019b08:MOV RCX,RDX
	00019b0b:MOV RDX,RAX
	00019b0e:CALL 0x0002b604
	00019b13:TEST EAX,EAX
	00019b15:JLE 0x00019b46
END_OF_LINE
----------------------------------------------
105: (a_00.tv_nsec = stamp.tv_nsec, a_00.tv_sec = stamp.tv_sec,
	00019b23:MOV RSI,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
106: iVar3 = timespec_cmp(a_00,(timespec)ZEXT816(0x16da0)), iVar3 < 0)) {
	00019b1b:MOV RDX,qword ptr [RBP + -0x28]
	00019b1f:MOV RDI,qword ptr [RBP + -0x50]
	00019b23:MOV RSI,qword ptr [RBP + -0x48]
	00019b27:MOV RCX,RDX
	00019b2a:MOV RDX,RAX
	00019b2d:CALL 0x0002b604
	00019b32:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
107: stamp.tv_sec = 0;
	00019b36:MOV qword ptr [RBP + -0x50],0x0
END_OF_LINE
----------------------------------------------
108: stamp.tv_nsec = 0;
	00019b3e:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
112: parse_datetime(&stamp,t,&initial_time);
	00019a8f:LEA RAX,[RBP + -0x50]
	00019a93:LEA RDX,[0x40760]
	00019a9a:MOV RSI,RCX
	00019a9d:MOV RDI,RAX
	00019aa0:CALL 0x00026cce
END_OF_LINE
----------------------------------------------
115: free(*pname);
	00019b4d:MOV RAX,qword ptr [RAX]
	00019b50:MOV RDI,RAX
	00019b53:CALL 0x00005860
END_OF_LINE
----------------------------------------------
116: *pname = name;
	00019b63:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
117: if (ptimestr != (char **)0x0) {
	00019b66:CMP qword ptr [RBP + -0xa0],0x0
	00019b6e:JZ 0x00019b90
END_OF_LINE
----------------------------------------------
118: free(*ptimestr);
	00019b77:MOV RAX,qword ptr [RAX]
	00019b7a:MOV RDI,RAX
	00019b7d:CALL 0x00005860
END_OF_LINE
----------------------------------------------
119: *ptimestr = timestr;
	00019b8d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
121: if (pstamp != (timespec *)0x0) {
	00019b90:CMP qword ptr [RBP + -0xa8],0x0
	00019b98:JZ 0x00019bb6
END_OF_LINE
----------------------------------------------
122: pstamp->tv_sec = stamp.tv_sec;
	00019ba9:MOV qword ptr [RCX],RAX
END_OF_LINE
----------------------------------------------
123: pstamp->tv_nsec = stamp.tv_nsec;
	00019bac:MOV qword ptr [RCX + 0x8],RDX
END_OF_LINE
----------------------------------------------
127: free(name);
	000199b3:CALL 0x00005860
END_OF_LINE
----------------------------------------------
130: LAB_00019bb6:
	00019bb6:MOV RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
131: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00019bba:SUB RAX,qword ptr FS:[0x28]
	00019bc3:JZ 0x00019bca
END_OF_LINE
----------------------------------------------
132: return;
	00019bcf:RET
END_OF_LINE
----------------------------------------------
135: __stack_chk_fail();
	00019bc5:CALL 0x00005b00
END_OF_LINE



Function: parse_name
----------------------------------------------
13: s_local = s;
	00019be7:JMP 0x00019bee
END_OF_LINE
----------------------------------------------
14: while (ppuVar2 = __ctype_b_loc(), ((*ppuVar2)[(byte)*s_local] & 0x2000) != 0) {
	00019bee:CALL 0x000060a0
	00019bf3:MOV RDX,qword ptr [RAX]
	00019bf6:MOV RAX,qword ptr [RBP + -0x18]
	00019bfa:MOVZX EAX,byte ptr [RAX]
	00019bfd:MOVZX EAX,AL
	00019c00:ADD RAX,RAX
	00019c03:ADD RAX,RDX
	00019c06:MOVZX EAX,word ptr [RAX]
	00019c09:MOVZX EAX,AX
	00019c0c:AND EAX,0x2000
	00019c11:TEST EAX,EAX
	00019c13:JNZ 0x00019be9
END_OF_LINE
----------------------------------------------
15: s_local = s_local + 1;
	00019be9:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
17: if (*s_local == '\"') {
	00019c19:MOVZX EAX,byte ptr [RAX]
	00019c1c:CMP AL,0x22
	00019c1e:JNZ 0x00019c48
END_OF_LINE
----------------------------------------------
18: ret = parse_c_string(s_local,endp);
	00019c2e:CALL 0x0001941a
END_OF_LINE
----------------------------------------------
19: if (ret == (char *)0x0) {
	00019c37:CMP qword ptr [RBP + -0x10],0x0
	00019c3c:JNZ 0x00019cb9
END_OF_LINE
----------------------------------------------
20: return (char *)0x0;
	00019ce9:LEAVE
	00019cea:RET
END_OF_LINE
----------------------------------------------
24: t = s_local;
	00019c4c:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
25: while ((*t != '\0' && (ppuVar2 = __ctype_b_loc(), ((*ppuVar2)[(byte)*t] & 0x2000) == 0))) {
	00019c5b:MOVZX EAX,byte ptr [RAX]
	00019c5e:TEST AL,AL
	00019c60:JZ 0x00019c89
	00019c62:CALL 0x000060a0
	00019c67:MOV RDX,qword ptr [RAX]
	00019c6a:MOV RAX,qword ptr [RBP + -0x8]
	00019c6e:MOVZX EAX,byte ptr [RAX]
	00019c71:MOVZX EAX,AL
	00019c74:ADD RAX,RAX
	00019c77:ADD RAX,RDX
	00019c7a:MOVZX EAX,word ptr [RAX]
	00019c7d:MOVZX EAX,AX
	00019c80:AND EAX,0x2000
	00019c85:TEST EAX,EAX
	00019c87:JZ 0x00019c52
END_OF_LINE
----------------------------------------------
26: t = t + 1;
	00019c52:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
28: ret = xmemdup0(s_local,(long)t - (long)s_local);
	00019c8d:SUB RAX,qword ptr [RBP + -0x18]
	00019c91:MOV RDX,RAX
	00019c94:MOV RAX,qword ptr [RBP + -0x18]
	00019c98:MOV RSI,RDX
	00019c9b:MOV RDI,RAX
	00019c9e:CALL 0x0002cd3c
END_OF_LINE
----------------------------------------------
29: if (endp != (char **)0x0) {
	00019ca7:CMP qword ptr [RBP + -0x28],0x0
	00019cac:JZ 0x00019cb9
END_OF_LINE
----------------------------------------------
30: *endp = t;
	00019cb6:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
33: _Var1 = strip_leading_slashes(ret,strip_leading);
	00019cc5:CALL 0x0001964d
END_OF_LINE
----------------------------------------------
34: if (!_Var1) {
	00019ccf:JZ 0x00019ce5
END_OF_LINE
----------------------------------------------
35: free(ret);
	00019cd8:CALL 0x00005860
END_OF_LINE
----------------------------------------------
36: ret = (char *)0x0;
	00019cdd:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
38: return ret;
	00019cea:RET
END_OF_LINE



Function: Fseek
----------------------------------------------
10: iVar1 = fseek((FILE *)stream,offset,ptrname);
	00019d13:CALL 0x00005e90
END_OF_LINE
----------------------------------------------
11: if (iVar1 != 0) {
	00019d18:TEST EAX,EAX
	00019d1a:JZ 0x00019d30
END_OF_LINE
----------------------------------------------
13: pfatal("fseek");
	00019d2b:CALL 0x00018721
END_OF_LINE
----------------------------------------------
15: return;
	00019d32:RET
END_OF_LINE



Function: try_safe_open
----------------------------------------------
13: try_makedirs_errno = 2;
	00019d4f:MOV dword ptr [RBP + -0x10],0x2
END_OF_LINE
----------------------------------------------
14: while( true ) {
	00019d88:JNZ 0x00019d9f
END_OF_LINE
----------------------------------------------
16: iVar1 = safe_open(template,*__args | 0xc0,*(mode_t *)((long)__args + 4));
	00019d5a:MOV EDX,dword ptr [RAX + 0x4]
	00019d5d:MOV RAX,qword ptr [RBP + -0x8]
	00019d61:MOV EAX,dword ptr [RAX]
	00019d63:OR AL,0xc0
	00019d65:MOV ECX,EAX
	00019d67:MOV RAX,qword ptr [RBP + -0x18]
	00019d6b:MOV ESI,ECX
	00019d6d:MOV RDI,RAX
	00019d70:CALL 0x00015ba3
END_OF_LINE
----------------------------------------------
17: if (-1 < iVar1) {
	00019d78:CMP dword ptr [RBP + -0xc],0x0
	00019d7c:JNS 0x00019d9f
END_OF_LINE
----------------------------------------------
18: return iVar1;
	00019da3:RET
END_OF_LINE
----------------------------------------------
20: piVar2 = __errno_location();
	00019d7e:CALL 0x00005900
END_OF_LINE
----------------------------------------------
21: if (try_makedirs_errno != *piVar2) break;
	00019d83:MOV EAX,dword ptr [RAX]
	00019d85:CMP dword ptr [RBP + -0x10],EAX
	00019d88:JNZ 0x00019d9f
END_OF_LINE
----------------------------------------------
22: makedirs(template);
	00019d91:CALL 0x0001922f
END_OF_LINE
----------------------------------------------
23: try_makedirs_errno = 0;
	00019d96:MOV dword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
25: return iVar1;
	00019da3:RET
END_OF_LINE



Function: make_tempfile
----------------------------------------------
24: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00019dc5:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
25: args.flags = flags;
	00019de5:JZ 0x00019e92
END_OF_LINE
----------------------------------------------
26: args.mode = mode;
	00019de5:JZ 0x00019e92
END_OF_LINE
----------------------------------------------
27: if ((real_name == (char *)0x0) || (dry_run)) {
	00019de0:CMP qword ptr [RBP + -0x68],0x0
	00019de5:JZ 0x00019e92
	00019deb:LEA RAX,[0x3e310]
	00019df2:MOVZX EAX,byte ptr [RAX]
	00019df5:XOR EAX,0x1
	00019df8:TEST AL,AL
	00019dfa:JZ 0x00019e92
END_OF_LINE
----------------------------------------------
28: tmpdir = getenv("TMPDIR");
	00019e9c:CALL 0x00005880
END_OF_LINE
----------------------------------------------
29: if (tmpdir == (char *)0x0) {
	00019ea5:CMP qword ptr [RBP + -0x38],0x0
	00019eaa:JNZ 0x00019ebf
END_OF_LINE
----------------------------------------------
30: tmpdir = getenv("TMP");
	00019eb6:CALL 0x00005880
END_OF_LINE
----------------------------------------------
32: if (tmpdir == (char *)0x0) {
	00019ebf:CMP qword ptr [RBP + -0x38],0x0
	00019ec4:JNZ 0x00019ed9
END_OF_LINE
----------------------------------------------
33: tmpdir = getenv("TEMP");
	00019ed0:CALL 0x00005880
END_OF_LINE
----------------------------------------------
35: if (tmpdir == (char *)0x0) {
	00019ed9:CMP qword ptr [RBP + -0x38],0x0
	00019ede:JNZ 0x00019eeb
END_OF_LINE
----------------------------------------------
36: tmpdir = "/tmp";
	00019ee7:MOV qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
38: sVar3 = strlen(tmpdir);
	00019ef2:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
39: template = (char *)xmalloc(sVar3 + 10);
	00019ef7:ADD RAX,0xa
	00019efb:MOV RDI,RAX
	00019efe:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
40: sprintf(template,"%s/p%cXXXXXX",tmpdir,(ulong)(uint)(int)letter);
	00019f07:MOVSX ECX,byte ptr [RBP + -0x5c]
	00019f0b:MOV RDX,qword ptr [RBP + -0x38]
	00019f0f:MOV RAX,qword ptr [RBP + -0x40]
	00019f13:LEA RSI,[0x34074]
	00019f1a:MOV RDI,RAX
	00019f1d:MOV EAX,0x0
	00019f22:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
43: __s = dir_name(real_name);
	00019e07:CALL 0x0001df25
END_OF_LINE
----------------------------------------------
44: __s_00 = base_name(real_name);
	00019e17:CALL 0x0001df57
END_OF_LINE
----------------------------------------------
45: sVar3 = strlen(__s);
	00019e27:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
46: sVar4 = strlen(__s_00);
	00019e36:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
47: template = (char *)xmalloc(sVar4 + sVar3 + 10);
	00019e3b:ADD RAX,RBX
	00019e3e:ADD RAX,0xa
	00019e42:MOV RDI,RAX
	00019e45:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
48: sprintf(template,"%s/%s.%cXXXXXX",__s,__s_00,(ulong)(uint)(int)letter);
	00019e4e:MOVSX ESI,byte ptr [RBP + -0x5c]
	00019e52:MOV RCX,qword ptr [RBP + -0x28]
	00019e56:MOV RDX,qword ptr [RBP + -0x30]
	00019e5a:MOV RAX,qword ptr [RBP + -0x40]
	00019e5e:MOV R8D,ESI
	00019e61:LEA RSI,[0x34050]
	00019e68:MOV RDI,RAX
	00019e6b:MOV EAX,0x0
	00019e70:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
49: free(__s);
	00019e7c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
50: free(__s_00);
	00019e88:CALL 0x00005860
END_OF_LINE
----------------------------------------------
52: iVar2 = try_tempname(template,0,&args,try_safe_open);
	00019f27:LEA RDX,[RBP + -0x20]
	00019f2b:MOV RAX,qword ptr [RBP + -0x40]
	00019f2f:LEA RCX,[0x19d33]
	00019f36:MOV ESI,0x0
	00019f3b:MOV RDI,RAX
	00019f3e:CALL 0x0002b083
END_OF_LINE
----------------------------------------------
53: *name = template;
	00019f4e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
54: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00019f58:SUB RDX,qword ptr FS:[0x28]
	00019f61:JZ 0x00019f68
END_OF_LINE
----------------------------------------------
56: __stack_chk_fail();
	00019f63:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
58: return iVar2;
	00019f6d:RET
END_OF_LINE



Function: stat_file
----------------------------------------------
12: if (follow_symlinks) {
	00019f8e:JZ 0x00019f99
END_OF_LINE
----------------------------------------------
13: pcVar2 = safe_stat;
	00019f90:LEA RAX,[0x15b47]
END_OF_LINE
----------------------------------------------
16: pcVar2 = safe_lstat;
	00019f99:LEA RAX,[0x15b75]
END_OF_LINE
----------------------------------------------
18: iVar1 = (*pcVar2)(filename,st);
	00019fb6:CALL RCX
END_OF_LINE
----------------------------------------------
19: if (iVar1 == 0) {
	00019fb8:TEST EAX,EAX
	00019fba:JZ 0x00019fc5
END_OF_LINE
----------------------------------------------
20: iVar1 = 0;
	00019fc5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
23: piVar3 = __errno_location();
	00019fbc:CALL 0x00005900
END_OF_LINE
----------------------------------------------
24: iVar1 = *piVar3;
	00019fc1:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
26: return iVar1;
	00019fcb:RET
END_OF_LINE



Function: filename_is_safe
----------------------------------------------
9: name_local = name;
	00019fe1:JNZ 0x0001a054
END_OF_LINE
----------------------------------------------
10: if (*name == '/') {
	00019fdc:MOVZX EAX,byte ptr [RAX]
	00019fdf:CMP AL,0x2f
	00019fe1:JNZ 0x0001a054
END_OF_LINE
----------------------------------------------
11: _Var2 = false;
	00019fe3:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: while (*name_local != '\0') {
	0001a058:MOVZX EAX,byte ptr [RAX]
	0001a05b:TEST AL,AL
	0001a05d:JNZ 0x00019fea
END_OF_LINE
----------------------------------------------
15: pcVar1 = name_local;
	00019ff3:JNZ 0x0001a02c
END_OF_LINE
----------------------------------------------
16: if (((*name_local == '.') && (pcVar1 = name_local + 1, name_local[1] == '.')) &&
	00019fee:MOVZX EAX,byte ptr [RAX]
	00019ff1:CMP AL,0x2e
	00019ff3:JNZ 0x0001a02c
	00019ff5:ADD qword ptr [RBP + -0x8],0x1
	00019ffa:MOV RAX,qword ptr [RBP + -0x8]
	00019ffe:MOVZX EAX,byte ptr [RAX]
	0001a001:CMP AL,0x2e
	0001a003:JNZ 0x0001a02c
	0001a005:ADD qword ptr [RBP + -0x8],0x1
	0001a00a:MOV RAX,qword ptr [RBP + -0x8]
	0001a00e:MOVZX EAX,byte ptr [RAX]
	0001a011:TEST AL,AL
	0001a013:JZ 0x0001a020
	0001a015:MOV RAX,qword ptr [RBP + -0x8]
	0001a019:MOVZX EAX,byte ptr [RAX]
	0001a01c:CMP AL,0x2f
	0001a01e:JNZ 0x0001a02c
END_OF_LINE
----------------------------------------------
17: ((pcVar1 = name_local + 2, *pcVar1 == '\0' || (*pcVar1 == '/')))) {
	0001a005:ADD qword ptr [RBP + -0x8],0x1
	0001a00a:MOV RAX,qword ptr [RBP + -0x8]
	0001a00e:MOVZX EAX,byte ptr [RAX]
	0001a011:TEST AL,AL
	0001a013:JZ 0x0001a020
	0001a015:MOV RAX,qword ptr [RBP + -0x8]
	0001a019:MOVZX EAX,byte ptr [RAX]
	0001a01c:CMP AL,0x2f
END_OF_LINE
----------------------------------------------
18: return false;
	0001a065:RET
END_OF_LINE
----------------------------------------------
20: while ((name_local = pcVar1, *name_local != '\0' && (*name_local != '/'))) {
	0001a02c:MOV RAX,qword ptr [RBP + -0x8]
	0001a030:MOVZX EAX,byte ptr [RAX]
	0001a033:TEST AL,AL
	0001a035:JZ 0x0001a049
	0001a037:MOV RAX,qword ptr [RBP + -0x8]
	0001a03b:MOVZX EAX,byte ptr [RAX]
	0001a03e:CMP AL,0x2f
	0001a040:JNZ 0x0001a027
END_OF_LINE
----------------------------------------------
21: pcVar1 = name_local + 1;
	0001a027:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
23: for (; *name_local == '/'; name_local = name_local + 1) {
	0001a044:ADD qword ptr [RBP + -0x8],0x1
	0001a049:MOV RAX,qword ptr [RBP + -0x8]
	0001a04d:MOVZX EAX,byte ptr [RAX]
	0001a050:CMP AL,0x2f
	0001a052:JZ 0x0001a044
END_OF_LINE
----------------------------------------------
26: _Var2 = true;
	0001a05f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
28: return _Var2;
	0001a065:RET
END_OF_LINE



Function: cwd_is_root
----------------------------------------------
22: name_local = name;
	0001a076:MOV qword ptr [RBP + -0xe8],RDI
END_OF_LINE
----------------------------------------------
23: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001a07d:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
24: prefix_len = 0;
	0001a092:MOV dword ptr [RBP + -0xd4],0x0
END_OF_LINE
----------------------------------------------
25: local_d8 = 1;
	0001a0ab:MOV qword ptr [RBP + -0xd0],RDX
END_OF_LINE
----------------------------------------------
26: for (puVar4 = auStack_f8; puVar4 != auStack_f8; puVar4 = puVar4 + -0x1000) {
	0001a06f:SUB RSP,0xe8
	0001a076:MOV qword ptr [RBP + -0xe8],RDI
	0001a07d:MOV RAX,qword ptr FS:[0x28]
	0001a086:MOV qword ptr [RBP + -0x18],RAX
	0001a08a:XOR EAX,EAX
	0001a08c:MOV RAX,RSP
	0001a08f:MOV RBX,RAX
	0001a092:MOV dword ptr [RBP + -0xd4],0x0
	0001a09c:MOV EAX,dword ptr [RBP + -0xd4]
	0001a0a2:ADD EAX,0x2
	0001a0a5:MOV EDX,EAX
	0001a0a7:SUB RDX,0x1
	0001a0ab:MOV qword ptr [RBP + -0xd0],RDX
	0001a0b2:MOV EDX,EAX
	0001a0b4:MOV R10,RDX
	0001a0b7:MOV R11D,0x0
	0001a0bd:MOV EDX,EAX
	0001a0bf:MOV R8,RDX
	0001a0c2:MOV R9D,0x0
	0001a0c8:MOV EDX,EAX
	0001a0ca:MOV EAX,0x10
	0001a0cf:SUB RAX,0x1
	0001a0d3:ADD RAX,RDX
	0001a0d6:MOV ESI,0x10
	0001a0db:MOV EDX,0x0
	0001a0e0:DIV RSI
	0001a0e3:IMUL RAX,RAX,0x10
	0001a0e7:MOV RCX,RAX
	0001a0ea:AND RCX,-0x1000
	0001a0f1:MOV RDX,RSP
	0001a0f4:SUB RDX,RCX
	0001a0f7:CMP RSP,RDX
	0001a0fa:JZ 0x0001a10e
	0001a0fc:SUB RSP,0x1000
END_OF_LINE
----------------------------------------------
27: *(undefined8 *)(puVar4 + -8) = *(undefined8 *)(puVar4 + -8);
	0001a103:OR qword ptr [RSP + 0xff8],0x0
END_OF_LINE
----------------------------------------------
29: *(undefined8 *)(puVar4 + -8) = *(undefined8 *)(puVar4 + -8);
	0001a131:ADD RAX,RSP
	0001a134:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
30: __src = name_local;
	0001a134:OR qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
31: __n = (ulong)prefix_len;
	0001a146:MOV EDX,dword ptr [RBP + -0xd4]
END_OF_LINE
----------------------------------------------
32: root = puVar4 + -0x10;
	0001a117:SUB RSP,RDX
	0001a11a:MOV RDX,RAX
	0001a11d:AND EDX,0xfff
	0001a123:TEST RDX,RDX
	0001a126:JZ 0x0001a138
	0001a128:AND EAX,0xfff
	0001a12d:SUB RAX,0x8
	0001a131:ADD RAX,RSP
	0001a134:OR qword ptr [RAX],0x0
	0001a138:MOV RAX,RSP
	0001a13b:ADD RAX,0x0
	0001a13f:MOV qword ptr [RBP + -0xc8],RAX
	0001a146:MOV EDX,dword ptr [RBP + -0xd4]
	0001a14c:MOV RCX,qword ptr [RBP + -0xe8]
	0001a153:MOV RAX,qword ptr [RBP + -0xc8]
	0001a15a:MOV RSI,RCX
	0001a15d:MOV RDI,RAX
	0001a160:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
33: *(undefined8 *)(puVar4 + -0x18) = 0x1a165;
	0001a160:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
34: memcpy(puVar4 + -0x10,__src,__n);
	0001a117:SUB RSP,RDX
	0001a11a:MOV RDX,RAX
	0001a11d:AND EDX,0xfff
	0001a123:TEST RDX,RDX
	0001a126:JZ 0x0001a138
	0001a128:AND EAX,0xfff
	0001a12d:SUB RAX,0x8
	0001a131:ADD RAX,RSP
	0001a134:OR qword ptr [RAX],0x0
	0001a138:MOV RAX,RSP
	0001a13b:ADD RAX,0x0
	0001a13f:MOV qword ptr [RBP + -0xc8],RAX
	0001a146:MOV EDX,dword ptr [RBP + -0xd4]
	0001a14c:MOV RCX,qword ptr [RBP + -0xe8]
	0001a153:MOV RAX,qword ptr [RBP + -0xc8]
	0001a15a:MOV RSI,RCX
	0001a15d:MOV RDI,RAX
	0001a160:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
35: __file = root;
	0001a160:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
36: root[prefix_len] = 0x2f;
	0001a16c:MOV EAX,dword ptr [RBP + -0xd4]
	0001a172:MOV byte ptr [RDX + RAX*0x1],0x2f
END_OF_LINE
----------------------------------------------
37: root[prefix_len + 1] = 0;
	0001a17c:LEA EDX,[RAX + 0x1]
	0001a17f:MOV RAX,qword ptr [RBP + -0xc8]
	0001a186:MOV EDX,EDX
	0001a188:MOV byte ptr [RAX + RDX*0x1],0x0
END_OF_LINE
----------------------------------------------
38: *(undefined8 *)(puVar4 + -0x18) = 0x1a1a5;
	0001a1a0:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
39: iVar3 = stat(__file,(stat *)&st);
	0001a18c:LEA RDX,[RBP + -0xb0]
	0001a193:MOV RAX,qword ptr [RBP + -0xc8]
	0001a19a:MOV RSI,RDX
	0001a19d:MOV RDI,RAX
	0001a1a0:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
40: if (iVar3 == 0) {
	0001a1a5:TEST EAX,EAX
	0001a1a7:JZ 0x0001a1b0
END_OF_LINE
----------------------------------------------
41: root_dev = st.st_dev;
	0001a1b7:MOV qword ptr [RBP + -0xc0],RAX
END_OF_LINE
----------------------------------------------
42: root_ino = st.st_ino;
	0001a1c5:MOV qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
43: *(undefined8 *)(puVar4 + -0x18) = 0x1a1e5;
	0001a1e0:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
44: iVar3 = stat(".",(stat *)&st);
	0001a1cc:LEA RAX,[RBP + -0xb0]
	0001a1d3:MOV RSI,RAX
	0001a1d6:LEA RAX,[0x34081]
	0001a1dd:MOV RDI,RAX
	0001a1e0:CALL 0x00005d80
END_OF_LINE
----------------------------------------------
45: if (iVar3 == 0) {
	0001a1e5:TEST EAX,EAX
	0001a1e7:JZ 0x0001a1f0
END_OF_LINE
----------------------------------------------
46: if ((root_dev == st.st_dev) && (root_ino == st.st_ino)) {
	0001a1f7:CMP qword ptr [RBP + -0xc0],RAX
	0001a1fe:JNZ 0x0001a217
	0001a200:MOV RAX,qword ptr [RBP + -0xa8]
	0001a207:CMP qword ptr [RBP + -0xb8],RAX
	0001a20e:JNZ 0x0001a217
END_OF_LINE
----------------------------------------------
47: _Var2 = true;
	0001a210:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
50: _Var2 = false;
	0001a217:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
54: _Var2 = false;
	0001a1e9:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
58: _Var2 = false;
	0001a1a9:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
60: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001a226:SUB RDX,qword ptr FS:[0x28]
	0001a22f:JZ 0x0001a236
END_OF_LINE
----------------------------------------------
62: __stack_chk_fail();
	0001a231:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
64: return _Var2;
	0001a23b:RET
END_OF_LINE



Function: version
----------------------------------------------
7: printf("%s %s\n%s\n\n%s\n\n%s\n","GNU patch","2.7.6.22-dce4",
	0001a27f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
8: "Copyright (C) 2003, 2009-2012 Free Software Foundation, Inc.\nCopyright (C) 1988 Larry Wall"
	0001a27f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
9: ,
	0001a27f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
10: "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law."
	0001a27f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
11: ,"Written by Larry Wall and Paul Eggert");
	0001a27f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
12: return;
	0001a286:RET
END_OF_LINE



Function: bestmatch
----------------------------------------------
28: fmin = xoff - yoff;
	0001a2dc:SUB RAX,qword ptr [RBP + -0x88]
END_OF_LINE
----------------------------------------------
29: ymax = -1;
	0001a2f7:MOV qword ptr [RBP + -0x50],-0x1
END_OF_LINE
----------------------------------------------
30: __ptr = xmalloc((max * 2 + 3) * 8);
	0001a306:ADD RAX,RAX
	0001a309:ADD RAX,0x3
	0001a30d:SHL RAX,0x3
	0001a311:MOV RDI,RAX
	0001a314:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
31: lVar2 = (max - fmin) + 1;
	0001a328:SUB RAX,RDX
	0001a32b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
32: if (min == 0) {
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
END_OF_LINE
----------------------------------------------
33: fmid_plus_2_min = 0;
	0001a394:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
34: min_local = 0;
	0001a394:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
37: fmid_plus_2_min = fmin + min * 2;
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
38: min_local = min + yoff;
	0001a369:ADD qword ptr [RBP + -0x98],RAX
END_OF_LINE
----------------------------------------------
39: if (ylim < min_local) {
	0001a37e:JLE 0x0001a39c
END_OF_LINE
----------------------------------------------
40: c = max + 1;
	0001a387:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
41: goto LAB_0001a63b;
	0001a63b:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
44: yoff_local = yoff;
	0001a3a1:JNZ 0x0001a3c0
END_OF_LINE
----------------------------------------------
45: xoff_local = xoff;
	0001a3a1:JNZ 0x0001a3c0
END_OF_LINE
----------------------------------------------
46: if (py == (lin *)0x0) {
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
END_OF_LINE
----------------------------------------------
47: min_local = ylim;
	0001a3b1:JMP 0x0001a3c0
END_OF_LINE
----------------------------------------------
49: while (((xoff_local < xlim && (yoff_local < ylim)) &&
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
END_OF_LINE
----------------------------------------------
50: (_Var1 = context_matches_file(xoff_local,yoff_local), _Var1))) {
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
END_OF_LINE
----------------------------------------------
51: xoff_local = xoff_local + 1;
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
52: yoff_local = yoff_local + 1;
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
END_OF_LINE
----------------------------------------------
54: if (((xoff_local == xlim) && (min_local <= yoff_local)) &&
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
END_OF_LINE
----------------------------------------------
55: (fmid_plus_2_min <= yoff_local + xoff_local)) {
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
END_OF_LINE
----------------------------------------------
56: ymax = yoff_local;
	0001a429:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
57: c = 0;
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
60: *(lin *)((long)__ptr + fmin * 8 + lVar2 * 8) = xoff_local;
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
61: fmax = fmin;
	0001a45c:JMP 0x0001a60f
END_OF_LINE
----------------------------------------------
62: for (c = 1; c <= max; c = c + 1) {
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
	0001a507:MOV RAX,qword ptr [RBP + -0x40]
	0001a50b:ADD RAX,0x1
	0001a50f:LEA RDX,[RAX*0x8]
	0001a517:MOV RAX,qword ptr [RBP + -0x8]
	0001a51b:ADD RAX,RDX
	0001a51e:MOV RAX,qword ptr [RAX]
	0001a521:MOV qword ptr [RBP + -0x38],RAX
	0001a525:JMP 0x0001a545
	0001a527:MOV RAX,qword ptr [RBP + -0x40]
	0001a52b:SHL RAX,0x3
	0001a52f:LEA RDX,[RAX + -0x8]
	0001a533:MOV RAX,qword ptr [RBP + -0x8]
	0001a537:ADD RAX,RDX
	0001a53a:MOV RAX,qword ptr [RAX]
	0001a53d:ADD RAX,0x1
	0001a541:MOV qword ptr [RBP + -0x38],RAX
	0001a545:MOV RAX,qword ptr [RBP + -0x38]
	0001a549:SUB RAX,qword ptr [RBP + -0x40]
	0001a54d:MOV qword ptr [RBP + -0x30],RAX
	0001a551:JMP 0x0001a55d
	0001a553:ADD qword ptr [RBP + -0x38],0x1
	0001a558:ADD qword ptr [RBP + -0x30],0x1
	0001a55d:MOV RAX,qword ptr [RBP + -0x38]
	0001a561:CMP RAX,qword ptr [RBP + -0x80]
	0001a565:JGE 0x0001a58b
	0001a567:MOV RAX,qword ptr [RBP + -0x30]
	0001a56b:CMP RAX,qword ptr [RBP + -0x90]
	0001a572:JGE 0x0001a58b
	0001a574:MOV RDX,qword ptr [RBP + -0x30]
	0001a578:MOV RAX,qword ptr [RBP + -0x38]
	0001a57c:MOV RSI,RDX
	0001a57f:MOV RDI,RAX
	0001a582:CALL 0x0001ce2a
	0001a587:TEST AL,AL
	0001a589:JNZ 0x0001a553
	0001a58b:MOV RAX,qword ptr [RBP + -0x40]
	0001a58f:LEA RDX,[RAX*0x8]
	0001a597:MOV RAX,qword ptr [RBP + -0x8]
	0001a59b:ADD RDX,RAX
	0001a59e:MOV RAX,qword ptr [RBP + -0x38]
	0001a5a2:MOV qword ptr [RDX],RAX
	0001a5a5:MOV RAX,qword ptr [RBP + -0x38]
	0001a5a9:CMP RAX,qword ptr [RBP + -0x80]
	0001a5ad:JNZ 0x0001a5f0
	0001a5af:MOV RAX,qword ptr [RBP + -0x30]
	0001a5b3:CMP RAX,qword ptr [RBP + -0x98]
	0001a5ba:JL 0x0001a5f0
	0001a5bc:MOV RDX,qword ptr [RBP + -0x38]
	0001a5c0:MOV RAX,qword ptr [RBP + -0x30]
	0001a5c4:ADD RAX,RDX
	0001a5c7:SUB RAX,qword ptr [RBP + -0x48]
	0001a5cb:CMP qword ptr [RBP + -0x58],RAX
	0001a5cf:JG 0x0001a5f0
	0001a5d1:MOV RAX,qword ptr [RBP + -0x50]
	0001a5d5:CMP RAX,qword ptr [RBP + -0x30]
	0001a5d9:JGE 0x0001a5e3
	0001a5db:MOV RAX,qword ptr [RBP + -0x30]
	0001a5df:MOV qword ptr [RBP + -0x50],RAX
	0001a5e3:MOV RAX,qword ptr [RBP + -0x30]
	0001a5e7:CMP RAX,qword ptr [RBP + -0x90]
	0001a5ee:JZ 0x0001a622
	0001a5f0:SUB qword ptr [RBP + -0x40],0x2
	0001a5f5:MOV RAX,qword ptr [RBP + -0x40]
	0001a5f9:CMP RAX,qword ptr [RBP + -0x68]
	0001a5fd:JGE 0x0001a4d2
	0001a603:CMP qword ptr [RBP + -0x50],-0x1
	0001a608:JNZ 0x0001a625
	0001a60a:ADD qword ptr [RBP + -0x48],0x1
	0001a60f:MOV RAX,qword ptr [RBP + -0x48]
	0001a613:CMP RAX,qword ptr [RBP + -0xa0]
	0001a61a:JLE 0x0001a461
END_OF_LINE
----------------------------------------------
63: if (xoff - ylim < fmin) {
	0001a2be:SUB RAX,qword ptr [RBP + -0x90]
	0001a2c5:MOV qword ptr [RBP + -0x28],RAX
	0001a2c9:MOV RAX,qword ptr [RBP + -0x80]
	0001a2cd:SUB RAX,qword ptr [RBP + -0x88]
	0001a2d4:MOV qword ptr [RBP + -0x20],RAX
	0001a2d8:MOV RAX,qword ptr [RBP + -0x78]
	0001a2dc:SUB RAX,qword ptr [RBP + -0x88]
	0001a2e3:MOV qword ptr [RBP + -0x18],RAX
	0001a2e7:MOV RAX,qword ptr [RBP + -0x18]
	0001a2eb:MOV qword ptr [RBP + -0x68],RAX
	0001a2ef:MOV RAX,qword ptr [RBP + -0x18]
	0001a2f3:MOV qword ptr [RBP + -0x60],RAX
	0001a2f7:MOV qword ptr [RBP + -0x50],-0x1
	0001a2ff:MOV RAX,qword ptr [RBP + -0xa0]
	0001a306:ADD RAX,RAX
	0001a309:ADD RAX,0x3
	0001a30d:SHL RAX,0x3
	0001a311:MOV RDI,RAX
	0001a314:CALL 0x0002bd43
	0001a319:MOV qword ptr [RBP + -0x10],RAX
	0001a31d:MOV RAX,qword ptr [RBP + -0xa0]
	0001a324:MOV RDX,qword ptr [RBP + -0x18]
	0001a328:SUB RAX,RDX
	0001a32b:ADD RAX,0x1
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
END_OF_LINE
----------------------------------------------
64: fmin = fmin + -1;
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
65: *(undefined8 *)((long)__ptr + fmin * 8 + -8 + lVar2 * 8) = 0xffffffffffffffff;
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
END_OF_LINE
----------------------------------------------
68: fmin = fmin + 1;
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
70: if (fmax < xlim - yoff) {
	0001a2cd:SUB RAX,qword ptr [RBP + -0x88]
	0001a2d4:MOV qword ptr [RBP + -0x20],RAX
	0001a2d8:MOV RAX,qword ptr [RBP + -0x78]
	0001a2dc:SUB RAX,qword ptr [RBP + -0x88]
	0001a2e3:MOV qword ptr [RBP + -0x18],RAX
	0001a2e7:MOV RAX,qword ptr [RBP + -0x18]
	0001a2eb:MOV qword ptr [RBP + -0x68],RAX
	0001a2ef:MOV RAX,qword ptr [RBP + -0x18]
	0001a2f3:MOV qword ptr [RBP + -0x60],RAX
	0001a2f7:MOV qword ptr [RBP + -0x50],-0x1
	0001a2ff:MOV RAX,qword ptr [RBP + -0xa0]
	0001a306:ADD RAX,RAX
	0001a309:ADD RAX,0x3
	0001a30d:SHL RAX,0x3
	0001a311:MOV RDI,RAX
	0001a314:CALL 0x0002bd43
	0001a319:MOV qword ptr [RBP + -0x10],RAX
	0001a31d:MOV RAX,qword ptr [RBP + -0xa0]
	0001a324:MOV RDX,qword ptr [RBP + -0x18]
	0001a328:SUB RAX,RDX
	0001a32b:ADD RAX,0x1
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
END_OF_LINE
----------------------------------------------
71: *(undefined8 *)((long)__ptr + (fmax + 2) * 8 + lVar2 * 8) = 0xffffffffffffffff;
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
END_OF_LINE
----------------------------------------------
72: fmax = fmax + 1;
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
END_OF_LINE
----------------------------------------------
75: fmax = fmax + -1;
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
77: for (d = fmax; fmin <= d; d = d + -2) {
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
	0001a507:MOV RAX,qword ptr [RBP + -0x40]
	0001a50b:ADD RAX,0x1
	0001a50f:LEA RDX,[RAX*0x8]
	0001a517:MOV RAX,qword ptr [RBP + -0x8]
	0001a51b:ADD RAX,RDX
	0001a51e:MOV RAX,qword ptr [RAX]
	0001a521:MOV qword ptr [RBP + -0x38],RAX
	0001a525:JMP 0x0001a545
	0001a527:MOV RAX,qword ptr [RBP + -0x40]
	0001a52b:SHL RAX,0x3
	0001a52f:LEA RDX,[RAX + -0x8]
	0001a533:MOV RAX,qword ptr [RBP + -0x8]
	0001a537:ADD RAX,RDX
	0001a53a:MOV RAX,qword ptr [RAX]
	0001a53d:ADD RAX,0x1
	0001a541:MOV qword ptr [RBP + -0x38],RAX
	0001a545:MOV RAX,qword ptr [RBP + -0x38]
	0001a549:SUB RAX,qword ptr [RBP + -0x40]
	0001a54d:MOV qword ptr [RBP + -0x30],RAX
	0001a551:JMP 0x0001a55d
	0001a553:ADD qword ptr [RBP + -0x38],0x1
	0001a558:ADD qword ptr [RBP + -0x30],0x1
	0001a55d:MOV RAX,qword ptr [RBP + -0x38]
	0001a561:CMP RAX,qword ptr [RBP + -0x80]
	0001a565:JGE 0x0001a58b
	0001a567:MOV RAX,qword ptr [RBP + -0x30]
	0001a56b:CMP RAX,qword ptr [RBP + -0x90]
	0001a572:JGE 0x0001a58b
	0001a574:MOV RDX,qword ptr [RBP + -0x30]
	0001a578:MOV RAX,qword ptr [RBP + -0x38]
	0001a57c:MOV RSI,RDX
	0001a57f:MOV RDI,RAX
	0001a582:CALL 0x0001ce2a
	0001a587:TEST AL,AL
	0001a589:JNZ 0x0001a553
	0001a58b:MOV RAX,qword ptr [RBP + -0x40]
	0001a58f:LEA RDX,[RAX*0x8]
	0001a597:MOV RAX,qword ptr [RBP + -0x8]
	0001a59b:ADD RDX,RAX
	0001a59e:MOV RAX,qword ptr [RBP + -0x38]
	0001a5a2:MOV qword ptr [RDX],RAX
	0001a5a5:MOV RAX,qword ptr [RBP + -0x38]
	0001a5a9:CMP RAX,qword ptr [RBP + -0x80]
	0001a5ad:JNZ 0x0001a5f0
	0001a5af:MOV RAX,qword ptr [RBP + -0x30]
	0001a5b3:CMP RAX,qword ptr [RBP + -0x98]
	0001a5ba:JL 0x0001a5f0
	0001a5bc:MOV RDX,qword ptr [RBP + -0x38]
	0001a5c0:MOV RAX,qword ptr [RBP + -0x30]
	0001a5c4:ADD RAX,RDX
	0001a5c7:SUB RAX,qword ptr [RBP + -0x48]
	0001a5cb:CMP qword ptr [RBP + -0x58],RAX
	0001a5cf:JG 0x0001a5f0
	0001a5d1:MOV RAX,qword ptr [RBP + -0x50]
	0001a5d5:CMP RAX,qword ptr [RBP + -0x30]
	0001a5d9:JGE 0x0001a5e3
	0001a5db:MOV RAX,qword ptr [RBP + -0x30]
	0001a5df:MOV qword ptr [RBP + -0x50],RAX
	0001a5e3:MOV RAX,qword ptr [RBP + -0x30]
	0001a5e7:CMP RAX,qword ptr [RBP + -0x90]
	0001a5ee:JZ 0x0001a622
	0001a5f0:SUB qword ptr [RBP + -0x40],0x2
	0001a5f5:MOV RAX,qword ptr [RBP + -0x40]
	0001a5f9:CMP RAX,qword ptr [RBP + -0x68]
	0001a5fd:JGE 0x0001a4d2
END_OF_LINE
----------------------------------------------
78: if (*(long *)((long)__ptr + d * 8 + -8 + lVar2 * 8) <
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
END_OF_LINE
----------------------------------------------
79: *(long *)((long)__ptr + (d + 1) * 8 + lVar2 * 8)) {
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
80: x = *(lin *)((long)__ptr + (d + 1) * 8 + lVar2 * 8);
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
	0001a507:MOV RAX,qword ptr [RBP + -0x40]
	0001a50b:ADD RAX,0x1
	0001a50f:LEA RDX,[RAX*0x8]
	0001a517:MOV RAX,qword ptr [RBP + -0x8]
	0001a51b:ADD RAX,RDX
	0001a51e:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
83: x = *(long *)((long)__ptr + d * 8 + -8 + lVar2 * 8) + 1;
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
	0001a507:MOV RAX,qword ptr [RBP + -0x40]
	0001a50b:ADD RAX,0x1
	0001a50f:LEA RDX,[RAX*0x8]
	0001a517:MOV RAX,qword ptr [RBP + -0x8]
	0001a51b:ADD RAX,RDX
	0001a51e:MOV RAX,qword ptr [RAX]
	0001a521:MOV qword ptr [RBP + -0x38],RAX
	0001a525:JMP 0x0001a545
	0001a527:MOV RAX,qword ptr [RBP + -0x40]
	0001a52b:SHL RAX,0x3
	0001a52f:LEA RDX,[RAX + -0x8]
	0001a533:MOV RAX,qword ptr [RBP + -0x8]
	0001a537:ADD RAX,RDX
	0001a53a:MOV RAX,qword ptr [RAX]
	0001a53d:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
85: y = x - d;
	0001a549:SUB RAX,qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
86: while (((x < xlim && (y < ylim)) && (_Var1 = context_matches_file(x,y), _Var1))) {
	0001a565:JGE 0x0001a58b
	0001a567:MOV RAX,qword ptr [RBP + -0x30]
	0001a56b:CMP RAX,qword ptr [RBP + -0x90]
	0001a572:JGE 0x0001a58b
	0001a574:MOV RDX,qword ptr [RBP + -0x30]
	0001a578:MOV RAX,qword ptr [RBP + -0x38]
	0001a57c:MOV RSI,RDX
	0001a57f:MOV RDI,RAX
	0001a582:CALL 0x0001ce2a
	0001a587:TEST AL,AL
	0001a589:JNZ 0x0001a553
END_OF_LINE
----------------------------------------------
87: x = x + 1;
	0001a553:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
88: y = y + 1;
	0001a558:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
90: *(lin *)((long)__ptr + d * 8 + lVar2 * 8) = x;
	0001a32f:LEA RDX,[RAX*0x8]
	0001a337:MOV RAX,qword ptr [RBP + -0x10]
	0001a33b:ADD RAX,RDX
	0001a33e:MOV qword ptr [RBP + -0x8],RAX
	0001a342:CMP qword ptr [RBP + -0x98],0x0
	0001a34a:JZ 0x0001a394
	0001a34c:MOV RAX,qword ptr [RBP + -0x98]
	0001a353:LEA RDX,[RAX + RAX*0x1]
	0001a357:MOV RAX,qword ptr [RBP + -0x18]
	0001a35b:ADD RAX,RDX
	0001a35e:MOV qword ptr [RBP + -0x58],RAX
	0001a362:MOV RAX,qword ptr [RBP + -0x88]
	0001a369:ADD qword ptr [RBP + -0x98],RAX
	0001a370:MOV RAX,qword ptr [RBP + -0x98]
	0001a377:CMP RAX,qword ptr [RBP + -0x90]
	0001a37e:JLE 0x0001a39c
	0001a380:MOV RAX,qword ptr [RBP + -0xa0]
	0001a387:ADD RAX,0x1
	0001a38b:MOV qword ptr [RBP + -0x48],RAX
	0001a38f:JMP 0x0001a63b
	0001a394:MOV qword ptr [RBP + -0x58],0x0
	0001a39c:CMP qword ptr [RBP + 0x10],0x0
	0001a3a1:JNZ 0x0001a3c0
	0001a3a3:MOV RAX,qword ptr [RBP + -0x90]
	0001a3aa:MOV qword ptr [RBP + -0x98],RAX
	0001a3b1:JMP 0x0001a3c0
	0001a3b3:ADD qword ptr [RBP + -0x78],0x1
	0001a3b8:ADD qword ptr [RBP + -0x88],0x1
	0001a3c0:MOV RAX,qword ptr [RBP + -0x78]
	0001a3c4:CMP RAX,qword ptr [RBP + -0x80]
	0001a3c8:JGE 0x0001a3f4
	0001a3ca:MOV RAX,qword ptr [RBP + -0x88]
	0001a3d1:CMP RAX,qword ptr [RBP + -0x90]
	0001a3d8:JGE 0x0001a3f4
	0001a3da:MOV RDX,qword ptr [RBP + -0x88]
	0001a3e1:MOV RAX,qword ptr [RBP + -0x78]
	0001a3e5:MOV RSI,RDX
	0001a3e8:MOV RDI,RAX
	0001a3eb:CALL 0x0001ce2a
	0001a3f0:TEST AL,AL
	0001a3f2:JNZ 0x0001a3b3
	0001a3f4:MOV RAX,qword ptr [RBP + -0x78]
	0001a3f8:CMP RAX,qword ptr [RBP + -0x80]
	0001a3fc:JNZ 0x0001a43a
	0001a3fe:MOV RAX,qword ptr [RBP + -0x88]
	0001a405:CMP RAX,qword ptr [RBP + -0x98]
	0001a40c:JL 0x0001a43a
	0001a40e:MOV RDX,qword ptr [RBP + -0x78]
	0001a412:MOV RAX,qword ptr [RBP + -0x88]
	0001a419:ADD RAX,RDX
	0001a41c:CMP qword ptr [RBP + -0x58],RAX
	0001a420:JG 0x0001a43a
	0001a422:MOV RAX,qword ptr [RBP + -0x88]
	0001a429:MOV qword ptr [RBP + -0x50],RAX
	0001a42d:MOV qword ptr [RBP + -0x48],0x0
	0001a435:JMP 0x0001a626
	0001a43a:MOV RAX,qword ptr [RBP + -0x18]
	0001a43e:LEA RDX,[RAX*0x8]
	0001a446:MOV RAX,qword ptr [RBP + -0x8]
	0001a44a:ADD RDX,RAX
	0001a44d:MOV RAX,qword ptr [RBP + -0x78]
	0001a451:MOV qword ptr [RDX],RAX
	0001a454:MOV qword ptr [RBP + -0x48],0x1
	0001a45c:JMP 0x0001a60f
	0001a461:MOV RAX,qword ptr [RBP + -0x68]
	0001a465:CMP RAX,qword ptr [RBP + -0x28]
	0001a469:JLE 0x0001a48c
	0001a46b:SUB qword ptr [RBP + -0x68],0x1
	0001a470:MOV RAX,qword ptr [RBP + -0x68]
	0001a474:SHL RAX,0x3
	0001a478:LEA RDX,[RAX + -0x8]
	0001a47c:MOV RAX,qword ptr [RBP + -0x8]
	0001a480:ADD RAX,RDX
	0001a483:MOV qword ptr [RAX],-0x1
	0001a48a:JMP 0x0001a491
	0001a48c:ADD qword ptr [RBP + -0x68],0x1
	0001a491:MOV RAX,qword ptr [RBP + -0x60]
	0001a495:CMP RAX,qword ptr [RBP + -0x20]
	0001a499:JGE 0x0001a4c0
	0001a49b:ADD qword ptr [RBP + -0x60],0x1
	0001a4a0:MOV RAX,qword ptr [RBP + -0x60]
	0001a4a4:ADD RAX,0x1
	0001a4a8:LEA RDX,[RAX*0x8]
	0001a4b0:MOV RAX,qword ptr [RBP + -0x8]
	0001a4b4:ADD RAX,RDX
	0001a4b7:MOV qword ptr [RAX],-0x1
	0001a4be:JMP 0x0001a4c5
	0001a4c0:SUB qword ptr [RBP + -0x60],0x1
	0001a4c5:MOV RAX,qword ptr [RBP + -0x60]
	0001a4c9:MOV qword ptr [RBP + -0x40],RAX
	0001a4cd:JMP 0x0001a5f5
	0001a4d2:MOV RAX,qword ptr [RBP + -0x40]
	0001a4d6:SHL RAX,0x3
	0001a4da:LEA RDX,[RAX + -0x8]
	0001a4de:MOV RAX,qword ptr [RBP + -0x8]
	0001a4e2:ADD RAX,RDX
	0001a4e5:MOV RDX,qword ptr [RAX]
	0001a4e8:MOV RAX,qword ptr [RBP + -0x40]
	0001a4ec:ADD RAX,0x1
	0001a4f0:LEA RCX,[RAX*0x8]
	0001a4f8:MOV RAX,qword ptr [RBP + -0x8]
	0001a4fc:ADD RAX,RCX
	0001a4ff:MOV RAX,qword ptr [RAX]
	0001a502:CMP RDX,RAX
	0001a505:JGE 0x0001a527
	0001a507:MOV RAX,qword ptr [RBP + -0x40]
	0001a50b:ADD RAX,0x1
	0001a50f:LEA RDX,[RAX*0x8]
	0001a517:MOV RAX,qword ptr [RBP + -0x8]
	0001a51b:ADD RAX,RDX
	0001a51e:MOV RAX,qword ptr [RAX]
	0001a521:MOV qword ptr [RBP + -0x38],RAX
	0001a525:JMP 0x0001a545
	0001a527:MOV RAX,qword ptr [RBP + -0x40]
	0001a52b:SHL RAX,0x3
	0001a52f:LEA RDX,[RAX + -0x8]
	0001a533:MOV RAX,qword ptr [RBP + -0x8]
	0001a537:ADD RAX,RDX
	0001a53a:MOV RAX,qword ptr [RAX]
	0001a53d:ADD RAX,0x1
	0001a541:MOV qword ptr [RBP + -0x38],RAX
	0001a545:MOV RAX,qword ptr [RBP + -0x38]
	0001a549:SUB RAX,qword ptr [RBP + -0x40]
	0001a54d:MOV qword ptr [RBP + -0x30],RAX
	0001a551:JMP 0x0001a55d
	0001a553:ADD qword ptr [RBP + -0x38],0x1
	0001a558:ADD qword ptr [RBP + -0x30],0x1
	0001a55d:MOV RAX,qword ptr [RBP + -0x38]
	0001a561:CMP RAX,qword ptr [RBP + -0x80]
	0001a565:JGE 0x0001a58b
	0001a567:MOV RAX,qword ptr [RBP + -0x30]
	0001a56b:CMP RAX,qword ptr [RBP + -0x90]
	0001a572:JGE 0x0001a58b
	0001a574:MOV RDX,qword ptr [RBP + -0x30]
	0001a578:MOV RAX,qword ptr [RBP + -0x38]
	0001a57c:MOV RSI,RDX
	0001a57f:MOV RDI,RAX
	0001a582:CALL 0x0001ce2a
	0001a587:TEST AL,AL
	0001a589:JNZ 0x0001a553
	0001a58b:MOV RAX,qword ptr [RBP + -0x40]
	0001a58f:LEA RDX,[RAX*0x8]
	0001a597:MOV RAX,qword ptr [RBP + -0x8]
	0001a59b:ADD RDX,RAX
	0001a59e:MOV RAX,qword ptr [RBP + -0x38]
	0001a5a2:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
91: if (((x == xlim) && (min_local <= y)) && (fmid_plus_2_min <= (y + x) - c)) {
	0001a5a9:CMP RAX,qword ptr [RBP + -0x80]
	0001a5ad:JNZ 0x0001a5f0
	0001a5af:MOV RAX,qword ptr [RBP + -0x30]
	0001a5b3:CMP RAX,qword ptr [RBP + -0x98]
	0001a5ba:JL 0x0001a5f0
	0001a5bc:MOV RDX,qword ptr [RBP + -0x38]
	0001a5c0:MOV RAX,qword ptr [RBP + -0x30]
	0001a5c4:ADD RAX,RDX
	0001a5c7:SUB RAX,qword ptr [RBP + -0x48]
	0001a5cb:CMP qword ptr [RBP + -0x58],RAX
	0001a5cf:JG 0x0001a5f0
END_OF_LINE
----------------------------------------------
92: if (ymax < y) {
	0001a5d9:JGE 0x0001a5e3
END_OF_LINE
----------------------------------------------
93: ymax = y;
	0001a5df:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
95: if (y == ylim) goto LAB_0001a626;
	0001a5e7:CMP RAX,qword ptr [RBP + -0x90]
	0001a5ee:JZ 0x0001a622
	0001a5f0:SUB qword ptr [RBP + -0x40],0x2
	0001a5f5:MOV RAX,qword ptr [RBP + -0x40]
	0001a5f9:CMP RAX,qword ptr [RBP + -0x68]
	0001a5fd:JGE 0x0001a4d2
	0001a603:CMP qword ptr [RBP + -0x50],-0x1
	0001a608:JNZ 0x0001a625
	0001a60a:ADD qword ptr [RBP + -0x48],0x1
	0001a60f:MOV RAX,qword ptr [RBP + -0x48]
	0001a613:CMP RAX,qword ptr [RBP + -0xa0]
	0001a61a:JLE 0x0001a461
	0001a620:JMP 0x0001a626
	0001a622:NOP
	0001a623:JMP 0x0001a626
	0001a625:NOP
	0001a626:CMP qword ptr [RBP + 0x10],0x0
END_OF_LINE
----------------------------------------------
98: if (ymax != -1) break;
	0001a603:CMP qword ptr [RBP + -0x50],-0x1
	0001a608:JNZ 0x0001a625
END_OF_LINE
----------------------------------------------
101: LAB_0001a626:
	0001a626:CMP qword ptr [RBP + 0x10],0x0
END_OF_LINE
----------------------------------------------
102: if (py != (lin *)0x0) {
	0001a626:CMP qword ptr [RBP + 0x10],0x0
	0001a62b:JZ 0x0001a63a
END_OF_LINE
----------------------------------------------
103: *py = ymax;
	0001a635:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
105: LAB_0001a63b:
	0001a63b:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
106: free(__ptr);
	0001a642:CALL 0x00005860
END_OF_LINE
----------------------------------------------
107: return c;
	0001a647:MOV RAX,qword ptr [RBP + -0x48]
	0001a64b:LEAVE
	0001a64c:RET
END_OF_LINE



Function: diag
----------------------------------------------
69: plVar1 = ctxt->fdiag;
	0001a68c:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
70: plVar2 = ctxt->bdiag;
	0001a69b:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
71: lVar5 = xoff - yoff;
	0001a6d7:SUB RAX,qword ptr [RBP + -0x168]
END_OF_LINE
----------------------------------------------
72: lVar6 = xlim - ylim;
	0001a6e9:SUB RAX,qword ptr [RBP + -0x170]
END_OF_LINE
----------------------------------------------
73: bVar12 = ((int)lVar5 - (int)lVar6 & 1U) != 0;
	0001a724:SUB RAX,qword ptr [RBP + -0x78]
	0001a728:AND EAX,0x1
	0001a72b:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
74: plVar1[lVar5] = xoff;
	0001a74a:ADD RDX,RAX
	0001a74d:MOV RAX,qword ptr [RBP + -0x158]
	0001a754:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
75: plVar2[lVar6] = xlim;
	0001a76a:ADD RDX,RAX
	0001a76d:MOV RAX,qword ptr [RBP + -0x160]
	0001a774:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
76: c = 1;
	0001a777:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
77: fmin = lVar5;
	0001a777:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
78: fmax = lVar5;
	0001a777:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
79: bmin = lVar6;
	0001a777:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
80: bmax = lVar6;
	0001a777:MOV qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
82: bVar3 = false;
	0001a782:MOV byte ptr [RBP + -0x14b],0x0
END_OF_LINE
----------------------------------------------
83: if (xoff - ylim < fmin) {
	0001a6ad:SUB RAX,qword ptr [RBP + -0x170]
	0001a6b4:MOV qword ptr [RBP + -0x90],RAX
	0001a6bb:MOV RAX,qword ptr [RBP + -0x160]
	0001a6c2:SUB RAX,qword ptr [RBP + -0x168]
	0001a6c9:MOV qword ptr [RBP + -0x88],RAX
	0001a6d0:MOV RAX,qword ptr [RBP + -0x158]
	0001a6d7:SUB RAX,qword ptr [RBP + -0x168]
	0001a6de:MOV qword ptr [RBP + -0x80],RAX
	0001a6e2:MOV RAX,qword ptr [RBP + -0x160]
	0001a6e9:SUB RAX,qword ptr [RBP + -0x170]
	0001a6f0:MOV qword ptr [RBP + -0x78],RAX
	0001a6f4:MOV RAX,qword ptr [RBP + -0x80]
	0001a6f8:MOV qword ptr [RBP + -0x140],RAX
	0001a6ff:MOV RAX,qword ptr [RBP + -0x80]
	0001a703:MOV qword ptr [RBP + -0x138],RAX
	0001a70a:MOV RAX,qword ptr [RBP + -0x78]
	0001a70e:MOV qword ptr [RBP + -0x130],RAX
	0001a715:MOV RAX,qword ptr [RBP + -0x78]
	0001a719:MOV qword ptr [RBP + -0x128],RAX
	0001a720:MOV RAX,qword ptr [RBP + -0x80]
	0001a724:SUB RAX,qword ptr [RBP + -0x78]
	0001a728:AND EAX,0x1
	0001a72b:TEST RAX,RAX
	0001a72e:SETNZ AL
	0001a731:MOV byte ptr [RBP + -0x14a],AL
	0001a737:MOV RAX,qword ptr [RBP + -0x80]
	0001a73b:LEA RDX,[RAX*0x8]
	0001a743:MOV RAX,qword ptr [RBP + -0xa0]
	0001a74a:ADD RDX,RAX
	0001a74d:MOV RAX,qword ptr [RBP + -0x158]
	0001a754:MOV qword ptr [RDX],RAX
	0001a757:MOV RAX,qword ptr [RBP + -0x78]
	0001a75b:LEA RDX,[RAX*0x8]
	0001a763:MOV RAX,qword ptr [RBP + -0x98]
	0001a76a:ADD RDX,RAX
	0001a76d:MOV RAX,qword ptr [RBP + -0x160]
	0001a774:MOV qword ptr [RDX],RAX
	0001a777:MOV qword ptr [RBP + -0x120],0x1
	0001a782:MOV byte ptr [RBP + -0x14b],0x0
	0001a789:MOV RAX,qword ptr [RBP + -0x140]
	0001a790:CMP RAX,qword ptr [RBP + -0x90]
	0001a797:JLE 0x0001a7c3
END_OF_LINE
----------------------------------------------
84: plVar1[fmin + -2] = -1;
	0001a7b7:ADD RAX,RDX
	0001a7ba:MOV qword ptr [RAX],-0x1
END_OF_LINE
----------------------------------------------
85: fmin = fmin + -1;
	0001a799:SUB qword ptr [RBP + -0x140],0x1
	0001a7a1:MOV RAX,qword ptr [RBP + -0x140]
	0001a7a8:SHL RAX,0x3
	0001a7ac:LEA RDX,[RAX + -0x8]
	0001a7b0:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7b7:ADD RAX,RDX
	0001a7ba:MOV qword ptr [RAX],-0x1
	0001a7c1:JMP 0x0001a7cb
END_OF_LINE
----------------------------------------------
88: fmin = fmin + 1;
	0001a7c3:ADD qword ptr [RBP + -0x140],0x1
END_OF_LINE
----------------------------------------------
90: if (fmax < xlim - yoff) {
	0001a6c2:SUB RAX,qword ptr [RBP + -0x168]
	0001a6c9:MOV qword ptr [RBP + -0x88],RAX
	0001a6d0:MOV RAX,qword ptr [RBP + -0x158]
	0001a6d7:SUB RAX,qword ptr [RBP + -0x168]
	0001a6de:MOV qword ptr [RBP + -0x80],RAX
	0001a6e2:MOV RAX,qword ptr [RBP + -0x160]
	0001a6e9:SUB RAX,qword ptr [RBP + -0x170]
	0001a6f0:MOV qword ptr [RBP + -0x78],RAX
	0001a6f4:MOV RAX,qword ptr [RBP + -0x80]
	0001a6f8:MOV qword ptr [RBP + -0x140],RAX
	0001a6ff:MOV RAX,qword ptr [RBP + -0x80]
	0001a703:MOV qword ptr [RBP + -0x138],RAX
	0001a70a:MOV RAX,qword ptr [RBP + -0x78]
	0001a70e:MOV qword ptr [RBP + -0x130],RAX
	0001a715:MOV RAX,qword ptr [RBP + -0x78]
	0001a719:MOV qword ptr [RBP + -0x128],RAX
	0001a720:MOV RAX,qword ptr [RBP + -0x80]
	0001a724:SUB RAX,qword ptr [RBP + -0x78]
	0001a728:AND EAX,0x1
	0001a72b:TEST RAX,RAX
	0001a72e:SETNZ AL
	0001a731:MOV byte ptr [RBP + -0x14a],AL
	0001a737:MOV RAX,qword ptr [RBP + -0x80]
	0001a73b:LEA RDX,[RAX*0x8]
	0001a743:MOV RAX,qword ptr [RBP + -0xa0]
	0001a74a:ADD RDX,RAX
	0001a74d:MOV RAX,qword ptr [RBP + -0x158]
	0001a754:MOV qword ptr [RDX],RAX
	0001a757:MOV RAX,qword ptr [RBP + -0x78]
	0001a75b:LEA RDX,[RAX*0x8]
	0001a763:MOV RAX,qword ptr [RBP + -0x98]
	0001a76a:ADD RDX,RAX
	0001a76d:MOV RAX,qword ptr [RBP + -0x160]
	0001a774:MOV qword ptr [RDX],RAX
	0001a777:MOV qword ptr [RBP + -0x120],0x1
	0001a782:MOV byte ptr [RBP + -0x14b],0x0
	0001a789:MOV RAX,qword ptr [RBP + -0x140]
	0001a790:CMP RAX,qword ptr [RBP + -0x90]
	0001a797:JLE 0x0001a7c3
	0001a799:SUB qword ptr [RBP + -0x140],0x1
	0001a7a1:MOV RAX,qword ptr [RBP + -0x140]
	0001a7a8:SHL RAX,0x3
	0001a7ac:LEA RDX,[RAX + -0x8]
	0001a7b0:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7b7:ADD RAX,RDX
	0001a7ba:MOV qword ptr [RAX],-0x1
	0001a7c1:JMP 0x0001a7cb
	0001a7c3:ADD qword ptr [RBP + -0x140],0x1
	0001a7cb:MOV RAX,qword ptr [RBP + -0x138]
	0001a7d2:CMP RAX,qword ptr [RBP + -0x88]
	0001a7d9:JGE 0x0001a809
END_OF_LINE
----------------------------------------------
91: plVar1[fmax + 2] = -1;
	0001a7ea:ADD RAX,0x1
	0001a7ee:LEA RDX,[RAX*0x8]
	0001a7f6:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7fd:ADD RAX,RDX
	0001a800:MOV qword ptr [RAX],-0x1
END_OF_LINE
----------------------------------------------
92: fmax = fmax + 1;
	0001a7db:ADD qword ptr [RBP + -0x138],0x1
	0001a7e3:MOV RAX,qword ptr [RBP + -0x138]
	0001a7ea:ADD RAX,0x1
	0001a7ee:LEA RDX,[RAX*0x8]
	0001a7f6:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7fd:ADD RAX,RDX
	0001a800:MOV qword ptr [RAX],-0x1
	0001a807:JMP 0x0001a811
END_OF_LINE
----------------------------------------------
95: fmax = fmax + -1;
	0001a809:SUB qword ptr [RBP + -0x138],0x1
END_OF_LINE
----------------------------------------------
97: for (d = fmax; fmin <= d; d = d + -2) {
	0001a818:MOV qword ptr [RBP + -0x118],RAX
	0001a81f:JMP 0x0001a9ce
	0001a824:MOV RAX,qword ptr [RBP + -0x118]
	0001a82b:SHL RAX,0x3
	0001a82f:LEA RDX,[RAX + -0x8]
	0001a833:MOV RAX,qword ptr [RBP + -0xa0]
	0001a83a:ADD RAX,RDX
	0001a83d:MOV RAX,qword ptr [RAX]
	0001a840:MOV qword ptr [RBP + -0x18],RAX
	0001a844:MOV RAX,qword ptr [RBP + -0x118]
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
	0001a864:MOV qword ptr [RBP + -0x10],RAX
	0001a868:MOV RAX,qword ptr [RBP + -0x18]
	0001a86c:CMP RAX,qword ptr [RBP + -0x10]
	0001a870:JL 0x0001a87c
	0001a872:MOV RAX,qword ptr [RBP + -0x18]
	0001a876:ADD RAX,0x1
	0001a87a:JMP 0x0001a880
	0001a87c:MOV RAX,qword ptr [RBP + -0x10]
	0001a880:MOV qword ptr [RBP + -0x8],RAX
	0001a884:MOV RAX,qword ptr [RBP + -0x8]
	0001a888:MOV qword ptr [RBP + -0x110],RAX
	0001a88f:MOV RAX,qword ptr [RBP + -0x8]
	0001a893:SUB RAX,qword ptr [RBP + -0x118]
	0001a89a:MOV qword ptr [RBP + -0x108],RAX
	0001a8a1:JMP 0x0001a8b4
	0001a8a3:NOP
	0001a8a4:ADD qword ptr [RBP + -0x110],0x1
	0001a8ac:ADD qword ptr [RBP + -0x108],0x1
	0001a8b4:MOV RAX,qword ptr [RBP + -0x110]
	0001a8bb:CMP RAX,qword ptr [RBP + -0x160]
	0001a8c2:JGE 0x0001a8f1
	0001a8c4:MOV RAX,qword ptr [RBP + -0x108]
	0001a8cb:CMP RAX,qword ptr [RBP + -0x170]
	0001a8d2:JGE 0x0001a8f1
	0001a8d4:MOV RDX,qword ptr [RBP + -0x108]
	0001a8db:MOV RAX,qword ptr [RBP + -0x110]
	0001a8e2:MOV RSI,RDX
	0001a8e5:MOV RDI,RAX
	0001a8e8:CALL 0x0001ce2a
	0001a8ed:TEST AL,AL
	0001a8ef:JNZ 0x0001a8a3
	0001a8f1:MOV RAX,qword ptr [RBP + -0x110]
	0001a8f8:SUB RAX,qword ptr [RBP + -0x8]
	0001a8fc:CMP RAX,0x14
	0001a900:JLE 0x0001a909
	0001a902:MOV byte ptr [RBP + -0x14b],0x1
	0001a909:MOV RAX,qword ptr [RBP + -0x118]
	0001a910:LEA RDX,[RAX*0x8]
	0001a918:MOV RAX,qword ptr [RBP + -0xa0]
	0001a91f:ADD RDX,RAX
	0001a922:MOV RAX,qword ptr [RBP + -0x110]
	0001a929:MOV qword ptr [RDX],RAX
	0001a92c:CMP byte ptr [RBP + -0x14a],0x0
	0001a933:JZ 0x0001a9c6
	0001a939:MOV RAX,qword ptr [RBP + -0x130]
	0001a940:CMP RAX,qword ptr [RBP + -0x118]
	0001a947:JG 0x0001a9c6
	0001a949:MOV RAX,qword ptr [RBP + -0x118]
	0001a950:CMP RAX,qword ptr [RBP + -0x128]
	0001a957:JG 0x0001a9c6
	0001a959:MOV RAX,qword ptr [RBP + -0x118]
	0001a960:LEA RDX,[RAX*0x8]
	0001a968:MOV RAX,qword ptr [RBP + -0x98]
	0001a96f:ADD RAX,RDX
	0001a972:MOV RAX,qword ptr [RAX]
	0001a975:CMP qword ptr [RBP + -0x110],RAX
	0001a97c:JL 0x0001a9c6
	0001a97e:MOV RAX,qword ptr [RBP + -0x180]
	0001a985:MOV RDX,qword ptr [RBP + -0x110]
	0001a98c:MOV qword ptr [RAX],RDX
	0001a98f:MOV RAX,qword ptr [RBP + -0x180]
	0001a996:MOV RDX,qword ptr [RBP + -0x108]
	0001a99d:MOV qword ptr [RAX + 0x8],RDX
	0001a9a1:MOV RAX,qword ptr [RBP + -0x180]
	0001a9a8:MOV byte ptr [RAX + 0x11],0x1
	0001a9ac:MOV RAX,qword ptr [RBP + -0x180]
	0001a9b3:MOVZX EDX,byte ptr [RAX + 0x11]
	0001a9b7:MOV RAX,qword ptr [RBP + -0x180]
	0001a9be:MOV byte ptr [RAX + 0x10],DL
	0001a9c1:JMP 0x0001b2d8
	0001a9c6:SUB qword ptr [RBP + -0x118],0x2
	0001a9ce:MOV RAX,qword ptr [RBP + -0x118]
	0001a9d5:CMP RAX,qword ptr [RBP + -0x140]
	0001a9dc:JGE 0x0001a824
END_OF_LINE
----------------------------------------------
98: lVar7 = plVar1[d + 1];
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
99: if (lVar7 <= plVar1[d + -1]) {
	0001a83a:ADD RAX,RDX
	0001a83d:MOV RAX,qword ptr [RAX]
	0001a840:MOV qword ptr [RBP + -0x18],RAX
	0001a844:MOV RAX,qword ptr [RBP + -0x118]
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
	0001a864:MOV qword ptr [RBP + -0x10],RAX
	0001a868:MOV RAX,qword ptr [RBP + -0x18]
	0001a86c:CMP RAX,qword ptr [RBP + -0x10]
	0001a870:JL 0x0001a87c
END_OF_LINE
----------------------------------------------
100: lVar7 = plVar1[d + -1] + 1;
	0001a83a:ADD RAX,RDX
	0001a83d:MOV RAX,qword ptr [RAX]
	0001a840:MOV qword ptr [RBP + -0x18],RAX
	0001a844:MOV RAX,qword ptr [RBP + -0x118]
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
	0001a864:MOV qword ptr [RBP + -0x10],RAX
	0001a868:MOV RAX,qword ptr [RBP + -0x18]
	0001a86c:CMP RAX,qword ptr [RBP + -0x10]
	0001a870:JL 0x0001a87c
	0001a872:MOV RAX,qword ptr [RBP + -0x18]
	0001a876:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
102: y = lVar7 - d;
	0001a893:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
103: x = lVar7;
	0001a8a1:JMP 0x0001a8b4
END_OF_LINE
----------------------------------------------
104: while (((x < xlim && (y < ylim)) && (_Var4 = context_matches_file(x,y), _Var4))) {
	0001a8c2:JGE 0x0001a8f1
	0001a8c4:MOV RAX,qword ptr [RBP + -0x108]
	0001a8cb:CMP RAX,qword ptr [RBP + -0x170]
	0001a8d2:JGE 0x0001a8f1
	0001a8d4:MOV RDX,qword ptr [RBP + -0x108]
	0001a8db:MOV RAX,qword ptr [RBP + -0x110]
	0001a8e2:MOV RSI,RDX
	0001a8e5:MOV RDI,RAX
	0001a8e8:CALL 0x0001ce2a
	0001a8ed:TEST AL,AL
	0001a8ef:JNZ 0x0001a8a3
END_OF_LINE
----------------------------------------------
105: x = x + 1;
	0001a8a4:ADD qword ptr [RBP + -0x110],0x1
END_OF_LINE
----------------------------------------------
106: y = y + 1;
	0001a8ac:ADD qword ptr [RBP + -0x108],0x1
END_OF_LINE
----------------------------------------------
108: if (0x14 < x - lVar7) {
	0001a8f8:SUB RAX,qword ptr [RBP + -0x8]
	0001a8fc:CMP RAX,0x14
	0001a900:JLE 0x0001a909
END_OF_LINE
----------------------------------------------
109: bVar3 = true;
	0001a902:MOV byte ptr [RBP + -0x14b],0x1
END_OF_LINE
----------------------------------------------
111: plVar1[d] = x;
	0001a91f:ADD RDX,RAX
	0001a922:MOV RAX,qword ptr [RBP + -0x110]
	0001a929:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
112: if (((bVar12) && (bmin <= d)) && ((d <= bmax && (plVar2[d] <= x)))) {
	0001a933:JZ 0x0001a9c6
	0001a939:MOV RAX,qword ptr [RBP + -0x130]
	0001a940:CMP RAX,qword ptr [RBP + -0x118]
	0001a947:JG 0x0001a9c6
	0001a949:MOV RAX,qword ptr [RBP + -0x118]
	0001a950:CMP RAX,qword ptr [RBP + -0x128]
	0001a957:JG 0x0001a9c6
	0001a959:MOV RAX,qword ptr [RBP + -0x118]
	0001a960:LEA RDX,[RAX*0x8]
	0001a968:MOV RAX,qword ptr [RBP + -0x98]
	0001a96f:ADD RAX,RDX
	0001a972:MOV RAX,qword ptr [RAX]
	0001a975:CMP qword ptr [RBP + -0x110],RAX
	0001a97c:JL 0x0001a9c6
END_OF_LINE
----------------------------------------------
113: part->xmid = x;
	0001a98c:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
114: part->ymid = y;
	0001a99d:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
115: part->hi_minimal = true;
	0001a9a8:MOV byte ptr [RAX + 0x11],0x1
END_OF_LINE
----------------------------------------------
116: part->lo_minimal = part->hi_minimal;
	0001a9b3:MOVZX EDX,byte ptr [RAX + 0x11]
	0001a9b7:MOV RAX,qword ptr [RBP + -0x180]
	0001a9be:MOV byte ptr [RAX + 0x10],DL
END_OF_LINE
----------------------------------------------
117: return;
	0001b2d9:RET
END_OF_LINE
----------------------------------------------
120: if (xoff - ylim < bmin) {
	0001a6ad:SUB RAX,qword ptr [RBP + -0x170]
	0001a6b4:MOV qword ptr [RBP + -0x90],RAX
	0001a6bb:MOV RAX,qword ptr [RBP + -0x160]
	0001a6c2:SUB RAX,qword ptr [RBP + -0x168]
	0001a6c9:MOV qword ptr [RBP + -0x88],RAX
	0001a6d0:MOV RAX,qword ptr [RBP + -0x158]
	0001a6d7:SUB RAX,qword ptr [RBP + -0x168]
	0001a6de:MOV qword ptr [RBP + -0x80],RAX
	0001a6e2:MOV RAX,qword ptr [RBP + -0x160]
	0001a6e9:SUB RAX,qword ptr [RBP + -0x170]
	0001a6f0:MOV qword ptr [RBP + -0x78],RAX
	0001a6f4:MOV RAX,qword ptr [RBP + -0x80]
	0001a6f8:MOV qword ptr [RBP + -0x140],RAX
	0001a6ff:MOV RAX,qword ptr [RBP + -0x80]
	0001a703:MOV qword ptr [RBP + -0x138],RAX
	0001a70a:MOV RAX,qword ptr [RBP + -0x78]
	0001a70e:MOV qword ptr [RBP + -0x130],RAX
	0001a715:MOV RAX,qword ptr [RBP + -0x78]
	0001a719:MOV qword ptr [RBP + -0x128],RAX
	0001a720:MOV RAX,qword ptr [RBP + -0x80]
	0001a724:SUB RAX,qword ptr [RBP + -0x78]
	0001a728:AND EAX,0x1
	0001a72b:TEST RAX,RAX
	0001a72e:SETNZ AL
	0001a731:MOV byte ptr [RBP + -0x14a],AL
	0001a737:MOV RAX,qword ptr [RBP + -0x80]
	0001a73b:LEA RDX,[RAX*0x8]
	0001a743:MOV RAX,qword ptr [RBP + -0xa0]
	0001a74a:ADD RDX,RAX
	0001a74d:MOV RAX,qword ptr [RBP + -0x158]
	0001a754:MOV qword ptr [RDX],RAX
	0001a757:MOV RAX,qword ptr [RBP + -0x78]
	0001a75b:LEA RDX,[RAX*0x8]
	0001a763:MOV RAX,qword ptr [RBP + -0x98]
	0001a76a:ADD RDX,RAX
	0001a76d:MOV RAX,qword ptr [RBP + -0x160]
	0001a774:MOV qword ptr [RDX],RAX
	0001a777:MOV qword ptr [RBP + -0x120],0x1
	0001a782:MOV byte ptr [RBP + -0x14b],0x0
	0001a789:MOV RAX,qword ptr [RBP + -0x140]
	0001a790:CMP RAX,qword ptr [RBP + -0x90]
	0001a797:JLE 0x0001a7c3
	0001a799:SUB qword ptr [RBP + -0x140],0x1
	0001a7a1:MOV RAX,qword ptr [RBP + -0x140]
	0001a7a8:SHL RAX,0x3
	0001a7ac:LEA RDX,[RAX + -0x8]
	0001a7b0:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7b7:ADD RAX,RDX
	0001a7ba:MOV qword ptr [RAX],-0x1
	0001a7c1:JMP 0x0001a7cb
	0001a7c3:ADD qword ptr [RBP + -0x140],0x1
	0001a7cb:MOV RAX,qword ptr [RBP + -0x138]
	0001a7d2:CMP RAX,qword ptr [RBP + -0x88]
	0001a7d9:JGE 0x0001a809
	0001a7db:ADD qword ptr [RBP + -0x138],0x1
	0001a7e3:MOV RAX,qword ptr [RBP + -0x138]
	0001a7ea:ADD RAX,0x1
	0001a7ee:LEA RDX,[RAX*0x8]
	0001a7f6:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7fd:ADD RAX,RDX
	0001a800:MOV qword ptr [RAX],-0x1
	0001a807:JMP 0x0001a811
	0001a809:SUB qword ptr [RBP + -0x138],0x1
	0001a811:MOV RAX,qword ptr [RBP + -0x138]
	0001a818:MOV qword ptr [RBP + -0x118],RAX
	0001a81f:JMP 0x0001a9ce
	0001a824:MOV RAX,qword ptr [RBP + -0x118]
	0001a82b:SHL RAX,0x3
	0001a82f:LEA RDX,[RAX + -0x8]
	0001a833:MOV RAX,qword ptr [RBP + -0xa0]
	0001a83a:ADD RAX,RDX
	0001a83d:MOV RAX,qword ptr [RAX]
	0001a840:MOV qword ptr [RBP + -0x18],RAX
	0001a844:MOV RAX,qword ptr [RBP + -0x118]
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
	0001a864:MOV qword ptr [RBP + -0x10],RAX
	0001a868:MOV RAX,qword ptr [RBP + -0x18]
	0001a86c:CMP RAX,qword ptr [RBP + -0x10]
	0001a870:JL 0x0001a87c
	0001a872:MOV RAX,qword ptr [RBP + -0x18]
	0001a876:ADD RAX,0x1
	0001a87a:JMP 0x0001a880
	0001a87c:MOV RAX,qword ptr [RBP + -0x10]
	0001a880:MOV qword ptr [RBP + -0x8],RAX
	0001a884:MOV RAX,qword ptr [RBP + -0x8]
	0001a888:MOV qword ptr [RBP + -0x110],RAX
	0001a88f:MOV RAX,qword ptr [RBP + -0x8]
	0001a893:SUB RAX,qword ptr [RBP + -0x118]
	0001a89a:MOV qword ptr [RBP + -0x108],RAX
	0001a8a1:JMP 0x0001a8b4
	0001a8a3:NOP
	0001a8a4:ADD qword ptr [RBP + -0x110],0x1
	0001a8ac:ADD qword ptr [RBP + -0x108],0x1
	0001a8b4:MOV RAX,qword ptr [RBP + -0x110]
	0001a8bb:CMP RAX,qword ptr [RBP + -0x160]
	0001a8c2:JGE 0x0001a8f1
	0001a8c4:MOV RAX,qword ptr [RBP + -0x108]
	0001a8cb:CMP RAX,qword ptr [RBP + -0x170]
	0001a8d2:JGE 0x0001a8f1
	0001a8d4:MOV RDX,qword ptr [RBP + -0x108]
	0001a8db:MOV RAX,qword ptr [RBP + -0x110]
	0001a8e2:MOV RSI,RDX
	0001a8e5:MOV RDI,RAX
	0001a8e8:CALL 0x0001ce2a
	0001a8ed:TEST AL,AL
	0001a8ef:JNZ 0x0001a8a3
	0001a8f1:MOV RAX,qword ptr [RBP + -0x110]
	0001a8f8:SUB RAX,qword ptr [RBP + -0x8]
	0001a8fc:CMP RAX,0x14
	0001a900:JLE 0x0001a909
	0001a902:MOV byte ptr [RBP + -0x14b],0x1
	0001a909:MOV RAX,qword ptr [RBP + -0x118]
	0001a910:LEA RDX,[RAX*0x8]
	0001a918:MOV RAX,qword ptr [RBP + -0xa0]
	0001a91f:ADD RDX,RAX
	0001a922:MOV RAX,qword ptr [RBP + -0x110]
	0001a929:MOV qword ptr [RDX],RAX
	0001a92c:CMP byte ptr [RBP + -0x14a],0x0
	0001a933:JZ 0x0001a9c6
	0001a939:MOV RAX,qword ptr [RBP + -0x130]
	0001a940:CMP RAX,qword ptr [RBP + -0x118]
	0001a947:JG 0x0001a9c6
	0001a949:MOV RAX,qword ptr [RBP + -0x118]
	0001a950:CMP RAX,qword ptr [RBP + -0x128]
	0001a957:JG 0x0001a9c6
	0001a959:MOV RAX,qword ptr [RBP + -0x118]
	0001a960:LEA RDX,[RAX*0x8]
	0001a968:MOV RAX,qword ptr [RBP + -0x98]
	0001a96f:ADD RAX,RDX
	0001a972:MOV RAX,qword ptr [RAX]
	0001a975:CMP qword ptr [RBP + -0x110],RAX
	0001a97c:JL 0x0001a9c6
	0001a97e:MOV RAX,qword ptr [RBP + -0x180]
	0001a985:MOV RDX,qword ptr [RBP + -0x110]
	0001a98c:MOV qword ptr [RAX],RDX
	0001a98f:MOV RAX,qword ptr [RBP + -0x180]
	0001a996:MOV RDX,qword ptr [RBP + -0x108]
	0001a99d:MOV qword ptr [RAX + 0x8],RDX
	0001a9a1:MOV RAX,qword ptr [RBP + -0x180]
	0001a9a8:MOV byte ptr [RAX + 0x11],0x1
	0001a9ac:MOV RAX,qword ptr [RBP + -0x180]
	0001a9b3:MOVZX EDX,byte ptr [RAX + 0x11]
	0001a9b7:MOV RAX,qword ptr [RBP + -0x180]
	0001a9be:MOV byte ptr [RAX + 0x10],DL
	0001a9c1:JMP 0x0001b2d8
	0001a9c6:SUB qword ptr [RBP + -0x118],0x2
	0001a9ce:MOV RAX,qword ptr [RBP + -0x118]
	0001a9d5:CMP RAX,qword ptr [RBP + -0x140]
	0001a9dc:JGE 0x0001a824
	0001a9e2:MOV RAX,qword ptr [RBP + -0x130]
	0001a9e9:CMP RAX,qword ptr [RBP + -0x90]
	0001a9f0:JLE 0x0001aa22
END_OF_LINE
----------------------------------------------
121: plVar2[bmin + -2] = 0x7fffffffffffffff;
	0001aa10:ADD RAX,RDX
	0001aa13:MOV RSI,0x7fffffffffffffff
	0001aa1d:MOV qword ptr [RAX],RSI
END_OF_LINE
----------------------------------------------
122: bmin = bmin + -1;
	0001a9f2:SUB qword ptr [RBP + -0x130],0x1
	0001a9fa:MOV RAX,qword ptr [RBP + -0x130]
	0001aa01:SHL RAX,0x3
	0001aa05:LEA RDX,[RAX + -0x8]
	0001aa09:MOV RAX,qword ptr [RBP + -0x98]
	0001aa10:ADD RAX,RDX
	0001aa13:MOV RSI,0x7fffffffffffffff
	0001aa1d:MOV qword ptr [RAX],RSI
	0001aa20:JMP 0x0001aa2a
END_OF_LINE
----------------------------------------------
125: bmin = bmin + 1;
	0001aa22:ADD qword ptr [RBP + -0x130],0x1
END_OF_LINE
----------------------------------------------
127: if (bmax < xlim - yoff) {
	0001a6c2:SUB RAX,qword ptr [RBP + -0x168]
	0001a6c9:MOV qword ptr [RBP + -0x88],RAX
	0001a6d0:MOV RAX,qword ptr [RBP + -0x158]
	0001a6d7:SUB RAX,qword ptr [RBP + -0x168]
	0001a6de:MOV qword ptr [RBP + -0x80],RAX
	0001a6e2:MOV RAX,qword ptr [RBP + -0x160]
	0001a6e9:SUB RAX,qword ptr [RBP + -0x170]
	0001a6f0:MOV qword ptr [RBP + -0x78],RAX
	0001a6f4:MOV RAX,qword ptr [RBP + -0x80]
	0001a6f8:MOV qword ptr [RBP + -0x140],RAX
	0001a6ff:MOV RAX,qword ptr [RBP + -0x80]
	0001a703:MOV qword ptr [RBP + -0x138],RAX
	0001a70a:MOV RAX,qword ptr [RBP + -0x78]
	0001a70e:MOV qword ptr [RBP + -0x130],RAX
	0001a715:MOV RAX,qword ptr [RBP + -0x78]
	0001a719:MOV qword ptr [RBP + -0x128],RAX
	0001a720:MOV RAX,qword ptr [RBP + -0x80]
	0001a724:SUB RAX,qword ptr [RBP + -0x78]
	0001a728:AND EAX,0x1
	0001a72b:TEST RAX,RAX
	0001a72e:SETNZ AL
	0001a731:MOV byte ptr [RBP + -0x14a],AL
	0001a737:MOV RAX,qword ptr [RBP + -0x80]
	0001a73b:LEA RDX,[RAX*0x8]
	0001a743:MOV RAX,qword ptr [RBP + -0xa0]
	0001a74a:ADD RDX,RAX
	0001a74d:MOV RAX,qword ptr [RBP + -0x158]
	0001a754:MOV qword ptr [RDX],RAX
	0001a757:MOV RAX,qword ptr [RBP + -0x78]
	0001a75b:LEA RDX,[RAX*0x8]
	0001a763:MOV RAX,qword ptr [RBP + -0x98]
	0001a76a:ADD RDX,RAX
	0001a76d:MOV RAX,qword ptr [RBP + -0x160]
	0001a774:MOV qword ptr [RDX],RAX
	0001a777:MOV qword ptr [RBP + -0x120],0x1
	0001a782:MOV byte ptr [RBP + -0x14b],0x0
	0001a789:MOV RAX,qword ptr [RBP + -0x140]
	0001a790:CMP RAX,qword ptr [RBP + -0x90]
	0001a797:JLE 0x0001a7c3
	0001a799:SUB qword ptr [RBP + -0x140],0x1
	0001a7a1:MOV RAX,qword ptr [RBP + -0x140]
	0001a7a8:SHL RAX,0x3
	0001a7ac:LEA RDX,[RAX + -0x8]
	0001a7b0:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7b7:ADD RAX,RDX
	0001a7ba:MOV qword ptr [RAX],-0x1
	0001a7c1:JMP 0x0001a7cb
	0001a7c3:ADD qword ptr [RBP + -0x140],0x1
	0001a7cb:MOV RAX,qword ptr [RBP + -0x138]
	0001a7d2:CMP RAX,qword ptr [RBP + -0x88]
	0001a7d9:JGE 0x0001a809
	0001a7db:ADD qword ptr [RBP + -0x138],0x1
	0001a7e3:MOV RAX,qword ptr [RBP + -0x138]
	0001a7ea:ADD RAX,0x1
	0001a7ee:LEA RDX,[RAX*0x8]
	0001a7f6:MOV RAX,qword ptr [RBP + -0xa0]
	0001a7fd:ADD RAX,RDX
	0001a800:MOV qword ptr [RAX],-0x1
	0001a807:JMP 0x0001a811
	0001a809:SUB qword ptr [RBP + -0x138],0x1
	0001a811:MOV RAX,qword ptr [RBP + -0x138]
	0001a818:MOV qword ptr [RBP + -0x118],RAX
	0001a81f:JMP 0x0001a9ce
	0001a824:MOV RAX,qword ptr [RBP + -0x118]
	0001a82b:SHL RAX,0x3
	0001a82f:LEA RDX,[RAX + -0x8]
	0001a833:MOV RAX,qword ptr [RBP + -0xa0]
	0001a83a:ADD RAX,RDX
	0001a83d:MOV RAX,qword ptr [RAX]
	0001a840:MOV qword ptr [RBP + -0x18],RAX
	0001a844:MOV RAX,qword ptr [RBP + -0x118]
	0001a84b:ADD RAX,0x1
	0001a84f:LEA RDX,[RAX*0x8]
	0001a857:MOV RAX,qword ptr [RBP + -0xa0]
	0001a85e:ADD RAX,RDX
	0001a861:MOV RAX,qword ptr [RAX]
	0001a864:MOV qword ptr [RBP + -0x10],RAX
	0001a868:MOV RAX,qword ptr [RBP + -0x18]
	0001a86c:CMP RAX,qword ptr [RBP + -0x10]
	0001a870:JL 0x0001a87c
	0001a872:MOV RAX,qword ptr [RBP + -0x18]
	0001a876:ADD RAX,0x1
	0001a87a:JMP 0x0001a880
	0001a87c:MOV RAX,qword ptr [RBP + -0x10]
	0001a880:MOV qword ptr [RBP + -0x8],RAX
	0001a884:MOV RAX,qword ptr [RBP + -0x8]
	0001a888:MOV qword ptr [RBP + -0x110],RAX
	0001a88f:MOV RAX,qword ptr [RBP + -0x8]
	0001a893:SUB RAX,qword ptr [RBP + -0x118]
	0001a89a:MOV qword ptr [RBP + -0x108],RAX
	0001a8a1:JMP 0x0001a8b4
	0001a8a3:NOP
	0001a8a4:ADD qword ptr [RBP + -0x110],0x1
	0001a8ac:ADD qword ptr [RBP + -0x108],0x1
	0001a8b4:MOV RAX,qword ptr [RBP + -0x110]
	0001a8bb:CMP RAX,qword ptr [RBP + -0x160]
	0001a8c2:JGE 0x0001a8f1
	0001a8c4:MOV RAX,qword ptr [RBP + -0x108]
	0001a8cb:CMP RAX,qword ptr [RBP + -0x170]
	0001a8d2:JGE 0x0001a8f1
	0001a8d4:MOV RDX,qword ptr [RBP + -0x108]
	0001a8db:MOV RAX,qword ptr [RBP + -0x110]
	0001a8e2:MOV RSI,RDX
	0001a8e5:MOV RDI,RAX
	0001a8e8:CALL 0x0001ce2a
	0001a8ed:TEST AL,AL
	0001a8ef:JNZ 0x0001a8a3
	0001a8f1:MOV RAX,qword ptr [RBP + -0x110]
	0001a8f8:SUB RAX,qword ptr [RBP + -0x8]
	0001a8fc:CMP RAX,0x14
	0001a900:JLE 0x0001a909
	0001a902:MOV byte ptr [RBP + -0x14b],0x1
	0001a909:MOV RAX,qword ptr [RBP + -0x118]
	0001a910:LEA RDX,[RAX*0x8]
	0001a918:MOV RAX,qword ptr [RBP + -0xa0]
	0001a91f:ADD RDX,RAX
	0001a922:MOV RAX,qword ptr [RBP + -0x110]
	0001a929:MOV qword ptr [RDX],RAX
	0001a92c:CMP byte ptr [RBP + -0x14a],0x0
	0001a933:JZ 0x0001a9c6
	0001a939:MOV RAX,qword ptr [RBP + -0x130]
	0001a940:CMP RAX,qword ptr [RBP + -0x118]
	0001a947:JG 0x0001a9c6
	0001a949:MOV RAX,qword ptr [RBP + -0x118]
	0001a950:CMP RAX,qword ptr [RBP + -0x128]
	0001a957:JG 0x0001a9c6
	0001a959:MOV RAX,qword ptr [RBP + -0x118]
	0001a960:LEA RDX,[RAX*0x8]
	0001a968:MOV RAX,qword ptr [RBP + -0x98]
	0001a96f:ADD RAX,RDX
	0001a972:MOV RAX,qword ptr [RAX]
	0001a975:CMP qword ptr [RBP + -0x110],RAX
	0001a97c:JL 0x0001a9c6
	0001a97e:MOV RAX,qword ptr [RBP + -0x180]
	0001a985:MOV RDX,qword ptr [RBP + -0x110]
	0001a98c:MOV qword ptr [RAX],RDX
	0001a98f:MOV RAX,qword ptr [RBP + -0x180]
	0001a996:MOV RDX,qword ptr [RBP + -0x108]
	0001a99d:MOV qword ptr [RAX + 0x8],RDX
	0001a9a1:MOV RAX,qword ptr [RBP + -0x180]
	0001a9a8:MOV byte ptr [RAX + 0x11],0x1
	0001a9ac:MOV RAX,qword ptr [RBP + -0x180]
	0001a9b3:MOVZX EDX,byte ptr [RAX + 0x11]
	0001a9b7:MOV RAX,qword ptr [RBP + -0x180]
	0001a9be:MOV byte ptr [RAX + 0x10],DL
	0001a9c1:JMP 0x0001b2d8
	0001a9c6:SUB qword ptr [RBP + -0x118],0x2
	0001a9ce:MOV RAX,qword ptr [RBP + -0x118]
	0001a9d5:CMP RAX,qword ptr [RBP + -0x140]
	0001a9dc:JGE 0x0001a824
	0001a9e2:MOV RAX,qword ptr [RBP + -0x130]
	0001a9e9:CMP RAX,qword ptr [RBP + -0x90]
	0001a9f0:JLE 0x0001aa22
	0001a9f2:SUB qword ptr [RBP + -0x130],0x1
	0001a9fa:MOV RAX,qword ptr [RBP + -0x130]
	0001aa01:SHL RAX,0x3
	0001aa05:LEA RDX,[RAX + -0x8]
	0001aa09:MOV RAX,qword ptr [RBP + -0x98]
	0001aa10:ADD RAX,RDX
	0001aa13:MOV RSI,0x7fffffffffffffff
	0001aa1d:MOV qword ptr [RAX],RSI
	0001aa20:JMP 0x0001aa2a
	0001aa22:ADD qword ptr [RBP + -0x130],0x1
	0001aa2a:MOV RAX,qword ptr [RBP + -0x128]
	0001aa31:CMP RAX,qword ptr [RBP + -0x88]
	0001aa38:JGE 0x0001aa6e
END_OF_LINE
----------------------------------------------
128: plVar2[bmax + 2] = 0x7fffffffffffffff;
	0001aa49:ADD RAX,0x1
	0001aa4d:LEA RDX,[RAX*0x8]
	0001aa55:MOV RAX,qword ptr [RBP + -0x98]
	0001aa5c:ADD RAX,RDX
	0001aa5f:MOV RDI,0x7fffffffffffffff
	0001aa69:MOV qword ptr [RAX],RDI
END_OF_LINE
----------------------------------------------
129: bmax = bmax + 1;
	0001aa3a:ADD qword ptr [RBP + -0x128],0x1
	0001aa42:MOV RAX,qword ptr [RBP + -0x128]
	0001aa49:ADD RAX,0x1
	0001aa4d:LEA RDX,[RAX*0x8]
	0001aa55:MOV RAX,qword ptr [RBP + -0x98]
	0001aa5c:ADD RAX,RDX
	0001aa5f:MOV RDI,0x7fffffffffffffff
	0001aa69:MOV qword ptr [RAX],RDI
	0001aa6c:JMP 0x0001aa76
END_OF_LINE
----------------------------------------------
132: bmax = bmax + -1;
	0001aa6e:SUB qword ptr [RBP + -0x128],0x1
END_OF_LINE
----------------------------------------------
134: for (d = bmax; bmin <= d; d = d + -2) {
	0001aa7d:MOV qword ptr [RBP + -0x118],RAX
	0001aa84:JMP 0x0001ac40
	0001aa89:MOV RAX,qword ptr [RBP + -0x118]
	0001aa90:SHL RAX,0x3
	0001aa94:LEA RDX,[RAX + -0x8]
	0001aa98:MOV RAX,qword ptr [RBP + -0x98]
	0001aa9f:ADD RAX,RDX
	0001aaa2:MOV RAX,qword ptr [RAX]
	0001aaa5:MOV qword ptr [RBP + -0x30],RAX
	0001aaa9:MOV RAX,qword ptr [RBP + -0x118]
	0001aab0:ADD RAX,0x1
	0001aab4:LEA RDX,[RAX*0x8]
	0001aabc:MOV RAX,qword ptr [RBP + -0x98]
	0001aac3:ADD RAX,RDX
	0001aac6:MOV RAX,qword ptr [RAX]
	0001aac9:MOV qword ptr [RBP + -0x28],RAX
	0001aacd:MOV RAX,qword ptr [RBP + -0x30]
	0001aad1:CMP RAX,qword ptr [RBP + -0x28]
	0001aad5:JL 0x0001aae1
	0001aad7:MOV RAX,qword ptr [RBP + -0x28]
	0001aadb:SUB RAX,0x1
	0001aadf:JMP 0x0001aae5
	0001aae1:MOV RAX,qword ptr [RBP + -0x30]
	0001aae5:MOV qword ptr [RBP + -0x20],RAX
	0001aae9:MOV RAX,qword ptr [RBP + -0x20]
	0001aaed:MOV qword ptr [RBP + -0x100],RAX
	0001aaf4:MOV RAX,qword ptr [RBP + -0x20]
	0001aaf8:SUB RAX,qword ptr [RBP + -0x118]
	0001aaff:MOV qword ptr [RBP + -0xf8],RAX
	0001ab06:JMP 0x0001ab19
	0001ab08:NOP
	0001ab09:SUB qword ptr [RBP + -0x100],0x1
	0001ab11:SUB qword ptr [RBP + -0xf8],0x1
	0001ab19:MOV RAX,qword ptr [RBP + -0x158]
	0001ab20:CMP RAX,qword ptr [RBP + -0x100]
	0001ab27:JGE 0x0001ab5e
	0001ab29:MOV RAX,qword ptr [RBP + -0x168]
	0001ab30:CMP RAX,qword ptr [RBP + -0xf8]
	0001ab37:JGE 0x0001ab5e
	0001ab39:MOV RAX,qword ptr [RBP + -0xf8]
	0001ab40:LEA RDX,[RAX + -0x1]
	0001ab44:MOV RAX,qword ptr [RBP + -0x100]
	0001ab4b:SUB RAX,0x1
	0001ab4f:MOV RSI,RDX
	0001ab52:MOV RDI,RAX
	0001ab55:CALL 0x0001ce2a
	0001ab5a:TEST AL,AL
	0001ab5c:JNZ 0x0001ab08
	0001ab5e:MOV RAX,qword ptr [RBP + -0x20]
	0001ab62:SUB RAX,qword ptr [RBP + -0x100]
	0001ab69:CMP RAX,0x14
	0001ab6d:JLE 0x0001ab76
	0001ab6f:MOV byte ptr [RBP + -0x14b],0x1
	0001ab76:MOV RAX,qword ptr [RBP + -0x118]
	0001ab7d:LEA RDX,[RAX*0x8]
	0001ab85:MOV RAX,qword ptr [RBP + -0x98]
	0001ab8c:ADD RDX,RAX
	0001ab8f:MOV RAX,qword ptr [RBP + -0x100]
	0001ab96:MOV qword ptr [RDX],RAX
	0001ab99:MOVZX EAX,byte ptr [RBP + -0x14a]
	0001aba0:XOR EAX,0x1
	0001aba3:TEST AL,AL
	0001aba5:JZ 0x0001ac38
	0001abab:MOV RAX,qword ptr [RBP + -0x140]
	0001abb2:CMP RAX,qword ptr [RBP + -0x118]
	0001abb9:JG 0x0001ac38
	0001abbb:MOV RAX,qword ptr [RBP + -0x118]
	0001abc2:CMP RAX,qword ptr [RBP + -0x138]
	0001abc9:JG 0x0001ac38
	0001abcb:MOV RAX,qword ptr [RBP + -0x118]
	0001abd2:LEA RDX,[RAX*0x8]
	0001abda:MOV RAX,qword ptr [RBP + -0xa0]
	0001abe1:ADD RAX,RDX
	0001abe4:MOV RAX,qword ptr [RAX]
	0001abe7:CMP qword ptr [RBP + -0x100],RAX
	0001abee:JG 0x0001ac38
	0001abf0:MOV RAX,qword ptr [RBP + -0x180]
	0001abf7:MOV RDX,qword ptr [RBP + -0x100]
	0001abfe:MOV qword ptr [RAX],RDX
	0001ac01:MOV RAX,qword ptr [RBP + -0x180]
	0001ac08:MOV RDX,qword ptr [RBP + -0xf8]
	0001ac0f:MOV qword ptr [RAX + 0x8],RDX
	0001ac13:MOV RAX,qword ptr [RBP + -0x180]
	0001ac1a:MOV byte ptr [RAX + 0x11],0x1
	0001ac1e:MOV RAX,qword ptr [RBP + -0x180]
	0001ac25:MOVZX EDX,byte ptr [RAX + 0x11]
	0001ac29:MOV RAX,qword ptr [RBP + -0x180]
	0001ac30:MOV byte ptr [RAX + 0x10],DL
	0001ac33:JMP 0x0001b2d8
	0001ac38:SUB qword ptr [RBP + -0x118],0x2
	0001ac40:MOV RAX,qword ptr [RBP + -0x118]
	0001ac47:CMP RAX,qword ptr [RBP + -0x130]
	0001ac4e:JGE 0x0001aa89
END_OF_LINE
----------------------------------------------
135: lVar7 = plVar2[d + -1];
	0001aa9f:ADD RAX,RDX
	0001aaa2:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
136: if (plVar2[d + 1] <= lVar7) {
	0001aab0:ADD RAX,0x1
	0001aab4:LEA RDX,[RAX*0x8]
	0001aabc:MOV RAX,qword ptr [RBP + -0x98]
	0001aac3:ADD RAX,RDX
	0001aac6:MOV RAX,qword ptr [RAX]
	0001aac9:MOV qword ptr [RBP + -0x28],RAX
	0001aacd:MOV RAX,qword ptr [RBP + -0x30]
	0001aad1:CMP RAX,qword ptr [RBP + -0x28]
	0001aad5:JL 0x0001aae1
END_OF_LINE
----------------------------------------------
137: lVar7 = plVar2[d + 1] + -1;
	0001aab0:ADD RAX,0x1
	0001aab4:LEA RDX,[RAX*0x8]
	0001aabc:MOV RAX,qword ptr [RBP + -0x98]
	0001aac3:ADD RAX,RDX
	0001aac6:MOV RAX,qword ptr [RAX]
	0001aac9:MOV qword ptr [RBP + -0x28],RAX
	0001aacd:MOV RAX,qword ptr [RBP + -0x30]
	0001aad1:CMP RAX,qword ptr [RBP + -0x28]
	0001aad5:JL 0x0001aae1
	0001aad7:MOV RAX,qword ptr [RBP + -0x28]
	0001aadb:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
139: y_1 = lVar7 - d;
	0001aaf8:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
140: x_1 = lVar7;
	0001ab06:JMP 0x0001ab19
END_OF_LINE
----------------------------------------------
141: while (((xoff < x_1 && (yoff < y_1)) &&
	0001ab27:JGE 0x0001ab5e
	0001ab29:MOV RAX,qword ptr [RBP + -0x168]
	0001ab30:CMP RAX,qword ptr [RBP + -0xf8]
	0001ab37:JGE 0x0001ab5e
	0001ab39:MOV RAX,qword ptr [RBP + -0xf8]
	0001ab40:LEA RDX,[RAX + -0x1]
	0001ab44:MOV RAX,qword ptr [RBP + -0x100]
	0001ab4b:SUB RAX,0x1
	0001ab4f:MOV RSI,RDX
	0001ab52:MOV RDI,RAX
	0001ab55:CALL 0x0001ce2a
	0001ab5a:TEST AL,AL
	0001ab5c:JNZ 0x0001ab08
END_OF_LINE
----------------------------------------------
142: (_Var4 = context_matches_file(x_1 + -1,y_1 + -1), _Var4))) {
	0001ab40:LEA RDX,[RAX + -0x1]
	0001ab44:MOV RAX,qword ptr [RBP + -0x100]
	0001ab4b:SUB RAX,0x1
	0001ab4f:MOV RSI,RDX
	0001ab52:MOV RDI,RAX
	0001ab55:CALL 0x0001ce2a
	0001ab5a:TEST AL,AL
	0001ab5c:JNZ 0x0001ab08
END_OF_LINE
----------------------------------------------
143: x_1 = x_1 + -1;
	0001ab09:SUB qword ptr [RBP + -0x100],0x1
END_OF_LINE
----------------------------------------------
144: y_1 = y_1 + -1;
	0001ab11:SUB qword ptr [RBP + -0xf8],0x1
END_OF_LINE
----------------------------------------------
146: if (0x14 < lVar7 - x_1) {
	0001ab62:SUB RAX,qword ptr [RBP + -0x100]
	0001ab69:CMP RAX,0x14
	0001ab6d:JLE 0x0001ab76
END_OF_LINE
----------------------------------------------
147: bVar3 = true;
	0001ab6f:MOV byte ptr [RBP + -0x14b],0x1
END_OF_LINE
----------------------------------------------
149: plVar2[d] = x_1;
	0001ab8c:ADD RDX,RAX
	0001ab8f:MOV RAX,qword ptr [RBP + -0x100]
	0001ab96:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
150: if ((((!bVar12) && (fmin <= d)) && (d <= fmax)) && (x_1 <= plVar1[d])) {
	0001aba3:TEST AL,AL
	0001aba5:JZ 0x0001ac38
	0001abab:MOV RAX,qword ptr [RBP + -0x140]
	0001abb2:CMP RAX,qword ptr [RBP + -0x118]
	0001abb9:JG 0x0001ac38
	0001abbb:MOV RAX,qword ptr [RBP + -0x118]
	0001abc2:CMP RAX,qword ptr [RBP + -0x138]
	0001abc9:JG 0x0001ac38
	0001abcb:MOV RAX,qword ptr [RBP + -0x118]
	0001abd2:LEA RDX,[RAX*0x8]
	0001abda:MOV RAX,qword ptr [RBP + -0xa0]
	0001abe1:ADD RAX,RDX
	0001abe4:MOV RAX,qword ptr [RAX]
	0001abe7:CMP qword ptr [RBP + -0x100],RAX
	0001abee:JG 0x0001ac38
END_OF_LINE
----------------------------------------------
151: part->xmid = x_1;
	0001abfe:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
152: part->ymid = y_1;
	0001ac0f:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
153: part->hi_minimal = true;
	0001ac1a:MOV byte ptr [RAX + 0x11],0x1
END_OF_LINE
----------------------------------------------
154: part->lo_minimal = part->hi_minimal;
	0001ac25:MOVZX EDX,byte ptr [RAX + 0x11]
	0001ac29:MOV RAX,qword ptr [RBP + -0x180]
	0001ac30:MOV byte ptr [RAX + 0x10],DL
END_OF_LINE
----------------------------------------------
155: return;
	0001b2d9:RET
END_OF_LINE
----------------------------------------------
158: if (!find_minimal) {
	0001ac54:CMP byte ptr [RBP + -0x174],0x0
	0001ac5b:JNZ 0x0001b2ca
END_OF_LINE
----------------------------------------------
159: if (((200 < c) && (bVar3)) && (ctxt->heuristic != false)) {
	0001ac65:MOVZX EAX,byte ptr [RAX + 0x20]
	0001ac69:MOV byte ptr [RBP + -0x149],AL
	0001ac6f:CMP qword ptr [RBP + -0x120],0xc8
	0001ac7a:JLE 0x0001b001
	0001ac80:CMP byte ptr [RBP + -0x14b],0x0
	0001ac87:JZ 0x0001b001
	0001ac8d:CMP byte ptr [RBP + -0x149],0x0
	0001ac94:JZ 0x0001b001
END_OF_LINE
----------------------------------------------
160: best = 0;
	0001ac9a:MOV qword ptr [RBP + -0xf0],0x0
END_OF_LINE
----------------------------------------------
161: for (d = fmax; fmin <= d; d = d + -2) {
	0001acac:MOV qword ptr [RBP + -0x118],RAX
	0001acb3:JMP 0x0001ae14
	0001acb8:MOV RAX,qword ptr [RBP + -0x118]
	0001acbf:SUB RAX,qword ptr [RBP + -0x80]
	0001acc3:MOV qword ptr [RBP + -0x50],RAX
	0001acc7:MOV RAX,qword ptr [RBP + -0x118]
	0001acce:LEA RDX,[RAX*0x8]
	0001acd6:MOV RAX,qword ptr [RBP + -0xa0]
	0001acdd:ADD RAX,RDX
	0001ace0:MOV RAX,qword ptr [RAX]
	0001ace3:MOV qword ptr [RBP + -0x48],RAX
	0001ace7:MOV RAX,qword ptr [RBP + -0x48]
	0001aceb:SUB RAX,qword ptr [RBP + -0x118]
	0001acf2:MOV qword ptr [RBP + -0x40],RAX
	0001acf6:MOV RAX,qword ptr [RBP + -0x48]
	0001acfa:SUB RAX,qword ptr [RBP + -0x158]
	0001ad01:ADD RAX,RAX
	0001ad04:SUB RAX,qword ptr [RBP + -0x50]
	0001ad08:MOV qword ptr [RBP + -0x38],RAX
	0001ad0c:MOV RAX,qword ptr [RBP + -0x50]
	0001ad10:MOV RDX,RAX
	0001ad13:NEG RDX
	0001ad16:CMOVS RDX,RAX
	0001ad1a:MOV RAX,qword ptr [RBP + -0x120]
	0001ad21:ADD RDX,RAX
	0001ad24:MOV RAX,RDX
	0001ad27:ADD RAX,RAX
	0001ad2a:ADD RAX,RDX
	0001ad2d:SHL RAX,0x2
	0001ad31:CMP qword ptr [RBP + -0x38],RAX
	0001ad35:JLE 0x0001ae0c
	0001ad3b:MOV RAX,qword ptr [RBP + -0x38]
	0001ad3f:CMP RAX,qword ptr [RBP + -0xf0]
	0001ad46:JLE 0x0001ae0c
	0001ad4c:MOV RAX,qword ptr [RBP + -0x158]
	0001ad53:ADD RAX,0x13
	0001ad57:CMP qword ptr [RBP + -0x48],RAX
	0001ad5b:JLE 0x0001ae0c
	0001ad61:MOV RAX,qword ptr [RBP + -0x48]
	0001ad65:CMP RAX,qword ptr [RBP + -0x160]
	0001ad6c:JGE 0x0001ae0c
	0001ad72:MOV RAX,qword ptr [RBP + -0x168]
	0001ad79:ADD RAX,0x13
	0001ad7d:CMP qword ptr [RBP + -0x40],RAX
	0001ad81:JLE 0x0001ae0c
	0001ad87:MOV RAX,qword ptr [RBP + -0x40]
	0001ad8b:CMP RAX,qword ptr [RBP + -0x170]
	0001ad92:JGE 0x0001ae0c
	0001ad94:MOV dword ptr [RBP + -0x148],0x1
	0001ad9e:JMP 0x0001adda
	0001ada0:CMP dword ptr [RBP + -0x148],0x14
	0001ada7:JNZ 0x0001add3
	0001ada9:MOV RAX,qword ptr [RBP + -0x38]
	0001adad:MOV qword ptr [RBP + -0xf0],RAX
	0001adb4:MOV RAX,qword ptr [RBP + -0x180]
	0001adbb:MOV RDX,qword ptr [RBP + -0x48]
	0001adbf:MOV qword ptr [RAX],RDX
	0001adc2:MOV RAX,qword ptr [RBP + -0x180]
	0001adc9:MOV RDX,qword ptr [RBP + -0x40]
	0001adcd:MOV qword ptr [RAX + 0x8],RDX
	0001add1:JMP 0x0001ae0c
	0001add3:ADD dword ptr [RBP + -0x148],0x1
	0001adda:MOV EAX,dword ptr [RBP + -0x148]
	0001ade0:MOVSXD RCX,EAX
	0001ade3:MOV RAX,qword ptr [RBP + -0x40]
	0001ade7:SUB RAX,RCX
	0001adea:MOV RDX,RAX
	0001aded:MOV EAX,dword ptr [RBP + -0x148]
	0001adf3:MOVSXD RCX,EAX
	0001adf6:MOV RAX,qword ptr [RBP + -0x48]
	0001adfa:SUB RAX,RCX
	0001adfd:MOV RSI,RDX
	0001ae00:MOV RDI,RAX
	0001ae03:CALL 0x0001ce2a
	0001ae08:TEST AL,AL
	0001ae0a:JNZ 0x0001ada0
	0001ae0c:SUB qword ptr [RBP + -0x118],0x2
	0001ae14:MOV RAX,qword ptr [RBP + -0x118]
	0001ae1b:CMP RAX,qword ptr [RBP + -0x140]
	0001ae22:JGE 0x0001acb8
END_OF_LINE
----------------------------------------------
162: lVar8 = d - lVar5;
	0001acbf:SUB RAX,qword ptr [RBP + -0x80]
END_OF_LINE
----------------------------------------------
163: lVar7 = plVar1[d];
	0001acdd:ADD RAX,RDX
	0001ace0:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
164: lVar9 = lVar7 - d;
	0001aceb:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
165: lVar10 = (lVar7 - xoff) * 2 - lVar8;
	0001acfa:SUB RAX,qword ptr [RBP + -0x158]
	0001ad01:ADD RAX,RAX
	0001ad04:SUB RAX,qword ptr [RBP + -0x50]
END_OF_LINE
----------------------------------------------
166: lVar11 = -lVar8;
	0001ad13:NEG RDX
	0001ad16:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
167: if (0 < lVar8) {
	0001ad13:NEG RDX
	0001ad16:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
168: lVar11 = lVar8;
	0001ad16:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
170: if ((((lVar11 + c) * 0xc < lVar10) && (best < lVar10)) &&
	0001ad21:ADD RDX,RAX
	0001ad24:MOV RAX,RDX
	0001ad27:ADD RAX,RAX
	0001ad2a:ADD RAX,RDX
	0001ad2d:SHL RAX,0x2
	0001ad31:CMP qword ptr [RBP + -0x38],RAX
	0001ad35:JLE 0x0001ae0c
	0001ad3b:MOV RAX,qword ptr [RBP + -0x38]
	0001ad3f:CMP RAX,qword ptr [RBP + -0xf0]
	0001ad46:JLE 0x0001ae0c
	0001ad4c:MOV RAX,qword ptr [RBP + -0x158]
	0001ad53:ADD RAX,0x13
	0001ad57:CMP qword ptr [RBP + -0x48],RAX
	0001ad5b:JLE 0x0001ae0c
	0001ad61:MOV RAX,qword ptr [RBP + -0x48]
	0001ad65:CMP RAX,qword ptr [RBP + -0x160]
	0001ad6c:JGE 0x0001ae0c
	0001ad72:MOV RAX,qword ptr [RBP + -0x168]
	0001ad79:ADD RAX,0x13
	0001ad7d:CMP qword ptr [RBP + -0x40],RAX
	0001ad81:JLE 0x0001ae0c
	0001ad87:MOV RAX,qword ptr [RBP + -0x40]
	0001ad8b:CMP RAX,qword ptr [RBP + -0x170]
	0001ad92:JGE 0x0001ae0c
END_OF_LINE
----------------------------------------------
171: ((xoff + 0x13 < lVar7 && (((lVar7 < xlim && (yoff + 0x13 < lVar9)) && (lVar9 < ylim))))
	0001ad53:ADD RAX,0x13
	0001ad57:CMP qword ptr [RBP + -0x48],RAX
	0001ad5b:JLE 0x0001ae0c
	0001ad61:MOV RAX,qword ptr [RBP + -0x48]
	0001ad65:CMP RAX,qword ptr [RBP + -0x160]
	0001ad6c:JGE 0x0001ae0c
	0001ad72:MOV RAX,qword ptr [RBP + -0x168]
	0001ad79:ADD RAX,0x13
	0001ad7d:CMP qword ptr [RBP + -0x40],RAX
	0001ad81:JLE 0x0001ae0c
	0001ad87:MOV RAX,qword ptr [RBP + -0x40]
	0001ad8b:CMP RAX,qword ptr [RBP + -0x170]
	0001ad92:JGE 0x0001ae0c
END_OF_LINE
----------------------------------------------
173: k = 1;
	0001ad94:MOV dword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
174: while (_Var4 = context_matches_file(lVar7 - k,lVar9 - k), _Var4) {
	0001ade0:MOVSXD RCX,EAX
	0001ade3:MOV RAX,qword ptr [RBP + -0x40]
	0001ade7:SUB RAX,RCX
	0001adea:MOV RDX,RAX
	0001aded:MOV EAX,dword ptr [RBP + -0x148]
	0001adf3:MOVSXD RCX,EAX
	0001adf6:MOV RAX,qword ptr [RBP + -0x48]
	0001adfa:SUB RAX,RCX
	0001adfd:MOV RSI,RDX
	0001ae00:MOV RDI,RAX
	0001ae03:CALL 0x0001ce2a
	0001ae08:TEST AL,AL
	0001ae0a:JNZ 0x0001ada0
END_OF_LINE
----------------------------------------------
175: if (k == 0x14) {
	0001ada0:CMP dword ptr [RBP + -0x148],0x14
	0001ada7:JNZ 0x0001add3
END_OF_LINE
----------------------------------------------
176: part->xmid = lVar7;
	0001adbf:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
177: part->ymid = lVar9;
	0001adcd:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
178: best = lVar10;
	0001add1:JMP 0x0001ae0c
END_OF_LINE
----------------------------------------------
181: k = k + 1;
	0001add3:ADD dword ptr [RBP + -0x148],0x1
END_OF_LINE
----------------------------------------------
185: if (0 < best) {
	0001ae30:JLE 0x0001ae4d
END_OF_LINE
----------------------------------------------
186: part->lo_minimal = true;
	0001ae39:MOV byte ptr [RAX + 0x10],0x1
END_OF_LINE
----------------------------------------------
187: part->hi_minimal = false;
	0001ae44:MOV byte ptr [RAX + 0x11],0x0
END_OF_LINE
----------------------------------------------
188: return;
	0001b2d9:RET
END_OF_LINE
----------------------------------------------
190: best_1 = 0;
	0001ae4d:MOV qword ptr [RBP + -0xe8],0x0
END_OF_LINE
----------------------------------------------
191: for (d = bmax; bmin <= d; d = d + -2) {
	0001ae5f:MOV qword ptr [RBP + -0x118],RAX
	0001ae66:JMP 0x0001afc8
	0001ae6b:MOV RAX,qword ptr [RBP + -0x118]
	0001ae72:SUB RAX,qword ptr [RBP + -0x78]
	0001ae76:MOV qword ptr [RBP + -0x70],RAX
	0001ae7a:MOV RAX,qword ptr [RBP + -0x118]
	0001ae81:LEA RDX,[RAX*0x8]
	0001ae89:MOV RAX,qword ptr [RBP + -0x98]
	0001ae90:ADD RAX,RDX
	0001ae93:MOV RAX,qword ptr [RAX]
	0001ae96:MOV qword ptr [RBP + -0x68],RAX
	0001ae9a:MOV RAX,qword ptr [RBP + -0x68]
	0001ae9e:SUB RAX,qword ptr [RBP + -0x118]
	0001aea5:MOV qword ptr [RBP + -0x60],RAX
	0001aea9:MOV RAX,qword ptr [RBP + -0x160]
	0001aeb0:SUB RAX,qword ptr [RBP + -0x68]
	0001aeb4:LEA RDX,[RAX + RAX*0x1]
	0001aeb8:MOV RAX,qword ptr [RBP + -0x70]
	0001aebc:ADD RAX,RDX
	0001aebf:MOV qword ptr [RBP + -0x58],RAX
	0001aec3:MOV RAX,qword ptr [RBP + -0x70]
	0001aec7:MOV RDX,RAX
	0001aeca:NEG RDX
	0001aecd:CMOVS RDX,RAX
	0001aed1:MOV RAX,qword ptr [RBP + -0x120]
	0001aed8:ADD RDX,RAX
	0001aedb:MOV RAX,RDX
	0001aede:ADD RAX,RAX
	0001aee1:ADD RAX,RDX
	0001aee4:SHL RAX,0x2
	0001aee8:CMP qword ptr [RBP + -0x58],RAX
	0001aeec:JLE 0x0001afc0
	0001aef2:MOV RAX,qword ptr [RBP + -0x58]
	0001aef6:CMP RAX,qword ptr [RBP + -0xe8]
	0001aefd:JLE 0x0001afc0
	0001af03:MOV RAX,qword ptr [RBP + -0x158]
	0001af0a:CMP RAX,qword ptr [RBP + -0x68]
	0001af0e:JGE 0x0001afc0
	0001af14:MOV RAX,qword ptr [RBP + -0x160]
	0001af1b:SUB RAX,0x13
	0001af1f:CMP qword ptr [RBP + -0x68],RAX
	0001af23:JGE 0x0001afc0
	0001af29:MOV RAX,qword ptr [RBP + -0x168]
	0001af30:CMP RAX,qword ptr [RBP + -0x60]
	0001af34:JGE 0x0001afc0
	0001af3a:MOV RAX,qword ptr [RBP + -0x170]
	0001af41:SUB RAX,0x13
	0001af45:CMP qword ptr [RBP + -0x60],RAX
	0001af49:JGE 0x0001afc0
	0001af4b:MOV dword ptr [RBP + -0x144],0x0
	0001af55:JMP 0x0001af91
	0001af57:CMP dword ptr [RBP + -0x144],0x13
	0001af5e:JNZ 0x0001af8a
	0001af60:MOV RAX,qword ptr [RBP + -0x58]
	0001af64:MOV qword ptr [RBP + -0xe8],RAX
	0001af6b:MOV RAX,qword ptr [RBP + -0x180]
	0001af72:MOV RDX,qword ptr [RBP + -0x68]
	0001af76:MOV qword ptr [RAX],RDX
	0001af79:MOV RAX,qword ptr [RBP + -0x180]
	0001af80:MOV RDX,qword ptr [RBP + -0x60]
	0001af84:MOV qword ptr [RAX + 0x8],RDX
	0001af88:JMP 0x0001afc0
	0001af8a:ADD dword ptr [RBP + -0x144],0x1
	0001af91:MOV EAX,dword ptr [RBP + -0x144]
	0001af97:MOVSXD RDX,EAX
	0001af9a:MOV RAX,qword ptr [RBP + -0x60]
	0001af9e:ADD RDX,RAX
	0001afa1:MOV EAX,dword ptr [RBP + -0x144]
	0001afa7:MOVSXD RCX,EAX
	0001afaa:MOV RAX,qword ptr [RBP + -0x68]
	0001afae:ADD RAX,RCX
	0001afb1:MOV RSI,RDX
	0001afb4:MOV RDI,RAX
	0001afb7:CALL 0x0001ce2a
	0001afbc:TEST AL,AL
	0001afbe:JNZ 0x0001af57
	0001afc0:SUB qword ptr [RBP + -0x118],0x2
	0001afc8:MOV RAX,qword ptr [RBP + -0x118]
	0001afcf:CMP RAX,qword ptr [RBP + -0x130]
	0001afd6:JGE 0x0001ae6b
END_OF_LINE
----------------------------------------------
192: lVar8 = d - lVar6;
	0001ae72:SUB RAX,qword ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
193: lVar7 = plVar2[d];
	0001ae90:ADD RAX,RDX
	0001ae93:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
194: lVar9 = lVar7 - d;
	0001ae9e:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
195: lVar10 = lVar8 + (xlim - lVar7) * 2;
	0001aeb0:SUB RAX,qword ptr [RBP + -0x68]
	0001aeb4:LEA RDX,[RAX + RAX*0x1]
	0001aeb8:MOV RAX,qword ptr [RBP + -0x70]
	0001aebc:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
196: lVar11 = -lVar8;
	0001aeca:NEG RDX
	0001aecd:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
197: if (0 < lVar8) {
	0001aeca:NEG RDX
	0001aecd:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
198: lVar11 = lVar8;
	0001aecd:CMOVS RDX,RAX
END_OF_LINE
----------------------------------------------
200: if ((((lVar11 + c) * 0xc < lVar10) && (best_1 < lVar10)) &&
	0001aed8:ADD RDX,RAX
	0001aedb:MOV RAX,RDX
	0001aede:ADD RAX,RAX
	0001aee1:ADD RAX,RDX
	0001aee4:SHL RAX,0x2
	0001aee8:CMP qword ptr [RBP + -0x58],RAX
	0001aeec:JLE 0x0001afc0
	0001aef2:MOV RAX,qword ptr [RBP + -0x58]
	0001aef6:CMP RAX,qword ptr [RBP + -0xe8]
	0001aefd:JLE 0x0001afc0
	0001af03:MOV RAX,qword ptr [RBP + -0x158]
	0001af0a:CMP RAX,qword ptr [RBP + -0x68]
	0001af0e:JGE 0x0001afc0
	0001af14:MOV RAX,qword ptr [RBP + -0x160]
	0001af1b:SUB RAX,0x13
	0001af1f:CMP qword ptr [RBP + -0x68],RAX
	0001af23:JGE 0x0001afc0
	0001af29:MOV RAX,qword ptr [RBP + -0x168]
	0001af30:CMP RAX,qword ptr [RBP + -0x60]
	0001af34:JGE 0x0001afc0
	0001af3a:MOV RAX,qword ptr [RBP + -0x170]
	0001af41:SUB RAX,0x13
	0001af45:CMP qword ptr [RBP + -0x60],RAX
	0001af49:JGE 0x0001afc0
END_OF_LINE
----------------------------------------------
201: (((xoff < lVar7 && ((lVar7 < xlim + -0x13 && (yoff < lVar9)))) &&
	0001af0e:JGE 0x0001afc0
	0001af14:MOV RAX,qword ptr [RBP + -0x160]
	0001af1b:SUB RAX,0x13
	0001af1f:CMP qword ptr [RBP + -0x68],RAX
	0001af23:JGE 0x0001afc0
	0001af29:MOV RAX,qword ptr [RBP + -0x168]
	0001af30:CMP RAX,qword ptr [RBP + -0x60]
	0001af34:JGE 0x0001afc0
END_OF_LINE
----------------------------------------------
202: (lVar9 < ylim + -0x13)))) {
	0001af41:SUB RAX,0x13
	0001af45:CMP qword ptr [RBP + -0x60],RAX
	0001af49:JGE 0x0001afc0
END_OF_LINE
----------------------------------------------
203: k_1 = 0;
	0001af4b:MOV dword ptr [RBP + -0x144],0x0
END_OF_LINE
----------------------------------------------
204: while (_Var4 = context_matches_file(lVar7 + k_1,k_1 + lVar9), _Var4) {
	0001af97:MOVSXD RDX,EAX
	0001af9a:MOV RAX,qword ptr [RBP + -0x60]
	0001af9e:ADD RDX,RAX
	0001afa1:MOV EAX,dword ptr [RBP + -0x144]
	0001afa7:MOVSXD RCX,EAX
	0001afaa:MOV RAX,qword ptr [RBP + -0x68]
	0001afae:ADD RAX,RCX
	0001afb1:MOV RSI,RDX
	0001afb4:MOV RDI,RAX
	0001afb7:CALL 0x0001ce2a
	0001afbc:TEST AL,AL
	0001afbe:JNZ 0x0001af57
END_OF_LINE
----------------------------------------------
205: if (k_1 == 0x13) {
	0001af57:CMP dword ptr [RBP + -0x144],0x13
	0001af5e:JNZ 0x0001af8a
END_OF_LINE
----------------------------------------------
206: part->xmid = lVar7;
	0001af76:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
207: part->ymid = lVar9;
	0001af84:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
208: best_1 = lVar10;
	0001af88:JMP 0x0001afc0
END_OF_LINE
----------------------------------------------
211: k_1 = k_1 + 1;
	0001af8a:ADD dword ptr [RBP + -0x144],0x1
END_OF_LINE
----------------------------------------------
215: if (0 < best_1) {
	0001afe4:JLE 0x0001b001
END_OF_LINE
----------------------------------------------
216: part->lo_minimal = false;
	0001afed:MOV byte ptr [RAX + 0x10],0x0
END_OF_LINE
----------------------------------------------
217: part->hi_minimal = true;
	0001aff8:MOV byte ptr [RAX + 0x11],0x1
END_OF_LINE
----------------------------------------------
218: return;
	0001b2d9:RET
END_OF_LINE
----------------------------------------------
221: if (ctxt->too_expensive <= c) {
	0001b005:MOV RAX,qword ptr [RAX + 0x28]
	0001b009:CMP qword ptr [RBP + -0x120],RAX
	0001b010:JL 0x0001b2cb
END_OF_LINE
----------------------------------------------
222: fxybest = -1;
	0001b016:MOV qword ptr [RBP + -0xe0],-0x1
END_OF_LINE
----------------------------------------------
223: for (d = fmax; fmin <= d; d = d + -2) {
	0001b028:MOV qword ptr [RBP + -0x118],RAX
	0001b02f:JMP 0x0001b0f8
	0001b034:MOV RAX,qword ptr [RBP + -0x118]
	0001b03b:LEA RDX,[RAX*0x8]
	0001b043:MOV RAX,qword ptr [RBP + -0xa0]
	0001b04a:ADD RAX,RDX
	0001b04d:MOV RAX,qword ptr [RAX]
	0001b050:MOV RDX,qword ptr [RBP + -0x160]
	0001b057:CMP RDX,RAX
	0001b05a:CMOVLE RAX,RDX
	0001b05e:MOV qword ptr [RBP + -0xc0],RAX
	0001b065:MOV RAX,qword ptr [RBP + -0xc0]
	0001b06c:SUB RAX,qword ptr [RBP + -0x118]
	0001b073:MOV qword ptr [RBP + -0xb8],RAX
	0001b07a:MOV RAX,qword ptr [RBP + -0x170]
	0001b081:CMP RAX,qword ptr [RBP + -0xb8]
	0001b088:JGE 0x0001b0b0
	0001b08a:MOV RDX,qword ptr [RBP + -0x170]
	0001b091:MOV RAX,qword ptr [RBP + -0x118]
	0001b098:ADD RAX,RDX
	0001b09b:MOV qword ptr [RBP + -0xc0],RAX
	0001b0a2:MOV RAX,qword ptr [RBP + -0x170]
	0001b0a9:MOV qword ptr [RBP + -0xb8],RAX
	0001b0b0:MOV RDX,qword ptr [RBP + -0xc0]
	0001b0b7:MOV RAX,qword ptr [RBP + -0xb8]
	0001b0be:ADD RAX,RDX
	0001b0c1:CMP qword ptr [RBP + -0xe0],RAX
	0001b0c8:JGE 0x0001b0f0
	0001b0ca:MOV RDX,qword ptr [RBP + -0xc0]
	0001b0d1:MOV RAX,qword ptr [RBP + -0xb8]
	0001b0d8:ADD RAX,RDX
	0001b0db:MOV qword ptr [RBP + -0xe0],RAX
	0001b0e2:MOV RAX,qword ptr [RBP + -0xc0]
	0001b0e9:MOV qword ptr [RBP + -0xd8],RAX
	0001b0f0:SUB qword ptr [RBP + -0x118],0x2
	0001b0f8:MOV RAX,qword ptr [RBP + -0x118]
	0001b0ff:CMP RAX,qword ptr [RBP + -0x140]
	0001b106:JGE 0x0001b034
END_OF_LINE
----------------------------------------------
224: x_4 = plVar1[d];
	0001b04a:ADD RAX,RDX
	0001b04d:MOV RAX,qword ptr [RAX]
	0001b050:MOV RDX,qword ptr [RBP + -0x160]
	0001b057:CMP RDX,RAX
	0001b05a:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
225: if (xlim <= plVar1[d]) {
	0001b04a:ADD RAX,RDX
	0001b04d:MOV RAX,qword ptr [RAX]
	0001b050:MOV RDX,qword ptr [RBP + -0x160]
	0001b057:CMP RDX,RAX
	0001b05a:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
226: x_4 = xlim;
	0001b05a:CMOVLE RAX,RDX
END_OF_LINE
----------------------------------------------
228: y_4 = x_4 - d;
	0001b06c:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
229: if (ylim < y_4) {
	0001b088:JGE 0x0001b0b0
END_OF_LINE
----------------------------------------------
230: x_4 = d + ylim;
	0001b098:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
231: y_4 = ylim;
	0001b0a9:MOV qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
233: if (fxybest < y_4 + x_4) {
	0001b0be:ADD RAX,RDX
	0001b0c1:CMP qword ptr [RBP + -0xe0],RAX
	0001b0c8:JGE 0x0001b0f0
END_OF_LINE
----------------------------------------------
234: fxybest = y_4 + x_4;
	0001b0d8:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
235: fxbest = x_4;
	0001b0e9:MOV qword ptr [RBP + -0xd8],RAX
END_OF_LINE
----------------------------------------------
238: bxybest = 0x7fffffffffffffff;
	0001b116:MOV qword ptr [RBP + -0xd0],RAX
END_OF_LINE
----------------------------------------------
239: for (d = bmax; bmin <= d; d = d + -2) {
	0001b124:MOV qword ptr [RBP + -0x118],RAX
	0001b12b:JMP 0x0001b1f4
	0001b130:MOV RAX,qword ptr [RBP + -0x118]
	0001b137:LEA RDX,[RAX*0x8]
	0001b13f:MOV RAX,qword ptr [RBP + -0x98]
	0001b146:ADD RAX,RDX
	0001b149:MOV RAX,qword ptr [RAX]
	0001b14c:MOV RDX,qword ptr [RBP + -0x158]
	0001b153:CMP RDX,RAX
	0001b156:CMOVGE RAX,RDX
	0001b15a:MOV qword ptr [RBP + -0xb0],RAX
	0001b161:MOV RAX,qword ptr [RBP + -0xb0]
	0001b168:SUB RAX,qword ptr [RBP + -0x118]
	0001b16f:MOV qword ptr [RBP + -0xa8],RAX
	0001b176:MOV RAX,qword ptr [RBP + -0xa8]
	0001b17d:CMP RAX,qword ptr [RBP + -0x168]
	0001b184:JGE 0x0001b1ac
	0001b186:MOV RDX,qword ptr [RBP + -0x168]
	0001b18d:MOV RAX,qword ptr [RBP + -0x118]
	0001b194:ADD RAX,RDX
	0001b197:MOV qword ptr [RBP + -0xb0],RAX
	0001b19e:MOV RAX,qword ptr [RBP + -0x168]
	0001b1a5:MOV qword ptr [RBP + -0xa8],RAX
	0001b1ac:MOV RDX,qword ptr [RBP + -0xb0]
	0001b1b3:MOV RAX,qword ptr [RBP + -0xa8]
	0001b1ba:ADD RAX,RDX
	0001b1bd:CMP qword ptr [RBP + -0xd0],RAX
	0001b1c4:JLE 0x0001b1ec
	0001b1c6:MOV RDX,qword ptr [RBP + -0xb0]
	0001b1cd:MOV RAX,qword ptr [RBP + -0xa8]
	0001b1d4:ADD RAX,RDX
	0001b1d7:MOV qword ptr [RBP + -0xd0],RAX
	0001b1de:MOV RAX,qword ptr [RBP + -0xb0]
	0001b1e5:MOV qword ptr [RBP + -0xc8],RAX
	0001b1ec:SUB qword ptr [RBP + -0x118],0x2
	0001b1f4:MOV RAX,qword ptr [RBP + -0x118]
	0001b1fb:CMP RAX,qword ptr [RBP + -0x130]
	0001b202:JGE 0x0001b130
END_OF_LINE
----------------------------------------------
240: x_5 = plVar2[d];
	0001b146:ADD RAX,RDX
	0001b149:MOV RAX,qword ptr [RAX]
	0001b14c:MOV RDX,qword ptr [RBP + -0x158]
	0001b153:CMP RDX,RAX
	0001b156:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
241: if (plVar2[d] <= xoff) {
	0001b146:ADD RAX,RDX
	0001b149:MOV RAX,qword ptr [RAX]
	0001b14c:MOV RDX,qword ptr [RBP + -0x158]
	0001b153:CMP RDX,RAX
	0001b156:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
242: x_5 = xoff;
	0001b156:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
244: y_5 = x_5 - d;
	0001b168:SUB RAX,qword ptr [RBP + -0x118]
END_OF_LINE
----------------------------------------------
245: if (y_5 < yoff) {
	0001b184:JGE 0x0001b1ac
END_OF_LINE
----------------------------------------------
246: x_5 = d + yoff;
	0001b194:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
247: y_5 = yoff;
	0001b1a5:MOV qword ptr [RBP + -0xa8],RAX
END_OF_LINE
----------------------------------------------
249: if (y_5 + x_5 < bxybest) {
	0001b1ba:ADD RAX,RDX
	0001b1bd:CMP qword ptr [RBP + -0xd0],RAX
	0001b1c4:JLE 0x0001b1ec
END_OF_LINE
----------------------------------------------
250: bxybest = y_5 + x_5;
	0001b1d4:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
251: bxbest = x_5;
	0001b1e5:MOV qword ptr [RBP + -0xc8],RAX
END_OF_LINE
----------------------------------------------
254: if ((ylim + xlim) - bxybest < fxybest - (xoff + yoff)) {
	0001b216:ADD RAX,RDX
	0001b219:SUB RAX,qword ptr [RBP + -0xd0]
	0001b220:MOV RCX,qword ptr [RBP + -0x158]
	0001b227:MOV RDX,qword ptr [RBP + -0x168]
	0001b22e:ADD RCX,RDX
	0001b231:MOV RDX,qword ptr [RBP + -0xe0]
	0001b238:SUB RDX,RCX
	0001b23b:CMP RAX,RDX
	0001b23e:JGE 0x0001b285
END_OF_LINE
----------------------------------------------
255: part->xmid = fxbest;
	0001b24e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
256: part->ymid = fxybest - fxbest;
	0001b258:SUB RAX,qword ptr [RBP + -0xd8]
	0001b25f:MOV RDX,RAX
	0001b262:MOV RAX,qword ptr [RBP + -0x180]
	0001b269:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
257: part->lo_minimal = true;
	0001b274:MOV byte ptr [RAX + 0x10],0x1
END_OF_LINE
----------------------------------------------
258: part->hi_minimal = false;
	0001b27f:MOV byte ptr [RAX + 0x11],0x0
END_OF_LINE
----------------------------------------------
261: part->xmid = bxbest;
	0001b293:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
262: part->ymid = bxybest - bxbest;
	0001b29d:SUB RAX,qword ptr [RBP + -0xc8]
	0001b2a4:MOV RDX,RAX
	0001b2a7:MOV RAX,qword ptr [RBP + -0x180]
	0001b2ae:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
263: part->lo_minimal = false;
	0001b2b9:MOV byte ptr [RAX + 0x10],0x0
END_OF_LINE
----------------------------------------------
264: part->hi_minimal = true;
	0001b2c4:MOV byte ptr [RAX + 0x11],0x1
END_OF_LINE
----------------------------------------------
266: return;
	0001b2d9:RET
END_OF_LINE
----------------------------------------------
269: c = c + 1;
	0001b2cb:ADD qword ptr [RBP + -0x120],0x1
END_OF_LINE
----------------------------------------------
270: } while( true );
	0001b2d3:JMP 0x0001a782
END_OF_LINE



Function: compareseq
----------------------------------------------
16: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001b300:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: yoff_local = yoff;
	0001b30f:JMP 0x0001b31b
END_OF_LINE
----------------------------------------------
18: xoff_local = xoff;
	0001b30f:JMP 0x0001b31b
END_OF_LINE
----------------------------------------------
19: while (((ylim_local = ylim, xlim_local = xlim, xoff_local < xlim && (yoff_local < ylim)) &&
	0001b323:JGE 0x0001b352
	0001b325:MOV RAX,qword ptr [RBP + -0x38]
	0001b329:CMP RAX,qword ptr [RBP + -0x40]
	0001b32d:JGE 0x0001b352
	0001b32f:MOV RDX,qword ptr [RBP + -0x38]
	0001b333:MOV RAX,qword ptr [RBP + -0x28]
	0001b337:MOV RSI,RDX
	0001b33a:MOV RDI,RAX
	0001b33d:CALL 0x0001ce2a
	0001b342:TEST AL,AL
	0001b344:JNZ 0x0001b311
END_OF_LINE
----------------------------------------------
20: (_Var2 = context_matches_file(xoff_local,yoff_local), _Var2))) {
	0001b33d:CALL 0x0001ce2a
	0001b342:TEST AL,AL
	0001b344:JNZ 0x0001b311
END_OF_LINE
----------------------------------------------
21: xoff_local = xoff_local + 1;
	0001b311:ADD qword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
22: yoff_local = yoff_local + 1;
	0001b316:ADD qword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
24: while (((xoff_local < xlim_local && (yoff_local < ylim_local)) &&
	0001b35a:JGE 0x0001b385
	0001b35c:MOV RAX,qword ptr [RBP + -0x38]
	0001b360:CMP RAX,qword ptr [RBP + -0x40]
	0001b364:JGE 0x0001b385
	0001b366:MOV RAX,qword ptr [RBP + -0x40]
	0001b36a:LEA RDX,[RAX + -0x1]
	0001b36e:MOV RAX,qword ptr [RBP + -0x30]
	0001b372:SUB RAX,0x1
	0001b376:MOV RSI,RDX
	0001b379:MOV RDI,RAX
	0001b37c:CALL 0x0001ce2a
	0001b381:TEST AL,AL
	0001b383:JNZ 0x0001b348
END_OF_LINE
----------------------------------------------
25: (_Var2 = context_matches_file(xlim_local + -1,ylim_local + -1), _Var2))) {
	0001b36a:LEA RDX,[RAX + -0x1]
	0001b36e:MOV RAX,qword ptr [RBP + -0x30]
	0001b372:SUB RAX,0x1
	0001b376:MOV RSI,RDX
	0001b379:MOV RDI,RAX
	0001b37c:CALL 0x0001ce2a
	0001b381:TEST AL,AL
	0001b383:JNZ 0x0001b348
END_OF_LINE
----------------------------------------------
26: xlim_local = xlim_local + -1;
	0001b348:SUB qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
27: ylim_local = ylim_local + -1;
	0001b34d:SUB qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
29: if (xoff_local == xlim_local) {
	0001b389:CMP RAX,qword ptr [RBP + -0x30]
	0001b38d:JNZ 0x0001b3b7
END_OF_LINE
----------------------------------------------
30: for (; yoff_local < ylim_local; yoff_local = yoff_local + 1) {
	0001b3a3:ADD qword ptr [RBP + -0x38],0x1
	0001b3a8:MOV RAX,qword ptr [RBP + -0x38]
	0001b3ac:CMP RAX,qword ptr [RBP + -0x40]
	0001b3b0:JL 0x0001b391
END_OF_LINE
----------------------------------------------
31: ctxt->ychar[yoff_local] = '+';
	0001b395:MOV RDX,qword ptr [RAX + 0x8]
	0001b399:MOV RAX,qword ptr [RBP + -0x38]
	0001b39d:ADD RAX,RDX
	0001b3a0:MOV byte ptr [RAX],0x2b
END_OF_LINE
----------------------------------------------
34: else if (yoff_local == ylim_local) {
	0001b3bb:CMP RAX,qword ptr [RBP + -0x40]
	0001b3bf:JNZ 0x0001b3e8
END_OF_LINE
----------------------------------------------
35: for (; xoff_local < xlim_local; xoff_local = xoff_local + 1) {
	0001b3d4:ADD qword ptr [RBP + -0x28],0x1
	0001b3d9:MOV RAX,qword ptr [RBP + -0x28]
	0001b3dd:CMP RAX,qword ptr [RBP + -0x30]
	0001b3e1:JL 0x0001b3c3
END_OF_LINE
----------------------------------------------
36: ctxt->xchar[xoff_local] = '-';
	0001b3c7:MOV RDX,qword ptr [RAX]
	0001b3ca:MOV RAX,qword ptr [RBP + -0x28]
	0001b3ce:ADD RAX,RDX
	0001b3d1:MOV byte ptr [RAX],0x2d
END_OF_LINE
----------------------------------------------
40: diag(xoff_local,xlim_local,yoff_local,ylim_local,find_minimal,&part,ctxt);
	0001b3ec:LEA R8,[RBP + -0x20]
	0001b3f0:MOV RCX,qword ptr [RBP + -0x40]
	0001b3f4:MOV RDX,qword ptr [RBP + -0x38]
	0001b3f8:MOV RSI,qword ptr [RBP + -0x30]
	0001b3fc:MOV RAX,qword ptr [RBP + -0x28]
	0001b400:SUB RSP,0x8
	0001b404:PUSH qword ptr [RBP + -0x50]
	0001b407:MOV R9,R8
	0001b40a:MOV R8D,EDI
	0001b40d:MOV RDI,RAX
	0001b410:CALL 0x0001a64d
END_OF_LINE
----------------------------------------------
41: _Var2 = compareseq(xoff_local,part.xmid,yoff_local,part.ymid,part.lo_minimal,ctxt);
	0001b43d:CALL 0x0001b2da
END_OF_LINE
----------------------------------------------
42: if (_Var2) {
	0001b444:JZ 0x0001b44d
END_OF_LINE
----------------------------------------------
43: _Var2 = true;
	0001b446:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
44: goto LAB_0001b486;
	0001b486:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
46: _Var2 = compareseq(part.xmid,xlim_local,part.ymid,ylim_local,part.hi_minimal,ctxt);
	0001b471:CALL 0x0001b2da
END_OF_LINE
----------------------------------------------
47: if (_Var2) {
	0001b478:JZ 0x0001b481
END_OF_LINE
----------------------------------------------
48: _Var2 = true;
	0001b47a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
49: goto LAB_0001b486;
	0001b486:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
52: _Var2 = false;
	0001b481:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
53: LAB_0001b486:
	0001b486:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
54: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001b48a:SUB RDX,qword ptr FS:[0x28]
	0001b493:JZ 0x0001b49a
END_OF_LINE
----------------------------------------------
55: return _Var2;
	0001b49b:RET
END_OF_LINE
----------------------------------------------
58: __stack_chk_fail();
	0001b495:CALL 0x00005b00
END_OF_LINE



Function: locate_merge
----------------------------------------------
37: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001b4b5:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
38: lVar2 = pch_first();
	0001b4c4:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
39: first_guess = in_offset + lVar2;
	0001b4d6:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
40: pat_lines = pch_ptrn_lines();
	0001b4e0:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
41: context_lines = count_context_lines();
	0001b4ec:CALL 0x0001cdd9
END_OF_LINE
----------------------------------------------
42: max_where = context_lines + (input_lines - pat_lines) + 1;
	0001b502:SUB RAX,qword ptr [RBP + -0xb8]
	0001b509:MOV RDX,RAX
	0001b50c:MOV RAX,qword ptr [RBP + -0xb0]
	0001b513:ADD RAX,RDX
	0001b516:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
43: min_where = last_frozen_line + 1;
	0001b52b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
44: max_pos_offset = max_where - first_guess;
	0001b53d:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
45: max_neg_offset = first_guess - min_where;
	0001b552:SUB RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
46: max_offset = max_neg_offset;
	0001b571:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
47: if (max_neg_offset <= max_pos_offset) {
	0001b571:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
48: max_offset = max_pos_offset;
	0001b571:CMOVGE RAX,RDX
END_OF_LINE
----------------------------------------------
50: where = first_guess;
	0001b583:MOV qword ptr [RBP + -0xe8],RAX
END_OF_LINE
----------------------------------------------
51: max_matched = 0;
	0001b58a:MOV qword ptr [RBP + -0xe0],0x0
END_OF_LINE
----------------------------------------------
52: if (context_lines != 0) {
	0001b595:CMP qword ptr [RBP + -0xb0],0x0
	0001b59d:JZ 0x0001b965
END_OF_LINE
----------------------------------------------
53: max = context_lines * 2;
	0001b5aa:ADD RAX,RAX
END_OF_LINE
----------------------------------------------
54: min = pat_lines - context_lines;
	0001b5bb:SUB RAX,qword ptr [RBP + -0xb0]
END_OF_LINE
----------------------------------------------
55: if ((debug & 1U) != 0) {
	0001b5d2:AND EAX,0x1
	0001b5d5:TEST EAX,EAX
	0001b5d7:JZ 0x0001b622
END_OF_LINE
----------------------------------------------
56: pcVar3 = format_linenum(numbuf1,max);
	0001b5e0:LEA RAX,[RBP + -0x30]
	0001b5e4:MOV RSI,RDX
	0001b5e7:MOV RDI,RAX
	0001b5ea:CALL 0x00018472
END_OF_LINE
----------------------------------------------
57: pcVar4 = format_linenum(numbuf0,min);
	0001b5f9:LEA RAX,[RBP + -0x50]
	0001b5fd:MOV RSI,RDX
	0001b600:MOV RDI,RAX
	0001b603:CALL 0x00018472
END_OF_LINE
----------------------------------------------
58: say("locating merge: min=%s max=%s ",pcVar4,pcVar3);
	0001b61d:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
60: lVar2 = pch_suffix_context();
	0001b622:CALL 0x00013c59
END_OF_LINE
----------------------------------------------
61: lVar5 = pch_prefix_context();
	0001b62a:CALL 0x00013c48
END_OF_LINE
----------------------------------------------
62: offset = lVar2 - lVar5;
	0001b635:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
63: if ((0 < offset) && (lVar2 = pch_first(), lVar2 < 2)) {
	0001b647:JLE 0x0001b65f
	0001b649:CALL 0x00013bf3
	0001b64e:CMP RAX,0x1
	0001b652:JG 0x0001b65f
END_OF_LINE
----------------------------------------------
64: max_pos_offset = 0;
	0001b654:MOV qword ptr [RBP + -0xf8],0x0
END_OF_LINE
----------------------------------------------
66: lVar2 = offset;
	0001b65f:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
67: if (first_guess <= max_neg_offset) {
	0001b67e:JG 0x0001b692
END_OF_LINE
----------------------------------------------
68: max_neg_offset = first_guess + -1;
	0001b687:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
70: for (offset = 0; offset <= max_offset; offset = offset + 1) {
	0001b692:MOV qword ptr [RBP + -0xc8],0x0
	0001b69d:JMP 0x0001b8d0
	0001b6a2:MOV RAX,qword ptr [RBP + -0xc8]
	0001b6a9:CMP RAX,qword ptr [RBP + -0xf8]
	0001b6b0:JG 0x0001b7c2
	0001b6b6:MOV RDX,qword ptr [RBP + -0xc0]
	0001b6bd:MOV RAX,qword ptr [RBP + -0xc8]
	0001b6c4:ADD RAX,RDX
	0001b6c7:MOV qword ptr [RBP + -0x90],RAX
	0001b6ce:CMP byte ptr [RBP + -0x101],0x0
	0001b6d5:JZ 0x0001b6ee
	0001b6d7:LEA RAX,[0x3e1f0]
	0001b6de:MOV RAX,qword ptr [RAX]
	0001b6e1:SUB RAX,qword ptr [RBP + -0x90]
	0001b6e8:ADD RAX,0x1
	0001b6ec:JMP 0x0001b6f5
	0001b6ee:MOV RAX,qword ptr [RBP + -0xd8]
	0001b6f5:LEA RDX,[0x3e1f0]
	0001b6fc:MOV RDX,qword ptr [RDX]
	0001b6ff:LEA RCX,[RDX + 0x1]
	0001b703:MOV RDX,qword ptr [RBP + -0xb8]
	0001b70a:LEA RSI,[RDX + 0x1]
	0001b70e:MOV R8,qword ptr [RBP + -0xd0]
	0001b715:MOV RDX,qword ptr [RBP + -0x90]
	0001b71c:SUB RSP,0x8
	0001b720:LEA RDI,[RBP + -0x100]
	0001b727:PUSH RDI
	0001b728:MOV R9,R8
	0001b72b:MOV R8,RAX
	0001b72e:MOV EDI,0x1
	0001b733:CALL 0x0001a287
	0001b738:ADD RSP,0x10
	0001b73c:MOV qword ptr [RBP + -0x88],RAX
	0001b743:MOV RAX,qword ptr [RBP + -0x88]
	0001b74a:CMP RAX,qword ptr [RBP + -0xd0]
	0001b751:JG 0x0001b7c2
	0001b753:MOV RAX,qword ptr [RBP + -0x100]
	0001b75a:SUB RAX,qword ptr [RBP + -0x90]
	0001b761:CMP qword ptr [RBP + -0xe0],RAX
	0001b768:JGE 0x0001b7c2
	0001b76a:MOV RAX,qword ptr [RBP + -0x100]
	0001b771:SUB RAX,qword ptr [RBP + -0x90]
	0001b778:MOV qword ptr [RBP + -0xe0],RAX
	0001b77f:MOV RAX,qword ptr [RBP + -0x90]
	0001b786:MOV qword ptr [RBP + -0xe8],RAX
	0001b78d:CMP qword ptr [RBP + -0x88],0x0
	0001b795:JZ 0x0001b8e6
	0001b79b:MOV RAX,qword ptr [RBP + -0x100]
	0001b7a2:SUB RAX,qword ptr [RBP + -0x90]
	0001b7a9:MOV qword ptr [RBP + -0xd8],RAX
	0001b7b0:MOV RAX,qword ptr [RBP + -0x88]
	0001b7b7:SUB RAX,0x1
	0001b7bb:MOV qword ptr [RBP + -0xd0],RAX
	0001b7c2:CMP qword ptr [RBP + -0xc8],0x0
	0001b7ca:JLE 0x0001b8c8
	0001b7d0:MOV RAX,qword ptr [RBP + -0xc8]
	0001b7d7:CMP RAX,qword ptr [RBP + -0xf0]
	0001b7de:JG 0x0001b8c8
	0001b7e4:MOV RAX,qword ptr [RBP + -0xc0]
	0001b7eb:SUB RAX,qword ptr [RBP + -0xc8]
	0001b7f2:MOV qword ptr [RBP + -0x80],RAX
	0001b7f6:CMP byte ptr [RBP + -0x101],0x0
	0001b7fd:JZ 0x0001b813
	0001b7ff:LEA RAX,[0x3e1f0]
	0001b806:MOV RAX,qword ptr [RAX]
	0001b809:SUB RAX,qword ptr [RBP + -0x80]
	0001b80d:ADD RAX,0x1
	0001b811:JMP 0x0001b81a
	0001b813:MOV RAX,qword ptr [RBP + -0xd8]
	0001b81a:LEA RDX,[0x3e1f0]
	0001b821:MOV RDX,qword ptr [RDX]
	0001b824:LEA RCX,[RDX + 0x1]
	0001b828:MOV RDX,qword ptr [RBP + -0xb8]
	0001b82f:LEA RSI,[RDX + 0x1]
	0001b833:MOV R8,qword ptr [RBP + -0xd0]
	0001b83a:MOV RDX,qword ptr [RBP + -0x80]
	0001b83e:SUB RSP,0x8
	0001b842:LEA RDI,[RBP + -0x100]
	0001b849:PUSH RDI
	0001b84a:MOV R9,R8
	0001b84d:MOV R8,RAX
	0001b850:MOV EDI,0x1
	0001b855:CALL 0x0001a287
	0001b85a:ADD RSP,0x10
	0001b85e:MOV qword ptr [RBP + -0x78],RAX
	0001b862:MOV RAX,qword ptr [RBP + -0x78]
	0001b866:CMP RAX,qword ptr [RBP + -0xd0]
	0001b86d:JG 0x0001b8c8
	0001b86f:MOV RAX,qword ptr [RBP + -0x100]
	0001b876:SUB RAX,qword ptr [RBP + -0x80]
	0001b87a:CMP qword ptr [RBP + -0xe0],RAX
	0001b881:JGE 0x0001b8c8
	0001b883:MOV RAX,qword ptr [RBP + -0x100]
	0001b88a:SUB RAX,qword ptr [RBP + -0x80]
	0001b88e:MOV qword ptr [RBP + -0xe0],RAX
	0001b895:MOV RAX,qword ptr [RBP + -0x80]
	0001b899:MOV qword ptr [RBP + -0xe8],RAX
	0001b8a0:CMP qword ptr [RBP + -0x78],0x0
	0001b8a5:JZ 0x0001b8e9
	0001b8a7:MOV RAX,qword ptr [RBP + -0x100]
	0001b8ae:SUB RAX,qword ptr [RBP + -0x80]
	0001b8b2:MOV qword ptr [RBP + -0xd8],RAX
	0001b8b9:MOV RAX,qword ptr [RBP + -0x78]
	0001b8bd:SUB RAX,0x1
	0001b8c1:MOV qword ptr [RBP + -0xd0],RAX
	0001b8c8:ADD qword ptr [RBP + -0xc8],0x1
	0001b8d0:MOV RAX,qword ptr [RBP + -0xc8]
	0001b8d7:CMP RAX,qword ptr [RBP + -0x98]
	0001b8de:JLE 0x0001b6a2
END_OF_LINE
----------------------------------------------
71: if (offset <= max_pos_offset) {
	0001b6b0:JG 0x0001b7c2
END_OF_LINE
----------------------------------------------
72: guess = offset + first_guess;
	0001b6c4:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
73: lVar6 = min;
	0001b6d5:JZ 0x0001b6ee
END_OF_LINE
----------------------------------------------
74: if (lVar2 < 0) {
	0001b6ce:CMP byte ptr [RBP + -0x101],0x0
	0001b6d5:JZ 0x0001b6ee
END_OF_LINE
----------------------------------------------
75: lVar6 = (input_lines - guess) + 1;
	0001b6e1:SUB RAX,qword ptr [RBP + -0x90]
	0001b6e8:ADD RAX,0x1
	0001b6ec:JMP 0x0001b6f5
END_OF_LINE
----------------------------------------------
77: changes = bestmatch(1,pat_lines + 1,guess,input_lines + 1,lVar6,max,&last);
	0001b6ff:LEA RCX,[RDX + 0x1]
	0001b703:MOV RDX,qword ptr [RBP + -0xb8]
	0001b70a:LEA RSI,[RDX + 0x1]
	0001b70e:MOV R8,qword ptr [RBP + -0xd0]
	0001b715:MOV RDX,qword ptr [RBP + -0x90]
	0001b71c:SUB RSP,0x8
	0001b720:LEA RDI,[RBP + -0x100]
	0001b727:PUSH RDI
	0001b728:MOV R9,R8
	0001b72b:MOV R8,RAX
	0001b72e:MOV EDI,0x1
	0001b733:CALL 0x0001a287
END_OF_LINE
----------------------------------------------
78: if ((changes <= max) && (max_matched < last - guess)) {
	0001b751:JG 0x0001b7c2
	0001b753:MOV RAX,qword ptr [RBP + -0x100]
	0001b75a:SUB RAX,qword ptr [RBP + -0x90]
	0001b761:CMP qword ptr [RBP + -0xe0],RAX
	0001b768:JGE 0x0001b7c2
END_OF_LINE
----------------------------------------------
79: max_matched = last - guess;
	0001b771:SUB RAX,qword ptr [RBP + -0x90]
END_OF_LINE
----------------------------------------------
80: where = guess;
	0001b786:MOV qword ptr [RBP + -0xe8],RAX
END_OF_LINE
----------------------------------------------
81: if (changes == 0) break;
	0001b78d:CMP qword ptr [RBP + -0x88],0x0
	0001b795:JZ 0x0001b8e6
END_OF_LINE
----------------------------------------------
82: min = last - guess;
	0001b7a2:SUB RAX,qword ptr [RBP + -0x90]
END_OF_LINE
----------------------------------------------
83: max = changes + -1;
	0001b7b7:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
86: if ((0 < offset) && (offset <= max_neg_offset)) {
	0001b7ca:JLE 0x0001b8c8
	0001b7d0:MOV RAX,qword ptr [RBP + -0xc8]
	0001b7d7:CMP RAX,qword ptr [RBP + -0xf0]
	0001b7de:JG 0x0001b8c8
END_OF_LINE
----------------------------------------------
87: guess_1 = first_guess - offset;
	0001b7eb:SUB RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
88: lVar6 = min;
	0001b7fd:JZ 0x0001b813
END_OF_LINE
----------------------------------------------
89: if (lVar2 < 0) {
	0001b7f6:CMP byte ptr [RBP + -0x101],0x0
	0001b7fd:JZ 0x0001b813
END_OF_LINE
----------------------------------------------
90: lVar6 = (input_lines - guess_1) + 1;
	0001b809:SUB RAX,qword ptr [RBP + -0x80]
	0001b80d:ADD RAX,0x1
	0001b811:JMP 0x0001b81a
END_OF_LINE
----------------------------------------------
92: changes_1 = bestmatch(1,pat_lines + 1,guess_1,input_lines + 1,lVar6,max,&last);
	0001b824:LEA RCX,[RDX + 0x1]
	0001b828:MOV RDX,qword ptr [RBP + -0xb8]
	0001b82f:LEA RSI,[RDX + 0x1]
	0001b833:MOV R8,qword ptr [RBP + -0xd0]
	0001b83a:MOV RDX,qword ptr [RBP + -0x80]
	0001b83e:SUB RSP,0x8
	0001b842:LEA RDI,[RBP + -0x100]
	0001b849:PUSH RDI
	0001b84a:MOV R9,R8
	0001b84d:MOV R8,RAX
	0001b850:MOV EDI,0x1
	0001b855:CALL 0x0001a287
END_OF_LINE
----------------------------------------------
93: if ((changes_1 <= max) && (max_matched < last - guess_1)) {
	0001b86d:JG 0x0001b8c8
	0001b86f:MOV RAX,qword ptr [RBP + -0x100]
	0001b876:SUB RAX,qword ptr [RBP + -0x80]
	0001b87a:CMP qword ptr [RBP + -0xe0],RAX
	0001b881:JGE 0x0001b8c8
END_OF_LINE
----------------------------------------------
94: max_matched = last - guess_1;
	0001b88a:SUB RAX,qword ptr [RBP + -0x80]
END_OF_LINE
----------------------------------------------
95: where = guess_1;
	0001b899:MOV qword ptr [RBP + -0xe8],RAX
END_OF_LINE
----------------------------------------------
96: if (changes_1 == 0) break;
	0001b8a0:CMP qword ptr [RBP + -0x78],0x0
	0001b8a5:JZ 0x0001b8e9
END_OF_LINE
----------------------------------------------
97: min = last - guess_1;
	0001b8ae:SUB RAX,qword ptr [RBP + -0x80]
END_OF_LINE
----------------------------------------------
98: max = changes_1 + -1;
	0001b8bd:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
102: if ((debug & 1U) != 0) {
	0001b8f3:AND EAX,0x1
	0001b8f6:TEST EAX,EAX
	0001b8f8:JZ 0x0001b968
END_OF_LINE
----------------------------------------------
103: pcVar3 = format_linenum(numbuf1,max + 1);
	0001b901:LEA RDX,[RAX + 0x1]
	0001b905:LEA RAX,[RBP + -0x30]
	0001b909:MOV RSI,RDX
	0001b90c:MOV RDI,RAX
	0001b90f:CALL 0x00018472
END_OF_LINE
----------------------------------------------
104: pcVar4 = format_linenum(numbuf0,max_matched);
	0001b91e:LEA RAX,[RBP + -0x50]
	0001b922:MOV RSI,RDX
	0001b925:MOV RDI,RAX
	0001b928:CALL 0x00018472
END_OF_LINE
----------------------------------------------
105: pcVar7 = format_linenum(numbuf0_1,where);
	0001b937:LEA RAX,[RBP + -0x70]
	0001b93b:MOV RSI,RDX
	0001b93e:MOV RDI,RAX
	0001b941:CALL 0x00018472
END_OF_LINE
----------------------------------------------
106: say("where=%s matched=%s changes=%s\n",pcVar7,pcVar4,pcVar3);
	0001b95e:CALL 0x000188a8
END_OF_LINE
----------------------------------------------
109: *matched = max_matched;
	0001b977:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
110: if (where < min_where) {
	0001b988:JGE 0x0001b998
END_OF_LINE
----------------------------------------------
111: where = min_where;
	0001b991:MOV qword ptr [RBP + -0xe8],RAX
END_OF_LINE
----------------------------------------------
113: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001b9a3:SUB RDX,qword ptr FS:[0x28]
	0001b9ac:JZ 0x0001b9b3
END_OF_LINE
----------------------------------------------
114: return where;
	0001b998:MOV RAX,qword ptr [RBP + -0xe8]
	0001b99f:MOV RDX,qword ptr [RBP + -0x18]
	0001b9a3:SUB RDX,qword ptr FS:[0x28]
	0001b9ac:JZ 0x0001b9b3
	0001b9ae:CALL 0x00005b00
	0001b9b3:LEA RSP,[RBP + -0x10]
	0001b9b7:POP RBX
	0001b9b8:POP R12
	0001b9ba:POP RBP
	0001b9bb:RET
END_OF_LINE
----------------------------------------------
117: __stack_chk_fail();
	0001b9ae:CALL 0x00005b00
END_OF_LINE



Function: print_linerange
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001b9d1:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: if (from < to) {
	0001b9e8:JG 0x0001ba16
END_OF_LINE
----------------------------------------------
16: pcVar2 = format_linenum(numbuf1,to);
	0001ba1a:LEA RAX,[RBP + -0x30]
	0001ba1e:MOV RSI,RDX
	0001ba21:MOV RDI,RAX
	0001ba24:CALL 0x00018472
END_OF_LINE
----------------------------------------------
17: pcVar3 = format_linenum(numbuf0,from);
	0001ba30:LEA RAX,[RBP + -0x50]
	0001ba34:MOV RSI,RDX
	0001ba37:MOV RDI,RAX
	0001ba3a:CALL 0x00018472
END_OF_LINE
----------------------------------------------
18: printf("%s-%s",pcVar3,pcVar2);
	0001ba54:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
21: pcVar2 = format_linenum(numbuf0,from);
	0001b9ee:LEA RAX,[RBP + -0x50]
	0001b9f2:MOV RSI,RDX
	0001b9f5:MOV RDI,RAX
	0001b9f8:CALL 0x00018472
END_OF_LINE
----------------------------------------------
22: printf("%s",pcVar2);
	0001ba0f:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
24: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001ba5e:SUB RAX,qword ptr FS:[0x28]
	0001ba67:JZ 0x0001ba6e
END_OF_LINE
----------------------------------------------
26: __stack_chk_fail();
	0001ba69:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
28: return;
	0001ba73:RET
END_OF_LINE



Function: merge_result
----------------------------------------------
11: if ((*first_result == false) || (what == (char *)0x0)) {
	0001ba97:MOVZX EAX,byte ptr [RAX]
	0001ba9a:TEST AL,AL
	0001ba9c:JZ 0x0001bad2
	0001ba9e:CMP qword ptr [RBP + -0x18],0x0
	0001baa3:JZ 0x0001bad2
END_OF_LINE
----------------------------------------------
12: if (what == (char *)0x0) {
	0001bad2:CMP qword ptr [RBP + -0x18],0x0
	0001bad7:JNZ 0x0001bb30
END_OF_LINE
----------------------------------------------
13: if (*first_result == true) {
	0001badd:MOVZX EAX,byte ptr [RAX]
	0001bae0:XOR EAX,0x1
	0001bae3:TEST AL,AL
	0001bae5:JZ 0x0001bba7
END_OF_LINE
----------------------------------------------
14: return;
	0001bba9:RET
END_OF_LINE
----------------------------------------------
16: fwrite(&DAT_000342a9,1,2,pFRam0000000000144070);
	0001bb0c:CALL 0x00006010
END_OF_LINE
----------------------------------------------
17: fflush(pFRam0000000000144070);
	0001bb1e:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
18: merge_result::last_what = (char *)0x0;
	0001bba9:RET
END_OF_LINE
----------------------------------------------
19: return;
	0001bba9:RET
END_OF_LINE
----------------------------------------------
21: if (what == merge_result::last_what) {
	0001bb37:CMP qword ptr [RBP + -0x18],RAX
	0001bb3b:JNZ 0x0001bb56
END_OF_LINE
----------------------------------------------
22: fputc(0x2c,pFRam0000000000144070);
	0001bb4f:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
25: printf(", %s at ",what);
	0001bb6c:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
29: printf("Hunk #%d %s at ",(ulong)(uint)hunk,what);
	0001baac:MOV ESI,EAX
	0001baae:LEA RAX,[0x34299]
	0001bab5:MOV RDI,RAX
	0001bab8:MOV EAX,0x0
	0001babd:CALL 0x00005b70
END_OF_LINE
----------------------------------------------
30: merge_result::last_what = what;
	0001bacd:JMP 0x0001bb71
END_OF_LINE
----------------------------------------------
32: print_linerange(from + out_offset,out_offset + to);
	0001bb7f:ADD RDX,RAX
	0001bb82:LEA RAX,[0x3e390]
	0001bb89:MOV RCX,qword ptr [RAX]
	0001bb8c:MOV RAX,qword ptr [RBP + -0x20]
	0001bb90:ADD RAX,RCX
	0001bb93:MOV RSI,RDX
	0001bb96:MOV RDI,RAX
	0001bb99:CALL 0x0001b9bc
END_OF_LINE
----------------------------------------------
33: *first_result = false;
	0001bba2:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
34: return;
	0001bba9:RET
END_OF_LINE



Function: merge_hunk
----------------------------------------------
41: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001bbd5:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
42: first_result = true;
	0001bbe4:MOV byte ptr [RBP + -0xdb],0x1
END_OF_LINE
----------------------------------------------
43: fp = outstate->ofp;
	0001bbf2:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
44: old = 1;
	0001bbf9:MOV qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
45: firstold = pch_ptrn_lines();
	0001bc04:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
46: new = firstold + 1;
	0001bc17:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
47: firstnew = pch_end();
	0001bc22:CALL 0x00013c37
END_OF_LINE
----------------------------------------------
48: pch_normalize(UNI_DIFF);
	0001bc33:CALL 0x0001457c
END_OF_LINE
----------------------------------------------
49: cVar2 = pch_char(firstnew + 1);
	0001bc3f:ADD RAX,0x1
	0001bc43:MOV RDI,RAX
	0001bc46:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
50: if (cVar2 != '^') {
	0001bc4b:CMP AL,0x5e
	0001bc4d:JZ 0x0001bc7f
END_OF_LINE
----------------------------------------------
52: __assert_fail("pch_char (firstnew + 1) == \'^\'","merge.c",0xda,"merge_hunk");
	0001bc72:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
54: while ((cVar2 = pch_char(new), cVar2 == '=' || (cVar2 = pch_char(new), cVar2 == '\n'))) {
	0001bc89:CALL 0x00013c8d
	0001bc8e:CMP AL,0x3d
	0001bc90:JZ 0x0001bc77
	0001bc92:MOV RAX,qword ptr [RBP + -0xb8]
	0001bc99:MOV RDI,RAX
	0001bc9c:CALL 0x00013c8d
	0001bca1:CMP AL,0xa
	0001bca3:JZ 0x0001bc77
END_OF_LINE
----------------------------------------------
55: new = new + 1;
	0001bc77:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
57: if (where == 0) {
	0001bca5:CMP qword ptr [RBP + -0xf8],0x0
	0001bcad:JZ 0x0001bcc4
END_OF_LINE
----------------------------------------------
58: where_local = locate_merge(&matched);
	0001bcc4:LEA RAX,[RBP + -0xd8]
	0001bccb:MOV RDI,RAX
	0001bcce:CALL 0x0001b49c
END_OF_LINE
----------------------------------------------
59: applies_cleanly = false;
	0001bcda:MOV byte ptr [RBP + -0xda],0x0
END_OF_LINE
----------------------------------------------
62: applies_cleanly = true;
	0001bcaf:MOV byte ptr [RBP + -0xda],0x1
END_OF_LINE
----------------------------------------------
63: matched = pch_ptrn_lines();
	0001bcb6:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
64: where_local = where;
	0001bcc2:JMP 0x0001bce1
END_OF_LINE
----------------------------------------------
66: in = firstold + 2;
	0001bce8:ADD RAX,0x2
END_OF_LINE
----------------------------------------------
67: oldin = (char *)xmalloc(in + matched + 1);
	0001bd01:ADD RAX,RDX
	0001bd04:ADD RAX,0x1
	0001bd08:MOV RDI,RAX
	0001bd0b:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
68: memset(oldin,0x20,in + matched);
	0001bd22:ADD RAX,RDX
	0001bd25:MOV RDX,RAX
	0001bd28:MOV RAX,qword ptr [RBP + -0x70]
	0001bd2c:MOV ESI,0x20
	0001bd31:MOV RDI,RAX
	0001bd34:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
69: *oldin = '*';
	0001bd3d:MOV byte ptr [RAX],0x2a
END_OF_LINE
----------------------------------------------
70: oldin[in + -1] = '=';
	0001bd47:LEA RDX,[RAX + -0x1]
	0001bd4b:MOV RAX,qword ptr [RBP + -0x70]
	0001bd4f:ADD RAX,RDX
	0001bd52:MOV byte ptr [RAX],0x3d
END_OF_LINE
----------------------------------------------
71: oldin[in + matched] = '^';
	0001bd63:ADD RAX,RDX
	0001bd66:MOV RDX,RAX
	0001bd69:MOV RAX,qword ptr [RBP + -0x70]
	0001bd6d:ADD RAX,RDX
	0001bd70:MOV byte ptr [RAX],0x5e
END_OF_LINE
----------------------------------------------
72: compute_changes(old,in + -1,where_local,matched + where_local,oldin + old,oldin + in);
	0001bd7e:LEA R8,[RDX + RAX*0x1]
	0001bd82:MOV RDX,qword ptr [RBP + -0xc8]
	0001bd89:MOV RAX,qword ptr [RBP + -0x70]
	0001bd8d:LEA RDI,[RDX + RAX*0x1]
	0001bd91:MOV RDX,qword ptr [RBP + -0xd8]
	0001bd98:MOV RAX,qword ptr [RBP + -0xf8]
	0001bd9f:LEA RCX,[RDX + RAX*0x1]
	0001bda3:MOV RAX,qword ptr [RBP + -0xa8]
	0001bdaa:LEA RSI,[RAX + -0x1]
	0001bdae:MOV RDX,qword ptr [RBP + -0xf8]
	0001bdb5:MOV RAX,qword ptr [RBP + -0xc8]
	0001bdbc:MOV R9,R8
	0001bdbf:MOV R8,RDI
	0001bdc2:MOV RDI,RAX
	0001bdc5:CALL 0x0001cf3b
END_OF_LINE
----------------------------------------------
73: if ((debug & 2U) != 0) {
	0001bdd3:AND EAX,0x2
	0001bdd6:TEST EAX,EAX
	0001bdd8:JZ 0x0001c056
END_OF_LINE
----------------------------------------------
74: fputc(10,pFRam0000000000144490);
	0001bdf0:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
75: for (n = 0; n <= in + matched; n = n + 1) {
	0001bdf5:MOV qword ptr [RBP + -0x90],0x0
	0001be00:JMP 0x0001c026
	0001be05:MOV RDX,qword ptr [RBP + -0x90]
	0001be0c:MOV RAX,qword ptr [RBP + -0x70]
	0001be10:ADD RAX,RDX
	0001be13:MOVZX EAX,byte ptr [RAX]
	0001be16:MOVSX EBX,AL
	0001be19:MOV RDX,qword ptr [RBP + -0x90]
	0001be20:LEA RAX,[RBP + -0x50]
	0001be24:MOV RSI,RDX
	0001be27:MOV RDI,RAX
	0001be2a:CALL 0x00018472
	0001be2f:MOV RDX,RAX
	0001be32:MOV RAX,qword ptr [0x0003dfe0]
	0001be39:MOV RAX,qword ptr [RAX]
	0001be3c:MOV ECX,EBX
	0001be3e:LEA RSI,[0x342df]
	0001be45:MOV RDI,RAX
	0001be48:MOV EAX,0x0
	0001be4d:CALL 0x00005d30
	0001be52:CMP qword ptr [RBP + -0x90],0x0
	0001be5a:JNZ 0x0001beb6
	0001be5c:CALL 0x00013c04
	0001be61:MOV RDX,RAX
	0001be64:LEA RAX,[RBP + -0x30]
	0001be68:MOV RSI,RDX
	0001be6b:MOV RDI,RAX
	0001be6e:CALL 0x00018472
	0001be73:MOV RBX,RAX
	0001be76:CALL 0x00013bf3
	0001be7b:MOV RDX,RAX
	0001be7e:LEA RAX,[RBP + -0x50]
	0001be82:MOV RSI,RDX
	0001be85:MOV RDI,RAX
	0001be88:CALL 0x00018472
	0001be8d:MOV RDX,RAX
	0001be90:MOV RAX,qword ptr [0x0003dfe0]
	0001be97:MOV RAX,qword ptr [RAX]
	0001be9a:MOV RCX,RBX
	0001be9d:LEA RSI,[0x342e5]
	0001bea4:MOV RDI,RAX
	0001bea7:MOV EAX,0x0
	0001beac:CALL 0x00005d30
	0001beb1:JMP 0x0001c01e
	0001beb6:MOV RAX,qword ptr [RBP + -0x90]
	0001bebd:CMP RAX,qword ptr [RBP + -0xc0]
	0001bec4:JG 0x0001bf0f
	0001bec6:MOV RAX,qword ptr [RBP + -0x90]
	0001becd:MOV RDI,RAX
	0001bed0:CALL 0x00013cac
	0001bed5:MOV RBX,RAX
	0001bed8:MOV RAX,qword ptr [RBP + -0x90]
	0001bedf:MOV RDI,RAX
	0001bee2:CALL 0x00013c6a
	0001bee7:MOV EDX,EAX
	0001bee9:MOV RAX,qword ptr [0x0003dfe0]
	0001bef0:MOV RAX,qword ptr [RAX]
	0001bef3:MOV RCX,RBX
	0001bef6:LEA RSI,[0x342ed]
	0001befd:MOV RDI,RAX
	0001bf00:MOV EAX,0x0
	0001bf05:CALL 0x00005d30
	0001bf0a:JMP 0x0001c01e
	0001bf0f:MOV RAX,qword ptr [RBP + -0xa8]
	0001bf16:SUB RAX,0x1
	0001bf1a:CMP qword ptr [RBP + -0x90],RAX
	0001bf21:JNZ 0x0001bf7b
	0001bf23:MOV RDX,qword ptr [RBP + -0xd8]
	0001bf2a:LEA RAX,[RBP + -0x30]
	0001bf2e:MOV RSI,RDX
	0001bf31:MOV RDI,RAX
	0001bf34:CALL 0x00018472
	0001bf39:MOV RBX,RAX
	0001bf3c:MOV RDX,qword ptr [RBP + -0xf8]
	0001bf43:LEA RAX,[RBP + -0x50]
	0001bf47:MOV RSI,RDX
	0001bf4a:MOV RDI,RAX
	0001bf4d:CALL 0x00018472
	0001bf52:MOV RDX,RAX
	0001bf55:MOV RAX,qword ptr [0x0003dfe0]
	0001bf5c:MOV RAX,qword ptr [RAX]
	0001bf5f:MOV RCX,RBX
	0001bf62:LEA RSI,[0x342e5]
	0001bf69:MOV RDI,RAX
	0001bf6c:MOV EAX,0x0
	0001bf71:CALL 0x00005d30
	0001bf76:JMP 0x0001c01e
	0001bf7b:MOV RAX,qword ptr [RBP + -0x90]
	0001bf82:CMP RAX,qword ptr [RBP + -0xa8]
	0001bf89:JL 0x0001c007
	0001bf8b:MOV RDX,qword ptr [RBP + -0xd8]
	0001bf92:MOV RAX,qword ptr [RBP + -0xa8]
	0001bf99:ADD RAX,RDX
	0001bf9c:CMP qword ptr [RBP + -0x90],RAX
	0001bfa3:JGE 0x0001c007
	0001bfa5:MOV RDX,qword ptr [RBP + -0xf8]
	0001bfac:MOV RAX,qword ptr [RBP + -0x90]
	0001bfb3:ADD RAX,RDX
	0001bfb6:SUB RAX,qword ptr [RBP + -0xa8]
	0001bfbd:LEA RDX,[RBP + -0xd0]
	0001bfc4:MOV ESI,0x0
	0001bfc9:MOV RDI,RAX
	0001bfcc:CALL 0x000071c6
	0001bfd1:MOV qword ptr [RBP + -0x68],RAX
	0001bfd5:MOV RAX,qword ptr [RBP + -0xd0]
	0001bfdc:MOV ESI,EAX
	0001bfde:MOV RAX,qword ptr [0x0003dfe0]
	0001bfe5:MOV RAX,qword ptr [RAX]
	0001bfe8:MOV RDX,qword ptr [RBP + -0x68]
	0001bfec:MOV RCX,RDX
	0001bfef:MOV EDX,ESI
	0001bff1:LEA RSI,[0x342ed]
	0001bff8:MOV RDI,RAX
	0001bffb:MOV EAX,0x0
	0001c000:CALL 0x00005d30
	0001c005:JMP 0x0001c01e
	0001c007:MOV RAX,qword ptr [0x0003dfe0]
	0001c00e:MOV RAX,qword ptr [RAX]
	0001c011:MOV RSI,RAX
	0001c014:MOV EDI,0xa
	0001c019:CALL 0x00005c60
	0001c01e:ADD qword ptr [RBP + -0x90],0x1
	0001c026:MOV RDX,qword ptr [RBP + -0xd8]
	0001c02d:MOV RAX,qword ptr [RBP + -0xa8]
	0001c034:ADD RAX,RDX
	0001c037:CMP qword ptr [RBP + -0x90],RAX
	0001c03e:JLE 0x0001be05
END_OF_LINE
----------------------------------------------
76: cVar2 = oldin[n];
	0001be10:ADD RAX,RDX
	0001be13:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
77: pcVar5 = format_linenum(numbuf0,n);
	0001be20:LEA RAX,[RBP + -0x50]
	0001be24:MOV RSI,RDX
	0001be27:MOV RDI,RAX
	0001be2a:CALL 0x00018472
END_OF_LINE
----------------------------------------------
78: fprintf(pFRam0000000000144490,"%s %c",pcVar5,(ulong)(uint)(int)cVar2);
	0001be16:MOVSX EBX,AL
	0001be19:MOV RDX,qword ptr [RBP + -0x90]
	0001be20:LEA RAX,[RBP + -0x50]
	0001be24:MOV RSI,RDX
	0001be27:MOV RDI,RAX
	0001be2a:CALL 0x00018472
	0001be2f:MOV RDX,RAX
	0001be32:MOV RAX,qword ptr [0x0003dfe0]
	0001be39:MOV RAX,qword ptr [RAX]
	0001be3c:MOV ECX,EBX
	0001be3e:LEA RSI,[0x342df]
	0001be45:MOV RDI,RAX
	0001be48:MOV EAX,0x0
	0001be4d:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
79: if (n == 0) {
	0001be52:CMP qword ptr [RBP + -0x90],0x0
	0001be5a:JNZ 0x0001beb6
END_OF_LINE
----------------------------------------------
80: lVar6 = pch_ptrn_lines();
	0001be5c:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
81: pcVar5 = format_linenum(numbuf1,lVar6);
	0001be64:LEA RAX,[RBP + -0x30]
	0001be68:MOV RSI,RDX
	0001be6b:MOV RDI,RAX
	0001be6e:CALL 0x00018472
END_OF_LINE
----------------------------------------------
82: lVar6 = pch_first();
	0001be76:CALL 0x00013bf3
END_OF_LINE
----------------------------------------------
83: pcVar7 = format_linenum(numbuf0,lVar6);
	0001be7e:LEA RAX,[RBP + -0x50]
	0001be82:MOV RSI,RDX
	0001be85:MOV RDI,RAX
	0001be88:CALL 0x00018472
END_OF_LINE
----------------------------------------------
84: fprintf(pFRam0000000000144490," %s,%s\n",pcVar7,pcVar5);
	0001beac:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
86: else if (firstold < n) {
	0001bec4:JG 0x0001bf0f
END_OF_LINE
----------------------------------------------
87: if (n == in + -1) {
	0001bf16:SUB RAX,0x1
	0001bf1a:CMP qword ptr [RBP + -0x90],RAX
	0001bf21:JNZ 0x0001bf7b
END_OF_LINE
----------------------------------------------
88: pcVar5 = format_linenum(numbuf1,matched);
	0001bf2a:LEA RAX,[RBP + -0x30]
	0001bf2e:MOV RSI,RDX
	0001bf31:MOV RDI,RAX
	0001bf34:CALL 0x00018472
END_OF_LINE
----------------------------------------------
89: pcVar7 = format_linenum(numbuf0,where_local);
	0001bf43:LEA RAX,[RBP + -0x50]
	0001bf47:MOV RSI,RDX
	0001bf4a:MOV RDI,RAX
	0001bf4d:CALL 0x00018472
END_OF_LINE
----------------------------------------------
90: fprintf(pFRam0000000000144490," %s,%s\n",pcVar7,pcVar5);
	0001bf71:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
92: else if ((n < in) || (in + matched <= n)) {
	0001bf89:JL 0x0001c007
	0001bf8b:MOV RDX,qword ptr [RBP + -0xd8]
	0001bf92:MOV RAX,qword ptr [RBP + -0xa8]
	0001bf99:ADD RAX,RDX
	0001bf9c:CMP qword ptr [RBP + -0x90],RAX
	0001bfa3:JGE 0x0001c007
END_OF_LINE
----------------------------------------------
93: fputc(10,pFRam0000000000144490);
	0001c019:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
96: line = ifetch((n + where_local) - in,false,&size);
	0001bfb3:ADD RAX,RDX
	0001bfb6:SUB RAX,qword ptr [RBP + -0xa8]
	0001bfbd:LEA RDX,[RBP + -0xd0]
	0001bfc4:MOV ESI,0x0
	0001bfc9:MOV RDI,RAX
	0001bfcc:CALL 0x000071c6
END_OF_LINE
----------------------------------------------
97: fprintf(pFRam0000000000144490," |%.*s",size & 0xffffffff,line);
	0001bfdc:MOV ESI,EAX
	0001bfde:MOV RAX,qword ptr [0x0003dfe0]
	0001bfe5:MOV RAX,qword ptr [RAX]
	0001bfe8:MOV RDX,qword ptr [RBP + -0x68]
	0001bfec:MOV RCX,RDX
	0001bfef:MOV EDX,ESI
	0001bff1:LEA RSI,[0x342ed]
	0001bff8:MOV RDI,RAX
	0001bffb:MOV EAX,0x0
	0001c000:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
101: pcVar5 = pfetch(n);
	0001bed0:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
102: sVar8 = pch_line_len(n);
	0001bee2:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
103: fprintf(pFRam0000000000144490," |%.*s",sVar8 & 0xffffffff,pcVar5);
	0001bee7:MOV EDX,EAX
	0001bee9:MOV RAX,qword ptr [0x0003dfe0]
	0001bef0:MOV RAX,qword ptr [RAX]
	0001bef3:MOV RCX,RBX
	0001bef6:LEA RSI,[0x342ed]
	0001befd:MOV RDI,RAX
	0001bf00:MOV EAX,0x0
	0001bf05:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
106: fflush(pFRam0000000000144490);
	0001c051:CALL 0x00005e00
END_OF_LINE
----------------------------------------------
108: if ((where_local + -1 <= last_frozen_line) ||
	0001c05d:LEA RDX,[RAX + -0x1]
	0001c061:LEA RAX,[0x3e398]
	0001c068:MOV RAX,qword ptr [RAX]
	0001c06b:CMP RDX,RAX
	0001c06e:JLE 0x0001c09e
	0001c070:MOV RAX,qword ptr [RBP + -0xf8]
	0001c077:LEA RDX,[RAX + -0x1]
	0001c07b:MOV RAX,qword ptr [RBP + -0xf0]
	0001c082:MOV RSI,RDX
	0001c085:MOV RDI,RAX
	0001c088:CALL 0x0000b8b9
	0001c08d:XOR EAX,0x1
	0001c090:TEST AL,AL
	0001c092:JZ 0x0001c09e
END_OF_LINE
----------------------------------------------
109: (_Var3 = copy_till(outstate,where_local + -1), _Var3)) {
	0001c077:LEA RDX,[RAX + -0x1]
	0001c07b:MOV RAX,qword ptr [RBP + -0xf0]
	0001c082:MOV RSI,RDX
	0001c085:MOV RDI,RAX
	0001c088:CALL 0x0000b8b9
	0001c08d:XOR EAX,0x1
	0001c090:TEST AL,AL
	0001c092:JZ 0x0001c09e
END_OF_LINE
----------------------------------------------
110: LAB_0001c09e:
	0001c09e:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
112: while( true ) {
	0001c0f0:JNZ 0x0001c32f
END_OF_LINE
----------------------------------------------
113: firstold = old;
	0001c0a5:MOV qword ptr [RBP + -0xc0],RAX
END_OF_LINE
----------------------------------------------
114: firstnew = new;
	0001c0b3:MOV qword ptr [RBP + -0xb0],RAX
END_OF_LINE
----------------------------------------------
115: firstin = in;
	0001c0c1:MOV qword ptr [RBP + -0xa0],RAX
END_OF_LINE
----------------------------------------------
116: cVar2 = pch_char(old);
	0001c0d2:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
117: if ((cVar2 != '-') && (cVar2 = pch_char(new), cVar2 != '+')) break;
	0001c0d7:CMP AL,0x2d
	0001c0d9:JZ 0x0001c18f
	0001c0df:MOV RAX,qword ptr [RBP + -0xb8]
	0001c0e6:MOV RDI,RAX
	0001c0e9:CALL 0x00013c8d
	0001c0ee:CMP AL,0x2b
	0001c0f0:JNZ 0x0001c32f
END_OF_LINE
----------------------------------------------
118: while (cVar2 = pch_char(old), cVar2 == '-') {
	0001c199:CALL 0x00013c8d
	0001c19e:CMP AL,0x2d
	0001c1a0:JZ 0x0001c0fb
END_OF_LINE
----------------------------------------------
119: if ((oldin[old] == '-') || (oldin[in] == '+')) goto LAB_0001c610;
	0001c106:ADD RAX,RDX
	0001c109:MOVZX EAX,byte ptr [RAX]
	0001c10c:CMP AL,0x2d
	0001c10e:JZ 0x0001c606
	0001c114:MOV RDX,qword ptr [RBP + -0xa8]
	0001c11b:MOV RAX,qword ptr [RBP + -0x70]
	0001c11f:ADD RAX,RDX
	0001c122:MOVZX EAX,byte ptr [RAX]
	0001c125:CMP AL,0x2b
	0001c127:JZ 0x0001c606
	0001c12d:MOV RDX,qword ptr [RBP + -0xc8]
	0001c134:MOV RAX,qword ptr [RBP + -0x70]
	0001c138:ADD RAX,RDX
	0001c13b:MOVZX EAX,byte ptr [RAX]
	0001c13e:CMP AL,0x20
	0001c140:JNZ 0x0001c187
	0001c142:MOV RDX,qword ptr [RBP + -0xa8]
	0001c149:MOV RAX,qword ptr [RBP + -0x70]
	0001c14d:ADD RAX,RDX
	0001c150:MOVZX EAX,byte ptr [RAX]
	0001c153:CMP AL,0x20
	0001c155:JZ 0x0001c17f
	0001c157:LEA RAX,[0x34478]
	0001c15e:MOV RCX,RAX
	0001c161:MOV EDX,0x12c
	0001c166:LEA RAX,[0x342b5]
	0001c16d:MOV RSI,RAX
	0001c170:LEA RAX,[0x342f4]
	0001c177:MOV RDI,RAX
	0001c17a:CALL 0x00005bf0
	0001c17f:ADD qword ptr [RBP + -0xa8],0x1
	0001c187:ADD qword ptr [RBP + -0xc8],0x1
	0001c18f:MOV RAX,qword ptr [RBP + -0xc8]
	0001c196:MOV RDI,RAX
	0001c199:CALL 0x00013c8d
	0001c19e:CMP AL,0x2d
	0001c1a0:JZ 0x0001c0fb
	0001c1a6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c1ad:MOV RAX,qword ptr [RBP + -0x70]
	0001c1b1:ADD RAX,RDX
	0001c1b4:MOVZX EAX,byte ptr [RAX]
	0001c1b7:CMP AL,0x2d
	0001c1b9:JZ 0x0001c609
	0001c1bf:MOV RDX,qword ptr [RBP + -0xa8]
	0001c1c6:MOV RAX,qword ptr [RBP + -0x70]
	0001c1ca:ADD RAX,RDX
	0001c1cd:MOVZX EAX,byte ptr [RAX]
	0001c1d0:CMP AL,0x2b
	0001c1d2:JZ 0x0001c609
	0001c1d8:JMP 0x0001c1e2
	0001c1da:ADD qword ptr [RBP + -0xb8],0x1
	0001c1e2:MOV RAX,qword ptr [RBP + -0xb8]
	0001c1e9:MOV RDI,RAX
	0001c1ec:CALL 0x00013c8d
	0001c1f1:CMP AL,0x2b
	0001c1f3:JZ 0x0001c1da
	0001c1f5:MOV RAX,qword ptr [RBP + -0xb8]
	0001c1fc:SUB RAX,qword ptr [RBP + -0xb0]
	0001c203:MOV qword ptr [RBP + -0x60],RAX
	0001c207:LEA RAX,[0x3e35c]
	0001c20e:MOV EAX,dword ptr [RAX]
	0001c210:CMP EAX,0x2
	0001c213:JZ 0x0001c231
	0001c215:LEA RAX,[0x3e35c]
	0001c21c:MOV EAX,dword ptr [RAX]
	0001c21e:CMP EAX,0x1
	0001c221:JZ 0x0001c26c
	0001c223:MOVZX EAX,byte ptr [RBP + -0xda]
	0001c22a:XOR EAX,0x1
	0001c22d:TEST AL,AL
	0001c22f:JZ 0x0001c26c
	0001c231:MOV RDX,qword ptr [RBP + -0xf8]
	0001c238:MOV RAX,qword ptr [RBP + -0x60]
	0001c23c:ADD RAX,RDX
	0001c23f:LEA RCX,[RAX + -0x1]
	0001c243:MOV RDX,qword ptr [RBP + -0xf8]
	0001c24a:MOV ESI,dword ptr [RBP + -0xe4]
	0001c250:LEA RAX,[RBP + -0xdb]
	0001c257:MOV R8,RCX
	0001c25a:MOV RCX,RDX
	0001c25d:LEA RDX,[0x34305]
	0001c264:MOV RDI,RAX
	0001c267:CALL 0x0001ba74
	0001c26c:MOV RAX,qword ptr [RBP + -0xc8]
	0001c273:SUB RAX,qword ptr [RBP + -0xc0]
	0001c27a:MOV RDX,RAX
	0001c27d:LEA RAX,[0x3e398]
	0001c284:MOV RAX,qword ptr [RAX]
	0001c287:ADD RDX,RAX
	0001c28a:LEA RAX,[0x3e398]
	0001c291:MOV qword ptr [RAX],RDX
	0001c294:MOV RAX,qword ptr [RBP + -0xc8]
	0001c29b:SUB RAX,qword ptr [RBP + -0xc0]
	0001c2a2:ADD qword ptr [RBP + -0xf8],RAX
	0001c2a9:MOV RAX,qword ptr [RBP + -0xb8]
	0001c2b0:SUB RAX,qword ptr [RBP + -0xb0]
	0001c2b7:MOV RDX,RAX
	0001c2ba:LEA RAX,[0x3e390]
	0001c2c1:MOV RAX,qword ptr [RAX]
	0001c2c4:ADD RDX,RAX
	0001c2c7:LEA RAX,[0x3e390]
	0001c2ce:MOV qword ptr [RAX],RDX
	0001c2d1:MOV RAX,qword ptr [RBP + -0xb0]
	0001c2d8:CMP RAX,qword ptr [RBP + -0xb8]
	0001c2df:JGE 0x0001c600
	0001c2e5:JMP 0x0001c30f
	0001c2e7:MOV RDX,qword ptr [RBP + -0x78]
	0001c2eb:MOV RAX,qword ptr [RBP + -0xb0]
	0001c2f2:MOV RSI,RDX
	0001c2f5:MOV RDI,RAX
	0001c2f8:CALL 0x00013ccf
	0001c2fd:MOV RDX,qword ptr [RBP + -0xf0]
	0001c304:MOV byte ptr [RDX + 0x8],AL
	0001c307:ADD qword ptr [RBP + -0xb0],0x1
	0001c30f:MOV RAX,qword ptr [RBP + -0xb0]
	0001c316:CMP RAX,qword ptr [RBP + -0xb8]
	0001c31d:JL 0x0001c2e7
	0001c31f:MOV RAX,qword ptr [RBP + -0xf0]
	0001c326:MOV byte ptr [RAX + 0x9],0x0
	0001c32a:JMP 0x0001c600
	0001c32f:MOV RAX,qword ptr [RBP + -0xc8]
	0001c336:MOV RDI,RAX
	0001c339:CALL 0x00013c8d
	0001c33e:CMP AL,0x20
	0001c340:JNZ 0x0001c56a
	0001c346:MOV RDX,qword ptr [RBP + -0xc8]
	0001c34d:MOV RAX,qword ptr [RBP + -0x70]
	0001c351:ADD RAX,RDX
	0001c354:MOVZX EAX,byte ptr [RAX]
	0001c357:CMP AL,0x2d
	0001c359:JNZ 0x0001c425
	0001c35f:JMP 0x0001c3d8
	0001c361:MOV RDX,qword ptr [RBP + -0xc8]
	0001c368:MOV RAX,qword ptr [RBP + -0x70]
	0001c36c:ADD RAX,RDX
	0001c36f:MOVZX EAX,byte ptr [RAX]
	0001c372:CMP AL,0x2d
	0001c374:JNZ 0x0001c3f1
	0001c376:MOV RAX,qword ptr [RBP + -0xb8]
	0001c37d:MOV RDI,RAX
	0001c380:CALL 0x00013c8d
	0001c385:CMP AL,0x2b
	0001c387:JZ 0x0001c60c
	0001c38d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c394:MOV RDI,RAX
	0001c397:CALL 0x00013c8d
	0001c39c:CMP AL,0x20
	0001c39e:JZ 0x0001c3c8
	0001c3a0:LEA RAX,[0x34478]
	0001c3a7:MOV RCX,RAX
	0001c3aa:MOV EDX,0x154
	0001c3af:LEA RAX,[0x342b5]
	0001c3b6:MOV RSI,RAX
	0001c3b9:LEA RAX,[0x3430c]
	0001c3c0:MOV RDI,RAX
	0001c3c3:CALL 0x00005bf0
	0001c3c8:ADD qword ptr [RBP + -0xc8],0x1
	0001c3d0:ADD qword ptr [RBP + -0xb8],0x1
	0001c3d8:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3df:MOV RDI,RAX
	0001c3e2:CALL 0x00013c8d
	0001c3e7:CMP AL,0x20
	0001c3e9:JZ 0x0001c361
	0001c3ef:JMP 0x0001c3f2
	0001c3f1:NOP
	0001c3f2:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3f9:MOV RDI,RAX
	0001c3fc:CALL 0x00013c8d
	0001c401:CMP AL,0x2d
	0001c403:JZ 0x0001c60f
	0001c409:MOV RAX,qword ptr [RBP + -0xb8]
	0001c410:MOV RDI,RAX
	0001c413:CALL 0x00013c8d
	0001c418:CMP AL,0x2b
	0001c41a:JNZ 0x0001cd80
	0001c420:JMP 0x0001c60f
	0001c425:MOV RDX,qword ptr [RBP + -0xa8]
	0001c42c:MOV RAX,qword ptr [RBP + -0x70]
	0001c430:ADD RAX,RDX
	0001c433:MOVZX EAX,byte ptr [RAX]
	0001c436:CMP AL,0x2b
	0001c438:JNZ 0x0001c4a0
	0001c43a:JMP 0x0001c444
	0001c43c:ADD qword ptr [RBP + -0xa8],0x1
	0001c444:MOV RDX,qword ptr [RBP + -0xa8]
	0001c44b:MOV RAX,qword ptr [RBP + -0x70]
	0001c44f:ADD RAX,RDX
	0001c452:MOVZX EAX,byte ptr [RAX]
	0001c455:CMP AL,0x2b
	0001c457:JZ 0x0001c43c
	0001c459:MOV RAX,qword ptr [RBP + -0xa8]
	0001c460:SUB RAX,qword ptr [RBP + -0xa0]
	0001c467:ADD qword ptr [RBP + -0xf8],RAX
	0001c46e:MOV RAX,qword ptr [RBP + -0xf8]
	0001c475:LEA RDX,[RAX + -0x1]
	0001c479:MOV RAX,qword ptr [RBP + -0xf0]
	0001c480:MOV RSI,RDX
	0001c483:MOV RDI,RAX
	0001c486:CALL 0x0000b8b9
	0001c48b:XOR EAX,0x1
	0001c48e:TEST AL,AL
	0001c490:JZ 0x0001cd80
	0001c496:MOV EAX,0x0
	0001c49b:JMP 0x0001cdbf
	0001c4a0:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4a7:MOV RAX,qword ptr [RBP + -0x70]
	0001c4ab:ADD RAX,RDX
	0001c4ae:MOVZX EAX,byte ptr [RAX]
	0001c4b1:CMP AL,0x20
	0001c4b3:JNZ 0x0001cd80
	0001c4b9:JMP 0x0001c4d3
	0001c4bb:ADD qword ptr [RBP + -0xc8],0x1
	0001c4c3:ADD qword ptr [RBP + -0xb8],0x1
	0001c4cb:ADD qword ptr [RBP + -0xa8],0x1
	0001c4d3:MOV RAX,qword ptr [RBP + -0xc8]
	0001c4da:MOV RDI,RAX
	0001c4dd:CALL 0x00013c8d
	0001c4e2:CMP AL,0x20
	0001c4e4:JNZ 0x0001c523
	0001c4e6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4ed:MOV RAX,qword ptr [RBP + -0x70]
	0001c4f1:ADD RAX,RDX
	0001c4f4:MOVZX EAX,byte ptr [RAX]
	0001c4f7:CMP AL,0x20
	0001c4f9:JNZ 0x0001c523
	0001c4fb:MOV RAX,qword ptr [RBP + -0xb8]
	0001c502:MOV RDI,RAX
	0001c505:CALL 0x00013c8d
	0001c50a:CMP AL,0x20
	0001c50c:JNZ 0x0001c523
	0001c50e:MOV RDX,qword ptr [RBP + -0xa8]
	0001c515:MOV RAX,qword ptr [RBP + -0x70]
	0001c519:ADD RAX,RDX
	0001c51c:MOVZX EAX,byte ptr [RAX]
	0001c51f:CMP AL,0x20
	0001c521:JZ 0x0001c4bb
	0001c523:MOV RAX,qword ptr [RBP + -0xa8]
	0001c52a:SUB RAX,qword ptr [RBP + -0xa0]
	0001c531:ADD qword ptr [RBP + -0xf8],RAX
	0001c538:MOV RAX,qword ptr [RBP + -0xf8]
	0001c53f:LEA RDX,[RAX + -0x1]
	0001c543:MOV RAX,qword ptr [RBP + -0xf0]
	0001c54a:MOV RSI,RDX
	0001c54d:MOV RDI,RAX
	0001c550:CALL 0x0000b8b9
	0001c555:XOR EAX,0x1
	0001c558:TEST AL,AL
	0001c55a:JZ 0x0001cd80
	0001c560:MOV EAX,0x0
	0001c565:JMP 0x0001cdbf
	0001c56a:MOV RAX,qword ptr [RBP + -0xc8]
	0001c571:MOV RDI,RAX
	0001c574:CALL 0x00013c8d
	0001c579:CMP AL,0x3d
	0001c57b:JNZ 0x0001c590
	0001c57d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c584:MOV RDI,RAX
	0001c587:CALL 0x00013c8d
	0001c58c:CMP AL,0x5e
	0001c58e:JZ 0x0001c5b8
	0001c590:LEA RAX,[0x34478]
	0001c597:MOV RCX,RAX
	0001c59a:MOV EDX,0x179
	0001c59f:LEA RAX,[0x342b5]
	0001c5a6:MOV RSI,RAX
	0001c5a9:LEA RAX,[0x34328]
	0001c5b0:MOV RDI,RAX
	0001c5b3:CALL 0x00005bf0
	0001c5b8:NOP
	0001c5b9:LEA RAX,[RBP + -0xdb]
	0001c5c0:MOV R8D,0x0
	0001c5c6:MOV ECX,0x0
	0001c5cb:MOV EDX,0x0
	0001c5d0:MOV ESI,0x0
	0001c5d5:MOV RDI,RAX
	0001c5d8:CALL 0x0001ba74
	0001c5dd:MOV RAX,qword ptr [RBP + -0xf8]
	0001c5e4:LEA RDX,[RAX + -0x1]
	0001c5e8:LEA RAX,[0x3e398]
	0001c5ef:MOV RAX,qword ptr [RAX]
	0001c5f2:CMP RDX,RAX
	0001c5f5:JZ 0x0001cdae
	0001c5fb:JMP 0x0001cd86
	0001c600:NOP
	0001c601:JMP 0x0001cd80
	0001c606:NOP
	0001c607:JMP 0x0001c610
	0001c609:NOP
	0001c60a:JMP 0x0001c610
	0001c60c:NOP
	0001c60d:JMP 0x0001c610
	0001c60f:NOP
	0001c610:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
120: if (oldin[old] == ' ') {
	0001c138:ADD RAX,RDX
	0001c13b:MOVZX EAX,byte ptr [RAX]
	0001c13e:CMP AL,0x20
	0001c140:JNZ 0x0001c187
END_OF_LINE
----------------------------------------------
121: if (oldin[in] != ' ') {
	0001c14d:ADD RAX,RDX
	0001c150:MOVZX EAX,byte ptr [RAX]
	0001c153:CMP AL,0x20
	0001c155:JZ 0x0001c17f
END_OF_LINE
----------------------------------------------
123: __assert_fail("oldin[in] == \' \'","merge.c",300,"merge_hunk");
	0001c17a:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
125: in = in + 1;
	0001c17f:ADD qword ptr [RBP + -0xa8],0x1
END_OF_LINE
----------------------------------------------
127: old = old + 1;
	0001c187:ADD qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
129: if ((oldin[old] == '-') || (oldin[in] == '+')) {
	0001c1b1:ADD RAX,RDX
	0001c1b4:MOVZX EAX,byte ptr [RAX]
	0001c1b7:CMP AL,0x2d
	0001c1b9:JZ 0x0001c609
	0001c1bf:MOV RDX,qword ptr [RBP + -0xa8]
	0001c1c6:MOV RAX,qword ptr [RBP + -0x70]
	0001c1ca:ADD RAX,RDX
	0001c1cd:MOVZX EAX,byte ptr [RAX]
	0001c1d0:CMP AL,0x2b
	0001c1d2:JZ 0x0001c609
END_OF_LINE
----------------------------------------------
130: LAB_0001c610:
	0001c610:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
131: while( true ) {
	0001c78e:JNZ 0x0001c7b4
END_OF_LINE
----------------------------------------------
132: while( true ) {
	0001c757:JNZ 0x0001c77b
END_OF_LINE
----------------------------------------------
133: while( true ) {
	0001c6c0:JNZ 0x0001c746
END_OF_LINE
----------------------------------------------
134: while (cVar2 = pch_char(old), cVar2 == '-') {
	0001c61a:CALL 0x00013c8d
	0001c61f:CMP AL,0x2d
	0001c621:JNZ 0x0001c6ad
END_OF_LINE
----------------------------------------------
135: for (; oldin[in] == '+'; in = in + 1) {
	0001c629:ADD qword ptr [RBP + -0xa8],0x1
	0001c631:MOV RDX,qword ptr [RBP + -0xa8]
	0001c638:MOV RAX,qword ptr [RBP + -0x70]
	0001c63c:ADD RAX,RDX
	0001c63f:MOVZX EAX,byte ptr [RAX]
	0001c642:CMP AL,0x2b
	0001c644:JZ 0x0001c629
END_OF_LINE
----------------------------------------------
137: if (oldin[old] == ' ') {
	0001c651:ADD RAX,RDX
	0001c654:MOVZX EAX,byte ptr [RAX]
	0001c657:CMP AL,0x20
	0001c659:JNZ 0x0001c6a0
END_OF_LINE
----------------------------------------------
138: if (oldin[in] != ' ') {
	0001c666:ADD RAX,RDX
	0001c669:MOVZX EAX,byte ptr [RAX]
	0001c66c:CMP AL,0x20
	0001c66e:JZ 0x0001c698
END_OF_LINE
----------------------------------------------
140: __assert_fail("oldin[in] == \' \'","merge.c",0x189,"merge_hunk");
	0001c693:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
142: in = in + 1;
	0001c698:ADD qword ptr [RBP + -0xa8],0x1
END_OF_LINE
----------------------------------------------
144: old = old + 1;
	0001c6a0:ADD qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
146: if (oldin[old] != '-') break;
	0001c6b8:ADD RAX,RDX
	0001c6bb:MOVZX EAX,byte ptr [RAX]
	0001c6be:CMP AL,0x2d
	0001c6c0:JNZ 0x0001c746
END_OF_LINE
----------------------------------------------
147: while (cVar2 = pch_char(new), cVar2 == '+') {
	0001c6da:CALL 0x00013c8d
	0001c6df:CMP AL,0x2b
	0001c6e1:JZ 0x0001c6c8
END_OF_LINE
----------------------------------------------
148: new = new + 1;
	0001c6c8:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
150: cVar2 = pch_char(old);
	0001c6ed:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
151: if (cVar2 == ' ') {
	0001c6f2:CMP AL,0x20
	0001c6f4:JNZ 0x0001c739
END_OF_LINE
----------------------------------------------
152: cVar2 = pch_char(new);
	0001c700:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
153: if (cVar2 != ' ') {
	0001c705:CMP AL,0x20
	0001c707:JZ 0x0001c731
END_OF_LINE
----------------------------------------------
155: __assert_fail("pch_char (new) == \' \'","merge.c",0x194,"merge_hunk");
	0001c72c:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
157: new = new + 1;
	0001c731:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
159: old = old + 1;
	0001c739:ADD qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
161: cVar2 = pch_char(new);
	0001c750:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
162: if (cVar2 != '+') break;
	0001c755:CMP AL,0x2b
	0001c757:JNZ 0x0001c77b
END_OF_LINE
----------------------------------------------
163: while (cVar2 = pch_char(new), cVar2 == '+') {
	0001c76d:CALL 0x00013c8d
	0001c772:CMP AL,0x2b
	0001c774:JZ 0x0001c75b
END_OF_LINE
----------------------------------------------
164: new = new + 1;
	0001c75b:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
167: if (oldin[in] != '+') break;
	0001c786:ADD RAX,RDX
	0001c789:MOVZX EAX,byte ptr [RAX]
	0001c78c:CMP AL,0x2b
	0001c78e:JNZ 0x0001c7b4
END_OF_LINE
----------------------------------------------
168: for (; oldin[in] == '+'; in = in + 1) {
	0001c792:ADD qword ptr [RBP + -0xa8],0x1
	0001c79a:MOV RDX,qword ptr [RBP + -0xa8]
	0001c7a1:MOV RAX,qword ptr [RBP + -0x70]
	0001c7a5:ADD RAX,RDX
	0001c7a8:MOVZX EAX,byte ptr [RAX]
	0001c7ab:CMP AL,0x2b
	0001c7ad:JZ 0x0001c792
END_OF_LINE
----------------------------------------------
171: cVar2 = pch_char(old);
	0001c7bf:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
172: if ((((cVar2 != ' ') || (cVar2 = pch_char(new), cVar2 != ' ')) &&
	0001c7c4:CMP AL,0x20
	0001c7c6:JNZ 0x0001c7db
	0001c7c8:MOV RAX,qword ptr [RBP + -0xb8]
	0001c7cf:MOV RDI,RAX
	0001c7d2:CALL 0x00013c8d
	0001c7d7:CMP AL,0x20
	0001c7d9:JZ 0x0001c801
	0001c7db:MOV RAX,qword ptr [RBP + -0xc8]
	0001c7e2:MOV RDI,RAX
	0001c7e5:CALL 0x00013c8d
	0001c7ea:CMP AL,0x3d
	0001c7ec:JNZ 0x0001c855
	0001c7ee:MOV RAX,qword ptr [RBP + -0xb8]
	0001c7f5:MOV RDI,RAX
	0001c7f8:CALL 0x00013c8d
	0001c7fd:CMP AL,0x5e
	0001c7ff:JNZ 0x0001c855
	0001c801:MOV RDX,qword ptr [RBP + -0xc8]
	0001c808:MOV RAX,qword ptr [RBP + -0x70]
	0001c80c:ADD RAX,RDX
	0001c80f:MOVZX EAX,byte ptr [RAX]
	0001c812:CMP AL,0x20
	0001c814:JNZ 0x0001c82b
	0001c816:MOV RDX,qword ptr [RBP + -0xa8]
	0001c81d:MOV RAX,qword ptr [RBP + -0x70]
	0001c821:ADD RAX,RDX
	0001c824:MOVZX EAX,byte ptr [RAX]
	0001c827:CMP AL,0x20
	0001c829:JZ 0x0001c87d
	0001c82b:MOV RDX,qword ptr [RBP + -0xc8]
	0001c832:MOV RAX,qword ptr [RBP + -0x70]
	0001c836:ADD RAX,RDX
	0001c839:MOVZX EAX,byte ptr [RAX]
	0001c83c:CMP AL,0x3d
	0001c83e:JNZ 0x0001c855
	0001c840:MOV RDX,qword ptr [RBP + -0xa8]
	0001c847:MOV RAX,qword ptr [RBP + -0x70]
	0001c84b:ADD RAX,RDX
	0001c84e:MOVZX EAX,byte ptr [RAX]
	0001c851:CMP AL,0x5e
	0001c853:JZ 0x0001c87d
END_OF_LINE
----------------------------------------------
173: ((cVar2 = pch_char(old), cVar2 != '=' || (cVar2 = pch_char(new), cVar2 != '^')))) ||
	0001c7e5:CALL 0x00013c8d
	0001c7ea:CMP AL,0x3d
	0001c7ec:JNZ 0x0001c855
	0001c7ee:MOV RAX,qword ptr [RBP + -0xb8]
	0001c7f5:MOV RDI,RAX
	0001c7f8:CALL 0x00013c8d
	0001c7fd:CMP AL,0x5e
END_OF_LINE
----------------------------------------------
174: (((oldin[old] != ' ' || (oldin[in] != ' ')) &&
	0001c80c:ADD RAX,RDX
	0001c80f:MOVZX EAX,byte ptr [RAX]
	0001c812:CMP AL,0x20
	0001c814:JNZ 0x0001c82b
	0001c816:MOV RDX,qword ptr [RBP + -0xa8]
	0001c81d:MOV RAX,qword ptr [RBP + -0x70]
	0001c821:ADD RAX,RDX
	0001c824:MOVZX EAX,byte ptr [RAX]
	0001c827:CMP AL,0x20
END_OF_LINE
----------------------------------------------
175: ((oldin[old] != '=' || (oldin[in] != '^')))))) {
	0001c836:ADD RAX,RDX
	0001c839:MOVZX EAX,byte ptr [RAX]
	0001c83c:CMP AL,0x3d
	0001c83e:JNZ 0x0001c855
	0001c840:MOV RDX,qword ptr [RBP + -0xa8]
	0001c847:MOV RAX,qword ptr [RBP + -0x70]
	0001c84b:ADD RAX,RDX
	0001c84e:MOVZX EAX,byte ptr [RAX]
	0001c851:CMP AL,0x5e
END_OF_LINE
----------------------------------------------
177: __assert_fail("((pch_char (old) == \' \' && pch_char (new) == \' \') || (pch_char (old) == \'=\' && pch_char (new) == \'^\')) && ((oldin[old] == \' \' && oldin[in] == \' \') || (oldin[old] == \'=\' && oldin[in] == \'^\'))"
	0001c878:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
178: ,"merge.c",0x1a2,"merge_hunk");
	0001c878:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
180: lastwhere = where_local;
	0001c884:MOV qword ptr [RBP + -0x98],RAX
END_OF_LINE
----------------------------------------------
181: while (((firstin < in && (firstnew < new)) &&
	0001c8b3:JGE 0x0001c8e2
	0001c8b5:MOV RAX,qword ptr [RBP + -0xb0]
	0001c8bc:CMP RAX,qword ptr [RBP + -0xb8]
	0001c8c3:JGE 0x0001c8e2
	0001c8c5:MOV RDX,qword ptr [RBP + -0x98]
	0001c8cc:MOV RAX,qword ptr [RBP + -0xb0]
	0001c8d3:MOV RSI,RDX
	0001c8d6:MOV RDI,RAX
	0001c8d9:CALL 0x0001ce2a
	0001c8de:TEST AL,AL
	0001c8e0:JNZ 0x0001c88d
END_OF_LINE
----------------------------------------------
182: (_Var3 = context_matches_file(firstnew,lastwhere), _Var3))) {
	0001c8d9:CALL 0x0001ce2a
	0001c8de:TEST AL,AL
	0001c8e0:JNZ 0x0001c88d
END_OF_LINE
----------------------------------------------
183: firstin = firstin + 1;
	0001c88d:ADD qword ptr [RBP + -0xa0],0x1
END_OF_LINE
----------------------------------------------
184: firstnew = firstnew + 1;
	0001c895:ADD qword ptr [RBP + -0xb0],0x1
END_OF_LINE
----------------------------------------------
185: lastwhere = lastwhere + 1;
	0001c89d:ADD qword ptr [RBP + -0x98],0x1
END_OF_LINE
----------------------------------------------
187: if ((firstin == in) && (firstnew == new)) {
	0001c8e9:CMP RAX,qword ptr [RBP + -0xa8]
	0001c8f0:JNZ 0x0001c909
	0001c8f2:MOV RAX,qword ptr [RBP + -0xb0]
	0001c8f9:CMP RAX,qword ptr [RBP + -0xb8]
	0001c900:JNZ 0x0001c909
END_OF_LINE
----------------------------------------------
188: already_applied = true;
	0001c902:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
191: already_applied = false;
	0001c909:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
193: if (already_applied != false) {
	0001c91b:CMP byte ptr [RBP + -0xd9],0x0
	0001c922:JZ 0x0001c958
END_OF_LINE
----------------------------------------------
194: merge_result(&first_result,hunk,"already applied",where_local,lastwhere + -1);
	0001c92b:LEA RCX,[RAX + -0x1]
	0001c92f:MOV RDX,qword ptr [RBP + -0xf8]
	0001c936:MOV ESI,dword ptr [RBP + -0xe4]
	0001c93c:LEA RAX,[RBP + -0xdb]
	0001c943:MOV R8,RCX
	0001c946:MOV RCX,RDX
	0001c949:LEA RDX,[0x34417]
	0001c950:MOV RDI,RAX
	0001c953:CALL 0x0001ba74
END_OF_LINE
----------------------------------------------
196: if (conflict_style == MERGE_DIFF3) {
	0001c961:CMP EAX,0x1
	0001c964:JNZ 0x0001c999
END_OF_LINE
----------------------------------------------
197: common_prefix = lastwhere - where_local;
	0001c96d:SUB RAX,qword ptr [RBP + -0xf8]
END_OF_LINE
----------------------------------------------
198: firstin = firstin - common_prefix;
	0001c97c:SUB qword ptr [RBP + -0xa0],RAX
END_OF_LINE
----------------------------------------------
199: firstnew = firstnew - common_prefix;
	0001c987:SUB qword ptr [RBP + -0xb0],RAX
END_OF_LINE
----------------------------------------------
200: lastwhere = lastwhere - common_prefix;
	0001c992:SUB qword ptr [RBP + -0x98],RAX
END_OF_LINE
----------------------------------------------
202: if (where_local != lastwhere) {
	0001c9a0:CMP RAX,qword ptr [RBP + -0x98]
	0001c9a7:JZ 0x0001c9e5
END_OF_LINE
----------------------------------------------
203: where_local = lastwhere;
	0001c9b0:MOV qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
204: _Var3 = copy_till(outstate,lastwhere + -1);
	0001c9be:LEA RDX,[RAX + -0x1]
	0001c9c2:MOV RAX,qword ptr [RBP + -0xf0]
	0001c9c9:MOV RSI,RDX
	0001c9cc:MOV RDI,RAX
	0001c9cf:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
205: if (!_Var3) {
	0001c9d9:JZ 0x0001c9e5
END_OF_LINE
----------------------------------------------
206: _Var3 = false;
	0001c9db:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
207: goto LAB_0001cdbf;
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
210: if (already_applied != true) {
	0001c9ef:TEST AL,AL
	0001c9f1:JZ 0x0001c09e
END_OF_LINE
----------------------------------------------
211: common_suffix = 0;
	0001c9f7:MOV qword ptr [RBP + -0x88],0x0
END_OF_LINE
----------------------------------------------
212: if (conflict_style == MERGE_MERGE) {
	0001ca0b:TEST EAX,EAX
	0001ca0d:JNZ 0x0001ca9c
END_OF_LINE
----------------------------------------------
213: lastwhere = where_local + (in - firstin);
	0001ca1a:SUB RAX,qword ptr [RBP + -0xa0]
	0001ca21:MOV RDX,RAX
	0001ca24:MOV RAX,qword ptr [RBP + -0xf8]
	0001ca2b:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
214: while (((firstin < in && (firstnew < new)) &&
	0001ca65:JGE 0x0001ca9c
	0001ca67:MOV RAX,qword ptr [RBP + -0xb0]
	0001ca6e:CMP RAX,qword ptr [RBP + -0xb8]
	0001ca75:JGE 0x0001ca9c
	0001ca77:MOV RAX,qword ptr [RBP + -0x98]
	0001ca7e:LEA RDX,[RAX + -0x1]
	0001ca82:MOV RAX,qword ptr [RBP + -0xb8]
	0001ca89:SUB RAX,0x1
	0001ca8d:MOV RSI,RDX
	0001ca90:MOV RDI,RAX
	0001ca93:CALL 0x0001ce2a
	0001ca98:TEST AL,AL
	0001ca9a:JNZ 0x0001ca37
END_OF_LINE
----------------------------------------------
215: (_Var3 = context_matches_file(new + -1,lastwhere + -1), _Var3))) {
	0001ca7e:LEA RDX,[RAX + -0x1]
	0001ca82:MOV RAX,qword ptr [RBP + -0xb8]
	0001ca89:SUB RAX,0x1
	0001ca8d:MOV RSI,RDX
	0001ca90:MOV RDI,RAX
	0001ca93:CALL 0x0001ce2a
	0001ca98:TEST AL,AL
	0001ca9a:JNZ 0x0001ca37
END_OF_LINE
----------------------------------------------
216: in = in + -1;
	0001ca37:SUB qword ptr [RBP + -0xa8],0x1
END_OF_LINE
----------------------------------------------
217: new = new + -1;
	0001ca3f:SUB qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
218: lastwhere = lastwhere + -1;
	0001ca47:SUB qword ptr [RBP + -0x98],0x1
END_OF_LINE
----------------------------------------------
219: common_suffix = common_suffix + 1;
	0001ca4f:ADD qword ptr [RBP + -0x88],0x1
END_OF_LINE
----------------------------------------------
222: lines_1 = (new - firstnew) + (in - firstin) + 3;
	0001caa3:SUB RAX,qword ptr [RBP + -0xa0]
	0001caaa:LEA RDX,[RAX + 0x3]
	0001caae:MOV RAX,qword ptr [RBP + -0xb8]
	0001cab5:SUB RAX,qword ptr [RBP + -0xb0]
	0001cabc:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
223: if (conflict_style == MERGE_DIFF3) {
	0001cacc:CMP EAX,0x1
	0001cacf:JNZ 0x0001cae7
END_OF_LINE
----------------------------------------------
224: lines_1 = lines_1 + (old - firstold) + 1;
	0001cad8:SUB RAX,qword ptr [RBP + -0xc0]
	0001cadf:ADD RAX,0x1
	0001cae3:ADD qword ptr [RBP + -0x80],RAX
END_OF_LINE
----------------------------------------------
226: merge_result(&first_result,hunk,"NOT MERGED",where_local,lines_1 + where_local + -1);
	0001caf2:ADD RAX,RDX
	0001caf5:LEA RCX,[RAX + -0x1]
	0001caf9:MOV RDX,qword ptr [RBP + -0xf8]
	0001cb00:MOV ESI,dword ptr [RBP + -0xe4]
	0001cb06:LEA RAX,[RBP + -0xdb]
	0001cb0d:MOV R8,RCX
	0001cb10:MOV RCX,RDX
	0001cb13:LEA RDX,[0x34427]
	0001cb1a:MOV RDI,RAX
	0001cb1d:CALL 0x0001ba74
END_OF_LINE
----------------------------------------------
227: out_offset = (lines_1 - (in - firstin)) + out_offset;
	0001cb29:SUB RAX,qword ptr [RBP + -0xa0]
	0001cb30:MOV RDX,RAX
	0001cb33:MOV RAX,qword ptr [RBP + -0x80]
	0001cb37:SUB RAX,RDX
	0001cb3a:MOV RCX,RAX
	0001cb3d:LEA RAX,[0x3e390]
	0001cb44:MOV RAX,qword ptr [RAX]
	0001cb47:LEA RDX,[RCX + RAX*0x1]
END_OF_LINE
----------------------------------------------
228: fputs("\n<<<<<<<\n" + outstate->after_newline,(FILE *)fp);
	0001cb5c:MOVZX EAX,byte ptr [RAX + 0x8]
	0001cb60:MOVZX EAX,AL
	0001cb63:LEA RDX,[0x34432]
	0001cb6a:ADD RDX,RAX
	0001cb6d:MOV RAX,qword ptr [RBP + -0x78]
	0001cb71:MOV RSI,RAX
	0001cb74:MOV RDI,RDX
	0001cb77:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
229: outstate->after_newline = true;
	0001cb83:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
230: if (firstin < in) {
	0001cb95:JGE 0x0001cbda
END_OF_LINE
----------------------------------------------
231: where_local = where_local + (in - firstin);
	0001cb9e:SUB RAX,qword ptr [RBP + -0xa0]
	0001cba5:ADD qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
232: _Var3 = copy_till(outstate,where_local + -1);
	0001cbb3:LEA RDX,[RAX + -0x1]
	0001cbb7:MOV RAX,qword ptr [RBP + -0xf0]
	0001cbbe:MOV RSI,RDX
	0001cbc1:MOV RDI,RAX
	0001cbc4:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
233: if (!_Var3) {
	0001cbce:JZ 0x0001cbda
END_OF_LINE
----------------------------------------------
234: _Var3 = false;
	0001cbd0:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
235: goto LAB_0001cdbf;
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
238: if (conflict_style == MERGE_DIFF3) {
	0001cbe3:CMP EAX,0x1
	0001cbe6:JNZ 0x0001cc54
END_OF_LINE
----------------------------------------------
239: fputs(&DAT_0003443c + outstate->after_newline,(FILE *)fp);
	0001cbef:MOVZX EAX,byte ptr [RAX + 0x8]
	0001cbf3:MOVZX EAX,AL
	0001cbf6:LEA RDX,[0x3443c]
	0001cbfd:ADD RDX,RAX
	0001cc00:MOV RAX,qword ptr [RBP + -0x78]
	0001cc04:MOV RSI,RAX
	0001cc07:MOV RDI,RDX
	0001cc0a:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
240: outstate->after_newline = true;
	0001cc16:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
241: for (; firstold < old; firstold = firstold + 1) {
	0001cc3c:ADD qword ptr [RBP + -0xc0],0x1
	0001cc44:MOV RAX,qword ptr [RBP + -0xc0]
	0001cc4b:CMP RAX,qword ptr [RBP + -0xc8]
	0001cc52:JL 0x0001cc1c
END_OF_LINE
----------------------------------------------
242: _Var3 = pch_write_line(firstold,fp);
	0001cc2d:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
243: outstate->after_newline = _Var3;
	0001cc39:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
246: fputs(&DAT_00034446 + outstate->after_newline,(FILE *)fp);
	0001cc5b:MOVZX EAX,byte ptr [RAX + 0x8]
	0001cc5f:MOVZX EAX,AL
	0001cc62:LEA RDX,[0x34446]
	0001cc69:ADD RDX,RAX
	0001cc6c:MOV RAX,qword ptr [RBP + -0x78]
	0001cc70:MOV RSI,RAX
	0001cc73:MOV RDI,RDX
	0001cc76:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
247: outstate->after_newline = true;
	0001cc82:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
248: for (; firstnew < new; firstnew = firstnew + 1) {
	0001cca8:ADD qword ptr [RBP + -0xb0],0x1
	0001ccb0:MOV RAX,qword ptr [RBP + -0xb0]
	0001ccb7:CMP RAX,qword ptr [RBP + -0xb8]
	0001ccbe:JL 0x0001cc88
END_OF_LINE
----------------------------------------------
249: _Var3 = pch_write_line(firstnew,fp);
	0001cc99:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
250: outstate->after_newline = _Var3;
	0001cca5:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
252: fputs(&DAT_00034450 + outstate->after_newline,(FILE *)fp);
	0001ccc7:MOVZX EAX,byte ptr [RAX + 0x8]
	0001cccb:MOVZX EAX,AL
	0001ccce:LEA RDX,[0x34450]
	0001ccd5:ADD RDX,RAX
	0001ccd8:MOV RAX,qword ptr [RBP + -0x78]
	0001ccdc:MOV RSI,RAX
	0001ccdf:MOV RDI,RDX
	0001cce2:CALL 0x00005c00
END_OF_LINE
----------------------------------------------
253: outstate->after_newline = true;
	0001ccee:MOV byte ptr [RAX + 0x8],0x1
END_OF_LINE
----------------------------------------------
254: outstate->zero_output = false;
	0001ccf9:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
255: iVar4 = ferror((FILE *)fp);
	0001cd04:CALL 0x000059a0
END_OF_LINE
----------------------------------------------
256: if (iVar4 != 0) {
	0001cd09:TEST EAX,EAX
	0001cd0b:JZ 0x0001cd12
END_OF_LINE
----------------------------------------------
258: write_fatal();
	0001cd0d:CALL 0x00018705
END_OF_LINE
----------------------------------------------
260: if (common_suffix != 0) {
	0001cd12:CMP qword ptr [RBP + -0x88],0x0
	0001cd1a:JZ 0x0001cd71
END_OF_LINE
----------------------------------------------
261: where_local = where_local + common_suffix;
	0001cd23:ADD qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
262: _Var3 = copy_till(outstate,where_local + -1);
	0001cd31:LEA RDX,[RAX + -0x1]
	0001cd35:MOV RAX,qword ptr [RBP + -0xf0]
	0001cd3c:MOV RSI,RDX
	0001cd3f:MOV RDI,RAX
	0001cd42:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
263: if (!_Var3) {
	0001cd4c:JZ 0x0001cd55
END_OF_LINE
----------------------------------------------
264: _Var3 = false;
	0001cd4e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
265: goto LAB_0001cdbf;
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
267: in = in + common_suffix;
	0001cd5c:ADD qword ptr [RBP + -0xa8],RAX
END_OF_LINE
----------------------------------------------
268: new = new + common_suffix;
	0001cd6a:ADD qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
270: *somefailed = true;
	0001cd78:MOV byte ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
274: while (cVar2 = pch_char(new), cVar2 == '+') {
	0001c1ec:CALL 0x00013c8d
	0001c1f1:CMP AL,0x2b
	0001c1f3:JZ 0x0001c1da
END_OF_LINE
----------------------------------------------
275: new = new + 1;
	0001c1da:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
277: lines = new - firstnew;
	0001c1fc:SUB RAX,qword ptr [RBP + -0xb0]
END_OF_LINE
----------------------------------------------
278: if ((verbosity == _IScntrl) || ((verbosity != _ISblank && (applies_cleanly != true)))) {
	0001c210:CMP EAX,0x2
	0001c213:JZ 0x0001c231
	0001c215:LEA RAX,[0x3e35c]
	0001c21c:MOV EAX,dword ptr [RAX]
	0001c21e:CMP EAX,0x1
	0001c221:JZ 0x0001c26c
	0001c223:MOVZX EAX,byte ptr [RBP + -0xda]
	0001c22a:XOR EAX,0x1
	0001c22d:TEST AL,AL
	0001c22f:JZ 0x0001c26c
END_OF_LINE
----------------------------------------------
279: merge_result(&first_result,hunk,"merged",where_local,lines + where_local + -1);
	0001c23c:ADD RAX,RDX
	0001c23f:LEA RCX,[RAX + -0x1]
	0001c243:MOV RDX,qword ptr [RBP + -0xf8]
	0001c24a:MOV ESI,dword ptr [RBP + -0xe4]
	0001c250:LEA RAX,[RBP + -0xdb]
	0001c257:MOV R8,RCX
	0001c25a:MOV RCX,RDX
	0001c25d:LEA RDX,[0x34305]
	0001c264:MOV RDI,RAX
	0001c267:CALL 0x0001ba74
END_OF_LINE
----------------------------------------------
281: last_frozen_line = (old - firstold) + last_frozen_line;
	0001c273:SUB RAX,qword ptr [RBP + -0xc0]
	0001c27a:MOV RDX,RAX
	0001c27d:LEA RAX,[0x3e398]
	0001c284:MOV RAX,qword ptr [RAX]
	0001c287:ADD RDX,RAX
END_OF_LINE
----------------------------------------------
282: where_local = where_local + (old - firstold);
	0001c29b:SUB RAX,qword ptr [RBP + -0xc0]
	0001c2a2:ADD qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
283: out_offset = (new - firstnew) + out_offset;
	0001c2b0:SUB RAX,qword ptr [RBP + -0xb0]
	0001c2b7:MOV RDX,RAX
	0001c2ba:LEA RAX,[0x3e390]
	0001c2c1:MOV RAX,qword ptr [RAX]
	0001c2c4:ADD RDX,RAX
END_OF_LINE
----------------------------------------------
284: if (firstnew < new) {
	0001c2df:JGE 0x0001c600
END_OF_LINE
----------------------------------------------
285: for (; firstnew < new; firstnew = firstnew + 1) {
	0001c307:ADD qword ptr [RBP + -0xb0],0x1
	0001c30f:MOV RAX,qword ptr [RBP + -0xb0]
	0001c316:CMP RAX,qword ptr [RBP + -0xb8]
	0001c31d:JL 0x0001c2e7
END_OF_LINE
----------------------------------------------
286: _Var3 = pch_write_line(firstnew,fp);
	0001c2f8:CALL 0x00013ccf
END_OF_LINE
----------------------------------------------
287: outstate->after_newline = _Var3;
	0001c304:MOV byte ptr [RDX + 0x8],AL
END_OF_LINE
----------------------------------------------
289: outstate->zero_output = false;
	0001c326:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
293: cVar2 = pch_char(old);
	0001c339:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
294: if (cVar2 != ' ') {
	0001c33e:CMP AL,0x20
	0001c340:JNZ 0x0001c56a
END_OF_LINE
----------------------------------------------
295: cVar2 = pch_char(old);
	0001c574:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
296: if ((cVar2 != '=') || (cVar2 = pch_char(new), cVar2 != '^')) {
	0001c579:CMP AL,0x3d
	0001c57b:JNZ 0x0001c590
	0001c57d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c584:MOV RDI,RAX
	0001c587:CALL 0x00013c8d
	0001c58c:CMP AL,0x5e
	0001c58e:JZ 0x0001c5b8
END_OF_LINE
----------------------------------------------
298: __assert_fail("pch_char (old) == \'=\' && pch_char (new) == \'^\'","merge.c",0x179,
	0001c5b3:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
299: "merge_hunk");
	0001c5b3:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
301: merge_result(&first_result,0,(char *)0x0,0,0);
	0001c5b9:LEA RAX,[RBP + -0xdb]
	0001c5c0:MOV R8D,0x0
	0001c5c6:MOV ECX,0x0
	0001c5cb:MOV EDX,0x0
	0001c5d0:MOV ESI,0x0
	0001c5d5:MOV RDI,RAX
	0001c5d8:CALL 0x0001ba74
END_OF_LINE
----------------------------------------------
302: if (where_local + -1 != last_frozen_line) {
	0001c5e4:LEA RDX,[RAX + -0x1]
	0001c5e8:LEA RAX,[0x3e398]
	0001c5ef:MOV RAX,qword ptr [RAX]
	0001c5f2:CMP RDX,RAX
	0001c5f5:JZ 0x0001cdae
END_OF_LINE
----------------------------------------------
304: __assert_fail("last_frozen_line == where - 1","merge.c",0x206,"merge_hunk");
	0001cda9:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
306: free(oldin);
	0001cdb5:CALL 0x00005860
END_OF_LINE
----------------------------------------------
307: _Var3 = true;
	0001cdba:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
308: goto LAB_0001cdbf;
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
310: if (oldin[old] == '-') {
	0001c351:ADD RAX,RDX
	0001c354:MOVZX EAX,byte ptr [RAX]
	0001c357:CMP AL,0x2d
	0001c359:JNZ 0x0001c425
END_OF_LINE
----------------------------------------------
311: while ((cVar2 = pch_char(old), cVar2 == ' ' && (oldin[old] == '-'))) {
	0001c36c:ADD RAX,RDX
	0001c36f:MOVZX EAX,byte ptr [RAX]
	0001c372:CMP AL,0x2d
	0001c374:JNZ 0x0001c3f1
	0001c376:MOV RAX,qword ptr [RBP + -0xb8]
	0001c37d:MOV RDI,RAX
	0001c380:CALL 0x00013c8d
	0001c385:CMP AL,0x2b
	0001c387:JZ 0x0001c60c
	0001c38d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c394:MOV RDI,RAX
	0001c397:CALL 0x00013c8d
	0001c39c:CMP AL,0x20
	0001c39e:JZ 0x0001c3c8
	0001c3a0:LEA RAX,[0x34478]
	0001c3a7:MOV RCX,RAX
	0001c3aa:MOV EDX,0x154
	0001c3af:LEA RAX,[0x342b5]
	0001c3b6:MOV RSI,RAX
	0001c3b9:LEA RAX,[0x3430c]
	0001c3c0:MOV RDI,RAX
	0001c3c3:CALL 0x00005bf0
	0001c3c8:ADD qword ptr [RBP + -0xc8],0x1
	0001c3d0:ADD qword ptr [RBP + -0xb8],0x1
	0001c3d8:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3df:MOV RDI,RAX
	0001c3e2:CALL 0x00013c8d
	0001c3e7:CMP AL,0x20
END_OF_LINE
----------------------------------------------
312: cVar2 = pch_char(new);
	0001c380:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
313: if (cVar2 == '+') goto LAB_0001c610;
	0001c385:CMP AL,0x2b
	0001c387:JZ 0x0001c60c
	0001c38d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c394:MOV RDI,RAX
	0001c397:CALL 0x00013c8d
	0001c39c:CMP AL,0x20
	0001c39e:JZ 0x0001c3c8
	0001c3a0:LEA RAX,[0x34478]
	0001c3a7:MOV RCX,RAX
	0001c3aa:MOV EDX,0x154
	0001c3af:LEA RAX,[0x342b5]
	0001c3b6:MOV RSI,RAX
	0001c3b9:LEA RAX,[0x3430c]
	0001c3c0:MOV RDI,RAX
	0001c3c3:CALL 0x00005bf0
	0001c3c8:ADD qword ptr [RBP + -0xc8],0x1
	0001c3d0:ADD qword ptr [RBP + -0xb8],0x1
	0001c3d8:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3df:MOV RDI,RAX
	0001c3e2:CALL 0x00013c8d
	0001c3e7:CMP AL,0x20
	0001c3e9:JZ 0x0001c361
	0001c3ef:JMP 0x0001c3f2
	0001c3f1:NOP
	0001c3f2:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3f9:MOV RDI,RAX
	0001c3fc:CALL 0x00013c8d
	0001c401:CMP AL,0x2d
	0001c403:JZ 0x0001c60f
	0001c409:MOV RAX,qword ptr [RBP + -0xb8]
	0001c410:MOV RDI,RAX
	0001c413:CALL 0x00013c8d
	0001c418:CMP AL,0x2b
	0001c41a:JNZ 0x0001cd80
	0001c420:JMP 0x0001c60f
	0001c425:MOV RDX,qword ptr [RBP + -0xa8]
	0001c42c:MOV RAX,qword ptr [RBP + -0x70]
	0001c430:ADD RAX,RDX
	0001c433:MOVZX EAX,byte ptr [RAX]
	0001c436:CMP AL,0x2b
	0001c438:JNZ 0x0001c4a0
	0001c43a:JMP 0x0001c444
	0001c43c:ADD qword ptr [RBP + -0xa8],0x1
	0001c444:MOV RDX,qword ptr [RBP + -0xa8]
	0001c44b:MOV RAX,qword ptr [RBP + -0x70]
	0001c44f:ADD RAX,RDX
	0001c452:MOVZX EAX,byte ptr [RAX]
	0001c455:CMP AL,0x2b
	0001c457:JZ 0x0001c43c
	0001c459:MOV RAX,qword ptr [RBP + -0xa8]
	0001c460:SUB RAX,qword ptr [RBP + -0xa0]
	0001c467:ADD qword ptr [RBP + -0xf8],RAX
	0001c46e:MOV RAX,qword ptr [RBP + -0xf8]
	0001c475:LEA RDX,[RAX + -0x1]
	0001c479:MOV RAX,qword ptr [RBP + -0xf0]
	0001c480:MOV RSI,RDX
	0001c483:MOV RDI,RAX
	0001c486:CALL 0x0000b8b9
	0001c48b:XOR EAX,0x1
	0001c48e:TEST AL,AL
	0001c490:JZ 0x0001cd80
	0001c496:MOV EAX,0x0
	0001c49b:JMP 0x0001cdbf
	0001c4a0:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4a7:MOV RAX,qword ptr [RBP + -0x70]
	0001c4ab:ADD RAX,RDX
	0001c4ae:MOVZX EAX,byte ptr [RAX]
	0001c4b1:CMP AL,0x20
	0001c4b3:JNZ 0x0001cd80
	0001c4b9:JMP 0x0001c4d3
	0001c4bb:ADD qword ptr [RBP + -0xc8],0x1
	0001c4c3:ADD qword ptr [RBP + -0xb8],0x1
	0001c4cb:ADD qword ptr [RBP + -0xa8],0x1
	0001c4d3:MOV RAX,qword ptr [RBP + -0xc8]
	0001c4da:MOV RDI,RAX
	0001c4dd:CALL 0x00013c8d
	0001c4e2:CMP AL,0x20
	0001c4e4:JNZ 0x0001c523
	0001c4e6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4ed:MOV RAX,qword ptr [RBP + -0x70]
	0001c4f1:ADD RAX,RDX
	0001c4f4:MOVZX EAX,byte ptr [RAX]
	0001c4f7:CMP AL,0x20
	0001c4f9:JNZ 0x0001c523
	0001c4fb:MOV RAX,qword ptr [RBP + -0xb8]
	0001c502:MOV RDI,RAX
	0001c505:CALL 0x00013c8d
	0001c50a:CMP AL,0x20
	0001c50c:JNZ 0x0001c523
	0001c50e:MOV RDX,qword ptr [RBP + -0xa8]
	0001c515:MOV RAX,qword ptr [RBP + -0x70]
	0001c519:ADD RAX,RDX
	0001c51c:MOVZX EAX,byte ptr [RAX]
	0001c51f:CMP AL,0x20
	0001c521:JZ 0x0001c4bb
	0001c523:MOV RAX,qword ptr [RBP + -0xa8]
	0001c52a:SUB RAX,qword ptr [RBP + -0xa0]
	0001c531:ADD qword ptr [RBP + -0xf8],RAX
	0001c538:MOV RAX,qword ptr [RBP + -0xf8]
	0001c53f:LEA RDX,[RAX + -0x1]
	0001c543:MOV RAX,qword ptr [RBP + -0xf0]
	0001c54a:MOV RSI,RDX
	0001c54d:MOV RDI,RAX
	0001c550:CALL 0x0000b8b9
	0001c555:XOR EAX,0x1
	0001c558:TEST AL,AL
	0001c55a:JZ 0x0001cd80
	0001c560:MOV EAX,0x0
	0001c565:JMP 0x0001cdbf
	0001c56a:MOV RAX,qword ptr [RBP + -0xc8]
	0001c571:MOV RDI,RAX
	0001c574:CALL 0x00013c8d
	0001c579:CMP AL,0x3d
	0001c57b:JNZ 0x0001c590
	0001c57d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c584:MOV RDI,RAX
	0001c587:CALL 0x00013c8d
	0001c58c:CMP AL,0x5e
	0001c58e:JZ 0x0001c5b8
	0001c590:LEA RAX,[0x34478]
	0001c597:MOV RCX,RAX
	0001c59a:MOV EDX,0x179
	0001c59f:LEA RAX,[0x342b5]
	0001c5a6:MOV RSI,RAX
	0001c5a9:LEA RAX,[0x34328]
	0001c5b0:MOV RDI,RAX
	0001c5b3:CALL 0x00005bf0
	0001c5b8:NOP
	0001c5b9:LEA RAX,[RBP + -0xdb]
	0001c5c0:MOV R8D,0x0
	0001c5c6:MOV ECX,0x0
	0001c5cb:MOV EDX,0x0
	0001c5d0:MOV ESI,0x0
	0001c5d5:MOV RDI,RAX
	0001c5d8:CALL 0x0001ba74
	0001c5dd:MOV RAX,qword ptr [RBP + -0xf8]
	0001c5e4:LEA RDX,[RAX + -0x1]
	0001c5e8:LEA RAX,[0x3e398]
	0001c5ef:MOV RAX,qword ptr [RAX]
	0001c5f2:CMP RDX,RAX
	0001c5f5:JZ 0x0001cdae
	0001c5fb:JMP 0x0001cd86
	0001c600:NOP
	0001c601:JMP 0x0001cd80
	0001c606:NOP
	0001c607:JMP 0x0001c610
	0001c609:NOP
	0001c60a:JMP 0x0001c610
	0001c60c:NOP
	0001c60d:JMP 0x0001c610
	0001c60f:NOP
	0001c610:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
314: cVar2 = pch_char(new);
	0001c397:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
315: if (cVar2 != ' ') {
	0001c39c:CMP AL,0x20
	0001c39e:JZ 0x0001c3c8
END_OF_LINE
----------------------------------------------
317: __assert_fail("pch_char (new) == \' \'","merge.c",0x154,"merge_hunk");
	0001c3c3:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
319: old = old + 1;
	0001c3c8:ADD qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
320: new = new + 1;
	0001c3d0:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
322: cVar2 = pch_char(old);
	0001c3fc:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
323: if ((cVar2 == '-') || (cVar2 = pch_char(new), cVar2 == '+')) goto LAB_0001c610;
	0001c401:CMP AL,0x2d
	0001c403:JZ 0x0001c60f
	0001c409:MOV RAX,qword ptr [RBP + -0xb8]
	0001c410:MOV RDI,RAX
	0001c413:CALL 0x00013c8d
	0001c418:CMP AL,0x2b
	0001c41a:JNZ 0x0001cd80
	0001c420:JMP 0x0001c60f
	0001c425:MOV RDX,qword ptr [RBP + -0xa8]
	0001c42c:MOV RAX,qword ptr [RBP + -0x70]
	0001c430:ADD RAX,RDX
	0001c433:MOVZX EAX,byte ptr [RAX]
	0001c436:CMP AL,0x2b
	0001c438:JNZ 0x0001c4a0
	0001c43a:JMP 0x0001c444
	0001c43c:ADD qword ptr [RBP + -0xa8],0x1
	0001c444:MOV RDX,qword ptr [RBP + -0xa8]
	0001c44b:MOV RAX,qword ptr [RBP + -0x70]
	0001c44f:ADD RAX,RDX
	0001c452:MOVZX EAX,byte ptr [RAX]
	0001c455:CMP AL,0x2b
	0001c457:JZ 0x0001c43c
	0001c459:MOV RAX,qword ptr [RBP + -0xa8]
	0001c460:SUB RAX,qword ptr [RBP + -0xa0]
	0001c467:ADD qword ptr [RBP + -0xf8],RAX
	0001c46e:MOV RAX,qword ptr [RBP + -0xf8]
	0001c475:LEA RDX,[RAX + -0x1]
	0001c479:MOV RAX,qword ptr [RBP + -0xf0]
	0001c480:MOV RSI,RDX
	0001c483:MOV RDI,RAX
	0001c486:CALL 0x0000b8b9
	0001c48b:XOR EAX,0x1
	0001c48e:TEST AL,AL
	0001c490:JZ 0x0001cd80
	0001c496:MOV EAX,0x0
	0001c49b:JMP 0x0001cdbf
	0001c4a0:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4a7:MOV RAX,qword ptr [RBP + -0x70]
	0001c4ab:ADD RAX,RDX
	0001c4ae:MOVZX EAX,byte ptr [RAX]
	0001c4b1:CMP AL,0x20
	0001c4b3:JNZ 0x0001cd80
	0001c4b9:JMP 0x0001c4d3
	0001c4bb:ADD qword ptr [RBP + -0xc8],0x1
	0001c4c3:ADD qword ptr [RBP + -0xb8],0x1
	0001c4cb:ADD qword ptr [RBP + -0xa8],0x1
	0001c4d3:MOV RAX,qword ptr [RBP + -0xc8]
	0001c4da:MOV RDI,RAX
	0001c4dd:CALL 0x00013c8d
	0001c4e2:CMP AL,0x20
	0001c4e4:JNZ 0x0001c523
	0001c4e6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4ed:MOV RAX,qword ptr [RBP + -0x70]
	0001c4f1:ADD RAX,RDX
	0001c4f4:MOVZX EAX,byte ptr [RAX]
	0001c4f7:CMP AL,0x20
	0001c4f9:JNZ 0x0001c523
	0001c4fb:MOV RAX,qword ptr [RBP + -0xb8]
	0001c502:MOV RDI,RAX
	0001c505:CALL 0x00013c8d
	0001c50a:CMP AL,0x20
	0001c50c:JNZ 0x0001c523
	0001c50e:MOV RDX,qword ptr [RBP + -0xa8]
	0001c515:MOV RAX,qword ptr [RBP + -0x70]
	0001c519:ADD RAX,RDX
	0001c51c:MOVZX EAX,byte ptr [RAX]
	0001c51f:CMP AL,0x20
	0001c521:JZ 0x0001c4bb
	0001c523:MOV RAX,qword ptr [RBP + -0xa8]
	0001c52a:SUB RAX,qword ptr [RBP + -0xa0]
	0001c531:ADD qword ptr [RBP + -0xf8],RAX
	0001c538:MOV RAX,qword ptr [RBP + -0xf8]
	0001c53f:LEA RDX,[RAX + -0x1]
	0001c543:MOV RAX,qword ptr [RBP + -0xf0]
	0001c54a:MOV RSI,RDX
	0001c54d:MOV RDI,RAX
	0001c550:CALL 0x0000b8b9
	0001c555:XOR EAX,0x1
	0001c558:TEST AL,AL
	0001c55a:JZ 0x0001cd80
	0001c560:MOV EAX,0x0
	0001c565:JMP 0x0001cdbf
	0001c56a:MOV RAX,qword ptr [RBP + -0xc8]
	0001c571:MOV RDI,RAX
	0001c574:CALL 0x00013c8d
	0001c579:CMP AL,0x3d
	0001c57b:JNZ 0x0001c590
	0001c57d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c584:MOV RDI,RAX
	0001c587:CALL 0x00013c8d
	0001c58c:CMP AL,0x5e
	0001c58e:JZ 0x0001c5b8
	0001c590:LEA RAX,[0x34478]
	0001c597:MOV RCX,RAX
	0001c59a:MOV EDX,0x179
	0001c59f:LEA RAX,[0x342b5]
	0001c5a6:MOV RSI,RAX
	0001c5a9:LEA RAX,[0x34328]
	0001c5b0:MOV RDI,RAX
	0001c5b3:CALL 0x00005bf0
	0001c5b8:NOP
	0001c5b9:LEA RAX,[RBP + -0xdb]
	0001c5c0:MOV R8D,0x0
	0001c5c6:MOV ECX,0x0
	0001c5cb:MOV EDX,0x0
	0001c5d0:MOV ESI,0x0
	0001c5d5:MOV RDI,RAX
	0001c5d8:CALL 0x0001ba74
	0001c5dd:MOV RAX,qword ptr [RBP + -0xf8]
	0001c5e4:LEA RDX,[RAX + -0x1]
	0001c5e8:LEA RAX,[0x3e398]
	0001c5ef:MOV RAX,qword ptr [RAX]
	0001c5f2:CMP RDX,RAX
	0001c5f5:JZ 0x0001cdae
	0001c5fb:JMP 0x0001cd86
	0001c600:NOP
	0001c601:JMP 0x0001cd80
	0001c606:NOP
	0001c607:JMP 0x0001c610
	0001c609:NOP
	0001c60a:JMP 0x0001c610
	0001c60c:NOP
	0001c60d:JMP 0x0001c610
	0001c60f:NOP
	0001c610:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
324: goto LAB_0001c09e;
	0001c09e:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
326: if (oldin[in] == '+') {
	0001c430:ADD RAX,RDX
	0001c433:MOVZX EAX,byte ptr [RAX]
	0001c436:CMP AL,0x2b
	0001c438:JNZ 0x0001c4a0
END_OF_LINE
----------------------------------------------
327: for (; oldin[in] == '+'; in = in + 1) {
	0001c43c:ADD qword ptr [RBP + -0xa8],0x1
	0001c444:MOV RDX,qword ptr [RBP + -0xa8]
	0001c44b:MOV RAX,qword ptr [RBP + -0x70]
	0001c44f:ADD RAX,RDX
	0001c452:MOVZX EAX,byte ptr [RAX]
	0001c455:CMP AL,0x2b
	0001c457:JZ 0x0001c43c
END_OF_LINE
----------------------------------------------
329: where_local = where_local + (in - firstin);
	0001c460:SUB RAX,qword ptr [RBP + -0xa0]
	0001c467:ADD qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
330: _Var3 = copy_till(outstate,where_local + -1);
	0001c475:LEA RDX,[RAX + -0x1]
	0001c479:MOV RAX,qword ptr [RBP + -0xf0]
	0001c480:MOV RSI,RDX
	0001c483:MOV RDI,RAX
	0001c486:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
331: if (!_Var3) {
	0001c490:JZ 0x0001cd80
END_OF_LINE
----------------------------------------------
332: _Var3 = false;
	0001c496:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
333: goto LAB_0001cdbf;
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
335: goto LAB_0001c09e;
	0001c09e:MOV RAX,qword ptr [RBP + -0xc8]
END_OF_LINE
----------------------------------------------
337: if (oldin[old] != ' ') goto LAB_0001c09e;
	0001c09e:MOV RAX,qword ptr [RBP + -0xc8]
	0001c0a5:MOV qword ptr [RBP + -0xc0],RAX
	0001c0ac:MOV RAX,qword ptr [RBP + -0xb8]
	0001c0b3:MOV qword ptr [RBP + -0xb0],RAX
	0001c0ba:MOV RAX,qword ptr [RBP + -0xa8]
	0001c0c1:MOV qword ptr [RBP + -0xa0],RAX
	0001c0c8:MOV RAX,qword ptr [RBP + -0xc8]
	0001c0cf:MOV RDI,RAX
	0001c0d2:CALL 0x00013c8d
	0001c0d7:CMP AL,0x2d
	0001c0d9:JZ 0x0001c18f
	0001c0df:MOV RAX,qword ptr [RBP + -0xb8]
	0001c0e6:MOV RDI,RAX
	0001c0e9:CALL 0x00013c8d
	0001c0ee:CMP AL,0x2b
	0001c0f0:JNZ 0x0001c32f
	0001c0f6:JMP 0x0001c18f
	0001c0fb:MOV RDX,qword ptr [RBP + -0xc8]
	0001c102:MOV RAX,qword ptr [RBP + -0x70]
	0001c106:ADD RAX,RDX
	0001c109:MOVZX EAX,byte ptr [RAX]
	0001c10c:CMP AL,0x2d
	0001c10e:JZ 0x0001c606
	0001c114:MOV RDX,qword ptr [RBP + -0xa8]
	0001c11b:MOV RAX,qword ptr [RBP + -0x70]
	0001c11f:ADD RAX,RDX
	0001c122:MOVZX EAX,byte ptr [RAX]
	0001c125:CMP AL,0x2b
	0001c127:JZ 0x0001c606
	0001c12d:MOV RDX,qword ptr [RBP + -0xc8]
	0001c134:MOV RAX,qword ptr [RBP + -0x70]
	0001c138:ADD RAX,RDX
	0001c13b:MOVZX EAX,byte ptr [RAX]
	0001c13e:CMP AL,0x20
	0001c140:JNZ 0x0001c187
	0001c142:MOV RDX,qword ptr [RBP + -0xa8]
	0001c149:MOV RAX,qword ptr [RBP + -0x70]
	0001c14d:ADD RAX,RDX
	0001c150:MOVZX EAX,byte ptr [RAX]
	0001c153:CMP AL,0x20
	0001c155:JZ 0x0001c17f
	0001c157:LEA RAX,[0x34478]
	0001c15e:MOV RCX,RAX
	0001c161:MOV EDX,0x12c
	0001c166:LEA RAX,[0x342b5]
	0001c16d:MOV RSI,RAX
	0001c170:LEA RAX,[0x342f4]
	0001c177:MOV RDI,RAX
	0001c17a:CALL 0x00005bf0
	0001c17f:ADD qword ptr [RBP + -0xa8],0x1
	0001c187:ADD qword ptr [RBP + -0xc8],0x1
	0001c18f:MOV RAX,qword ptr [RBP + -0xc8]
	0001c196:MOV RDI,RAX
	0001c199:CALL 0x00013c8d
	0001c19e:CMP AL,0x2d
	0001c1a0:JZ 0x0001c0fb
	0001c1a6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c1ad:MOV RAX,qword ptr [RBP + -0x70]
	0001c1b1:ADD RAX,RDX
	0001c1b4:MOVZX EAX,byte ptr [RAX]
	0001c1b7:CMP AL,0x2d
	0001c1b9:JZ 0x0001c609
	0001c1bf:MOV RDX,qword ptr [RBP + -0xa8]
	0001c1c6:MOV RAX,qword ptr [RBP + -0x70]
	0001c1ca:ADD RAX,RDX
	0001c1cd:MOVZX EAX,byte ptr [RAX]
	0001c1d0:CMP AL,0x2b
	0001c1d2:JZ 0x0001c609
	0001c1d8:JMP 0x0001c1e2
	0001c1da:ADD qword ptr [RBP + -0xb8],0x1
	0001c1e2:MOV RAX,qword ptr [RBP + -0xb8]
	0001c1e9:MOV RDI,RAX
	0001c1ec:CALL 0x00013c8d
	0001c1f1:CMP AL,0x2b
	0001c1f3:JZ 0x0001c1da
	0001c1f5:MOV RAX,qword ptr [RBP + -0xb8]
	0001c1fc:SUB RAX,qword ptr [RBP + -0xb0]
	0001c203:MOV qword ptr [RBP + -0x60],RAX
	0001c207:LEA RAX,[0x3e35c]
	0001c20e:MOV EAX,dword ptr [RAX]
	0001c210:CMP EAX,0x2
	0001c213:JZ 0x0001c231
	0001c215:LEA RAX,[0x3e35c]
	0001c21c:MOV EAX,dword ptr [RAX]
	0001c21e:CMP EAX,0x1
	0001c221:JZ 0x0001c26c
	0001c223:MOVZX EAX,byte ptr [RBP + -0xda]
	0001c22a:XOR EAX,0x1
	0001c22d:TEST AL,AL
	0001c22f:JZ 0x0001c26c
	0001c231:MOV RDX,qword ptr [RBP + -0xf8]
	0001c238:MOV RAX,qword ptr [RBP + -0x60]
	0001c23c:ADD RAX,RDX
	0001c23f:LEA RCX,[RAX + -0x1]
	0001c243:MOV RDX,qword ptr [RBP + -0xf8]
	0001c24a:MOV ESI,dword ptr [RBP + -0xe4]
	0001c250:LEA RAX,[RBP + -0xdb]
	0001c257:MOV R8,RCX
	0001c25a:MOV RCX,RDX
	0001c25d:LEA RDX,[0x34305]
	0001c264:MOV RDI,RAX
	0001c267:CALL 0x0001ba74
	0001c26c:MOV RAX,qword ptr [RBP + -0xc8]
	0001c273:SUB RAX,qword ptr [RBP + -0xc0]
	0001c27a:MOV RDX,RAX
	0001c27d:LEA RAX,[0x3e398]
	0001c284:MOV RAX,qword ptr [RAX]
	0001c287:ADD RDX,RAX
	0001c28a:LEA RAX,[0x3e398]
	0001c291:MOV qword ptr [RAX],RDX
	0001c294:MOV RAX,qword ptr [RBP + -0xc8]
	0001c29b:SUB RAX,qword ptr [RBP + -0xc0]
	0001c2a2:ADD qword ptr [RBP + -0xf8],RAX
	0001c2a9:MOV RAX,qword ptr [RBP + -0xb8]
	0001c2b0:SUB RAX,qword ptr [RBP + -0xb0]
	0001c2b7:MOV RDX,RAX
	0001c2ba:LEA RAX,[0x3e390]
	0001c2c1:MOV RAX,qword ptr [RAX]
	0001c2c4:ADD RDX,RAX
	0001c2c7:LEA RAX,[0x3e390]
	0001c2ce:MOV qword ptr [RAX],RDX
	0001c2d1:MOV RAX,qword ptr [RBP + -0xb0]
	0001c2d8:CMP RAX,qword ptr [RBP + -0xb8]
	0001c2df:JGE 0x0001c600
	0001c2e5:JMP 0x0001c30f
	0001c2e7:MOV RDX,qword ptr [RBP + -0x78]
	0001c2eb:MOV RAX,qword ptr [RBP + -0xb0]
	0001c2f2:MOV RSI,RDX
	0001c2f5:MOV RDI,RAX
	0001c2f8:CALL 0x00013ccf
	0001c2fd:MOV RDX,qword ptr [RBP + -0xf0]
	0001c304:MOV byte ptr [RDX + 0x8],AL
	0001c307:ADD qword ptr [RBP + -0xb0],0x1
	0001c30f:MOV RAX,qword ptr [RBP + -0xb0]
	0001c316:CMP RAX,qword ptr [RBP + -0xb8]
	0001c31d:JL 0x0001c2e7
	0001c31f:MOV RAX,qword ptr [RBP + -0xf0]
	0001c326:MOV byte ptr [RAX + 0x9],0x0
	0001c32a:JMP 0x0001c600
	0001c32f:MOV RAX,qword ptr [RBP + -0xc8]
	0001c336:MOV RDI,RAX
	0001c339:CALL 0x00013c8d
	0001c33e:CMP AL,0x20
	0001c340:JNZ 0x0001c56a
	0001c346:MOV RDX,qword ptr [RBP + -0xc8]
	0001c34d:MOV RAX,qword ptr [RBP + -0x70]
	0001c351:ADD RAX,RDX
	0001c354:MOVZX EAX,byte ptr [RAX]
	0001c357:CMP AL,0x2d
	0001c359:JNZ 0x0001c425
	0001c35f:JMP 0x0001c3d8
	0001c361:MOV RDX,qword ptr [RBP + -0xc8]
	0001c368:MOV RAX,qword ptr [RBP + -0x70]
	0001c36c:ADD RAX,RDX
	0001c36f:MOVZX EAX,byte ptr [RAX]
	0001c372:CMP AL,0x2d
	0001c374:JNZ 0x0001c3f1
	0001c376:MOV RAX,qword ptr [RBP + -0xb8]
	0001c37d:MOV RDI,RAX
	0001c380:CALL 0x00013c8d
	0001c385:CMP AL,0x2b
	0001c387:JZ 0x0001c60c
	0001c38d:MOV RAX,qword ptr [RBP + -0xb8]
	0001c394:MOV RDI,RAX
	0001c397:CALL 0x00013c8d
	0001c39c:CMP AL,0x20
	0001c39e:JZ 0x0001c3c8
	0001c3a0:LEA RAX,[0x34478]
	0001c3a7:MOV RCX,RAX
	0001c3aa:MOV EDX,0x154
	0001c3af:LEA RAX,[0x342b5]
	0001c3b6:MOV RSI,RAX
	0001c3b9:LEA RAX,[0x3430c]
	0001c3c0:MOV RDI,RAX
	0001c3c3:CALL 0x00005bf0
	0001c3c8:ADD qword ptr [RBP + -0xc8],0x1
	0001c3d0:ADD qword ptr [RBP + -0xb8],0x1
	0001c3d8:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3df:MOV RDI,RAX
	0001c3e2:CALL 0x00013c8d
	0001c3e7:CMP AL,0x20
	0001c3e9:JZ 0x0001c361
	0001c3ef:JMP 0x0001c3f2
	0001c3f1:NOP
	0001c3f2:MOV RAX,qword ptr [RBP + -0xc8]
	0001c3f9:MOV RDI,RAX
	0001c3fc:CALL 0x00013c8d
	0001c401:CMP AL,0x2d
	0001c403:JZ 0x0001c60f
	0001c409:MOV RAX,qword ptr [RBP + -0xb8]
	0001c410:MOV RDI,RAX
	0001c413:CALL 0x00013c8d
	0001c418:CMP AL,0x2b
	0001c41a:JNZ 0x0001cd80
	0001c420:JMP 0x0001c60f
	0001c425:MOV RDX,qword ptr [RBP + -0xa8]
	0001c42c:MOV RAX,qword ptr [RBP + -0x70]
	0001c430:ADD RAX,RDX
	0001c433:MOVZX EAX,byte ptr [RAX]
	0001c436:CMP AL,0x2b
	0001c438:JNZ 0x0001c4a0
	0001c43a:JMP 0x0001c444
	0001c43c:ADD qword ptr [RBP + -0xa8],0x1
	0001c444:MOV RDX,qword ptr [RBP + -0xa8]
	0001c44b:MOV RAX,qword ptr [RBP + -0x70]
	0001c44f:ADD RAX,RDX
	0001c452:MOVZX EAX,byte ptr [RAX]
	0001c455:CMP AL,0x2b
	0001c457:JZ 0x0001c43c
	0001c459:MOV RAX,qword ptr [RBP + -0xa8]
	0001c460:SUB RAX,qword ptr [RBP + -0xa0]
	0001c467:ADD qword ptr [RBP + -0xf8],RAX
	0001c46e:MOV RAX,qword ptr [RBP + -0xf8]
	0001c475:LEA RDX,[RAX + -0x1]
	0001c479:MOV RAX,qword ptr [RBP + -0xf0]
	0001c480:MOV RSI,RDX
	0001c483:MOV RDI,RAX
	0001c486:CALL 0x0000b8b9
	0001c48b:XOR EAX,0x1
	0001c48e:TEST AL,AL
	0001c490:JZ 0x0001cd80
	0001c496:MOV EAX,0x0
	0001c49b:JMP 0x0001cdbf
	0001c4a0:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4a7:MOV RAX,qword ptr [RBP + -0x70]
	0001c4ab:ADD RAX,RDX
	0001c4ae:MOVZX EAX,byte ptr [RAX]
	0001c4b1:CMP AL,0x20
	0001c4b3:JNZ 0x0001cd80
END_OF_LINE
----------------------------------------------
338: while ((((cVar2 = pch_char(old), cVar2 == ' ' && (oldin[old] == ' ')) &&
	0001c4dd:CALL 0x00013c8d
	0001c4e2:CMP AL,0x20
	0001c4e4:JNZ 0x0001c523
	0001c4e6:MOV RDX,qword ptr [RBP + -0xc8]
	0001c4ed:MOV RAX,qword ptr [RBP + -0x70]
	0001c4f1:ADD RAX,RDX
	0001c4f4:MOVZX EAX,byte ptr [RAX]
	0001c4f7:CMP AL,0x20
	0001c4f9:JNZ 0x0001c523
	0001c4fb:MOV RAX,qword ptr [RBP + -0xb8]
	0001c502:MOV RDI,RAX
	0001c505:CALL 0x00013c8d
	0001c50a:CMP AL,0x20
	0001c50c:JNZ 0x0001c523
	0001c50e:MOV RDX,qword ptr [RBP + -0xa8]
	0001c515:MOV RAX,qword ptr [RBP + -0x70]
	0001c519:ADD RAX,RDX
	0001c51c:MOVZX EAX,byte ptr [RAX]
	0001c51f:CMP AL,0x20
	0001c521:JZ 0x0001c4bb
END_OF_LINE
----------------------------------------------
339: (cVar2 = pch_char(new), cVar2 == ' ')) && (oldin[in] == ' '))) {
	0001c505:CALL 0x00013c8d
	0001c50a:CMP AL,0x20
	0001c50c:JNZ 0x0001c523
	0001c50e:MOV RDX,qword ptr [RBP + -0xa8]
	0001c515:MOV RAX,qword ptr [RBP + -0x70]
	0001c519:ADD RAX,RDX
	0001c51c:MOVZX EAX,byte ptr [RAX]
	0001c51f:CMP AL,0x20
END_OF_LINE
----------------------------------------------
340: old = old + 1;
	0001c4bb:ADD qword ptr [RBP + -0xc8],0x1
END_OF_LINE
----------------------------------------------
341: new = new + 1;
	0001c4c3:ADD qword ptr [RBP + -0xb8],0x1
END_OF_LINE
----------------------------------------------
342: in = in + 1;
	0001c4cb:ADD qword ptr [RBP + -0xa8],0x1
END_OF_LINE
----------------------------------------------
344: where_local = where_local + (in - firstin);
	0001c52a:SUB RAX,qword ptr [RBP + -0xa0]
	0001c531:ADD qword ptr [RBP + -0xf8],RAX
END_OF_LINE
----------------------------------------------
345: _Var3 = copy_till(outstate,where_local + -1);
	0001c53f:LEA RDX,[RAX + -0x1]
	0001c543:MOV RAX,qword ptr [RBP + -0xf0]
	0001c54a:MOV RSI,RDX
	0001c54d:MOV RDI,RAX
	0001c550:CALL 0x0000b8b9
END_OF_LINE
----------------------------------------------
346: } while (_Var3);
	0001c55a:JZ 0x0001cd80
END_OF_LINE
----------------------------------------------
347: _Var3 = false;
	0001c560:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
350: _Var3 = false;
	0001c094:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
352: LAB_0001cdbf:
	0001cdbf:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
353: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001cdc3:SUB RDX,qword ptr FS:[0x28]
	0001cdcc:JZ 0x0001cdd3
END_OF_LINE
----------------------------------------------
354: return _Var3;
	0001cdd8:RET
END_OF_LINE
----------------------------------------------
357: __stack_chk_fail();
	0001cdce:CALL 0x00005b00
END_OF_LINE



Function: count_context_lines
----------------------------------------------
13: lVar2 = pch_ptrn_lines();
	0001cde5:CALL 0x00013c04
END_OF_LINE
----------------------------------------------
14: context = 0;
	0001cdee:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
15: for (old = 1; old <= lVar2; old = old + 1) {
	0001cdf6:MOV qword ptr [RBP + -0x18],0x1
	0001cdfe:JMP 0x0001ce1a
	0001ce00:MOV RAX,qword ptr [RBP + -0x18]
	0001ce04:MOV RDI,RAX
	0001ce07:CALL 0x00013c8d
	0001ce0c:CMP AL,0x20
	0001ce0e:JNZ 0x0001ce15
	0001ce10:ADD qword ptr [RBP + -0x10],0x1
	0001ce15:ADD qword ptr [RBP + -0x18],0x1
	0001ce1a:MOV RAX,qword ptr [RBP + -0x18]
	0001ce1e:CMP RAX,qword ptr [RBP + -0x8]
	0001ce22:JLE 0x0001ce00
END_OF_LINE
----------------------------------------------
16: cVar1 = pch_char(old);
	0001ce07:CALL 0x00013c8d
END_OF_LINE
----------------------------------------------
17: if (cVar1 == ' ') {
	0001ce0c:CMP AL,0x20
	0001ce0e:JNZ 0x0001ce15
END_OF_LINE
----------------------------------------------
18: context = context + 1;
	0001ce10:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
21: return context;
	0001ce24:MOV RAX,qword ptr [RBP + -0x10]
	0001ce28:LEAVE
	0001ce29:RET
END_OF_LINE



Function: context_matches_file
----------------------------------------------
17: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	0001ce41:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
18: line = ifetch(where,false,&size);
	0001ce50:LEA RDX,[RBP + -0x28]
	0001ce54:MOV RAX,qword ptr [RBP + -0x40]
	0001ce58:MOV ESI,0x0
	0001ce5d:MOV RDI,RAX
	0001ce60:CALL 0x000071c6
END_OF_LINE
----------------------------------------------
19: if (size != 0) {
	0001ce6d:TEST RAX,RAX
	0001ce70:JZ 0x0001cf16
END_OF_LINE
----------------------------------------------
20: if (canonicalize_ws == false) {
	0001ce80:TEST AL,AL
	0001ce82:JZ 0x0001cebe
END_OF_LINE
----------------------------------------------
21: sVar4 = pch_line_len(old);
	0001cec5:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
22: if (sVar4 == size) {
	0001cece:CMP RAX,RDX
	0001ced1:JNZ 0x0001cf03
END_OF_LINE
----------------------------------------------
23: pcVar5 = pfetch(old);
	0001cede:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
24: iVar3 = memcmp(line,pcVar5,size);
	0001cef3:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
25: if (iVar3 == 0) {
	0001cef8:TEST EAX,EAX
	0001cefa:JNZ 0x0001cf03
END_OF_LINE
----------------------------------------------
26: bVar1 = true;
	0001cefc:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
27: goto joined_r0x0001cf0d;
	0001cf0d:JZ 0x0001cf16
END_OF_LINE
----------------------------------------------
30: bVar1 = false;
	0001cf03:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
33: sVar4 = pch_line_len(old);
	0001ce8f:CALL 0x00013c6a
END_OF_LINE
----------------------------------------------
34: pcVar5 = pfetch(old);
	0001ce9e:CALL 0x00013cac
END_OF_LINE
----------------------------------------------
35: bVar1 = similar(pcVar5,sVar4,line,size);
	0001ceb3:CALL 0x0000bdf6
END_OF_LINE
----------------------------------------------
37: joined_r0x0001cf0d:
	0001cf0d:JZ 0x0001cf16
END_OF_LINE
----------------------------------------------
38: if (bVar1) {
	0001cf0d:JZ 0x0001cf16
END_OF_LINE
----------------------------------------------
39: _Var2 = true;
	0001cf0f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
40: goto LAB_0001cf1b;
	0001cf1b:AND EAX,0x1
END_OF_LINE
----------------------------------------------
43: _Var2 = false;
	0001cf16:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
44: LAB_0001cf1b:
	0001cf1b:AND EAX,0x1
END_OF_LINE
----------------------------------------------
45: if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001cf22:SUB RDX,qword ptr FS:[0x28]
	0001cf2b:JZ 0x0001cf32
END_OF_LINE
----------------------------------------------
46: return _Var2;
	0001cf3a:RET
END_OF_LINE
----------------------------------------------
49: __stack_chk_fail();
	0001cf2d:CALL 0x00005b00
END_OF_LINE



Function: compute_changes
----------------------------------------------
18: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001cf5f:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
19: ctxt.xchar = xchar + -xmin;
	0001cf72:NEG RAX
	0001cf75:MOV RDX,RAX
	0001cf78:MOV RAX,qword ptr [RBP + -0x78]
	0001cf7c:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
20: ctxt.ychar = ychar + -ymin;
	0001cf87:NEG RAX
	0001cf8a:MOV RDX,RAX
	0001cf8d:MOV RAX,qword ptr [RBP + -0x80]
	0001cf91:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
21: lVar2 = ymax + xmax + 3;
	0001cfa0:ADD RAX,RDX
	0001cfa3:ADD RAX,0x3
END_OF_LINE
----------------------------------------------
22: pvVar3 = xmalloc(lVar2 * 0x10);
	0001cfaf:SHL RAX,0x4
	0001cfb3:MOV RDI,RAX
	0001cfb6:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
23: ctxt.fdiag = (lin *)((ymax + 1) * 8 + (long)pvVar3);
	0001cfda:ADD RAX,0x1
	0001cfde:SHL RAX,0x3
	0001cfe2:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
24: ctxt.bdiag = (lin *)((long)pvVar3 + (ymax + 1) * 8 + lVar2 * 8);
	0001cfc7:SHL RAX,0x3
	0001cfcb:ADD RAX,RDX
	0001cfce:MOV qword ptr [RBP + -0x28],RAX
	0001cfd2:MOV RDX,qword ptr [RBP + -0x30]
	0001cfd6:MOV RAX,qword ptr [RBP + -0x70]
	0001cfda:ADD RAX,0x1
	0001cfde:SHL RAX,0x3
	0001cfe2:ADD RAX,RDX
	0001cfe5:MOV qword ptr [RBP + -0x30],RAX
	0001cfe9:MOV RDX,qword ptr [RBP + -0x28]
	0001cfed:MOV RAX,qword ptr [RBP + -0x70]
	0001cff1:ADD RAX,0x1
	0001cff5:SHL RAX,0x3
	0001cff9:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
25: ctxt.heuristic = true;
	0001d000:MOV byte ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
26: compareseq(xmin,xmax,ymin,ymax,false,&ctxt);
	0001d004:LEA RDI,[RBP + -0x40]
	0001d008:MOV RCX,qword ptr [RBP + -0x70]
	0001d00c:MOV RDX,qword ptr [RBP + -0x68]
	0001d010:MOV RSI,qword ptr [RBP + -0x60]
	0001d014:MOV RAX,qword ptr [RBP + -0x58]
	0001d018:MOV R9,RDI
	0001d01b:MOV R8D,0x0
	0001d021:MOV RDI,RAX
	0001d024:CALL 0x0001b2da
END_OF_LINE
----------------------------------------------
27: ctxt.fdiag = ctxt.fdiag + (-1 - ymax);
	0001d043:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
28: free(ctxt.fdiag);
	0001d051:CALL 0x00005860
END_OF_LINE
----------------------------------------------
29: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001d05b:SUB RAX,qword ptr FS:[0x28]
	0001d064:JZ 0x0001d06b
END_OF_LINE
----------------------------------------------
31: __stack_chk_fail();
	0001d066:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
33: return;
	0001d06c:RET
END_OF_LINE



Function: __argmatch_die
----------------------------------------------
8: exit(exit_failure);
	0001d080:CALL 0x00005ff0
END_OF_LINE



Function: argmatch
----------------------------------------------
18: matchind = -1;
	0001d0a1:MOV qword ptr [RBP + -0x10],-0x1
END_OF_LINE
----------------------------------------------
19: bVar1 = false;
	0001d0a9:MOV byte ptr [RBP + -0x19],0x0
END_OF_LINE
----------------------------------------------
20: __n = strlen(arg);
	0001d0b4:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
21: i = 0;
	0001d0bd:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
23: if (arglist[i] == (char *)0x0) {
	0001d194:ADD RAX,RDX
	0001d197:MOV RAX,qword ptr [RAX]
	0001d19a:TEST RAX,RAX
	0001d19d:JNZ 0x0001d0ca
END_OF_LINE
----------------------------------------------
24: if (bVar1) {
	0001d1a7:JZ 0x0001d1b2
END_OF_LINE
----------------------------------------------
25: matchind = -2;
	0001d1a9:MOV RAX,-0x2
END_OF_LINE
----------------------------------------------
27: return matchind;
	0001d1b7:RET
END_OF_LINE
----------------------------------------------
29: iVar2 = strncmp(arglist[i],arg,__n);
	0001d0da:ADD RAX,RDX
	0001d0dd:MOV RAX,qword ptr [RAX]
	0001d0e0:MOV RDX,qword ptr [RBP + -0x8]
	0001d0e4:MOV RCX,qword ptr [RBP + -0x28]
	0001d0e8:MOV RSI,RCX
	0001d0eb:MOV RDI,RAX
	0001d0ee:CALL 0x00005920
END_OF_LINE
----------------------------------------------
30: if (iVar2 == 0) {
	0001d0f3:TEST EAX,EAX
	0001d0f5:JNZ 0x0001d17f
END_OF_LINE
----------------------------------------------
31: sVar3 = strlen(arglist[i]);
	0001d10b:ADD RAX,RDX
	0001d10e:MOV RAX,qword ptr [RAX]
	0001d111:MOV RDI,RAX
	0001d114:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
32: if (__n == sVar3) {
	0001d119:CMP qword ptr [RBP + -0x8],RAX
	0001d11d:JNZ 0x0001d128
END_OF_LINE
----------------------------------------------
33: return i;
	0001d1b6:LEAVE
	0001d1b7:RET
END_OF_LINE
----------------------------------------------
35: if (matchind == -1) {
	0001d128:CMP qword ptr [RBP + -0x10],-0x1
	0001d12d:JNZ 0x0001d139
END_OF_LINE
----------------------------------------------
36: matchind = i;
	0001d133:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
38: else if ((vallist == (char *)0x0) ||
	0001d139:CMP qword ptr [RBP + -0x38],0x0
	0001d13e:JZ 0x0001d17b
	0001d140:MOV RAX,qword ptr [RBP + -0x40]
	0001d144:IMUL RAX,qword ptr [RBP + -0x18]
	0001d149:MOV RDX,RAX
	0001d14c:MOV RAX,qword ptr [RBP + -0x38]
	0001d150:LEA RSI,[RDX + RAX*0x1]
	0001d154:MOV RAX,qword ptr [RBP + -0x10]
	0001d158:IMUL RAX,qword ptr [RBP + -0x40]
	0001d15d:MOV RDX,RAX
	0001d160:MOV RAX,qword ptr [RBP + -0x38]
	0001d164:LEA RCX,[RDX + RAX*0x1]
	0001d168:MOV RAX,qword ptr [RBP + -0x40]
	0001d16c:MOV RDX,RAX
	0001d16f:MOV RDI,RCX
	0001d172:CALL 0x00005cb0
	0001d177:TEST EAX,EAX
	0001d179:JZ 0x0001d17f
END_OF_LINE
----------------------------------------------
39: (iVar2 = memcmp(vallist + matchind * valsize,vallist + valsize * i,valsize),
	0001d144:IMUL RAX,qword ptr [RBP + -0x18]
	0001d149:MOV RDX,RAX
	0001d14c:MOV RAX,qword ptr [RBP + -0x38]
	0001d150:LEA RSI,[RDX + RAX*0x1]
	0001d154:MOV RAX,qword ptr [RBP + -0x10]
	0001d158:IMUL RAX,qword ptr [RBP + -0x40]
	0001d15d:MOV RDX,RAX
	0001d160:MOV RAX,qword ptr [RBP + -0x38]
	0001d164:LEA RCX,[RDX + RAX*0x1]
	0001d168:MOV RAX,qword ptr [RBP + -0x40]
	0001d16c:MOV RDX,RAX
	0001d16f:MOV RDI,RCX
	0001d172:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
40: iVar2 != 0)) {
	0001d177:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
41: bVar1 = true;
	0001d17b:MOV byte ptr [RBP + -0x19],0x1
END_OF_LINE
----------------------------------------------
44: i = i + 1;
	0001d17f:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
45: } while( true );
	0001d17f:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE



Function: argmatch_invalid
----------------------------------------------
13: if (problem == -1) {
	0001d1d1:CMP qword ptr [RBP + -0x38],-0x1
	0001d1d6:JNZ 0x0001d1e1
END_OF_LINE
----------------------------------------------
14: pcVar1 = "invalid argument %s for %s";
	0001d1d8:LEA RAX,[0x34483]
END_OF_LINE
----------------------------------------------
17: pcVar1 = "ambiguous argument %s for %s";
	0001d1e1:LEA RAX,[0x3449e]
END_OF_LINE
----------------------------------------------
19: pcVar2 = quote_n(L'\x01',context);
	0001d1f8:CALL 0x0002aa4b
END_OF_LINE
----------------------------------------------
20: pcVar3 = quotearg_n_style(L'\0',locale_quoting_style,value);
	0001d211:CALL 0x0002a563
END_OF_LINE
----------------------------------------------
21: error(0,0,pcVar1,pcVar3,pcVar2);
	0001d235:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
22: return;
	0001d240:RET
END_OF_LINE



Function: argmatch_valid
----------------------------------------------
13: last_val = (char *)0x0;
	0001d259:MOV qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
14: fwrite("Valid arguments are:",1,0x14,pFRam0000000000144490);
	0001d282:CALL 0x00006010
END_OF_LINE
----------------------------------------------
15: i = 0;
	0001d287:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
17: if (arglist[i] == (char *)0x0) {
	0001d378:ADD RAX,RDX
	0001d37b:MOV RAX,qword ptr [RAX]
	0001d37e:TEST RAX,RAX
	0001d381:JNZ 0x0001d294
END_OF_LINE
----------------------------------------------
18: putc(10,pFRam0000000000144490);
	0001d399:CALL 0x00005cf0
END_OF_LINE
----------------------------------------------
19: return;
	0001d3a0:RET
END_OF_LINE
----------------------------------------------
21: if (i == 0) {
	0001d294:CMP qword ptr [RBP + -0x10],0x0
	0001d299:JZ 0x0001d2c6
END_OF_LINE
----------------------------------------------
22: LAB_0001d2c6:
	0001d2c6:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
23: pcVar2 = quote(arglist[i]);
	0001d2d6:ADD RAX,RDX
	0001d2d9:MOV RAX,qword ptr [RAX]
	0001d2dc:MOV RDI,RAX
	0001d2df:CALL 0x0002aa78
END_OF_LINE
----------------------------------------------
24: fprintf(pFRam0000000000144490,"\n  - %s",pcVar2);
	0001d303:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
25: last_val = vallist + valsize * i;
	0001d30c:IMUL RAX,qword ptr [RBP + -0x10]
	0001d311:MOV RDX,RAX
	0001d314:MOV RAX,qword ptr [RBP + -0x20]
	0001d318:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
28: iVar1 = memcmp(last_val,vallist + valsize * i,valsize);
	0001d29f:IMUL RAX,qword ptr [RBP + -0x10]
	0001d2a4:MOV RDX,RAX
	0001d2a7:MOV RAX,qword ptr [RBP + -0x20]
	0001d2ab:LEA RCX,[RDX + RAX*0x1]
	0001d2af:MOV RDX,qword ptr [RBP + -0x28]
	0001d2b3:MOV RAX,qword ptr [RBP + -0x8]
	0001d2b7:MOV RSI,RCX
	0001d2ba:MOV RDI,RAX
	0001d2bd:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
29: if (iVar1 != 0) goto LAB_0001d2c6;
	0001d2c2:TEST EAX,EAX
	0001d2c4:JZ 0x0001d321
	0001d2c6:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
30: pcVar2 = quote(arglist[i]);
	0001d331:ADD RAX,RDX
	0001d334:MOV RAX,qword ptr [RAX]
	0001d337:MOV RDI,RAX
	0001d33a:CALL 0x0002aa78
END_OF_LINE
----------------------------------------------
31: fprintf(pFRam0000000000144490,", %s",pcVar2);
	0001d35e:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
33: i = i + 1;
	0001d363:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
34: } while( true );
	0001d363:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE



Function: __xargmatch_internal
----------------------------------------------
16: problem = argmatch(arg,arglist,vallist,valsize);
	0001d3d8:CALL 0x0001d085
END_OF_LINE
----------------------------------------------
17: if (problem < 0) {
	0001d3e1:CMP qword ptr [RBP + -0x8],0x0
	0001d3e6:JS 0x0001d3ee
END_OF_LINE
----------------------------------------------
18: argmatch_invalid(context,arg,problem);
	0001d400:CALL 0x0001d1b8
END_OF_LINE
----------------------------------------------
19: argmatch_valid(arglist,vallist,valsize);
	0001d417:CALL 0x0001d241
END_OF_LINE
----------------------------------------------
20: (*exit_fn)();
	0001d420:CALL RAX
END_OF_LINE
----------------------------------------------
21: problem = -1;
	0001d422:MOV RAX,-0x1
END_OF_LINE
----------------------------------------------
23: return problem;
	0001d42a:RET
END_OF_LINE



Function: argmatch_to_argument
----------------------------------------------
12: i = 0;
	0001d447:MOV qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
13: while( true ) {
	0001d47a:JNZ 0x0001d494
END_OF_LINE
----------------------------------------------
14: if (arglist[i] == (char *)0x0) {
	0001d4a9:ADD RAX,RDX
	0001d4ac:MOV RAX,qword ptr [RAX]
	0001d4af:TEST RAX,RAX
	0001d4b2:JNZ 0x0001d451
END_OF_LINE
----------------------------------------------
15: return (char *)0x0;
	0001d4b9:LEAVE
	0001d4ba:RET
END_OF_LINE
----------------------------------------------
17: iVar1 = memcmp(value,vallist + valsize * i,valsize);
	0001d455:IMUL RAX,qword ptr [RBP + -0x8]
	0001d45a:MOV RDX,RAX
	0001d45d:MOV RAX,qword ptr [RBP + -0x28]
	0001d461:LEA RCX,[RDX + RAX*0x1]
	0001d465:MOV RDX,qword ptr [RBP + -0x30]
	0001d469:MOV RAX,qword ptr [RBP + -0x18]
	0001d46d:MOV RSI,RCX
	0001d470:MOV RDI,RAX
	0001d473:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
18: if (iVar1 == 0) break;
	0001d478:TEST EAX,EAX
	0001d47a:JNZ 0x0001d494
END_OF_LINE
----------------------------------------------
19: i = i + 1;
	0001d494:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
21: return arglist[i];
	0001d48c:ADD RAX,RDX
	0001d48f:MOV RAX,qword ptr [RAX]
	0001d492:JMP 0x0001d4b9
	0001d494:ADD qword ptr [RBP + -0x8],0x1
	0001d499:MOV RAX,qword ptr [RBP + -0x8]
	0001d49d:LEA RDX,[RAX*0x8]
	0001d4a5:MOV RAX,qword ptr [RBP + -0x20]
	0001d4a9:ADD RAX,RDX
	0001d4ac:MOV RAX,qword ptr [RAX]
	0001d4af:TEST RAX,RAX
	0001d4b2:JNZ 0x0001d451
	0001d4b4:MOV EAX,0x0
	0001d4b9:LEAVE
	0001d4ba:RET
END_OF_LINE



Function: set_simple_backup_suffix
----------------------------------------------
8: s_local = s;
	0001d4d0:JNZ 0x0001d4e5
END_OF_LINE
----------------------------------------------
9: if (s == (char *)0x0) {
	0001d4cb:CMP qword ptr [RBP + -0x8],0x0
	0001d4d0:JNZ 0x0001d4e5
END_OF_LINE
----------------------------------------------
10: s_local = getenv("SIMPLE_BACKUP_SUFFIX");
	0001d4dc:CALL 0x00005880
END_OF_LINE
----------------------------------------------
12: if (((s_local == (char *)0x0) || (*s_local == '\0')) ||
	0001d4e5:CMP qword ptr [RBP + -0x8],0x0
	0001d4ea:JZ 0x0001d50f
	0001d4ec:MOV RAX,qword ptr [RBP + -0x8]
	0001d4f0:MOVZX EAX,byte ptr [RAX]
	0001d4f3:TEST AL,AL
	0001d4f5:JZ 0x0001d50f
	0001d4f7:MOV RAX,qword ptr [RBP + -0x8]
	0001d4fb:MOV RDI,RAX
	0001d4fe:CALL 0x0001e0fe
	0001d503:CMP qword ptr [RBP + -0x8],RAX
	0001d507:JNZ 0x0001d50f
END_OF_LINE
----------------------------------------------
13: (pcVar1 = last_component(s_local), s_local != pcVar1)) {
	0001d4fe:CALL 0x0001e0fe
	0001d503:CMP qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
14: s_local = "~";
	0001d50f:LEA RAX,[0x344f2]
END_OF_LINE
----------------------------------------------
16: simple_backup_suffix = s_local;
	0001d51d:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
17: return;
	0001d522:RET
END_OF_LINE



Function: check_extension
----------------------------------------------
24: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	0001d53c:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
25: name = (undefined2 *)last_component(file);
	0001d552:CALL 0x0001e0fe
END_OF_LINE
----------------------------------------------
26: sVar3 = base_len((char *)name);
	0001d562:CALL 0x0001e16b
END_OF_LINE
----------------------------------------------
27: baselen_max = 0xff;
	0001d56b:MOV qword ptr [RBP + -0x30],0xff
END_OF_LINE
----------------------------------------------
28: if (0xe < sVar3) {
	0001d578:JBE 0x0001d5ed
END_OF_LINE
----------------------------------------------
29: uVar1 = *name;
	0001d57e:MOVZX EAX,word ptr [RAX]
END_OF_LINE
----------------------------------------------
30: *name = 0x2e;
	0001d589:MOV word ptr [RAX],0x2e
END_OF_LINE
----------------------------------------------
31: piVar4 = __errno_location();
	0001d58e:CALL 0x00005900
END_OF_LINE
----------------------------------------------
32: *piVar4 = 0;
	0001d593:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
33: sVar5 = pathconf(file,3);
	0001d5a5:CALL 0x00005a70
END_OF_LINE
----------------------------------------------
34: if ((-1 < (long)sVar5) || (piVar4 = __errno_location(), *piVar4 == 0)) {
	0001d5ae:CMP qword ptr [RBP + -0x20],0x0
	0001d5b3:JNS 0x0001d5c0
	0001d5b5:CALL 0x00005900
	0001d5ba:MOV EAX,dword ptr [RAX]
	0001d5bc:TEST EAX,EAX
	0001d5be:JNZ 0x0001d5e2
END_OF_LINE
----------------------------------------------
35: baselen_max = sVar5;
	0001d5d8:JZ 0x0001d5e2
END_OF_LINE
----------------------------------------------
37: *name = uVar1;
	0001d5ea:MOV word ptr [RAX],DX
END_OF_LINE
----------------------------------------------
39: if (baselen_max < sVar3) {
	0001d5f1:CMP RAX,qword ptr [RBP + -0x38]
	0001d5f5:JNC 0x0001d643
END_OF_LINE
----------------------------------------------
40: baselen = (size_t)(file + (filelen - (long)name));
	0001d602:SUB RAX,qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
41: if (baselen_max <= baselen) {
	0001d612:JA 0x0001d620
END_OF_LINE
----------------------------------------------
42: baselen = baselen_max - 1;
	0001d618:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
44: *(char *)((long)name + baselen) = e;
	0001d628:ADD RDX,RAX
	0001d62b:MOVZX EAX,byte ptr [RBP + -0x54]
	0001d62f:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
45: *(undefined *)((long)name + baselen + 1) = 0;
	0001d635:LEA RDX,[RAX + 0x1]
	0001d639:MOV RAX,qword ptr [RBP + -0x28]
	0001d63d:ADD RAX,RDX
	0001d640:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
47: if (lVar2 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001d648:SUB RAX,qword ptr FS:[0x28]
	0001d651:JZ 0x0001d658
END_OF_LINE
----------------------------------------------
48: return;
	0001d659:RET
END_OF_LINE
----------------------------------------------
51: __stack_chk_fail();
	0001d653:CALL 0x00005b00
END_OF_LINE



Function: numbered_backup
----------------------------------------------
38: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	0001d686:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
39: result = BACKUP_IS_NEW;
	0001d695:MOV dword ptr [RBP + -0x6c],0x2
END_OF_LINE
----------------------------------------------
40: dirp = *dirpp;
	0001d6a3:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
41: buf = *buffer;
	0001d6ae:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
42: versionlenmax = 1;
	0001d6b5:MOV qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
43: name = (undefined2 *)(buf + base_offset);
	0001d6c8:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
44: sVar4 = base_len((char *)name);
	0001d6d6:CALL 0x0001e16b
END_OF_LINE
----------------------------------------------
45: buffer_size_local = buffer_size;
	0001d6e4:JZ 0x0001d6f7
END_OF_LINE
----------------------------------------------
46: if (dirp == (DIR *)0x0) {
	0001d6df:CMP qword ptr [RBP + -0x68],0x0
	0001d6e4:JZ 0x0001d6f7
END_OF_LINE
----------------------------------------------
47: uVar1 = *name;
	0001d6fb:MOVZX EAX,word ptr [RAX]
END_OF_LINE
----------------------------------------------
48: *name = 0x2e;
	0001d706:MOV word ptr [RAX],0x2e
END_OF_LINE
----------------------------------------------
49: dirp = opendir_safer(buf);
	0001d712:CALL 0x0001de58
END_OF_LINE
----------------------------------------------
50: if ((dirp == (DIR *)0x0) && (piVar5 = __errno_location(), *piVar5 == 0xc)) {
	0001d71b:CMP qword ptr [RBP + -0x68],0x0
	0001d720:JNZ 0x0001d735
	0001d722:CALL 0x00005900
	0001d727:MOV EAX,dword ptr [RAX]
	0001d729:CMP EAX,0xc
	0001d72c:JNZ 0x0001d735
END_OF_LINE
----------------------------------------------
51: result = BACKUP_NOMEM;
	0001d72e:MOV dword ptr [RBP + -0x6c],0x3
END_OF_LINE
----------------------------------------------
53: *name = uVar1;
	0001d73d:MOV word ptr [RAX],DX
END_OF_LINE
----------------------------------------------
54: *(undefined4 *)(sVar4 + (long)name) = 0x7e317e2e;
	0001d748:ADD RAX,RDX
	0001d74b:MOV dword ptr [RAX],0x7e317e2e
END_OF_LINE
----------------------------------------------
55: *(undefined *)((undefined4 *)(sVar4 + (long)name) + 1) = 0;
	0001d748:ADD RAX,RDX
	0001d74b:MOV dword ptr [RAX],0x7e317e2e
	0001d751:MOV byte ptr [RAX + 0x4],0x0
END_OF_LINE
----------------------------------------------
56: if (dirp == (DIR *)0x0) goto LAB_0001da3b;
	0001d755:CMP qword ptr [RBP + -0x68],0x0
	0001d75a:JNZ 0x0001d764
	0001d75c:MOV EAX,dword ptr [RBP + -0x6c]
	0001d75f:JMP 0x0001da3b
	0001d764:MOV RAX,qword ptr [RBP + -0x98]
	0001d76b:MOV RDX,qword ptr [RBP + -0x68]
	0001d76f:MOV qword ptr [RAX],RDX
	0001d772:JMP 0x0001da12
	0001d777:MOV RAX,qword ptr [RBP + -0x28]
	0001d77b:ADD RAX,0x13
	0001d77f:MOV RDI,RAX
	0001d782:CALL 0x00005ad0
	0001d787:MOV RDX,qword ptr [RBP + -0x30]
	0001d78b:ADD RDX,0x4
	0001d78f:CMP RAX,RDX
	0001d792:JNC 0x0001d799
	0001d794:JMP 0x0001da12
	0001d799:MOV RAX,qword ptr [RBP + -0x30]
	0001d79d:LEA RDX,[RAX + 0x2]
	0001d7a1:MOV RAX,qword ptr [RBP + -0x28]
	0001d7a5:LEA RCX,[RAX + 0x13]
	0001d7a9:MOV RSI,qword ptr [RBP + -0x90]
	0001d7b0:MOV RAX,qword ptr [RBP + -0x60]
	0001d7b4:ADD RAX,RSI
	0001d7b7:MOV RSI,RCX
	0001d7ba:MOV RDI,RAX
	0001d7bd:CALL 0x00005cb0
	0001d7c2:TEST EAX,EAX
	0001d7c4:JZ 0x0001d7cb
	0001d7c6:JMP 0x0001da12
	0001d7cb:MOV RAX,qword ptr [RBP + -0x28]
	0001d7cf:LEA RDX,[RAX + 0x13]
	0001d7d3:MOV RAX,qword ptr [RBP + -0x30]
	0001d7d7:ADD RAX,0x2
	0001d7db:ADD RAX,RDX
	0001d7de:MOV qword ptr [RBP + -0x20],RAX
	0001d7e2:MOV RAX,qword ptr [RBP + -0x20]
	0001d7e6:MOVZX EAX,byte ptr [RAX]
	0001d7e9:CMP AL,0x30
	0001d7eb:JLE 0x0001da12
	0001d7f1:MOV RAX,qword ptr [RBP + -0x20]
	0001d7f5:MOVZX EAX,byte ptr [RAX]
	0001d7f8:CMP AL,0x39
	0001d7fa:JLE 0x0001d801
	0001d7fc:JMP 0x0001da12
	0001d801:MOV RAX,qword ptr [RBP + -0x20]
	0001d805:MOVZX EAX,byte ptr [RAX]
	0001d808:CMP AL,0x39
	0001d80a:SETZ AL
	0001d80d:MOV byte ptr [RBP + -0x6d],AL
	0001d810:MOV qword ptr [RBP + -0x48],0x1
	0001d818:JMP 0x0001d843
	0001d81a:MOVZX EDX,byte ptr [RBP + -0x6d]
	0001d81e:MOV RCX,qword ptr [RBP + -0x20]
	0001d822:MOV RAX,qword ptr [RBP + -0x48]
	0001d826:ADD RAX,RCX
	0001d829:MOVZX EAX,byte ptr [RAX]
	0001d82c:CMP AL,0x39
	0001d82e:SETZ AL
	0001d831:MOVZX EAX,AL
	0001d834:AND EAX,EDX
	0001d836:TEST EAX,EAX
	0001d838:SETNZ AL
	0001d83b:MOV byte ptr [RBP + -0x6d],AL
	0001d83e:ADD qword ptr [RBP + -0x48],0x1
	0001d843:MOV RDX,qword ptr [RBP + -0x20]
	0001d847:MOV RAX,qword ptr [RBP + -0x48]
	0001d84b:ADD RAX,RDX
	0001d84e:MOVZX EAX,byte ptr [RAX]
	0001d851:MOVSX EAX,AL
	0001d854:SUB EAX,0x30
	0001d857:CMP EAX,0x9
	0001d85a:JBE 0x0001d81a
	0001d85c:MOV RDX,qword ptr [RBP + -0x20]
	0001d860:MOV RAX,qword ptr [RBP + -0x48]
	0001d864:ADD RAX,RDX
	0001d867:MOVZX EAX,byte ptr [RAX]
	0001d86a:CMP AL,0x7e
	0001d86c:JNZ 0x0001da12
	0001d872:MOV RAX,qword ptr [RBP + -0x48]
	0001d876:LEA RDX,[RAX + 0x1]
	0001d87a:MOV RAX,qword ptr [RBP + -0x20]
	0001d87e:ADD RAX,RDX
	0001d881:MOVZX EAX,byte ptr [RAX]
	0001d884:TEST AL,AL
	0001d886:JNZ 0x0001da12
	0001d88c:MOV RAX,qword ptr [RBP + -0x58]
	0001d890:CMP RAX,qword ptr [RBP + -0x48]
	0001d894:JC 0x0001d8d3
	0001d896:MOV RAX,qword ptr [RBP + -0x58]
	0001d89a:CMP RAX,qword ptr [RBP + -0x48]
	0001d89e:JNZ 0x0001da12
	0001d8a4:MOV RAX,qword ptr [RBP + -0x88]
	0001d8ab:LEA RDX,[RAX + 0x2]
	0001d8af:MOV RAX,qword ptr [RBP + -0x60]
	0001d8b3:LEA RCX,[RDX + RAX*0x1]
	0001d8b7:MOV RDX,qword ptr [RBP + -0x48]
	0001d8bb:MOV RAX,qword ptr [RBP + -0x20]
	0001d8bf:MOV RSI,RAX
	0001d8c2:MOV RDI,RCX
	0001d8c5:CALL 0x00005cb0
	0001d8ca:TEST EAX,EAX
	0001d8cc:JLE 0x0001d8d3
	0001d8ce:JMP 0x0001da12
	0001d8d3:MOVZX EDX,byte ptr [RBP + -0x6d]
	0001d8d7:MOV RAX,qword ptr [RBP + -0x48]
	0001d8db:ADD RAX,RDX
	0001d8de:MOV qword ptr [RBP + -0x58],RAX
	0001d8e2:MOVZX EAX,byte ptr [RBP + -0x6d]
	0001d8e6:MOVZX EAX,AL
	0001d8e9:MOV dword ptr [RBP + -0x6c],EAX
	0001d8ec:MOV RDX,qword ptr [RBP + -0x88]
	0001d8f3:MOV RAX,qword ptr [RBP + -0x58]
	0001d8f7:ADD RAX,RDX
	0001d8fa:ADD RAX,0x4
	0001d8fe:MOV qword ptr [RBP + -0x40],RAX
	0001d902:MOV RAX,qword ptr [RBP + -0x80]
	0001d906:CMP RAX,qword ptr [RBP + -0x40]
	0001d90a:JNC 0x0001d985
	0001d90c:MOV EAX,0x0
	0001d911:MOV RDX,qword ptr [RBP + -0x40]
	0001d915:ADD RDX,RDX
	0001d918:MOV RCX,qword ptr [RBP + -0x40]
	0001d91c:SHR RCX,0x3f
	0001d920:TEST RCX,RCX
	0001d923:JZ 0x0001d92a
	0001d925:MOV EAX,0x1
	0001d92a:TEST RDX,RDX
	0001d92d:JNS 0x0001d934
	0001d92f:MOV EAX,0x1
	0001d934:AND EAX,0x1
	0001d937:XOR EAX,0x1
	0001d93a:TEST AL,AL
	0001d93c:JZ 0x0001d942
	0001d93e:SHL qword ptr [RBP + -0x40],0x1
	0001d942:MOV RDX,qword ptr [RBP + -0x40]
	0001d946:MOV RAX,qword ptr [RBP + -0x60]
	0001d94a:MOV RSI,RDX
	0001d94d:MOV RDI,RAX
	0001d950:CALL 0x00005ea0
	0001d955:MOV qword ptr [RBP + -0x18],RAX
	0001d959:CMP qword ptr [RBP + -0x18],0x0
	0001d95e:JNZ 0x0001d975
	0001d960:MOV RAX,qword ptr [RBP + -0x78]
	0001d964:MOV RDX,qword ptr [RBP + -0x60]
	0001d968:MOV qword ptr [RAX],RDX
	0001d96b:MOV EAX,0x3
	0001d970:JMP 0x0001da3b
	0001d975:MOV RAX,qword ptr [RBP + -0x18]
	0001d979:MOV qword ptr [RBP + -0x60],RAX
	0001d97d:MOV RAX,qword ptr [RBP + -0x40]
	0001d981:MOV qword ptr [RBP + -0x80],RAX
	0001d985:MOV RDX,qword ptr [RBP + -0x60]
	0001d989:MOV RAX,qword ptr [RBP + -0x88]
	0001d990:ADD RAX,RDX
	0001d993:MOV qword ptr [RBP + -0x50],RAX
	0001d997:MOV RAX,qword ptr [RBP + -0x50]
	0001d99b:LEA RDX,[RAX + 0x1]
	0001d99f:MOV qword ptr [RBP + -0x50],RDX
	0001d9a3:MOV byte ptr [RAX],0x2e
	0001d9a6:MOV RAX,qword ptr [RBP + -0x50]
	0001d9aa:LEA RDX,[RAX + 0x1]
	0001d9ae:MOV qword ptr [RBP + -0x50],RDX
	0001d9b2:MOV byte ptr [RAX],0x7e
	0001d9b5:MOV RAX,qword ptr [RBP + -0x50]
	0001d9b9:MOV byte ptr [RAX],0x30
	0001d9bc:MOVZX EAX,byte ptr [RBP + -0x6d]
	0001d9c0:ADD qword ptr [RBP + -0x50],RAX
	0001d9c4:MOV RAX,qword ptr [RBP + -0x48]
	0001d9c8:LEA RDX,[RAX + 0x2]
	0001d9cc:MOV RCX,qword ptr [RBP + -0x20]
	0001d9d0:MOV RAX,qword ptr [RBP + -0x50]
	0001d9d4:MOV RSI,RCX
	0001d9d7:MOV RDI,RAX
	0001d9da:CALL 0x00005d90
	0001d9df:MOV RAX,qword ptr [RBP + -0x48]
	0001d9e3:ADD qword ptr [RBP + -0x50],RAX
	0001d9e7:JMP 0x0001d9f0
	0001d9e9:MOV RAX,qword ptr [RBP + -0x50]
	0001d9ed:MOV byte ptr [RAX],0x30
	0001d9f0:SUB qword ptr [RBP + -0x50],0x1
	0001d9f5:MOV RAX,qword ptr [RBP + -0x50]
	0001d9f9:MOVZX EAX,byte ptr [RAX]
	0001d9fc:CMP AL,0x39
	0001d9fe:JZ 0x0001d9e9
	0001da00:MOV RAX,qword ptr [RBP + -0x50]
	0001da04:MOVZX EAX,byte ptr [RAX]
	0001da07:ADD EAX,0x1
	0001da0a:MOV EDX,EAX
	0001da0c:MOV RAX,qword ptr [RBP + -0x50]
	0001da10:MOV byte ptr [RAX],DL
	0001da12:MOV RAX,qword ptr [RBP + -0x68]
	0001da16:MOV RDI,RAX
	0001da19:CALL 0x00005dd0
	0001da1e:MOV qword ptr [RBP + -0x28],RAX
	0001da22:CMP qword ptr [RBP + -0x28],0x0
	0001da27:JNZ 0x0001d777
	0001da2d:MOV RAX,qword ptr [RBP + -0x78]
	0001da31:MOV RDX,qword ptr [RBP + -0x60]
	0001da35:MOV qword ptr [RAX],RDX
	0001da38:MOV EAX,dword ptr [RBP + -0x6c]
	0001da3b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
57: *dirpp = dirp;
	0001d76f:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
60: rewinddir((DIR *)dirp);
	0001d6ed:CALL 0x00005c40
END_OF_LINE
----------------------------------------------
62: while (pdVar9 = readdir((DIR *)dirp), pdVar9 != (dirent *)0x0) {
	0001da19:CALL 0x00005dd0
	0001da1e:MOV qword ptr [RBP + -0x28],RAX
	0001da22:CMP qword ptr [RBP + -0x28],0x0
	0001da27:JNZ 0x0001d777
END_OF_LINE
----------------------------------------------
63: sVar6 = strlen(pdVar9->d_name);
	0001d77b:ADD RAX,0x13
	0001d77f:MOV RDI,RAX
	0001d782:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
64: if ((((sVar4 + 4 <= sVar6) &&
	0001d78b:ADD RDX,0x4
	0001d78f:CMP RAX,RDX
	0001d792:JNC 0x0001d799
	0001d794:JMP 0x0001da12
	0001d799:MOV RAX,qword ptr [RBP + -0x30]
	0001d79d:LEA RDX,[RAX + 0x2]
	0001d7a1:MOV RAX,qword ptr [RBP + -0x28]
	0001d7a5:LEA RCX,[RAX + 0x13]
	0001d7a9:MOV RSI,qword ptr [RBP + -0x90]
	0001d7b0:MOV RAX,qword ptr [RBP + -0x60]
	0001d7b4:ADD RAX,RSI
	0001d7b7:MOV RSI,RCX
	0001d7ba:MOV RDI,RAX
	0001d7bd:CALL 0x00005cb0
	0001d7c2:TEST EAX,EAX
	0001d7c4:JZ 0x0001d7cb
	0001d7c6:JMP 0x0001da12
	0001d7cb:MOV RAX,qword ptr [RBP + -0x28]
	0001d7cf:LEA RDX,[RAX + 0x13]
	0001d7d3:MOV RAX,qword ptr [RBP + -0x30]
	0001d7d7:ADD RAX,0x2
	0001d7db:ADD RAX,RDX
	0001d7de:MOV qword ptr [RBP + -0x20],RAX
	0001d7e2:MOV RAX,qword ptr [RBP + -0x20]
	0001d7e6:MOVZX EAX,byte ptr [RAX]
	0001d7e9:CMP AL,0x30
	0001d7eb:JLE 0x0001da12
	0001d7f1:MOV RAX,qword ptr [RBP + -0x20]
	0001d7f5:MOVZX EAX,byte ptr [RAX]
	0001d7f8:CMP AL,0x39
	0001d7fa:JLE 0x0001d801
END_OF_LINE
----------------------------------------------
65: (iVar3 = memcmp(buf + base_offset,pdVar9->d_name,sVar4 + 2), iVar3 == 0)) &&
	0001d79d:LEA RDX,[RAX + 0x2]
	0001d7a1:MOV RAX,qword ptr [RBP + -0x28]
	0001d7a5:LEA RCX,[RAX + 0x13]
	0001d7a9:MOV RSI,qword ptr [RBP + -0x90]
	0001d7b0:MOV RAX,qword ptr [RBP + -0x60]
	0001d7b4:ADD RAX,RSI
	0001d7b7:MOV RSI,RCX
	0001d7ba:MOV RDI,RAX
	0001d7bd:CALL 0x00005cb0
	0001d7c2:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
66: (__s2 = pdVar9->d_name + sVar4 + 2, '0' < *__s2)) && (*__s2 < ':')) {
	0001d7db:ADD RAX,RDX
	0001d7de:MOV qword ptr [RBP + -0x20],RAX
	0001d7e2:MOV RAX,qword ptr [RBP + -0x20]
	0001d7e6:MOVZX EAX,byte ptr [RAX]
	0001d7e9:CMP AL,0x30
	0001d7eb:JLE 0x0001da12
	0001d7f1:MOV RAX,qword ptr [RBP + -0x20]
	0001d7f5:MOVZX EAX,byte ptr [RAX]
	0001d7f8:CMP AL,0x39
	0001d7fa:JLE 0x0001d801
END_OF_LINE
----------------------------------------------
67: all_9s = *__s2 == '9';
	0001d805:MOVZX EAX,byte ptr [RAX]
	0001d808:CMP AL,0x39
END_OF_LINE
----------------------------------------------
68: versionlen = 1;
	0001d810:MOV qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
69: while ((int)__s2[versionlen] - 0x30U < 10) {
	0001d84b:ADD RAX,RDX
	0001d84e:MOVZX EAX,byte ptr [RAX]
	0001d851:MOVSX EAX,AL
	0001d854:SUB EAX,0x30
	0001d857:CMP EAX,0x9
	0001d85a:JBE 0x0001d81a
END_OF_LINE
----------------------------------------------
70: all_9s = (__s2[versionlen] == '9' & all_9s) != 0;
	0001d826:ADD RAX,RCX
	0001d829:MOVZX EAX,byte ptr [RAX]
	0001d82c:CMP AL,0x39
	0001d82e:SETZ AL
	0001d831:MOVZX EAX,AL
	0001d834:AND EAX,EDX
	0001d836:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
71: versionlen = versionlen + 1;
	0001d83e:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
73: if (((__s2[versionlen] == '~') && (__s2[versionlen + 1] == '\0')) &&
	0001d864:ADD RAX,RDX
	0001d867:MOVZX EAX,byte ptr [RAX]
	0001d86a:CMP AL,0x7e
	0001d86c:JNZ 0x0001da12
	0001d872:MOV RAX,qword ptr [RBP + -0x48]
	0001d876:LEA RDX,[RAX + 0x1]
	0001d87a:MOV RAX,qword ptr [RBP + -0x20]
	0001d87e:ADD RAX,RDX
	0001d881:MOVZX EAX,byte ptr [RAX]
	0001d884:TEST AL,AL
	0001d886:JNZ 0x0001da12
	0001d88c:MOV RAX,qword ptr [RBP + -0x58]
	0001d890:CMP RAX,qword ptr [RBP + -0x48]
	0001d894:JC 0x0001d8d3
	0001d896:MOV RAX,qword ptr [RBP + -0x58]
	0001d89a:CMP RAX,qword ptr [RBP + -0x48]
	0001d89e:JNZ 0x0001da12
	0001d8a4:MOV RAX,qword ptr [RBP + -0x88]
	0001d8ab:LEA RDX,[RAX + 0x2]
	0001d8af:MOV RAX,qword ptr [RBP + -0x60]
	0001d8b3:LEA RCX,[RDX + RAX*0x1]
	0001d8b7:MOV RDX,qword ptr [RBP + -0x48]
	0001d8bb:MOV RAX,qword ptr [RBP + -0x20]
	0001d8bf:MOV RSI,RAX
	0001d8c2:MOV RDI,RCX
	0001d8c5:CALL 0x00005cb0
	0001d8ca:TEST EAX,EAX
	0001d8cc:JLE 0x0001d8d3
END_OF_LINE
----------------------------------------------
74: ((versionlenmax < versionlen ||
	0001d890:CMP RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
75: ((versionlenmax == versionlen &&
	0001d89a:CMP RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
76: (iVar3 = memcmp(buf + filelen + 2,__s2,versionlen), iVar3 < 1)))))) {
	0001d8ab:LEA RDX,[RAX + 0x2]
	0001d8af:MOV RAX,qword ptr [RBP + -0x60]
	0001d8b3:LEA RCX,[RDX + RAX*0x1]
	0001d8b7:MOV RDX,qword ptr [RBP + -0x48]
	0001d8bb:MOV RAX,qword ptr [RBP + -0x20]
	0001d8bf:MOV RSI,RAX
	0001d8c2:MOV RDI,RCX
	0001d8c5:CALL 0x00005cb0
	0001d8ca:TEST EAX,EAX
	0001d8cc:JLE 0x0001d8d3
END_OF_LINE
----------------------------------------------
77: versionlenmax = versionlen + all_9s;
	0001d8d3:MOVZX EDX,byte ptr [RBP + -0x6d]
	0001d8d7:MOV RAX,qword ptr [RBP + -0x48]
	0001d8db:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
78: result = (numbered_backup_result)all_9s;
	0001d8e9:MOV dword ptr [RBP + -0x6c],EAX
END_OF_LINE
----------------------------------------------
79: new_buffer_size = versionlenmax + filelen + 4;
	0001d8f7:ADD RAX,RDX
	0001d8fa:ADD RAX,0x4
END_OF_LINE
----------------------------------------------
80: if (buffer_size_local < new_buffer_size) {
	0001d906:CMP RAX,qword ptr [RBP + -0x40]
	0001d90a:JNC 0x0001d985
END_OF_LINE
----------------------------------------------
81: if (-1 < (long)(new_buffer_size * 2) && -1 < (long)new_buffer_size) {
	0001d915:ADD RDX,RDX
	0001d918:MOV RCX,qword ptr [RBP + -0x40]
	0001d91c:SHR RCX,0x3f
	0001d920:TEST RCX,RCX
	0001d923:JZ 0x0001d92a
	0001d925:MOV EAX,0x1
	0001d92a:TEST RDX,RDX
	0001d92d:JNS 0x0001d934
	0001d92f:MOV EAX,0x1
	0001d934:AND EAX,0x1
	0001d937:XOR EAX,0x1
	0001d93a:TEST AL,AL
	0001d93c:JZ 0x0001d942
END_OF_LINE
----------------------------------------------
82: new_buffer_size = new_buffer_size * 2;
	0001d93e:SHL qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
84: pcVar7 = (char *)realloc(buf,new_buffer_size);
	0001d950:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
85: if (pcVar7 == (char *)0x0) {
	0001d959:CMP qword ptr [RBP + -0x18],0x0
	0001d95e:JNZ 0x0001d975
END_OF_LINE
----------------------------------------------
86: *buffer = buf;
	0001d968:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
87: result = BACKUP_NOMEM;
	0001d96b:MOV EAX,0x3
END_OF_LINE
----------------------------------------------
88: goto LAB_0001da3b;
	0001da3b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
90: buffer_size_local = new_buffer_size;
	0001d981:MOV qword ptr [RBP + -0x80],RAX
END_OF_LINE
----------------------------------------------
91: buf = pcVar7;
	0001d981:MOV qword ptr [RBP + -0x80],RAX
END_OF_LINE
----------------------------------------------
93: pcVar8 = buf + filelen;
	0001d990:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
94: *pcVar8 = '.';
	0001d9a3:MOV byte ptr [RAX],0x2e
END_OF_LINE
----------------------------------------------
95: pcVar7 = pcVar8 + 2;
	0001d9aa:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
96: pcVar8[1] = '~';
	0001d99b:LEA RDX,[RAX + 0x1]
	0001d99f:MOV qword ptr [RBP + -0x50],RDX
	0001d9a3:MOV byte ptr [RAX],0x2e
	0001d9a6:MOV RAX,qword ptr [RBP + -0x50]
	0001d9aa:LEA RDX,[RAX + 0x1]
	0001d9ae:MOV qword ptr [RBP + -0x50],RDX
	0001d9b2:MOV byte ptr [RAX],0x7e
END_OF_LINE
----------------------------------------------
97: *pcVar7 = '0';
	0001d9b9:MOV byte ptr [RAX],0x30
END_OF_LINE
----------------------------------------------
98: memcpy(pcVar7 + all_9s,__s2,versionlen + 2);
	0001d9bc:MOVZX EAX,byte ptr [RBP + -0x6d]
	0001d9c0:ADD qword ptr [RBP + -0x50],RAX
	0001d9c4:MOV RAX,qword ptr [RBP + -0x48]
	0001d9c8:LEA RDX,[RAX + 0x2]
	0001d9cc:MOV RCX,qword ptr [RBP + -0x20]
	0001d9d0:MOV RAX,qword ptr [RBP + -0x50]
	0001d9d4:MOV RSI,RCX
	0001d9d7:MOV RDI,RAX
	0001d9da:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
99: q = pcVar7 + all_9s + versionlen;
	0001d9bc:MOVZX EAX,byte ptr [RBP + -0x6d]
	0001d9c0:ADD qword ptr [RBP + -0x50],RAX
	0001d9c4:MOV RAX,qword ptr [RBP + -0x48]
	0001d9c8:LEA RDX,[RAX + 0x2]
	0001d9cc:MOV RCX,qword ptr [RBP + -0x20]
	0001d9d0:MOV RAX,qword ptr [RBP + -0x50]
	0001d9d4:MOV RSI,RCX
	0001d9d7:MOV RDI,RAX
	0001d9da:CALL 0x00005d90
	0001d9df:MOV RAX,qword ptr [RBP + -0x48]
	0001d9e3:ADD qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
100: while (q = q + -1, *q == '9') {
	0001d9f0:SUB qword ptr [RBP + -0x50],0x1
	0001d9f5:MOV RAX,qword ptr [RBP + -0x50]
	0001d9f9:MOVZX EAX,byte ptr [RAX]
	0001d9fc:CMP AL,0x39
	0001d9fe:JZ 0x0001d9e9
END_OF_LINE
----------------------------------------------
101: *q = '0';
	0001d9ed:MOV byte ptr [RAX],0x30
END_OF_LINE
----------------------------------------------
103: *q = *q + '\x01';
	0001da04:MOVZX EAX,byte ptr [RAX]
	0001da07:ADD EAX,0x1
	0001da0a:MOV EDX,EAX
	0001da0c:MOV RAX,qword ptr [RBP + -0x50]
	0001da10:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
107: *buffer = buf;
	0001da35:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
108: LAB_0001da3b:
	0001da3b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
109: if (lVar2 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001da3f:SUB RDX,qword ptr FS:[0x28]
	0001da48:JZ 0x0001da4f
END_OF_LINE
----------------------------------------------
111: __stack_chk_fail();
	0001da4a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
113: return result;
	0001da50:RET
END_OF_LINE



Function: backupfile_internal
----------------------------------------------
26: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0001da69:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
27: pcVar3 = last_component(file);
	0001da7f:CALL 0x0001e0fe
END_OF_LINE
----------------------------------------------
28: base_offset = (long)pcVar3 - (long)file;
	0001da84:SUB RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
29: sVar4 = strlen(file + base_offset);
	0001da94:ADD RAX,RDX
	0001da97:MOV RDI,RAX
	0001da9a:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
30: filelen = sVar4 + base_offset;
	0001daa3:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
31: if (simple_backup_suffix == (char *)0x0) {
	0001dab4:TEST RAX,RAX
	0001dab7:JNZ 0x0001dac3
END_OF_LINE
----------------------------------------------
32: set_simple_backup_suffix((char *)0x0);
	0001dabe:CALL 0x0001d4bb
END_OF_LINE
----------------------------------------------
34: sVar4 = strlen(simple_backup_suffix);
	0001dad0:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
35: simple_backup_suffix_size = sVar4 + 1;
	0001dad5:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
36: backup_suffix_size_guess = simple_backup_suffix_size;
	0001daea:JA 0x0001daf4
END_OF_LINE
----------------------------------------------
37: if (simple_backup_suffix_size < 9) {
	0001daea:JA 0x0001daf4
END_OF_LINE
----------------------------------------------
38: backup_suffix_size_guess = 9;
	0001daec:MOV qword ptr [RBP + -0x28],0x9
END_OF_LINE
----------------------------------------------
40: ssize = backup_suffix_size_guess + filelen + 1;
	0001dafc:ADD RAX,RDX
	0001daff:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
41: pcVar3 = (char *)malloc(ssize);
	0001db0e:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
42: s = pcVar3;
	0001db1e:JNZ 0x0001db29
END_OF_LINE
----------------------------------------------
43: if (pcVar3 != (char *)0x0) {
	0001db1b:TEST RAX,RAX
	0001db1e:JNZ 0x0001db29
END_OF_LINE
----------------------------------------------
44: dirp = (DIR *)0x0;
	0001db29:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
45: backup_type_local = backup_type;
	0001db29:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
47: memcpy(s,file,filelen + 1);
	0001db35:LEA RDX,[RAX + 0x1]
	0001db39:MOV RAX,qword ptr [RBP + -0x40]
	0001db3d:MOV RCX,qword ptr [RBP + -0x58]
	0001db41:MOV RSI,RCX
	0001db44:MOV RDI,RAX
	0001db47:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
48: if (backup_type_local == simple_backups) {
	0001db4c:CMP dword ptr [RBP + -0x5c],0x1
	0001db50:JNZ 0x0001db7b
END_OF_LINE
----------------------------------------------
49: memcpy(s + filelen,simple_backup_suffix,simple_backup_suffix_size);
	0001db64:ADD RCX,RDX
	0001db67:MOV RDX,qword ptr [RBP + -0x18]
	0001db6b:MOV RSI,RAX
	0001db6e:MOV RDI,RCX
	0001db71:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
52: nVar1 = numbered_backup(&s,ssize,filelen,base_offset,&dirp);
	0001db7f:LEA RDI,[RBP + -0x38]
	0001db83:MOV RCX,qword ptr [RBP + -0x30]
	0001db87:MOV RDX,qword ptr [RBP + -0x20]
	0001db8b:LEA RAX,[RBP + -0x40]
	0001db8f:MOV R8,RDI
	0001db92:MOV RDI,RAX
	0001db95:CALL 0x0001d65a
END_OF_LINE
----------------------------------------------
53: if (nVar1 == BACKUP_NOMEM) {
	0001db9a:CMP EAX,0x3
	0001db9d:JZ 0x0001dc31
END_OF_LINE
----------------------------------------------
54: free(s);
	0001dc38:CALL 0x00005860
END_OF_LINE
----------------------------------------------
55: piVar5 = __errno_location();
	0001dc3d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
56: *piVar5 = 0xc;
	0001dc42:MOV dword ptr [RAX],0xc
END_OF_LINE
----------------------------------------------
57: pcVar3 = (char *)0x0;
	0001dc48:MOV EAX,0x0
	0001dc4d:JMP 0x0001dd30
END_OF_LINE
----------------------------------------------
58: goto LAB_0001dd30;
	0001dd30:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
60: if (nVar1 < 4) {
	0001dba6:JA 0x0001dc53
END_OF_LINE
----------------------------------------------
61: if (nVar1 == BACKUP_IS_NEW) {
	0001dbac:CMP EAX,0x2
	0001dbaf:JZ 0x0001dbcc
END_OF_LINE
----------------------------------------------
62: if (backup_type_local == numbered_existing_backups) {
	0001dbcc:CMP dword ptr [RBP + -0x5c],0x2
	0001dbd0:JNZ 0x0001dbfd
END_OF_LINE
----------------------------------------------
63: backup_type_local = simple_backups;
	0001dbd2:MOV dword ptr [RBP + -0x5c],0x1
END_OF_LINE
----------------------------------------------
64: memcpy(s + filelen,simple_backup_suffix,simple_backup_suffix_size);
	0001dbeb:ADD RCX,RDX
	0001dbee:MOV RDX,qword ptr [RBP + -0x18]
	0001dbf2:MOV RSI,RAX
	0001dbf5:MOV RDI,RCX
	0001dbf8:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
66: check_extension(s,filelen,'~');
	0001dc10:CALL 0x0001d523
END_OF_LINE
----------------------------------------------
68: else if (((nVar1 < BACKUP_NOMEM) && (nVar1 != BACKUP_IS_SAME_LENGTH)) &&
	0001dbb4:JA 0x0001dc53
	0001dbba:TEST EAX,EAX
	0001dbbc:JZ 0x0001dc52
	0001dbc2:CMP EAX,0x1
	0001dbc5:JZ 0x0001dc17
END_OF_LINE
----------------------------------------------
69: (nVar1 == BACKUP_IS_LONGER)) {
	0001dbc2:CMP EAX,0x1
END_OF_LINE
----------------------------------------------
70: check_extension(s,filelen,'~');
	0001dc2a:CALL 0x0001d523
END_OF_LINE
----------------------------------------------
74: if (!rename) {
	0001dc5a:TEST AL,AL
	0001dc5c:JNZ 0x0001dd13
END_OF_LINE
----------------------------------------------
75: LAB_0001dd17:
	0001dd17:MOV RAX,qword ptr [RBP + -0x38]
END_OF_LINE
----------------------------------------------
76: pcVar3 = s;
	0001dd1e:JZ 0x0001dd2c
END_OF_LINE
----------------------------------------------
77: if (dirp != (DIR *)0x0) {
	0001dd1b:TEST RAX,RAX
	0001dd1e:JZ 0x0001dd2c
END_OF_LINE
----------------------------------------------
78: closedir((DIR *)dirp);
	0001dd27:CALL 0x00005c50
END_OF_LINE
----------------------------------------------
79: pcVar3 = s;
	0001dd27:CALL 0x00005c50
END_OF_LINE
----------------------------------------------
81: goto LAB_0001dd30;
	0001dd30:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
83: if (dirp == (DIR *)0x0) {
	0001dc66:TEST RAX,RAX
	0001dc69:JZ 0x0001dc79
END_OF_LINE
----------------------------------------------
84: sdir = -1;
	0001dc79:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
87: sdir = dirfd((DIR *)dirp);
	0001dc72:CALL 0x00005d20
END_OF_LINE
----------------------------------------------
89: if (sdir < 0) {
	0001dc81:CMP dword ptr [RBP + -0x4c],0x0
	0001dc85:JNS 0x0001dc96
END_OF_LINE
----------------------------------------------
90: sdir = -100;
	0001dc87:MOV dword ptr [RBP + -0x4c],0xffffff9c
END_OF_LINE
----------------------------------------------
91: base_offset = 0;
	0001dc8e:MOV qword ptr [RBP + -0x30],0x0
END_OF_LINE
----------------------------------------------
93: iVar2 = renameat2(-100,file,sdir,s + base_offset,(uint)(backup_type_local != simple_backups));
	0001dc96:CMP dword ptr [RBP + -0x5c],0x1
	0001dc9a:SETNZ AL
	0001dc9d:MOVZX EAX,AL
	0001dca0:MOV dword ptr [RBP + -0x48],EAX
	0001dca3:MOV RDX,qword ptr [RBP + -0x40]
	0001dca7:MOV RAX,qword ptr [RBP + -0x30]
	0001dcab:LEA RCX,[RDX + RAX*0x1]
	0001dcaf:MOV ESI,dword ptr [RBP + -0x48]
	0001dcb2:MOV EDX,dword ptr [RBP + -0x4c]
	0001dcb5:MOV RAX,qword ptr [RBP + -0x58]
	0001dcb9:MOV R8D,ESI
	0001dcbc:MOV RSI,RAX
	0001dcbf:MOV EDI,0xffffff9c
	0001dcc4:CALL 0x0002aabb
END_OF_LINE
----------------------------------------------
94: if (iVar2 == 0) goto LAB_0001dd17;
	0001dcc9:TEST EAX,EAX
	0001dccb:JZ 0x0001dd16
	0001dccd:CALL 0x00005900
	0001dcd2:MOV EAX,dword ptr [RAX]
	0001dcd4:MOV dword ptr [RBP + -0x44],EAX
	0001dcd7:CMP dword ptr [RBP + -0x44],0x11
	0001dcdb:JZ 0x0001db31
	0001dce1:MOV RAX,qword ptr [RBP + -0x38]
	0001dce5:TEST RAX,RAX
	0001dce8:JZ 0x0001dcf6
	0001dcea:MOV RAX,qword ptr [RBP + -0x38]
	0001dcee:MOV RDI,RAX
	0001dcf1:CALL 0x00005c50
	0001dcf6:MOV RAX,qword ptr [RBP + -0x40]
	0001dcfa:MOV RDI,RAX
	0001dcfd:CALL 0x00005860
	0001dd02:CALL 0x00005900
	0001dd07:MOV EDX,dword ptr [RBP + -0x44]
	0001dd0a:MOV dword ptr [RAX],EDX
	0001dd0c:MOV EAX,0x0
	0001dd11:JMP 0x0001dd30
	0001dd13:NOP
	0001dd14:JMP 0x0001dd17
	0001dd16:NOP
	0001dd17:MOV RAX,qword ptr [RBP + -0x38]
END_OF_LINE
----------------------------------------------
95: piVar5 = __errno_location();
	0001dccd:CALL 0x00005900
END_OF_LINE
----------------------------------------------
96: iVar2 = *piVar5;
	0001dcd2:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
97: } while (iVar2 == 0x11);
	0001dcd7:CMP dword ptr [RBP + -0x44],0x11
	0001dcdb:JZ 0x0001db31
END_OF_LINE
----------------------------------------------
98: if (dirp != (DIR *)0x0) {
	0001dce5:TEST RAX,RAX
	0001dce8:JZ 0x0001dcf6
END_OF_LINE
----------------------------------------------
99: closedir((DIR *)dirp);
	0001dcf1:CALL 0x00005c50
END_OF_LINE
----------------------------------------------
101: free(s);
	0001dcfd:CALL 0x00005860
END_OF_LINE
----------------------------------------------
102: piVar5 = __errno_location();
	0001dd02:CALL 0x00005900
END_OF_LINE
----------------------------------------------
103: *piVar5 = iVar2;
	0001dd0a:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
104: pcVar3 = (char *)0x0;
	0001dd0c:MOV EAX,0x0
	0001dd11:JMP 0x0001dd30
END_OF_LINE
----------------------------------------------
106: LAB_0001dd30:
	0001dd30:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
107: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	0001dd34:SUB RDX,qword ptr FS:[0x28]
	0001dd3d:JZ 0x0001dd44
END_OF_LINE
----------------------------------------------
108: return pcVar3;
	0001dd45:RET
END_OF_LINE
----------------------------------------------
111: __stack_chk_fail();
	0001dd3f:CALL 0x00005b00
END_OF_LINE



Function: find_backup_file_name
----------------------------------------------
10: pcVar1 = backupfile_internal(file,backup_type,false);
	0001dd6a:CALL 0x0001da51
END_OF_LINE
----------------------------------------------
11: if (pcVar1 == (char *)0x0) {
	0001dd73:CMP qword ptr [RBP + -0x8],0x0
	0001dd78:JNZ 0x0001dd7f
END_OF_LINE
----------------------------------------------
13: xalloc_die();
	0001dd7a:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
15: return pcVar1;
	0001dd7f:MOV RAX,qword ptr [RBP + -0x8]
	0001dd83:LEAVE
	0001dd84:RET
END_OF_LINE



Function: get_version
----------------------------------------------
10: if ((version == (char *)0x0) || (*version == '\0')) {
	0001dd99:CMP qword ptr [RBP + -0x10],0x0
	0001dd9e:JZ 0x0001ddab
	0001dda0:MOV RAX,qword ptr [RBP + -0x10]
	0001dda4:MOVZX EAX,byte ptr [RAX]
	0001dda7:TEST AL,AL
	0001dda9:JNZ 0x0001ddb2
END_OF_LINE
----------------------------------------------
11: bVar1 = numbered_existing_backups;
	0001ddab:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
14: pVar2 = __xargmatch_internal(context,version,backup_args,(char *)backup_types,4,argmatch_die);
	0001dde1:CALL 0x0001d3a1
END_OF_LINE
----------------------------------------------
15: bVar1 = backup_types[pVar2];
	0001ddf5:MOV EAX,dword ptr [RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
17: return bVar1;
	0001ddf9:RET
END_OF_LINE



Function: xget_version
----------------------------------------------
10: if ((version == (char *)0x0) || (*version == '\0')) {
	0001de0e:CMP qword ptr [RBP + -0x10],0x0
	0001de13:JZ 0x0001de35
	0001de15:MOV RAX,qword ptr [RBP + -0x10]
	0001de19:MOVZX EAX,byte ptr [RAX]
	0001de1c:TEST AL,AL
	0001de1e:JZ 0x0001de35
END_OF_LINE
----------------------------------------------
11: version_00 = getenv("VERSION_CONTROL");
	0001de3f:CALL 0x00005880
END_OF_LINE
----------------------------------------------
12: bVar1 = get_version("$VERSION_CONTROL",version_00);
	0001de51:CALL 0x0001dd85
END_OF_LINE
----------------------------------------------
15: bVar1 = get_version(context,version);
	0001de2e:CALL 0x0001dd85
END_OF_LINE
----------------------------------------------
17: return bVar1;
	0001de57:RET
END_OF_LINE



Function: opendir_safer
----------------------------------------------
14: dp = (DIR *)opendir(name);
	0001de6f:CALL 0x00005aa0
END_OF_LINE
----------------------------------------------
15: if (dp != (DIR *)0x0) {
	0001de78:CMP qword ptr [RBP + -0x10],0x0
	0001de7d:JZ 0x0001df1f
END_OF_LINE
----------------------------------------------
16: iVar1 = dirfd((DIR *)dp);
	0001de8a:CALL 0x00005d20
END_OF_LINE
----------------------------------------------
17: if ((-1 < iVar1) && (iVar1 < 3)) {
	0001de92:CMP dword ptr [RBP + -0x18],0x0
	0001de96:JS 0x0001df1f
	0001de9c:CMP dword ptr [RBP + -0x18],0x2
	0001dea0:JG 0x0001df1f
END_OF_LINE
----------------------------------------------
18: iVar1 = rpl_fcntl(iVar1,0x406,3);
	0001deb6:CALL 0x0002c226
END_OF_LINE
----------------------------------------------
19: if (iVar1 < 0) {
	0001debe:CMP dword ptr [RBP + -0x14],0x0
	0001dec2:JNS 0x0001ded8
END_OF_LINE
----------------------------------------------
20: piVar2 = __errno_location();
	0001dec4:CALL 0x00005900
END_OF_LINE
----------------------------------------------
21: e = *piVar2;
	0001dec9:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: newdp = (DIR *)0x0;
	0001dece:MOV qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
25: newdp = (DIR *)fdopendir(iVar1);
	0001dedd:CALL 0x00005f80
END_OF_LINE
----------------------------------------------
26: piVar2 = __errno_location();
	0001dee6:CALL 0x00005900
END_OF_LINE
----------------------------------------------
27: e = *piVar2;
	0001deeb:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
28: if (newdp == (DIR *)0x0) {
	0001def0:CMP qword ptr [RBP + -0x8],0x0
	0001def5:JNZ 0x0001df01
END_OF_LINE
----------------------------------------------
29: close(iVar1);
	0001defc:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
32: closedir((DIR *)dp);
	0001df08:CALL 0x00005c50
END_OF_LINE
----------------------------------------------
33: piVar2 = __errno_location();
	0001df0d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
34: *piVar2 = e;
	0001df15:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
35: dp = newdp;
	0001df1b:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
38: return dp;
	0001df1f:MOV RAX,qword ptr [RBP + -0x10]
	0001df23:LEAVE
	0001df24:RET
END_OF_LINE



Function: dir_name
----------------------------------------------
9: pcVar1 = mdir_name(file);
	0001df3c:CALL 0x0001e063
END_OF_LINE
----------------------------------------------
10: if (pcVar1 == (char *)0x0) {
	0001df45:CMP qword ptr [RBP + -0x8],0x0
	0001df4a:JNZ 0x0001df51
END_OF_LINE
----------------------------------------------
12: xalloc_die();
	0001df4c:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
14: return pcVar1;
	0001df51:MOV RAX,qword ptr [RBP + -0x8]
	0001df55:LEAVE
	0001df56:RET
END_OF_LINE



Function: base_name
----------------------------------------------
11: pcVar1 = last_component(name);
	0001df6e:CALL 0x0001e0fe
END_OF_LINE
----------------------------------------------
12: if (*pcVar1 == '\0') {
	0001df7b:MOVZX EAX,byte ptr [RAX]
	0001df7e:TEST AL,AL
	0001df80:JNZ 0x0001dfa2
END_OF_LINE
----------------------------------------------
13: n = base_len(name);
	0001df89:CALL 0x0001e16b
END_OF_LINE
----------------------------------------------
14: pcVar1 = xstrndup(name,n);
	0001df9b:CALL 0x0002c1e9
END_OF_LINE
----------------------------------------------
17: length = base_len(pcVar1);
	0001dfa9:CALL 0x0001e16b
END_OF_LINE
----------------------------------------------
18: if (pcVar1[length] == '/') {
	0001dfba:ADD RAX,RDX
	0001dfbd:MOVZX EAX,byte ptr [RAX]
	0001dfc0:CMP AL,0x2f
	0001dfc2:JNZ 0x0001dfc9
END_OF_LINE
----------------------------------------------
19: length = length + 1;
	0001dfc4:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
21: pcVar1 = xstrndup(pcVar1,length);
	0001dfd7:CALL 0x0002c1e9
END_OF_LINE
----------------------------------------------
23: return pcVar1;
	0001dfdd:RET
END_OF_LINE



Function: dir_len
----------------------------------------------
13: cVar1 = *file;
	0001e001:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
14: pcVar2 = last_component(file);
	0001e026:CALL 0x0001e0fe
END_OF_LINE
----------------------------------------------
15: for (length = (long)pcVar2 - (long)file; ((cVar1 == '/') < length && (file[length - 1] == '/'));
	0001e004:CMP AL,0x2f
	0001e006:JNZ 0x0001e00f
	0001e008:MOV EAX,0x1
	0001e00d:JMP 0x0001e01b
	0001e00f:MOV EAX,0x0
	0001e014:JMP 0x0001e01b
	0001e016:MOV EAX,0x0
	0001e01b:ADD qword ptr [RBP + -0x8],RAX
	0001e01f:MOV RAX,qword ptr [RBP + -0x18]
	0001e023:MOV RDI,RAX
	0001e026:CALL 0x0001e0fe
	0001e02b:SUB RAX,qword ptr [RBP + -0x18]
	0001e02f:MOV qword ptr [RBP + -0x10],RAX
	0001e033:JMP 0x0001e050
	0001e035:MOV RAX,qword ptr [RBP + -0x10]
	0001e039:LEA RDX,[RAX + -0x1]
	0001e03d:MOV RAX,qword ptr [RBP + -0x18]
	0001e041:ADD RAX,RDX
	0001e044:MOVZX EAX,byte ptr [RAX]
	0001e047:CMP AL,0x2f
	0001e049:JNZ 0x0001e05c
	0001e04b:SUB qword ptr [RBP + -0x10],0x1
	0001e050:MOV RAX,qword ptr [RBP + -0x8]
	0001e054:CMP RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
16: length = length - 1) {
	0001e04b:SUB qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
18: return length;
	0001e05d:MOV RAX,qword ptr [RBP + -0x10]
	0001e061:LEAVE
	0001e062:RET
END_OF_LINE



Function: mdir_name
----------------------------------------------
11: length = dir_len(file);
	0001e07a:CALL 0x0001dfde
END_OF_LINE
----------------------------------------------
12: __dest = (char *)malloc(length + (length == 0) + 1);
	0001e083:CMP qword ptr [RBP + -0x10],0x0
	0001e088:SETZ AL
	0001e08b:MOV byte ptr [RBP + -0x11],AL
	0001e08e:MOVZX EDX,byte ptr [RBP + -0x11]
	0001e092:MOV RAX,qword ptr [RBP + -0x10]
	0001e096:ADD RAX,RDX
	0001e099:ADD RAX,0x1
	0001e09d:MOV RDI,RAX
	0001e0a0:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
13: if (__dest == (char *)0x0) {
	0001e0a9:CMP qword ptr [RBP + -0x8],0x0
	0001e0ae:JNZ 0x0001e0b7
END_OF_LINE
----------------------------------------------
14: __dest = (char *)0x0;
	0001e0b0:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
17: memcpy(__dest,file,length);
	0001e0c9:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
18: if (length == 0) {
	0001e083:CMP qword ptr [RBP + -0x10],0x0
	0001e088:SETZ AL
	0001e08b:MOV byte ptr [RBP + -0x11],AL
	0001e08e:MOVZX EDX,byte ptr [RBP + -0x11]
	0001e092:MOV RAX,qword ptr [RBP + -0x10]
	0001e096:ADD RAX,RDX
	0001e099:ADD RAX,0x1
	0001e09d:MOV RDI,RAX
	0001e0a0:CALL 0x00005df0
	0001e0a5:MOV qword ptr [RBP + -0x8],RAX
	0001e0a9:CMP qword ptr [RBP + -0x8],0x0
	0001e0ae:JNZ 0x0001e0b7
	0001e0b0:MOV EAX,0x0
	0001e0b5:JMP 0x0001e0fc
	0001e0b7:MOV RDX,qword ptr [RBP + -0x10]
	0001e0bb:MOV RCX,qword ptr [RBP + -0x28]
	0001e0bf:MOV RAX,qword ptr [RBP + -0x8]
	0001e0c3:MOV RSI,RCX
	0001e0c6:MOV RDI,RAX
	0001e0c9:CALL 0x00005d90
	0001e0ce:CMP byte ptr [RBP + -0x11],0x0
	0001e0d2:JZ 0x0001e0ea
END_OF_LINE
----------------------------------------------
19: length = 1;
	0001e0d8:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
20: *__dest = '.';
	0001e0e7:MOV byte ptr [RAX],0x2e
END_OF_LINE
----------------------------------------------
22: __dest[length] = '\0';
	0001e0f2:ADD RAX,RDX
	0001e0f5:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
24: return __dest;
	0001e0fd:RET
END_OF_LINE



Function: last_component
----------------------------------------------
11: bVar1 = false;
	0001e112:MOV byte ptr [RBP + -0x11],0x0
END_OF_LINE
----------------------------------------------
12: for (base = name; *base == '/'; base = base + 1) {
	0001e116:JMP 0x0001e11d
	0001e118:ADD qword ptr [RBP + -0x10],0x1
	0001e11d:MOV RAX,qword ptr [RBP + -0x10]
	0001e121:MOVZX EAX,byte ptr [RAX]
	0001e124:CMP AL,0x2f
	0001e126:JZ 0x0001e118
END_OF_LINE
----------------------------------------------
14: for (p = base; *p != '\0'; p = p + 1) {
	0001e12c:MOV qword ptr [RBP + -0x8],RAX
	0001e130:JMP 0x0001e15a
	0001e132:MOV RAX,qword ptr [RBP + -0x8]
	0001e136:MOVZX EAX,byte ptr [RAX]
	0001e139:CMP AL,0x2f
	0001e13b:JNZ 0x0001e143
	0001e13d:MOV byte ptr [RBP + -0x11],0x1
	0001e141:JMP 0x0001e155
	0001e143:CMP byte ptr [RBP + -0x11],0x0
	0001e147:JZ 0x0001e155
	0001e149:MOV RAX,qword ptr [RBP + -0x8]
	0001e14d:MOV qword ptr [RBP + -0x10],RAX
	0001e151:MOV byte ptr [RBP + -0x11],0x0
	0001e155:ADD qword ptr [RBP + -0x8],0x1
	0001e15a:MOV RAX,qword ptr [RBP + -0x8]
	0001e15e:MOVZX EAX,byte ptr [RAX]
	0001e161:TEST AL,AL
	0001e163:JNZ 0x0001e132
END_OF_LINE
----------------------------------------------
15: if (*p == '/') {
	0001e136:MOVZX EAX,byte ptr [RAX]
	0001e139:CMP AL,0x2f
	0001e13b:JNZ 0x0001e143
END_OF_LINE
----------------------------------------------
16: bVar1 = true;
	0001e13d:MOV byte ptr [RBP + -0x11],0x1
END_OF_LINE
----------------------------------------------
18: else if (bVar1) {
	0001e147:JZ 0x0001e155
END_OF_LINE
----------------------------------------------
19: base = p;
	0001e14d:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
20: bVar1 = false;
	0001e151:MOV byte ptr [RBP + -0x11],0x0
END_OF_LINE
----------------------------------------------
23: return base;
	0001e165:MOV RAX,qword ptr [RBP + -0x10]
	0001e169:POP RBP
	0001e16a:RET
END_OF_LINE



Function: base_len
----------------------------------------------
9: for (len = strlen(name); (1 < len && (name[len - 1] == '/')); len = len - 1) {
	0001e18a:CALL 0x00005ad0
	0001e18f:MOV qword ptr [RBP + -0x10],RAX
	0001e193:JMP 0x0001e19b
	0001e195:NOP
	0001e196:SUB qword ptr [RBP + -0x10],0x1
	0001e19b:CMP qword ptr [RBP + -0x10],0x1
	0001e1a0:JBE 0x0001e1b8
	0001e1a2:MOV RAX,qword ptr [RBP + -0x10]
	0001e1a6:LEA RDX,[RAX + -0x1]
	0001e1aa:MOV RAX,qword ptr [RBP + -0x18]
	0001e1ae:ADD RAX,RDX
	0001e1b1:MOVZX EAX,byte ptr [RAX]
	0001e1b4:CMP AL,0x2f
	0001e1b6:JZ 0x0001e195
END_OF_LINE
----------------------------------------------
11: return len;
	0001e1b8:MOV RAX,qword ptr [RBP + -0x10]
	0001e1bc:LEAVE
	0001e1bd:RET
END_OF_LINE



Function: execute
----------------------------------------------
32: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001e22a:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
33: if (slave_process) {
	0001e240:JZ 0x0001e260
END_OF_LINE
----------------------------------------------
34: sigprocmask(2,(sigset_t *)0x0,(sigset_t *)&blocked_signals);
	0001e242:LEA RAX,[RBP + -0x1e0]
	0001e249:MOV RDX,RAX
	0001e24c:MOV ESI,0x0
	0001e251:MOV EDI,0x2
	0001e256:CALL 0x00005890
END_OF_LINE
----------------------------------------------
35: block_fatal_signals();
	0001e25b:CALL 0x0001ea85
END_OF_LINE
----------------------------------------------
37: bVar4 = false;
	0001e260:MOV byte ptr [RBP + -0x23a],0x0
END_OF_LINE
----------------------------------------------
38: bVar3 = false;
	0001e267:MOV byte ptr [RBP + -0x239],0x0
END_OF_LINE
----------------------------------------------
39: err = posix_spawn_file_actions_init((posix_spawn_file_actions_t *)&actions);
	0001e26e:LEA RAX,[RBP + -0x230]
	0001e275:MOV RDI,RAX
	0001e278:CALL 0x000058e0
END_OF_LINE
----------------------------------------------
40: if (err == 0) {
	0001e283:CMP dword ptr [RBP + -0x234],0x0
	0001e28a:JNZ 0x0001e45c
END_OF_LINE
----------------------------------------------
41: bVar4 = true;
	0001e290:MOV byte ptr [RBP + -0x23a],0x1
END_OF_LINE
----------------------------------------------
42: iVar5 = 0;
	0001e29e:JZ 0x0001e2d9
END_OF_LINE
----------------------------------------------
43: if (null_stdin) {
	0001e29e:JZ 0x0001e2d9
END_OF_LINE
----------------------------------------------
44: err = posix_spawn_file_actions_addopen
	0001e2c1:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
45: ((posix_spawn_file_actions_t *)&actions,0,"/dev/null",0,0);
	0001e2a0:LEA RAX,[RBP + -0x230]
	0001e2a7:MOV R8D,0x0
	0001e2ad:MOV ECX,0x0
	0001e2b2:LEA RDX,[0x34581]
	0001e2b9:MOV ESI,0x0
	0001e2be:MOV RDI,RAX
	0001e2c1:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
46: iVar5 = err;
	0001e2d3:JNZ 0x0001e448
END_OF_LINE
----------------------------------------------
47: if (err == 0) goto LAB_0001e2d9;
	0001e2cc:CMP dword ptr [RBP + -0x234],0x0
	0001e2d3:JNZ 0x0001e448
	0001e2d9:CMP byte ptr [RBP + -0x264],0x0
END_OF_LINE
----------------------------------------------
48: LAB_0001e448:
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
49: bVar2 = true;
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
52: LAB_0001e2d9:
	0001e2d9:CMP byte ptr [RBP + -0x264],0x0
END_OF_LINE
----------------------------------------------
53: err = iVar5;
	0001e2d9:CMP byte ptr [RBP + -0x264],0x0
END_OF_LINE
----------------------------------------------
54: if (null_stdout) {
	0001e2e0:JZ 0x0001e31b
END_OF_LINE
----------------------------------------------
55: err = posix_spawn_file_actions_addopen
	0001e303:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
56: ((posix_spawn_file_actions_t *)&actions,1,"/dev/null",2,0);
	0001e2e2:LEA RAX,[RBP + -0x230]
	0001e2e9:MOV R8D,0x0
	0001e2ef:MOV ECX,0x2
	0001e2f4:LEA RDX,[0x34581]
	0001e2fb:MOV ESI,0x1
	0001e300:MOV RDI,RAX
	0001e303:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
57: if (err != 0) goto LAB_0001e448;
	0001e30e:CMP dword ptr [RBP + -0x234],0x0
	0001e315:JNZ 0x0001e448
	0001e31b:CMP byte ptr [RBP + -0x268],0x0
	0001e322:JZ 0x0001e35d
	0001e324:LEA RAX,[RBP + -0x230]
	0001e32b:MOV R8D,0x0
	0001e331:MOV ECX,0x2
	0001e336:LEA RDX,[0x34581]
	0001e33d:MOV ESI,0x2
	0001e342:MOV RDI,RAX
	0001e345:CALL 0x00005e70
	0001e34a:MOV dword ptr [RBP + -0x234],EAX
	0001e350:CMP dword ptr [RBP + -0x234],0x0
	0001e357:JNZ 0x0001e448
	0001e35d:CMP byte ptr [RBP + -0x26c],0x0
	0001e364:JZ 0x0001e3ee
	0001e36a:LEA RAX,[RBP + -0x160]
	0001e371:MOV RDI,RAX
	0001e374:CALL 0x00005cc0
	0001e379:MOV dword ptr [RBP + -0x234],EAX
	0001e37f:CMP dword ptr [RBP + -0x234],0x0
	0001e386:JNZ 0x0001e448
	0001e38c:MOV byte ptr [RBP + -0x239],0x1
	0001e393:LEA RDX,[RBP + -0x1e0]
	0001e39a:LEA RAX,[RBP + -0x160]
	0001e3a1:MOV RSI,RDX
	0001e3a4:MOV RDI,RAX
	0001e3a7:CALL 0x000058b0
	0001e3ac:MOV dword ptr [RBP + -0x234],EAX
	0001e3b2:CMP dword ptr [RBP + -0x234],0x0
	0001e3b9:JNZ 0x0001e3de
	0001e3bb:LEA RAX,[RBP + -0x160]
	0001e3c2:MOV ESI,0x8
	0001e3c7:MOV RDI,RAX
	0001e3ca:CALL 0x00006000
	0001e3cf:MOV dword ptr [RBP + -0x234],EAX
	0001e3d5:CMP dword ptr [RBP + -0x234],0x0
	0001e3dc:JZ 0x0001e3e5
	0001e3de:MOV EAX,0x1
	0001e3e3:JMP 0x0001e3ea
	0001e3e5:MOV EAX,0x0
	0001e3ea:TEST EAX,EAX
	0001e3ec:JNZ 0x0001e448
	0001e3ee:MOV RAX,qword ptr [0x0003dfb8]
	0001e3f5:MOV R8,qword ptr [RAX]
	0001e3f8:CMP byte ptr [RBP + -0x239],0x0
	0001e3ff:JZ 0x0001e40a
	0001e401:LEA RAX,[RBP + -0x160]
	0001e408:JMP 0x0001e40f
	0001e40a:MOV EAX,0x0
	0001e40f:MOV RCX,qword ptr [RBP + -0x258]
	0001e416:LEA RDX,[RBP + -0x230]
	0001e41d:MOV RSI,qword ptr [RBP + -0x250]
	0001e424:LEA RDI,[RBP + -0x238]
	0001e42b:MOV R9,R8
	0001e42e:MOV R8,RCX
	0001e431:MOV RCX,RAX
	0001e434:CALL 0x00005e80
	0001e439:MOV dword ptr [RBP + -0x234],EAX
	0001e43f:CMP dword ptr [RBP + -0x234],0x0
	0001e446:JZ 0x0001e44f
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
59: if (null_stderr) {
	0001e322:JZ 0x0001e35d
END_OF_LINE
----------------------------------------------
60: err = posix_spawn_file_actions_addopen
	0001e345:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
61: ((posix_spawn_file_actions_t *)&actions,2,"/dev/null",2,0);
	0001e324:LEA RAX,[RBP + -0x230]
	0001e32b:MOV R8D,0x0
	0001e331:MOV ECX,0x2
	0001e336:LEA RDX,[0x34581]
	0001e33d:MOV ESI,0x2
	0001e342:MOV RDI,RAX
	0001e345:CALL 0x00005e70
END_OF_LINE
----------------------------------------------
62: if (err != 0) goto LAB_0001e448;
	0001e350:CMP dword ptr [RBP + -0x234],0x0
	0001e357:JNZ 0x0001e448
	0001e35d:CMP byte ptr [RBP + -0x26c],0x0
	0001e364:JZ 0x0001e3ee
	0001e36a:LEA RAX,[RBP + -0x160]
	0001e371:MOV RDI,RAX
	0001e374:CALL 0x00005cc0
	0001e379:MOV dword ptr [RBP + -0x234],EAX
	0001e37f:CMP dword ptr [RBP + -0x234],0x0
	0001e386:JNZ 0x0001e448
	0001e38c:MOV byte ptr [RBP + -0x239],0x1
	0001e393:LEA RDX,[RBP + -0x1e0]
	0001e39a:LEA RAX,[RBP + -0x160]
	0001e3a1:MOV RSI,RDX
	0001e3a4:MOV RDI,RAX
	0001e3a7:CALL 0x000058b0
	0001e3ac:MOV dword ptr [RBP + -0x234],EAX
	0001e3b2:CMP dword ptr [RBP + -0x234],0x0
	0001e3b9:JNZ 0x0001e3de
	0001e3bb:LEA RAX,[RBP + -0x160]
	0001e3c2:MOV ESI,0x8
	0001e3c7:MOV RDI,RAX
	0001e3ca:CALL 0x00006000
	0001e3cf:MOV dword ptr [RBP + -0x234],EAX
	0001e3d5:CMP dword ptr [RBP + -0x234],0x0
	0001e3dc:JZ 0x0001e3e5
	0001e3de:MOV EAX,0x1
	0001e3e3:JMP 0x0001e3ea
	0001e3e5:MOV EAX,0x0
	0001e3ea:TEST EAX,EAX
	0001e3ec:JNZ 0x0001e448
	0001e3ee:MOV RAX,qword ptr [0x0003dfb8]
	0001e3f5:MOV R8,qword ptr [RAX]
	0001e3f8:CMP byte ptr [RBP + -0x239],0x0
	0001e3ff:JZ 0x0001e40a
	0001e401:LEA RAX,[RBP + -0x160]
	0001e408:JMP 0x0001e40f
	0001e40a:MOV EAX,0x0
	0001e40f:MOV RCX,qword ptr [RBP + -0x258]
	0001e416:LEA RDX,[RBP + -0x230]
	0001e41d:MOV RSI,qword ptr [RBP + -0x250]
	0001e424:LEA RDI,[RBP + -0x238]
	0001e42b:MOV R9,R8
	0001e42e:MOV R8,RCX
	0001e431:MOV RCX,RAX
	0001e434:CALL 0x00005e80
	0001e439:MOV dword ptr [RBP + -0x234],EAX
	0001e43f:CMP dword ptr [RBP + -0x234],0x0
	0001e446:JZ 0x0001e44f
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
64: if (slave_process) {
	0001e364:JZ 0x0001e3ee
END_OF_LINE
----------------------------------------------
65: err = posix_spawnattr_init((posix_spawnattr_t *)&attrs);
	0001e36a:LEA RAX,[RBP + -0x160]
	0001e371:MOV RDI,RAX
	0001e374:CALL 0x00005cc0
END_OF_LINE
----------------------------------------------
66: if (err != 0) goto LAB_0001e448;
	0001e37f:CMP dword ptr [RBP + -0x234],0x0
	0001e386:JNZ 0x0001e448
	0001e38c:MOV byte ptr [RBP + -0x239],0x1
	0001e393:LEA RDX,[RBP + -0x1e0]
	0001e39a:LEA RAX,[RBP + -0x160]
	0001e3a1:MOV RSI,RDX
	0001e3a4:MOV RDI,RAX
	0001e3a7:CALL 0x000058b0
	0001e3ac:MOV dword ptr [RBP + -0x234],EAX
	0001e3b2:CMP dword ptr [RBP + -0x234],0x0
	0001e3b9:JNZ 0x0001e3de
	0001e3bb:LEA RAX,[RBP + -0x160]
	0001e3c2:MOV ESI,0x8
	0001e3c7:MOV RDI,RAX
	0001e3ca:CALL 0x00006000
	0001e3cf:MOV dword ptr [RBP + -0x234],EAX
	0001e3d5:CMP dword ptr [RBP + -0x234],0x0
	0001e3dc:JZ 0x0001e3e5
	0001e3de:MOV EAX,0x1
	0001e3e3:JMP 0x0001e3ea
	0001e3e5:MOV EAX,0x0
	0001e3ea:TEST EAX,EAX
	0001e3ec:JNZ 0x0001e448
	0001e3ee:MOV RAX,qword ptr [0x0003dfb8]
	0001e3f5:MOV R8,qword ptr [RAX]
	0001e3f8:CMP byte ptr [RBP + -0x239],0x0
	0001e3ff:JZ 0x0001e40a
	0001e401:LEA RAX,[RBP + -0x160]
	0001e408:JMP 0x0001e40f
	0001e40a:MOV EAX,0x0
	0001e40f:MOV RCX,qword ptr [RBP + -0x258]
	0001e416:LEA RDX,[RBP + -0x230]
	0001e41d:MOV RSI,qword ptr [RBP + -0x250]
	0001e424:LEA RDI,[RBP + -0x238]
	0001e42b:MOV R9,R8
	0001e42e:MOV R8,RCX
	0001e431:MOV RCX,RAX
	0001e434:CALL 0x00005e80
	0001e439:MOV dword ptr [RBP + -0x234],EAX
	0001e43f:CMP dword ptr [RBP + -0x234],0x0
	0001e446:JZ 0x0001e44f
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
67: bVar3 = true;
	0001e38c:MOV byte ptr [RBP + -0x239],0x1
END_OF_LINE
----------------------------------------------
68: err = posix_spawnattr_setsigmask((posix_spawnattr_t *)&attrs,(sigset_t *)&blocked_signals);
	0001e393:LEA RDX,[RBP + -0x1e0]
	0001e39a:LEA RAX,[RBP + -0x160]
	0001e3a1:MOV RSI,RDX
	0001e3a4:MOV RDI,RAX
	0001e3a7:CALL 0x000058b0
END_OF_LINE
----------------------------------------------
69: if (err == 0) {
	0001e3b2:CMP dword ptr [RBP + -0x234],0x0
	0001e3b9:JNZ 0x0001e3de
END_OF_LINE
----------------------------------------------
70: err = posix_spawnattr_setflags((posix_spawnattr_t *)&attrs,8);
	0001e3bb:LEA RAX,[RBP + -0x160]
	0001e3c2:MOV ESI,0x8
	0001e3c7:MOV RDI,RAX
	0001e3ca:CALL 0x00006000
END_OF_LINE
----------------------------------------------
71: if (err != 0) goto LAB_0001e3de;
	0001e3d5:CMP dword ptr [RBP + -0x234],0x0
	0001e3dc:JZ 0x0001e3e5
	0001e3de:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
72: bVar2 = false;
	0001e3e5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
75: LAB_0001e3de:
	0001e3de:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
76: bVar2 = true;
	0001e3de:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
78: if (bVar2) goto LAB_0001e448;
	0001e3ec:JNZ 0x0001e448
	0001e3ee:MOV RAX,qword ptr [0x0003dfb8]
	0001e3f5:MOV R8,qword ptr [RAX]
	0001e3f8:CMP byte ptr [RBP + -0x239],0x0
	0001e3ff:JZ 0x0001e40a
	0001e401:LEA RAX,[RBP + -0x160]
	0001e408:JMP 0x0001e40f
	0001e40a:MOV EAX,0x0
	0001e40f:MOV RCX,qword ptr [RBP + -0x258]
	0001e416:LEA RDX,[RBP + -0x230]
	0001e41d:MOV RSI,qword ptr [RBP + -0x250]
	0001e424:LEA RDI,[RBP + -0x238]
	0001e42b:MOV R9,R8
	0001e42e:MOV R8,RCX
	0001e431:MOV RCX,RAX
	0001e434:CALL 0x00005e80
	0001e439:MOV dword ptr [RBP + -0x234],EAX
	0001e43f:CMP dword ptr [RBP + -0x234],0x0
	0001e446:JZ 0x0001e44f
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
80: if (bVar3) {
	0001e3ff:JZ 0x0001e40a
END_OF_LINE
----------------------------------------------
81: __attrp = (posix_spawnattr_t *)&attrs;
	0001e401:LEA RAX,[RBP + -0x160]
END_OF_LINE
----------------------------------------------
84: __attrp = (posix_spawnattr_t *)0x0;
	0001e40a:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
86: err = posix_spawnp(&child,prog_path,(posix_spawn_file_actions_t *)&actions,__attrp,prog_argv,
	0001e416:LEA RDX,[RBP + -0x230]
	0001e41d:MOV RSI,qword ptr [RBP + -0x250]
	0001e424:LEA RDI,[RBP + -0x238]
	0001e42b:MOV R9,R8
	0001e42e:MOV R8,RCX
	0001e431:MOV RCX,RAX
	0001e434:CALL 0x00005e80
END_OF_LINE
----------------------------------------------
87: ppcRam00000000001442d0);
	0001e434:CALL 0x00005e80
END_OF_LINE
----------------------------------------------
88: if (err != 0) goto LAB_0001e448;
	0001e43f:CMP dword ptr [RBP + -0x234],0x0
	0001e446:JZ 0x0001e44f
	0001e448:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
89: bVar2 = false;
	0001e44f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
91: if (!bVar2) {
	0001e454:TEST EAX,EAX
	0001e456:JZ 0x0001e4ff
END_OF_LINE
----------------------------------------------
92: posix_spawn_file_actions_destroy((posix_spawn_file_actions_t *)&actions);
	0001e4ff:LEA RAX,[RBP + -0x230]
	0001e506:MOV RDI,RAX
	0001e509:CALL 0x00005a90
END_OF_LINE
----------------------------------------------
93: if (bVar3) {
	0001e515:JZ 0x0001e526
END_OF_LINE
----------------------------------------------
94: posix_spawnattr_destroy((posix_spawnattr_t *)&attrs);
	0001e517:LEA RAX,[RBP + -0x160]
	0001e51e:MOV RDI,RAX
	0001e521:CALL 0x00005a40
END_OF_LINE
----------------------------------------------
96: if (slave_process) {
	0001e52d:JZ 0x0001e541
END_OF_LINE
----------------------------------------------
97: register_slave_subprocess(child);
	0001e537:CALL 0x0002b79c
END_OF_LINE
----------------------------------------------
98: unblock_fatal_signals();
	0001e53c:CALL 0x0001eaae
END_OF_LINE
----------------------------------------------
100: iVar5 = wait_subprocess(child,progname,ignore_sigpipe,null_stderr,slave_process,exit_on_error,
	0001e57d:CALL 0x0002b999
END_OF_LINE
----------------------------------------------
101: termsigp);
	0001e57d:CALL 0x0002b999
END_OF_LINE
----------------------------------------------
102: goto LAB_0001e586;
	0001e586:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
105: if (bVar4) {
	0001e463:JZ 0x0001e474
END_OF_LINE
----------------------------------------------
106: posix_spawn_file_actions_destroy((posix_spawn_file_actions_t *)&actions);
	0001e465:LEA RAX,[RBP + -0x230]
	0001e46c:MOV RDI,RAX
	0001e46f:CALL 0x00005a90
END_OF_LINE
----------------------------------------------
108: if (bVar3) {
	0001e47b:JZ 0x0001e48c
END_OF_LINE
----------------------------------------------
109: posix_spawnattr_destroy((posix_spawnattr_t *)&attrs);
	0001e47d:LEA RAX,[RBP + -0x160]
	0001e484:MOV RDI,RAX
	0001e487:CALL 0x00005a40
END_OF_LINE
----------------------------------------------
111: if (slave_process) {
	0001e493:JZ 0x0001e49a
END_OF_LINE
----------------------------------------------
112: unblock_fatal_signals();
	0001e495:CALL 0x0001eaae
END_OF_LINE
----------------------------------------------
114: if (termsigp != (int *)0x0) {
	0001e49a:CMP qword ptr [RBP + -0x278],0x0
	0001e4a2:JZ 0x0001e4b1
END_OF_LINE
----------------------------------------------
115: *termsigp = 0;
	0001e4ab:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
117: if ((exit_on_error) || (!null_stderr)) {
	0001e4b8:JNZ 0x0001e4c8
	0001e4ba:MOVZX EAX,byte ptr [RBP + -0x268]
	0001e4c1:XOR EAX,0x1
	0001e4c4:TEST AL,AL
	0001e4c6:JZ 0x0001e4f5
END_OF_LINE
----------------------------------------------
118: error(exit_on_error,err,"%s subprocess failed",progname);
	0001e4f0:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
120: iVar5 = 0x7f;
	0001e4f5:MOV EAX,0x7f
END_OF_LINE
----------------------------------------------
121: LAB_0001e586:
	0001e586:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
122: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001e58a:SUB RDX,qword ptr FS:[0x28]
	0001e593:JZ 0x0001e59a
END_OF_LINE
----------------------------------------------
124: __stack_chk_fail();
	0001e595:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
126: return iVar5;
	0001e59b:RET
END_OF_LINE



Function: init_fatal_signals
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001e5ab:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: if (!init_fatal_signals::fatal_signals_initialized) {
	0001e5c4:TEST AL,AL
	0001e5c6:JZ 0x0001e654
END_OF_LINE
----------------------------------------------
16: for (i = 0; i < 6; i = i + 1) {
	0001e5cc:MOV qword ptr [RBP + -0xa8],0x0
	0001e5d7:JMP 0x0001e643
	0001e5d9:MOV RAX,qword ptr [RBP + -0xa8]
	0001e5e0:LEA RDX,[RAX*0x4]
	0001e5e8:LEA RAX,[0x3e100]
	0001e5ef:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e5f2:LEA RDX,[RBP + -0xa0]
	0001e5f9:MOV ESI,0x0
	0001e5fe:MOV EDI,EAX
	0001e600:CALL 0x000059d0
	0001e605:TEST EAX,EAX
	0001e607:JS 0x0001e63b
	0001e609:LEA RAX,[RBP + -0xa0]
	0001e610:MOV RDI,RAX
	0001e613:CALL 0x0002af17
	0001e618:CMP RAX,0x1
	0001e61c:JNZ 0x0001e63b
	0001e61e:MOV RAX,qword ptr [RBP + -0xa8]
	0001e625:LEA RDX,[RAX*0x4]
	0001e62d:LEA RAX,[0x3e100]
	0001e634:MOV dword ptr [RDX + RAX*0x1],0xffffffff
	0001e63b:ADD qword ptr [RBP + -0xa8],0x1
	0001e643:CMP qword ptr [RBP + -0xa8],0x5
	0001e64b:JBE 0x0001e5d9
END_OF_LINE
----------------------------------------------
17: iVar2 = sigaction(fatal_signals[i],(sigaction *)0x0,(sigaction *)&action);
	0001e5ef:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e5f2:LEA RDX,[RBP + -0xa0]
	0001e5f9:MOV ESI,0x0
	0001e5fe:MOV EDI,EAX
	0001e600:CALL 0x000059d0
END_OF_LINE
----------------------------------------------
18: if (-1 < iVar2) {
	0001e605:TEST EAX,EAX
	0001e607:JS 0x0001e63b
END_OF_LINE
----------------------------------------------
19: p_Var3 = get_handler(&action);
	0001e609:LEA RAX,[RBP + -0xa0]
	0001e610:MOV RDI,RAX
	0001e613:CALL 0x0002af17
END_OF_LINE
----------------------------------------------
20: if (p_Var3 == (sa_handler_t)Elf64_Ehdr_00000000.e_ident_magic_str) {
	0001e618:CMP RAX,0x1
	0001e61c:JNZ 0x0001e63b
END_OF_LINE
----------------------------------------------
21: fatal_signals[i] = -1;
	0001e634:MOV dword ptr [RDX + RAX*0x1],0xffffffff
END_OF_LINE
----------------------------------------------
25: init_fatal_signals::fatal_signals_initialized = true;
	0001e64d:MOV byte ptr [0x00042f40],0x1
END_OF_LINE
----------------------------------------------
27: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001e659:SUB RAX,qword ptr FS:[0x28]
	0001e662:JZ 0x0001e669
END_OF_LINE
----------------------------------------------
29: __stack_chk_fail();
	0001e664:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
31: return;
	0001e66a:RET
END_OF_LINE



Function: uninstall_handlers
----------------------------------------------
11: for (i = 0; i < 6; i = i + 1) {
	0001e677:MOV qword ptr [RBP + -0x8],0x0
	0001e67f:JMP 0x0001e751
	0001e684:MOV RAX,qword ptr [RBP + -0x8]
	0001e688:LEA RDX,[RAX*0x4]
	0001e690:LEA RAX,[0x3e100]
	0001e697:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e69a:TEST EAX,EAX
	0001e69c:JS 0x0001e74c
	0001e6a2:MOV RAX,qword ptr [RBP + -0x8]
	0001e6a6:LEA RDX,[RAX*0x4]
	0001e6ae:LEA RAX,[0x3e100]
	0001e6b5:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e6b8:MOV dword ptr [RBP + -0xc],EAX
	0001e6bb:MOV EAX,dword ptr [RBP + -0xc]
	0001e6be:MOVSXD RDX,EAX
	0001e6c1:MOV RAX,RDX
	0001e6c4:SHL RAX,0x3
	0001e6c8:ADD RAX,RDX
	0001e6cb:ADD RAX,RAX
	0001e6ce:ADD RAX,RDX
	0001e6d1:SHL RAX,0x3
	0001e6d5:MOV RDX,RAX
	0001e6d8:LEA RAX,[0x408c0]
	0001e6df:MOV RAX,qword ptr [RDX + RAX*0x1]
	0001e6e3:CMP RAX,0x1
	0001e6e7:JNZ 0x0001e715
	0001e6e9:MOV EAX,dword ptr [RBP + -0xc]
	0001e6ec:MOVSXD RDX,EAX
	0001e6ef:MOV RAX,RDX
	0001e6f2:SHL RAX,0x3
	0001e6f6:ADD RAX,RDX
	0001e6f9:ADD RAX,RAX
	0001e6fc:ADD RAX,RDX
	0001e6ff:SHL RAX,0x3
	0001e703:MOV RDX,RAX
	0001e706:LEA RAX,[0x408c0]
	0001e70d:MOV qword ptr [RDX + RAX*0x1],0x0
	0001e715:MOV EAX,dword ptr [RBP + -0xc]
	0001e718:MOVSXD RDX,EAX
	0001e71b:MOV RAX,RDX
	0001e71e:SHL RAX,0x3
	0001e722:ADD RAX,RDX
	0001e725:ADD RAX,RAX
	0001e728:ADD RAX,RDX
	0001e72b:SHL RAX,0x3
	0001e72f:LEA RDX,[0x408c0]
	0001e736:LEA RCX,[RAX + RDX*0x1]
	0001e73a:MOV EAX,dword ptr [RBP + -0xc]
	0001e73d:MOV EDX,0x0
	0001e742:MOV RSI,RCX
	0001e745:MOV EDI,EAX
	0001e747:CALL 0x000059d0
	0001e74c:ADD qword ptr [RBP + -0x8],0x1
	0001e751:CMP qword ptr [RBP + -0x8],0x5
	0001e756:JBE 0x0001e684
END_OF_LINE
----------------------------------------------
12: if (-1 < fatal_signals[i]) {
	0001e697:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e69a:TEST EAX,EAX
	0001e69c:JS 0x0001e74c
END_OF_LINE
----------------------------------------------
13: __sig = fatal_signals[i];
	0001e6b5:MOV EAX,dword ptr [RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
14: if (saved_sigactions[__sig].__sigaction_handler.sa_handler == (__sighandler_t)0x1) {
	0001e6be:MOVSXD RDX,EAX
	0001e6c1:MOV RAX,RDX
	0001e6c4:SHL RAX,0x3
	0001e6c8:ADD RAX,RDX
	0001e6cb:ADD RAX,RAX
	0001e6ce:ADD RAX,RDX
	0001e6d1:SHL RAX,0x3
	0001e6d5:MOV RDX,RAX
	0001e6d8:LEA RAX,[0x408c0]
	0001e6df:MOV RAX,qword ptr [RDX + RAX*0x1]
	0001e6e3:CMP RAX,0x1
	0001e6e7:JNZ 0x0001e715
END_OF_LINE
----------------------------------------------
15: saved_sigactions[__sig].__sigaction_handler.sa_handler = (__sighandler_t)0x0;
	0001e6ec:MOVSXD RDX,EAX
	0001e6ef:MOV RAX,RDX
	0001e6f2:SHL RAX,0x3
	0001e6f6:ADD RAX,RDX
	0001e6f9:ADD RAX,RAX
	0001e6fc:ADD RAX,RDX
	0001e6ff:SHL RAX,0x3
	0001e703:MOV RDX,RAX
	0001e706:LEA RAX,[0x408c0]
	0001e70d:MOV qword ptr [RDX + RAX*0x1],0x0
END_OF_LINE
----------------------------------------------
17: sigaction(__sig,(sigaction *)(saved_sigactions + __sig),(sigaction *)0x0);
	0001e718:MOVSXD RDX,EAX
	0001e71b:MOV RAX,RDX
	0001e71e:SHL RAX,0x3
	0001e722:ADD RAX,RDX
	0001e725:ADD RAX,RAX
	0001e728:ADD RAX,RDX
	0001e72b:SHL RAX,0x3
	0001e72f:LEA RDX,[0x408c0]
	0001e736:LEA RCX,[RAX + RDX*0x1]
	0001e73a:MOV EAX,dword ptr [RBP + -0xc]
	0001e73d:MOV EDX,0x0
	0001e742:MOV RSI,RCX
	0001e745:MOV EDI,EAX
	0001e747:CALL 0x000059d0
END_OF_LINE
----------------------------------------------
20: return;
	0001e75f:RET
END_OF_LINE



Function: fatal_signal_handler
----------------------------------------------
10: while ((long)actions_count != 0) {
	0001e775:CDQE
	0001e777:MOV qword ptr [RBP + -0x10],RAX
	0001e77b:CMP qword ptr [RBP + -0x10],0x0
	0001e780:JZ 0x0001e7b2
END_OF_LINE
----------------------------------------------
11: lVar1 = (long)actions_count + -1;
	0001e775:CDQE
	0001e777:MOV qword ptr [RBP + -0x10],RAX
	0001e77b:CMP qword ptr [RBP + -0x10],0x0
	0001e780:JZ 0x0001e7b2
	0001e782:SUB qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
12: actions_count = (sig_atomic_t)lVar1;
	0001e78b:MOV dword ptr [0x000408a0],EAX
END_OF_LINE
----------------------------------------------
13: (*actions[lVar1].action)();
	0001e7a0:ADD RAX,RDX
	0001e7a3:MOV RAX,qword ptr [RAX]
	0001e7a6:MOV qword ptr [RBP + -0x8],RAX
	0001e7aa:MOV RAX,qword ptr [RBP + -0x8]
	0001e7ae:CALL RAX
END_OF_LINE
----------------------------------------------
15: uninstall_handlers();
	0001e7b3:CALL 0x0001e66b
END_OF_LINE
----------------------------------------------
16: raise(sig);
	0001e7bd:CALL 0x000058a0
END_OF_LINE
----------------------------------------------
17: return;
	0001e7c4:RET
END_OF_LINE



Function: install_handlers
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001e7d4:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: action.__sigaction_handler.sa_handler = fatal_signal_handler;
	0001e7ea:MOV qword ptr [RBP + -0xa0],RAX
END_OF_LINE
----------------------------------------------
16: action.sa_flags = 0x40000000;
	0001e7f1:MOV dword ptr [RBP + -0x18],0x40000000
END_OF_LINE
----------------------------------------------
17: sigemptyset((sigset_t *)&action.sa_mask);
	0001e7ff:ADD RAX,0x8
	0001e803:MOV RDI,RAX
	0001e806:CALL 0x00005d50
END_OF_LINE
----------------------------------------------
18: for (i = 0; i < 6; i = i + 1) {
	0001e80b:MOV qword ptr [RBP + -0xa8],0x0
	0001e816:JMP 0x0001e8ad
	0001e81b:MOV RAX,qword ptr [RBP + -0xa8]
	0001e822:LEA RDX,[RAX*0x4]
	0001e82a:LEA RAX,[0x3e100]
	0001e831:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e834:TEST EAX,EAX
	0001e836:JS 0x0001e8a5
	0001e838:MOV RAX,qword ptr [RBP + -0xa8]
	0001e83f:LEA RDX,[RAX*0x4]
	0001e847:LEA RAX,[0x3e100]
	0001e84e:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e851:MOV dword ptr [RBP + -0xac],EAX
	0001e857:MOV EAX,dword ptr [RBP + -0xac]
	0001e85d:CMP EAX,0x3f
	0001e860:JBE 0x0001e867
	0001e862:CALL 0x000058f0
	0001e867:MOV EAX,dword ptr [RBP + -0xac]
	0001e86d:MOVSXD RDX,EAX
	0001e870:MOV RAX,RDX
	0001e873:SHL RAX,0x3
	0001e877:ADD RAX,RDX
	0001e87a:ADD RAX,RAX
	0001e87d:ADD RAX,RDX
	0001e880:SHL RAX,0x3
	0001e884:LEA RDX,[0x408c0]
	0001e88b:ADD RDX,RAX
	0001e88e:LEA RCX,[RBP + -0xa0]
	0001e895:MOV EAX,dword ptr [RBP + -0xac]
	0001e89b:MOV RSI,RCX
	0001e89e:MOV EDI,EAX
	0001e8a0:CALL 0x000059d0
	0001e8a5:ADD qword ptr [RBP + -0xa8],0x1
	0001e8ad:CMP qword ptr [RBP + -0xa8],0x5
	0001e8b5:JBE 0x0001e81b
END_OF_LINE
----------------------------------------------
19: if (-1 < fatal_signals[i]) {
	0001e831:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001e834:TEST EAX,EAX
	0001e836:JS 0x0001e8a5
END_OF_LINE
----------------------------------------------
20: __sig = fatal_signals[i];
	0001e84e:MOV EAX,dword ptr [RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
21: if (0x3f < __sig) {
	0001e860:JBE 0x0001e867
END_OF_LINE
----------------------------------------------
23: abort();
	0001e862:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
25: sigaction(__sig,(sigaction *)&action,(sigaction *)(saved_sigactions + (int)__sig));
	0001e86d:MOVSXD RDX,EAX
	0001e870:MOV RAX,RDX
	0001e873:SHL RAX,0x3
	0001e877:ADD RAX,RDX
	0001e87a:ADD RAX,RAX
	0001e87d:ADD RAX,RDX
	0001e880:SHL RAX,0x3
	0001e884:LEA RDX,[0x408c0]
	0001e88b:ADD RDX,RAX
	0001e88e:LEA RCX,[RBP + -0xa0]
	0001e895:MOV EAX,dword ptr [RBP + -0xac]
	0001e89b:MOV RSI,RCX
	0001e89e:MOV EDI,EAX
	0001e8a0:CALL 0x000059d0
END_OF_LINE
----------------------------------------------
28: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001e8c0:SUB RAX,qword ptr FS:[0x28]
	0001e8c9:JZ 0x0001e8d0
END_OF_LINE
----------------------------------------------
30: __stack_chk_fail();
	0001e8cb:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
32: return;
	0001e8d1:RET
END_OF_LINE



Function: at_fatal_signal
----------------------------------------------
15: if (!at_fatal_signal::cleanup_initialized) {
	0001e8ec:TEST AL,AL
	0001e8ee:JZ 0x0001e901
END_OF_LINE
----------------------------------------------
16: init_fatal_signals();
	0001e8f0:CALL 0x0001e59c
END_OF_LINE
----------------------------------------------
17: install_handlers();
	0001e8f5:CALL 0x0001e7c5
END_OF_LINE
----------------------------------------------
18: at_fatal_signal::cleanup_initialized = true;
	0001e8fa:MOV byte ptr [0x00042f41],0x1
END_OF_LINE
----------------------------------------------
20: __ptr = actions;
	0001e901:MOV EAX,dword ptr [0x000408a0]
END_OF_LINE
----------------------------------------------
21: sVar1 = actions_allocated;
	0001e901:MOV EAX,dword ptr [0x000408a0]
END_OF_LINE
----------------------------------------------
22: if ((long)actions_count == actions_allocated) {
	0001e907:MOVSXD RDX,EAX
	0001e90a:MOV RAX,qword ptr [0x0003e120]
	0001e911:CMP RDX,RAX
	0001e914:JNZ 0x0001e9c7
END_OF_LINE
----------------------------------------------
23: n = actions_allocated * 2;
	0001e937:ADD RAX,RAX
END_OF_LINE
----------------------------------------------
24: actions = (actions_entry_t *)xnmalloc(n,8);
	0001e94a:CALL 0x0002bb91
END_OF_LINE
----------------------------------------------
25: for (k = 0; k < sVar1; k = k + 1) {
	0001e953:MOV qword ptr [RBP + -0x28],0x0
	0001e95b:JMP 0x0001e98e
	0001e95d:MOV RAX,qword ptr [RBP + -0x28]
	0001e961:LEA RDX,[RAX*0x8]
	0001e969:MOV RAX,qword ptr [RBP + -0x20]
	0001e96d:ADD RAX,RDX
	0001e970:MOV RDX,qword ptr [RBP + -0x28]
	0001e974:LEA RCX,[RDX*0x8]
	0001e97c:MOV RDX,qword ptr [RBP + -0x8]
	0001e980:ADD RDX,RCX
	0001e983:MOV RAX,qword ptr [RAX]
	0001e986:MOV qword ptr [RDX],RAX
	0001e989:ADD qword ptr [RBP + -0x28],0x1
	0001e98e:MOV RAX,qword ptr [RBP + -0x28]
	0001e992:CMP RAX,qword ptr [RBP + -0x18]
	0001e996:JC 0x0001e95d
END_OF_LINE
----------------------------------------------
26: actions[k].action = __ptr[k].action;
	0001e96d:ADD RAX,RDX
	0001e970:MOV RDX,qword ptr [RBP + -0x28]
	0001e974:LEA RCX,[RDX*0x8]
	0001e97c:MOV RDX,qword ptr [RBP + -0x8]
	0001e980:ADD RDX,RCX
	0001e983:MOV RAX,qword ptr [RAX]
	0001e986:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
28: actions_allocated = n;
	0001e9b9:JZ 0x0001e9c7
END_OF_LINE
----------------------------------------------
29: if (__ptr != static_actions) {
	0001e9b5:CMP qword ptr [RBP + -0x20],RAX
	0001e9b9:JZ 0x0001e9c7
END_OF_LINE
----------------------------------------------
30: free(__ptr);
	0001e9c2:CALL 0x00005860
END_OF_LINE
----------------------------------------------
33: actions[actions_count].action = action;
	0001e9d4:CDQE
	0001e9d6:SHL RAX,0x3
	0001e9da:ADD RDX,RAX
	0001e9dd:MOV RAX,qword ptr [RBP + -0x38]
	0001e9e1:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
34: actions_count = actions_count + 1;
	0001e9ea:ADD EAX,0x1
	0001e9ed:MOV dword ptr [0x000408a0],EAX
END_OF_LINE
----------------------------------------------
35: return;
	0001e9f5:RET
END_OF_LINE



Function: init_fatal_signal_set
----------------------------------------------
9: if (!init_fatal_signal_set::fatal_signal_set_initialized) {
	0001ea0c:TEST AL,AL
	0001ea0e:JZ 0x0001ea82
END_OF_LINE
----------------------------------------------
10: init_fatal_signals();
	0001ea10:CALL 0x0001e59c
END_OF_LINE
----------------------------------------------
11: sigemptyset((sigset_t *)&fatal_signal_set);
	0001ea1f:CALL 0x00005d50
END_OF_LINE
----------------------------------------------
12: for (i = 0; i < 6; i = i + 1) {
	0001ea24:MOV qword ptr [RBP + -0x8],0x0
	0001ea2c:JMP 0x0001ea74
	0001ea2e:MOV RAX,qword ptr [RBP + -0x8]
	0001ea32:LEA RDX,[RAX*0x4]
	0001ea3a:LEA RAX,[0x3e100]
	0001ea41:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001ea44:TEST EAX,EAX
	0001ea46:JS 0x0001ea6f
	0001ea48:MOV RAX,qword ptr [RBP + -0x8]
	0001ea4c:LEA RDX,[RAX*0x4]
	0001ea54:LEA RAX,[0x3e100]
	0001ea5b:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001ea5e:MOV ESI,EAX
	0001ea60:LEA RAX,[0x42ec0]
	0001ea67:MOV RDI,RAX
	0001ea6a:CALL 0x00006080
	0001ea6f:ADD qword ptr [RBP + -0x8],0x1
	0001ea74:CMP qword ptr [RBP + -0x8],0x5
	0001ea79:JBE 0x0001ea2e
END_OF_LINE
----------------------------------------------
13: if (-1 < fatal_signals[i]) {
	0001ea41:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001ea44:TEST EAX,EAX
	0001ea46:JS 0x0001ea6f
END_OF_LINE
----------------------------------------------
14: sigaddset((sigset_t *)&fatal_signal_set,fatal_signals[i]);
	0001ea5b:MOV EAX,dword ptr [RDX + RAX*0x1]
	0001ea5e:MOV ESI,EAX
	0001ea60:LEA RAX,[0x42ec0]
	0001ea67:MOV RDI,RAX
	0001ea6a:CALL 0x00006080
END_OF_LINE
----------------------------------------------
17: init_fatal_signal_set::fatal_signal_set_initialized = true;
	0001ea7b:MOV byte ptr [0x00042f42],0x1
END_OF_LINE
----------------------------------------------
19: return;
	0001ea84:RET
END_OF_LINE



Function: block_fatal_signals
----------------------------------------------
7: init_fatal_signal_set();
	0001ea8d:CALL 0x0001e9f6
END_OF_LINE
----------------------------------------------
8: sigprocmask(0,(sigset_t *)&fatal_signal_set,(sigset_t *)0x0);
	0001eaa6:CALL 0x00005890
END_OF_LINE
----------------------------------------------
9: return;
	0001eaad:RET
END_OF_LINE



Function: unblock_fatal_signals
----------------------------------------------
7: init_fatal_signal_set();
	0001eab6:CALL 0x0001e9f6
END_OF_LINE
----------------------------------------------
8: sigprocmask(1,(sigset_t *)&fatal_signal_set,(sigset_t *)0x0);
	0001eacf:CALL 0x00005890
END_OF_LINE
----------------------------------------------
9: return;
	0001ead6:RET
END_OF_LINE



Function: full_write
----------------------------------------------
14: total = 0;
	0001eaee:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
15: count_local = count;
	0001eafe:JMP 0x0001eb4c
END_OF_LINE
----------------------------------------------
16: ptr = (char *)buf;
	0001eafe:JMP 0x0001eb4c
END_OF_LINE
----------------------------------------------
17: while( true ) {
	0001eb1e:JZ 0x0001eb55
END_OF_LINE
----------------------------------------------
18: if (count_local == 0) {
	0001eb4c:CMP qword ptr [RBP + -0x38],0x0
	0001eb51:JNZ 0x0001eb00
END_OF_LINE
----------------------------------------------
19: return total;
	0001eb56:MOV RAX,qword ptr [RBP + -0x18]
	0001eb5a:LEAVE
	0001eb5b:RET
END_OF_LINE
----------------------------------------------
21: sVar1 = safe_write(fd,ptr,count_local);
	0001eb10:CALL 0x0002aea3
END_OF_LINE
----------------------------------------------
22: if (sVar1 == 0xffffffffffffffff) break;
	0001eb19:CMP qword ptr [RBP + -0x8],-0x1
	0001eb1e:JZ 0x0001eb55
END_OF_LINE
----------------------------------------------
23: if (sVar1 == 0) {
	0001eb20:CMP qword ptr [RBP + -0x8],0x0
	0001eb25:JNZ 0x0001eb34
END_OF_LINE
----------------------------------------------
24: piVar2 = __errno_location();
	0001eb27:CALL 0x00005900
END_OF_LINE
----------------------------------------------
25: *piVar2 = 0x1c;
	0001eb2c:MOV dword ptr [RAX],0x1c
END_OF_LINE
----------------------------------------------
26: return total;
	0001eb56:MOV RAX,qword ptr [RBP + -0x18]
	0001eb5a:LEAVE
	0001eb5b:RET
END_OF_LINE
----------------------------------------------
28: total = total + sVar1;
	0001eb38:ADD qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
29: ptr = ptr + sVar1;
	0001eb40:ADD qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
30: count_local = count_local - sVar1;
	0001eb48:SUB qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
32: return total;
	0001eb56:MOV RAX,qword ptr [RBP + -0x18]
	0001eb5a:LEAVE
	0001eb5b:RET
END_OF_LINE



Function: gettime
----------------------------------------------
11: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001eb6c:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
12: iVar2 = clock_gettime(0,(timespec *)ts);
	0001eb87:CALL 0x00005a20
END_OF_LINE
----------------------------------------------
13: if (iVar2 != 0) {
	0001eb8c:TEST EAX,EAX
	0001eb8e:JZ 0x0001ebc1
END_OF_LINE
----------------------------------------------
14: gettimeofday((timeval *)&tv,(__timezone_ptr_t)0x0);
	0001eb90:LEA RAX,[RBP + -0x20]
	0001eb94:MOV ESI,0x0
	0001eb99:MOV RDI,RAX
	0001eb9c:CALL 0x00005be0
END_OF_LINE
----------------------------------------------
15: ts->tv_sec = tv.tv_sec;
	0001eba9:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
16: ts->tv_nsec = tv.tv_usec * 1000;
	0001ebb0:IMUL RDX,RAX,0x3e8
	0001ebb7:MOV RAX,qword ptr [RBP + -0x28]
	0001ebbb:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
18: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001ebc6:SUB RAX,qword ptr FS:[0x28]
	0001ebcf:JZ 0x0001ebd6
END_OF_LINE
----------------------------------------------
20: __stack_chk_fail();
	0001ebd1:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
22: return;
	0001ebd7:RET
END_OF_LINE



Function: hash_get_n_buckets
----------------------------------------------
7: return table->n_buckets;
	0001ebe8:MOV RAX,qword ptr [RAX + 0x10]
	0001ebec:POP RBP
	0001ebed:RET
END_OF_LINE



Function: hash_get_n_buckets_used
----------------------------------------------
7: return table->n_buckets_used;
	0001ebfe:MOV RAX,qword ptr [RAX + 0x18]
	0001ec02:POP RBP
	0001ec03:RET
END_OF_LINE



Function: hash_get_n_entries
----------------------------------------------
7: return table->n_entries;
	0001ec14:MOV RAX,qword ptr [RAX + 0x20]
	0001ec18:POP RBP
	0001ec19:RET
END_OF_LINE



Function: hash_get_max_bucket_length
----------------------------------------------
11: max_bucket_length = 0;
	0001ec26:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
12: for (bucket = table->bucket; bucket < table->bucket_limit; bucket = bucket + 1) {
	0001ec32:MOV RAX,qword ptr [RAX]
	0001ec35:MOV qword ptr [RBP + -0x20],RAX
	0001ec39:JMP 0x0001ec88
	0001ec3b:MOV RAX,qword ptr [RBP + -0x20]
	0001ec3f:MOV RAX,qword ptr [RAX]
	0001ec42:TEST RAX,RAX
	0001ec45:JZ 0x0001ec83
	0001ec47:MOV RAX,qword ptr [RBP + -0x20]
	0001ec4b:MOV qword ptr [RBP + -0x10],RAX
	0001ec4f:MOV qword ptr [RBP + -0x8],0x1
	0001ec57:JMP 0x0001ec5e
	0001ec59:ADD qword ptr [RBP + -0x8],0x1
	0001ec5e:MOV RAX,qword ptr [RBP + -0x10]
	0001ec62:MOV RAX,qword ptr [RAX + 0x8]
	0001ec66:MOV qword ptr [RBP + -0x10],RAX
	0001ec6a:CMP qword ptr [RBP + -0x10],0x0
	0001ec6f:JNZ 0x0001ec59
	0001ec71:MOV RAX,qword ptr [RBP + -0x8]
	0001ec75:CMP RAX,qword ptr [RBP + -0x18]
	0001ec79:JBE 0x0001ec83
	0001ec7b:MOV RAX,qword ptr [RBP + -0x8]
	0001ec7f:MOV qword ptr [RBP + -0x18],RAX
	0001ec83:ADD qword ptr [RBP + -0x20],0x10
	0001ec88:MOV RAX,qword ptr [RBP + -0x28]
	0001ec8c:MOV RAX,qword ptr [RAX + 0x8]
	0001ec90:CMP qword ptr [RBP + -0x20],RAX
	0001ec94:JC 0x0001ec3b
END_OF_LINE
----------------------------------------------
13: if (bucket->data != (void *)0x0) {
	0001ec3f:MOV RAX,qword ptr [RAX]
	0001ec42:TEST RAX,RAX
	0001ec45:JZ 0x0001ec83
END_OF_LINE
----------------------------------------------
14: cursor = bucket;
	0001ec4b:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
15: bucket_length = 1;
	0001ec4f:MOV qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
16: while (cursor = cursor->next, cursor != (hash_entry *)0x0) {
	0001ec62:MOV RAX,qword ptr [RAX + 0x8]
	0001ec66:MOV qword ptr [RBP + -0x10],RAX
	0001ec6a:CMP qword ptr [RBP + -0x10],0x0
	0001ec6f:JNZ 0x0001ec59
END_OF_LINE
----------------------------------------------
17: bucket_length = bucket_length + 1;
	0001ec59:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
19: if (max_bucket_length < bucket_length) {
	0001ec79:JBE 0x0001ec83
END_OF_LINE
----------------------------------------------
20: max_bucket_length = bucket_length;
	0001ec7f:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
24: return max_bucket_length;
	0001ec96:MOV RAX,qword ptr [RBP + -0x18]
	0001ec9a:POP RBP
	0001ec9b:RET
END_OF_LINE



Function: hash_table_ok
----------------------------------------------
12: n_buckets_used = 0;
	0001eca8:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
13: n_entries = 0;
	0001ecb0:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
14: for (bucket = table->bucket; bucket < table->bucket_limit; bucket = bucket + 1) {
	0001ecbc:MOV RAX,qword ptr [RAX]
	0001ecbf:MOV qword ptr [RBP + -0x20],RAX
	0001ecc3:JMP 0x0001ed02
	0001ecc5:MOV RAX,qword ptr [RBP + -0x20]
	0001ecc9:MOV RAX,qword ptr [RAX]
	0001eccc:TEST RAX,RAX
	0001eccf:JZ 0x0001ecfd
	0001ecd1:MOV RAX,qword ptr [RBP + -0x20]
	0001ecd5:MOV qword ptr [RBP + -0x8],RAX
	0001ecd9:ADD qword ptr [RBP + -0x18],0x1
	0001ecde:ADD qword ptr [RBP + -0x10],0x1
	0001ece3:JMP 0x0001ecea
	0001ece5:ADD qword ptr [RBP + -0x10],0x1
	0001ecea:MOV RAX,qword ptr [RBP + -0x8]
	0001ecee:MOV RAX,qword ptr [RAX + 0x8]
	0001ecf2:MOV qword ptr [RBP + -0x8],RAX
	0001ecf6:CMP qword ptr [RBP + -0x8],0x0
	0001ecfb:JNZ 0x0001ece5
	0001ecfd:ADD qword ptr [RBP + -0x20],0x10
	0001ed02:MOV RAX,qword ptr [RBP + -0x28]
	0001ed06:MOV RAX,qword ptr [RAX + 0x8]
	0001ed0a:CMP qword ptr [RBP + -0x20],RAX
	0001ed0e:JC 0x0001ecc5
END_OF_LINE
----------------------------------------------
15: if (bucket->data != (void *)0x0) {
	0001ecc9:MOV RAX,qword ptr [RAX]
	0001eccc:TEST RAX,RAX
	0001eccf:JZ 0x0001ecfd
END_OF_LINE
----------------------------------------------
16: cursor = bucket;
	0001ecd5:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
17: n_buckets_used = n_buckets_used + 1;
	0001ecd9:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
19: n_entries = n_entries + 1;
	0001ecde:ADD qword ptr [RBP + -0x10],0x1
END_OF_LINE
----------------------------------------------
20: cursor = cursor->next;
	0001ecee:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
21: } while (cursor != (hash_entry *)0x0);
	0001ecf6:CMP qword ptr [RBP + -0x8],0x0
	0001ecfb:JNZ 0x0001ece5
END_OF_LINE
----------------------------------------------
24: if ((n_buckets_used == table->n_buckets_used) && (n_entries == table->n_entries)) {
	0001ed14:MOV RAX,qword ptr [RAX + 0x18]
	0001ed18:CMP qword ptr [RBP + -0x18],RAX
	0001ed1c:JNZ 0x0001ed33
	0001ed1e:MOV RAX,qword ptr [RBP + -0x28]
	0001ed22:MOV RAX,qword ptr [RAX + 0x20]
	0001ed26:CMP qword ptr [RBP + -0x10],RAX
	0001ed2a:JNZ 0x0001ed33
END_OF_LINE
----------------------------------------------
25: _Var1 = true;
	0001ed2c:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
28: _Var1 = false;
	0001ed33:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
30: return _Var1;
	0001ed39:RET
END_OF_LINE



Function: hash_print_statistics
----------------------------------------------
18: sVar1 = hash_get_n_entries(table);
	0001ed55:CALL 0x0001ec04
END_OF_LINE
----------------------------------------------
19: sVar2 = hash_get_n_buckets(table);
	0001ed65:CALL 0x0001ebd8
END_OF_LINE
----------------------------------------------
20: sVar3 = hash_get_n_buckets_used(table);
	0001ed75:CALL 0x0001ebee
END_OF_LINE
----------------------------------------------
21: sVar4 = hash_get_max_bucket_length(table);
	0001ed85:CALL 0x0001ec1a
END_OF_LINE
----------------------------------------------
22: fprintf((FILE *)stream,"# entries:         %lu\n",sVar1);
	0001eda8:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
23: fprintf((FILE *)stream,"# buckets:         %lu\n",sVar2);
	0001edc7:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
24: if ((long)sVar3 < 0) {
	0001edd0:TEST RAX,RAX
	0001edd3:JS 0x0001ede0
END_OF_LINE
----------------------------------------------
25: dVar5 = (double)(sVar3 >> 1 | (ulong)((uint)sVar3 & 1));
	0001ede3:SHR RDX,0x1
	0001ede6:AND EAX,0x1
	0001ede9:OR RDX,RAX
	0001edec:PXOR XMM0,XMM0
	0001edf0:CVTSI2SD XMM0,RDX
END_OF_LINE
----------------------------------------------
26: dVar5 = dVar5 + dVar5;
	0001edf5:ADDSD XMM0,XMM0
END_OF_LINE
----------------------------------------------
29: dVar5 = (double)sVar3;
	0001edd9:CVTSI2SD XMM0,RAX
END_OF_LINE
----------------------------------------------
31: if ((long)sVar2 < 0) {
	0001ee09:TEST RAX,RAX
	0001ee0c:JS 0x0001ee19
END_OF_LINE
----------------------------------------------
32: dVar6 = (double)(sVar2 >> 1 | (ulong)((uint)sVar2 & 1));
	0001ee1c:SHR RDX,0x1
	0001ee1f:AND EAX,0x1
	0001ee22:OR RDX,RAX
	0001ee25:PXOR XMM0,XMM0
	0001ee29:CVTSI2SD XMM0,RDX
END_OF_LINE
----------------------------------------------
33: dVar6 = dVar6 + dVar6;
	0001ee2e:ADDSD XMM0,XMM0
END_OF_LINE
----------------------------------------------
36: dVar6 = (double)sVar2;
	0001ee12:CVTSI2SD XMM0,RAX
END_OF_LINE
----------------------------------------------
38: fprintf((FILE *)stream,"# buckets used:    %lu (%.2f%%)\n",(dVar5 * 100.0) / dVar6,sVar3);
	0001ee01:MULSD XMM1,XMM0
	0001ee05:MOV RAX,qword ptr [RBP + -0x18]
	0001ee09:TEST RAX,RAX
	0001ee0c:JS 0x0001ee19
	0001ee0e:PXOR XMM0,XMM0
	0001ee12:CVTSI2SD XMM0,RAX
	0001ee17:JMP 0x0001ee32
	0001ee19:MOV RDX,RAX
	0001ee1c:SHR RDX,0x1
	0001ee1f:AND EAX,0x1
	0001ee22:OR RDX,RAX
	0001ee25:PXOR XMM0,XMM0
	0001ee29:CVTSI2SD XMM0,RDX
	0001ee2e:ADDSD XMM0,XMM0
	0001ee32:DIVSD XMM1,XMM0
	0001ee36:MOVQ RCX,XMM1
	0001ee3b:MOV RDX,qword ptr [RBP + -0x10]
	0001ee3f:MOV RAX,qword ptr [RBP + -0x30]
	0001ee43:MOVQ XMM0,RCX
	0001ee48:LEA RCX,[0x345e8]
	0001ee4f:MOV RSI,RCX
	0001ee52:MOV RDI,RAX
	0001ee55:MOV EAX,0x1
	0001ee5a:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
39: fprintf((FILE *)stream,"max bucket length: %lu\n",sVar4);
	0001ee79:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
40: return;
	0001ee80:RET
END_OF_LINE



Function: safe_hasher
----------------------------------------------
10: sVar1 = (*table->hasher)(key,table->n_buckets);
	0001ee99:MOV RCX,qword ptr [RAX + 0x30]
	0001ee9d:MOV RAX,qword ptr [RBP + -0x18]
	0001eea1:MOV RDX,qword ptr [RAX + 0x10]
	0001eea5:MOV RAX,qword ptr [RBP + -0x20]
	0001eea9:MOV RSI,RDX
	0001eeac:MOV RDI,RAX
	0001eeaf:CALL RCX
END_OF_LINE
----------------------------------------------
11: if (table->n_buckets <= sVar1) {
	0001eeb9:MOV RAX,qword ptr [RAX + 0x10]
	0001eebd:CMP qword ptr [RBP + -0x8],RAX
	0001eec1:JC 0x0001eec8
END_OF_LINE
----------------------------------------------
13: abort();
	0001eec3:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
15: return table->bucket + sVar1;
	0001eecc:MOV RDX,qword ptr [RAX]
	0001eecf:MOV RAX,qword ptr [RBP + -0x8]
	0001eed3:SHL RAX,0x4
	0001eed7:ADD RAX,RDX
	0001eeda:LEAVE
	0001eedb:RET
END_OF_LINE



Function: hash_lookup
----------------------------------------------
11: cursor = safe_hasher(table,entry);
	0001eefe:CALL 0x0001ee81
END_OF_LINE
----------------------------------------------
12: if (cursor->data != (void *)0x0) {
	0001ef0b:MOV RAX,qword ptr [RAX]
	0001ef0e:TEST RAX,RAX
	0001ef11:JNZ 0x0001ef1a
END_OF_LINE
----------------------------------------------
13: for (; cursor != (hash_entry *)0x0; cursor = cursor->next) {
	0001ef5d:MOV RAX,qword ptr [RAX + 0x8]
	0001ef61:MOV qword ptr [RBP + -0x10],RAX
	0001ef65:CMP qword ptr [RBP + -0x10],0x0
	0001ef6a:JNZ 0x0001ef24
END_OF_LINE
----------------------------------------------
14: if ((entry == cursor->data) || (_Var1 = (*table->comparator)(entry,cursor->data), _Var1)) {
	0001ef28:MOV RAX,qword ptr [RAX]
	0001ef2b:CMP qword ptr [RBP + -0x20],RAX
	0001ef2f:JZ 0x0001ef50
	0001ef31:MOV RAX,qword ptr [RBP + -0x18]
	0001ef35:MOV RCX,qword ptr [RAX + 0x38]
	0001ef39:MOV RAX,qword ptr [RBP + -0x10]
	0001ef3d:MOV RDX,qword ptr [RAX]
	0001ef40:MOV RAX,qword ptr [RBP + -0x20]
	0001ef44:MOV RSI,RDX
	0001ef47:MOV RDI,RAX
	0001ef4a:CALL RCX
	0001ef4c:TEST AL,AL
	0001ef4e:JZ 0x0001ef59
END_OF_LINE
----------------------------------------------
15: return cursor->data;
	0001ef54:MOV RAX,qword ptr [RAX]
	0001ef57:JMP 0x0001ef71
	0001ef59:MOV RAX,qword ptr [RBP + -0x10]
	0001ef5d:MOV RAX,qword ptr [RAX + 0x8]
	0001ef61:MOV qword ptr [RBP + -0x10],RAX
	0001ef65:CMP qword ptr [RBP + -0x10],0x0
	0001ef6a:JNZ 0x0001ef24
	0001ef6c:MOV EAX,0x0
	0001ef71:LEAVE
	0001ef72:RET
END_OF_LINE
----------------------------------------------
19: return (void *)0x0;
	0001ef71:LEAVE
	0001ef72:RET
END_OF_LINE



Function: hash_get_first
----------------------------------------------
9: if (table->n_entries == 0) {
	0001ef87:MOV RAX,qword ptr [RAX + 0x20]
	0001ef8b:TEST RAX,RAX
	0001ef8e:JNZ 0x0001ef97
END_OF_LINE
----------------------------------------------
10: pvVar1 = (void *)0x0;
	0001ef90:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: bucket = table->bucket;
	0001ef9b:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
14: while( true ) {
	0001efbf:JZ 0x0001efca
END_OF_LINE
----------------------------------------------
15: if (table->bucket_limit <= bucket) {
	0001efa6:MOV RAX,qword ptr [RAX + 0x8]
	0001efaa:CMP qword ptr [RBP + -0x8],RAX
	0001efae:JC 0x0001efb5
END_OF_LINE
----------------------------------------------
17: abort();
	0001efb0:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
19: if (bucket->data != (void *)0x0) break;
	0001efb9:MOV RAX,qword ptr [RAX]
	0001efbc:TEST RAX,RAX
	0001efbf:JZ 0x0001efca
END_OF_LINE
----------------------------------------------
20: bucket = bucket + 1;
	0001efca:ADD qword ptr [RBP + -0x8],0x10
END_OF_LINE
----------------------------------------------
22: pvVar1 = bucket->data;
	0001efc5:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
24: return pvVar1;
	0001efd2:RET
END_OF_LINE



Function: hash_get_next
----------------------------------------------
10: bucket = safe_hasher(table,entry);
	0001eff5:CALL 0x0001ee81
END_OF_LINE
----------------------------------------------
11: cursor = bucket;
	0001f002:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
12: while ((entry != cursor->data || (cursor->next == (hash_entry *)0x0))) {
	0001f00a:MOV RAX,qword ptr [RAX]
	0001f00d:CMP qword ptr [RBP + -0x20],RAX
	0001f011:JNZ 0x0001f02d
	0001f013:MOV RAX,qword ptr [RBP + -0x8]
	0001f017:MOV RAX,qword ptr [RAX + 0x8]
	0001f01b:TEST RAX,RAX
	0001f01e:JZ 0x0001f02d
END_OF_LINE
----------------------------------------------
13: cursor = cursor->next;
	0001f031:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
14: if (cursor == (hash_entry *)0x0) {
	0001f039:CMP qword ptr [RBP + -0x8],0x0
	0001f03e:JNZ 0x0001f006
END_OF_LINE
----------------------------------------------
16: bucket = bucket + 1;
	0001f057:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE
----------------------------------------------
17: if (table->bucket_limit <= bucket) {
	0001f060:MOV RAX,qword ptr [RAX + 0x8]
	0001f064:CMP qword ptr [RBP + -0x10],RAX
	0001f068:JC 0x0001f042
END_OF_LINE
----------------------------------------------
18: return (void *)0x0;
	0001f06f:LEAVE
	0001f070:RET
END_OF_LINE
----------------------------------------------
20: } while (bucket->data == (void *)0x0);
	0001f046:MOV RAX,qword ptr [RAX]
	0001f049:TEST RAX,RAX
	0001f04c:JZ 0x0001f057
END_OF_LINE
----------------------------------------------
21: return bucket->data;
	0001f052:MOV RAX,qword ptr [RAX]
	0001f055:JMP 0x0001f06f
	0001f057:ADD qword ptr [RBP + -0x10],0x10
	0001f05c:MOV RAX,qword ptr [RBP + -0x18]
	0001f060:MOV RAX,qword ptr [RAX + 0x8]
	0001f064:CMP qword ptr [RBP + -0x10],RAX
	0001f068:JC 0x0001f042
	0001f06a:MOV EAX,0x0
	0001f06f:LEAVE
	0001f070:RET
END_OF_LINE
----------------------------------------------
24: return cursor->next->data;
	0001f024:MOV RAX,qword ptr [RAX + 0x8]
	0001f028:MOV RAX,qword ptr [RAX]
	0001f02b:JMP 0x0001f06f
	0001f02d:MOV RAX,qword ptr [RBP + -0x8]
	0001f031:MOV RAX,qword ptr [RAX + 0x8]
	0001f035:MOV qword ptr [RBP + -0x8],RAX
	0001f039:CMP qword ptr [RBP + -0x8],0x0
	0001f03e:JNZ 0x0001f006
	0001f040:JMP 0x0001f057
	0001f042:MOV RAX,qword ptr [RBP + -0x10]
	0001f046:MOV RAX,qword ptr [RAX]
	0001f049:TEST RAX,RAX
	0001f04c:JZ 0x0001f057
	0001f04e:MOV RAX,qword ptr [RBP + -0x10]
	0001f052:MOV RAX,qword ptr [RAX]
	0001f055:JMP 0x0001f06f
	0001f057:ADD qword ptr [RBP + -0x10],0x10
	0001f05c:MOV RAX,qword ptr [RBP + -0x18]
	0001f060:MOV RAX,qword ptr [RAX + 0x8]
	0001f064:CMP qword ptr [RBP + -0x10],RAX
	0001f068:JC 0x0001f042
	0001f06a:MOV EAX,0x0
	0001f06f:LEAVE
	0001f070:RET
END_OF_LINE



Function: hash_get_entries
----------------------------------------------
12: counter = 0;
	0001f085:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
13: bucket = table->bucket;
	0001f091:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
15: if (table->bucket_limit <= bucket) {
	0001f101:MOV RAX,qword ptr [RAX + 0x8]
	0001f105:CMP qword ptr [RBP + -0x10],RAX
	0001f109:JC 0x0001f09a
END_OF_LINE
----------------------------------------------
16: return counter;
	0001f10f:POP RBP
	0001f110:RET
END_OF_LINE
----------------------------------------------
18: if (bucket->data != (void *)0x0) {
	0001f09e:MOV RAX,qword ptr [RAX]
	0001f0a1:TEST RAX,RAX
	0001f0a4:JZ 0x0001f0f8
END_OF_LINE
----------------------------------------------
19: for (cursor = bucket; cursor != (hash_entry *)0x0; cursor = cursor->next) {
	0001f0aa:MOV qword ptr [RBP + -0x8],RAX
	0001f0ae:JMP 0x0001f0f1
	0001f0b0:MOV RAX,qword ptr [RBP + -0x18]
	0001f0b4:CMP RAX,qword ptr [RBP + -0x38]
	0001f0b8:JC 0x0001f0c0
	0001f0ba:MOV RAX,qword ptr [RBP + -0x18]
	0001f0be:JMP 0x0001f10f
	0001f0c0:MOV RAX,qword ptr [RBP + -0x18]
	0001f0c4:LEA RDX,[RAX + 0x1]
	0001f0c8:MOV qword ptr [RBP + -0x18],RDX
	0001f0cc:LEA RDX,[RAX*0x8]
	0001f0d4:MOV RAX,qword ptr [RBP + -0x30]
	0001f0d8:ADD RDX,RAX
	0001f0db:MOV RAX,qword ptr [RBP + -0x8]
	0001f0df:MOV RAX,qword ptr [RAX]
	0001f0e2:MOV qword ptr [RDX],RAX
	0001f0e5:MOV RAX,qword ptr [RBP + -0x8]
	0001f0e9:MOV RAX,qword ptr [RAX + 0x8]
	0001f0ed:MOV qword ptr [RBP + -0x8],RAX
	0001f0f1:CMP qword ptr [RBP + -0x8],0x0
	0001f0f6:JNZ 0x0001f0b0
END_OF_LINE
----------------------------------------------
20: if (buffer_size <= counter) {
	0001f0b4:CMP RAX,qword ptr [RBP + -0x38]
	0001f0b8:JC 0x0001f0c0
END_OF_LINE
----------------------------------------------
21: return counter;
	0001f10f:POP RBP
	0001f110:RET
END_OF_LINE
----------------------------------------------
23: buffer[counter] = cursor->data;
	0001f0d8:ADD RDX,RAX
	0001f0db:MOV RAX,qword ptr [RBP + -0x8]
	0001f0df:MOV RAX,qword ptr [RAX]
	0001f0e2:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
24: counter = counter + 1;
	0001f0c4:LEA RDX,[RAX + 0x1]
	0001f0c8:MOV qword ptr [RBP + -0x18],RDX
	0001f0cc:LEA RDX,[RAX*0x8]
	0001f0d4:MOV RAX,qword ptr [RBP + -0x30]
	0001f0d8:ADD RDX,RAX
	0001f0db:MOV RAX,qword ptr [RBP + -0x8]
	0001f0df:MOV RAX,qword ptr [RAX]
	0001f0e2:MOV qword ptr [RDX],RAX
	0001f0e5:MOV RAX,qword ptr [RBP + -0x8]
	0001f0e9:MOV RAX,qword ptr [RAX + 0x8]
	0001f0ed:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
27: bucket = bucket + 1;
	0001f0f8:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE
----------------------------------------------
28: } while( true );
	0001f0f8:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE



Function: hash_do_for_each
----------------------------------------------
13: counter = 0;
	0001f129:MOV qword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
14: bucket = table->bucket;
	0001f135:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
16: if (table->bucket_limit <= bucket) {
	0001f199:MOV RAX,qword ptr [RAX + 0x8]
	0001f19d:CMP qword ptr [RBP + -0x10],RAX
	0001f1a1:JC 0x0001f13e
END_OF_LINE
----------------------------------------------
17: return counter;
	0001f1a7:LEAVE
	0001f1a8:RET
END_OF_LINE
----------------------------------------------
19: if (bucket->data != (void *)0x0) {
	0001f142:MOV RAX,qword ptr [RAX]
	0001f145:TEST RAX,RAX
	0001f148:JZ 0x0001f190
END_OF_LINE
----------------------------------------------
20: for (cursor = bucket; cursor != (hash_entry *)0x0; cursor = cursor->next) {
	0001f14e:MOV qword ptr [RBP + -0x8],RAX
	0001f152:JMP 0x0001f189
	0001f154:MOV RAX,qword ptr [RBP + -0x8]
	0001f158:MOV RAX,qword ptr [RAX]
	0001f15b:MOV RDX,qword ptr [RBP + -0x38]
	0001f15f:MOV RCX,qword ptr [RBP + -0x30]
	0001f163:MOV RSI,RDX
	0001f166:MOV RDI,RAX
	0001f169:CALL RCX
	0001f16b:XOR EAX,0x1
	0001f16e:TEST AL,AL
	0001f170:JZ 0x0001f178
	0001f172:MOV RAX,qword ptr [RBP + -0x18]
	0001f176:JMP 0x0001f1a7
	0001f178:ADD qword ptr [RBP + -0x18],0x1
	0001f17d:MOV RAX,qword ptr [RBP + -0x8]
	0001f181:MOV RAX,qword ptr [RAX + 0x8]
	0001f185:MOV qword ptr [RBP + -0x8],RAX
	0001f189:CMP qword ptr [RBP + -0x8],0x0
	0001f18e:JNZ 0x0001f154
END_OF_LINE
----------------------------------------------
21: _Var1 = (*processor)(cursor->data,processor_data);
	0001f158:MOV RAX,qword ptr [RAX]
	0001f15b:MOV RDX,qword ptr [RBP + -0x38]
	0001f15f:MOV RCX,qword ptr [RBP + -0x30]
	0001f163:MOV RSI,RDX
	0001f166:MOV RDI,RAX
	0001f169:CALL RCX
END_OF_LINE
----------------------------------------------
22: if (!_Var1) {
	0001f16e:TEST AL,AL
	0001f170:JZ 0x0001f178
END_OF_LINE
----------------------------------------------
23: return counter;
	0001f1a7:LEAVE
	0001f1a8:RET
END_OF_LINE
----------------------------------------------
25: counter = counter + 1;
	0001f178:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
28: bucket = bucket + 1;
	0001f190:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE
----------------------------------------------
29: } while( true );
	0001f190:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE



Function: hash_string
----------------------------------------------
10: value = 0;
	0001f1b9:MOV qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
11: for (string_local = string; *string_local != 0; string_local = string_local + 1) {
	0001f1c1:JMP 0x0001f1ed
	0001f1c3:MOV RDX,qword ptr [RBP + -0x8]
	0001f1c7:MOV RAX,RDX
	0001f1ca:SHL RAX,0x5
	0001f1ce:SUB RAX,RDX
	0001f1d1:MOV RCX,RAX
	0001f1d4:MOVZX EAX,byte ptr [RBP + -0x9]
	0001f1d8:ADD RAX,RCX
	0001f1db:MOV EDX,0x0
	0001f1e0:DIV qword ptr [RBP + -0x20]
	0001f1e4:MOV qword ptr [RBP + -0x8],RDX
	0001f1e8:ADD qword ptr [RBP + -0x18],0x1
	0001f1ed:MOV RAX,qword ptr [RBP + -0x18]
	0001f1f1:MOVZX EAX,byte ptr [RAX]
	0001f1f4:MOV byte ptr [RBP + -0x9],AL
	0001f1f7:CMP byte ptr [RBP + -0x9],0x0
	0001f1fb:JNZ 0x0001f1c3
END_OF_LINE
----------------------------------------------
12: value = ((ulong)(byte)*string_local + value * 0x1f) % n_buckets;
	0001f1ce:SUB RAX,RDX
	0001f1d1:MOV RCX,RAX
	0001f1d4:MOVZX EAX,byte ptr [RBP + -0x9]
	0001f1d8:ADD RAX,RCX
	0001f1db:MOV EDX,0x0
	0001f1e0:DIV qword ptr [RBP + -0x20]
	0001f1e4:MOV qword ptr [RBP + -0x8],RDX
	0001f1e8:ADD qword ptr [RBP + -0x18],0x1
	0001f1ed:MOV RAX,qword ptr [RBP + -0x18]
	0001f1f1:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
14: return value;
	0001f1fd:MOV RAX,qword ptr [RBP + -0x8]
	0001f201:POP RBP
	0001f202:RET
END_OF_LINE



Function: is_prime
----------------------------------------------
9: square = 9;
	0001f21b:IMUL RAX,RAX
END_OF_LINE
----------------------------------------------
10: for (divisor = 3; (square < candidate && (candidate % divisor != 0)); divisor = divisor + 2) {
	0001f20f:MOV qword ptr [RBP + -0x10],0x3
	0001f217:MOV RAX,qword ptr [RBP + -0x10]
	0001f21b:IMUL RAX,RAX
	0001f21f:MOV qword ptr [RBP + -0x8],RAX
	0001f223:JMP 0x0001f23b
	0001f225:ADD qword ptr [RBP + -0x10],0x1
	0001f22a:MOV RAX,qword ptr [RBP + -0x10]
	0001f22e:SHL RAX,0x2
	0001f232:ADD qword ptr [RBP + -0x8],RAX
	0001f236:ADD qword ptr [RBP + -0x10],0x1
	0001f23b:MOV RAX,qword ptr [RBP + -0x8]
	0001f23f:CMP RAX,qword ptr [RBP + -0x18]
	0001f243:JNC 0x0001f25a
	0001f245:MOV RAX,qword ptr [RBP + -0x18]
	0001f249:MOV EDX,0x0
	0001f24e:DIV qword ptr [RBP + -0x10]
	0001f252:MOV RAX,RDX
	0001f255:TEST RAX,RAX
	0001f258:JNZ 0x0001f225
END_OF_LINE
----------------------------------------------
11: square = square + (divisor + 1) * 4;
	0001f225:ADD qword ptr [RBP + -0x10],0x1
	0001f22a:MOV RAX,qword ptr [RBP + -0x10]
	0001f22e:SHL RAX,0x2
	0001f232:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
13: return candidate % divisor != 0;
	0001f263:DIV qword ptr [RBP + -0x10]
	0001f267:MOV RAX,RDX
	0001f26a:TEST RAX,RAX
	0001f26d:SETNZ AL
	0001f270:POP RBP
	0001f271:RET
END_OF_LINE



Function: next_prime
----------------------------------------------
8: candidate_local = candidate;
	0001f287:JA 0x0001f291
END_OF_LINE
----------------------------------------------
9: if (candidate < 10) {
	0001f287:JA 0x0001f291
END_OF_LINE
----------------------------------------------
10: candidate_local = 10;
	0001f289:MOV qword ptr [RBP + -0x8],0xa
END_OF_LINE
----------------------------------------------
12: candidate_local = candidate_local | 1;
	0001f291:OR qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
13: while( true ) {
	0001f2b5:JNZ 0x0001f298
END_OF_LINE
----------------------------------------------
14: if (candidate_local == 0xffffffffffffffff) {
	0001f29d:CMP qword ptr [RBP + -0x8],-0x1
	0001f2a2:JZ 0x0001f2b7
END_OF_LINE
----------------------------------------------
15: return 0xffffffffffffffff;
	0001f2b7:MOV RAX,qword ptr [RBP + -0x8]
	0001f2bb:LEAVE
	0001f2bc:RET
END_OF_LINE
----------------------------------------------
17: _Var1 = is_prime(candidate_local);
	0001f2ab:CALL 0x0001f203
END_OF_LINE
----------------------------------------------
18: if (_Var1) break;
	0001f2b5:JNZ 0x0001f298
END_OF_LINE
----------------------------------------------
19: candidate_local = candidate_local + 2;
	0001f298:ADD qword ptr [RBP + -0x8],0x2
END_OF_LINE
----------------------------------------------
21: return candidate_local;
	0001f2b7:MOV RAX,qword ptr [RBP + -0x8]
	0001f2bb:LEAVE
	0001f2bc:RET
END_OF_LINE



Function: hash_reset_tuning
----------------------------------------------
7: tuning->shrink_threshold = 0.0;
	0001f2d1:MOVSS dword ptr [RAX],XMM0
END_OF_LINE
----------------------------------------------
8: tuning->shrink_factor = 1.0;
	0001f2e1:MOVSS dword ptr [RAX + 0x4],XMM0
END_OF_LINE
----------------------------------------------
9: tuning->growth_threshold = 0.8;
	0001f2f2:MOVSS dword ptr [RAX + 0x8],XMM0
END_OF_LINE
----------------------------------------------
10: tuning->growth_factor = 1.414;
	0001f303:MOVSS dword ptr [RAX + 0xc],XMM0
END_OF_LINE
----------------------------------------------
11: tuning->is_n_buckets = false;
	0001f30c:MOV byte ptr [RAX + 0x10],0x0
END_OF_LINE
----------------------------------------------
12: return;
	0001f312:RET
END_OF_LINE



Function: raw_hasher
----------------------------------------------
10: sVar1 = rotr_sz((size_t)data,3);
	0001f333:CALL 0x0002ce40
END_OF_LINE
----------------------------------------------
11: return sVar1 % n;
	0001f345:DIV qword ptr [RBP + -0x20]
	0001f349:MOV RAX,RDX
	0001f34c:LEAVE
	0001f34d:RET
END_OF_LINE



Function: raw_comparator
----------------------------------------------
8: return a == b;
	0001f362:CMP RAX,qword ptr [RBP + -0x10]
	0001f366:SETZ AL
	0001f369:POP RBP
	0001f36a:RET
END_OF_LINE



Function: check_tuning
----------------------------------------------
11: pHVar1 = table->tuning;
	0001f37b:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
12: if (pHVar1 == &default_tuning) {
	0001f38a:CMP qword ptr [RBP + -0x8],RAX
	0001f38e:JNZ 0x0001f39a
END_OF_LINE
----------------------------------------------
13: _Var2 = true;
	0001f390:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
15: else if ((((pHVar1->growth_threshold <= 0.1) || (0.9 <= pHVar1->growth_threshold)) ||
	0001f3ab:MOVSS XMM0,dword ptr [RAX + 0x8]
	0001f3b0:COMISS XMM0,dword ptr [RBP + -0xc]
	0001f3b4:JBE 0x0001f462
	0001f3ba:MOV RAX,qword ptr [RBP + -0x8]
	0001f3be:MOVSS XMM1,dword ptr [RAX + 0x8]
	0001f3c3:MOVSS XMM0,dword ptr [0x00034630]
	0001f3cb:SUBSS XMM0,dword ptr [RBP + -0xc]
	0001f3d0:COMISS XMM0,XMM1
	0001f3d3:JBE 0x0001f462
	0001f3d9:MOVSS XMM1,dword ptr [RBP + -0xc]
	0001f3de:MOVSS XMM0,dword ptr [0x00034630]
	0001f3e6:ADDSS XMM1,XMM0
	0001f3ea:MOV RAX,qword ptr [RBP + -0x8]
	0001f3ee:MOVSS XMM0,dword ptr [RAX + 0xc]
	0001f3f3:COMISS XMM0,XMM1
	0001f3f6:JBE 0x0001f462
	0001f3f8:MOV RAX,qword ptr [RBP + -0x8]
	0001f3fc:MOVSS XMM0,dword ptr [RAX]
	0001f400:PXOR XMM1,XMM1
	0001f404:COMISS XMM0,XMM1
	0001f407:JC 0x0001f462
	0001f409:MOV RAX,qword ptr [RBP + -0x8]
	0001f40d:MOVSS XMM0,dword ptr [RAX]
	0001f411:MOVAPS XMM1,XMM0
	0001f414:ADDSS XMM1,dword ptr [RBP + -0xc]
	0001f419:MOV RAX,qword ptr [RBP + -0x8]
	0001f41d:MOVSS XMM0,dword ptr [RAX + 0x4]
	0001f422:COMISS XMM0,XMM1
	0001f425:JBE 0x0001f462
	0001f427:MOV RAX,qword ptr [RBP + -0x8]
	0001f42b:MOVSS XMM1,dword ptr [RAX + 0x4]
	0001f430:MOVSS XMM0,dword ptr [0x00034630]
	0001f438:COMISS XMM0,XMM1
	0001f43b:JC 0x0001f462
	0001f43d:MOV RAX,qword ptr [RBP + -0x8]
	0001f441:MOVSS XMM0,dword ptr [RAX]
	0001f445:MOVAPS XMM1,XMM0
	0001f448:ADDSS XMM1,dword ptr [RBP + -0xc]
	0001f44d:MOV RAX,qword ptr [RBP + -0x8]
	0001f451:MOVSS XMM0,dword ptr [RAX + 0x8]
	0001f456:COMISS XMM0,XMM1
	0001f459:JBE 0x0001f462
END_OF_LINE
----------------------------------------------
16: (pHVar1->growth_factor <= 1.1)) ||
	0001f3ee:MOVSS XMM0,dword ptr [RAX + 0xc]
	0001f3f3:COMISS XMM0,XMM1
	0001f3f6:JBE 0x0001f462
END_OF_LINE
----------------------------------------------
17: (((pHVar1->shrink_threshold < 0.0 ||
	0001f3fc:MOVSS XMM0,dword ptr [RAX]
	0001f400:PXOR XMM1,XMM1
	0001f404:COMISS XMM0,XMM1
END_OF_LINE
----------------------------------------------
18: (pHVar1->shrink_factor <= pHVar1->shrink_threshold + 0.1)) ||
	0001f40d:MOVSS XMM0,dword ptr [RAX]
	0001f411:MOVAPS XMM1,XMM0
	0001f414:ADDSS XMM1,dword ptr [RBP + -0xc]
	0001f419:MOV RAX,qword ptr [RBP + -0x8]
	0001f41d:MOVSS XMM0,dword ptr [RAX + 0x4]
	0001f422:COMISS XMM0,XMM1
	0001f425:JBE 0x0001f462
END_OF_LINE
----------------------------------------------
19: ((1.0 < pHVar1->shrink_factor ||
	0001f42b:MOVSS XMM1,dword ptr [RAX + 0x4]
	0001f430:MOVSS XMM0,dword ptr [0x00034630]
	0001f438:COMISS XMM0,XMM1
END_OF_LINE
----------------------------------------------
20: (pHVar1->growth_threshold <= pHVar1->shrink_threshold + 0.1)))))) {
	0001f441:MOVSS XMM0,dword ptr [RAX]
	0001f445:MOVAPS XMM1,XMM0
	0001f448:ADDSS XMM1,dword ptr [RBP + -0xc]
	0001f44d:MOV RAX,qword ptr [RBP + -0x8]
	0001f451:MOVSS XMM0,dword ptr [RAX + 0x8]
	0001f456:COMISS XMM0,XMM1
	0001f459:JBE 0x0001f462
END_OF_LINE
----------------------------------------------
21: table->tuning = &default_tuning;
	0001f46d:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
22: _Var2 = false;
	0001f471:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
25: _Var2 = true;
	0001f45b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
27: return _Var2;
	0001f477:RET
END_OF_LINE



Function: compute_bucket_size
----------------------------------------------
11: candidate_local = candidate;
	0001f499:JZ 0x0001f544
END_OF_LINE
----------------------------------------------
12: if (tuning->is_n_buckets != true) {
	0001f490:MOVZX EAX,byte ptr [RAX + 0x10]
	0001f494:XOR EAX,0x1
	0001f497:TEST AL,AL
	0001f499:JZ 0x0001f544
END_OF_LINE
----------------------------------------------
13: if ((long)candidate < 0) {
	0001f4a3:TEST RAX,RAX
	0001f4a6:JS 0x0001f4b3
END_OF_LINE
----------------------------------------------
14: fVar2 = (float)(candidate >> 1 | (ulong)((uint)candidate & 1));
	0001f4b6:SHR RDX,0x1
	0001f4b9:AND EAX,0x1
	0001f4bc:OR RDX,RAX
	0001f4bf:PXOR XMM0,XMM0
	0001f4c3:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
15: fVar2 = fVar2 + fVar2;
	0001f4c8:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
18: fVar2 = (float)candidate;
	0001f4ac:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
20: fVar2 = fVar2 / tuning->growth_threshold;
	0001f4d0:MOVSS XMM1,dword ptr [RAX + 0x8]
	0001f4d5:DIVSS XMM0,XMM1
END_OF_LINE
----------------------------------------------
21: if (1.844674e+19 <= fVar2) {
	0001f4e3:COMISS XMM0,dword ptr [0x00034640]
	0001f4ea:JC 0x0001f4f6
END_OF_LINE
----------------------------------------------
22: return 0;
	0001f58f:LEAVE
	0001f590:RET
END_OF_LINE
----------------------------------------------
24: if (9.223372e+18 <= fVar2) {
	0001f4fb:COMISS XMM0,dword ptr [0x00034644]
	0001f502:JNC 0x0001f514
END_OF_LINE
----------------------------------------------
25: candidate_local = (long)(fVar2 - 9.223372e+18) ^ 0x8000000000000000;
	0001f521:SUBSS XMM0,XMM1
	0001f525:CVTTSS2SI RAX,XMM0
	0001f52a:MOV qword ptr [RBP + -0x18],RAX
	0001f52e:MOV RAX,-0x8000000000000000
	0001f538:XOR qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
28: candidate_local = (size_t)fVar2;
	0001f509:CVTTSS2SI RAX,XMM0
END_OF_LINE
----------------------------------------------
31: sVar1 = next_prime(candidate_local);
	0001f54b:CALL 0x0001f272
END_OF_LINE
----------------------------------------------
32: if ((long)(sVar1 << 3) < 0 || sVar1 >> 0x3d != 0) {
	0001f55d:SHL RDX,0x3
	0001f561:MOV RCX,qword ptr [RBP + -0x18]
	0001f565:SHR RCX,0x3d
	0001f569:TEST RCX,RCX
	0001f56c:JZ 0x0001f573
	0001f56e:MOV EAX,0x1
	0001f573:TEST RDX,RDX
	0001f576:JNS 0x0001f57d
	0001f578:MOV EAX,0x1
	0001f57d:AND EAX,0x1
	0001f580:TEST AL,AL
	0001f582:JZ 0x0001f58b
END_OF_LINE
----------------------------------------------
33: sVar1 = 0;
	0001f584:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
35: return sVar1;
	0001f590:RET
END_OF_LINE



Function: hash_initialize
----------------------------------------------
18: hasher_local = hasher;
	0001f5b6:JNZ 0x0001f5c3
END_OF_LINE
----------------------------------------------
19: if (hasher == (Hash_hasher)0x0) {
	0001f5b1:CMP qword ptr [RBP + -0x28],0x0
	0001f5b6:JNZ 0x0001f5c3
END_OF_LINE
----------------------------------------------
20: hasher_local = raw_hasher;
	0001f5bf:MOV qword ptr [RBP + -0x28],RAX
END_OF_LINE
----------------------------------------------
22: comparator_local = comparator;
	0001f5c8:JNZ 0x0001f5d5
END_OF_LINE
----------------------------------------------
23: if (comparator == (Hash_comparator)0x0) {
	0001f5c3:CMP qword ptr [RBP + -0x30],0x0
	0001f5c8:JNZ 0x0001f5d5
END_OF_LINE
----------------------------------------------
24: comparator_local = raw_comparator;
	0001f5d1:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
26: table_00 = (Hash_table *)malloc(0x50);
	0001f5da:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
27: if (table_00 != (Hash_table *)0x0) {
	0001f5e3:CMP qword ptr [RBP + -0x8],0x0
	0001f5e8:JNZ 0x0001f5f4
END_OF_LINE
----------------------------------------------
28: tuning_local = tuning;
	0001f5f9:JNZ 0x0001f606
END_OF_LINE
----------------------------------------------
29: if (tuning == (Hash_tuning *)0x0) {
	0001f5f4:CMP qword ptr [RBP + -0x20],0x0
	0001f5f9:JNZ 0x0001f606
END_OF_LINE
----------------------------------------------
30: tuning_local = &default_tuning;
	0001f602:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
32: table_00->tuning = tuning_local;
	0001f60e:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
33: _Var1 = check_tuning(table_00);
	0001f619:CALL 0x0001f36b
END_OF_LINE
----------------------------------------------
34: if (_Var1) {
	0001f623:JNZ 0x0001f6ec
END_OF_LINE
----------------------------------------------
35: sVar2 = compute_bucket_size(candidate,tuning_local);
	0001f637:CALL 0x0001f478
END_OF_LINE
----------------------------------------------
36: table_00->n_buckets = sVar2;
	0001f640:MOV qword ptr [RDX + 0x10],RAX
END_OF_LINE
----------------------------------------------
37: if (table_00->n_buckets != 0) {
	0001f648:MOV RAX,qword ptr [RAX + 0x10]
	0001f64c:TEST RAX,RAX
	0001f64f:JZ 0x0001f6ef
END_OF_LINE
----------------------------------------------
38: phVar3 = (hash_entry *)calloc(table_00->n_buckets,0x10);
	0001f659:MOV RAX,qword ptr [RAX + 0x10]
	0001f65d:MOV ESI,0x10
	0001f662:MOV RDI,RAX
	0001f665:CALL 0x00005cd0
END_OF_LINE
----------------------------------------------
39: table_00->bucket = phVar3;
	0001f671:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
40: if (table_00->bucket != (hash_entry *)0x0) {
	0001f678:MOV RAX,qword ptr [RAX]
	0001f67b:TEST RAX,RAX
	0001f67e:JZ 0x0001f6f2
END_OF_LINE
----------------------------------------------
41: table_00->bucket_limit = table_00->bucket + table_00->n_buckets;
	0001f684:MOV RDX,qword ptr [RAX]
	0001f687:MOV RAX,qword ptr [RBP + -0x8]
	0001f68b:MOV RAX,qword ptr [RAX + 0x10]
	0001f68f:SHL RAX,0x4
	0001f693:ADD RDX,RAX
	0001f696:MOV RAX,qword ptr [RBP + -0x8]
	0001f69a:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
42: table_00->n_buckets_used = 0;
	0001f6a2:MOV qword ptr [RAX + 0x18],0x0
END_OF_LINE
----------------------------------------------
43: table_00->n_entries = 0;
	0001f6ae:MOV qword ptr [RAX + 0x20],0x0
END_OF_LINE
----------------------------------------------
44: table_00->hasher = hasher_local;
	0001f6be:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
45: table_00->comparator = comparator_local;
	0001f6ca:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
46: table_00->data_freer = data_freer;
	0001f6d6:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
47: table_00->free_entry_list = (hash_entry *)0x0;
	0001f6de:MOV qword ptr [RAX + 0x48],0x0
END_OF_LINE
----------------------------------------------
48: return table_00;
	0001f704:LEAVE
	0001f705:RET
END_OF_LINE
----------------------------------------------
52: free(table_00);
	0001f6fa:CALL 0x00005860
END_OF_LINE
----------------------------------------------
54: return (Hash_table *)0x0;
	0001f704:LEAVE
	0001f705:RET
END_OF_LINE



Function: hash_clear
----------------------------------------------
11: for (bucket = table->bucket; bucket < table->bucket_limit; bucket = bucket + 1) {
	0001f71a:MOV RAX,qword ptr [RAX]
	0001f71d:MOV qword ptr [RBP + -0x18],RAX
	0001f721:JMP 0x0001f7e4
	0001f726:MOV RAX,qword ptr [RBP + -0x18]
	0001f72a:MOV RAX,qword ptr [RAX]
	0001f72d:TEST RAX,RAX
	0001f730:JZ 0x0001f7df
	0001f736:MOV RAX,qword ptr [RBP + -0x18]
	0001f73a:MOV RAX,qword ptr [RAX + 0x8]
	0001f73e:MOV qword ptr [RBP + -0x10],RAX
	0001f742:JMP 0x0001f7a0
	0001f744:MOV RAX,qword ptr [RBP + -0x28]
	0001f748:MOV RAX,qword ptr [RAX + 0x40]
	0001f74c:TEST RAX,RAX
	0001f74f:JZ 0x0001f765
	0001f751:MOV RAX,qword ptr [RBP + -0x28]
	0001f755:MOV RDX,qword ptr [RAX + 0x40]
	0001f759:MOV RAX,qword ptr [RBP + -0x10]
	0001f75d:MOV RAX,qword ptr [RAX]
	0001f760:MOV RDI,RAX
	0001f763:CALL RDX
	0001f765:MOV RAX,qword ptr [RBP + -0x10]
	0001f769:MOV qword ptr [RAX],0x0
	0001f770:MOV RAX,qword ptr [RBP + -0x10]
	0001f774:MOV RAX,qword ptr [RAX + 0x8]
	0001f778:MOV qword ptr [RBP + -0x8],RAX
	0001f77c:MOV RAX,qword ptr [RBP + -0x28]
	0001f780:MOV RDX,qword ptr [RAX + 0x48]
	0001f784:MOV RAX,qword ptr [RBP + -0x10]
	0001f788:MOV qword ptr [RAX + 0x8],RDX
	0001f78c:MOV RAX,qword ptr [RBP + -0x28]
	0001f790:MOV RDX,qword ptr [RBP + -0x10]
	0001f794:MOV qword ptr [RAX + 0x48],RDX
	0001f798:MOV RAX,qword ptr [RBP + -0x8]
	0001f79c:MOV qword ptr [RBP + -0x10],RAX
	0001f7a0:CMP qword ptr [RBP + -0x10],0x0
	0001f7a5:JNZ 0x0001f744
	0001f7a7:MOV RAX,qword ptr [RBP + -0x28]
	0001f7ab:MOV RAX,qword ptr [RAX + 0x40]
	0001f7af:TEST RAX,RAX
	0001f7b2:JZ 0x0001f7c8
	0001f7b4:MOV RAX,qword ptr [RBP + -0x28]
	0001f7b8:MOV RDX,qword ptr [RAX + 0x40]
	0001f7bc:MOV RAX,qword ptr [RBP + -0x18]
	0001f7c0:MOV RAX,qword ptr [RAX]
	0001f7c3:MOV RDI,RAX
	0001f7c6:CALL RDX
	0001f7c8:MOV RAX,qword ptr [RBP + -0x18]
	0001f7cc:MOV qword ptr [RAX],0x0
	0001f7d3:MOV RAX,qword ptr [RBP + -0x18]
	0001f7d7:MOV qword ptr [RAX + 0x8],0x0
	0001f7df:ADD qword ptr [RBP + -0x18],0x10
	0001f7e4:MOV RAX,qword ptr [RBP + -0x28]
	0001f7e8:MOV RAX,qword ptr [RAX + 0x8]
	0001f7ec:CMP qword ptr [RBP + -0x18],RAX
	0001f7f0:JC 0x0001f726
END_OF_LINE
----------------------------------------------
12: if (bucket->data != (void *)0x0) {
	0001f72a:MOV RAX,qword ptr [RAX]
	0001f72d:TEST RAX,RAX
	0001f730:JZ 0x0001f7df
END_OF_LINE
----------------------------------------------
13: cursor = bucket->next;
	0001f73a:MOV RAX,qword ptr [RAX + 0x8]
	0001f73e:MOV qword ptr [RBP + -0x10],RAX
	0001f742:JMP 0x0001f7a0
END_OF_LINE
----------------------------------------------
14: while (cursor != (hash_entry *)0x0) {
	0001f7a0:CMP qword ptr [RBP + -0x10],0x0
	0001f7a5:JNZ 0x0001f744
END_OF_LINE
----------------------------------------------
15: if (table->data_freer != (Hash_data_freer)0x0) {
	0001f748:MOV RAX,qword ptr [RAX + 0x40]
	0001f74c:TEST RAX,RAX
	0001f74f:JZ 0x0001f765
END_OF_LINE
----------------------------------------------
16: (*table->data_freer)(cursor->data);
	0001f755:MOV RDX,qword ptr [RAX + 0x40]
	0001f759:MOV RAX,qword ptr [RBP + -0x10]
	0001f75d:MOV RAX,qword ptr [RAX]
	0001f760:MOV RDI,RAX
	0001f763:CALL RDX
END_OF_LINE
----------------------------------------------
18: cursor->data = (void *)0x0;
	0001f769:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
19: phVar1 = cursor->next;
	0001f774:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
20: cursor->next = table->free_entry_list;
	0001f780:MOV RDX,qword ptr [RAX + 0x48]
	0001f784:MOV RAX,qword ptr [RBP + -0x10]
	0001f788:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
21: table->free_entry_list = cursor;
	0001f794:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
22: cursor = phVar1;
	0001f79c:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
24: if (table->data_freer != (Hash_data_freer)0x0) {
	0001f7ab:MOV RAX,qword ptr [RAX + 0x40]
	0001f7af:TEST RAX,RAX
	0001f7b2:JZ 0x0001f7c8
END_OF_LINE
----------------------------------------------
25: (*table->data_freer)(bucket->data);
	0001f7b8:MOV RDX,qword ptr [RAX + 0x40]
	0001f7bc:MOV RAX,qword ptr [RBP + -0x18]
	0001f7c0:MOV RAX,qword ptr [RAX]
	0001f7c3:MOV RDI,RAX
	0001f7c6:CALL RDX
END_OF_LINE
----------------------------------------------
27: bucket->data = (void *)0x0;
	0001f7cc:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
28: bucket->next = (hash_entry *)0x0;
	0001f7d7:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
31: table->n_buckets_used = 0;
	0001f7fa:MOV qword ptr [RAX + 0x18],0x0
END_OF_LINE
----------------------------------------------
32: table->n_entries = 0;
	0001f806:MOV qword ptr [RAX + 0x20],0x0
END_OF_LINE
----------------------------------------------
33: return;
	0001f810:RET
END_OF_LINE



Function: hash_free
----------------------------------------------
11: if ((table->data_freer != (Hash_data_freer)0x0) && (table->n_entries != 0)) {
	0001f825:MOV RAX,qword ptr [RAX + 0x40]
	0001f829:TEST RAX,RAX
	0001f82c:JZ 0x0001f898
	0001f82e:MOV RAX,qword ptr [RBP + -0x28]
	0001f832:MOV RAX,qword ptr [RAX + 0x20]
	0001f836:TEST RAX,RAX
	0001f839:JZ 0x0001f898
END_OF_LINE
----------------------------------------------
12: for (bucket = table->bucket; bucket < table->bucket_limit; bucket = bucket + 1) {
	0001f83f:MOV RAX,qword ptr [RAX]
	0001f842:MOV qword ptr [RBP + -0x18],RAX
	0001f846:JMP 0x0001f88a
	0001f848:MOV RAX,qword ptr [RBP + -0x18]
	0001f84c:MOV RAX,qword ptr [RAX]
	0001f84f:TEST RAX,RAX
	0001f852:JZ 0x0001f885
	0001f854:MOV RAX,qword ptr [RBP + -0x18]
	0001f858:MOV qword ptr [RBP + -0x10],RAX
	0001f85c:JMP 0x0001f87e
	0001f85e:MOV RAX,qword ptr [RBP + -0x28]
	0001f862:MOV RDX,qword ptr [RAX + 0x40]
	0001f866:MOV RAX,qword ptr [RBP + -0x10]
	0001f86a:MOV RAX,qword ptr [RAX]
	0001f86d:MOV RDI,RAX
	0001f870:CALL RDX
	0001f872:MOV RAX,qword ptr [RBP + -0x10]
	0001f876:MOV RAX,qword ptr [RAX + 0x8]
	0001f87a:MOV qword ptr [RBP + -0x10],RAX
	0001f87e:CMP qword ptr [RBP + -0x10],0x0
	0001f883:JNZ 0x0001f85e
	0001f885:ADD qword ptr [RBP + -0x18],0x10
	0001f88a:MOV RAX,qword ptr [RBP + -0x28]
	0001f88e:MOV RAX,qword ptr [RAX + 0x8]
	0001f892:CMP qword ptr [RBP + -0x18],RAX
	0001f896:JC 0x0001f848
END_OF_LINE
----------------------------------------------
13: if (bucket->data != (void *)0x0) {
	0001f84c:MOV RAX,qword ptr [RAX]
	0001f84f:TEST RAX,RAX
	0001f852:JZ 0x0001f885
END_OF_LINE
----------------------------------------------
14: for (cursor = bucket; cursor != (hash_entry *)0x0; cursor = cursor->next) {
	0001f858:MOV qword ptr [RBP + -0x10],RAX
	0001f85c:JMP 0x0001f87e
	0001f85e:MOV RAX,qword ptr [RBP + -0x28]
	0001f862:MOV RDX,qword ptr [RAX + 0x40]
	0001f866:MOV RAX,qword ptr [RBP + -0x10]
	0001f86a:MOV RAX,qword ptr [RAX]
	0001f86d:MOV RDI,RAX
	0001f870:CALL RDX
	0001f872:MOV RAX,qword ptr [RBP + -0x10]
	0001f876:MOV RAX,qword ptr [RAX + 0x8]
	0001f87a:MOV qword ptr [RBP + -0x10],RAX
	0001f87e:CMP qword ptr [RBP + -0x10],0x0
	0001f883:JNZ 0x0001f85e
END_OF_LINE
----------------------------------------------
15: (*table->data_freer)(cursor->data);
	0001f862:MOV RDX,qword ptr [RAX + 0x40]
	0001f866:MOV RAX,qword ptr [RBP + -0x10]
	0001f86a:MOV RAX,qword ptr [RAX]
	0001f86d:MOV RDI,RAX
	0001f870:CALL RDX
END_OF_LINE
----------------------------------------------
20: for (bucket = table->bucket; bucket < table->bucket_limit; bucket = bucket + 1) {
	0001f89c:MOV RAX,qword ptr [RAX]
	0001f89f:MOV qword ptr [RBP + -0x18],RAX
	0001f8a3:JMP 0x0001f8df
	0001f8a5:MOV RAX,qword ptr [RBP + -0x18]
	0001f8a9:MOV RAX,qword ptr [RAX + 0x8]
	0001f8ad:MOV qword ptr [RBP + -0x10],RAX
	0001f8b1:JMP 0x0001f8d3
	0001f8b3:MOV RAX,qword ptr [RBP + -0x10]
	0001f8b7:MOV RAX,qword ptr [RAX + 0x8]
	0001f8bb:MOV qword ptr [RBP + -0x8],RAX
	0001f8bf:MOV RAX,qword ptr [RBP + -0x10]
	0001f8c3:MOV RDI,RAX
	0001f8c6:CALL 0x00005860
	0001f8cb:MOV RAX,qword ptr [RBP + -0x8]
	0001f8cf:MOV qword ptr [RBP + -0x10],RAX
	0001f8d3:CMP qword ptr [RBP + -0x10],0x0
	0001f8d8:JNZ 0x0001f8b3
	0001f8da:ADD qword ptr [RBP + -0x18],0x10
	0001f8df:MOV RAX,qword ptr [RBP + -0x28]
	0001f8e3:MOV RAX,qword ptr [RAX + 0x8]
	0001f8e7:CMP qword ptr [RBP + -0x18],RAX
	0001f8eb:JC 0x0001f8a5
END_OF_LINE
----------------------------------------------
21: cursor = bucket->next;
	0001f8a9:MOV RAX,qword ptr [RAX + 0x8]
	0001f8ad:MOV qword ptr [RBP + -0x10],RAX
	0001f8b1:JMP 0x0001f8d3
END_OF_LINE
----------------------------------------------
22: while (cursor != (hash_entry *)0x0) {
	0001f8d3:CMP qword ptr [RBP + -0x10],0x0
	0001f8d8:JNZ 0x0001f8b3
END_OF_LINE
----------------------------------------------
23: phVar1 = cursor->next;
	0001f8b7:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
24: free(cursor);
	0001f8c6:CALL 0x00005860
END_OF_LINE
----------------------------------------------
25: cursor = phVar1;
	0001f8cf:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
28: cursor = table->free_entry_list;
	0001f8f1:MOV RAX,qword ptr [RAX + 0x48]
	0001f8f5:MOV qword ptr [RBP + -0x10],RAX
	0001f8f9:JMP 0x0001f91b
END_OF_LINE
----------------------------------------------
29: while (cursor != (hash_entry *)0x0) {
	0001f91b:CMP qword ptr [RBP + -0x10],0x0
	0001f920:JNZ 0x0001f8fb
END_OF_LINE
----------------------------------------------
30: phVar1 = cursor->next;
	0001f8ff:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
31: free(cursor);
	0001f90e:CALL 0x00005860
END_OF_LINE
----------------------------------------------
32: cursor = phVar1;
	0001f917:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
34: free(table->bucket);
	0001f926:MOV RAX,qword ptr [RAX]
	0001f929:MOV RDI,RAX
	0001f92c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
35: free(table);
	0001f938:CALL 0x00005860
END_OF_LINE
----------------------------------------------
36: return;
	0001f93f:RET
END_OF_LINE



Function: allocate_entry
----------------------------------------------
8: if (table->free_entry_list == (hash_entry *)0x0) {
	0001f954:MOV RAX,qword ptr [RAX + 0x48]
	0001f958:TEST RAX,RAX
	0001f95b:JZ 0x0001f97b
END_OF_LINE
----------------------------------------------
9: new = (hash_entry *)malloc(0x10);
	0001f980:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
12: new = table->free_entry_list;
	0001f961:MOV RAX,qword ptr [RAX + 0x48]
END_OF_LINE
----------------------------------------------
13: table->free_entry_list = new->next;
	0001f96d:MOV RDX,qword ptr [RAX + 0x8]
	0001f971:MOV RAX,qword ptr [RBP + -0x18]
	0001f975:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
15: return new;
	0001f989:MOV RAX,qword ptr [RBP + -0x8]
	0001f98d:LEAVE
	0001f98e:RET
END_OF_LINE



Function: free_entry
----------------------------------------------
8: entry->data = (void *)0x0;
	0001f9a3:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
9: entry->next = table->free_entry_list;
	0001f9ae:MOV RDX,qword ptr [RAX + 0x48]
	0001f9b2:MOV RAX,qword ptr [RBP + -0x10]
	0001f9b6:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
10: table->free_entry_list = entry;
	0001f9c2:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
11: return;
	0001f9c8:RET
END_OF_LINE



Function: hash_find_entry
----------------------------------------------
20: cursor = safe_hasher(table,entry);
	0001f9f4:CALL 0x0001ee81
END_OF_LINE
----------------------------------------------
21: *bucket_head = cursor;
	0001fa05:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
22: if (cursor->data == (void *)0x0) {
	0001fa0c:MOV RAX,qword ptr [RAX]
	0001fa0f:TEST RAX,RAX
	0001fa12:JNZ 0x0001fa1e
END_OF_LINE
----------------------------------------------
23: pvVar4 = (void *)0x0;
	0001fa14:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
25: else if ((entry == cursor->data) || (_Var3 = (*table->comparator)(entry,cursor->data), _Var3)) {
	0001fa22:MOV RAX,qword ptr [RAX]
	0001fa25:CMP qword ptr [RBP + -0x40],RAX
	0001fa29:JZ 0x0001fa4a
	0001fa2b:MOV RAX,qword ptr [RBP + -0x38]
	0001fa2f:MOV RCX,qword ptr [RAX + 0x38]
	0001fa33:MOV RAX,qword ptr [RBP + -0x28]
	0001fa37:MOV RDX,qword ptr [RAX]
	0001fa3a:MOV RAX,qword ptr [RBP + -0x40]
	0001fa3e:MOV RSI,RDX
	0001fa41:MOV RDI,RAX
	0001fa44:CALL RCX
	0001fa46:TEST AL,AL
	0001fa48:JZ 0x0001fab3
END_OF_LINE
----------------------------------------------
26: pvVar4 = cursor->data;
	0001fa4e:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
27: if (delete) {
	0001fa59:JZ 0x0001faaa
END_OF_LINE
----------------------------------------------
28: if (cursor->next == (hash_entry *)0x0) {
	0001fa5f:MOV RAX,qword ptr [RAX + 0x8]
	0001fa63:TEST RAX,RAX
	0001fa66:JZ 0x0001fa9f
END_OF_LINE
----------------------------------------------
29: cursor->data = (void *)0x0;
	0001faa3:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
32: phVar1 = cursor->next;
	0001fa6c:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
33: phVar2 = phVar1->next;
	0001fa7c:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
34: cursor->data = phVar1->data;
	0001fa80:MOV RAX,qword ptr [RAX]
	0001fa83:MOV qword ptr [RCX],RAX
END_OF_LINE
----------------------------------------------
35: cursor->next = phVar2;
	0001fa86:MOV qword ptr [RCX + 0x8],RDX
END_OF_LINE
----------------------------------------------
36: free_entry(table,phVar1);
	0001fa98:CALL 0x0001f98f
END_OF_LINE
----------------------------------------------
41: for (; cursor->next != (hash_entry *)0x0; cursor = cursor->next) {
	0001fb42:MOV RAX,qword ptr [RAX + 0x8]
	0001fb46:MOV qword ptr [RBP + -0x30],RAX
	0001fb4a:MOV RAX,qword ptr [RBP + -0x30]
	0001fb4e:MOV RAX,qword ptr [RAX + 0x8]
	0001fb52:TEST RAX,RAX
	0001fb55:JNZ 0x0001fac0
END_OF_LINE
----------------------------------------------
42: if ((entry == cursor->next->data) ||
	0001fac4:MOV RAX,qword ptr [RAX + 0x8]
	0001fac8:MOV RAX,qword ptr [RAX]
	0001facb:CMP qword ptr [RBP + -0x40],RAX
	0001facf:JZ 0x0001faf4
	0001fad1:MOV RAX,qword ptr [RBP + -0x38]
	0001fad5:MOV RCX,qword ptr [RAX + 0x38]
	0001fad9:MOV RAX,qword ptr [RBP + -0x30]
	0001fadd:MOV RAX,qword ptr [RAX + 0x8]
	0001fae1:MOV RDX,qword ptr [RAX]
	0001fae4:MOV RAX,qword ptr [RBP + -0x40]
	0001fae8:MOV RSI,RDX
	0001faeb:MOV RDI,RAX
	0001faee:CALL RCX
	0001faf0:TEST AL,AL
	0001faf2:JZ 0x0001fb3e
END_OF_LINE
----------------------------------------------
43: (_Var3 = (*table->comparator)(entry,cursor->next->data), _Var3)) {
	0001fad5:MOV RCX,qword ptr [RAX + 0x38]
	0001fad9:MOV RAX,qword ptr [RBP + -0x30]
	0001fadd:MOV RAX,qword ptr [RAX + 0x8]
	0001fae1:MOV RDX,qword ptr [RAX]
	0001fae4:MOV RAX,qword ptr [RBP + -0x40]
	0001fae8:MOV RSI,RDX
	0001faeb:MOV RDI,RAX
	0001faee:CALL RCX
	0001faf0:TEST AL,AL
	0001faf2:JZ 0x0001fb3e
END_OF_LINE
----------------------------------------------
44: pvVar4 = cursor->next->data;
	0001faf8:MOV RAX,qword ptr [RAX + 0x8]
	0001fafc:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
45: if (!delete) {
	0001fb07:JZ 0x0001fb38
END_OF_LINE
----------------------------------------------
46: return pvVar4;
	0001fb60:LEAVE
	0001fb61:RET
END_OF_LINE
----------------------------------------------
48: phVar1 = cursor->next;
	0001fb0d:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
49: cursor->next = phVar1->next;
	0001fb19:MOV RDX,qword ptr [RAX + 0x8]
	0001fb1d:MOV RAX,qword ptr [RBP + -0x30]
	0001fb21:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
50: free_entry(table,phVar1);
	0001fb33:CALL 0x0001f98f
END_OF_LINE
----------------------------------------------
51: return pvVar4;
	0001fb60:LEAVE
	0001fb61:RET
END_OF_LINE
----------------------------------------------
54: pvVar4 = (void *)0x0;
	0001fb5b:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
56: return pvVar4;
	0001fb61:RET
END_OF_LINE



Function: transfer_entries
----------------------------------------------
18: bucket = src->bucket;
	0001fb7f:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
20: if (src->bucket_limit <= bucket) {
	0001fd21:MOV RAX,qword ptr [RAX + 0x8]
	0001fd25:CMP qword ptr [RBP + -0x30],RAX
	0001fd29:JC 0x0001fb8b
END_OF_LINE
----------------------------------------------
21: return true;
	0001fd35:RET
END_OF_LINE
----------------------------------------------
23: if (bucket->data != (void *)0x0) {
	0001fb8f:MOV RAX,qword ptr [RAX]
	0001fb92:TEST RAX,RAX
	0001fb95:JZ 0x0001fd18
END_OF_LINE
----------------------------------------------
24: cursor = bucket->next;
	0001fb9f:MOV RAX,qword ptr [RAX + 0x8]
	0001fba3:MOV qword ptr [RBP + -0x28],RAX
	0001fba7:JMP 0x0001fc3e
END_OF_LINE
----------------------------------------------
25: while (cursor != (hash_entry *)0x0) {
	0001fc3e:CMP qword ptr [RBP + -0x28],0x0
	0001fc43:JNZ 0x0001fbac
END_OF_LINE
----------------------------------------------
26: pvVar1 = cursor->data;
	0001fbb0:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
27: phVar3 = safe_hasher(dst,pvVar1);
	0001fbc5:CALL 0x0001ee81
END_OF_LINE
----------------------------------------------
28: phVar2 = cursor->next;
	0001fbd2:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
29: if (phVar3->data == (void *)0x0) {
	0001fbde:MOV RAX,qword ptr [RAX]
	0001fbe1:TEST RAX,RAX
	0001fbe4:JZ 0x0001fc04
END_OF_LINE
----------------------------------------------
30: phVar3->data = pvVar1;
	0001fc0c:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
31: dst->n_buckets_used = dst->n_buckets_used + 1;
	0001fc13:MOV RAX,qword ptr [RAX + 0x18]
	0001fc17:LEA RDX,[RAX + 0x1]
	0001fc1b:MOV RAX,qword ptr [RBP + -0x38]
	0001fc1f:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
32: free_entry(dst,cursor);
	0001fc31:CALL 0x0001f98f
END_OF_LINE
----------------------------------------------
33: cursor = phVar2;
	0001fc31:CALL 0x0001f98f
END_OF_LINE
----------------------------------------------
36: cursor->next = phVar3->next;
	0001fbea:MOV RDX,qword ptr [RAX + 0x8]
	0001fbee:MOV RAX,qword ptr [RBP + -0x28]
	0001fbf2:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
37: phVar3->next = cursor;
	0001fbfe:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
38: cursor = phVar2;
	0001fc02:JMP 0x0001fc36
END_OF_LINE
----------------------------------------------
41: pvVar1 = bucket->data;
	0001fc4d:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
42: bucket->next = (hash_entry *)0x0;
	0001fc58:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
43: if (!safe) {
	0001fc60:CMP byte ptr [RBP + -0x44],0x0
	0001fc64:JNZ 0x0001fd17
END_OF_LINE
----------------------------------------------
44: phVar2 = safe_hasher(dst,pvVar1);
	0001fc78:CALL 0x0001ee81
END_OF_LINE
----------------------------------------------
45: if (phVar2->data == (void *)0x0) {
	0001fc85:MOV RAX,qword ptr [RAX]
	0001fc88:TEST RAX,RAX
	0001fc8b:JZ 0x0001fcd7
END_OF_LINE
----------------------------------------------
46: phVar2->data = pvVar1;
	0001fcdf:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
47: dst->n_buckets_used = dst->n_buckets_used + 1;
	0001fce6:MOV RAX,qword ptr [RAX + 0x18]
	0001fcea:LEA RDX,[RAX + 0x1]
	0001fcee:MOV RAX,qword ptr [RBP + -0x38]
	0001fcf2:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
50: phVar3 = allocate_entry(dst);
	0001fc94:CALL 0x0001f940
END_OF_LINE
----------------------------------------------
51: if (phVar3 == (hash_entry *)0x0) {
	0001fc9d:CMP qword ptr [RBP + -0x10],0x0
	0001fca2:JNZ 0x0001fcae
END_OF_LINE
----------------------------------------------
52: return false;
	0001fd35:RET
END_OF_LINE
----------------------------------------------
54: phVar3->data = pvVar1;
	0001fcb6:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
55: phVar3->next = phVar2->next;
	0001fcbd:MOV RDX,qword ptr [RAX + 0x8]
	0001fcc1:MOV RAX,qword ptr [RBP + -0x10]
	0001fcc5:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
56: phVar2->next = phVar3;
	0001fcd1:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
58: bucket->data = (void *)0x0;
	0001fcfa:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
59: src->n_buckets_used = src->n_buckets_used - 1;
	0001fd05:MOV RAX,qword ptr [RAX + 0x18]
	0001fd09:LEA RDX,[RAX + -0x1]
	0001fd0d:MOV RAX,qword ptr [RBP + -0x40]
	0001fd11:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
62: bucket = bucket + 1;
	0001fd18:ADD qword ptr [RBP + -0x30],0x10
END_OF_LINE
----------------------------------------------
63: } while( true );
	0001fd18:ADD qword ptr [RBP + -0x30],0x10
END_OF_LINE



Function: hash_rehash
----------------------------------------------
15: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0001fd4a:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
16: __nmemb = compute_bucket_size(candidate,table->tuning);
	0001fd5d:MOV RDX,qword ptr [RAX + 0x28]
	0001fd61:MOV RAX,qword ptr [RBP + -0x80]
	0001fd65:MOV RSI,RDX
	0001fd68:MOV RDI,RAX
	0001fd6b:CALL 0x0001f478
END_OF_LINE
----------------------------------------------
17: if (__nmemb == 0) {
	0001fd74:CMP qword ptr [RBP + -0x70],0x0
	0001fd79:JNZ 0x0001fd85
END_OF_LINE
----------------------------------------------
18: _Var2 = false;
	0001fd7b:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
20: else if (__nmemb == table->n_buckets) {
	0001fd89:MOV RAX,qword ptr [RAX + 0x10]
	0001fd8d:CMP qword ptr [RBP + -0x70],RAX
	0001fd91:JNZ 0x0001fd9d
END_OF_LINE
----------------------------------------------
21: _Var2 = true;
	0001fd93:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
24: storage.bucket = (hash_entry *)calloc(__nmemb,0x10);
	0001fdb1:CALL 0x00005cd0
END_OF_LINE
----------------------------------------------
25: if (storage.bucket == (hash_entry *)0x0) {
	0001fdc7:TEST RAX,RAX
	0001fdca:JNZ 0x0001fdd6
END_OF_LINE
----------------------------------------------
26: _Var2 = false;
	0001fdcc:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
29: storage.bucket_limit = storage.bucket + __nmemb;
	0001fdf1:ADD RDX,RAX
END_OF_LINE
----------------------------------------------
30: storage.n_buckets_used = 0;
	0001fe00:MOV qword ptr [RAX + 0x18],0x0
END_OF_LINE
----------------------------------------------
31: storage.n_entries = 0;
	0001fe0c:MOV qword ptr [RAX + 0x20],0x0
END_OF_LINE
----------------------------------------------
32: storage.tuning = table->tuning;
	0001fe18:MOV RDX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
33: storage.hasher = table->hasher;
	0001fe28:MOV RDX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
34: storage.comparator = table->comparator;
	0001fe38:MOV RDX,qword ptr [RAX + 0x38]
END_OF_LINE
----------------------------------------------
35: storage.data_freer = table->data_freer;
	0001fe48:MOV RDX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
36: storage.free_entry_list = table->free_entry_list;
	0001fe58:MOV RDX,qword ptr [RAX + 0x48]
END_OF_LINE
----------------------------------------------
37: storage.n_buckets = __nmemb;
	0001fe77:CALL 0x0001fb62
END_OF_LINE
----------------------------------------------
38: _Var2 = transfer_entries(&storage,table,false);
	0001fd9d:LEA RAX,[RBP + -0x60]
	0001fda1:MOV qword ptr [RBP + -0x68],RAX
	0001fda5:MOV RAX,qword ptr [RBP + -0x70]
	0001fda9:MOV ESI,0x10
	0001fdae:MOV RDI,RAX
	0001fdb1:CALL 0x00005cd0
	0001fdb6:MOV RDX,RAX
	0001fdb9:MOV RAX,qword ptr [RBP + -0x68]
	0001fdbd:MOV qword ptr [RAX],RDX
	0001fdc0:MOV RAX,qword ptr [RBP + -0x68]
	0001fdc4:MOV RAX,qword ptr [RAX]
	0001fdc7:TEST RAX,RAX
	0001fdca:JNZ 0x0001fdd6
	0001fdcc:MOV EAX,0x0
	0001fdd1:JMP 0x0001ff4b
	0001fdd6:MOV RAX,qword ptr [RBP + -0x68]
	0001fdda:MOV RDX,qword ptr [RBP + -0x70]
	0001fdde:MOV qword ptr [RAX + 0x10],RDX
	0001fde2:MOV RAX,qword ptr [RBP + -0x68]
	0001fde6:MOV RDX,qword ptr [RAX]
	0001fde9:MOV RAX,qword ptr [RBP + -0x70]
	0001fded:SHL RAX,0x4
	0001fdf1:ADD RDX,RAX
	0001fdf4:MOV RAX,qword ptr [RBP + -0x68]
	0001fdf8:MOV qword ptr [RAX + 0x8],RDX
	0001fdfc:MOV RAX,qword ptr [RBP + -0x68]
	0001fe00:MOV qword ptr [RAX + 0x18],0x0
	0001fe08:MOV RAX,qword ptr [RBP + -0x68]
	0001fe0c:MOV qword ptr [RAX + 0x20],0x0
	0001fe14:MOV RAX,qword ptr [RBP + -0x78]
	0001fe18:MOV RDX,qword ptr [RAX + 0x28]
	0001fe1c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe20:MOV qword ptr [RAX + 0x28],RDX
	0001fe24:MOV RAX,qword ptr [RBP + -0x78]
	0001fe28:MOV RDX,qword ptr [RAX + 0x30]
	0001fe2c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe30:MOV qword ptr [RAX + 0x30],RDX
	0001fe34:MOV RAX,qword ptr [RBP + -0x78]
	0001fe38:MOV RDX,qword ptr [RAX + 0x38]
	0001fe3c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe40:MOV qword ptr [RAX + 0x38],RDX
	0001fe44:MOV RAX,qword ptr [RBP + -0x78]
	0001fe48:MOV RDX,qword ptr [RAX + 0x40]
	0001fe4c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe50:MOV qword ptr [RAX + 0x40],RDX
	0001fe54:MOV RAX,qword ptr [RBP + -0x78]
	0001fe58:MOV RDX,qword ptr [RAX + 0x48]
	0001fe5c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe60:MOV qword ptr [RAX + 0x48],RDX
	0001fe64:MOV RCX,qword ptr [RBP + -0x78]
	0001fe68:MOV RAX,qword ptr [RBP + -0x68]
	0001fe6c:MOV EDX,0x0
	0001fe71:MOV RSI,RCX
	0001fe74:MOV RDI,RAX
	0001fe77:CALL 0x0001fb62
END_OF_LINE
----------------------------------------------
39: if (!_Var2) {
	0001fe7c:TEST AL,AL
	0001fe7e:JZ 0x0001fee4
END_OF_LINE
----------------------------------------------
40: table->free_entry_list = storage.free_entry_list;
	0001fef0:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
41: _Var2 = transfer_entries(table,&storage,true);
	0001fd9d:LEA RAX,[RBP + -0x60]
	0001fda1:MOV qword ptr [RBP + -0x68],RAX
	0001fda5:MOV RAX,qword ptr [RBP + -0x70]
	0001fda9:MOV ESI,0x10
	0001fdae:MOV RDI,RAX
	0001fdb1:CALL 0x00005cd0
	0001fdb6:MOV RDX,RAX
	0001fdb9:MOV RAX,qword ptr [RBP + -0x68]
	0001fdbd:MOV qword ptr [RAX],RDX
	0001fdc0:MOV RAX,qword ptr [RBP + -0x68]
	0001fdc4:MOV RAX,qword ptr [RAX]
	0001fdc7:TEST RAX,RAX
	0001fdca:JNZ 0x0001fdd6
	0001fdcc:MOV EAX,0x0
	0001fdd1:JMP 0x0001ff4b
	0001fdd6:MOV RAX,qword ptr [RBP + -0x68]
	0001fdda:MOV RDX,qword ptr [RBP + -0x70]
	0001fdde:MOV qword ptr [RAX + 0x10],RDX
	0001fde2:MOV RAX,qword ptr [RBP + -0x68]
	0001fde6:MOV RDX,qword ptr [RAX]
	0001fde9:MOV RAX,qword ptr [RBP + -0x70]
	0001fded:SHL RAX,0x4
	0001fdf1:ADD RDX,RAX
	0001fdf4:MOV RAX,qword ptr [RBP + -0x68]
	0001fdf8:MOV qword ptr [RAX + 0x8],RDX
	0001fdfc:MOV RAX,qword ptr [RBP + -0x68]
	0001fe00:MOV qword ptr [RAX + 0x18],0x0
	0001fe08:MOV RAX,qword ptr [RBP + -0x68]
	0001fe0c:MOV qword ptr [RAX + 0x20],0x0
	0001fe14:MOV RAX,qword ptr [RBP + -0x78]
	0001fe18:MOV RDX,qword ptr [RAX + 0x28]
	0001fe1c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe20:MOV qword ptr [RAX + 0x28],RDX
	0001fe24:MOV RAX,qword ptr [RBP + -0x78]
	0001fe28:MOV RDX,qword ptr [RAX + 0x30]
	0001fe2c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe30:MOV qword ptr [RAX + 0x30],RDX
	0001fe34:MOV RAX,qword ptr [RBP + -0x78]
	0001fe38:MOV RDX,qword ptr [RAX + 0x38]
	0001fe3c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe40:MOV qword ptr [RAX + 0x38],RDX
	0001fe44:MOV RAX,qword ptr [RBP + -0x78]
	0001fe48:MOV RDX,qword ptr [RAX + 0x40]
	0001fe4c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe50:MOV qword ptr [RAX + 0x40],RDX
	0001fe54:MOV RAX,qword ptr [RBP + -0x78]
	0001fe58:MOV RDX,qword ptr [RAX + 0x48]
	0001fe5c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe60:MOV qword ptr [RAX + 0x48],RDX
	0001fe64:MOV RCX,qword ptr [RBP + -0x78]
	0001fe68:MOV RAX,qword ptr [RBP + -0x68]
	0001fe6c:MOV EDX,0x0
	0001fe71:MOV RSI,RCX
	0001fe74:MOV RDI,RAX
	0001fe77:CALL 0x0001fb62
	0001fe7c:TEST AL,AL
	0001fe7e:JZ 0x0001fee4
	0001fe80:MOV RAX,qword ptr [RBP + -0x78]
	0001fe84:MOV RAX,qword ptr [RAX]
	0001fe87:MOV RDI,RAX
	0001fe8a:CALL 0x00005860
	0001fe8f:MOV RAX,qword ptr [RBP + -0x68]
	0001fe93:MOV RDX,qword ptr [RAX]
	0001fe96:MOV RAX,qword ptr [RBP + -0x78]
	0001fe9a:MOV qword ptr [RAX],RDX
	0001fe9d:MOV RAX,qword ptr [RBP + -0x68]
	0001fea1:MOV RDX,qword ptr [RAX + 0x8]
	0001fea5:MOV RAX,qword ptr [RBP + -0x78]
	0001fea9:MOV qword ptr [RAX + 0x8],RDX
	0001fead:MOV RAX,qword ptr [RBP + -0x68]
	0001feb1:MOV RDX,qword ptr [RAX + 0x10]
	0001feb5:MOV RAX,qword ptr [RBP + -0x78]
	0001feb9:MOV qword ptr [RAX + 0x10],RDX
	0001febd:MOV RAX,qword ptr [RBP + -0x68]
	0001fec1:MOV RDX,qword ptr [RAX + 0x18]
	0001fec5:MOV RAX,qword ptr [RBP + -0x78]
	0001fec9:MOV qword ptr [RAX + 0x18],RDX
	0001fecd:MOV RAX,qword ptr [RBP + -0x68]
	0001fed1:MOV RDX,qword ptr [RAX + 0x48]
	0001fed5:MOV RAX,qword ptr [RBP + -0x78]
	0001fed9:MOV qword ptr [RAX + 0x48],RDX
	0001fedd:MOV EAX,0x1
	0001fee2:JMP 0x0001ff4b
	0001fee4:MOV RAX,qword ptr [RBP + -0x68]
	0001fee8:MOV RDX,qword ptr [RAX + 0x48]
	0001feec:MOV RAX,qword ptr [RBP + -0x78]
	0001fef0:MOV qword ptr [RAX + 0x48],RDX
	0001fef4:MOV RCX,qword ptr [RBP + -0x68]
	0001fef8:MOV RAX,qword ptr [RBP + -0x78]
	0001fefc:MOV EDX,0x1
	0001ff01:MOV RSI,RCX
	0001ff04:MOV RDI,RAX
	0001ff07:CALL 0x0001fb62
END_OF_LINE
----------------------------------------------
42: if (_Var2) {
	0001ff11:JNZ 0x0001ff32
END_OF_LINE
----------------------------------------------
43: _Var2 = transfer_entries(table,&storage,false);
	0001fd9d:LEA RAX,[RBP + -0x60]
	0001fda1:MOV qword ptr [RBP + -0x68],RAX
	0001fda5:MOV RAX,qword ptr [RBP + -0x70]
	0001fda9:MOV ESI,0x10
	0001fdae:MOV RDI,RAX
	0001fdb1:CALL 0x00005cd0
	0001fdb6:MOV RDX,RAX
	0001fdb9:MOV RAX,qword ptr [RBP + -0x68]
	0001fdbd:MOV qword ptr [RAX],RDX
	0001fdc0:MOV RAX,qword ptr [RBP + -0x68]
	0001fdc4:MOV RAX,qword ptr [RAX]
	0001fdc7:TEST RAX,RAX
	0001fdca:JNZ 0x0001fdd6
	0001fdcc:MOV EAX,0x0
	0001fdd1:JMP 0x0001ff4b
	0001fdd6:MOV RAX,qword ptr [RBP + -0x68]
	0001fdda:MOV RDX,qword ptr [RBP + -0x70]
	0001fdde:MOV qword ptr [RAX + 0x10],RDX
	0001fde2:MOV RAX,qword ptr [RBP + -0x68]
	0001fde6:MOV RDX,qword ptr [RAX]
	0001fde9:MOV RAX,qword ptr [RBP + -0x70]
	0001fded:SHL RAX,0x4
	0001fdf1:ADD RDX,RAX
	0001fdf4:MOV RAX,qword ptr [RBP + -0x68]
	0001fdf8:MOV qword ptr [RAX + 0x8],RDX
	0001fdfc:MOV RAX,qword ptr [RBP + -0x68]
	0001fe00:MOV qword ptr [RAX + 0x18],0x0
	0001fe08:MOV RAX,qword ptr [RBP + -0x68]
	0001fe0c:MOV qword ptr [RAX + 0x20],0x0
	0001fe14:MOV RAX,qword ptr [RBP + -0x78]
	0001fe18:MOV RDX,qword ptr [RAX + 0x28]
	0001fe1c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe20:MOV qword ptr [RAX + 0x28],RDX
	0001fe24:MOV RAX,qword ptr [RBP + -0x78]
	0001fe28:MOV RDX,qword ptr [RAX + 0x30]
	0001fe2c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe30:MOV qword ptr [RAX + 0x30],RDX
	0001fe34:MOV RAX,qword ptr [RBP + -0x78]
	0001fe38:MOV RDX,qword ptr [RAX + 0x38]
	0001fe3c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe40:MOV qword ptr [RAX + 0x38],RDX
	0001fe44:MOV RAX,qword ptr [RBP + -0x78]
	0001fe48:MOV RDX,qword ptr [RAX + 0x40]
	0001fe4c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe50:MOV qword ptr [RAX + 0x40],RDX
	0001fe54:MOV RAX,qword ptr [RBP + -0x78]
	0001fe58:MOV RDX,qword ptr [RAX + 0x48]
	0001fe5c:MOV RAX,qword ptr [RBP + -0x68]
	0001fe60:MOV qword ptr [RAX + 0x48],RDX
	0001fe64:MOV RCX,qword ptr [RBP + -0x78]
	0001fe68:MOV RAX,qword ptr [RBP + -0x68]
	0001fe6c:MOV EDX,0x0
	0001fe71:MOV RSI,RCX
	0001fe74:MOV RDI,RAX
	0001fe77:CALL 0x0001fb62
	0001fe7c:TEST AL,AL
	0001fe7e:JZ 0x0001fee4
	0001fe80:MOV RAX,qword ptr [RBP + -0x78]
	0001fe84:MOV RAX,qword ptr [RAX]
	0001fe87:MOV RDI,RAX
	0001fe8a:CALL 0x00005860
	0001fe8f:MOV RAX,qword ptr [RBP + -0x68]
	0001fe93:MOV RDX,qword ptr [RAX]
	0001fe96:MOV RAX,qword ptr [RBP + -0x78]
	0001fe9a:MOV qword ptr [RAX],RDX
	0001fe9d:MOV RAX,qword ptr [RBP + -0x68]
	0001fea1:MOV RDX,qword ptr [RAX + 0x8]
	0001fea5:MOV RAX,qword ptr [RBP + -0x78]
	0001fea9:MOV qword ptr [RAX + 0x8],RDX
	0001fead:MOV RAX,qword ptr [RBP + -0x68]
	0001feb1:MOV RDX,qword ptr [RAX + 0x10]
	0001feb5:MOV RAX,qword ptr [RBP + -0x78]
	0001feb9:MOV qword ptr [RAX + 0x10],RDX
	0001febd:MOV RAX,qword ptr [RBP + -0x68]
	0001fec1:MOV RDX,qword ptr [RAX + 0x18]
	0001fec5:MOV RAX,qword ptr [RBP + -0x78]
	0001fec9:MOV qword ptr [RAX + 0x18],RDX
	0001fecd:MOV RAX,qword ptr [RBP + -0x68]
	0001fed1:MOV RDX,qword ptr [RAX + 0x48]
	0001fed5:MOV RAX,qword ptr [RBP + -0x78]
	0001fed9:MOV qword ptr [RAX + 0x48],RDX
	0001fedd:MOV EAX,0x1
	0001fee2:JMP 0x0001ff4b
	0001fee4:MOV RAX,qword ptr [RBP + -0x68]
	0001fee8:MOV RDX,qword ptr [RAX + 0x48]
	0001feec:MOV RAX,qword ptr [RBP + -0x78]
	0001fef0:MOV qword ptr [RAX + 0x48],RDX
	0001fef4:MOV RCX,qword ptr [RBP + -0x68]
	0001fef8:MOV RAX,qword ptr [RBP + -0x78]
	0001fefc:MOV EDX,0x1
	0001ff01:MOV RSI,RCX
	0001ff04:MOV RDI,RAX
	0001ff07:CALL 0x0001fb62
	0001ff0c:XOR EAX,0x1
	0001ff0f:TEST AL,AL
	0001ff11:JNZ 0x0001ff32
	0001ff13:MOV RCX,qword ptr [RBP + -0x68]
	0001ff17:MOV RAX,qword ptr [RBP + -0x78]
	0001ff1b:MOV EDX,0x0
	0001ff20:MOV RSI,RCX
	0001ff23:MOV RDI,RAX
	0001ff26:CALL 0x0001fb62
END_OF_LINE
----------------------------------------------
44: if (_Var2) {
	0001ff30:JZ 0x0001ff37
END_OF_LINE
----------------------------------------------
45: free(storage.bucket);
	0001ff41:CALL 0x00005860
END_OF_LINE
----------------------------------------------
46: _Var2 = false;
	0001ff46:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
47: goto LAB_0001ff4b;
	0001ff4b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
51: abort();
	0001ff32:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
53: free(table->bucket);
	0001fe84:MOV RAX,qword ptr [RAX]
	0001fe87:MOV RDI,RAX
	0001fe8a:CALL 0x00005860
END_OF_LINE
----------------------------------------------
54: table->bucket = storage.bucket;
	0001fe9a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
55: table->bucket_limit = storage.bucket_limit;
	0001fea9:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
56: table->n_buckets = storage.n_buckets;
	0001feb9:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
57: table->n_buckets_used = storage.n_buckets_used;
	0001fec9:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
58: table->free_entry_list = storage.free_entry_list;
	0001fed9:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
59: _Var2 = true;
	0001fedd:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
62: LAB_0001ff4b:
	0001ff4b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
63: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0001ff4f:SUB RDX,qword ptr FS:[0x28]
	0001ff58:JZ 0x0001ff5f
END_OF_LINE
----------------------------------------------
65: __stack_chk_fail();
	0001ff5a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
67: return _Var2;
	0001ff60:RET
END_OF_LINE



Function: hash_insert_if_absent
----------------------------------------------
23: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0001ff79:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
24: if (entry == (void *)0x0) {
	0001ff88:CMP qword ptr [RBP + -0x40],0x0
	0001ff8d:JNZ 0x0001ff94
END_OF_LINE
----------------------------------------------
26: abort();
	0001ff8f:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
28: data = hash_find_entry(table,entry,&bucket,false);
	0001ff94:LEA RDX,[RBP + -0x28]
	0001ff98:MOV RSI,qword ptr [RBP + -0x40]
	0001ff9c:MOV RAX,qword ptr [RBP + -0x38]
	0001ffa0:MOV ECX,0x0
	0001ffa5:MOV RDI,RAX
	0001ffa8:CALL 0x0001f9c9
END_OF_LINE
----------------------------------------------
29: if (data != (void *)0x0) {
	0001ffb1:CMP qword ptr [RBP + -0x20],0x0
	0001ffb6:JZ 0x0001ffd4
END_OF_LINE
----------------------------------------------
30: if (matched_ent != (void **)0x0) {
	0001ffb8:CMP qword ptr [RBP + -0x48],0x0
	0001ffbd:JZ 0x0001ffca
END_OF_LINE
----------------------------------------------
31: *matched_ent = data;
	0001ffc7:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
33: iVar3 = 0;
	0001ffca:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
34: goto LAB_000202bc;
	000202bc:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
36: uVar1 = table->n_buckets_used;
	0001ffd8:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
37: if ((long)uVar1 < 0) {
	0001ffdc:TEST RAX,RAX
	0001ffdf:JS 0x0001ffec
END_OF_LINE
----------------------------------------------
38: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	0001ffef:SHR RDX,0x1
	0001fff2:AND EAX,0x1
	0001fff5:OR RDX,RAX
	0001fff8:PXOR XMM0,XMM0
	0001fffc:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
39: fVar5 = fVar5 + fVar5;
	00020001:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
42: fVar5 = (float)uVar1;
	0001ffe5:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
44: uVar1 = table->n_buckets;
	00020016:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
45: if ((long)uVar1 < 0) {
	0002001a:TEST RAX,RAX
	0002001d:JS 0x0002002a
END_OF_LINE
----------------------------------------------
46: fVar6 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	0002002d:SHR RDX,0x1
	00020030:AND EAX,0x1
	00020033:OR RDX,RAX
	00020036:PXOR XMM1,XMM1
	0002003a:CVTSI2SS XMM1,RDX
END_OF_LINE
----------------------------------------------
47: fVar6 = fVar6 + fVar6;
	0002003f:ADDSS XMM1,XMM1
END_OF_LINE
----------------------------------------------
50: fVar6 = (float)uVar1;
	00020023:CVTSI2SS XMM1,RAX
END_OF_LINE
----------------------------------------------
52: if (fVar6 * table->tuning->growth_threshold < fVar5) {
	00020009:MOV RAX,qword ptr [RAX + 0x28]
	0002000d:MOVSS XMM2,dword ptr [RAX + 0x8]
	00020012:MOV RAX,qword ptr [RBP + -0x38]
	00020016:MOV RAX,qword ptr [RAX + 0x10]
	0002001a:TEST RAX,RAX
	0002001d:JS 0x0002002a
	0002001f:PXOR XMM1,XMM1
	00020023:CVTSI2SS XMM1,RAX
	00020028:JMP 0x00020043
	0002002a:MOV RDX,RAX
	0002002d:SHR RDX,0x1
	00020030:AND EAX,0x1
	00020033:OR RDX,RAX
	00020036:PXOR XMM1,XMM1
	0002003a:CVTSI2SS XMM1,RDX
	0002003f:ADDSS XMM1,XMM1
	00020043:MULSS XMM1,XMM2
	00020047:COMISS XMM0,XMM1
	0002004a:JBE 0x00020218
END_OF_LINE
----------------------------------------------
53: check_tuning(table);
	00020057:CALL 0x0001f36b
END_OF_LINE
----------------------------------------------
54: uVar1 = table->n_buckets_used;
	00020060:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
55: if ((long)uVar1 < 0) {
	00020064:TEST RAX,RAX
	00020067:JS 0x00020074
END_OF_LINE
----------------------------------------------
56: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	00020077:SHR RDX,0x1
	0002007a:AND EAX,0x1
	0002007d:OR RDX,RAX
	00020080:PXOR XMM0,XMM0
	00020084:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
57: fVar5 = fVar5 + fVar5;
	00020089:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
60: fVar5 = (float)uVar1;
	0002006d:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
62: uVar1 = table->n_buckets;
	0002009e:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
63: if ((long)uVar1 < 0) {
	000200a2:TEST RAX,RAX
	000200a5:JS 0x000200b2
END_OF_LINE
----------------------------------------------
64: fVar6 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	000200b5:SHR RDX,0x1
	000200b8:AND EAX,0x1
	000200bb:OR RDX,RAX
	000200be:PXOR XMM1,XMM1
	000200c2:CVTSI2SS XMM1,RDX
END_OF_LINE
----------------------------------------------
65: fVar6 = fVar6 + fVar6;
	000200c7:ADDSS XMM1,XMM1
END_OF_LINE
----------------------------------------------
68: fVar6 = (float)uVar1;
	000200ab:CVTSI2SS XMM1,RAX
END_OF_LINE
----------------------------------------------
70: if (fVar6 * table->tuning->growth_threshold < fVar5) {
	00020091:MOV RAX,qword ptr [RAX + 0x28]
	00020095:MOVSS XMM2,dword ptr [RAX + 0x8]
	0002009a:MOV RAX,qword ptr [RBP + -0x38]
	0002009e:MOV RAX,qword ptr [RAX + 0x10]
	000200a2:TEST RAX,RAX
	000200a5:JS 0x000200b2
	000200a7:PXOR XMM1,XMM1
	000200ab:CVTSI2SS XMM1,RAX
	000200b0:JMP 0x000200cb
	000200b2:MOV RDX,RAX
	000200b5:SHR RDX,0x1
	000200b8:AND EAX,0x1
	000200bb:OR RDX,RAX
	000200be:PXOR XMM1,XMM1
	000200c2:CVTSI2SS XMM1,RDX
	000200c7:ADDSS XMM1,XMM1
	000200cb:MULSS XMM1,XMM2
	000200cf:COMISS XMM0,XMM1
	000200d2:JBE 0x00020218
END_OF_LINE
----------------------------------------------
71: tuning = table->tuning;
	000200dc:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
72: if (tuning->is_n_buckets == false) {
	000200e8:MOVZX EAX,byte ptr [RAX + 0x10]
	000200ec:TEST AL,AL
	000200ee:JZ 0x00020130
END_OF_LINE
----------------------------------------------
73: uVar1 = table->n_buckets;
	00020134:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
74: if ((long)uVar1 < 0) {
	00020138:TEST RAX,RAX
	0002013b:JS 0x00020148
END_OF_LINE
----------------------------------------------
75: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	0002014b:SHR RDX,0x1
	0002014e:AND EAX,0x1
	00020151:OR RDX,RAX
	00020154:PXOR XMM0,XMM0
	00020158:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
76: fVar5 = fVar5 + fVar5;
	0002015d:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
79: fVar5 = (float)uVar1;
	00020141:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
81: fVar5 = tuning->growth_threshold * tuning->growth_factor * fVar5;
	00020165:MOVSS XMM1,dword ptr [RAX + 0xc]
	0002016a:MULSS XMM1,XMM0
	0002016e:MOV RAX,qword ptr [RBP + -0x18]
	00020172:MOVSS XMM0,dword ptr [RAX + 0x8]
	00020177:MULSS XMM0,XMM1
END_OF_LINE
----------------------------------------------
84: uVar1 = table->n_buckets;
	000200f4:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
85: if ((long)uVar1 < 0) {
	000200f8:TEST RAX,RAX
	000200fb:JS 0x00020108
END_OF_LINE
----------------------------------------------
86: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	0002010b:SHR RDX,0x1
	0002010e:AND EAX,0x1
	00020111:OR RDX,RAX
	00020114:PXOR XMM0,XMM0
	00020118:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
87: fVar5 = fVar5 + fVar5;
	0002011d:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
90: fVar5 = (float)uVar1;
	00020101:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
92: fVar5 = fVar5 * tuning->growth_factor;
	00020125:MOVSS XMM1,dword ptr [RAX + 0xc]
	0002012a:MULSS XMM0,XMM1
END_OF_LINE
----------------------------------------------
94: if (1.844674e+19 <= fVar5) {
	00020185:COMISS XMM0,dword ptr [0x00034640]
	0002018c:JC 0x00020198
END_OF_LINE
----------------------------------------------
95: iVar3 = -1;
	0002018e:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
96: goto LAB_000202bc;
	000202bc:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
98: if (9.223372e+18 <= fVar5) {
	0002019d:COMISS XMM0,dword ptr [0x00034644]
	000201a4:JNC 0x000201b2
END_OF_LINE
----------------------------------------------
99: candidate_00 = (long)(fVar5 - 9.223372e+18) ^ 0x8000000000000000;
	000201bf:SUBSS XMM0,XMM1
	000201c3:CVTTSS2SI RAX,XMM0
	000201c8:MOV RDX,-0x8000000000000000
	000201d2:XOR RAX,RDX
END_OF_LINE
----------------------------------------------
102: candidate_00 = (size_t)fVar5;
	000201ab:CVTTSS2SI RAX,XMM0
END_OF_LINE
----------------------------------------------
104: _Var2 = hash_rehash(table,candidate_00);
	000201df:CALL 0x0001fd36
END_OF_LINE
----------------------------------------------
105: if (!_Var2) {
	000201e9:JZ 0x000201f5
END_OF_LINE
----------------------------------------------
106: iVar3 = -1;
	000201eb:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
107: goto LAB_000202bc;
	000202bc:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
109: pvVar4 = hash_find_entry(table,entry,&bucket,false);
	000201f5:LEA RDX,[RBP + -0x28]
	000201f9:MOV RSI,qword ptr [RBP + -0x40]
	000201fd:MOV RAX,qword ptr [RBP + -0x38]
	00020201:MOV ECX,0x0
	00020206:MOV RDI,RAX
	00020209:CALL 0x0001f9c9
END_OF_LINE
----------------------------------------------
110: if (pvVar4 != (void *)0x0) {
	0002020e:TEST RAX,RAX
	00020211:JZ 0x00020218
END_OF_LINE
----------------------------------------------
112: abort();
	00020213:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
116: if (bucket->data == (void *)0x0) {
	0002021c:MOV RAX,qword ptr [RAX]
	0002021f:TEST RAX,RAX
	00020222:JZ 0x00020284
END_OF_LINE
----------------------------------------------
117: bucket->data = entry;
	0002028c:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
118: table->n_entries = table->n_entries + 1;
	00020293:MOV RAX,qword ptr [RAX + 0x20]
	00020297:LEA RDX,[RAX + 0x1]
	0002029b:MOV RAX,qword ptr [RBP + -0x38]
	0002029f:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
119: table->n_buckets_used = table->n_buckets_used + 1;
	000202a7:MOV RAX,qword ptr [RAX + 0x18]
	000202ab:LEA RDX,[RAX + 0x1]
	000202af:MOV RAX,qword ptr [RBP + -0x38]
	000202b3:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
120: iVar3 = 1;
	000202b7:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
123: new_entry = allocate_entry(table);
	0002022b:CALL 0x0001f940
END_OF_LINE
----------------------------------------------
124: if (new_entry == (hash_entry *)0x0) {
	00020234:CMP qword ptr [RBP + -0x10],0x0
	00020239:JNZ 0x00020242
END_OF_LINE
----------------------------------------------
125: iVar3 = -1;
	0002023b:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
128: new_entry->data = entry;
	0002024a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
129: new_entry->next = bucket->next;
	00020251:MOV RDX,qword ptr [RAX + 0x8]
	00020255:MOV RAX,qword ptr [RBP + -0x10]
	00020259:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
130: bucket->next = new_entry;
	00020265:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
131: table->n_entries = table->n_entries + 1;
	0002026d:MOV RAX,qword ptr [RAX + 0x20]
	00020271:LEA RDX,[RAX + 0x1]
	00020275:MOV RAX,qword ptr [RBP + -0x38]
	00020279:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
132: iVar3 = 1;
	0002027d:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
135: LAB_000202bc:
	000202bc:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
136: if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
	000202c0:SUB RDX,qword ptr FS:[0x28]
	000202c9:JZ 0x000202d0
END_OF_LINE
----------------------------------------------
138: __stack_chk_fail();
	000202cb:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
140: return iVar3;
	000202d1:RET
END_OF_LINE



Function: hash_insert
----------------------------------------------
13: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	000202e6:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
14: iVar1 = hash_insert_if_absent(table,entry,&matched_ent);
	000202f5:LEA RDX,[RBP + -0x10]
	000202f9:MOV RCX,qword ptr [RBP + -0x30]
	000202fd:MOV RAX,qword ptr [RBP + -0x28]
	00020301:MOV RSI,RCX
	00020304:MOV RDI,RAX
	00020307:CALL 0x0001ff61
END_OF_LINE
----------------------------------------------
15: if (iVar1 == -1) {
	0002030f:CMP dword ptr [RBP + -0x14],-0x1
	00020313:JZ 0x00020327
END_OF_LINE
----------------------------------------------
16: entry = (void *)0x0;
	00020327:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
18: else if (iVar1 == 0) {
	00020315:CMP dword ptr [RBP + -0x14],0x0
	00020319:JNZ 0x00020321
END_OF_LINE
----------------------------------------------
19: entry = matched_ent;
	0002031f:JMP 0x0002032c
END_OF_LINE
----------------------------------------------
21: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	00020330:SUB RDX,qword ptr FS:[0x28]
	00020339:JZ 0x00020340
END_OF_LINE
----------------------------------------------
22: return entry;
	00020341:RET
END_OF_LINE
----------------------------------------------
25: __stack_chk_fail();
	0002033b:CALL 0x00005b00
END_OF_LINE



Function: hash_delete
----------------------------------------------
21: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	00020356:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
22: data = hash_find_entry(table,entry,&bucket,true);
	00020365:LEA RDX,[RBP + -0x38]
	00020369:MOV RSI,qword ptr [RBP + -0x50]
	0002036d:MOV RAX,qword ptr [RBP + -0x48]
	00020371:MOV ECX,0x1
	00020376:MOV RDI,RAX
	00020379:CALL 0x0001f9c9
END_OF_LINE
----------------------------------------------
23: if (data == (void *)0x0) {
	00020382:CMP qword ptr [RBP + -0x28],0x0
	00020387:JNZ 0x00020393
END_OF_LINE
----------------------------------------------
24: pvVar3 = (void *)0x0;
	00020389:MOV EAX,0x0
	0002038e:JMP 0x00020632
END_OF_LINE
----------------------------------------------
27: table->n_entries = table->n_entries - 1;
	00020397:MOV RAX,qword ptr [RAX + 0x20]
	0002039b:LEA RDX,[RAX + -0x1]
	0002039f:MOV RAX,qword ptr [RBP + -0x48]
	000203a3:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
28: pvVar3 = data;
	000203b1:JNZ 0x0002062e
END_OF_LINE
----------------------------------------------
29: if (bucket->data == (void *)0x0) {
	000203ab:MOV RAX,qword ptr [RAX]
	000203ae:TEST RAX,RAX
	000203b1:JNZ 0x0002062e
END_OF_LINE
----------------------------------------------
30: table->n_buckets_used = table->n_buckets_used - 1;
	000203bb:MOV RAX,qword ptr [RAX + 0x18]
	000203bf:LEA RDX,[RAX + -0x1]
	000203c3:MOV RAX,qword ptr [RBP + -0x48]
	000203c7:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
31: uVar1 = table->n_buckets_used;
	000203cf:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
32: if ((long)uVar1 < 0) {
	000203d3:TEST RAX,RAX
	000203d6:JS 0x000203e3
END_OF_LINE
----------------------------------------------
33: fVar4 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	000203e6:SHR RDX,0x1
	000203e9:AND EAX,0x1
	000203ec:OR RDX,RAX
	000203ef:PXOR XMM0,XMM0
	000203f3:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
34: fVar4 = fVar4 + fVar4;
	000203f8:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
37: fVar4 = (float)uVar1;
	000203dc:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
39: uVar1 = table->n_buckets;
	0002040c:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
40: if ((long)uVar1 < 0) {
	00020410:TEST RAX,RAX
	00020413:JS 0x00020420
END_OF_LINE
----------------------------------------------
41: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	00020423:SHR RDX,0x1
	00020426:AND EAX,0x1
	00020429:OR RDX,RAX
	0002042c:PXOR XMM1,XMM1
	00020430:CVTSI2SS XMM1,RDX
END_OF_LINE
----------------------------------------------
42: fVar5 = fVar5 + fVar5;
	00020435:ADDSS XMM1,XMM1
END_OF_LINE
----------------------------------------------
45: fVar5 = (float)uVar1;
	00020419:CVTSI2SS XMM1,RAX
END_OF_LINE
----------------------------------------------
47: if (fVar4 < fVar5 * table->tuning->shrink_threshold) {
	00020400:MOV RAX,qword ptr [RAX + 0x28]
	00020404:MOVSS XMM2,dword ptr [RAX]
	00020408:MOV RAX,qword ptr [RBP + -0x48]
	0002040c:MOV RAX,qword ptr [RAX + 0x10]
	00020410:TEST RAX,RAX
	00020413:JS 0x00020420
	00020415:PXOR XMM1,XMM1
	00020419:CVTSI2SS XMM1,RAX
	0002041e:JMP 0x00020439
	00020420:MOV RDX,RAX
	00020423:SHR RDX,0x1
	00020426:AND EAX,0x1
	00020429:OR RDX,RAX
	0002042c:PXOR XMM1,XMM1
	00020430:CVTSI2SS XMM1,RDX
	00020435:ADDSS XMM1,XMM1
	00020439:MULSS XMM1,XMM2
	0002043d:COMISS XMM1,XMM0
	00020440:JBE 0x0002062e
END_OF_LINE
----------------------------------------------
48: check_tuning(table);
	0002044d:CALL 0x0001f36b
END_OF_LINE
----------------------------------------------
49: uVar1 = table->n_buckets_used;
	00020456:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
50: if ((long)uVar1 < 0) {
	0002045a:TEST RAX,RAX
	0002045d:JS 0x0002046a
END_OF_LINE
----------------------------------------------
51: fVar4 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	0002046d:SHR RDX,0x1
	00020470:AND EAX,0x1
	00020473:OR RDX,RAX
	00020476:PXOR XMM0,XMM0
	0002047a:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
52: fVar4 = fVar4 + fVar4;
	0002047f:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
55: fVar4 = (float)uVar1;
	00020463:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
57: uVar1 = table->n_buckets;
	00020493:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
58: if ((long)uVar1 < 0) {
	00020497:TEST RAX,RAX
	0002049a:JS 0x000204a7
END_OF_LINE
----------------------------------------------
59: fVar5 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	000204aa:SHR RDX,0x1
	000204ad:AND EAX,0x1
	000204b0:OR RDX,RAX
	000204b3:PXOR XMM1,XMM1
	000204b7:CVTSI2SS XMM1,RDX
END_OF_LINE
----------------------------------------------
60: fVar5 = fVar5 + fVar5;
	000204bc:ADDSS XMM1,XMM1
END_OF_LINE
----------------------------------------------
63: fVar5 = (float)uVar1;
	000204a0:CVTSI2SS XMM1,RAX
END_OF_LINE
----------------------------------------------
65: pvVar3 = data;
	000204c7:JBE 0x0002062e
END_OF_LINE
----------------------------------------------
66: if (fVar4 < fVar5 * table->tuning->shrink_threshold) {
	00020487:MOV RAX,qword ptr [RAX + 0x28]
	0002048b:MOVSS XMM2,dword ptr [RAX]
	0002048f:MOV RAX,qword ptr [RBP + -0x48]
	00020493:MOV RAX,qword ptr [RAX + 0x10]
	00020497:TEST RAX,RAX
	0002049a:JS 0x000204a7
	0002049c:PXOR XMM1,XMM1
	000204a0:CVTSI2SS XMM1,RAX
	000204a5:JMP 0x000204c0
	000204a7:MOV RDX,RAX
	000204aa:SHR RDX,0x1
	000204ad:AND EAX,0x1
	000204b0:OR RDX,RAX
	000204b3:PXOR XMM1,XMM1
	000204b7:CVTSI2SS XMM1,RDX
	000204bc:ADDSS XMM1,XMM1
	000204c0:MULSS XMM1,XMM2
	000204c4:COMISS XMM1,XMM0
	000204c7:JBE 0x0002062e
END_OF_LINE
----------------------------------------------
67: tuning = table->tuning;
	000204d1:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
68: if (tuning->is_n_buckets == false) {
	000204dd:MOVZX EAX,byte ptr [RAX + 0x10]
	000204e1:TEST AL,AL
	000204e3:JZ 0x00020556
END_OF_LINE
----------------------------------------------
69: uVar1 = table->n_buckets;
	0002055a:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
70: if ((long)uVar1 < 0) {
	0002055e:TEST RAX,RAX
	00020561:JS 0x0002056e
END_OF_LINE
----------------------------------------------
71: fVar4 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	00020571:SHR RDX,0x1
	00020574:AND EAX,0x1
	00020577:OR RDX,RAX
	0002057a:PXOR XMM0,XMM0
	0002057e:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
72: fVar4 = fVar4 + fVar4;
	00020583:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
75: fVar4 = (float)uVar1;
	00020567:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
77: fVar4 = tuning->growth_threshold * tuning->shrink_factor * fVar4;
	0002058b:MOVSS XMM1,dword ptr [RAX + 0x4]
	00020590:MULSS XMM1,XMM0
	00020594:MOV RAX,qword ptr [RBP + -0x20]
	00020598:MOVSS XMM0,dword ptr [RAX + 0x8]
	0002059d:MULSS XMM0,XMM1
END_OF_LINE
----------------------------------------------
78: if (9.223372e+18 <= fVar4) {
	000205a1:COMISS XMM0,dword ptr [0x00034644]
	000205a8:JNC 0x000205b1
END_OF_LINE
----------------------------------------------
79: candidate = (long)(fVar4 - 9.223372e+18) ^ 0x8000000000000000;
	000205b9:SUBSS XMM0,XMM1
	000205bd:CVTTSS2SI RAX,XMM0
	000205c2:MOV RDX,-0x8000000000000000
	000205cc:XOR RAX,RDX
END_OF_LINE
----------------------------------------------
82: candidate = (size_t)fVar4;
	000205aa:CVTTSS2SI RAX,XMM0
END_OF_LINE
----------------------------------------------
86: uVar1 = table->n_buckets;
	000204e9:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
87: if ((long)uVar1 < 0) {
	000204ed:TEST RAX,RAX
	000204f0:JS 0x000204fd
END_OF_LINE
----------------------------------------------
88: fVar4 = (float)(uVar1 >> 1 | (ulong)((uint)uVar1 & 1));
	00020500:SHR RDX,0x1
	00020503:AND EAX,0x1
	00020506:OR RDX,RAX
	00020509:PXOR XMM0,XMM0
	0002050d:CVTSI2SS XMM0,RDX
END_OF_LINE
----------------------------------------------
89: fVar4 = fVar4 + fVar4;
	00020512:ADDSS XMM0,XMM0
END_OF_LINE
----------------------------------------------
92: fVar4 = (float)uVar1;
	000204f6:CVTSI2SS XMM0,RAX
END_OF_LINE
----------------------------------------------
94: fVar4 = fVar4 * tuning->shrink_factor;
	0002051a:MOVSS XMM1,dword ptr [RAX + 0x4]
	0002051f:MULSS XMM0,XMM1
END_OF_LINE
----------------------------------------------
95: if (9.223372e+18 <= fVar4) {
	00020523:COMISS XMM0,dword ptr [0x00034644]
	0002052a:JNC 0x00020536
END_OF_LINE
----------------------------------------------
96: candidate = (long)(fVar4 - 9.223372e+18) ^ 0x8000000000000000;
	0002053e:SUBSS XMM0,XMM1
	00020542:CVTTSS2SI RAX,XMM0
	00020547:MOV RDX,-0x8000000000000000
	00020551:XOR RAX,RDX
END_OF_LINE
----------------------------------------------
99: candidate = (size_t)fVar4;
	0002052c:CVTTSS2SI RAX,XMM0
END_OF_LINE
----------------------------------------------
102: _Var2 = hash_rehash(table,candidate);
	000205e1:CALL 0x0001fd36
END_OF_LINE
----------------------------------------------
103: pvVar3 = data;
	000205eb:JZ 0x0002062e
END_OF_LINE
----------------------------------------------
104: if (!_Var2) {
	000205eb:JZ 0x0002062e
END_OF_LINE
----------------------------------------------
105: cursor = table->free_entry_list;
	000205f1:MOV RAX,qword ptr [RAX + 0x48]
END_OF_LINE
----------------------------------------------
106: while (cursor != (hash_entry *)0x0) {
	0002061b:CMP qword ptr [RBP + -0x30],0x0
	00020620:JNZ 0x000205fb
END_OF_LINE
----------------------------------------------
107: next = cursor->next;
	000205ff:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
108: free(cursor);
	0002060e:CALL 0x00005860
END_OF_LINE
----------------------------------------------
109: cursor = next;
	00020617:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
111: table->free_entry_list = (hash_entry *)0x0;
	00020626:MOV qword ptr [RAX + 0x48],0x0
END_OF_LINE
----------------------------------------------
112: pvVar3 = data;
	00020626:MOV qword ptr [RAX + 0x48],0x0
END_OF_LINE
----------------------------------------------
118: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	00020636:SUB RDX,qword ptr FS:[0x28]
	0002063f:JZ 0x00020646
END_OF_LINE
----------------------------------------------
119: return pvVar3;
	00020647:RET
END_OF_LINE
----------------------------------------------
122: __stack_chk_fail();
	00020641:CALL 0x00005b00
END_OF_LINE



Function: gl_linked_nx_create_empty
----------------------------------------------
16: pgVar1 = (gl_list_t)malloc(0x48);
	0002066f:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
17: if (pgVar1 == (gl_list_t)0x0) {
	00020678:CMP qword ptr [RBP + -0x8],0x0
	0002067d:JNZ 0x00020686
END_OF_LINE
----------------------------------------------
18: pgVar1 = (gl_list_t)0x0;
	0002067f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
21: (pgVar1->base).vtable = implementation;
	0002068e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
22: (pgVar1->base).equals_fn = equals_fn;
	00020699:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
23: (pgVar1->base).hashcode_fn = hashcode_fn;
	000206a5:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
24: (pgVar1->base).dispose_fn = dispose_fn;
	000206b1:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
25: (pgVar1->base).allow_duplicates = allow_duplicates;
	000206bd:MOV byte ptr [RAX + 0x20],DL
END_OF_LINE
----------------------------------------------
26: (pgVar1->root).next = &pgVar1->root;
	000206c4:LEA RDX,[RAX + 0x28]
	000206c8:MOV RAX,qword ptr [RBP + -0x8]
	000206cc:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
27: (pgVar1->root).prev = &pgVar1->root;
	000206d4:LEA RDX,[RAX + 0x28]
	000206d8:MOV RAX,qword ptr [RBP + -0x8]
	000206dc:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
28: pgVar1->count = 0;
	000206e4:MOV qword ptr [RAX + 0x40],0x0
END_OF_LINE
----------------------------------------------
30: return pgVar1;
	000206f1:RET
END_OF_LINE



Function: gl_linked_nx_create
----------------------------------------------
23: __ptr = (gl_list_t)malloc(0x48);
	0002071d:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
24: if (__ptr == (gl_list_t)0x0) {
	00020726:CMP qword ptr [RBP + -0x18],0x0
	0002072b:JNZ 0x00020737
END_OF_LINE
----------------------------------------------
25: __ptr = (gl_list_t)0x0;
	0002072d:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
28: (__ptr->base).vtable = implementation;
	0002073f:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
29: (__ptr->base).equals_fn = equals_fn;
	0002074a:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
30: (__ptr->base).hashcode_fn = hashcode_fn;
	00020756:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
31: (__ptr->base).dispose_fn = dispose_fn;
	00020762:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
32: (__ptr->base).allow_duplicates = allow_duplicates;
	0002076e:MOV byte ptr [RAX + 0x20],DL
END_OF_LINE
----------------------------------------------
33: __ptr->count = count;
	00020779:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
34: tail = &__ptr->root;
	00020781:ADD RAX,0x28
	00020785:MOV qword ptr [RBP + -0x28],RAX
	00020789:JMP 0x000207d8
END_OF_LINE
----------------------------------------------
35: for (count_local = count; count_local != 0; count_local = count_local - 1) {
	00020789:JMP 0x000207d8
	0002078b:MOV EDI,0x18
	00020790:CALL 0x00005df0
	00020795:MOV qword ptr [RBP + -0x10],RAX
	00020799:CMP qword ptr [RBP + -0x10],0x0
	0002079e:JZ 0x00020800
	000207a0:MOV RAX,qword ptr [RBP + 0x10]
	000207a4:MOV RDX,qword ptr [RAX]
	000207a7:MOV RAX,qword ptr [RBP + -0x10]
	000207ab:MOV qword ptr [RAX + 0x10],RDX
	000207af:MOV RAX,qword ptr [RBP + -0x10]
	000207b3:MOV RDX,qword ptr [RBP + -0x28]
	000207b7:MOV qword ptr [RAX + 0x8],RDX
	000207bb:MOV RAX,qword ptr [RBP + -0x28]
	000207bf:MOV RDX,qword ptr [RBP + -0x10]
	000207c3:MOV qword ptr [RAX],RDX
	000207c6:MOV RAX,qword ptr [RBP + -0x10]
	000207ca:MOV qword ptr [RBP + -0x28],RAX
	000207ce:ADD qword ptr [RBP + 0x10],0x8
	000207d3:SUB qword ptr [RBP + -0x60],0x1
	000207d8:CMP qword ptr [RBP + -0x60],0x0
	000207dd:JNZ 0x0002078b
END_OF_LINE
----------------------------------------------
36: pgVar1 = (gl_list_node_impl *)malloc(0x18);
	00020790:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
37: if (pgVar1 == (gl_list_node_impl *)0x0) {
	00020799:CMP qword ptr [RBP + -0x10],0x0
	0002079e:JZ 0x00020800
END_OF_LINE
----------------------------------------------
38: node_1 = tail;
	00020805:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
39: while (node_1 != &__ptr->root) {
	0002082f:ADD RAX,0x28
	00020833:CMP qword ptr [RBP + -0x20],RAX
	00020837:JNZ 0x0002080b
END_OF_LINE
----------------------------------------------
40: pgVar1 = node_1->prev;
	0002080f:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
41: free(node_1);
	0002081e:CALL 0x00005860
END_OF_LINE
----------------------------------------------
42: node_1 = pgVar1;
	00020827:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
44: free(__ptr);
	00020840:CALL 0x00005860
END_OF_LINE
----------------------------------------------
45: return (gl_list_t)0x0;
	0002084a:LEAVE
	0002084b:RET
END_OF_LINE
----------------------------------------------
47: pgVar1->value = *contents;
	000207a4:MOV RDX,qword ptr [RAX]
	000207a7:MOV RAX,qword ptr [RBP + -0x10]
	000207ab:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
48: pgVar1->prev = tail;
	000207b7:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
49: tail->next = pgVar1;
	000207c3:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
50: contents = contents + 1;
	000207ce:ADD qword ptr [RBP + 0x10],0x8
END_OF_LINE
----------------------------------------------
51: tail = pgVar1;
	000207d3:SUB qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
53: tail->next = &__ptr->root;
	000207e3:LEA RDX,[RAX + 0x28]
	000207e7:MOV RAX,qword ptr [RBP + -0x28]
	000207eb:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
54: (__ptr->root).prev = tail;
	000207f6:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
56: return __ptr;
	0002084b:RET
END_OF_LINE



Function: gl_linked_size
----------------------------------------------
7: return list->count;
	0002085c:MOV RAX,qword ptr [RAX + 0x40]
	00020860:POP RBP
	00020861:RET
END_OF_LINE



Function: gl_linked_node_value
----------------------------------------------
8: return node->value;
	00020876:MOV RAX,qword ptr [RAX + 0x10]
	0002087a:POP RBP
	0002087b:RET
END_OF_LINE



Function: gl_linked_node_nx_set_value
----------------------------------------------
9: node->value = elt;
	00020898:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
10: return 0;
	000208a2:RET
END_OF_LINE



Function: gl_linked_next_node
----------------------------------------------
9: if (node->next == &list->root) {
	000208b7:MOV RAX,qword ptr [RAX]
	000208ba:MOV RDX,qword ptr [RBP + -0x8]
	000208be:ADD RDX,0x28
	000208c2:CMP RAX,RDX
	000208c5:JZ 0x000208d0
END_OF_LINE
----------------------------------------------
10: pgVar1 = (gl_list_node_t)0x0;
	000208d0:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: pgVar1 = node->next;
	000208cb:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
15: return pgVar1;
	000208d6:RET
END_OF_LINE



Function: gl_linked_previous_node
----------------------------------------------
9: if (node->prev == &list->root) {
	000208eb:MOV RAX,qword ptr [RAX + 0x8]
	000208ef:MOV RDX,qword ptr [RBP + -0x8]
	000208f3:ADD RDX,0x28
	000208f7:CMP RAX,RDX
	000208fa:JZ 0x00020906
END_OF_LINE
----------------------------------------------
10: pgVar1 = (gl_list_node_t)0x0;
	00020906:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: pgVar1 = node->prev;
	00020900:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
15: return pgVar1;
	0002090c:RET
END_OF_LINE



Function: gl_linked_get_at
----------------------------------------------
11: uVar1 = list->count;
	00020925:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
12: if (position < uVar1) {
	00020931:CMP RAX,qword ptr [RBP + -0x8]
	00020935:JC 0x0002093c
END_OF_LINE
----------------------------------------------
13: if (uVar1 - 1 >> 1 < position) {
	00020940:SUB RAX,0x1
	00020944:SHR RAX,0x1
	00020947:CMP qword ptr [RBP + -0x20],RAX
	0002094b:JA 0x00020974
END_OF_LINE
----------------------------------------------
14: position_local = uVar1 - position;
	00020978:SUB RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
15: node = (list->root).prev;
	00020988:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
16: while (position_local = position_local - 1, position_local != 0) {
	0002097c:SUB RAX,0x1
	00020980:MOV qword ptr [RBP + -0x20],RAX
	00020984:MOV RAX,qword ptr [RBP + -0x18]
	00020988:MOV RAX,qword ptr [RAX + 0x30]
	0002098c:MOV qword ptr [RBP + -0x10],RAX
	00020990:JMP 0x000209a3
	00020992:MOV RAX,qword ptr [RBP + -0x10]
	00020996:MOV RAX,qword ptr [RAX + 0x8]
	0002099a:MOV qword ptr [RBP + -0x10],RAX
	0002099e:SUB qword ptr [RBP + -0x20],0x1
	000209a3:CMP qword ptr [RBP + -0x20],0x0
	000209a8:JNZ 0x00020992
END_OF_LINE
----------------------------------------------
17: node = node->prev;
	00020996:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
21: node = (list->root).next;
	00020951:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
22: for (position_local = position; position_local != 0; position_local = position_local - 1) {
	00020959:JMP 0x0002096b
	0002095b:MOV RAX,qword ptr [RBP + -0x10]
	0002095f:MOV RAX,qword ptr [RAX]
	00020962:MOV qword ptr [RBP + -0x10],RAX
	00020966:SUB qword ptr [RBP + -0x20],0x1
	0002096b:CMP qword ptr [RBP + -0x20],0x0
	00020970:JNZ 0x0002095b
END_OF_LINE
----------------------------------------------
23: node = node->next;
	0002095f:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
26: return node->value;
	000209ae:MOV RAX,qword ptr [RAX + 0x10]
	000209b2:LEAVE
	000209b3:RET
END_OF_LINE
----------------------------------------------
29: abort();
	00020937:CALL 0x000058f0
END_OF_LINE



Function: gl_linked_nx_set_at
----------------------------------------------
12: uVar1 = list->count;
	000209d0:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
13: if (position < uVar1) {
	000209dc:CMP RAX,qword ptr [RBP + -0x8]
	000209e0:JC 0x000209e7
END_OF_LINE
----------------------------------------------
14: if (uVar1 - 1 >> 1 < position) {
	000209eb:SUB RAX,0x1
	000209ef:SHR RAX,0x1
	000209f2:CMP qword ptr [RBP + -0x20],RAX
	000209f6:JA 0x00020a1f
END_OF_LINE
----------------------------------------------
15: position_local = uVar1 - position;
	00020a23:SUB RAX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
16: node = (list->root).prev;
	00020a33:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
17: while (position_local = position_local - 1, position_local != 0) {
	00020a27:SUB RAX,0x1
	00020a2b:MOV qword ptr [RBP + -0x20],RAX
	00020a2f:MOV RAX,qword ptr [RBP + -0x18]
	00020a33:MOV RAX,qword ptr [RAX + 0x30]
	00020a37:MOV qword ptr [RBP + -0x10],RAX
	00020a3b:JMP 0x00020a4e
	00020a3d:MOV RAX,qword ptr [RBP + -0x10]
	00020a41:MOV RAX,qword ptr [RAX + 0x8]
	00020a45:MOV qword ptr [RBP + -0x10],RAX
	00020a49:SUB qword ptr [RBP + -0x20],0x1
	00020a4e:CMP qword ptr [RBP + -0x20],0x0
	00020a53:JNZ 0x00020a3d
END_OF_LINE
----------------------------------------------
18: node = node->prev;
	00020a41:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
22: node = (list->root).next;
	000209fc:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
23: for (position_local = position; position_local != 0; position_local = position_local - 1) {
	00020a04:JMP 0x00020a16
	00020a06:MOV RAX,qword ptr [RBP + -0x10]
	00020a0a:MOV RAX,qword ptr [RAX]
	00020a0d:MOV qword ptr [RBP + -0x10],RAX
	00020a11:SUB qword ptr [RBP + -0x20],0x1
	00020a16:CMP qword ptr [RBP + -0x20],0x0
	00020a1b:JNZ 0x00020a06
END_OF_LINE
----------------------------------------------
24: node = node->next;
	00020a0a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
27: node->value = elt;
	00020a5d:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
28: return node;
	00020a61:MOV RAX,qword ptr [RBP + -0x10]
	00020a65:LEAVE
	00020a66:RET
END_OF_LINE
----------------------------------------------
31: abort();
	000209e2:CALL 0x000058f0
END_OF_LINE



Function: gl_linked_search_from_to
----------------------------------------------
16: if ((start_index <= end_index) && (end_index <= list->count)) {
	00020a87:MOV RAX,qword ptr [RAX + 0x40]
	00020a8b:MOV qword ptr [RBP + -0x10],RAX
	00020a8f:MOV RAX,qword ptr [RBP + -0x30]
	00020a93:CMP RAX,qword ptr [RBP + -0x38]
	00020a97:JA 0x00020aa3
	00020a99:MOV RAX,qword ptr [RBP + -0x38]
	00020a9d:CMP RAX,qword ptr [RBP + -0x10]
	00020aa1:JBE 0x00020aa8
END_OF_LINE
----------------------------------------------
17: p_Var1 = (list->base).equals_fn;
	00020aac:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
18: node = (list->root).next;
	00020ab8:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
19: end_index_local = end_index - start_index;
	00020ac4:SUB qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
20: for (start_index_local = start_index; start_index_local != 0;
	00020ac8:JMP 0x00020ada
	00020aca:MOV RAX,qword ptr [RBP + -0x18]
	00020ace:MOV RAX,qword ptr [RAX]
	00020ad1:MOV qword ptr [RBP + -0x18],RAX
	00020ad5:SUB qword ptr [RBP + -0x30],0x1
	00020ada:CMP qword ptr [RBP + -0x30],0x0
	00020adf:JNZ 0x00020aca
END_OF_LINE
----------------------------------------------
21: start_index_local = start_index_local - 1) {
	00020ad5:SUB qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
22: node = node->next;
	00020ace:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
24: if (p_Var1 == (gl_listelement_equals_fn)0x0) {
	00020ae1:CMP qword ptr [RBP + -0x8],0x0
	00020ae6:JZ 0x00020b49
END_OF_LINE
----------------------------------------------
25: for (; end_index_local != 0; end_index_local = end_index_local - 1) {
	00020b44:SUB qword ptr [RBP + -0x38],0x1
	00020b49:CMP qword ptr [RBP + -0x38],0x0
	00020b4e:JNZ 0x00020b25
END_OF_LINE
----------------------------------------------
26: if (elt == node->value) {
	00020b29:MOV RAX,qword ptr [RAX + 0x10]
	00020b2d:CMP qword ptr [RBP + -0x40],RAX
	00020b31:JNZ 0x00020b39
END_OF_LINE
----------------------------------------------
27: return node;
	00020b55:LEAVE
	00020b56:RET
END_OF_LINE
----------------------------------------------
29: node = node->next;
	00020b3d:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
33: for (; end_index_local != 0; end_index_local = end_index_local - 1) {
	00020b17:SUB qword ptr [RBP + -0x38],0x1
	00020b1c:CMP qword ptr [RBP + -0x38],0x0
	00020b21:JNZ 0x00020aea
END_OF_LINE
----------------------------------------------
34: _Var2 = (*p_Var1)(elt,node->value);
	00020aee:MOV RDX,qword ptr [RAX + 0x10]
	00020af2:MOV RAX,qword ptr [RBP + -0x40]
	00020af6:MOV RCX,qword ptr [RBP + -0x8]
	00020afa:MOV RSI,RDX
	00020afd:MOV RDI,RAX
	00020b00:CALL RCX
END_OF_LINE
----------------------------------------------
35: if (_Var2) {
	00020b04:JZ 0x00020b0c
END_OF_LINE
----------------------------------------------
36: return node;
	00020b55:LEAVE
	00020b56:RET
END_OF_LINE
----------------------------------------------
38: node = node->next;
	00020b10:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
41: return (gl_list_node_t)0x0;
	00020b55:LEAVE
	00020b56:RET
END_OF_LINE
----------------------------------------------
44: abort();
	00020aa3:CALL 0x000058f0
END_OF_LINE



Function: gl_linked_indexof_from_to
----------------------------------------------
16: if ((start_index <= end_index) && (end_index <= list->count)) {
	00020b77:MOV RAX,qword ptr [RAX + 0x40]
	00020b7b:MOV qword ptr [RBP + -0x10],RAX
	00020b7f:MOV RAX,qword ptr [RBP + -0x30]
	00020b83:CMP RAX,qword ptr [RBP + -0x38]
	00020b87:JA 0x00020b93
	00020b89:MOV RAX,qword ptr [RBP + -0x38]
	00020b8d:CMP RAX,qword ptr [RBP + -0x10]
	00020b91:JBE 0x00020b98
END_OF_LINE
----------------------------------------------
17: p_Var1 = (list->base).equals_fn;
	00020b9c:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
18: node = (list->root).next;
	00020bb0:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
19: for (start_index_local = start_index; start_index_local != 0;
	00020bb8:JMP 0x00020bca
	00020bba:MOV RAX,qword ptr [RBP + -0x18]
	00020bbe:MOV RAX,qword ptr [RAX]
	00020bc1:MOV qword ptr [RBP + -0x18],RAX
	00020bc5:SUB qword ptr [RBP + -0x30],0x1
	00020bca:CMP qword ptr [RBP + -0x30],0x0
	00020bcf:JNZ 0x00020bba
END_OF_LINE
----------------------------------------------
20: start_index_local = start_index_local - 1) {
	00020bc5:SUB qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
21: node = node->next;
	00020bbe:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
23: index = start_index;
	00020bd6:JZ 0x00020c3c
END_OF_LINE
----------------------------------------------
24: if (p_Var1 == (gl_listelement_equals_fn)0x0) {
	00020bd1:CMP qword ptr [RBP + -0x8],0x0
	00020bd6:JZ 0x00020c3c
END_OF_LINE
----------------------------------------------
25: for (; index < end_index; index = index + 1) {
	00020c37:ADD qword ptr [RBP + -0x20],0x1
	00020c3c:MOV RAX,qword ptr [RBP + -0x20]
	00020c40:CMP RAX,qword ptr [RBP + -0x38]
	00020c44:JC 0x00020c18
END_OF_LINE
----------------------------------------------
26: if (elt == node->value) {
	00020c1c:MOV RAX,qword ptr [RAX + 0x10]
	00020c20:CMP qword ptr [RBP + -0x40],RAX
	00020c24:JNZ 0x00020c2c
END_OF_LINE
----------------------------------------------
27: return index;
	00020c4d:LEAVE
	00020c4e:RET
END_OF_LINE
----------------------------------------------
29: node = node->next;
	00020c30:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
33: for (; index < end_index; index = index + 1) {
	00020c07:ADD qword ptr [RBP + -0x20],0x1
	00020c0c:MOV RAX,qword ptr [RBP + -0x20]
	00020c10:CMP RAX,qword ptr [RBP + -0x38]
	00020c14:JC 0x00020bda
END_OF_LINE
----------------------------------------------
34: _Var2 = (*p_Var1)(elt,node->value);
	00020bde:MOV RDX,qword ptr [RAX + 0x10]
	00020be2:MOV RAX,qword ptr [RBP + -0x40]
	00020be6:MOV RCX,qword ptr [RBP + -0x8]
	00020bea:MOV RSI,RDX
	00020bed:MOV RDI,RAX
	00020bf0:CALL RCX
END_OF_LINE
----------------------------------------------
35: if (_Var2) {
	00020bf4:JZ 0x00020bfc
END_OF_LINE
----------------------------------------------
36: return index;
	00020c4d:LEAVE
	00020c4e:RET
END_OF_LINE
----------------------------------------------
38: node = node->next;
	00020c00:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
41: return 0xffffffffffffffff;
	00020c4d:LEAVE
	00020c4e:RET
END_OF_LINE
----------------------------------------------
44: abort();
	00020b93:CALL 0x000058f0
END_OF_LINE



Function: gl_linked_nx_add_first
----------------------------------------------
10: pgVar1 = (gl_list_node_t)malloc(0x18);
	00020c68:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
11: if (pgVar1 == (gl_list_node_t)0x0) {
	00020c71:CMP qword ptr [RBP + -0x8],0x0
	00020c76:JNZ 0x00020c7f
END_OF_LINE
----------------------------------------------
12: pgVar1 = (gl_list_node_t)0x0;
	00020c78:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: pgVar1->value = elt;
	00020c87:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
16: pgVar1->prev = &list->root;
	00020c8f:LEA RDX,[RAX + 0x28]
	00020c93:MOV RAX,qword ptr [RBP + -0x8]
	00020c97:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
17: pgVar1->next = (list->root).next;
	00020c9f:MOV RDX,qword ptr [RAX + 0x28]
	00020ca3:MOV RAX,qword ptr [RBP + -0x8]
	00020ca7:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
18: pgVar1->next->prev = pgVar1;
	00020cae:MOV RAX,qword ptr [RAX]
	00020cb1:MOV RDX,qword ptr [RBP + -0x8]
	00020cb5:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
19: (list->root).next = pgVar1;
	00020cc1:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
20: list->count = list->count + 1;
	00020cc9:MOV RAX,qword ptr [RAX + 0x40]
	00020ccd:LEA RDX,[RAX + 0x1]
	00020cd1:MOV RAX,qword ptr [RBP + -0x18]
	00020cd5:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
22: return pgVar1;
	00020cde:RET
END_OF_LINE



Function: gl_linked_nx_add_last
----------------------------------------------
10: pgVar1 = (gl_list_node_t)malloc(0x18);
	00020cf8:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
11: if (pgVar1 == (gl_list_node_t)0x0) {
	00020d01:CMP qword ptr [RBP + -0x8],0x0
	00020d06:JNZ 0x00020d0f
END_OF_LINE
----------------------------------------------
12: pgVar1 = (gl_list_node_t)0x0;
	00020d08:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: pgVar1->value = elt;
	00020d17:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
16: pgVar1->next = &list->root;
	00020d1f:LEA RDX,[RAX + 0x28]
	00020d23:MOV RAX,qword ptr [RBP + -0x8]
	00020d27:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
17: pgVar1->prev = (list->root).prev;
	00020d2e:MOV RDX,qword ptr [RAX + 0x30]
	00020d32:MOV RAX,qword ptr [RBP + -0x8]
	00020d36:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
18: pgVar1->prev->next = pgVar1;
	00020d3e:MOV RAX,qword ptr [RAX + 0x8]
	00020d42:MOV RDX,qword ptr [RBP + -0x8]
	00020d46:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
19: (list->root).prev = pgVar1;
	00020d51:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
20: list->count = list->count + 1;
	00020d59:MOV RAX,qword ptr [RAX + 0x40]
	00020d5d:LEA RDX,[RAX + 0x1]
	00020d61:MOV RAX,qword ptr [RBP + -0x18]
	00020d65:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
22: return pgVar1;
	00020d6e:RET
END_OF_LINE



Function: gl_linked_nx_add_before
----------------------------------------------
11: pgVar1 = (gl_list_node_t)malloc(0x18);
	00020d8c:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	00020d95:CMP qword ptr [RBP + -0x8],0x0
	00020d9a:JNZ 0x00020da3
END_OF_LINE
----------------------------------------------
13: pgVar1 = (gl_list_node_t)0x0;
	00020d9c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: pgVar1->value = elt;
	00020dab:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
17: pgVar1->next = node;
	00020db7:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
18: pgVar1->prev = node->prev;
	00020dbe:MOV RDX,qword ptr [RAX + 0x8]
	00020dc2:MOV RAX,qword ptr [RBP + -0x8]
	00020dc6:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
19: pgVar1->prev->next = pgVar1;
	00020dce:MOV RAX,qword ptr [RAX + 0x8]
	00020dd2:MOV RDX,qword ptr [RBP + -0x8]
	00020dd6:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
20: node->prev = pgVar1;
	00020de1:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
21: list->count = list->count + 1;
	00020de9:MOV RAX,qword ptr [RAX + 0x40]
	00020ded:LEA RDX,[RAX + 0x1]
	00020df1:MOV RAX,qword ptr [RBP + -0x18]
	00020df5:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
23: return pgVar1;
	00020dfe:RET
END_OF_LINE



Function: gl_linked_nx_add_after
----------------------------------------------
11: pgVar1 = (gl_list_node_t)malloc(0x18);
	00020e1c:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	00020e25:CMP qword ptr [RBP + -0x8],0x0
	00020e2a:JNZ 0x00020e33
END_OF_LINE
----------------------------------------------
13: pgVar1 = (gl_list_node_t)0x0;
	00020e2c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: pgVar1->value = elt;
	00020e3b:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
17: pgVar1->prev = node;
	00020e47:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
18: pgVar1->next = node->next;
	00020e4f:MOV RDX,qword ptr [RAX]
	00020e52:MOV RAX,qword ptr [RBP + -0x8]
	00020e56:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
19: pgVar1->next->prev = pgVar1;
	00020e5d:MOV RAX,qword ptr [RAX]
	00020e60:MOV RDX,qword ptr [RBP + -0x8]
	00020e64:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
20: node->next = pgVar1;
	00020e70:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
21: list->count = list->count + 1;
	00020e77:MOV RAX,qword ptr [RAX + 0x40]
	00020e7b:LEA RDX,[RAX + 0x1]
	00020e7f:MOV RAX,qword ptr [RBP + -0x18]
	00020e83:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
23: return pgVar1;
	00020e8c:RET
END_OF_LINE



Function: gl_linked_nx_add_at
----------------------------------------------
15: uVar1 = list->count;
	00020ea9:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
16: if (uVar1 < position) {
	00020eb9:JBE 0x00020ec0
END_OF_LINE
----------------------------------------------
18: abort();
	00020ebb:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
20: pgVar2 = (gl_list_node_t)malloc(0x18);
	00020ec5:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
21: if (pgVar2 == (gl_list_node_t)0x0) {
	00020ece:CMP qword ptr [RBP + -0x8],0x0
	00020ed3:JNZ 0x00020edf
END_OF_LINE
----------------------------------------------
22: pgVar2 = (gl_list_node_t)0x0;
	00020ed5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
25: pgVar2->value = elt;
	00020ee7:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
26: if (uVar1 >> 1 < position) {
	00020eef:SHR RAX,0x1
	00020ef2:CMP qword ptr [RBP + -0x30],RAX
	00020ef6:JA 0x00020f53
END_OF_LINE
----------------------------------------------
27: node_1 = &list->root;
	00020f63:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
28: for (position_local = uVar1 - position; position_local != 0;
	00020f57:SUB RAX,qword ptr [RBP + -0x30]
	00020f5b:MOV qword ptr [RBP + -0x30],RAX
	00020f5f:MOV RAX,qword ptr [RBP + -0x28]
	00020f63:ADD RAX,0x28
	00020f67:MOV qword ptr [RBP + -0x18],RAX
	00020f6b:JMP 0x00020f7e
	00020f6d:MOV RAX,qword ptr [RBP + -0x18]
	00020f71:MOV RAX,qword ptr [RAX + 0x8]
	00020f75:MOV qword ptr [RBP + -0x18],RAX
	00020f79:SUB qword ptr [RBP + -0x30],0x1
	00020f7e:CMP qword ptr [RBP + -0x30],0x0
	00020f83:JNZ 0x00020f6d
END_OF_LINE
----------------------------------------------
29: position_local = position_local - 1) {
	00020f79:SUB qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
30: node_1 = node_1->prev;
	00020f71:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
32: pgVar2->next = node_1;
	00020f8d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
33: pgVar2->prev = node_1->prev;
	00020f94:MOV RDX,qword ptr [RAX + 0x8]
	00020f98:MOV RAX,qword ptr [RBP + -0x8]
	00020f9c:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
34: pgVar2->prev->next = pgVar2;
	00020fa4:MOV RAX,qword ptr [RAX + 0x8]
	00020fa8:MOV RDX,qword ptr [RBP + -0x8]
	00020fac:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
35: node_1->prev = pgVar2;
	00020fb7:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
38: node = &list->root;
	00020efc:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
39: for (position_local = position; position_local != 0; position_local = position_local - 1) {
	00020f04:JMP 0x00020f16
	00020f06:MOV RAX,qword ptr [RBP + -0x20]
	00020f0a:MOV RAX,qword ptr [RAX]
	00020f0d:MOV qword ptr [RBP + -0x20],RAX
	00020f11:SUB qword ptr [RBP + -0x30],0x1
	00020f16:CMP qword ptr [RBP + -0x30],0x0
	00020f1b:JNZ 0x00020f06
END_OF_LINE
----------------------------------------------
40: node = node->next;
	00020f0a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
42: pgVar2->prev = node;
	00020f25:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
43: pgVar2->next = node->next;
	00020f2d:MOV RDX,qword ptr [RAX]
	00020f30:MOV RAX,qword ptr [RBP + -0x8]
	00020f34:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
44: pgVar2->next->prev = pgVar2;
	00020f3b:MOV RAX,qword ptr [RAX]
	00020f3e:MOV RDX,qword ptr [RBP + -0x8]
	00020f42:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
45: node->next = pgVar2;
	00020f4e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
47: list->count = list->count + 1;
	00020fbf:MOV RAX,qword ptr [RAX + 0x40]
	00020fc3:LEA RDX,[RAX + 0x1]
	00020fc7:MOV RAX,qword ptr [RBP + -0x28]
	00020fcb:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
49: return pgVar2;
	00020fd4:RET
END_OF_LINE



Function: gl_linked_remove_node
----------------------------------------------
12: pgVar1 = node->prev;
	00020fed:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
13: pgVar2 = node->next;
	00020ff9:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
14: pgVar1->next = pgVar2;
	00021008:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
15: pgVar2->prev = pgVar1;
	00021013:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
16: list->count = list->count - 1;
	0002101b:MOV RAX,qword ptr [RAX + 0x40]
	0002101f:LEA RDX,[RAX + -0x1]
	00021023:MOV RAX,qword ptr [RBP + -0x18]
	00021027:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
17: if ((list->base).dispose_fn != (gl_listelement_dispose_fn)0x0) {
	0002102f:MOV RAX,qword ptr [RAX + 0x18]
	00021033:TEST RAX,RAX
	00021036:JZ 0x0002104d
END_OF_LINE
----------------------------------------------
18: (*(list->base).dispose_fn)(node->value);
	0002103c:MOV RDX,qword ptr [RAX + 0x18]
	00021040:MOV RAX,qword ptr [RBP + -0x20]
	00021044:MOV RAX,qword ptr [RAX + 0x10]
	00021048:MOV RDI,RAX
	0002104b:CALL RDX
END_OF_LINE
----------------------------------------------
20: free(node);
	00021054:CALL 0x00005860
END_OF_LINE
----------------------------------------------
21: return true;
	0002105f:RET
END_OF_LINE



Function: gl_linked_remove_at
----------------------------------------------
16: uVar1 = list->count;
	00021078:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
17: if (uVar1 <= position) {
	00021084:CMP RAX,qword ptr [RBP + -0x18]
	00021088:JC 0x0002108f
END_OF_LINE
----------------------------------------------
19: abort();
	0002108a:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
21: if (uVar1 - 1 >> 1 < position) {
	00021093:SUB RAX,0x1
	00021097:SHR RAX,0x1
	0002109a:CMP qword ptr [RBP + -0x40],RAX
	0002109e:JA 0x000210f7
END_OF_LINE
----------------------------------------------
22: position_local = uVar1 - position;
	000210fb:SUB RAX,qword ptr [RBP + -0x40]
END_OF_LINE
----------------------------------------------
23: node_1 = &list->root;
	0002110b:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
24: while (position_local = position_local - 1, position_local != 0) {
	000210ff:SUB RAX,0x1
	00021103:MOV qword ptr [RBP + -0x40],RAX
	00021107:MOV RAX,qword ptr [RBP + -0x38]
	0002110b:ADD RAX,0x28
	0002110f:MOV qword ptr [RBP + -0x20],RAX
	00021113:JMP 0x00021126
	00021115:MOV RAX,qword ptr [RBP + -0x20]
	00021119:MOV RAX,qword ptr [RAX + 0x8]
	0002111d:MOV qword ptr [RBP + -0x20],RAX
	00021121:SUB qword ptr [RBP + -0x40],0x1
	00021126:CMP qword ptr [RBP + -0x40],0x0
	0002112b:JNZ 0x00021115
END_OF_LINE
----------------------------------------------
25: node_1 = node_1->prev;
	00021119:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
27: removed_node = node_1->prev;
	00021131:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
28: pgVar2 = node_1->prev->prev;
	0002113d:MOV RAX,qword ptr [RAX + 0x8]
	00021141:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
29: node_1->prev = pgVar2;
	00021151:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
30: pgVar2->next = node_1;
	0002115d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
33: node = &list->root;
	000210a4:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
34: for (position_local = position; position_local != 0; position_local = position_local - 1) {
	000210ac:JMP 0x000210be
	000210ae:MOV RAX,qword ptr [RBP + -0x28]
	000210b2:MOV RAX,qword ptr [RAX]
	000210b5:MOV qword ptr [RBP + -0x28],RAX
	000210b9:SUB qword ptr [RBP + -0x40],0x1
	000210be:CMP qword ptr [RBP + -0x40],0x0
	000210c3:JNZ 0x000210ae
END_OF_LINE
----------------------------------------------
35: node = node->next;
	000210b2:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
37: removed_node = node->next;
	000210c9:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
38: pgVar2 = node->next->next;
	000210d4:MOV RAX,qword ptr [RAX]
	000210d7:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
39: node->next = pgVar2;
	000210e6:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
40: pgVar2->prev = node;
	000210f1:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
42: list->count = list->count - 1;
	00021164:MOV RAX,qword ptr [RAX + 0x40]
	00021168:LEA RDX,[RAX + -0x1]
	0002116c:MOV RAX,qword ptr [RBP + -0x38]
	00021170:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
43: if ((list->base).dispose_fn != (gl_listelement_dispose_fn)0x0) {
	00021178:MOV RAX,qword ptr [RAX + 0x18]
	0002117c:TEST RAX,RAX
	0002117f:JZ 0x00021196
END_OF_LINE
----------------------------------------------
44: (*(list->base).dispose_fn)(removed_node->value);
	00021185:MOV RDX,qword ptr [RAX + 0x18]
	00021189:MOV RAX,qword ptr [RBP + -0x30]
	0002118d:MOV RAX,qword ptr [RAX + 0x10]
	00021191:MOV RDI,RAX
	00021194:CALL RDX
END_OF_LINE
----------------------------------------------
46: free(removed_node);
	0002119d:CALL 0x00005860
END_OF_LINE
----------------------------------------------
47: return true;
	000211a8:RET
END_OF_LINE



Function: gl_linked_remove
----------------------------------------------
11: node_00 = gl_linked_search_from_to(list,0,list->count,elt);
	000211c1:MOV RDX,qword ptr [RAX + 0x40]
	000211c5:MOV RCX,qword ptr [RBP + -0x20]
	000211c9:MOV RAX,qword ptr [RBP + -0x18]
	000211cd:MOV ESI,0x0
	000211d2:MOV RDI,RAX
	000211d5:CALL 0x00020a67
END_OF_LINE
----------------------------------------------
12: if (node_00 == (gl_list_node_t)0x0) {
	000211de:CMP qword ptr [RBP + -0x8],0x0
	000211e3:JZ 0x000211fa
END_OF_LINE
----------------------------------------------
13: _Var1 = false;
	000211fa:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: _Var1 = gl_linked_remove_node(list,node_00);
	000211f3:CALL 0x00020fd5
END_OF_LINE
----------------------------------------------
18: return _Var1;
	00021200:RET
END_OF_LINE



Function: gl_linked_list_free
----------------------------------------------
12: p_Var1 = (list->base).dispose_fn;
	00021215:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
13: node = (list->root).next;
	00021221:MOV RAX,qword ptr [RAX + 0x28]
	00021225:MOV qword ptr [RBP + -0x18],RAX
	00021229:JMP 0x00021262
END_OF_LINE
----------------------------------------------
14: while (node != &list->root) {
	00021266:ADD RAX,0x28
	0002126a:CMP qword ptr [RBP + -0x18],RAX
	0002126e:JNZ 0x0002122b
END_OF_LINE
----------------------------------------------
15: pgVar2 = node->next;
	0002122f:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
16: if (p_Var1 != (gl_listelement_dispose_fn)0x0) {
	00021236:CMP qword ptr [RBP + -0x10],0x0
	0002123b:JZ 0x0002124e
END_OF_LINE
----------------------------------------------
17: (*p_Var1)(node->value);
	00021241:MOV RAX,qword ptr [RAX + 0x10]
	00021245:MOV RDX,qword ptr [RBP + -0x10]
	00021249:MOV RDI,RAX
	0002124c:CALL RDX
END_OF_LINE
----------------------------------------------
19: free(node);
	00021255:CALL 0x00005860
END_OF_LINE
----------------------------------------------
20: node = pgVar2;
	0002125e:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
22: free(list);
	00021277:CALL 0x00005860
END_OF_LINE
----------------------------------------------
23: return;
	0002127e:RET
END_OF_LINE



Function: gl_linked_iterator
----------------------------------------------
9: pgVar1 = (list->root).next;
	000212a7:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
10: __return_storage_ptr__->vtable = (list->base).vtable;
	00021294:MOV RAX,qword ptr [RAX]
	00021297:MOV qword ptr [RBP + -0x50],RAX
	0002129b:MOV RAX,qword ptr [RBP + -0x60]
	0002129f:MOV qword ptr [RBP + -0x48],RAX
	000212a3:MOV RAX,qword ptr [RBP + -0x60]
	000212a7:MOV RAX,qword ptr [RAX + 0x28]
	000212ab:MOV qword ptr [RBP + -0x38],RAX
	000212af:MOV RAX,qword ptr [RBP + -0x60]
	000212b3:ADD RAX,0x28
	000212b7:MOV qword ptr [RBP + -0x30],RAX
	000212bb:MOV RAX,qword ptr [RBP + -0x58]
	000212bf:MOV RCX,qword ptr [RBP + -0x50]
	000212c3:MOV RBX,qword ptr [RBP + -0x48]
	000212c7:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
11: __return_storage_ptr__->list = list;
	000212ca:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
12: __return_storage_ptr__->count = result.count;
	000212d6:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
13: __return_storage_ptr__->p = pgVar1;
	000212da:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
14: __return_storage_ptr__->q = &list->root;
	000212b3:ADD RAX,0x28
	000212b7:MOV qword ptr [RBP + -0x30],RAX
	000212bb:MOV RAX,qword ptr [RBP + -0x58]
	000212bf:MOV RCX,qword ptr [RBP + -0x50]
	000212c3:MOV RBX,qword ptr [RBP + -0x48]
	000212c7:MOV qword ptr [RAX],RCX
	000212ca:MOV qword ptr [RAX + 0x8],RBX
	000212ce:MOV RCX,qword ptr [RBP + -0x40]
	000212d2:MOV RBX,qword ptr [RBP + -0x38]
	000212d6:MOV qword ptr [RAX + 0x10],RCX
	000212da:MOV qword ptr [RAX + 0x18],RBX
	000212de:MOV RCX,qword ptr [RBP + -0x30]
	000212e2:MOV RBX,qword ptr [RBP + -0x28]
	000212e6:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
15: __return_storage_ptr__->i = result.i;
	000212ea:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
16: __return_storage_ptr__->j = result.j;
	000212f2:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
17: return __return_storage_ptr__;
	000212f6:MOV RAX,qword ptr [RBP + -0x58]
	000212fa:MOV RBX,qword ptr [RBP + -0x8]
	000212fe:LEAVE
	000212ff:RET
END_OF_LINE



Function: gl_linked_iterator_from_to
----------------------------------------------
23: if ((start_index <= end_index) && (end_index <= list->count)) {
	0002133a:JA 0x00021350
	0002133c:MOV RAX,qword ptr [RBP + -0xb0]
	00021343:MOV RAX,qword ptr [RAX + 0x40]
	00021347:CMP qword ptr [RBP + -0xc0],RAX
	0002134e:JBE 0x00021355
END_OF_LINE
----------------------------------------------
24: uVar1 = end_index - start_index;
	00021380:SUB RAX,qword ptr [RBP + -0xb8]
END_OF_LINE
----------------------------------------------
25: i = list->count - end_index;
	00021392:MOV RAX,qword ptr [RAX + 0x40]
	00021396:SUB RAX,qword ptr [RBP + -0xc0]
END_OF_LINE
----------------------------------------------
26: if ((uVar1 < start_index) && (i < start_index)) {
	000213a9:JBE 0x0002144c
	000213af:MOV RAX,qword ptr [RBP + -0x68]
	000213b3:CMP RAX,qword ptr [RBP + -0x58]
	000213b7:JBE 0x0002144c
END_OF_LINE
----------------------------------------------
27: node = &list->root;
	000213c4:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
28: for (; i != 0; i = i - 1) {
	000213ee:SUB qword ptr [RBP + -0x90],0x1
	000213f6:CMP qword ptr [RBP + -0x90],0x0
	000213fe:JNZ 0x000213dc
END_OF_LINE
----------------------------------------------
29: node = node->prev;
	000213e3:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
31: result.q = node;
	00021407:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
32: for (i = uVar1; i != 0; i = i - 1) {
	00021416:JMP 0x00021432
	00021418:MOV RAX,qword ptr [RBP + -0x98]
	0002141f:MOV RAX,qword ptr [RAX + 0x8]
	00021423:MOV qword ptr [RBP + -0x98],RAX
	0002142a:SUB qword ptr [RBP + -0x90],0x1
	00021432:CMP qword ptr [RBP + -0x90],0x0
	0002143a:JNZ 0x00021418
END_OF_LINE
----------------------------------------------
33: node = node->prev;
	0002141f:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
35: result.p = node;
	00021443:MOV qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
37: else if (i < uVar1) {
	00021454:JBE 0x000214e5
END_OF_LINE
----------------------------------------------
38: node_1 = (list->root).next;
	00021461:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
39: for (i_1 = start_index; i_1 != 0; i_1 = i_1 - 1) {
	00021474:JMP 0x0002148c
	00021476:MOV RAX,qword ptr [RBP + -0x88]
	0002147d:MOV RAX,qword ptr [RAX]
	00021480:MOV qword ptr [RBP + -0x88],RAX
	00021487:SUB qword ptr [RBP + -0x80],0x1
	0002148c:CMP qword ptr [RBP + -0x80],0x0
	00021491:JNZ 0x00021476
END_OF_LINE
----------------------------------------------
40: node_1 = node_1->next;
	0002147d:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
42: result.p = node_1;
	0002149a:MOV qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
43: node_1 = &list->root;
	000214a5:ADD RAX,0x28
END_OF_LINE
----------------------------------------------
44: for (i_1 = i; i_1 != 0; i_1 = i_1 - 1) {
	000214b8:JMP 0x000214d1
	000214ba:MOV RAX,qword ptr [RBP + -0x88]
	000214c1:MOV RAX,qword ptr [RAX + 0x8]
	000214c5:MOV qword ptr [RBP + -0x88],RAX
	000214cc:SUB qword ptr [RBP + -0x80],0x1
	000214d1:CMP qword ptr [RBP + -0x80],0x0
	000214d6:JNZ 0x000214ba
END_OF_LINE
----------------------------------------------
45: node_1 = node_1->prev;
	000214c1:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
47: result.q = node_1;
	000214df:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
50: node_2 = (list->root).next;
	000214ec:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
51: for (i_2 = start_index; i_2 != 0; i_2 = i_2 - 1) {
	000214fc:JMP 0x0002150e
	000214fe:MOV RAX,qword ptr [RBP + -0x78]
	00021502:MOV RAX,qword ptr [RAX]
	00021505:MOV qword ptr [RBP + -0x78],RAX
	00021509:SUB qword ptr [RBP + -0x70],0x1
	0002150e:CMP qword ptr [RBP + -0x70],0x0
	00021513:JNZ 0x000214fe
END_OF_LINE
----------------------------------------------
52: node_2 = node_2->next;
	00021502:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
54: result.p = node_2;
	00021519:MOV qword ptr [RBP + -0x38],RAX
END_OF_LINE
----------------------------------------------
55: for (i_2 = uVar1; i_2 != 0; i_2 = i_2 - 1) {
	00021525:JMP 0x00021537
	00021527:MOV RAX,qword ptr [RBP + -0x78]
	0002152b:MOV RAX,qword ptr [RAX]
	0002152e:MOV qword ptr [RBP + -0x78],RAX
	00021532:SUB qword ptr [RBP + -0x70],0x1
	00021537:CMP qword ptr [RBP + -0x70],0x0
	0002153c:JNZ 0x00021527
END_OF_LINE
----------------------------------------------
56: node_2 = node_2->next;
	0002152b:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
58: result.q = node_2;
	00021542:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
60: __return_storage_ptr__->vtable = (list->base).vtable;
	0002135c:MOV RAX,qword ptr [RAX]
	0002135f:MOV qword ptr [RBP + -0x50],RAX
	00021363:MOV RAX,qword ptr [RBP + -0xb0]
	0002136a:MOV qword ptr [RBP + -0x48],RAX
	0002136e:MOV RAX,qword ptr [RBP + -0xb8]
	00021375:MOV qword ptr [RBP + -0x68],RAX
	00021379:MOV RAX,qword ptr [RBP + -0xc0]
	00021380:SUB RAX,qword ptr [RBP + -0xb8]
	00021387:MOV qword ptr [RBP + -0x60],RAX
	0002138b:MOV RAX,qword ptr [RBP + -0xb0]
	00021392:MOV RAX,qword ptr [RAX + 0x40]
	00021396:SUB RAX,qword ptr [RBP + -0xc0]
	0002139d:MOV qword ptr [RBP + -0x58],RAX
	000213a1:MOV RAX,qword ptr [RBP + -0x68]
	000213a5:CMP RAX,qword ptr [RBP + -0x60]
	000213a9:JBE 0x0002144c
	000213af:MOV RAX,qword ptr [RBP + -0x68]
	000213b3:CMP RAX,qword ptr [RBP + -0x58]
	000213b7:JBE 0x0002144c
	000213bd:MOV RAX,qword ptr [RBP + -0xb0]
	000213c4:ADD RAX,0x28
	000213c8:MOV qword ptr [RBP + -0x98],RAX
	000213cf:MOV RAX,qword ptr [RBP + -0x58]
	000213d3:MOV qword ptr [RBP + -0x90],RAX
	000213da:JMP 0x000213f6
	000213dc:MOV RAX,qword ptr [RBP + -0x98]
	000213e3:MOV RAX,qword ptr [RAX + 0x8]
	000213e7:MOV qword ptr [RBP + -0x98],RAX
	000213ee:SUB qword ptr [RBP + -0x90],0x1
	000213f6:CMP qword ptr [RBP + -0x90],0x0
	000213fe:JNZ 0x000213dc
	00021400:MOV RAX,qword ptr [RBP + -0x98]
	00021407:MOV qword ptr [RBP + -0x30],RAX
	0002140b:MOV RAX,qword ptr [RBP + -0x60]
	0002140f:MOV qword ptr [RBP + -0x90],RAX
	00021416:JMP 0x00021432
	00021418:MOV RAX,qword ptr [RBP + -0x98]
	0002141f:MOV RAX,qword ptr [RAX + 0x8]
	00021423:MOV qword ptr [RBP + -0x98],RAX
	0002142a:SUB qword ptr [RBP + -0x90],0x1
	00021432:CMP qword ptr [RBP + -0x90],0x0
	0002143a:JNZ 0x00021418
	0002143c:MOV RAX,qword ptr [RBP + -0x98]
	00021443:MOV qword ptr [RBP + -0x38],RAX
	00021447:JMP 0x00021546
	0002144c:MOV RAX,qword ptr [RBP + -0x60]
	00021450:CMP RAX,qword ptr [RBP + -0x58]
	00021454:JBE 0x000214e5
	0002145a:MOV RAX,qword ptr [RBP + -0xb0]
	00021461:MOV RAX,qword ptr [RAX + 0x28]
	00021465:MOV qword ptr [RBP + -0x88],RAX
	0002146c:MOV RAX,qword ptr [RBP + -0x68]
	00021470:MOV qword ptr [RBP + -0x80],RAX
	00021474:JMP 0x0002148c
	00021476:MOV RAX,qword ptr [RBP + -0x88]
	0002147d:MOV RAX,qword ptr [RAX]
	00021480:MOV qword ptr [RBP + -0x88],RAX
	00021487:SUB qword ptr [RBP + -0x80],0x1
	0002148c:CMP qword ptr [RBP + -0x80],0x0
	00021491:JNZ 0x00021476
	00021493:MOV RAX,qword ptr [RBP + -0x88]
	0002149a:MOV qword ptr [RBP + -0x38],RAX
	0002149e:MOV RAX,qword ptr [RBP + -0xb0]
	000214a5:ADD RAX,0x28
	000214a9:MOV qword ptr [RBP + -0x88],RAX
	000214b0:MOV RAX,qword ptr [RBP + -0x58]
	000214b4:MOV qword ptr [RBP + -0x80],RAX
	000214b8:JMP 0x000214d1
	000214ba:MOV RAX,qword ptr [RBP + -0x88]
	000214c1:MOV RAX,qword ptr [RAX + 0x8]
	000214c5:MOV qword ptr [RBP + -0x88],RAX
	000214cc:SUB qword ptr [RBP + -0x80],0x1
	000214d1:CMP qword ptr [RBP + -0x80],0x0
	000214d6:JNZ 0x000214ba
	000214d8:MOV RAX,qword ptr [RBP + -0x88]
	000214df:MOV qword ptr [RBP + -0x30],RAX
	000214e3:JMP 0x00021546
	000214e5:MOV RAX,qword ptr [RBP + -0xb0]
	000214ec:MOV RAX,qword ptr [RAX + 0x28]
	000214f0:MOV qword ptr [RBP + -0x78],RAX
	000214f4:MOV RAX,qword ptr [RBP + -0x68]
	000214f8:MOV qword ptr [RBP + -0x70],RAX
	000214fc:JMP 0x0002150e
	000214fe:MOV RAX,qword ptr [RBP + -0x78]
	00021502:MOV RAX,qword ptr [RAX]
	00021505:MOV qword ptr [RBP + -0x78],RAX
	00021509:SUB qword ptr [RBP + -0x70],0x1
	0002150e:CMP qword ptr [RBP + -0x70],0x0
	00021513:JNZ 0x000214fe
	00021515:MOV RAX,qword ptr [RBP + -0x78]
	00021519:MOV qword ptr [RBP + -0x38],RAX
	0002151d:MOV RAX,qword ptr [RBP + -0x60]
	00021521:MOV qword ptr [RBP + -0x70],RAX
	00021525:JMP 0x00021537
	00021527:MOV RAX,qword ptr [RBP + -0x78]
	0002152b:MOV RAX,qword ptr [RAX]
	0002152e:MOV qword ptr [RBP + -0x78],RAX
	00021532:SUB qword ptr [RBP + -0x70],0x1
	00021537:CMP qword ptr [RBP + -0x70],0x0
	0002153c:JNZ 0x00021527
	0002153e:MOV RAX,qword ptr [RBP + -0x78]
	00021542:MOV qword ptr [RBP + -0x30],RAX
	00021546:MOV RAX,qword ptr [RBP + -0xa8]
	0002154d:MOV RCX,qword ptr [RBP + -0x50]
	00021551:MOV RBX,qword ptr [RBP + -0x48]
	00021555:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
61: __return_storage_ptr__->list = list;
	00021558:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
62: __return_storage_ptr__->count = result.count;
	00021564:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
63: __return_storage_ptr__->p = result.p;
	00021568:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
64: __return_storage_ptr__->q = result.q;
	00021574:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
65: __return_storage_ptr__->i = result.i;
	00021578:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
66: __return_storage_ptr__->j = result.j;
	00021580:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
67: return __return_storage_ptr__;
	00021584:MOV RAX,qword ptr [RBP + -0xa8]
	0002158b:MOV RBX,qword ptr [RBP + -0x8]
	0002158f:LEAVE
	00021590:RET
END_OF_LINE
----------------------------------------------
70: abort();
	00021350:CALL 0x000058f0
END_OF_LINE



Function: gl_linked_iterator_next
----------------------------------------------
12: if (iterator->p == iterator->q) {
	000215a9:MOV RDX,qword ptr [RAX + 0x18]
	000215ad:MOV RAX,qword ptr [RBP + -0x18]
	000215b1:MOV RAX,qword ptr [RAX + 0x20]
	000215b5:CMP RDX,RAX
	000215b8:JZ 0x000215fd
END_OF_LINE
----------------------------------------------
13: _Var2 = false;
	000215fd:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: pgVar1 = (gl_list_node_t)iterator->p;
	000215be:MOV RAX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
17: *eltp = pgVar1->value;
	000215ca:MOV RDX,qword ptr [RAX + 0x10]
	000215ce:MOV RAX,qword ptr [RBP + -0x20]
	000215d2:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
18: if (nodep != (gl_list_node_t *)0x0) {
	000215d5:CMP qword ptr [RBP + -0x28],0x0
	000215da:JZ 0x000215e7
END_OF_LINE
----------------------------------------------
19: *nodep = pgVar1;
	000215e4:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
21: iterator->p = pgVar1->next;
	000215eb:MOV RDX,qword ptr [RAX]
	000215ee:MOV RAX,qword ptr [RBP + -0x18]
	000215f2:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
22: _Var2 = true;
	000215f6:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
24: return _Var2;
	00021603:RET
END_OF_LINE



Function: gl_linked_iterator_free
----------------------------------------------
7: return;
	00021612:RET
END_OF_LINE



Function: gl_linked_sortedlist_search
----------------------------------------------
12: node = (list->root).next;
	0002162f:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
13: while ((node != &list->root && (iVar1 = (*compar)(node->value,elt), iVar1 < 1))) {
	0002163d:MOV RAX,qword ptr [RAX + 0x10]
	00021641:MOV RDX,qword ptr [RBP + -0x28]
	00021645:MOV RCX,qword ptr [RBP + -0x20]
	00021649:MOV RSI,RDX
	0002164c:MOV RDI,RAX
	0002164f:CALL RCX
	00021651:MOV dword ptr [RBP + -0xc],EAX
	00021654:CMP dword ptr [RBP + -0xc],0x0
	00021658:JG 0x00021681
	0002165a:CMP dword ptr [RBP + -0xc],0x0
	0002165e:JNZ 0x00021666
	00021660:MOV RAX,qword ptr [RBP + -0x8]
	00021664:JMP 0x00021687
	00021666:MOV RAX,qword ptr [RBP + -0x8]
	0002166a:MOV RAX,qword ptr [RAX]
	0002166d:MOV qword ptr [RBP + -0x8],RAX
	00021671:MOV RAX,qword ptr [RBP + -0x18]
	00021675:ADD RAX,0x28
	00021679:CMP qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
14: if (iVar1 == 0) {
	0002165a:CMP dword ptr [RBP + -0xc],0x0
	0002165e:JNZ 0x00021666
END_OF_LINE
----------------------------------------------
15: return node;
	00021687:LEAVE
	00021688:RET
END_OF_LINE
----------------------------------------------
17: node = node->next;
	0002166a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
19: return (gl_list_node_t)0x0;
	00021687:LEAVE
	00021688:RET
END_OF_LINE



Function: gl_linked_sortedlist_search_from_to
----------------------------------------------
18: if ((high < low) || (list->count < high)) {
	000216bd:JA 0x000216cd
	000216bf:MOV RAX,qword ptr [RBP + -0x28]
	000216c3:MOV RAX,qword ptr [RAX + 0x40]
	000216c7:CMP qword ptr [RBP + -0x40],RAX
	000216cb:JBE 0x000216d2
END_OF_LINE
----------------------------------------------
20: abort();
	000216cd:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
22: high_local = high - low;
	000216d6:SUB qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
23: if (high_local != 0) {
	000216da:CMP qword ptr [RBP + -0x40],0x0
	000216df:JZ 0x000217a2
END_OF_LINE
----------------------------------------------
24: if (list->count - 1 >> 1 < low) {
	000216ad:MOV RAX,qword ptr [RAX + 0x40]
	000216b1:MOV qword ptr [RBP + -0x8],RAX
	000216b5:MOV RAX,qword ptr [RBP + -0x38]
	000216b9:CMP RAX,qword ptr [RBP + -0x40]
	000216bd:JA 0x000216cd
	000216bf:MOV RAX,qword ptr [RBP + -0x28]
	000216c3:MOV RAX,qword ptr [RAX + 0x40]
	000216c7:CMP qword ptr [RBP + -0x40],RAX
	000216cb:JBE 0x000216d2
	000216cd:CALL 0x000058f0
	000216d2:MOV RAX,qword ptr [RBP + -0x38]
	000216d6:SUB qword ptr [RBP + -0x40],RAX
	000216da:CMP qword ptr [RBP + -0x40],0x0
	000216df:JZ 0x000217a2
	000216e5:MOV RAX,qword ptr [RBP + -0x38]
	000216e9:MOV qword ptr [RBP + -0x18],RAX
	000216ed:MOV RAX,qword ptr [RBP + -0x8]
	000216f1:SUB RAX,0x1
	000216f5:SHR RAX,0x1
	000216f8:CMP qword ptr [RBP + -0x18],RAX
	000216fc:JA 0x00021725
END_OF_LINE
----------------------------------------------
25: position = list->count - low;
	000216ad:MOV RAX,qword ptr [RAX + 0x40]
	000216b1:MOV qword ptr [RBP + -0x8],RAX
	000216b5:MOV RAX,qword ptr [RBP + -0x38]
	000216b9:CMP RAX,qword ptr [RBP + -0x40]
	000216bd:JA 0x000216cd
	000216bf:MOV RAX,qword ptr [RBP + -0x28]
	000216c3:MOV RAX,qword ptr [RAX + 0x40]
	000216c7:CMP qword ptr [RBP + -0x40],RAX
	000216cb:JBE 0x000216d2
	000216cd:CALL 0x000058f0
	000216d2:MOV RAX,qword ptr [RBP + -0x38]
	000216d6:SUB qword ptr [RBP + -0x40],RAX
	000216da:CMP qword ptr [RBP + -0x40],0x0
	000216df:JZ 0x000217a2
	000216e5:MOV RAX,qword ptr [RBP + -0x38]
	000216e9:MOV qword ptr [RBP + -0x18],RAX
	000216ed:MOV RAX,qword ptr [RBP + -0x8]
	000216f1:SUB RAX,0x1
	000216f5:SHR RAX,0x1
	000216f8:CMP qword ptr [RBP + -0x18],RAX
	000216fc:JA 0x00021725
	000216fe:MOV RAX,qword ptr [RBP + -0x28]
	00021702:MOV RAX,qword ptr [RAX + 0x28]
	00021706:MOV qword ptr [RBP + -0x10],RAX
	0002170a:JMP 0x0002171c
	0002170c:MOV RAX,qword ptr [RBP + -0x10]
	00021710:MOV RAX,qword ptr [RAX]
	00021713:MOV qword ptr [RBP + -0x10],RAX
	00021717:SUB qword ptr [RBP + -0x18],0x1
	0002171c:CMP qword ptr [RBP + -0x18],0x0
	00021721:JNZ 0x0002170c
	00021723:JMP 0x0002175b
	00021725:MOV RAX,qword ptr [RBP + -0x8]
	00021729:SUB RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
26: node = (list->root).prev;
	00021739:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
27: while (position = position - 1, position != 0) {
	0002172d:SUB RAX,0x1
	00021731:MOV qword ptr [RBP + -0x18],RAX
	00021735:MOV RAX,qword ptr [RBP + -0x28]
	00021739:MOV RAX,qword ptr [RAX + 0x30]
	0002173d:MOV qword ptr [RBP + -0x10],RAX
	00021741:JMP 0x00021754
	00021743:MOV RAX,qword ptr [RBP + -0x10]
	00021747:MOV RAX,qword ptr [RAX + 0x8]
	0002174b:MOV qword ptr [RBP + -0x10],RAX
	0002174f:SUB qword ptr [RBP + -0x18],0x1
	00021754:CMP qword ptr [RBP + -0x18],0x0
	00021759:JNZ 0x00021743
END_OF_LINE
----------------------------------------------
28: node = node->prev;
	00021747:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
32: node = (list->root).next;
	00021702:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
33: for (position = low; position != 0; position = position - 1) {
	0002170a:JMP 0x0002171c
	0002170c:MOV RAX,qword ptr [RBP + -0x10]
	00021710:MOV RAX,qword ptr [RAX]
	00021713:MOV qword ptr [RBP + -0x10],RAX
	00021717:SUB qword ptr [RBP + -0x18],0x1
	0002171c:CMP qword ptr [RBP + -0x18],0x0
	00021721:JNZ 0x0002170c
END_OF_LINE
----------------------------------------------
34: node = node->next;
	00021710:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
38: iVar1 = (*compar)(node->value,elt);
	0002175f:MOV RAX,qword ptr [RAX + 0x10]
	00021763:MOV RDX,qword ptr [RBP + -0x48]
	00021767:MOV RCX,qword ptr [RBP + -0x30]
	0002176b:MOV RSI,RDX
	0002176e:MOV RDI,RAX
	00021771:CALL RCX
END_OF_LINE
----------------------------------------------
39: if (0 < iVar1) {
	0002177a:JG 0x000217a1
END_OF_LINE
----------------------------------------------
40: return (gl_list_node_t)0x0;
	000217a7:LEAVE
	000217a8:RET
END_OF_LINE
----------------------------------------------
42: if (iVar1 == 0) {
	0002177c:CMP dword ptr [RBP + -0x1c],0x0
	00021780:JNZ 0x00021788
END_OF_LINE
----------------------------------------------
43: return node;
	000217a7:LEAVE
	000217a8:RET
END_OF_LINE
----------------------------------------------
45: node = node->next;
	0002178c:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
46: high_local = high_local - 1;
	00021793:SUB qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
47: } while (high_local != 0);
	00021798:CMP qword ptr [RBP + -0x40],0x0
	0002179d:JNZ 0x0002175b
END_OF_LINE
----------------------------------------------
49: return (gl_list_node_t)0x0;
	000217a7:LEAVE
	000217a8:RET
END_OF_LINE



Function: gl_linked_sortedlist_indexof
----------------------------------------------
13: node = (list->root).next;
	000217c5:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
14: index = 0;
	000217cd:MOV qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
15: while ((node != &list->root && (iVar1 = (*compar)(node->value,elt), iVar1 < 1))) {
	000217db:MOV RAX,qword ptr [RAX + 0x10]
	000217df:MOV RDX,qword ptr [RBP + -0x38]
	000217e3:MOV RCX,qword ptr [RBP + -0x30]
	000217e7:MOV RSI,RDX
	000217ea:MOV RDI,RAX
	000217ed:CALL RCX
	000217ef:MOV dword ptr [RBP + -0x14],EAX
	000217f2:CMP dword ptr [RBP + -0x14],0x0
	000217f6:JG 0x00021824
	000217f8:CMP dword ptr [RBP + -0x14],0x0
	000217fc:JNZ 0x00021804
	000217fe:MOV RAX,qword ptr [RBP + -0x8]
	00021802:JMP 0x0002182c
	00021804:MOV RAX,qword ptr [RBP + -0x10]
	00021808:MOV RAX,qword ptr [RAX]
	0002180b:MOV qword ptr [RBP + -0x10],RAX
	0002180f:ADD qword ptr [RBP + -0x8],0x1
	00021814:MOV RAX,qword ptr [RBP + -0x28]
	00021818:ADD RAX,0x28
	0002181c:CMP qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
16: if (iVar1 == 0) {
	000217f8:CMP dword ptr [RBP + -0x14],0x0
	000217fc:JNZ 0x00021804
END_OF_LINE
----------------------------------------------
17: return index;
	0002182c:LEAVE
	0002182d:RET
END_OF_LINE
----------------------------------------------
19: node = node->next;
	00021808:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
20: index = index + 1;
	0002180f:ADD qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
22: return 0xffffffffffffffff;
	0002182c:LEAVE
	0002182d:RET
END_OF_LINE



Function: gl_linked_sortedlist_indexof_from_to
----------------------------------------------
18: if ((high < low) || (list->count < high)) {
	00021862:JA 0x00021872
	00021864:MOV RAX,qword ptr [RBP + -0x38]
	00021868:MOV RAX,qword ptr [RAX + 0x40]
	0002186c:CMP qword ptr [RBP + -0x50],RAX
	00021870:JBE 0x00021877
END_OF_LINE
----------------------------------------------
20: abort();
	00021872:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
22: high_local = high - low;
	0002187b:SUB qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
23: if (high_local != 0) {
	0002187f:CMP qword ptr [RBP + -0x50],0x0
	00021884:JZ 0x00021954
END_OF_LINE
----------------------------------------------
24: index = low;
	000218a9:JA 0x000218d2
END_OF_LINE
----------------------------------------------
25: if (list->count - 1 >> 1 < low) {
	00021852:MOV RAX,qword ptr [RAX + 0x40]
	00021856:MOV qword ptr [RBP + -0x8],RAX
	0002185a:MOV RAX,qword ptr [RBP + -0x48]
	0002185e:CMP RAX,qword ptr [RBP + -0x50]
	00021862:JA 0x00021872
	00021864:MOV RAX,qword ptr [RBP + -0x38]
	00021868:MOV RAX,qword ptr [RAX + 0x40]
	0002186c:CMP qword ptr [RBP + -0x50],RAX
	00021870:JBE 0x00021877
	00021872:CALL 0x000058f0
	00021877:MOV RAX,qword ptr [RBP + -0x48]
	0002187b:SUB qword ptr [RBP + -0x50],RAX
	0002187f:CMP qword ptr [RBP + -0x50],0x0
	00021884:JZ 0x00021954
	0002188a:MOV RAX,qword ptr [RBP + -0x48]
	0002188e:MOV qword ptr [RBP + -0x20],RAX
	00021892:MOV RAX,qword ptr [RBP + -0x48]
	00021896:MOV qword ptr [RBP + -0x18],RAX
	0002189a:MOV RAX,qword ptr [RBP + -0x8]
	0002189e:SUB RAX,0x1
	000218a2:SHR RAX,0x1
	000218a5:CMP qword ptr [RBP + -0x18],RAX
	000218a9:JA 0x000218d2
END_OF_LINE
----------------------------------------------
26: position = list->count - low;
	00021852:MOV RAX,qword ptr [RAX + 0x40]
	00021856:MOV qword ptr [RBP + -0x8],RAX
	0002185a:MOV RAX,qword ptr [RBP + -0x48]
	0002185e:CMP RAX,qword ptr [RBP + -0x50]
	00021862:JA 0x00021872
	00021864:MOV RAX,qword ptr [RBP + -0x38]
	00021868:MOV RAX,qword ptr [RAX + 0x40]
	0002186c:CMP qword ptr [RBP + -0x50],RAX
	00021870:JBE 0x00021877
	00021872:CALL 0x000058f0
	00021877:MOV RAX,qword ptr [RBP + -0x48]
	0002187b:SUB qword ptr [RBP + -0x50],RAX
	0002187f:CMP qword ptr [RBP + -0x50],0x0
	00021884:JZ 0x00021954
	0002188a:MOV RAX,qword ptr [RBP + -0x48]
	0002188e:MOV qword ptr [RBP + -0x20],RAX
	00021892:MOV RAX,qword ptr [RBP + -0x48]
	00021896:MOV qword ptr [RBP + -0x18],RAX
	0002189a:MOV RAX,qword ptr [RBP + -0x8]
	0002189e:SUB RAX,0x1
	000218a2:SHR RAX,0x1
	000218a5:CMP qword ptr [RBP + -0x18],RAX
	000218a9:JA 0x000218d2
	000218ab:MOV RAX,qword ptr [RBP + -0x38]
	000218af:MOV RAX,qword ptr [RAX + 0x28]
	000218b3:MOV qword ptr [RBP + -0x10],RAX
	000218b7:JMP 0x000218c9
	000218b9:MOV RAX,qword ptr [RBP + -0x10]
	000218bd:MOV RAX,qword ptr [RAX]
	000218c0:MOV qword ptr [RBP + -0x10],RAX
	000218c4:SUB qword ptr [RBP + -0x18],0x1
	000218c9:CMP qword ptr [RBP + -0x18],0x0
	000218ce:JNZ 0x000218b9
	000218d0:JMP 0x00021908
	000218d2:MOV RAX,qword ptr [RBP + -0x8]
	000218d6:SUB RAX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
27: node = (list->root).prev;
	000218e6:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
28: while (position = position - 1, position != 0) {
	000218da:SUB RAX,0x1
	000218de:MOV qword ptr [RBP + -0x18],RAX
	000218e2:MOV RAX,qword ptr [RBP + -0x38]
	000218e6:MOV RAX,qword ptr [RAX + 0x30]
	000218ea:MOV qword ptr [RBP + -0x10],RAX
	000218ee:JMP 0x00021901
	000218f0:MOV RAX,qword ptr [RBP + -0x10]
	000218f4:MOV RAX,qword ptr [RAX + 0x8]
	000218f8:MOV qword ptr [RBP + -0x10],RAX
	000218fc:SUB qword ptr [RBP + -0x18],0x1
	00021901:CMP qword ptr [RBP + -0x18],0x0
	00021906:JNZ 0x000218f0
END_OF_LINE
----------------------------------------------
29: node = node->prev;
	000218f4:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
33: node = (list->root).next;
	000218af:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
34: for (position = low; position != 0; position = position - 1) {
	000218b7:JMP 0x000218c9
	000218b9:MOV RAX,qword ptr [RBP + -0x10]
	000218bd:MOV RAX,qword ptr [RAX]
	000218c0:MOV qword ptr [RBP + -0x10],RAX
	000218c4:SUB qword ptr [RBP + -0x18],0x1
	000218c9:CMP qword ptr [RBP + -0x18],0x0
	000218ce:JNZ 0x000218b9
END_OF_LINE
----------------------------------------------
35: node = node->next;
	000218bd:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
39: iVar1 = (*compar)(node->value,elt);
	0002190c:MOV RAX,qword ptr [RAX + 0x10]
	00021910:MOV RDX,qword ptr [RBP + -0x58]
	00021914:MOV RCX,qword ptr [RBP + -0x40]
	00021918:MOV RSI,RDX
	0002191b:MOV RDI,RAX
	0002191e:CALL RCX
END_OF_LINE
----------------------------------------------
40: if (0 < iVar1) {
	00021927:JG 0x00021953
END_OF_LINE
----------------------------------------------
41: return 0xffffffffffffffff;
	0002195b:LEAVE
	0002195c:RET
END_OF_LINE
----------------------------------------------
43: if (iVar1 == 0) {
	00021929:CMP dword ptr [RBP + -0x24],0x0
	0002192d:JNZ 0x00021935
END_OF_LINE
----------------------------------------------
44: return index;
	0002195b:LEAVE
	0002195c:RET
END_OF_LINE
----------------------------------------------
46: node = node->next;
	00021939:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
47: index = index + 1;
	00021940:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
48: high_local = high_local - 1;
	00021945:SUB qword ptr [RBP + -0x50],0x1
END_OF_LINE
----------------------------------------------
49: } while (high_local != 0);
	0002194a:CMP qword ptr [RBP + -0x50],0x0
	0002194f:JNZ 0x00021908
END_OF_LINE
----------------------------------------------
51: return 0xffffffffffffffff;
	0002195b:LEAVE
	0002195c:RET
END_OF_LINE



Function: gl_linked_sortedlist_nx_add
----------------------------------------------
12: node = (list->root).next;
	00021979:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
13: while( true ) {
	0002199d:JS 0x000219b8
END_OF_LINE
----------------------------------------------
14: if (node == &list->root) {
	000219c7:ADD RAX,0x28
	000219cb:CMP qword ptr [RBP + -0x8],RAX
	000219cf:JNZ 0x00021983
END_OF_LINE
----------------------------------------------
15: pgVar2 = gl_linked_nx_add_last(list,elt);
	000219df:CALL 0x00020cdf
END_OF_LINE
----------------------------------------------
16: return pgVar2;
	000219e4:LEAVE
	000219e5:RET
END_OF_LINE
----------------------------------------------
18: iVar1 = (*compar)(node->value,elt);
	00021987:MOV RAX,qword ptr [RAX + 0x10]
	0002198b:MOV RDX,qword ptr [RBP + -0x28]
	0002198f:MOV RCX,qword ptr [RBP + -0x20]
	00021993:MOV RSI,RDX
	00021996:MOV RDI,RAX
	00021999:CALL RCX
END_OF_LINE
----------------------------------------------
19: if (-1 < iVar1) break;
	0002199b:TEST EAX,EAX
	0002199d:JS 0x000219b8
END_OF_LINE
----------------------------------------------
20: node = node->next;
	000219bc:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: pgVar2 = gl_linked_nx_add_before(list,node,elt);
	000219b1:CALL 0x00020d6f
END_OF_LINE
----------------------------------------------
23: return pgVar2;
	000219e4:LEAVE
	000219e5:RET
END_OF_LINE



Function: gl_linked_sortedlist_remove
----------------------------------------------
13: node = (list->root).next;
	00021a02:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
14: while ((node != &list->root && (iVar2 = (*compar)(node->value,elt), iVar2 < 1))) {
	00021a10:MOV RAX,qword ptr [RAX + 0x10]
	00021a14:MOV RDX,qword ptr [RBP + -0x28]
	00021a18:MOV RCX,qword ptr [RBP + -0x20]
	00021a1c:MOV RSI,RDX
	00021a1f:MOV RDI,RAX
	00021a22:CALL RCX
	00021a24:MOV dword ptr [RBP + -0xc],EAX
	00021a27:CMP dword ptr [RBP + -0xc],0x0
	00021a2b:JG 0x00021a63
	00021a2d:CMP dword ptr [RBP + -0xc],0x0
	00021a31:JNZ 0x00021a48
	00021a33:MOV RDX,qword ptr [RBP + -0x8]
	00021a37:MOV RAX,qword ptr [RBP + -0x18]
	00021a3b:MOV RSI,RDX
	00021a3e:MOV RDI,RAX
	00021a41:CALL 0x00020fd5
	00021a46:JMP 0x00021a69
	00021a48:MOV RAX,qword ptr [RBP + -0x8]
	00021a4c:MOV RAX,qword ptr [RAX]
	00021a4f:MOV qword ptr [RBP + -0x8],RAX
	00021a53:MOV RAX,qword ptr [RBP + -0x18]
	00021a57:ADD RAX,0x28
	00021a5b:CMP qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
15: if (iVar2 == 0) {
	00021a2d:CMP dword ptr [RBP + -0xc],0x0
	00021a31:JNZ 0x00021a48
END_OF_LINE
----------------------------------------------
16: _Var1 = gl_linked_remove_node(list,node);
	00021a41:CALL 0x00020fd5
END_OF_LINE
----------------------------------------------
17: return _Var1;
	00021a6a:RET
END_OF_LINE
----------------------------------------------
19: node = node->next;
	00021a4c:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
21: return false;
	00021a6a:RET
END_OF_LINE



Function: gl_list_nx_create_empty
----------------------------------------------
15: pgVar1 = (*implementation->nx_create_empty)
	00021a91:MOV R9,qword ptr [RAX]
	00021a94:MOVZX EDI,byte ptr [RBP + -0x24]
	00021a98:MOV RCX,qword ptr [RBP + -0x20]
	00021a9c:MOV RDX,qword ptr [RBP + -0x18]
	00021aa0:MOV RSI,qword ptr [RBP + -0x10]
	00021aa4:MOV RAX,qword ptr [RBP + -0x8]
	00021aa8:MOV R8D,EDI
	00021aab:MOV RDI,RAX
	00021aae:CALL R9
END_OF_LINE
----------------------------------------------
16: (implementation,equals_fn,hashcode_fn,dispose_fn,allow_duplicates);
	00021aae:CALL R9
END_OF_LINE
----------------------------------------------
17: return pgVar1;
	00021ab2:RET
END_OF_LINE



Function: gl_list_nx_create
----------------------------------------------
16: pgVar1 = (*implementation->nx_create)
	00021add:MOV R10,qword ptr [RAX + 0x8]
	00021ae1:MOVZX EDI,byte ptr [RBP + -0x24]
	00021ae5:MOV R8,qword ptr [RBP + -0x30]
	00021ae9:MOV RCX,qword ptr [RBP + -0x20]
	00021aed:MOV RDX,qword ptr [RBP + -0x18]
	00021af1:MOV RSI,qword ptr [RBP + -0x10]
	00021af5:MOV RAX,qword ptr [RBP + -0x8]
	00021af9:SUB RSP,0x8
	00021afd:PUSH qword ptr [RBP + 0x10]
	00021b00:MOV R9,R8
	00021b03:MOV R8D,EDI
	00021b06:MOV RDI,RAX
	00021b09:CALL R10
END_OF_LINE
----------------------------------------------
17: (implementation,equals_fn,hashcode_fn,dispose_fn,allow_duplicates,count,
	00021b09:CALL R10
END_OF_LINE
----------------------------------------------
18: contents);
	00021b09:CALL R10
END_OF_LINE
----------------------------------------------
19: return pgVar1;
	00021b11:RET
END_OF_LINE



Function: gl_list_size
----------------------------------------------
8: sVar1 = (*((list->base).vtable)->size)(list);
	00021b26:MOV RAX,qword ptr [RAX]
	00021b29:MOV RDX,qword ptr [RAX + 0x10]
	00021b2d:MOV RAX,qword ptr [RBP + -0x8]
	00021b31:MOV RDI,RAX
	00021b34:CALL RDX
END_OF_LINE
----------------------------------------------
9: return sVar1;
	00021b37:RET
END_OF_LINE



Function: gl_list_node_value
----------------------------------------------
9: pvVar1 = (*((list->base).vtable)->node_value)(list,node);
	00021b50:MOV RAX,qword ptr [RAX]
	00021b53:MOV RCX,qword ptr [RAX + 0x18]
	00021b57:MOV RDX,qword ptr [RBP + -0x10]
	00021b5b:MOV RAX,qword ptr [RBP + -0x8]
	00021b5f:MOV RSI,RDX
	00021b62:MOV RDI,RAX
	00021b65:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00021b68:RET
END_OF_LINE



Function: gl_list_node_nx_set_value
----------------------------------------------
10: iVar1 = (*((list->base).vtable)->node_nx_set_value)(list,node,elt);
	00021b85:MOV RAX,qword ptr [RAX]
	00021b88:MOV R8,qword ptr [RAX + 0x20]
	00021b8c:MOV RDX,qword ptr [RBP + -0x18]
	00021b90:MOV RCX,qword ptr [RBP + -0x10]
	00021b94:MOV RAX,qword ptr [RBP + -0x8]
	00021b98:MOV RSI,RCX
	00021b9b:MOV RDI,RAX
	00021b9e:CALL R8
END_OF_LINE
----------------------------------------------
11: return iVar1;
	00021ba2:RET
END_OF_LINE



Function: gl_list_next_node
----------------------------------------------
9: pgVar1 = (*((list->base).vtable)->next_node)(list,node);
	00021bbb:MOV RAX,qword ptr [RAX]
	00021bbe:MOV RCX,qword ptr [RAX + 0x28]
	00021bc2:MOV RDX,qword ptr [RBP + -0x10]
	00021bc6:MOV RAX,qword ptr [RBP + -0x8]
	00021bca:MOV RSI,RDX
	00021bcd:MOV RDI,RAX
	00021bd0:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pgVar1;
	00021bd3:RET
END_OF_LINE



Function: gl_list_previous_node
----------------------------------------------
9: pgVar1 = (*((list->base).vtable)->previous_node)(list,node);
	00021bec:MOV RAX,qword ptr [RAX]
	00021bef:MOV RCX,qword ptr [RAX + 0x30]
	00021bf3:MOV RDX,qword ptr [RBP + -0x10]
	00021bf7:MOV RAX,qword ptr [RBP + -0x8]
	00021bfb:MOV RSI,RDX
	00021bfe:MOV RDI,RAX
	00021c01:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pgVar1;
	00021c04:RET
END_OF_LINE



Function: gl_list_get_at
----------------------------------------------
9: pvVar1 = (*((list->base).vtable)->get_at)(list,position);
	00021c1d:MOV RAX,qword ptr [RAX]
	00021c20:MOV RCX,qword ptr [RAX + 0x38]
	00021c24:MOV RDX,qword ptr [RBP + -0x10]
	00021c28:MOV RAX,qword ptr [RBP + -0x8]
	00021c2c:MOV RSI,RDX
	00021c2f:MOV RDI,RAX
	00021c32:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00021c35:RET
END_OF_LINE



Function: gl_list_nx_set_at
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->nx_set_at)(list,position,elt);
	00021c52:MOV RAX,qword ptr [RAX]
	00021c55:MOV R8,qword ptr [RAX + 0x40]
	00021c59:MOV RDX,qword ptr [RBP + -0x18]
	00021c5d:MOV RCX,qword ptr [RBP + -0x10]
	00021c61:MOV RAX,qword ptr [RBP + -0x8]
	00021c65:MOV RSI,RCX
	00021c68:MOV RDI,RAX
	00021c6b:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00021c6f:RET
END_OF_LINE



Function: gl_list_search
----------------------------------------------
11: sVar1 = (*((list->base).vtable)->size)(list);
	00021c88:MOV RAX,qword ptr [RAX]
	00021c8b:MOV RDX,qword ptr [RAX + 0x10]
	00021c8f:MOV RAX,qword ptr [RBP + -0x18]
	00021c93:MOV RDI,RAX
	00021c96:CALL RDX
END_OF_LINE
----------------------------------------------
12: pgVar2 = (*((list->base).vtable)->search_from_to)(list,0,sVar1,elt);
	00021ca0:MOV RAX,qword ptr [RAX]
	00021ca3:MOV R8,qword ptr [RAX + 0x48]
	00021ca7:MOV RCX,qword ptr [RBP + -0x20]
	00021cab:MOV RDX,qword ptr [RBP + -0x8]
	00021caf:MOV RAX,qword ptr [RBP + -0x18]
	00021cb3:MOV ESI,0x0
	00021cb8:MOV RDI,RAX
	00021cbb:CALL R8
END_OF_LINE
----------------------------------------------
13: return pgVar2;
	00021cbf:RET
END_OF_LINE



Function: gl_list_search_from
----------------------------------------------
12: sVar1 = (*((list->base).vtable)->size)(list);
	00021cdc:MOV RAX,qword ptr [RAX]
	00021cdf:MOV RDX,qword ptr [RAX + 0x10]
	00021ce3:MOV RAX,qword ptr [RBP + -0x18]
	00021ce7:MOV RDI,RAX
	00021cea:CALL RDX
END_OF_LINE
----------------------------------------------
13: pgVar2 = (*((list->base).vtable)->search_from_to)(list,start_index,sVar1,elt);
	00021cf4:MOV RAX,qword ptr [RAX]
	00021cf7:MOV R8,qword ptr [RAX + 0x48]
	00021cfb:MOV RCX,qword ptr [RBP + -0x28]
	00021cff:MOV RDX,qword ptr [RBP + -0x8]
	00021d03:MOV RSI,qword ptr [RBP + -0x20]
	00021d07:MOV RAX,qword ptr [RBP + -0x18]
	00021d0b:MOV RDI,RAX
	00021d0e:CALL R8
END_OF_LINE
----------------------------------------------
14: return pgVar2;
	00021d12:RET
END_OF_LINE



Function: gl_list_search_from_to
----------------------------------------------
11: pgVar1 = (*((list->base).vtable)->search_from_to)(list,start_index,end_index,elt);
	00021d33:MOV RAX,qword ptr [RAX]
	00021d36:MOV R8,qword ptr [RAX + 0x48]
	00021d3a:MOV RCX,qword ptr [RBP + -0x20]
	00021d3e:MOV RDX,qword ptr [RBP + -0x18]
	00021d42:MOV RSI,qword ptr [RBP + -0x10]
	00021d46:MOV RAX,qword ptr [RBP + -0x8]
	00021d4a:MOV RDI,RAX
	00021d4d:CALL R8
END_OF_LINE
----------------------------------------------
12: return pgVar1;
	00021d51:RET
END_OF_LINE



Function: gl_list_indexof
----------------------------------------------
10: sVar1 = (*((list->base).vtable)->size)(list);
	00021d6a:MOV RAX,qword ptr [RAX]
	00021d6d:MOV RDX,qword ptr [RAX + 0x10]
	00021d71:MOV RAX,qword ptr [RBP + -0x18]
	00021d75:MOV RDI,RAX
	00021d78:CALL RDX
END_OF_LINE
----------------------------------------------
11: sVar1 = (*((list->base).vtable)->indexof_from_to)(list,0,sVar1,elt);
	00021d82:MOV RAX,qword ptr [RAX]
	00021d85:MOV R8,qword ptr [RAX + 0x50]
	00021d89:MOV RCX,qword ptr [RBP + -0x20]
	00021d8d:MOV RDX,qword ptr [RBP + -0x8]
	00021d91:MOV RAX,qword ptr [RBP + -0x18]
	00021d95:MOV ESI,0x0
	00021d9a:MOV RDI,RAX
	00021d9d:CALL R8
END_OF_LINE
----------------------------------------------
12: return sVar1;
	00021da1:RET
END_OF_LINE



Function: gl_list_indexof_from
----------------------------------------------
11: sVar1 = (*((list->base).vtable)->size)(list);
	00021dbe:MOV RAX,qword ptr [RAX]
	00021dc1:MOV RDX,qword ptr [RAX + 0x10]
	00021dc5:MOV RAX,qword ptr [RBP + -0x18]
	00021dc9:MOV RDI,RAX
	00021dcc:CALL RDX
END_OF_LINE
----------------------------------------------
12: sVar1 = (*((list->base).vtable)->indexof_from_to)(list,start_index,sVar1,elt);
	00021dd6:MOV RAX,qword ptr [RAX]
	00021dd9:MOV R8,qword ptr [RAX + 0x50]
	00021ddd:MOV RCX,qword ptr [RBP + -0x28]
	00021de1:MOV RDX,qword ptr [RBP + -0x8]
	00021de5:MOV RSI,qword ptr [RBP + -0x20]
	00021de9:MOV RAX,qword ptr [RBP + -0x18]
	00021ded:MOV RDI,RAX
	00021df0:CALL R8
END_OF_LINE
----------------------------------------------
13: return sVar1;
	00021df4:RET
END_OF_LINE



Function: gl_list_indexof_from_to
----------------------------------------------
11: sVar1 = (*((list->base).vtable)->indexof_from_to)(list,start_index,end_index,elt);
	00021e15:MOV RAX,qword ptr [RAX]
	00021e18:MOV R8,qword ptr [RAX + 0x50]
	00021e1c:MOV RCX,qword ptr [RBP + -0x20]
	00021e20:MOV RDX,qword ptr [RBP + -0x18]
	00021e24:MOV RSI,qword ptr [RBP + -0x10]
	00021e28:MOV RAX,qword ptr [RBP + -0x8]
	00021e2c:MOV RDI,RAX
	00021e2f:CALL R8
END_OF_LINE
----------------------------------------------
12: return sVar1;
	00021e33:RET
END_OF_LINE



Function: gl_list_nx_add_first
----------------------------------------------
9: pgVar1 = (*((list->base).vtable)->nx_add_first)(list,elt);
	00021e4c:MOV RAX,qword ptr [RAX]
	00021e4f:MOV RCX,qword ptr [RAX + 0x58]
	00021e53:MOV RDX,qword ptr [RBP + -0x10]
	00021e57:MOV RAX,qword ptr [RBP + -0x8]
	00021e5b:MOV RSI,RDX
	00021e5e:MOV RDI,RAX
	00021e61:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pgVar1;
	00021e64:RET
END_OF_LINE



Function: gl_list_nx_add_last
----------------------------------------------
9: pgVar1 = (*((list->base).vtable)->nx_add_last)(list,elt);
	00021e7d:MOV RAX,qword ptr [RAX]
	00021e80:MOV RCX,qword ptr [RAX + 0x60]
	00021e84:MOV RDX,qword ptr [RBP + -0x10]
	00021e88:MOV RAX,qword ptr [RBP + -0x8]
	00021e8c:MOV RSI,RDX
	00021e8f:MOV RDI,RAX
	00021e92:CALL RCX
END_OF_LINE
----------------------------------------------
10: return pgVar1;
	00021e95:RET
END_OF_LINE



Function: gl_list_nx_add_before
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->nx_add_before)(list,node,elt);
	00021eb2:MOV RAX,qword ptr [RAX]
	00021eb5:MOV R8,qword ptr [RAX + 0x68]
	00021eb9:MOV RDX,qword ptr [RBP + -0x18]
	00021ebd:MOV RCX,qword ptr [RBP + -0x10]
	00021ec1:MOV RAX,qword ptr [RBP + -0x8]
	00021ec5:MOV RSI,RCX
	00021ec8:MOV RDI,RAX
	00021ecb:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00021ecf:RET
END_OF_LINE



Function: gl_list_nx_add_after
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->nx_add_after)(list,node,elt);
	00021eec:MOV RAX,qword ptr [RAX]
	00021eef:MOV R8,qword ptr [RAX + 0x70]
	00021ef3:MOV RDX,qword ptr [RBP + -0x18]
	00021ef7:MOV RCX,qword ptr [RBP + -0x10]
	00021efb:MOV RAX,qword ptr [RBP + -0x8]
	00021eff:MOV RSI,RCX
	00021f02:MOV RDI,RAX
	00021f05:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00021f09:RET
END_OF_LINE



Function: gl_list_nx_add_at
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->nx_add_at)(list,position,elt);
	00021f26:MOV RAX,qword ptr [RAX]
	00021f29:MOV R8,qword ptr [RAX + 0x78]
	00021f2d:MOV RDX,qword ptr [RBP + -0x18]
	00021f31:MOV RCX,qword ptr [RBP + -0x10]
	00021f35:MOV RAX,qword ptr [RBP + -0x8]
	00021f39:MOV RSI,RCX
	00021f3c:MOV RDI,RAX
	00021f3f:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00021f43:RET
END_OF_LINE



Function: gl_list_remove_node
----------------------------------------------
9: _Var1 = (*((list->base).vtable)->remove_node)(list,node);
	00021f5c:MOV RAX,qword ptr [RAX]
	00021f5f:MOV RCX,qword ptr [RAX + 0x80]
	00021f66:MOV RDX,qword ptr [RBP + -0x10]
	00021f6a:MOV RAX,qword ptr [RBP + -0x8]
	00021f6e:MOV RSI,RDX
	00021f71:MOV RDI,RAX
	00021f74:CALL RCX
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00021f77:RET
END_OF_LINE



Function: gl_list_remove_at
----------------------------------------------
9: _Var1 = (*((list->base).vtable)->remove_at)(list,position);
	00021f90:MOV RAX,qword ptr [RAX]
	00021f93:MOV RCX,qword ptr [RAX + 0x88]
	00021f9a:MOV RDX,qword ptr [RBP + -0x10]
	00021f9e:MOV RAX,qword ptr [RBP + -0x8]
	00021fa2:MOV RSI,RDX
	00021fa5:MOV RDI,RAX
	00021fa8:CALL RCX
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00021fab:RET
END_OF_LINE



Function: gl_list_remove
----------------------------------------------
9: _Var1 = (*((list->base).vtable)->remove_elt)(list,elt);
	00021fc4:MOV RAX,qword ptr [RAX]
	00021fc7:MOV RCX,qword ptr [RAX + 0x90]
	00021fce:MOV RDX,qword ptr [RBP + -0x10]
	00021fd2:MOV RAX,qword ptr [RBP + -0x8]
	00021fd6:MOV RSI,RDX
	00021fd9:MOV RDI,RAX
	00021fdc:CALL RCX
END_OF_LINE
----------------------------------------------
10: return _Var1;
	00021fdf:RET
END_OF_LINE



Function: gl_list_free
----------------------------------------------
7: (*((list->base).vtable)->list_free)(list);
	00021ff4:MOV RAX,qword ptr [RAX]
	00021ff7:MOV RDX,qword ptr [RAX + 0x98]
	00021ffe:MOV RAX,qword ptr [RBP + -0x8]
	00022002:MOV RDI,RAX
	00022005:CALL RDX
END_OF_LINE
----------------------------------------------
8: return;
	00022009:RET
END_OF_LINE



Function: gl_list_iterator
----------------------------------------------
9: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002201e:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
10: (*((list->base).vtable)->iterator)(__return_storage_ptr__,list);
	00022031:MOV RAX,qword ptr [RAX]
	00022034:MOV RCX,qword ptr [RAX + 0xa0]
	0002203b:MOV RAX,qword ptr [RBP + -0x18]
	0002203f:MOV RDX,qword ptr [RBP + -0x20]
	00022043:MOV RSI,RDX
	00022046:MOV RDI,RAX
	00022049:CALL RCX
END_OF_LINE
----------------------------------------------
11: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002204f:SUB RAX,qword ptr FS:[0x28]
	00022058:JZ 0x0002205f
END_OF_LINE
----------------------------------------------
13: __stack_chk_fail();
	0002205a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
15: return __return_storage_ptr__;
	0002205f:MOV RAX,qword ptr [RBP + -0x18]
	00022063:LEAVE
	00022064:RET
END_OF_LINE



Function: gl_list_iterator_from_to
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00022081:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: (*((list->base).vtable)->iterator_from_to)(__return_storage_ptr__,list,start_index,end_index);
	00022094:MOV RAX,qword ptr [RAX]
	00022097:MOV R8,qword ptr [RAX + 0xa8]
	0002209e:MOV RAX,qword ptr [RBP + -0x18]
	000220a2:MOV RCX,qword ptr [RBP + -0x30]
	000220a6:MOV RDX,qword ptr [RBP + -0x28]
	000220aa:MOV RSI,qword ptr [RBP + -0x20]
	000220ae:MOV RDI,RAX
	000220b1:CALL R8
END_OF_LINE
----------------------------------------------
16: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000220b8:SUB RAX,qword ptr FS:[0x28]
	000220c1:JZ 0x000220c8
END_OF_LINE
----------------------------------------------
18: __stack_chk_fail();
	000220c3:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
20: return __return_storage_ptr__;
	000220c8:MOV RAX,qword ptr [RBP + -0x18]
	000220cc:LEAVE
	000220cd:RET
END_OF_LINE



Function: gl_list_iterator_next
----------------------------------------------
10: _Var1 = (*iterator->vtable->iterator_next)(iterator,eltp,nodep);
	000220ea:MOV RAX,qword ptr [RAX]
	000220ed:MOV R8,qword ptr [RAX + 0xb0]
	000220f4:MOV RDX,qword ptr [RBP + -0x18]
	000220f8:MOV RCX,qword ptr [RBP + -0x10]
	000220fc:MOV RAX,qword ptr [RBP + -0x8]
	00022100:MOV RSI,RCX
	00022103:MOV RDI,RAX
	00022106:CALL R8
END_OF_LINE
----------------------------------------------
11: return _Var1;
	0002210a:RET
END_OF_LINE



Function: gl_list_iterator_free
----------------------------------------------
7: (*iterator->vtable->iterator_free)(iterator);
	0002211f:MOV RAX,qword ptr [RAX]
	00022122:MOV RDX,qword ptr [RAX + 0xb8]
	00022129:MOV RAX,qword ptr [RBP + -0x8]
	0002212d:MOV RDI,RAX
	00022130:CALL RDX
END_OF_LINE
----------------------------------------------
8: return;
	00022134:RET
END_OF_LINE



Function: gl_sortedlist_search
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->sortedlist_search)(list,compar,elt);
	00022151:MOV RAX,qword ptr [RAX]
	00022154:MOV R8,qword ptr [RAX + 0xc0]
	0002215b:MOV RDX,qword ptr [RBP + -0x18]
	0002215f:MOV RCX,qword ptr [RBP + -0x10]
	00022163:MOV RAX,qword ptr [RBP + -0x8]
	00022167:MOV RSI,RCX
	0002216a:MOV RDI,RAX
	0002216d:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00022171:RET
END_OF_LINE



Function: gl_sortedlist_search_from_to
----------------------------------------------
15: pgVar1 = (*((list->base).vtable)->sortedlist_search_from_to)
	00022196:MOV RAX,qword ptr [RAX]
	00022199:MOV R9,qword ptr [RAX + 0xc8]
	000221a0:MOV RDI,qword ptr [RBP + -0x28]
	000221a4:MOV RCX,qword ptr [RBP + -0x20]
	000221a8:MOV RDX,qword ptr [RBP + -0x18]
	000221ac:MOV RSI,qword ptr [RBP + -0x10]
	000221b0:MOV RAX,qword ptr [RBP + -0x8]
	000221b4:MOV R8,RDI
	000221b7:MOV RDI,RAX
	000221ba:CALL R9
END_OF_LINE
----------------------------------------------
16: (list,compar,start_index,end_index,elt);
	000221ba:CALL R9
END_OF_LINE
----------------------------------------------
17: return pgVar1;
	000221be:RET
END_OF_LINE



Function: gl_sortedlist_indexof
----------------------------------------------
10: sVar1 = (*((list->base).vtable)->sortedlist_indexof)(list,compar,elt);
	000221db:MOV RAX,qword ptr [RAX]
	000221de:MOV R8,qword ptr [RAX + 0xd0]
	000221e5:MOV RDX,qword ptr [RBP + -0x18]
	000221e9:MOV RCX,qword ptr [RBP + -0x10]
	000221ed:MOV RAX,qword ptr [RBP + -0x8]
	000221f1:MOV RSI,RCX
	000221f4:MOV RDI,RAX
	000221f7:CALL R8
END_OF_LINE
----------------------------------------------
11: return sVar1;
	000221fb:RET
END_OF_LINE



Function: gl_sortedlist_indexof_from_to
----------------------------------------------
14: sVar1 = (*((list->base).vtable)->sortedlist_indexof_from_to)
	00022220:MOV RAX,qword ptr [RAX]
	00022223:MOV R9,qword ptr [RAX + 0xd8]
	0002222a:MOV RDI,qword ptr [RBP + -0x28]
	0002222e:MOV RCX,qword ptr [RBP + -0x20]
	00022232:MOV RDX,qword ptr [RBP + -0x18]
	00022236:MOV RSI,qword ptr [RBP + -0x10]
	0002223a:MOV RAX,qword ptr [RBP + -0x8]
	0002223e:MOV R8,RDI
	00022241:MOV RDI,RAX
	00022244:CALL R9
END_OF_LINE
----------------------------------------------
15: (list,compar,start_index,end_index,elt);
	00022244:CALL R9
END_OF_LINE
----------------------------------------------
16: return sVar1;
	00022248:RET
END_OF_LINE



Function: gl_sortedlist_nx_add
----------------------------------------------
10: pgVar1 = (*((list->base).vtable)->sortedlist_nx_add)(list,compar,elt);
	00022265:MOV RAX,qword ptr [RAX]
	00022268:MOV R8,qword ptr [RAX + 0xe0]
	0002226f:MOV RDX,qword ptr [RBP + -0x18]
	00022273:MOV RCX,qword ptr [RBP + -0x10]
	00022277:MOV RAX,qword ptr [RBP + -0x8]
	0002227b:MOV RSI,RCX
	0002227e:MOV RDI,RAX
	00022281:CALL R8
END_OF_LINE
----------------------------------------------
11: return pgVar1;
	00022285:RET
END_OF_LINE



Function: gl_sortedlist_remove
----------------------------------------------
10: _Var1 = (*((list->base).vtable)->sortedlist_remove)(list,compar,elt);
	000222a2:MOV RAX,qword ptr [RAX]
	000222a5:MOV R8,qword ptr [RAX + 0xe8]
	000222ac:MOV RDX,qword ptr [RBP + -0x18]
	000222b0:MOV RCX,qword ptr [RBP + -0x10]
	000222b4:MOV RAX,qword ptr [RBP + -0x8]
	000222b8:MOV RSI,RCX
	000222bb:MOV RDI,RAX
	000222be:CALL R8
END_OF_LINE
----------------------------------------------
11: return _Var1;
	000222c2:RET
END_OF_LINE



Function: time_overflow
----------------------------------------------
7: return false;
	000222d5:RET
END_OF_LINE



Function: to_uchar
----------------------------------------------
7: return ch;
	000222e8:RET
END_OF_LINE



Function: dbg_printf
----------------------------------------------
38: if (in_AL != '\0') {
	00022322:TEST AL,AL
	00022324:JZ 0x00022346
END_OF_LINE
----------------------------------------------
39: local_88 = in_XMM0_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
40: local_78 = in_XMM1_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
41: local_68 = in_XMM2_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_58 = in_XMM3_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_48 = in_XMM4_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_38 = in_XMM5_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_28 = in_XMM6_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_18 = in_XMM7_Da;
	00022342:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
48: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00022346:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
49: local_b0 = in_RSI;
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
50: local_a8 = in_RDX;
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
51: local_a0 = in_RCX;
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
52: local_98 = in_R8;
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
53: local_90 = in_R9;
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
54: fwrite("date: ",1,6,pFRam0000000000144490);
	00022379:CALL 0x00006010
END_OF_LINE
----------------------------------------------
55: args[0].gp_offset = 8;
	0002237e:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
56: args[0].fp_offset = 0x30;
	00022388:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
57: args[0].overflow_arg_area = &stack0x00000008;
	00022392:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
58: args[0].reg_save_area = local_b8;
	0002239d:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
59: vfprintf(pFRam0000000000144490,msg,args);
	000223b5:LEA RDX,[RBP + -0xd0]
	000223bc:MOV RCX,qword ptr [RBP + -0xd8]
	000223c3:MOV RSI,RCX
	000223c6:MOV RDI,RAX
	000223c9:CALL 0x00005f90
END_OF_LINE
----------------------------------------------
60: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000223d6:SUB RAX,qword ptr FS:[0x28]
	000223df:JZ 0x000223e6
END_OF_LINE
----------------------------------------------
62: __stack_chk_fail();
	000223e1:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
64: return;
	000223e7:RET
END_OF_LINE



Function: digits_to_date_time
----------------------------------------------
7: if ((((pc->dates_seen == 0) || ((pc->year).digits != 0)) || (pc->rels_seen == true)) ||
	000223f8:MOV RAX,qword ptr [RAX + 0xa8]
	000223ff:TEST RAX,RAX
	00022402:JZ 0x00022469
	00022404:MOV RAX,qword ptr [RBP + -0x8]
	00022408:MOV RAX,qword ptr [RAX + 0x30]
	0002240c:TEST RAX,RAX
	0002240f:JNZ 0x00022469
	00022411:MOV RAX,qword ptr [RBP + -0x8]
	00022415:MOVZX EAX,byte ptr [RAX + 0xa1]
	0002241c:XOR EAX,0x1
	0002241f:TEST AL,AL
	00022421:JZ 0x00022469
	00022423:MOV RAX,qword ptr [RBP + -0x8]
	00022427:MOV RAX,qword ptr [RAX + 0xc8]
	0002242e:TEST RAX,RAX
	00022431:JNZ 0x0002243d
	00022433:MOV RAX,qword ptr [RBP + 0x20]
	00022437:CMP RAX,0x2
	0002243b:JLE 0x00022469
END_OF_LINE
----------------------------------------------
8: ((pc->times_seen == 0 && (text_int.digits < 3)))) {
	00022427:MOV RAX,qword ptr [RAX + 0xc8]
	0002242e:TEST RAX,RAX
	00022431:JNZ 0x0002243d
	00022433:MOV RAX,qword ptr [RBP + 0x20]
	00022437:CMP RAX,0x2
	0002243b:JLE 0x00022469
END_OF_LINE
----------------------------------------------
9: if (text_int.digits < 5) {
	00022471:JLE 0x00022598
END_OF_LINE
----------------------------------------------
10: pc->times_seen = pc->times_seen + 1;
	0002259c:MOV RAX,qword ptr [RAX + 0xc8]
	000225a3:LEA RDX,[RAX + 0x1]
	000225a7:MOV RAX,qword ptr [RBP + -0x8]
	000225ab:MOV qword ptr [RAX + 0xc8],RDX
END_OF_LINE
----------------------------------------------
11: if (text_int.digits < 3) {
	000225ba:JG 0x000225d6
END_OF_LINE
----------------------------------------------
12: pc->hour = text_int.value;
	000225c4:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
13: pc->minutes = 0;
	000225cc:MOV qword ptr [RAX + 0x50],0x0
END_OF_LINE
----------------------------------------------
16: pc->hour = text_int.value / 100;
	000225ee:SAR RAX,0x6
	000225f2:SAR RCX,0x3f
	000225f6:SUB RAX,RCX
	000225f9:MOV RDX,RAX
	000225fc:MOV RAX,qword ptr [RBP + -0x8]
	00022600:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
17: pc->minutes = text_int.value % 100;
	00022646:SUB RCX,RAX
	00022649:MOV RDX,RCX
	0002264c:MOV RAX,qword ptr [RBP + -0x8]
	00022650:MOV qword ptr [RAX + 0x50],RDX
END_OF_LINE
----------------------------------------------
19: (pc->seconds).tv_sec = 0;
	00022658:MOV qword ptr [RAX + 0x58],0x0
END_OF_LINE
----------------------------------------------
20: (pc->seconds).tv_nsec = 0;
	00022664:MOV qword ptr [RAX + 0x60],0x0
END_OF_LINE
----------------------------------------------
21: pc->meridian = 2;
	00022670:MOV dword ptr [RAX + 0x1c],0x2
END_OF_LINE
----------------------------------------------
24: pc->dates_seen = pc->dates_seen + 1;
	0002247b:MOV RAX,qword ptr [RAX + 0xa8]
	00022482:LEA RDX,[RAX + 0x1]
	00022486:MOV RAX,qword ptr [RBP + -0x8]
	0002248a:MOV qword ptr [RAX + 0xa8],RDX
END_OF_LINE
----------------------------------------------
25: pc->day = text_int.value % 100;
	000224d3:SUB RCX,RAX
	000224d6:MOV RDX,RCX
	000224d9:MOV RAX,qword ptr [RBP + -0x8]
	000224dd:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
26: pc->month = (text_int.value / 100) % 100;
	000224f9:SAR RAX,0x6
	000224fd:SAR RCX,0x3f
	00022501:MOV RDX,RCX
	00022504:SUB RAX,RDX
	00022507:MOV RCX,RAX
	0002250a:MOV RDX,-0x5c28f5c28f5c28f5
	00022514:MOV RAX,RCX
	00022517:IMUL RDX
	0002251a:LEA RAX,[RDX + RCX*0x1]
	0002251e:SAR RAX,0x6
	00022522:MOV RSI,RCX
	00022525:SAR RSI,0x3f
	00022529:SUB RAX,RSI
	0002252c:MOV RDX,RAX
	0002252f:MOV RAX,RDX
	00022532:SHL RAX,0x2
	00022536:ADD RAX,RDX
	00022539:LEA RDX,[RAX*0x4]
	00022541:ADD RAX,RDX
	00022544:SHL RAX,0x2
	00022548:SUB RCX,RAX
	0002254b:MOV RDX,RCX
	0002254e:MOV RAX,qword ptr [RBP + -0x8]
	00022552:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
27: (pc->year).value = text_int.value / 10000;
	0002256d:SAR RAX,0xb
	00022571:SAR RCX,0x3f
	00022575:SUB RAX,RCX
	00022578:MOV RDX,RAX
	0002257b:MOV RAX,qword ptr [RBP + -0x8]
	0002257f:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
28: (pc->year).digits = text_int.digits + -4;
	00022587:LEA RDX,[RAX + -0x4]
	0002258b:MOV RAX,qword ptr [RBP + -0x8]
	0002258f:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
32: pc->year_seen = true;
	00022441:MOV byte ptr [RAX + 0xd8],0x1
END_OF_LINE
----------------------------------------------
33: (pc->year).negative = text_int.negative;
	00022454:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
34: *(undefined7 *)&(pc->year).field_0x1 = text_int._1_7_;
	00022454:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
35: (pc->year).value = text_int.value;
	00022458:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
36: (pc->year).digits = text_int.digits;
	00022460:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
38: return;
	00022679:RET
END_OF_LINE



Function: apply_relative_time
----------------------------------------------
16: if (factor < 0) {
	00022689:CMP dword ptr [RBP + -0xc],0x0
	0002268d:JNS 0x000227f5
END_OF_LINE
----------------------------------------------
17: iVar1 = (pc->rel).ns;
	00022697:MOV EAX,dword ptr [RAX + 0x98]
END_OF_LINE
----------------------------------------------
18: (pc->rel).ns = iVar1 - rel.ns;
	000226a6:SUB EAX,EDX
	000226a8:JNO 0x000226b0
	000226aa:MOV R11D,0x1
	000226b0:MOV EDX,EAX
	000226b2:MOV RAX,qword ptr [RBP + -0x8]
	000226b6:MOV dword ptr [RAX + 0x98],EDX
END_OF_LINE
----------------------------------------------
19: lVar2 = (pc->rel).seconds;
	000226c0:MOV RAX,qword ptr [RAX + 0x90]
END_OF_LINE
----------------------------------------------
20: (pc->rel).seconds = lVar2 - rel.seconds;
	000226d1:SUB RAX,RDX
	000226d4:JNO 0x000226dc
	000226d6:MOV R10D,0x1
	000226dc:MOV RDX,RAX
	000226df:MOV RAX,qword ptr [RBP + -0x8]
	000226e3:MOV qword ptr [RAX + 0x90],RDX
END_OF_LINE
----------------------------------------------
21: lVar3 = (pc->rel).minutes;
	000226ee:MOV RAX,qword ptr [RAX + 0x88]
END_OF_LINE
----------------------------------------------
22: (pc->rel).minutes = lVar3 - rel.minutes;
	000226ff:SUB RAX,RDX
	00022702:JNO 0x0002270a
	00022704:MOV R9D,0x1
	0002270a:MOV RDX,RAX
	0002270d:MOV RAX,qword ptr [RBP + -0x8]
	00022711:MOV qword ptr [RAX + 0x88],RDX
END_OF_LINE
----------------------------------------------
23: lVar4 = (pc->rel).hour;
	0002271c:MOV RAX,qword ptr [RAX + 0x80]
END_OF_LINE
----------------------------------------------
24: (pc->rel).hour = lVar4 - rel.hour;
	0002272d:SUB RAX,RDX
	00022730:JNO 0x00022738
	00022732:MOV R8D,0x1
	00022738:MOV RDX,RAX
	0002273b:MOV RAX,qword ptr [RBP + -0x8]
	0002273f:MOV qword ptr [RAX + 0x80],RDX
END_OF_LINE
----------------------------------------------
25: lVar5 = (pc->rel).day;
	0002274a:MOV RAX,qword ptr [RAX + 0x78]
END_OF_LINE
----------------------------------------------
26: (pc->rel).day = lVar5 - rel.day;
	00022757:SUB RAX,RDX
	0002275a:JNO 0x00022761
	0002275c:MOV EDI,0x1
	00022761:MOV RDX,RAX
	00022764:MOV RAX,qword ptr [RBP + -0x8]
	00022768:MOV qword ptr [RAX + 0x78],RDX
END_OF_LINE
----------------------------------------------
27: lVar6 = (pc->rel).month;
	00022770:MOV RAX,qword ptr [RAX + 0x70]
END_OF_LINE
----------------------------------------------
28: (pc->rel).month = lVar6 - rel.month;
	0002277d:SUB RAX,RDX
	00022780:JNO 0x00022787
	00022782:MOV ESI,0x1
	00022787:MOV RDX,RAX
	0002278a:MOV RAX,qword ptr [RBP + -0x8]
	0002278e:MOV qword ptr [RAX + 0x70],RDX
END_OF_LINE
----------------------------------------------
29: lVar7 = (pc->rel).year;
	00022796:MOV RAX,qword ptr [RAX + 0x68]
END_OF_LINE
----------------------------------------------
30: (pc->rel).year = lVar7 - rel.year;
	000227a3:SUB RAX,RDX
	000227a6:JNO 0x000227ad
	000227a8:MOV ECX,0x1
	000227ad:MOV RDX,RAX
	000227b0:MOV RAX,qword ptr [RBP + -0x8]
	000227b4:MOV qword ptr [RAX + 0x68],RDX
END_OF_LINE
----------------------------------------------
31: bVar8 = SBORROW8(lVar7,rel.year) ||
	000227a3:SUB RAX,RDX
	000227a6:JNO 0x000227ad
	000227a8:MOV ECX,0x1
	000227ad:MOV RDX,RAX
	000227b0:MOV RAX,qword ptr [RBP + -0x8]
	000227b4:MOV qword ptr [RAX + 0x68],RDX
	000227b8:MOV EAX,R11D
	000227bb:MOV EDX,EAX
	000227bd:AND EDX,0x1
	000227c0:MOV RAX,R10
	000227c3:AND EAX,0x1
	000227c6:OR EDX,EAX
	000227c8:MOV RAX,R9
	000227cb:AND EAX,0x1
	000227ce:OR EDX,EAX
	000227d0:MOV RAX,R8
	000227d3:AND EAX,0x1
	000227d6:OR EDX,EAX
	000227d8:MOV RAX,RDI
	000227db:AND EAX,0x1
	000227de:OR EDX,EAX
	000227e0:MOV RAX,RSI
	000227e3:AND EAX,0x1
	000227e6:OR EDX,EAX
	000227e8:MOV RAX,RCX
	000227eb:AND EAX,0x1
	000227ee:OR EAX,EDX
END_OF_LINE
----------------------------------------------
32: (((((SBORROW4(iVar1,rel.ns) || SBORROW8(lVar2,rel.seconds)) ||
	000226a6:SUB EAX,EDX
	000226a8:JNO 0x000226b0
	000226aa:MOV R11D,0x1
	000226b0:MOV EDX,EAX
	000226b2:MOV RAX,qword ptr [RBP + -0x8]
	000226b6:MOV dword ptr [RAX + 0x98],EDX
	000226bc:MOV RAX,qword ptr [RBP + -0x8]
	000226c0:MOV RAX,qword ptr [RAX + 0x90]
	000226c7:MOV RDX,qword ptr [RBP + 0x38]
	000226cb:MOV R10D,0x0
	000226d1:SUB RAX,RDX
	000226d4:JNO 0x000226dc
	000226d6:MOV R10D,0x1
	000226dc:MOV RDX,RAX
	000226df:MOV RAX,qword ptr [RBP + -0x8]
	000226e3:MOV qword ptr [RAX + 0x90],RDX
	000226ea:MOV RAX,qword ptr [RBP + -0x8]
	000226ee:MOV RAX,qword ptr [RAX + 0x88]
	000226f5:MOV RDX,qword ptr [RBP + 0x30]
	000226f9:MOV R9D,0x0
	000226ff:SUB RAX,RDX
	00022702:JNO 0x0002270a
	00022704:MOV R9D,0x1
	0002270a:MOV RDX,RAX
	0002270d:MOV RAX,qword ptr [RBP + -0x8]
	00022711:MOV qword ptr [RAX + 0x88],RDX
	00022718:MOV RAX,qword ptr [RBP + -0x8]
	0002271c:MOV RAX,qword ptr [RAX + 0x80]
	00022723:MOV RDX,qword ptr [RBP + 0x28]
	00022727:MOV R8D,0x0
	0002272d:SUB RAX,RDX
	00022730:JNO 0x00022738
	00022732:MOV R8D,0x1
	00022738:MOV RDX,RAX
	0002273b:MOV RAX,qword ptr [RBP + -0x8]
	0002273f:MOV qword ptr [RAX + 0x80],RDX
	00022746:MOV RAX,qword ptr [RBP + -0x8]
	0002274a:MOV RAX,qword ptr [RAX + 0x78]
	0002274e:MOV RDX,qword ptr [RBP + 0x20]
	00022752:MOV EDI,0x0
	00022757:SUB RAX,RDX
	0002275a:JNO 0x00022761
	0002275c:MOV EDI,0x1
	00022761:MOV RDX,RAX
	00022764:MOV RAX,qword ptr [RBP + -0x8]
	00022768:MOV qword ptr [RAX + 0x78],RDX
	0002276c:MOV RAX,qword ptr [RBP + -0x8]
	00022770:MOV RAX,qword ptr [RAX + 0x70]
	00022774:MOV RDX,qword ptr [RBP + 0x18]
	00022778:MOV ESI,0x0
	0002277d:SUB RAX,RDX
	00022780:JNO 0x00022787
	00022782:MOV ESI,0x1
	00022787:MOV RDX,RAX
	0002278a:MOV RAX,qword ptr [RBP + -0x8]
	0002278e:MOV qword ptr [RAX + 0x70],RDX
	00022792:MOV RAX,qword ptr [RBP + -0x8]
	00022796:MOV RAX,qword ptr [RAX + 0x68]
	0002279a:MOV RDX,qword ptr [RBP + 0x10]
	0002279e:MOV ECX,0x0
	000227a3:SUB RAX,RDX
	000227a6:JNO 0x000227ad
	000227a8:MOV ECX,0x1
	000227ad:MOV RDX,RAX
	000227b0:MOV RAX,qword ptr [RBP + -0x8]
	000227b4:MOV qword ptr [RAX + 0x68],RDX
	000227b8:MOV EAX,R11D
	000227bb:MOV EDX,EAX
	000227bd:AND EDX,0x1
	000227c0:MOV RAX,R10
	000227c3:AND EAX,0x1
	000227c6:OR EDX,EAX
	000227c8:MOV RAX,R9
	000227cb:AND EAX,0x1
	000227ce:OR EDX,EAX
END_OF_LINE
----------------------------------------------
33: SBORROW8(lVar3,rel.minutes)) || SBORROW8(lVar4,rel.hour)) || SBORROW8(lVar5,rel.day))
	000226ff:SUB RAX,RDX
	00022702:JNO 0x0002270a
	00022704:MOV R9D,0x1
	0002270a:MOV RDX,RAX
	0002270d:MOV RAX,qword ptr [RBP + -0x8]
	00022711:MOV qword ptr [RAX + 0x88],RDX
	00022718:MOV RAX,qword ptr [RBP + -0x8]
	0002271c:MOV RAX,qword ptr [RAX + 0x80]
	00022723:MOV RDX,qword ptr [RBP + 0x28]
	00022727:MOV R8D,0x0
	0002272d:SUB RAX,RDX
	00022730:JNO 0x00022738
	00022732:MOV R8D,0x1
	00022738:MOV RDX,RAX
	0002273b:MOV RAX,qword ptr [RBP + -0x8]
	0002273f:MOV qword ptr [RAX + 0x80],RDX
	00022746:MOV RAX,qword ptr [RBP + -0x8]
	0002274a:MOV RAX,qword ptr [RAX + 0x78]
	0002274e:MOV RDX,qword ptr [RBP + 0x20]
	00022752:MOV EDI,0x0
	00022757:SUB RAX,RDX
	0002275a:JNO 0x00022761
	0002275c:MOV EDI,0x1
	00022761:MOV RDX,RAX
	00022764:MOV RAX,qword ptr [RBP + -0x8]
	00022768:MOV qword ptr [RAX + 0x78],RDX
	0002276c:MOV RAX,qword ptr [RBP + -0x8]
	00022770:MOV RAX,qword ptr [RAX + 0x70]
	00022774:MOV RDX,qword ptr [RBP + 0x18]
	00022778:MOV ESI,0x0
	0002277d:SUB RAX,RDX
	00022780:JNO 0x00022787
	00022782:MOV ESI,0x1
	00022787:MOV RDX,RAX
	0002278a:MOV RAX,qword ptr [RBP + -0x8]
	0002278e:MOV qword ptr [RAX + 0x70],RDX
	00022792:MOV RAX,qword ptr [RBP + -0x8]
	00022796:MOV RAX,qword ptr [RAX + 0x68]
	0002279a:MOV RDX,qword ptr [RBP + 0x10]
	0002279e:MOV ECX,0x0
	000227a3:SUB RAX,RDX
	000227a6:JNO 0x000227ad
	000227a8:MOV ECX,0x1
	000227ad:MOV RDX,RAX
	000227b0:MOV RAX,qword ptr [RBP + -0x8]
	000227b4:MOV qword ptr [RAX + 0x68],RDX
	000227b8:MOV EAX,R11D
	000227bb:MOV EDX,EAX
	000227bd:AND EDX,0x1
	000227c0:MOV RAX,R10
	000227c3:AND EAX,0x1
	000227c6:OR EDX,EAX
	000227c8:MOV RAX,R9
	000227cb:AND EAX,0x1
	000227ce:OR EDX,EAX
	000227d0:MOV RAX,R8
	000227d3:AND EAX,0x1
	000227d6:OR EDX,EAX
	000227d8:MOV RAX,RDI
	000227db:AND EAX,0x1
	000227de:OR EDX,EAX
END_OF_LINE
----------------------------------------------
34: || SBORROW8(lVar6,rel.month));
	0002277d:SUB RAX,RDX
	00022780:JNO 0x00022787
	00022782:MOV ESI,0x1
	00022787:MOV RDX,RAX
	0002278a:MOV RAX,qword ptr [RBP + -0x8]
	0002278e:MOV qword ptr [RAX + 0x70],RDX
	00022792:MOV RAX,qword ptr [RBP + -0x8]
	00022796:MOV RAX,qword ptr [RAX + 0x68]
	0002279a:MOV RDX,qword ptr [RBP + 0x10]
	0002279e:MOV ECX,0x0
	000227a3:SUB RAX,RDX
	000227a6:JNO 0x000227ad
	000227a8:MOV ECX,0x1
	000227ad:MOV RDX,RAX
	000227b0:MOV RAX,qword ptr [RBP + -0x8]
	000227b4:MOV qword ptr [RAX + 0x68],RDX
	000227b8:MOV EAX,R11D
	000227bb:MOV EDX,EAX
	000227bd:AND EDX,0x1
	000227c0:MOV RAX,R10
	000227c3:AND EAX,0x1
	000227c6:OR EDX,EAX
	000227c8:MOV RAX,R9
	000227cb:AND EAX,0x1
	000227ce:OR EDX,EAX
	000227d0:MOV RAX,R8
	000227d3:AND EAX,0x1
	000227d6:OR EDX,EAX
	000227d8:MOV RAX,RDI
	000227db:AND EAX,0x1
	000227de:OR EDX,EAX
	000227e0:MOV RAX,RSI
	000227e3:AND EAX,0x1
	000227e6:OR EDX,EAX
END_OF_LINE
----------------------------------------------
37: iVar1 = (pc->rel).ns;
	000227f9:MOV EDX,dword ptr [RAX + 0x98]
END_OF_LINE
----------------------------------------------
38: (pc->rel).ns = rel.ns + iVar1;
	00022808:ADD EAX,EDX
	0002280a:JNO 0x00022812
	0002280c:MOV R11D,0x1
	00022812:MOV EDX,EAX
	00022814:MOV RAX,qword ptr [RBP + -0x8]
	00022818:MOV dword ptr [RAX + 0x98],EDX
END_OF_LINE
----------------------------------------------
39: lVar2 = (pc->rel).seconds;
	00022822:MOV RDX,qword ptr [RAX + 0x90]
END_OF_LINE
----------------------------------------------
40: (pc->rel).seconds = rel.seconds + lVar2;
	00022833:ADD RAX,RDX
	00022836:JNO 0x0002283e
	00022838:MOV R10D,0x1
	0002283e:MOV RDX,RAX
	00022841:MOV RAX,qword ptr [RBP + -0x8]
	00022845:MOV qword ptr [RAX + 0x90],RDX
END_OF_LINE
----------------------------------------------
41: lVar3 = (pc->rel).minutes;
	00022850:MOV RDX,qword ptr [RAX + 0x88]
END_OF_LINE
----------------------------------------------
42: (pc->rel).minutes = rel.minutes + lVar3;
	00022861:ADD RAX,RDX
	00022864:JNO 0x0002286c
	00022866:MOV R9D,0x1
	0002286c:MOV RDX,RAX
	0002286f:MOV RAX,qword ptr [RBP + -0x8]
	00022873:MOV qword ptr [RAX + 0x88],RDX
END_OF_LINE
----------------------------------------------
43: lVar4 = (pc->rel).hour;
	0002287e:MOV RDX,qword ptr [RAX + 0x80]
END_OF_LINE
----------------------------------------------
44: (pc->rel).hour = rel.hour + lVar4;
	0002288f:ADD RAX,RDX
	00022892:JNO 0x0002289a
	00022894:MOV R8D,0x1
	0002289a:MOV RDX,RAX
	0002289d:MOV RAX,qword ptr [RBP + -0x8]
	000228a1:MOV qword ptr [RAX + 0x80],RDX
END_OF_LINE
----------------------------------------------
45: lVar5 = (pc->rel).day;
	000228ac:MOV RDX,qword ptr [RAX + 0x78]
END_OF_LINE
----------------------------------------------
46: (pc->rel).day = rel.day + lVar5;
	000228b9:ADD RAX,RDX
	000228bc:JNO 0x000228c3
	000228be:MOV EDI,0x1
	000228c3:MOV RDX,RAX
	000228c6:MOV RAX,qword ptr [RBP + -0x8]
	000228ca:MOV qword ptr [RAX + 0x78],RDX
END_OF_LINE
----------------------------------------------
47: lVar6 = (pc->rel).month;
	000228d2:MOV RDX,qword ptr [RAX + 0x70]
END_OF_LINE
----------------------------------------------
48: (pc->rel).month = rel.month + lVar6;
	000228df:ADD RAX,RDX
	000228e2:JNO 0x000228e9
	000228e4:MOV ESI,0x1
	000228e9:MOV RDX,RAX
	000228ec:MOV RAX,qword ptr [RBP + -0x8]
	000228f0:MOV qword ptr [RAX + 0x70],RDX
END_OF_LINE
----------------------------------------------
49: lVar7 = (pc->rel).year;
	000228f8:MOV RDX,qword ptr [RAX + 0x68]
END_OF_LINE
----------------------------------------------
50: (pc->rel).year = rel.year + lVar7;
	00022905:ADD RAX,RDX
	00022908:JNO 0x0002290f
	0002290a:MOV ECX,0x1
	0002290f:MOV RDX,RAX
	00022912:MOV RAX,qword ptr [RBP + -0x8]
	00022916:MOV qword ptr [RAX + 0x68],RDX
END_OF_LINE
----------------------------------------------
51: bVar8 = SCARRY8(rel.year,lVar7) ||
	00022905:ADD RAX,RDX
	00022908:JNO 0x0002290f
	0002290a:MOV ECX,0x1
	0002290f:MOV RDX,RAX
	00022912:MOV RAX,qword ptr [RBP + -0x8]
	00022916:MOV qword ptr [RAX + 0x68],RDX
	0002291a:MOV EAX,R11D
	0002291d:MOV EDX,EAX
	0002291f:AND EDX,0x1
	00022922:MOV RAX,R10
	00022925:AND EAX,0x1
	00022928:OR EDX,EAX
	0002292a:MOV RAX,R9
	0002292d:AND EAX,0x1
	00022930:OR EDX,EAX
	00022932:MOV RAX,R8
	00022935:AND EAX,0x1
	00022938:OR EDX,EAX
	0002293a:MOV RAX,RDI
	0002293d:AND EAX,0x1
	00022940:OR EDX,EAX
	00022942:MOV RAX,RSI
	00022945:AND EAX,0x1
	00022948:OR EDX,EAX
	0002294a:MOV RAX,RCX
	0002294d:AND EAX,0x1
	00022950:OR EAX,EDX
END_OF_LINE
----------------------------------------------
52: (((((SCARRY4(rel.ns,iVar1) || SCARRY8(rel.seconds,lVar2)) || SCARRY8(rel.minutes,lVar3))
	00022808:ADD EAX,EDX
	0002280a:JNO 0x00022812
	0002280c:MOV R11D,0x1
	00022812:MOV EDX,EAX
	00022814:MOV RAX,qword ptr [RBP + -0x8]
	00022818:MOV dword ptr [RAX + 0x98],EDX
	0002281e:MOV RAX,qword ptr [RBP + -0x8]
	00022822:MOV RDX,qword ptr [RAX + 0x90]
	00022829:MOV RAX,qword ptr [RBP + 0x38]
	0002282d:MOV R10D,0x0
	00022833:ADD RAX,RDX
	00022836:JNO 0x0002283e
	00022838:MOV R10D,0x1
	0002283e:MOV RDX,RAX
	00022841:MOV RAX,qword ptr [RBP + -0x8]
	00022845:MOV qword ptr [RAX + 0x90],RDX
	0002284c:MOV RAX,qword ptr [RBP + -0x8]
	00022850:MOV RDX,qword ptr [RAX + 0x88]
	00022857:MOV RAX,qword ptr [RBP + 0x30]
	0002285b:MOV R9D,0x0
	00022861:ADD RAX,RDX
	00022864:JNO 0x0002286c
	00022866:MOV R9D,0x1
	0002286c:MOV RDX,RAX
	0002286f:MOV RAX,qword ptr [RBP + -0x8]
	00022873:MOV qword ptr [RAX + 0x88],RDX
	0002287a:MOV RAX,qword ptr [RBP + -0x8]
	0002287e:MOV RDX,qword ptr [RAX + 0x80]
	00022885:MOV RAX,qword ptr [RBP + 0x28]
	00022889:MOV R8D,0x0
	0002288f:ADD RAX,RDX
	00022892:JNO 0x0002289a
	00022894:MOV R8D,0x1
	0002289a:MOV RDX,RAX
	0002289d:MOV RAX,qword ptr [RBP + -0x8]
	000228a1:MOV qword ptr [RAX + 0x80],RDX
	000228a8:MOV RAX,qword ptr [RBP + -0x8]
	000228ac:MOV RDX,qword ptr [RAX + 0x78]
	000228b0:MOV RAX,qword ptr [RBP + 0x20]
	000228b4:MOV EDI,0x0
	000228b9:ADD RAX,RDX
	000228bc:JNO 0x000228c3
	000228be:MOV EDI,0x1
	000228c3:MOV RDX,RAX
	000228c6:MOV RAX,qword ptr [RBP + -0x8]
	000228ca:MOV qword ptr [RAX + 0x78],RDX
	000228ce:MOV RAX,qword ptr [RBP + -0x8]
	000228d2:MOV RDX,qword ptr [RAX + 0x70]
	000228d6:MOV RAX,qword ptr [RBP + 0x18]
	000228da:MOV ESI,0x0
	000228df:ADD RAX,RDX
	000228e2:JNO 0x000228e9
	000228e4:MOV ESI,0x1
	000228e9:MOV RDX,RAX
	000228ec:MOV RAX,qword ptr [RBP + -0x8]
	000228f0:MOV qword ptr [RAX + 0x70],RDX
	000228f4:MOV RAX,qword ptr [RBP + -0x8]
	000228f8:MOV RDX,qword ptr [RAX + 0x68]
	000228fc:MOV RAX,qword ptr [RBP + 0x10]
	00022900:MOV ECX,0x0
	00022905:ADD RAX,RDX
	00022908:JNO 0x0002290f
	0002290a:MOV ECX,0x1
	0002290f:MOV RDX,RAX
	00022912:MOV RAX,qword ptr [RBP + -0x8]
	00022916:MOV qword ptr [RAX + 0x68],RDX
	0002291a:MOV EAX,R11D
	0002291d:MOV EDX,EAX
	0002291f:AND EDX,0x1
	00022922:MOV RAX,R10
	00022925:AND EAX,0x1
	00022928:OR EDX,EAX
	0002292a:MOV RAX,R9
	0002292d:AND EAX,0x1
	00022930:OR EDX,EAX
END_OF_LINE
----------------------------------------------
53: || SCARRY8(rel.hour,lVar4)) || SCARRY8(rel.day,lVar5)) || SCARRY8(rel.month,lVar6));
	0002288f:ADD RAX,RDX
	00022892:JNO 0x0002289a
	00022894:MOV R8D,0x1
	0002289a:MOV RDX,RAX
	0002289d:MOV RAX,qword ptr [RBP + -0x8]
	000228a1:MOV qword ptr [RAX + 0x80],RDX
	000228a8:MOV RAX,qword ptr [RBP + -0x8]
	000228ac:MOV RDX,qword ptr [RAX + 0x78]
	000228b0:MOV RAX,qword ptr [RBP + 0x20]
	000228b4:MOV EDI,0x0
	000228b9:ADD RAX,RDX
	000228bc:JNO 0x000228c3
	000228be:MOV EDI,0x1
	000228c3:MOV RDX,RAX
	000228c6:MOV RAX,qword ptr [RBP + -0x8]
	000228ca:MOV qword ptr [RAX + 0x78],RDX
	000228ce:MOV RAX,qword ptr [RBP + -0x8]
	000228d2:MOV RDX,qword ptr [RAX + 0x70]
	000228d6:MOV RAX,qword ptr [RBP + 0x18]
	000228da:MOV ESI,0x0
	000228df:ADD RAX,RDX
	000228e2:JNO 0x000228e9
	000228e4:MOV ESI,0x1
	000228e9:MOV RDX,RAX
	000228ec:MOV RAX,qword ptr [RBP + -0x8]
	000228f0:MOV qword ptr [RAX + 0x70],RDX
	000228f4:MOV RAX,qword ptr [RBP + -0x8]
	000228f8:MOV RDX,qword ptr [RAX + 0x68]
	000228fc:MOV RAX,qword ptr [RBP + 0x10]
	00022900:MOV ECX,0x0
	00022905:ADD RAX,RDX
	00022908:JNO 0x0002290f
	0002290a:MOV ECX,0x1
	0002290f:MOV RDX,RAX
	00022912:MOV RAX,qword ptr [RBP + -0x8]
	00022916:MOV qword ptr [RAX + 0x68],RDX
	0002291a:MOV EAX,R11D
	0002291d:MOV EDX,EAX
	0002291f:AND EDX,0x1
	00022922:MOV RAX,R10
	00022925:AND EAX,0x1
	00022928:OR EDX,EAX
	0002292a:MOV RAX,R9
	0002292d:AND EAX,0x1
	00022930:OR EDX,EAX
	00022932:MOV RAX,R8
	00022935:AND EAX,0x1
	00022938:OR EDX,EAX
	0002293a:MOV RAX,RDI
	0002293d:AND EAX,0x1
	00022940:OR EDX,EAX
	00022942:MOV RAX,RSI
	00022945:AND EAX,0x1
	00022948:OR EDX,EAX
END_OF_LINE
----------------------------------------------
55: if (!bVar8) {
	00022952:TEST AL,AL
	00022954:JZ 0x0002295d
END_OF_LINE
----------------------------------------------
56: pc->rels_seen = true;
	00022961:MOV byte ptr [RAX + 0xa1],0x1
END_OF_LINE
----------------------------------------------
58: return !bVar8;
	00022952:TEST AL,AL
	00022954:JZ 0x0002295d
	00022956:MOV EAX,0x0
	0002295b:JMP 0x0002296d
	0002295d:MOV RAX,qword ptr [RBP + -0x8]
	00022961:MOV byte ptr [RAX + 0xa1],0x1
	00022968:MOV EAX,0x1
	0002296d:POP RBP
	0002296e:RET
END_OF_LINE



Function: set_hhmmss
----------------------------------------------
11: pc->hour = hour;
	00022993:MOV qword ptr [RAX + 0x48],RDX
END_OF_LINE
----------------------------------------------
12: pc->minutes = minutes;
	0002299f:MOV qword ptr [RAX + 0x50],RDX
END_OF_LINE
----------------------------------------------
13: (pc->seconds).tv_sec = sec;
	000229ab:MOV qword ptr [RAX + 0x58],RDX
END_OF_LINE
----------------------------------------------
14: (pc->seconds).tv_nsec = (long)nsec;
	000229b2:MOVSXD RDX,EAX
	000229b5:MOV RAX,qword ptr [RBP + -0x8]
	000229b9:MOV qword ptr [RAX + 0x60],RDX
END_OF_LINE
----------------------------------------------
15: return;
	000229bf:RET
END_OF_LINE



Function: str_days
----------------------------------------------
10: if (pc->debug_ordinal_day_seen == false) {
	000229db:MOVZX EAX,byte ptr [RAX + 0xe0]
	000229e2:TEST AL,AL
	000229e4:JZ 0x00022a7d
END_OF_LINE
----------------------------------------------
11: *buffer = '\0';
	00022a81:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
12: len = 0;
	00022a84:MOV dword ptr [RBP + -0x4],0x0
END_OF_LINE
----------------------------------------------
14: else if ((pc->day_ordinal < -1) || (0xc < pc->day_ordinal)) {
	000229ee:MOV RAX,qword ptr [RAX + 0x8]
	000229f2:CMP RAX,-0x1
	000229f6:JL 0x00022a4f
	000229f8:MOV RAX,qword ptr [RBP + -0x18]
	000229fc:MOV RAX,qword ptr [RAX + 0x8]
	00022a00:CMP RAX,0xc
	00022a04:JG 0x00022a4f
END_OF_LINE
----------------------------------------------
15: len = snprintf(buffer,(long)n,"%ld",pc->day_ordinal);
	00022a53:MOV RDX,qword ptr [RAX + 0x8]
	00022a57:MOV EAX,dword ptr [RBP + -0x24]
	00022a5a:MOVSXD RSI,EAX
	00022a5d:MOV RAX,qword ptr [RBP + -0x20]
	00022a61:MOV RCX,RDX
	00022a64:LEA RDX,[0x3466a]
	00022a6b:MOV RDI,RAX
	00022a6e:MOV EAX,0x0
	00022a73:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
18: len = snprintf(buffer,(long)n,"%s",str_days::ordinal_values + pc->day_ordinal + 1);
	00022a0a:MOV RAX,qword ptr [RAX + 0x8]
	00022a0e:LEA RDX,[RAX + 0x1]
	00022a12:MOV RAX,RDX
	00022a15:SHL RAX,0x2
	00022a19:ADD RAX,RDX
	00022a1c:ADD RAX,RAX
	00022a1f:ADD RAX,RDX
	00022a22:LEA RDX,[0x35ba0]
	00022a29:ADD RDX,RAX
	00022a2c:MOV EAX,dword ptr [RBP + -0x24]
	00022a2f:MOVSXD RSI,EAX
	00022a32:MOV RAX,qword ptr [RBP + -0x20]
	00022a36:MOV RCX,RDX
	00022a39:LEA RDX,[0x34667]
	00022a40:MOV RDI,RAX
	00022a43:MOV EAX,0x0
	00022a48:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
20: if ((((-1 < pc->day_number) && (pc->day_number < 7)) && (-1 < len)) && (len < n)) {
	00022a8f:MOV EAX,dword ptr [RAX + 0x10]
	00022a92:TEST EAX,EAX
	00022a94:JS 0x00022b04
	00022a96:MOV RAX,qword ptr [RBP + -0x18]
	00022a9a:MOV EAX,dword ptr [RAX + 0x10]
	00022a9d:CMP EAX,0x6
	00022aa0:JG 0x00022b04
	00022aa2:CMP dword ptr [RBP + -0x4],0x0
	00022aa6:JS 0x00022b04
	00022aa8:MOV EAX,dword ptr [RBP + -0x4]
	00022aab:CMP EAX,dword ptr [RBP + -0x24]
	00022aae:JGE 0x00022b04
END_OF_LINE
----------------------------------------------
21: snprintf(buffer + len,(long)(n - len),&DAT_0003466e + (int)(uint)(len == 0),
	00022acc:CMP dword ptr [RBP + -0x4],0x0
	00022ad0:SETZ AL
	00022ad3:MOVZX EAX,AL
	00022ad6:CDQE
	00022ad8:LEA RDX,[0x3466e]
	00022adf:ADD RDX,RAX
	00022ae2:MOV EAX,dword ptr [RBP + -0x24]
	00022ae5:SUB EAX,dword ptr [RBP + -0x4]
	00022ae8:CDQE
	00022aea:MOV ESI,dword ptr [RBP + -0x4]
	00022aed:MOVSXD RDI,ESI
	00022af0:MOV RSI,qword ptr [RBP + -0x20]
	00022af4:ADD RDI,RSI
	00022af7:MOV RSI,RAX
	00022afa:MOV EAX,0x0
	00022aff:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
22: str_days::days_values + pc->day_number);
	00022ab4:MOV EAX,dword ptr [RAX + 0x10]
	00022ab7:CDQE
	00022ab9:LEA RDX,[RAX*0x4]
	00022ac1:LEA RAX,[0x35c40]
	00022ac8:LEA RCX,[RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
24: return buffer;
	00022b04:MOV RAX,qword ptr [RBP + -0x20]
	00022b08:LEAVE
	00022b09:RET
END_OF_LINE



Function: time_zone_str
----------------------------------------------
19: if (time_zone < 0) {
	00022b25:CMP dword ptr [RBP + -0x24],0x0
	00022b29:JNS 0x00022b32
END_OF_LINE
----------------------------------------------
20: cVar3 = '-';
	00022b2b:MOV EAX,0x2d
END_OF_LINE
----------------------------------------------
23: cVar3 = '+';
	00022b32:MOV EAX,0x2b
END_OF_LINE
----------------------------------------------
25: uVar4 = time_zone / 0xe10;
	00022b4d:SAR EDX,0xb
END_OF_LINE
----------------------------------------------
26: if ((int)uVar4 < 1) {
	00022b5b:NEG EDX
	00022b5d:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
27: uVar4 = -uVar4;
	00022b5b:NEG EDX
	00022b5d:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
29: iVar5 = sprintf(time_zone_buf,"%c%02d",(ulong)(uint)(int)cVar3,(ulong)uVar4);
	00022b63:MOVSX EDX,byte ptr [RBP + -0x19]
	00022b67:MOV ECX,dword ptr [RBP + -0x18]
	00022b6a:MOV RAX,qword ptr [RBP + -0x30]
	00022b6e:LEA RSI,[0x34672]
	00022b75:MOV RDI,RAX
	00022b78:MOV EAX,0x0
	00022b7d:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
30: pcVar1 = time_zone_buf + iVar5;
	00022b82:CDQE
	00022b84:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
31: iVar5 = time_zone % 0xe10;
	00022bad:SUB EAX,ECX
END_OF_LINE
----------------------------------------------
32: if (iVar5 < 1) {
	00022bb1:NEG EDX
	00022bb3:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
33: iVar5 = -iVar5;
	00022bb1:NEG EDX
	00022bb3:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
35: if (iVar5 != 0) {
	00022bb9:CMP dword ptr [RBP + -0x14],0x0
	00022bbd:JZ 0x00022d13
END_OF_LINE
----------------------------------------------
36: iVar2 = iVar5 / 0x3c;
	00022bd6:SAR EDX,0x5
END_OF_LINE
----------------------------------------------
37: iVar5 = iVar5 % 0x3c;
	00022c05:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
38: *pcVar1 = ':';
	00022c16:MOV byte ptr [RAX],0x3a
END_OF_LINE
----------------------------------------------
39: pcVar1[1] = (char)(iVar2 / 10) + '0';
	00022c0e:LEA RDX,[RAX + 0x1]
	00022c12:MOV qword ptr [RBP + -0x8],RDX
	00022c16:MOV byte ptr [RAX],0x3a
	00022c19:MOV EAX,dword ptr [RBP + -0x10]
	00022c1c:MOVSXD RDX,EAX
	00022c1f:IMUL RDX,RDX,0x66666667
	00022c26:SHR RDX,0x20
	00022c2a:SAR EDX,0x2
	00022c2d:SAR EAX,0x1f
	00022c30:MOV ECX,EAX
	00022c32:MOV EAX,EDX
	00022c34:SUB EAX,ECX
	00022c36:LEA ECX,[RAX + 0x30]
	00022c39:MOV RAX,qword ptr [RBP + -0x8]
	00022c3d:LEA RDX,[RAX + 0x1]
	00022c41:MOV qword ptr [RBP + -0x8],RDX
	00022c45:MOV EDX,ECX
	00022c47:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
40: p = pcVar1 + 3;
	00022c7c:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
41: pcVar1[2] = (char)iVar2 + (char)(iVar2 / 10) * -10 + '0';
	00022c3d:LEA RDX,[RAX + 0x1]
	00022c41:MOV qword ptr [RBP + -0x8],RDX
	00022c45:MOV EDX,ECX
	00022c47:MOV byte ptr [RAX],DL
	00022c49:MOV EDX,dword ptr [RBP + -0x10]
	00022c4c:MOVSXD RAX,EDX
	00022c4f:IMUL RAX,RAX,0x66666667
	00022c56:SHR RAX,0x20
	00022c5a:SAR EAX,0x2
	00022c5d:MOV ESI,EDX
	00022c5f:SAR ESI,0x1f
	00022c62:SUB EAX,ESI
	00022c64:MOV ECX,EAX
	00022c66:MOV EAX,ECX
	00022c68:SHL EAX,0x2
	00022c6b:ADD EAX,ECX
	00022c6d:ADD EAX,EAX
	00022c6f:MOV ECX,EDX
	00022c71:SUB ECX,EAX
	00022c73:MOV EAX,ECX
	00022c75:LEA ECX,[RAX + 0x30]
	00022c78:MOV RAX,qword ptr [RBP + -0x8]
	00022c7c:LEA RDX,[RAX + 0x1]
	00022c80:MOV qword ptr [RBP + -0x8],RDX
	00022c84:MOV EDX,ECX
	00022c86:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
42: if (iVar5 != 0) {
	00022c88:CMP dword ptr [RBP + -0xc],0x0
	00022c8c:JZ 0x00022d0c
END_OF_LINE
----------------------------------------------
43: *p = ':';
	00022c9a:MOV byte ptr [RAX],0x3a
END_OF_LINE
----------------------------------------------
44: pcVar1[4] = (char)(iVar5 / 10) + '0';
	00022c92:LEA RDX,[RAX + 0x1]
	00022c96:MOV qword ptr [RBP + -0x8],RDX
	00022c9a:MOV byte ptr [RAX],0x3a
	00022c9d:MOV EAX,dword ptr [RBP + -0xc]
	00022ca0:MOVSXD RDX,EAX
	00022ca3:IMUL RDX,RDX,0x66666667
	00022caa:SHR RDX,0x20
	00022cae:SAR EDX,0x2
	00022cb1:SAR EAX,0x1f
	00022cb4:MOV ECX,EAX
	00022cb6:MOV EAX,EDX
	00022cb8:SUB EAX,ECX
	00022cba:LEA ECX,[RAX + 0x30]
	00022cbd:MOV RAX,qword ptr [RBP + -0x8]
	00022cc1:LEA RDX,[RAX + 0x1]
	00022cc5:MOV qword ptr [RBP + -0x8],RDX
	00022cc9:MOV EDX,ECX
	00022ccb:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
45: p = pcVar1 + 6;
	00022d00:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
46: pcVar1[5] = (char)iVar5 + (char)(iVar5 / 10) * -10 + '0';
	00022cc1:LEA RDX,[RAX + 0x1]
	00022cc5:MOV qword ptr [RBP + -0x8],RDX
	00022cc9:MOV EDX,ECX
	00022ccb:MOV byte ptr [RAX],DL
	00022ccd:MOV EDX,dword ptr [RBP + -0xc]
	00022cd0:MOVSXD RAX,EDX
	00022cd3:IMUL RAX,RAX,0x66666667
	00022cda:SHR RAX,0x20
	00022cde:SAR EAX,0x2
	00022ce1:MOV ESI,EDX
	00022ce3:SAR ESI,0x1f
	00022ce6:SUB EAX,ESI
	00022ce8:MOV ECX,EAX
	00022cea:MOV EAX,ECX
	00022cec:SHL EAX,0x2
	00022cef:ADD EAX,ECX
	00022cf1:ADD EAX,EAX
	00022cf3:MOV ECX,EDX
	00022cf5:SUB ECX,EAX
	00022cf7:MOV EAX,ECX
	00022cf9:LEA ECX,[RAX + 0x30]
	00022cfc:MOV RAX,qword ptr [RBP + -0x8]
	00022d00:LEA RDX,[RAX + 0x1]
	00022d04:MOV qword ptr [RBP + -0x8],RDX
	00022d08:MOV EDX,ECX
	00022d0a:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
48: *p = '\0';
	00022d10:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
50: return time_zone_buf;
	00022d13:MOV RAX,qword ptr [RBP + -0x30]
	00022d17:LEAVE
	00022d18:RET
END_OF_LINE



Function: debug_print_current_time
----------------------------------------------
20: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	00022d39:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
21: space = false;
	00022d48:MOV byte ptr [RBP + -0x95],0x0
END_OF_LINE
----------------------------------------------
22: if (pc->parse_datetime_debug == true) {
	00022d56:MOVZX EAX,byte ptr [RAX + 0xd9]
	00022d5d:XOR EAX,0x1
	00022d60:TEST AL,AL
	00022d62:JNZ 0x00023223
END_OF_LINE
----------------------------------------------
23: dbg_printf("parsed %s part: ",item);
	00022d81:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
24: if ((pc->dates_seen != 0) && (pc->debug_dates_seen != true)) {
	00022d8d:MOV RAX,qword ptr [RAX + 0xa8]
	00022d94:TEST RAX,RAX
	00022d97:JZ 0x00022e05
	00022d99:MOV RAX,qword ptr [RBP + -0xb0]
	00022da0:MOVZX EAX,byte ptr [RAX + 0xda]
	00022da7:XOR EAX,0x1
	00022daa:TEST AL,AL
	00022dac:JZ 0x00022e05
END_OF_LINE
----------------------------------------------
25: fprintf(pFRam0000000000144490,"(Y-M-D) %04ld-%02ld-%02ld",(pc->year).value,pc->month,pc->day);
	00022db5:MOV RSI,qword ptr [RAX + 0x40]
	00022db9:MOV RAX,qword ptr [RBP + -0xb0]
	00022dc0:MOV RCX,qword ptr [RAX + 0x38]
	00022dc4:MOV RAX,qword ptr [RBP + -0xb0]
	00022dcb:MOV RDX,qword ptr [RAX + 0x28]
	00022dcf:MOV RAX,qword ptr [0x0003dfe0]
	00022dd6:MOV RAX,qword ptr [RAX]
	00022dd9:MOV R8,RSI
	00022ddc:LEA RSI,[0x3468a]
	00022de3:MOV RDI,RAX
	00022de6:MOV EAX,0x0
	00022deb:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
26: pc->debug_dates_seen = true;
	00022df7:MOV byte ptr [RAX + 0xda],0x1
END_OF_LINE
----------------------------------------------
27: space = true;
	00022dfe:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
29: if (pc->year_seen != pc->debug_year_seen) {
	00022e0c:MOVZX EDX,byte ptr [RAX + 0xd8]
	00022e13:MOV RAX,qword ptr [RBP + -0xb0]
	00022e1a:MOVZX EAX,byte ptr [RAX + 0xdf]
	00022e21:CMP DL,AL
	00022e23:JZ 0x00022e93
END_OF_LINE
----------------------------------------------
30: if (space != false) {
	00022e25:CMP byte ptr [RBP + -0x95],0x0
	00022e2c:JZ 0x00022e45
END_OF_LINE
----------------------------------------------
31: fputc(0x20,pFRam0000000000144490);
	00022e40:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
33: fprintf(pFRam0000000000144490,"year: %04ld",(pc->year).value);
	00022e4c:MOV RDX,qword ptr [RAX + 0x28]
	00022e50:MOV RAX,qword ptr [0x0003dfe0]
	00022e57:MOV RAX,qword ptr [RAX]
	00022e5a:LEA RCX,[0x346a4]
	00022e61:MOV RSI,RCX
	00022e64:MOV RDI,RAX
	00022e67:MOV EAX,0x0
	00022e6c:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
34: pc->debug_year_seen = pc->year_seen;
	00022e78:MOVZX EDX,byte ptr [RAX + 0xd8]
	00022e7f:MOV RAX,qword ptr [RBP + -0xb0]
	00022e86:MOV byte ptr [RAX + 0xdf],DL
END_OF_LINE
----------------------------------------------
35: space = true;
	00022e8c:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
37: if ((pc->times_seen != 0) && (pc->debug_times_seen != true)) {
	00022e9a:MOV RAX,qword ptr [RAX + 0xc8]
	00022ea1:TEST RAX,RAX
	00022ea4:JZ 0x00022fb7
	00022eaa:MOV RAX,qword ptr [RBP + -0xb0]
	00022eb1:MOVZX EAX,byte ptr [RAX + 0xdd]
	00022eb8:XOR EAX,0x1
	00022ebb:TEST AL,AL
	00022ebd:JZ 0x00022fb7
END_OF_LINE
----------------------------------------------
38: fprintf(pFRam0000000000144490," %02ld:%02ld:%02ld" + (int)(uint)(space ^ 1),pc->hour,
	00022ee7:MOV RDX,qword ptr [RAX + 0x48]
	00022eeb:MOVZX EAX,byte ptr [RBP + -0x95]
	00022ef2:XOR EAX,0x1
	00022ef5:MOVZX EAX,AL
	00022ef8:CDQE
	00022efa:LEA RSI,[0x346b0]
	00022f01:ADD RSI,RAX
	00022f04:MOV RAX,qword ptr [0x0003dfe0]
	00022f0b:MOV RAX,qword ptr [RAX]
	00022f0e:MOV RDI,qword ptr [RBP + -0x90]
	00022f15:MOV R8,RDI
	00022f18:MOV RDI,RAX
	00022f1b:MOV EAX,0x0
	00022f20:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
39: pc->minutes,(pc->seconds).tv_sec);
	00022eca:MOV RAX,qword ptr [RAX + 0x58]
	00022ece:MOV qword ptr [RBP + -0x90],RAX
	00022ed5:MOV RAX,qword ptr [RBP + -0xb0]
	00022edc:MOV RCX,qword ptr [RAX + 0x50]
	00022ee0:MOV RAX,qword ptr [RBP + -0xb0]
	00022ee7:MOV RDX,qword ptr [RAX + 0x48]
	00022eeb:MOVZX EAX,byte ptr [RBP + -0x95]
	00022ef2:XOR EAX,0x1
	00022ef5:MOVZX EAX,AL
	00022ef8:CDQE
	00022efa:LEA RSI,[0x346b0]
	00022f01:ADD RSI,RAX
	00022f04:MOV RAX,qword ptr [0x0003dfe0]
	00022f0b:MOV RAX,qword ptr [RAX]
	00022f0e:MOV RDI,qword ptr [RBP + -0x90]
	00022f15:MOV R8,RDI
	00022f18:MOV RDI,RAX
	00022f1b:MOV EAX,0x0
	00022f20:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
40: if ((pc->seconds).tv_nsec != 0) {
	00022f2c:MOV RAX,qword ptr [RAX + 0x60]
	00022f30:TEST RAX,RAX
	00022f33:JZ 0x00022f6d
END_OF_LINE
----------------------------------------------
41: fprintf(pFRam0000000000144490,".%09d",(pc->seconds).tv_nsec & 0xffffffff);
	00022f3c:MOV RAX,qword ptr [RAX + 0x60]
	00022f40:MOV dword ptr [RBP + -0x94],EAX
	00022f46:MOV RAX,qword ptr [0x0003dfe0]
	00022f4d:MOV RAX,qword ptr [RAX]
	00022f50:MOV EDX,dword ptr [RBP + -0x94]
	00022f56:LEA RCX,[0x346c3]
	00022f5d:MOV RSI,RCX
	00022f60:MOV RDI,RAX
	00022f63:MOV EAX,0x0
	00022f68:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
43: if (pc->meridian == 1) {
	00022f74:MOV EAX,dword ptr [RAX + 0x1c]
	00022f77:CMP EAX,0x1
	00022f7a:JNZ 0x00022fa2
END_OF_LINE
----------------------------------------------
44: fwrite(&DAT_000346c9,1,2,pFRam0000000000144490);
	00022f9d:CALL 0x00006010
END_OF_LINE
----------------------------------------------
46: pc->debug_times_seen = true;
	00022fa9:MOV byte ptr [RAX + 0xdd],0x1
END_OF_LINE
----------------------------------------------
47: space = true;
	00022fb0:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
49: if ((pc->days_seen != 0) && (pc->debug_days_seen != true)) {
	00022fbe:MOV RAX,qword ptr [RAX + 0xb0]
	00022fc5:TEST RAX,RAX
	00022fc8:JZ 0x00023074
	00022fce:MOV RAX,qword ptr [RBP + -0xb0]
	00022fd5:MOVZX EAX,byte ptr [RAX + 0xdb]
	00022fdc:XOR EAX,0x1
	00022fdf:TEST AL,AL
	00022fe1:JZ 0x00023074
END_OF_LINE
----------------------------------------------
50: if (space != false) {
	00022fe7:CMP byte ptr [RBP + -0x95],0x0
	00022fee:JZ 0x00023007
END_OF_LINE
----------------------------------------------
51: fputc(0x20,pFRam0000000000144490);
	00023002:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
53: uVar1 = pc->day_number;
	0002300e:MOV R12D,dword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
54: iVar3 = pc->day_ordinal;
	00023019:MOV RBX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
55: pcVar5 = str_days(pc,tmp,100);
	0002301d:LEA RCX,[RBP + -0x80]
	00023021:MOV RAX,qword ptr [RBP + -0xb0]
	00023028:MOV EDX,0x64
	0002302d:MOV RSI,RCX
	00023030:MOV RDI,RAX
	00023033:CALL 0x000229c0
END_OF_LINE
----------------------------------------------
56: fprintf(pFRam0000000000144490,"%s (day ordinal=%ld number=%d)",pcVar5,iVar3,(ulong)uVar1);
	00023045:MOV R8D,R12D
	00023048:MOV RCX,RBX
	0002304b:LEA RSI,[0x346d0]
	00023052:MOV RDI,RAX
	00023055:MOV EAX,0x0
	0002305a:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
57: pc->debug_days_seen = true;
	00023066:MOV byte ptr [RAX + 0xdb],0x1
END_OF_LINE
----------------------------------------------
58: space = true;
	0002306d:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
60: if ((pc->local_zones_seen != 0) && (pc->debug_local_zones_seen != true)) {
	0002307b:MOV RAX,qword ptr [RAX + 0xb8]
	00023082:TEST RAX,RAX
	00023085:JZ 0x00023113
	0002308b:MOV RAX,qword ptr [RBP + -0xb0]
	00023092:MOVZX EAX,byte ptr [RAX + 0xdc]
	00023099:XOR EAX,0x1
	0002309c:TEST AL,AL
	0002309e:JZ 0x00023113
END_OF_LINE
----------------------------------------------
61: if (pc->dsts_seen == 0) {
	000230a7:MOV RAX,qword ptr [RAX + 0xc0]
	000230ae:TEST RAX,RAX
	000230b1:JZ 0x000230bc
END_OF_LINE
----------------------------------------------
62: puVar6 = &DAT_000346f4;
	000230bc:LEA RAX,[0x346f4]
END_OF_LINE
----------------------------------------------
65: puVar6 = &DAT_000346ef;
	000230b3:LEA RAX,[0x346ef]
END_OF_LINE
----------------------------------------------
67: fprintf(pFRam0000000000144490," isdst=%d%s" + (int)(uint)(space ^ 1),
	000230d4:XOR ECX,0x1
	000230d7:MOVZX ECX,CL
	000230da:MOVSXD RCX,ECX
	000230dd:LEA RSI,[0x346f5]
	000230e4:ADD RSI,RCX
	000230e7:MOV RCX,qword ptr [0x0003dfe0]
	000230ee:MOV RDI,qword ptr [RCX]
	000230f1:MOV RCX,RAX
	000230f4:MOV EAX,0x0
	000230f9:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
68: (ulong)(uint)pc->local_isdst,puVar6);
	000230ca:MOV EDX,dword ptr [RDX + 0x14]
	000230cd:MOVZX ECX,byte ptr [RBP + -0x95]
	000230d4:XOR ECX,0x1
	000230d7:MOVZX ECX,CL
	000230da:MOVSXD RCX,ECX
	000230dd:LEA RSI,[0x346f5]
	000230e4:ADD RSI,RCX
	000230e7:MOV RCX,qword ptr [0x0003dfe0]
	000230ee:MOV RDI,qword ptr [RCX]
	000230f1:MOV RCX,RAX
	000230f4:MOV EAX,0x0
	000230f9:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
69: pc->debug_local_zones_seen = true;
	00023105:MOV byte ptr [RAX + 0xdc],0x1
END_OF_LINE
----------------------------------------------
70: space = true;
	0002310c:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
72: if ((pc->zones_seen != 0) && (pc->debug_zones_seen != true)) {
	0002311a:MOV RAX,qword ptr [RAX + 0xd0]
	00023121:TEST RAX,RAX
	00023124:JZ 0x0002319e
	00023126:MOV RAX,qword ptr [RBP + -0xb0]
	0002312d:MOVZX EAX,byte ptr [RAX + 0xde]
	00023134:XOR EAX,0x1
	00023137:TEST AL,AL
	00023139:JZ 0x0002319e
END_OF_LINE
----------------------------------------------
73: pcVar5 = time_zone_str(pc->time_zone,tmp);
	00023142:MOV EAX,dword ptr [RAX + 0x18]
	00023145:LEA RDX,[RBP + -0x80]
	00023149:MOV RSI,RDX
	0002314c:MOV EDI,EAX
	0002314e:CALL 0x00022b0a
END_OF_LINE
----------------------------------------------
74: fprintf(pFRam0000000000144490," UTC%s" + (int)(uint)(space ^ 1),pcVar5);
	0002315d:XOR EAX,0x1
	00023160:MOVZX EAX,AL
	00023163:CDQE
	00023165:LEA RCX,[0x34701]
	0002316c:ADD RCX,RAX
	0002316f:MOV RAX,qword ptr [0x0003dfe0]
	00023176:MOV RAX,qword ptr [RAX]
	00023179:MOV RSI,RCX
	0002317c:MOV RDI,RAX
	0002317f:MOV EAX,0x0
	00023184:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
75: pc->debug_zones_seen = true;
	00023190:MOV byte ptr [RAX + 0xde],0x1
END_OF_LINE
----------------------------------------------
76: space = true;
	00023197:MOV byte ptr [RBP + -0x95],0x1
END_OF_LINE
----------------------------------------------
78: if (pc->timespec_seen != false) {
	000231a5:MOVZX EAX,byte ptr [RAX + 0xa0]
	000231ac:TEST AL,AL
	000231ae:JZ 0x0002320a
END_OF_LINE
----------------------------------------------
79: _Var4 = (pc->seconds).tv_sec;
	000231b7:MOV RAX,qword ptr [RAX + 0x58]
END_OF_LINE
----------------------------------------------
80: if (space != false) {
	000231c2:CMP byte ptr [RBP + -0x95],0x0
	000231c9:JZ 0x000231e2
END_OF_LINE
----------------------------------------------
81: fputc(0x20,pFRam0000000000144490);
	000231dd:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
83: fprintf(pFRam0000000000144490,"number of seconds: %ld",_Var4);
	00023205:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
85: fputc(10,pFRam0000000000144490);
	0002321c:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
87: if (lVar2 != *(long *)(in_FS_OFFSET + 0x28)) {
	00023228:SUB RAX,qword ptr FS:[0x28]
	00023231:JZ 0x00023238
END_OF_LINE
----------------------------------------------
89: __stack_chk_fail();
	00023233:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
91: return;
	00023243:RET
END_OF_LINE



Function: print_rel_part
----------------------------------------------
9: if (val != 0) {
	0002325d:CMP qword ptr [RBP + -0x10],0x0
	00023262:JNZ 0x0002326a
END_OF_LINE
----------------------------------------------
10: fprintf(pFRam0000000000144490," %+ld %s" + (int)(uint)!space,val,name);
	0002326e:XOR EAX,0x1
	00023271:MOVZX EAX,AL
	00023274:CDQE
	00023276:LEA RDX,[0x3471f]
	0002327d:LEA RSI,[RAX + RDX*0x1]
	00023281:MOV RAX,qword ptr [0x0003dfe0]
	00023288:MOV RAX,qword ptr [RAX]
	0002328b:MOV RCX,qword ptr [RBP + -0x18]
	0002328f:MOV RDX,qword ptr [RBP + -0x10]
	00023293:MOV RDI,RAX
	00023296:MOV EAX,0x0
	0002329b:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
11: space = true;
	000232a0:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
13: return space;
	000232a6:RET
END_OF_LINE



Function: debug_print_relative_time
----------------------------------------------
10: if (pc->parse_datetime_debug == true) {
	000232c3:MOVZX EAX,byte ptr [RAX + 0xd9]
	000232ca:XOR EAX,0x1
	000232cd:TEST AL,AL
	000232cf:JNZ 0x00023488
END_OF_LINE
----------------------------------------------
11: dbg_printf("parsed %s part: ",item);
	000232eb:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
12: if (((((pc->rel).year == 0) && ((pc->rel).month == 0)) && ((pc->rel).day == 0)) &&
	000232f4:MOV RAX,qword ptr [RAX + 0x68]
	000232f8:TEST RAX,RAX
	000232fb:JNZ 0x00023384
	00023301:MOV RAX,qword ptr [RBP + -0x20]
	00023305:MOV RAX,qword ptr [RAX + 0x70]
	00023309:TEST RAX,RAX
	0002330c:JNZ 0x00023384
	0002330e:MOV RAX,qword ptr [RBP + -0x20]
	00023312:MOV RAX,qword ptr [RAX + 0x78]
	00023316:TEST RAX,RAX
	00023319:JNZ 0x00023384
	0002331b:MOV RAX,qword ptr [RBP + -0x20]
	0002331f:MOV RAX,qword ptr [RAX + 0x80]
	00023326:TEST RAX,RAX
	00023329:JNZ 0x00023384
	0002332b:MOV RAX,qword ptr [RBP + -0x20]
	0002332f:MOV RAX,qword ptr [RAX + 0x88]
	00023336:TEST RAX,RAX
	00023339:JNZ 0x00023384
	0002333b:MOV RAX,qword ptr [RBP + -0x20]
	0002333f:MOV RAX,qword ptr [RAX + 0x90]
	00023346:TEST RAX,RAX
	00023349:JNZ 0x00023384
	0002334b:MOV RAX,qword ptr [RBP + -0x20]
	0002334f:MOV EAX,dword ptr [RAX + 0x98]
	00023355:TEST EAX,EAX
	00023357:JNZ 0x00023384
END_OF_LINE
----------------------------------------------
13: ((((pc->rel).hour == 0 && ((pc->rel).minutes == 0)) &&
	0002331f:MOV RAX,qword ptr [RAX + 0x80]
	00023326:TEST RAX,RAX
	00023329:JNZ 0x00023384
	0002332b:MOV RAX,qword ptr [RBP + -0x20]
	0002332f:MOV RAX,qword ptr [RAX + 0x88]
	00023336:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
14: (((pc->rel).seconds == 0 && ((pc->rel).ns == 0)))))) {
	0002333f:MOV RAX,qword ptr [RAX + 0x90]
	00023346:TEST RAX,RAX
	00023349:JNZ 0x00023384
	0002334b:MOV RAX,qword ptr [RBP + -0x20]
	0002334f:MOV EAX,dword ptr [RAX + 0x98]
	00023355:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
15: fwrite("today/this/now\n",1,0xf,pFRam0000000000144490);
	0002337a:CALL 0x00006010
END_OF_LINE
----------------------------------------------
18: _Var1 = print_rel_part(false,(pc->rel).year,"year(s)");
	00023388:MOV RCX,qword ptr [RAX + 0x68]
	0002338c:MOVZX EAX,byte ptr [RBP + -0x1]
	00023390:LEA RDX,[0x34738]
	00023397:MOV RSI,RCX
	0002339a:MOV EDI,EAX
	0002339c:CALL 0x00023244
END_OF_LINE
----------------------------------------------
19: _Var1 = print_rel_part(_Var1,(pc->rel).month,"month(s)");
	000233a8:MOV RCX,qword ptr [RAX + 0x70]
	000233ac:MOVZX EAX,byte ptr [RBP + -0x1]
	000233b0:LEA RDX,[0x34740]
	000233b7:MOV RSI,RCX
	000233ba:MOV EDI,EAX
	000233bc:CALL 0x00023244
END_OF_LINE
----------------------------------------------
20: _Var1 = print_rel_part(_Var1,(pc->rel).day,"day(s)");
	000233c8:MOV RCX,qword ptr [RAX + 0x78]
	000233cc:MOVZX EAX,byte ptr [RBP + -0x1]
	000233d0:LEA RDX,[0x34749]
	000233d7:MOV RSI,RCX
	000233da:MOV EDI,EAX
	000233dc:CALL 0x00023244
END_OF_LINE
----------------------------------------------
21: _Var1 = print_rel_part(_Var1,(pc->rel).hour,"hour(s)");
	000233e8:MOV RCX,qword ptr [RAX + 0x80]
	000233ef:MOVZX EAX,byte ptr [RBP + -0x1]
	000233f3:LEA RDX,[0x34750]
	000233fa:MOV RSI,RCX
	000233fd:MOV EDI,EAX
	000233ff:CALL 0x00023244
END_OF_LINE
----------------------------------------------
22: _Var1 = print_rel_part(_Var1,(pc->rel).minutes,"minutes");
	0002340b:MOV RCX,qword ptr [RAX + 0x88]
	00023412:MOVZX EAX,byte ptr [RBP + -0x1]
	00023416:LEA RDX,[0x34758]
	0002341d:MOV RSI,RCX
	00023420:MOV EDI,EAX
	00023422:CALL 0x00023244
END_OF_LINE
----------------------------------------------
23: _Var1 = print_rel_part(_Var1,(pc->rel).seconds,"seconds");
	0002342e:MOV RCX,qword ptr [RAX + 0x90]
	00023435:MOVZX EAX,byte ptr [RBP + -0x1]
	00023439:LEA RDX,[0x34760]
	00023440:MOV RSI,RCX
	00023443:MOV EDI,EAX
	00023445:CALL 0x00023244
END_OF_LINE
----------------------------------------------
24: print_rel_part(_Var1,(long)(pc->rel).ns,"nanoseconds");
	00023451:MOV EAX,dword ptr [RAX + 0x98]
	00023457:MOVSXD RCX,EAX
	0002345a:MOVZX EAX,byte ptr [RBP + -0x1]
	0002345e:LEA RDX,[0x34768]
	00023465:MOV RSI,RCX
	00023468:MOV EDI,EAX
	0002346a:CALL 0x00023244
END_OF_LINE
----------------------------------------------
25: fputc(10,pFRam0000000000144490);
	00023481:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
28: return;
	0002348a:RET
END_OF_LINE



Function: yydestruct
----------------------------------------------
10: return;
	000234b6:RET
END_OF_LINE



Function: yyparse
----------------------------------------------
57: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	000234ce:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
58: yystate = 0;
	000234e7:MOV dword ptr [RBP + -0x588],0x0
END_OF_LINE
----------------------------------------------
59: yyerrstatus = 0;
	000234f1:MOV dword ptr [RBP + -0x584],0x0
END_OF_LINE
----------------------------------------------
60: yystacksize = 0x14;
	000234fb:MOV qword ptr [RBP + -0x568],0x14
END_OF_LINE
----------------------------------------------
61: yyss = yyssa;
	00023506:LEA RAX,[RBP + -0x30]
END_OF_LINE
----------------------------------------------
62: yyvs = yyvsa;
	0002351f:LEA RAX,[RBP + -0x490]
END_OF_LINE
----------------------------------------------
63: yychar = -2;
	0002354f:MOV dword ptr [RBP + -0x590],0xfffffffe
END_OF_LINE
----------------------------------------------
64: yyssp = yyss;
	00023559:JMP 0x00023563
END_OF_LINE
----------------------------------------------
65: yyvsp = yyvs;
	00023559:JMP 0x00023563
END_OF_LINE
----------------------------------------------
67: yylen = 0;
	00023563:MOV EAX,dword ptr [RBP + -0x588]
END_OF_LINE
----------------------------------------------
68: *yyssp = (yy_state_t)yystate;
	00023572:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
69: if (yyss + yystacksize + -1 <= yyssp) {
	0002357b:LEA RDX,[RAX + -0x1]
	0002357f:MOV RAX,qword ptr [RBP + -0x560]
	00023586:ADD RAX,RDX
	00023589:CMP qword ptr [RBP + -0x558],RAX
	00023590:JC 0x000237cc
END_OF_LINE
----------------------------------------------
70: lVar10 = (long)yyssp - (long)yyss;
	0002359d:SUB RAX,qword ptr [RBP + -0x560]
END_OF_LINE
----------------------------------------------
71: if (yystacksize < 0x14) {
	000235b7:JG 0x0002580f
END_OF_LINE
----------------------------------------------
72: yystacksize = yystacksize << 1;
	000235bd:SHL qword ptr [RBP + -0x568],0x1
END_OF_LINE
----------------------------------------------
73: if (0x14 < yystacksize) {
	000235cc:JLE 0x000235d9
END_OF_LINE
----------------------------------------------
74: yystacksize = 0x14;
	000235ce:MOV qword ptr [RBP + -0x568],0x14
END_OF_LINE
----------------------------------------------
76: __dest = (yy_state_t *)malloc(yystacksize * 0x39 + 0x37);
	000235f8:SHL RAX,0x3
	000235fc:ADD RAX,RDX
	000235ff:ADD RAX,0x37
	00023603:MOV RDI,RAX
	00023606:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
77: if (__dest != (yy_state_t *)0x0) {
	00023612:CMP qword ptr [RBP + -0x530],0x0
	0002361a:JZ 0x00025812
END_OF_LINE
----------------------------------------------
78: memcpy(__dest,yyss,lVar10 + 1U);
	000235a4:ADD RAX,0x1
	000235a8:MOV qword ptr [RBP + -0x540],RAX
	000235af:CMP qword ptr [RBP + -0x568],0x13
	000235b7:JG 0x0002580f
	000235bd:SHL qword ptr [RBP + -0x568],0x1
	000235c4:CMP qword ptr [RBP + -0x568],0x14
	000235cc:JLE 0x000235d9
	000235ce:MOV qword ptr [RBP + -0x568],0x14
	000235d9:MOV RAX,qword ptr [RBP + -0x560]
	000235e0:MOV qword ptr [RBP + -0x538],RAX
	000235e7:MOV RDX,qword ptr [RBP + -0x568]
	000235ee:MOV RAX,RDX
	000235f1:SHL RAX,0x3
	000235f5:SUB RAX,RDX
	000235f8:SHL RAX,0x3
	000235fc:ADD RAX,RDX
	000235ff:ADD RAX,0x37
	00023603:MOV RDI,RAX
	00023606:CALL 0x00005df0
	0002360b:MOV qword ptr [RBP + -0x530],RAX
	00023612:CMP qword ptr [RBP + -0x530],0x0
	0002361a:JZ 0x00025812
	00023620:MOV RAX,qword ptr [RBP + -0x540]
	00023627:MOV RCX,qword ptr [RBP + -0x530]
	0002362e:MOV RDX,qword ptr [RBP + -0x560]
	00023635:MOV RSI,RDX
	00023638:MOV RDX,RAX
	0002363b:MOV RDI,RCX
	0002363e:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
79: pYVar11 = (YYSTYPE *)(__dest + ((yystacksize + 0x37) / 0x38) * 0x38);
	00023658:ADD RAX,0x37
	0002365c:MOV qword ptr [RBP + -0x528],RAX
	00023663:MOV RCX,qword ptr [RBP + -0x528]
	0002366a:MOV RDX,0x4924924924924925
	00023674:MOV RAX,RCX
	00023677:IMUL RDX
	0002367a:MOV RAX,RDX
	0002367d:SAR RAX,0x4
	00023681:SAR RCX,0x3f
	00023685:MOV RDX,RCX
	00023688:SUB RAX,RDX
	0002368b:MOV RDX,RAX
	0002368e:MOV RAX,RDX
	00023691:SHL RAX,0x3
	00023695:SUB RAX,RDX
	00023698:SHL RAX,0x3
	0002369c:ADD qword ptr [RBP + -0x530],RAX
END_OF_LINE
----------------------------------------------
80: memcpy(pYVar11,yyvs,(lVar10 + 1U) * 0x38);
	000235a4:ADD RAX,0x1
	000235a8:MOV qword ptr [RBP + -0x540],RAX
	000235af:CMP qword ptr [RBP + -0x568],0x13
	000235b7:JG 0x0002580f
	000235bd:SHL qword ptr [RBP + -0x568],0x1
	000235c4:CMP qword ptr [RBP + -0x568],0x14
	000235cc:JLE 0x000235d9
	000235ce:MOV qword ptr [RBP + -0x568],0x14
	000235d9:MOV RAX,qword ptr [RBP + -0x560]
	000235e0:MOV qword ptr [RBP + -0x538],RAX
	000235e7:MOV RDX,qword ptr [RBP + -0x568]
	000235ee:MOV RAX,RDX
	000235f1:SHL RAX,0x3
	000235f5:SUB RAX,RDX
	000235f8:SHL RAX,0x3
	000235fc:ADD RAX,RDX
	000235ff:ADD RAX,0x37
	00023603:MOV RDI,RAX
	00023606:CALL 0x00005df0
	0002360b:MOV qword ptr [RBP + -0x530],RAX
	00023612:CMP qword ptr [RBP + -0x530],0x0
	0002361a:JZ 0x00025812
	00023620:MOV RAX,qword ptr [RBP + -0x540]
	00023627:MOV RCX,qword ptr [RBP + -0x530]
	0002362e:MOV RDX,qword ptr [RBP + -0x560]
	00023635:MOV RSI,RDX
	00023638:MOV RDX,RAX
	0002363b:MOV RDI,RCX
	0002363e:CALL 0x00005d90
	00023643:MOV RAX,qword ptr [RBP + -0x530]
	0002364a:MOV qword ptr [RBP + -0x560],RAX
	00023651:MOV RAX,qword ptr [RBP + -0x568]
	00023658:ADD RAX,0x37
	0002365c:MOV qword ptr [RBP + -0x528],RAX
	00023663:MOV RCX,qword ptr [RBP + -0x528]
	0002366a:MOV RDX,0x4924924924924925
	00023674:MOV RAX,RCX
	00023677:IMUL RDX
	0002367a:MOV RAX,RDX
	0002367d:SAR RAX,0x4
	00023681:SAR RCX,0x3f
	00023685:MOV RDX,RCX
	00023688:SUB RAX,RDX
	0002368b:MOV RDX,RAX
	0002368e:MOV RAX,RDX
	00023691:SHL RAX,0x3
	00023695:SUB RAX,RDX
	00023698:SHL RAX,0x3
	0002369c:ADD qword ptr [RBP + -0x530],RAX
	000236a3:MOV RDX,qword ptr [RBP + -0x540]
	000236aa:MOV RAX,RDX
	000236ad:SHL RAX,0x3
	000236b1:SUB RAX,RDX
	000236b4:SHL RAX,0x3
	000236b8:MOV RSI,RAX
	000236bb:MOV RDX,qword ptr [RBP + -0x530]
	000236c2:MOV RAX,qword ptr [RBP + -0x550]
	000236c9:MOV RCX,RDX
	000236cc:MOV RDX,RSI
	000236cf:MOV RSI,RAX
	000236d2:MOV RDI,RCX
	000236d5:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
81: if (yyss != yyssa) {
	00023748:LEA RAX,[RBP + -0x30]
	0002374c:CMP qword ptr [RBP + -0x538],RAX
	00023753:JZ 0x00023764
END_OF_LINE
----------------------------------------------
82: free(yyss);
	0002375f:CALL 0x00005860
END_OF_LINE
----------------------------------------------
84: yyssp = __dest + lVar10;
	00023776:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
85: yyvsp = pYVar11 + lVar10;
	000237a0:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
86: yyss = __dest;
	000237c6:JNC 0x000257e4
END_OF_LINE
----------------------------------------------
87: yyvs = pYVar11;
	000237c6:JNC 0x000257e4
END_OF_LINE
----------------------------------------------
88: if (yyssp < __dest + yystacksize + -1) goto LAB_000237cc;
	000237b1:LEA RDX,[RAX + -0x1]
	000237b5:MOV RAX,qword ptr [RBP + -0x560]
	000237bc:ADD RAX,RDX
	000237bf:CMP qword ptr [RBP + -0x558],RAX
	000237c6:JNC 0x000257e4
	000237cc:CMP dword ptr [RBP + -0x588],0xc
END_OF_LINE
----------------------------------------------
89: goto LAB_00025803;
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
92: yyerror(pc,"memory exhausted");
	00025827:CALL 0x0002664e
END_OF_LINE
----------------------------------------------
93: yyresult = 2;
	0002582c:MOV dword ptr [RBP + -0x57c],0x2
END_OF_LINE
----------------------------------------------
94: goto LAB_00025837;
	00025837:CMP dword ptr [RBP + -0x590],-0x2
END_OF_LINE
----------------------------------------------
96: LAB_000237cc:
	000237cc:CMP dword ptr [RBP + -0x588],0xc
END_OF_LINE
----------------------------------------------
97: if (yystate == 0xc) {
	000237cc:CMP dword ptr [RBP + -0x588],0xc
	000237d3:JZ 0x000257d7
END_OF_LINE
----------------------------------------------
98: yyresult = 0;
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
END_OF_LINE
----------------------------------------------
99: goto LAB_00025837;
	00025837:CMP dword ptr [RBP + -0x590],-0x2
END_OF_LINE
----------------------------------------------
101: cVar1 = yypact[yystate];
	000237e0:CDQE
	000237e2:LEA RDX,[0x348a0]
	000237e9:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
102: if (cVar1 != -0x5d) {
	000237ed:MOVSX EAX,AL
	000237f0:MOV dword ptr [RBP + -0x580],EAX
	000237f6:CMP dword ptr [RBP + -0x580],-0x5d
	000237fd:JZ 0x000239a5
END_OF_LINE
----------------------------------------------
103: if (yychar == -2) {
	00023803:CMP dword ptr [RBP + -0x590],-0x2
	0002380a:JNZ 0x0002382b
END_OF_LINE
----------------------------------------------
104: yychar = yylex(&yylval,pc);
	00023813:LEA RAX,[RBP + -0x510]
	0002381a:MOV RSI,RDX
	0002381d:MOV RDI,RAX
	00023820:CALL 0x0002617c
END_OF_LINE
----------------------------------------------
106: if (0 < yychar) {
	00023832:JG 0x0002384a
END_OF_LINE
----------------------------------------------
107: if (yychar != 0x100) {
	0002384a:CMP dword ptr [RBP + -0x590],0x100
	00023854:JNZ 0x0002386f
END_OF_LINE
----------------------------------------------
108: if ((yychar < 0) || (0x115 < yychar)) {
	0002386f:CMP dword ptr [RBP + -0x590],0x0
	00023876:JS 0x0002389c
	00023878:CMP dword ptr [RBP + -0x590],0x115
	00023882:JG 0x0002389c
END_OF_LINE
----------------------------------------------
109: yytoken = YYSYMBOL_YYUNDEF;
	0002389c:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
112: yytoken = (yysymbol_kind_t)""[yychar];
	0002388a:CDQE
	0002388c:LEA RDX,[0x34780]
	00023893:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00023897:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
114: goto LAB_000238a7;
	000238a7:MOV EAX,dword ptr [RBP + -0x578]
END_OF_LINE
----------------------------------------------
116: yychar = 0x101;
	00023856:MOV dword ptr [RBP + -0x590],0x101
END_OF_LINE
----------------------------------------------
117: goto LAB_00025675;
	00025675:MOV dword ptr [RBP + -0x584],0x3
END_OF_LINE
----------------------------------------------
119: yychar = 0;
	00023834:MOV dword ptr [RBP + -0x590],0x0
END_OF_LINE
----------------------------------------------
120: yytoken = YYSYMBOL_YYEOF;
	0002383e:MOV dword ptr [RBP + -0x578],0x0
END_OF_LINE
----------------------------------------------
121: LAB_000238a7:
	000238a7:MOV EAX,dword ptr [RBP + -0x578]
END_OF_LINE
----------------------------------------------
122: iVar8 = cVar1 + yytoken;
	000237ed:MOVSX EAX,AL
	000237f0:MOV dword ptr [RBP + -0x580],EAX
	000237f6:CMP dword ptr [RBP + -0x580],-0x5d
	000237fd:JZ 0x000239a5
	00023803:CMP dword ptr [RBP + -0x590],-0x2
	0002380a:JNZ 0x0002382b
	0002380c:MOV RDX,qword ptr [RBP + -0x598]
	00023813:LEA RAX,[RBP + -0x510]
	0002381a:MOV RSI,RDX
	0002381d:MOV RDI,RAX
	00023820:CALL 0x0002617c
	00023825:MOV dword ptr [RBP + -0x590],EAX
	0002382b:CMP dword ptr [RBP + -0x590],0x0
	00023832:JG 0x0002384a
	00023834:MOV dword ptr [RBP + -0x590],0x0
	0002383e:MOV dword ptr [RBP + -0x578],0x0
	00023848:JMP 0x000238a7
	0002384a:CMP dword ptr [RBP + -0x590],0x100
	00023854:JNZ 0x0002386f
	00023856:MOV dword ptr [RBP + -0x590],0x101
	00023860:MOV dword ptr [RBP + -0x578],0x1
	0002386a:JMP 0x00025675
	0002386f:CMP dword ptr [RBP + -0x590],0x0
	00023876:JS 0x0002389c
	00023878:CMP dword ptr [RBP + -0x590],0x115
	00023882:JG 0x0002389c
	00023884:MOV EAX,dword ptr [RBP + -0x590]
	0002388a:CDQE
	0002388c:LEA RDX,[0x34780]
	00023893:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00023897:MOVSX EAX,AL
	0002389a:JMP 0x000238a1
	0002389c:MOV EAX,0x2
	000238a1:MOV dword ptr [RBP + -0x578],EAX
	000238a7:MOV EAX,dword ptr [RBP + -0x578]
	000238ad:ADD dword ptr [RBP + -0x580],EAX
END_OF_LINE
----------------------------------------------
123: if (((iVar8 < 0) || (0x70 < iVar8)) ||
	000238b3:CMP dword ptr [RBP + -0x580],0x0
	000238ba:JS 0x000239a8
	000238c0:CMP dword ptr [RBP + -0x580],0x70
	000238c7:JG 0x000239a8
	000238cd:MOV EAX,dword ptr [RBP + -0x580]
	000238d3:CDQE
	000238d5:LEA RDX,[0x34a60]
	000238dc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000238e0:MOVSX EAX,AL
	000238e3:CMP dword ptr [RBP + -0x578],EAX
	000238e9:JNZ 0x000239a8
END_OF_LINE
----------------------------------------------
124: (yytoken !=
	000238e3:CMP dword ptr [RBP + -0x578],EAX
END_OF_LINE
----------------------------------------------
125: "\x1b\x05\x06\a\b\t\n\x04\f\x0ff\x0f\x10\x13\x0f\x13\x13\x14\x13\x19p\x19\x13\x1b\x05\x06\a\b\t\n\x05\x06\a\b\t\n\x13\x13\x13k\x13\x14\x19\x19\x19q\x13\x14\x15\x16\x19\x05\x06\a\b\t\n\v\f\r\x0e\x17\x10\x11\x12\x13\x14\x15\x16`\x18\x05\x06\a\b\t\n"
	000238dc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
126: [iVar8])) goto LAB_000239a9;
	000238d3:CDQE
	000238d5:LEA RDX,[0x34a60]
	000238dc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000238e0:MOVSX EAX,AL
	000238e3:CMP dword ptr [RBP + -0x578],EAX
	000238e9:JNZ 0x000239a8
	000238ef:MOV EAX,dword ptr [RBP + -0x580]
	000238f5:CDQE
	000238f7:LEA RDX,[0x349e0]
	000238fe:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00023902:MOVSX EAX,AL
	00023905:MOV dword ptr [RBP + -0x580],EAX
	0002390b:CMP dword ptr [RBP + -0x580],0x0
	00023912:JG 0x0002391f
	00023914:NEG dword ptr [RBP + -0x580]
	0002391a:JMP 0x000239d3
	0002391f:CMP dword ptr [RBP + -0x584],0x0
	00023926:JZ 0x0002392f
	00023928:SUB dword ptr [RBP + -0x584],0x1
	0002392f:MOV EAX,dword ptr [RBP + -0x580]
	00023935:MOV dword ptr [RBP + -0x588],EAX
	0002393b:ADD qword ptr [RBP + -0x548],0x38
	00023943:MOV RAX,qword ptr [RBP + -0x548]
	0002394a:MOV RCX,qword ptr [RBP + -0x510]
	00023951:MOV RBX,qword ptr [RBP + -0x508]
	00023958:MOV qword ptr [RAX],RCX
	0002395b:MOV qword ptr [RAX + 0x8],RBX
	0002395f:MOV RCX,qword ptr [RBP + -0x500]
	00023966:MOV RBX,qword ptr [RBP + -0x4f8]
	0002396d:MOV qword ptr [RAX + 0x10],RCX
	00023971:MOV qword ptr [RAX + 0x18],RBX
	00023975:MOV RCX,qword ptr [RBP + -0x4f0]
	0002397c:MOV RBX,qword ptr [RBP + -0x4e8]
	00023983:MOV qword ptr [RAX + 0x20],RCX
	00023987:MOV qword ptr [RAX + 0x28],RBX
	0002398b:MOV RDX,qword ptr [RBP + -0x4e0]
	00023992:MOV qword ptr [RAX + 0x30],RDX
	00023996:MOV dword ptr [RBP + -0x590],0xfffffffe
	000239a0:JMP 0x0002355b
	000239a5:NOP
	000239a6:JMP 0x000239a9
	000239a8:NOP
	000239a9:MOV EAX,dword ptr [RBP + -0x588]
END_OF_LINE
----------------------------------------------
127: yystate = (yy_state_fast_t)
	00023902:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
128: "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\\oZ[jpXo\x05\x06\a\bX\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x01\x17\x18\x19\x1a\x1b\x1c\x1dO\x1e345678\f9=>?@AB<0P/\x06S\bQR\x1aTUVW^_`Yiabc"
	000238fe:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
129: [iVar8];
	000238f5:CDQE
END_OF_LINE
----------------------------------------------
130: if (yystate < 1) {
	00023912:JG 0x0002391f
END_OF_LINE
----------------------------------------------
131: yyn = -yystate;
	00023914:NEG dword ptr [RBP + -0x580]
END_OF_LINE
----------------------------------------------
132: goto LAB_000239d3;
	000239d3:MOV EAX,dword ptr [RBP + -0x580]
END_OF_LINE
----------------------------------------------
134: if (yyerrstatus != 0) {
	0002391f:CMP dword ptr [RBP + -0x584],0x0
	00023926:JZ 0x0002392f
END_OF_LINE
----------------------------------------------
135: yyerrstatus = yyerrstatus + -1;
	00023928:SUB dword ptr [RBP + -0x584],0x1
END_OF_LINE
----------------------------------------------
137: yyvsp[1].intval = yylval.intval;
	0002393b:ADD qword ptr [RBP + -0x548],0x38
	00023943:MOV RAX,qword ptr [RBP + -0x548]
	0002394a:MOV RCX,qword ptr [RBP + -0x510]
	00023951:MOV RBX,qword ptr [RBP + -0x508]
	00023958:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
138: *(intmax_t *)((long)yyvsp + 0x40) = yylval.textintval.value;
	0002395b:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
139: *(ptrdiff_t *)((long)yyvsp + 0x48) = yylval.textintval.digits;
	0002396d:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
140: *(intmax_t *)((long)yyvsp + 0x50) = yylval.rel.hour;
	00023971:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
141: *(intmax_t *)((long)yyvsp + 0x58) = yylval.rel.minutes;
	00023983:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
142: *(intmax_t *)((long)yyvsp + 0x60) = yylval.rel.seconds;
	00023987:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
143: *(undefined8 *)((long)yyvsp + 0x68) = yylval._48_8_;
	00023992:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
144: yychar = -2;
	00023996:MOV dword ptr [RBP + -0x590],0xfffffffe
END_OF_LINE
----------------------------------------------
145: yyvsp = yyvsp + 1;
	0002393b:ADD qword ptr [RBP + -0x548],0x38
	00023943:MOV RAX,qword ptr [RBP + -0x548]
	0002394a:MOV RCX,qword ptr [RBP + -0x510]
	00023951:MOV RBX,qword ptr [RBP + -0x508]
	00023958:MOV qword ptr [RAX],RCX
	0002395b:MOV qword ptr [RAX + 0x8],RBX
	0002395f:MOV RCX,qword ptr [RBP + -0x500]
	00023966:MOV RBX,qword ptr [RBP + -0x4f8]
	0002396d:MOV qword ptr [RAX + 0x10],RCX
	00023971:MOV qword ptr [RAX + 0x18],RBX
	00023975:MOV RCX,qword ptr [RBP + -0x4f0]
	0002397c:MOV RBX,qword ptr [RBP + -0x4e8]
	00023983:MOV qword ptr [RAX + 0x20],RCX
	00023987:MOV qword ptr [RAX + 0x28],RBX
	0002398b:MOV RDX,qword ptr [RBP + -0x4e0]
	00023992:MOV qword ptr [RAX + 0x30],RDX
	00023996:MOV dword ptr [RBP + -0x590],0xfffffffe
	000239a0:JMP 0x0002355b
END_OF_LINE
----------------------------------------------
146: goto LAB_0002355b;
	0002355b:ADD qword ptr [RBP + -0x558],0x1
END_OF_LINE
----------------------------------------------
148: LAB_000239a9:
	000239a9:MOV EAX,dword ptr [RBP + -0x588]
END_OF_LINE
----------------------------------------------
149: yyn = (int)"\x05"[yystate];
	000239af:CDQE
	000239b1:LEA RDX,[0x34920]
	000239b8:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000239bc:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
150: if (yyn == 0) {
	000239c5:CMP dword ptr [RBP + -0x580],0x0
	000239cc:JZ 0x000255b3
END_OF_LINE
----------------------------------------------
151: if (yychar == -2) {
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
END_OF_LINE
----------------------------------------------
152: yVar9 = YYSYMBOL_YYEMPTY;
	000255f1:MOV EAX,0xfffffffe
END_OF_LINE
----------------------------------------------
154: else if ((yychar < 0) || (0x115 < yychar)) {
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
END_OF_LINE
----------------------------------------------
155: yVar9 = YYSYMBOL_YYUNDEF;
	000255ea:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
158: yVar9 = (yysymbol_kind_t)""[yychar];
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
160: if (yyerrstatus == 0) {
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
END_OF_LINE
----------------------------------------------
161: yyerror(pc,"syntax error");
	00025620:CALL 0x0002664e
END_OF_LINE
----------------------------------------------
163: if (yyerrstatus == 3) {
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
END_OF_LINE
----------------------------------------------
164: if (yychar < 1) {
	00025635:JG 0x00025645
END_OF_LINE
----------------------------------------------
165: if (yychar == 0) {
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
END_OF_LINE
----------------------------------------------
166: LAB_00025803:
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
167: yyresult = 1;
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
168: LAB_00025837:
	00025837:CMP dword ptr [RBP + -0x590],-0x2
END_OF_LINE
----------------------------------------------
169: if (yychar != -2) {
	00025837:CMP dword ptr [RBP + -0x590],-0x2
	0002583e:JZ 0x0002589d
END_OF_LINE
----------------------------------------------
170: if ((yychar < 0) || (0x115 < yychar)) {
	00025840:CMP dword ptr [RBP + -0x590],0x0
	00025847:JS 0x0002586d
	00025849:CMP dword ptr [RBP + -0x590],0x115
	00025853:JG 0x0002586d
END_OF_LINE
----------------------------------------------
171: yVar9 = YYSYMBOL_YYUNDEF;
	0002586d:MOV EAX,0x2
END_OF_LINE
----------------------------------------------
174: yVar9 = (yysymbol_kind_t)""[yychar];
	0002585b:CDQE
	0002585d:LEA RDX,[0x34780]
	00025864:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025868:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
176: yydestruct("Cleanup: discarding lookahead",yVar9,&yylval,pc);
	0002587f:LEA RDX,[RBP + -0x510]
	00025886:MOV EAX,dword ptr [RBP + -0x578]
	0002588c:MOV ESI,EAX
	0002588e:LEA RAX,[0x34d31]
	00025895:MOV RDI,RAX
	00025898:CALL 0x0002348b
END_OF_LINE
----------------------------------------------
178: yyvsp = yyvsp + -(long)yylen;
	000258a3:MOVSXD RDX,EAX
	000258a6:MOV RAX,RDX
	000258a9:SHL RAX,0x3
	000258ad:SUB RAX,RDX
	000258b0:SHL RAX,0x3
	000258b4:NEG RAX
	000258b7:ADD qword ptr [RBP + -0x548],RAX
END_OF_LINE
----------------------------------------------
179: for (yyssp = yyssp + -(long)yylen; yyssp != yyss; yyssp = yyssp + -1) {
	000258c4:CDQE
	000258c6:NEG RAX
	000258c9:ADD qword ptr [RBP + -0x558],RAX
	000258d0:JMP 0x0002591e
	000258d2:MOV RAX,qword ptr [RBP + -0x558]
	000258d9:MOVZX EAX,byte ptr [RAX]
	000258dc:MOVSX EAX,AL
	000258df:CDQE
	000258e1:LEA RDX,[0x34ae0]
	000258e8:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000258ec:MOVSX EAX,AL
	000258ef:MOV RCX,qword ptr [RBP + -0x598]
	000258f6:MOV RDX,qword ptr [RBP + -0x548]
	000258fd:MOV ESI,EAX
	000258ff:LEA RAX,[0x34d4f]
	00025906:MOV RDI,RAX
	00025909:CALL 0x0002348b
	0002590e:SUB qword ptr [RBP + -0x548],0x38
	00025916:SUB qword ptr [RBP + -0x558],0x1
	0002591e:MOV RAX,qword ptr [RBP + -0x558]
	00025925:CMP RAX,qword ptr [RBP + -0x560]
	0002592c:JNZ 0x000258d2
END_OF_LINE
----------------------------------------------
180: yydestruct("Cleanup: popping",(int)""[(int)*yyssp],yyvsp,pc);
	000258d9:MOVZX EAX,byte ptr [RAX]
	000258dc:MOVSX EAX,AL
	000258df:CDQE
	000258e1:LEA RDX,[0x34ae0]
	000258e8:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000258ec:MOVSX EAX,AL
	000258ef:MOV RCX,qword ptr [RBP + -0x598]
	000258f6:MOV RDX,qword ptr [RBP + -0x548]
	000258fd:MOV ESI,EAX
	000258ff:LEA RAX,[0x34d4f]
	00025906:MOV RDI,RAX
	00025909:CALL 0x0002348b
END_OF_LINE
----------------------------------------------
181: yyvsp = yyvsp + -1;
	0002590e:SUB qword ptr [RBP + -0x548],0x38
END_OF_LINE
----------------------------------------------
183: if (yyss != yyssa) {
	0002592e:LEA RAX,[RBP + -0x30]
	00025932:CMP qword ptr [RBP + -0x560],RAX
	00025939:JZ 0x0002594a
END_OF_LINE
----------------------------------------------
184: free(yyss);
	00025945:CALL 0x00005860
END_OF_LINE
----------------------------------------------
186: if (lVar2 == *(long *)(in_FS_OFFSET + 0x28)) {
	00025954:SUB RDX,qword ptr FS:[0x28]
	0002595d:JZ 0x00025964
END_OF_LINE
----------------------------------------------
187: return yyresult;
	00025969:RET
END_OF_LINE
----------------------------------------------
190: __stack_chk_fail();
	0002595f:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
194: yydestruct("Error: discarding",yVar9,&yylval,pc);
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
END_OF_LINE
----------------------------------------------
195: yychar = -2;
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
END_OF_LINE
----------------------------------------------
198: LAB_00025675:
	00025675:MOV dword ptr [RBP + -0x584],0x3
END_OF_LINE
----------------------------------------------
199: yyerrstatus = 3;
	00025675:MOV dword ptr [RBP + -0x584],0x3
END_OF_LINE
----------------------------------------------
200: while( true ) {
	000256f7:JG 0x0002576a
END_OF_LINE
----------------------------------------------
201: yylen = 0;
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
END_OF_LINE
----------------------------------------------
202: if (((yypact[yystate] != -0x5d) && (iVar8 = yypact[yystate] + 1, -1 < iVar8)) &&
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
END_OF_LINE
----------------------------------------------
203: ((iVar8 < 0x71 &&
	000256bb:JG 0x000256f9
END_OF_LINE
----------------------------------------------
204: (("\x1b\x05\x06\a\b\t\n\x04\f\x0ff\x0f\x10\x13\x0f\x13\x13\x14\x13\x19p\x19\x13\x1b\x05\x06\a\b\t\n\x05\x06\a\b\t\n\x13\x13\x13k\x13\x14\x19\x19\x19q\x13\x14\x15\x16\x19\x05\x06\a\b\t\n\v\f\r\x0e\x17\x10\x11\x12\x13\x14\x15\x16`\x18\x05\x06\a\b\t\n"
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
205: [iVar8] == '\x01' &&
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
END_OF_LINE
----------------------------------------------
206: (cVar1 = "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\\oZ[jpXo\x05\x06\a\bX\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x01\x17\x18\x19\x1a\x1b\x1c\x1dO\x1e345678\f9=>?@AB<0P/\x06S\bQR\x1aTUVW^_`Yiabc"
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
207: [iVar8], 0 < cVar1)))))) break;
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
END_OF_LINE
----------------------------------------------
208: if (yyssp == yyss) goto LAB_00025803;
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
209: yydestruct("Error: popping",(int)""[yystate],yyvsp,pc);
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
END_OF_LINE
----------------------------------------------
210: yyvsp = yyvsp + -1;
	00025742:SUB qword ptr [RBP + -0x548],0x38
END_OF_LINE
----------------------------------------------
211: yyssp = yyssp + -1;
	0002574a:SUB qword ptr [RBP + -0x558],0x1
END_OF_LINE
----------------------------------------------
212: yystate = (yy_state_fast_t)*yyssp;
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
214: yyvsp[1].intval = yylval.intval;
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
215: *(intmax_t *)((long)yyvsp + 0x40) = yylval.textintval.value;
	0002578b:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
216: *(ptrdiff_t *)((long)yyvsp + 0x48) = yylval.textintval.digits;
	0002579d:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
217: *(intmax_t *)((long)yyvsp + 0x50) = yylval.rel.hour;
	000257a1:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
218: *(intmax_t *)((long)yyvsp + 0x58) = yylval.rel.minutes;
	000257b3:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
219: *(intmax_t *)((long)yyvsp + 0x60) = yylval.rel.seconds;
	000257b7:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
220: *(undefined8 *)((long)yyvsp + 0x68) = yylval._48_8_;
	000257c2:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
221: yystate = (int)cVar1;
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
END_OF_LINE
----------------------------------------------
222: yyvsp = yyvsp + 1;
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
END_OF_LINE
----------------------------------------------
223: goto LAB_0002355b;
	0002355b:ADD qword ptr [RBP + -0x558],0x1
END_OF_LINE
----------------------------------------------
225: LAB_000239d3:
	000239d3:MOV EAX,dword ptr [RBP + -0x580]
END_OF_LINE
----------------------------------------------
226: yylen = (int)""[yyn];
	000239d9:CDQE
	000239db:LEA RDX,[0x34bc0]
	000239e2:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000239e6:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
227: pYVar11 = yyvsp + (1 - yylen);
	000239f4:SUB EAX,dword ptr [RBP + -0x574]
	000239fa:MOVSXD RDX,EAX
	000239fd:MOV RAX,RDX
	00023a00:SHL RAX,0x3
	00023a04:SUB RAX,RDX
	00023a07:SHL RAX,0x3
	00023a0b:MOV RDX,RAX
	00023a0e:MOV RAX,qword ptr [RBP + -0x548]
	00023a15:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
228: yyval.intval = *(undefined8 *)pYVar11;
	00023a18:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
229: yyval.textintval.value = *(undefined8 *)((long)pYVar11 + 8);
	00023a1b:MOV RBX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
230: yyval.textintval.digits = *(undefined8 *)((long)pYVar11 + 0x10);
	00023a2d:MOV RCX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
231: yyval.rel.hour = *(intmax_t *)((long)pYVar11 + 0x18);
	00023a31:MOV RBX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
232: yyval.rel.minutes = *(intmax_t *)((long)pYVar11 + 0x20);
	00023a43:MOV RCX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
233: yyval.rel.seconds = *(intmax_t *)((long)pYVar11 + 0x28);
	00023a47:MOV RBX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
234: yyval._48_8_ = *(undefined8 *)&(pYVar11->rel).ns;
	00023a59:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
235: switch(yyn) {
	00023a96:JMP RAX
END_OF_LINE
----------------------------------------------
236: case 4:
	00023aa7:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
237: _Var3 = (yyvsp->textintval).value;
	00023aa7:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
238: (pc->seconds).tv_sec = yyvsp->intval;
	00023aab:MOV RAX,qword ptr [RAX]
	00023aae:MOV qword ptr [RCX + 0x58],RAX
END_OF_LINE
----------------------------------------------
239: (pc->seconds).tv_nsec = _Var3;
	00023ab2:MOV qword ptr [RCX + 0x60],RDX
END_OF_LINE
----------------------------------------------
240: pc->timespec_seen = true;
	00023abd:MOV byte ptr [RAX + 0xa0],0x1
END_OF_LINE
----------------------------------------------
241: debug_print_current_time("number of seconds",pc);
	00023ad8:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
243: case 7:
	00023ae9:MOV RAX,qword ptr [RAX + 0xc8]
END_OF_LINE
----------------------------------------------
244: pc->times_seen = pc->times_seen + 1;
	00023ae9:MOV RAX,qword ptr [RAX + 0xc8]
	00023af0:LEA RDX,[RAX + 0x1]
	00023af4:MOV RAX,qword ptr [RBP + -0x598]
	00023afb:MOV qword ptr [RAX + 0xc8],RDX
END_OF_LINE
----------------------------------------------
245: pc->dates_seen = pc->dates_seen + 1;
	00023b09:MOV RAX,qword ptr [RAX + 0xa8]
	00023b10:LEA RDX,[RAX + 0x1]
	00023b14:MOV RAX,qword ptr [RBP + -0x598]
	00023b1b:MOV qword ptr [RAX + 0xa8],RDX
END_OF_LINE
----------------------------------------------
246: debug_print_current_time("datetime",pc);
	00023b36:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
248: case 8:
	00023b47:MOV RAX,qword ptr [RAX + 0xc8]
END_OF_LINE
----------------------------------------------
249: pc->times_seen = pc->times_seen + 1;
	00023b47:MOV RAX,qword ptr [RAX + 0xc8]
	00023b4e:LEA RDX,[RAX + 0x1]
	00023b52:MOV RAX,qword ptr [RBP + -0x598]
	00023b59:MOV qword ptr [RAX + 0xc8],RDX
END_OF_LINE
----------------------------------------------
250: debug_print_current_time("time",pc);
	00023b74:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
252: case 9:
	00023b85:MOV RAX,qword ptr [RAX + 0xb8]
END_OF_LINE
----------------------------------------------
253: pc->local_zones_seen = pc->local_zones_seen + 1;
	00023b85:MOV RAX,qword ptr [RAX + 0xb8]
	00023b8c:LEA RDX,[RAX + 0x1]
	00023b90:MOV RAX,qword ptr [RBP + -0x598]
	00023b97:MOV qword ptr [RAX + 0xb8],RDX
END_OF_LINE
----------------------------------------------
254: debug_print_current_time("local_zone",pc);
	00023bb2:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
256: case 10:
	00023bc3:MOV RAX,qword ptr [RAX + 0xd0]
END_OF_LINE
----------------------------------------------
257: pc->zones_seen = pc->zones_seen + 1;
	00023bc3:MOV RAX,qword ptr [RAX + 0xd0]
	00023bca:LEA RDX,[RAX + 0x1]
	00023bce:MOV RAX,qword ptr [RBP + -0x598]
	00023bd5:MOV qword ptr [RAX + 0xd0],RDX
END_OF_LINE
----------------------------------------------
258: debug_print_current_time("zone",pc);
	00023bf0:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
260: case 0xb:
	00023c01:MOV RAX,qword ptr [RAX + 0xa8]
END_OF_LINE
----------------------------------------------
261: pc->dates_seen = pc->dates_seen + 1;
	00023c01:MOV RAX,qword ptr [RAX + 0xa8]
	00023c08:LEA RDX,[RAX + 0x1]
	00023c0c:MOV RAX,qword ptr [RBP + -0x598]
	00023c13:MOV qword ptr [RAX + 0xa8],RDX
END_OF_LINE
----------------------------------------------
262: debug_print_current_time("date",pc);
	00023c2e:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
264: case 0xc:
	00023c3f:MOV RAX,qword ptr [RAX + 0xb0]
END_OF_LINE
----------------------------------------------
265: pc->days_seen = pc->days_seen + 1;
	00023c3f:MOV RAX,qword ptr [RAX + 0xb0]
	00023c46:LEA RDX,[RAX + 0x1]
	00023c4a:MOV RAX,qword ptr [RBP + -0x598]
	00023c51:MOV qword ptr [RAX + 0xb0],RDX
END_OF_LINE
----------------------------------------------
266: debug_print_current_time("day",pc);
	00023c6c:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
268: case 0xd:
	00023c8a:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
269: debug_print_relative_time("relative",pc);
	00023c8a:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
271: case 0xe:
	00023ca8:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
272: debug_print_current_time("number",pc);
	00023ca8:CALL 0x00022d19
END_OF_LINE
----------------------------------------------
274: case 0xf:
	00023cc6:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
275: debug_print_relative_time("hybrid",pc);
	00023cc6:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
277: case 0x12:
	00023cdb:MOV RSI,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
278: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0x30),0,0,0);
	00023cdb:MOV RSI,qword ptr [RAX + 0x8]
	00023cdf:MOV RAX,qword ptr [RBP + -0x598]
	00023ce6:MOV R8D,0x0
	00023cec:MOV ECX,0x0
	00023cf1:MOV EDX,0x0
	00023cf6:MOV RDI,RAX
	00023cf9:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
279: pc->meridian = (int)yyvsp->intval;
	00023d05:MOV RAX,qword ptr [RAX]
	00023d08:MOV EDX,EAX
	00023d0a:MOV RAX,qword ptr [RBP + -0x598]
	00023d11:MOV dword ptr [RAX + 0x1c],EDX
END_OF_LINE
----------------------------------------------
281: case 0x13:
	00023d24:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
282: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0xa0),*(intmax_t *)((long)yyvsp + -0x30),0,0);
	00023d24:MOV RDX,qword ptr [RAX + 0x8]
	00023d28:MOV RAX,qword ptr [RBP + -0x548]
	00023d2f:SUB RAX,0xa8
	00023d35:MOV RSI,qword ptr [RAX + 0x8]
	00023d39:MOV RAX,qword ptr [RBP + -0x598]
	00023d40:MOV R8D,0x0
	00023d46:MOV ECX,0x0
	00023d4b:MOV RDI,RAX
	00023d4e:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
283: pc->meridian = (int)yyvsp->intval;
	00023d5a:MOV RAX,qword ptr [RAX]
	00023d5d:MOV EDX,EAX
	00023d5f:MOV RAX,qword ptr [RBP + -0x598]
	00023d66:MOV dword ptr [RAX + 0x1c],EDX
END_OF_LINE
----------------------------------------------
285: case 0x14:
	00023d79:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
286: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0x110),*(intmax_t *)((long)yyvsp + -0xa0),
	00023d9a:MOV RDX,qword ptr [RAX + 0x8]
	00023d9e:MOV RAX,qword ptr [RBP + -0x548]
	00023da5:SUB RAX,0x118
	00023dab:MOV RSI,qword ptr [RAX + 0x8]
	00023daf:MOV RAX,qword ptr [RBP + -0x598]
	00023db6:MOV R8D,EDI
	00023db9:MOV RDI,RAX
	00023dbc:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
287: yyvsp[-1].intval,(int)*(undefined8 *)((long)yyvsp + -0x30));
	00023d79:MOV RAX,qword ptr [RAX + 0x8]
	00023d7d:MOV EDI,EAX
	00023d7f:MOV RAX,qword ptr [RBP + -0x548]
	00023d86:SUB RAX,0x38
	00023d8a:MOV RCX,qword ptr [RAX]
	00023d8d:MOV RAX,qword ptr [RBP + -0x548]
	00023d94:SUB RAX,0xa8
	00023d9a:MOV RDX,qword ptr [RAX + 0x8]
	00023d9e:MOV RAX,qword ptr [RBP + -0x548]
	00023da5:SUB RAX,0x118
	00023dab:MOV RSI,qword ptr [RAX + 0x8]
	00023daf:MOV RAX,qword ptr [RBP + -0x598]
	00023db6:MOV R8D,EDI
	00023db9:MOV RDI,RAX
	00023dbc:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
288: pc->meridian = (int)yyvsp->intval;
	00023dc8:MOV RAX,qword ptr [RAX]
	00023dcb:MOV EDX,EAX
	00023dcd:MOV RAX,qword ptr [RBP + -0x598]
	00023dd4:MOV dword ptr [RAX + 0x1c],EDX
END_OF_LINE
----------------------------------------------
290: case 0x16:
	00023de7:MOV RSI,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
291: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0x30),0,0,0);
	00023de7:MOV RSI,qword ptr [RAX + 0x8]
	00023deb:MOV RAX,qword ptr [RBP + -0x598]
	00023df2:MOV R8D,0x0
	00023df8:MOV ECX,0x0
	00023dfd:MOV EDX,0x0
	00023e02:MOV RDI,RAX
	00023e05:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
292: pc->meridian = 2;
	00023e11:MOV dword ptr [RAX + 0x1c],0x2
END_OF_LINE
----------------------------------------------
294: case 0x17:
	00023e28:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
295: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0xa0),*(intmax_t *)((long)yyvsp + -0x30),0,0);
	00023e28:MOV RDX,qword ptr [RAX + 0x8]
	00023e2c:MOV RAX,qword ptr [RBP + -0x548]
	00023e33:SUB RAX,0xa8
	00023e39:MOV RSI,qword ptr [RAX + 0x8]
	00023e3d:MOV RAX,qword ptr [RBP + -0x598]
	00023e44:MOV R8D,0x0
	00023e4a:MOV ECX,0x0
	00023e4f:MOV RDI,RAX
	00023e52:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
296: pc->meridian = 2;
	00023e5e:MOV dword ptr [RAX + 0x1c],0x2
END_OF_LINE
----------------------------------------------
298: case 0x18:
	00023e75:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
299: set_hhmmss(pc,*(intmax_t *)((long)yyvsp + -0x110),*(intmax_t *)((long)yyvsp + -0xa0),
	00023e96:MOV RDX,qword ptr [RAX + 0x8]
	00023e9a:MOV RAX,qword ptr [RBP + -0x548]
	00023ea1:SUB RAX,0x118
	00023ea7:MOV RSI,qword ptr [RAX + 0x8]
	00023eab:MOV RAX,qword ptr [RBP + -0x598]
	00023eb2:MOV R8D,EDI
	00023eb5:MOV RDI,RAX
	00023eb8:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
300: yyvsp[-1].intval,(int)*(undefined8 *)((long)yyvsp + -0x30));
	00023e75:MOV RAX,qword ptr [RAX + 0x8]
	00023e79:MOV EDI,EAX
	00023e7b:MOV RAX,qword ptr [RBP + -0x548]
	00023e82:SUB RAX,0x38
	00023e86:MOV RCX,qword ptr [RAX]
	00023e89:MOV RAX,qword ptr [RBP + -0x548]
	00023e90:SUB RAX,0xa8
	00023e96:MOV RDX,qword ptr [RAX + 0x8]
	00023e9a:MOV RAX,qword ptr [RBP + -0x548]
	00023ea1:SUB RAX,0x118
	00023ea7:MOV RSI,qword ptr [RAX + 0x8]
	00023eab:MOV RAX,qword ptr [RBP + -0x598]
	00023eb2:MOV R8D,EDI
	00023eb5:MOV RDI,RAX
	00023eb8:CALL 0x0002296f
END_OF_LINE
----------------------------------------------
301: pc->meridian = 2;
	00023ec4:MOV dword ptr [RAX + 0x1c],0x2
END_OF_LINE
----------------------------------------------
303: case 0x1b:
	00023ed7:MOV RAX,qword ptr [RAX + 0xd0]
END_OF_LINE
----------------------------------------------
304: pc->zones_seen = pc->zones_seen + 1;
	00023ed7:MOV RAX,qword ptr [RAX + 0xd0]
	00023ede:LEA RDX,[RAX + 0x1]
	00023ee2:MOV RAX,qword ptr [RBP + -0x598]
	00023ee9:MOV qword ptr [RAX + 0xd0],RDX
END_OF_LINE
----------------------------------------------
305: bVar6 = time_zone_hhmm(pc,yyvsp[-1].textintval,yyvsp->intval);
	00023ef7:MOV RCX,qword ptr [RAX]
	00023efa:MOV RAX,qword ptr [RBP + -0x548]
	00023f01:SUB RAX,0x38
	00023f05:MOV RDX,qword ptr [RBP + -0x598]
	00023f0c:SUB RSP,0x8
	00023f10:PUSH qword ptr [RAX + 0x10]
	00023f13:PUSH qword ptr [RAX + 0x8]
	00023f16:PUSH qword ptr [RAX]
	00023f18:MOV RSI,RCX
	00023f1b:MOV RDI,RDX
	00023f1e:CALL 0x0002596a
END_OF_LINE
----------------------------------------------
306: goto joined_r0x0002541e;
	0002541e:JZ 0x00025464
END_OF_LINE
----------------------------------------------
307: case 0x1c:
	00023f3e:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
308: pc->local_isdst = (int)yyvsp->intval;
	00023f3e:MOV RAX,qword ptr [RAX]
	00023f41:MOV EDX,EAX
	00023f43:MOV RAX,qword ptr [RBP + -0x598]
	00023f4a:MOV dword ptr [RAX + 0x14],EDX
END_OF_LINE
----------------------------------------------
310: case 0x1d:
	00023f59:MOV dword ptr [RAX + 0x14],0x1
END_OF_LINE
----------------------------------------------
311: pc->local_isdst = 1;
	00023f59:MOV dword ptr [RAX + 0x14],0x1
END_OF_LINE
----------------------------------------------
312: pc->dsts_seen = pc->dsts_seen + 1;
	00023f67:MOV RAX,qword ptr [RAX + 0xc0]
	00023f6e:LEA RDX,[RAX + 0x1]
	00023f72:MOV RAX,qword ptr [RBP + -0x598]
	00023f79:MOV qword ptr [RAX + 0xc0],RDX
END_OF_LINE
----------------------------------------------
314: case 0x1e:
	00023f8c:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
315: pc->time_zone = (int)yyvsp->intval;
	00023f8c:MOV RAX,qword ptr [RAX]
	00023f8f:MOV EDX,EAX
	00023f91:MOV RAX,qword ptr [RBP + -0x598]
	00023f98:MOV dword ptr [RAX + 0x18],EDX
END_OF_LINE
----------------------------------------------
317: case 0x1f:
	00023fa7:MOV dword ptr [RAX + 0x18],0x6270
END_OF_LINE
----------------------------------------------
318: pc->time_zone = 0x6270;
	00023fa7:MOV dword ptr [RAX + 0x18],0x6270
END_OF_LINE
----------------------------------------------
320: case 0x20:
	00023fba:SUB RAX,0x38
END_OF_LINE
----------------------------------------------
321: pc->time_zone = (int)yyvsp[-1].intval;
	00023fba:SUB RAX,0x38
	00023fbe:MOV RAX,qword ptr [RAX]
	00023fc1:MOV EDX,EAX
	00023fc3:MOV RAX,qword ptr [RBP + -0x598]
	00023fca:MOV dword ptr [RAX + 0x18],EDX
END_OF_LINE
----------------------------------------------
322: _Var5 = apply_relative_time(pc,yyvsp->rel,1);
	00023ff1:PUSH qword ptr [RAX]
	00023ff3:MOV ESI,0x1
	00023ff8:MOV RDI,RDX
	00023ffb:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
323: if (!_Var5) goto LAB_00025803;
	00024004:XOR EAX,0x1
	00024007:TEST AL,AL
	00024009:JNZ 0x000257e7
	0002400f:MOV RAX,qword ptr [RBP + -0x598]
	00024016:MOV RSI,RAX
	00024019:LEA RAX,[0x34c5e]
	00024020:MOV RDI,RAX
	00024023:CALL 0x000232a7
	00024028:JMP 0x00025465
	0002402d:MOV RAX,qword ptr [RBP + -0x598]
	00024034:MOV dword ptr [RAX + 0x18],0x6270
	0002403b:MOV RDX,qword ptr [RBP + -0x598]
	00024042:SUB RSP,0x8
	00024046:MOV RAX,qword ptr [RBP + -0x548]
	0002404d:PUSH qword ptr [RAX + 0x30]
	00024050:PUSH qword ptr [RAX + 0x28]
	00024053:PUSH qword ptr [RAX + 0x20]
	00024056:PUSH qword ptr [RAX + 0x18]
	00024059:PUSH qword ptr [RAX + 0x10]
	0002405c:PUSH qword ptr [RAX + 0x8]
	0002405f:PUSH qword ptr [RAX]
	00024061:MOV ESI,0x1
	00024066:MOV RDI,RDX
	00024069:CALL 0x0002267a
	0002406e:ADD RSP,0x40
	00024072:XOR EAX,0x1
	00024075:TEST AL,AL
	00024077:JNZ 0x000257ea
	0002407d:MOV RAX,qword ptr [RBP + -0x598]
	00024084:MOV RSI,RAX
	00024087:LEA RAX,[0x34c5e]
	0002408e:MOV RDI,RAX
	00024091:CALL 0x000232a7
	00024096:JMP 0x00025465
	0002409b:MOV RAX,qword ptr [RBP + -0x548]
	000240a2:MOV RCX,qword ptr [RAX]
	000240a5:MOV RAX,qword ptr [RBP + -0x548]
	000240ac:SUB RAX,0x38
	000240b0:MOV RDX,qword ptr [RBP + -0x598]
	000240b7:SUB RSP,0x8
	000240bb:PUSH qword ptr [RAX + 0x10]
	000240be:PUSH qword ptr [RAX + 0x8]
	000240c1:PUSH qword ptr [RAX]
	000240c3:MOV RSI,RCX
	000240c6:MOV RDI,RDX
	000240c9:CALL 0x0002596a
	000240ce:ADD RSP,0x20
	000240d2:XOR EAX,0x1
	000240d5:TEST AL,AL
	000240d7:JNZ 0x000257ed
	000240dd:MOV RAX,qword ptr [RBP + -0x598]
	000240e4:MOV EAX,dword ptr [RAX + 0x18]
	000240e7:MOV RDX,qword ptr [RBP + -0x548]
	000240ee:SUB RDX,0x70
	000240f2:MOV RCX,qword ptr [RDX]
	000240f5:CDQE
	000240f7:MOV EDX,0x0
	000240fc:ADD RAX,RCX
	000240ff:JNO 0x00024106
	00024101:MOV EDX,0x1
	00024106:MOVSXD RCX,EAX
	00024109:CMP RAX,RCX
	0002410c:JZ 0x00024113
	0002410e:MOV EDX,0x1
	00024113:MOV ECX,EAX
	00024115:MOV RAX,qword ptr [RBP + -0x598]
	0002411c:MOV dword ptr [RAX + 0x18],ECX
	0002411f:MOV EAX,EDX
	00024121:AND EAX,0x1
	00024124:TEST AL,AL
	00024126:JZ 0x0002544c
	0002412c:JMP 0x00025803
	00024131:MOV RAX,qword ptr [RBP + -0x548]
	00024138:MOV RAX,qword ptr [RAX]
	0002413b:ADD EAX,0xe10
	00024140:MOV EDX,EAX
	00024142:MOV RAX,qword ptr [RBP + -0x598]
	00024149:MOV dword ptr [RAX + 0x18],EDX
	0002414c:JMP 0x00025465
	00024151:MOV RAX,qword ptr [RBP + -0x548]
	00024158:SUB RAX,0x38
	0002415c:MOV RAX,qword ptr [RAX]
	0002415f:ADD EAX,0xe10
	00024164:MOV EDX,EAX
	00024166:MOV RAX,qword ptr [RBP + -0x598]
	0002416d:MOV dword ptr [RAX + 0x18],EDX
	00024170:JMP 0x00025465
	00024175:MOV RAX,qword ptr [RBP + -0x598]
	0002417c:MOV qword ptr [RAX + 0x8],0x0
	00024184:MOV RAX,qword ptr [RBP + -0x548]
	0002418b:MOV RAX,qword ptr [RAX]
	0002418e:MOV EDX,EAX
	00024190:MOV RAX,qword ptr [RBP + -0x598]
	00024197:MOV dword ptr [RAX + 0x10],EDX
	0002419a:JMP 0x00025465
	0002419f:MOV RAX,qword ptr [RBP + -0x598]
	000241a6:MOV qword ptr [RAX + 0x8],0x0
	000241ae:MOV RAX,qword ptr [RBP + -0x548]
	000241b5:SUB RAX,0x38
	000241b9:MOV RAX,qword ptr [RAX]
	000241bc:MOV EDX,EAX
	000241be:MOV RAX,qword ptr [RBP + -0x598]
	000241c5:MOV dword ptr [RAX + 0x10],EDX
	000241c8:JMP 0x00025465
	000241cd:MOV RAX,qword ptr [RBP + -0x548]
	000241d4:SUB RAX,0x38
	000241d8:MOV RDX,qword ptr [RAX]
	000241db:MOV RAX,qword ptr [RBP + -0x598]
	000241e2:MOV qword ptr [RAX + 0x8],RDX
	000241e6:MOV RAX,qword ptr [RBP + -0x548]
	000241ed:MOV RAX,qword ptr [RAX]
	000241f0:MOV EDX,EAX
	000241f2:MOV RAX,qword ptr [RBP + -0x598]
	000241f9:MOV dword ptr [RAX + 0x10],EDX
	000241fc:MOV RAX,qword ptr [RBP + -0x598]
	00024203:MOV byte ptr [RAX + 0xe0],0x1
	0002420a:JMP 0x00025465
	0002420f:MOV RAX,qword ptr [RBP + -0x548]
	00024216:SUB RAX,0x38
	0002421a:MOV RDX,qword ptr [RAX + 0x8]
	0002421e:MOV RAX,qword ptr [RBP + -0x598]
	00024225:MOV qword ptr [RAX + 0x8],RDX
	00024229:MOV RAX,qword ptr [RBP + -0x548]
	00024230:MOV RAX,qword ptr [RAX]
	00024233:MOV EDX,EAX
	00024235:MOV RAX,qword ptr [RBP + -0x598]
	0002423c:MOV dword ptr [RAX + 0x10],EDX
	0002423f:MOV RAX,qword ptr [RBP + -0x598]
	00024246:MOV byte ptr [RAX + 0xe0],0x1
	0002424d:JMP 0x00025465
	00024252:MOV RAX,qword ptr [RBP + -0x548]
	00024259:SUB RAX,0x70
	0002425d:MOV RDX,qword ptr [RAX + 0x8]
	00024261:MOV RAX,qword ptr [RBP + -0x598]
	00024268:MOV qword ptr [RAX + 0x38],RDX
	0002426c:MOV RAX,qword ptr [RBP + -0x548]
	00024273:MOV RDX,qword ptr [RAX + 0x8]
	00024277:MOV RAX,qword ptr [RBP + -0x598]
	0002427e:MOV qword ptr [RAX + 0x40],RDX
	00024282:JMP 0x00025465
	00024287:MOV RAX,qword ptr [RBP + -0x548]
	0002428e:SUB RAX,0xe0
	00024294:MOV RAX,qword ptr [RAX + 0x10]
	00024298:CMP RAX,0x3
	0002429c:JLE 0x0002435c
	000242a2:MOV RAX,qword ptr [RBP + -0x598]
	000242a9:MOVZX EAX,byte ptr [RAX + 0xd9]
	000242b0:TEST AL,AL
	000242b2:JZ 0x000242fb
	000242b4:MOV RAX,qword ptr [RBP + -0x548]
	000242bb:SUB RAX,0xe0
	000242c1:MOV RAX,qword ptr [RAX + 0x10]
	000242c5:MOV qword ptr [RBP + -0x518],RAX
	000242cc:MOV RAX,qword ptr [RBP + -0x548]
	000242d3:SUB RAX,0xe0
	000242d9:MOV RAX,qword ptr [RAX + 0x8]
	000242dd:MOV RDX,qword ptr [RBP + -0x518]
	000242e4:MOV RSI,RAX
	000242e7:LEA RAX,[0x34c78]
	000242ee:MOV RDI,RAX
	000242f1:MOV EAX,0x0
	000242f6:CALL 0x000222e9
	000242fb:MOV RAX,qword ptr [RBP + -0x548]
	00024302:LEA RSI,[RAX + -0xe0]
	00024309:MOV RCX,qword ptr [RBP + -0x598]
	00024310:MOV RAX,qword ptr [RSI]
	00024313:MOV RDX,qword ptr [RSI + 0x8]
	00024317:MOV qword ptr [RCX + 0x20],RAX
	0002431b:MOV qword ptr [RCX + 0x28],RDX
	0002431f:MOV RAX,qword ptr [RSI + 0x10]
	00024323:MOV qword ptr [RCX + 0x30],RAX
	00024327:MOV RAX,qword ptr [RBP + -0x548]
	0002432e:SUB RAX,0x70
	00024332:MOV RDX,qword ptr [RAX + 0x8]
	00024336:MOV RAX,qword ptr [RBP + -0x598]
	0002433d:MOV qword ptr [RAX + 0x38],RDX
	00024341:MOV RAX,qword ptr [RBP + -0x548]
	00024348:MOV RDX,qword ptr [RAX + 0x8]
	0002434c:MOV RAX,qword ptr [RBP + -0x598]
	00024353:MOV qword ptr [RAX + 0x40],RDX
	00024357:JMP 0x00025465
	0002435c:MOV RAX,qword ptr [RBP + -0x598]
	00024363:MOVZX EAX,byte ptr [RAX + 0xd9]
	0002436a:TEST AL,AL
	0002436c:JZ 0x00024396
	0002436e:MOV RAX,qword ptr [RBP + -0x548]
	00024375:SUB RAX,0xe0
	0002437b:MOV RAX,qword ptr [RAX + 0x8]
	0002437f:MOV RSI,RAX
	00024382:LEA RAX,[0x34cb0]
	00024389:MOV RDI,RAX
	0002438c:MOV EAX,0x0
	00024391:CALL 0x000222e9
	00024396:MOV RAX,qword ptr [RBP + -0x548]
	0002439d:SUB RAX,0xe0
	000243a3:MOV RDX,qword ptr [RAX + 0x8]
	000243a7:MOV RAX,qword ptr [RBP + -0x598]
	000243ae:MOV qword ptr [RAX + 0x38],RDX
	000243b2:MOV RAX,qword ptr [RBP + -0x548]
	000243b9:SUB RAX,0x70
	000243bd:MOV RDX,qword ptr [RAX + 0x8]
	000243c1:MOV RAX,qword ptr [RBP + -0x598]
	000243c8:MOV qword ptr [RAX + 0x40],RDX
	000243cc:MOV RCX,qword ptr [RBP + -0x598]
	000243d3:MOV RSI,qword ptr [RBP + -0x548]
	000243da:MOV RAX,qword ptr [RSI]
	000243dd:MOV RDX,qword ptr [RSI + 0x8]
	000243e1:MOV qword ptr [RCX + 0x20],RAX
	000243e5:MOV qword ptr [RCX + 0x28],RDX
	000243e9:MOV RAX,qword ptr [RSI + 0x10]
	000243ed:MOV qword ptr [RCX + 0x30],RAX
	000243f1:JMP 0x00025465
	000243f6:MOV RAX,qword ptr [RBP + -0x548]
	000243fd:SUB RAX,0x70
	00024401:MOV RDX,qword ptr [RAX + 0x8]
	00024405:MOV RAX,qword ptr [RBP + -0x598]
	0002440c:MOV qword ptr [RAX + 0x40],RDX
	00024410:MOV RAX,qword ptr [RBP + -0x548]
	00024417:SUB RAX,0x38
	0002441b:MOV RDX,qword ptr [RAX]
	0002441e:MOV RAX,qword ptr [RBP + -0x598]
	00024425:MOV qword ptr [RAX + 0x38],RDX
	00024429:MOV RAX,qword ptr [RBP + -0x548]
	00024430:MOV RAX,qword ptr [RAX + 0x8]
	00024434:MOV EDX,0x0
	00024439:NEG RAX
	0002443c:JNO 0x00024443
	0002443e:MOV EDX,0x1
	00024443:MOV RCX,RAX
	00024446:MOV RAX,qword ptr [RBP + -0x598]
	0002444d:MOV qword ptr [RAX + 0x28],RCX
	00024451:MOV RAX,RDX
	00024454:AND EAX,0x1
	00024457:TEST AL,AL
	00024459:JNZ 0x000257f0
	0002445f:MOV RAX,qword ptr [RBP + -0x548]
	00024466:MOV RDX,qword ptr [RAX + 0x10]
	0002446a:MOV RAX,qword ptr [RBP + -0x598]
	00024471:MOV qword ptr [RAX + 0x30],RDX
	00024475:JMP 0x00025465
	0002447a:MOV RAX,qword ptr [RBP + -0x548]
	00024481:SUB RAX,0x70
	00024485:MOV RDX,qword ptr [RAX]
	00024488:MOV RAX,qword ptr [RBP + -0x598]
	0002448f:MOV qword ptr [RAX + 0x38],RDX
	00024493:MOV RAX,qword ptr [RBP + -0x548]
	0002449a:SUB RAX,0x38
	0002449e:MOV RAX,qword ptr [RAX + 0x8]
	000244a2:MOV EDX,0x0
	000244a7:NEG RAX
	000244aa:JNO 0x000244b1
	000244ac:MOV EDX,0x1
	000244b1:MOV RCX,RAX
	000244b4:MOV RAX,qword ptr [RBP + -0x598]
	000244bb:MOV qword ptr [RAX + 0x40],RCX
	000244bf:MOV RAX,RDX
	000244c2:AND EAX,0x1
	000244c5:TEST AL,AL
	000244c7:JNZ 0x000257f3
	000244cd:MOV RAX,qword ptr [RBP + -0x548]
	000244d4:MOV RAX,qword ptr [RAX + 0x8]
	000244d8:MOV EDX,0x0
	000244dd:NEG RAX
	000244e0:JNO 0x000244e7
	000244e2:MOV EDX,0x1
	000244e7:MOV RCX,RAX
	000244ea:MOV RAX,qword ptr [RBP + -0x598]
	000244f1:MOV qword ptr [RAX + 0x28],RCX
	000244f5:MOV RAX,RDX
	000244f8:AND EAX,0x1
	000244fb:TEST AL,AL
	000244fd:JNZ 0x000257f6
	00024503:MOV RAX,qword ptr [RBP + -0x548]
	0002450a:MOV RDX,qword ptr [RAX + 0x10]
	0002450e:MOV RAX,qword ptr [RBP + -0x598]
	00024515:MOV qword ptr [RAX + 0x30],RDX
	00024519:JMP 0x00025465
	0002451e:MOV RAX,qword ptr [RBP + -0x548]
	00024525:SUB RAX,0x38
	00024529:MOV RDX,qword ptr [RAX]
	0002452c:MOV RAX,qword ptr [RBP + -0x598]
	00024533:MOV qword ptr [RAX + 0x38],RDX
	00024537:MOV RAX,qword ptr [RBP + -0x548]
	0002453e:MOV RDX,qword ptr [RAX + 0x8]
	00024542:MOV RAX,qword ptr [RBP + -0x598]
	00024549:MOV qword ptr [RAX + 0x40],RDX
	0002454d:JMP 0x00025465
	00024552:MOV RAX,qword ptr [RBP + -0x548]
	00024559:SUB RAX,0xa8
	0002455f:MOV RDX,qword ptr [RAX]
	00024562:MOV RAX,qword ptr [RBP + -0x598]
	00024569:MOV qword ptr [RAX + 0x38],RDX
	0002456d:MOV RAX,qword ptr [RBP + -0x548]
	00024574:SUB RAX,0x70
	00024578:MOV RDX,qword ptr [RAX + 0x8]
	0002457c:MOV RAX,qword ptr [RBP + -0x598]
	00024583:MOV qword ptr [RAX + 0x40],RDX
	00024587:MOV RCX,qword ptr [RBP + -0x598]
	0002458e:MOV RSI,qword ptr [RBP + -0x548]
	00024595:MOV RAX,qword ptr [RSI]
	00024598:MOV RDX,qword ptr [RSI + 0x8]
	0002459c:MOV qword ptr [RCX + 0x20],RAX
	000245a0:MOV qword ptr [RCX + 0x28],RDX
	000245a4:MOV RAX,qword ptr [RSI + 0x10]
	000245a8:MOV qword ptr [RCX + 0x30],RAX
	000245ac:JMP 0x00025465
	000245b1:MOV RAX,qword ptr [RBP + -0x548]
	000245b8:SUB RAX,0x38
	000245bc:MOV RDX,qword ptr [RAX + 0x8]
	000245c0:MOV RAX,qword ptr [RBP + -0x598]
	000245c7:MOV qword ptr [RAX + 0x40],RDX
	000245cb:MOV RAX,qword ptr [RBP + -0x548]
	000245d2:MOV RDX,qword ptr [RAX]
	000245d5:MOV RAX,qword ptr [RBP + -0x598]
	000245dc:MOV qword ptr [RAX + 0x38],RDX
	000245e0:JMP 0x00025465
	000245e5:MOV RAX,qword ptr [RBP + -0x548]
	000245ec:SUB RAX,0x70
	000245f0:MOV RDX,qword ptr [RAX + 0x8]
	000245f4:MOV RAX,qword ptr [RBP + -0x598]
	000245fb:MOV qword ptr [RAX + 0x40],RDX
	000245ff:MOV RAX,qword ptr [RBP + -0x548]
	00024606:SUB RAX,0x38
	0002460a:MOV RDX,qword ptr [RAX]
	0002460d:MOV RAX,qword ptr [RBP + -0x598]
	00024614:MOV qword ptr [RAX + 0x38],RDX
	00024618:MOV RCX,qword ptr [RBP + -0x598]
	0002461f:MOV RSI,qword ptr [RBP + -0x548]
	00024626:MOV RAX,qword ptr [RSI]
	00024629:MOV RDX,qword ptr [RSI + 0x8]
	0002462d:MOV qword ptr [RCX + 0x20],RAX
	00024631:MOV qword ptr [RCX + 0x28],RDX
	00024635:MOV RAX,qword ptr [RSI + 0x10]
	00024639:MOV qword ptr [RCX + 0x30],RAX
	0002463d:JMP 0x00025465
	00024642:MOV RAX,qword ptr [RBP + -0x548]
	00024649:LEA RSI,[RAX + -0x70]
	0002464d:MOV RCX,qword ptr [RBP + -0x598]
	00024654:MOV RAX,qword ptr [RSI]
	00024657:MOV RDX,qword ptr [RSI + 0x8]
	0002465b:MOV qword ptr [RCX + 0x20],RAX
	0002465f:MOV qword ptr [RCX + 0x28],RDX
	00024663:MOV RAX,qword ptr [RSI + 0x10]
	00024667:MOV qword ptr [RCX + 0x30],RAX
	0002466b:MOV RAX,qword ptr [RBP + -0x548]
	00024672:SUB RAX,0x38
	00024676:MOV RAX,qword ptr [RAX + 0x8]
	0002467a:MOV EDX,0x0
	0002467f:NEG RAX
	00024682:JNO 0x00024689
	00024684:MOV EDX,0x1
	00024689:MOV RCX,RAX
	0002468c:MOV RAX,qword ptr [RBP + -0x598]
	00024693:MOV qword ptr [RAX + 0x38],RCX
	00024697:MOV RAX,RDX
	0002469a:AND EAX,0x1
	0002469d:TEST AL,AL
	0002469f:JNZ 0x000257f9
	000246a5:MOV RAX,qword ptr [RBP + -0x548]
	000246ac:MOV RAX,qword ptr [RAX + 0x8]
	000246b0:MOV EDX,0x0
	000246b5:NEG RAX
	000246b8:JNO 0x000246bf
	000246ba:MOV EDX,0x1
	000246bf:MOV RCX,RAX
	000246c2:MOV RAX,qword ptr [RBP + -0x598]
	000246c9:MOV qword ptr [RAX + 0x40],RCX
	000246cd:MOV RAX,RDX
	000246d0:AND EAX,0x1
	000246d3:TEST AL,AL
	000246d5:JZ 0x0002544f
	000246db:JMP 0x00025803
	000246e0:MOV RAX,qword ptr [RBP + -0x548]
	000246e7:MOV RAX,qword ptr [RAX]
	000246ea:MOV ECX,EAX
	000246ec:MOV RAX,qword ptr [RBP + -0x548]
	000246f3:SUB RAX,0x38
	000246f7:MOV RDX,qword ptr [RBP + -0x598]
	000246fe:SUB RSP,0x8
	00024702:PUSH qword ptr [RAX + 0x30]
	00024705:PUSH qword ptr [RAX + 0x28]
	00024708:PUSH qword ptr [RAX + 0x20]
	0002470b:PUSH qword ptr [RAX + 0x18]
	0002470e:PUSH qword ptr [RAX + 0x10]
	00024711:PUSH qword ptr [RAX + 0x8]
	00024714:PUSH qword ptr [RAX]
	00024716:MOV ESI,ECX
	00024718:MOV RDI,RDX
	0002471b:CALL 0x0002267a
	00024720:ADD RSP,0x40
	00024724:XOR EAX,0x1
	00024727:TEST AL,AL
	00024729:JZ 0x00025452
	0002472f:JMP 0x00025803
	00024734:MOV RDX,qword ptr [RBP + -0x598]
	0002473b:SUB RSP,0x8
	0002473f:MOV RAX,qword ptr [RBP + -0x548]
	00024746:PUSH qword ptr [RAX + 0x30]
	00024749:PUSH qword ptr [RAX + 0x28]
	0002474c:PUSH qword ptr [RAX + 0x20]
	0002474f:PUSH qword ptr [RAX + 0x18]
	00024752:PUSH qword ptr [RAX + 0x10]
	00024755:PUSH qword ptr [RAX + 0x8]
	00024758:PUSH qword ptr [RAX]
	0002475a:MOV ESI,0x1
	0002475f:MOV RDI,RDX
	00024762:CALL 0x0002267a
	00024767:ADD RSP,0x40
	0002476b:XOR EAX,0x1
	0002476e:TEST AL,AL
	00024770:JZ 0x00025455
	00024776:JMP 0x00025803
	0002477b:MOV RDX,qword ptr [RBP + -0x598]
	00024782:SUB RSP,0x8
	00024786:MOV RAX,qword ptr [RBP + -0x548]
	0002478d:PUSH qword ptr [RAX + 0x30]
	00024790:PUSH qword ptr [RAX + 0x28]
	00024793:PUSH qword ptr [RAX + 0x20]
	00024796:PUSH qword ptr [RAX + 0x18]
	00024799:PUSH qword ptr [RAX + 0x10]
	0002479c:PUSH qword ptr [RAX + 0x8]
	0002479f:PUSH qword ptr [RAX]
	000247a1:MOV ESI,0x1
	000247a6:MOV RDI,RDX
	000247a9:CALL 0x0002267a
	000247ae:ADD RSP,0x40
	000247b2:XOR EAX,0x1
	000247b5:TEST AL,AL
	000247b7:JZ 0x00025458
	000247bd:JMP 0x00025803
	000247c2:MOV qword ptr [RBP + -0x4d0],0x0
	000247cd:MOV qword ptr [RBP + -0x4c8],0x0
	000247d8:MOV qword ptr [RBP + -0x4c0],0x0
	000247e3:MOV qword ptr [RBP + -0x4b8],0x0
	000247ee:MOV qword ptr [RBP + -0x4b0],0x0
	000247f9:MOV qword ptr [RBP + -0x4a8],0x0
	00024804:MOV qword ptr [RBP + -0x4a0],0x0
	0002480f:MOV RAX,qword ptr [RBP + -0x548]
	00024816:SUB RAX,0x38
	0002481a:MOV RAX,qword ptr [RAX]
	0002481d:MOV qword ptr [RBP + -0x4d0],RAX
	00024824:JMP 0x00025465
	00024829:MOV qword ptr [RBP + -0x4d0],0x0
	00024834:MOV qword ptr [RBP + -0x4c8],0x0
	0002483f:MOV qword ptr [RBP + -0x4c0],0x0
	0002484a:MOV qword ptr [RBP + -0x4b8],0x0
	00024855:MOV qword ptr [RBP + -0x4b0],0x0
	00024860:MOV qword ptr [RBP + -0x4a8],0x0
	0002486b:MOV qword ptr [RBP + -0x4a0],0x0
	00024876:MOV RAX,qword ptr [RBP + -0x548]
	0002487d:SUB RAX,0x38
	00024881:MOV RAX,qword ptr [RAX + 0x8]
	00024885:MOV qword ptr [RBP + -0x4d0],RAX
	0002488c:JMP 0x00025465
	00024891:MOV qword ptr [RBP + -0x4d0],0x0
	0002489c:MOV qword ptr [RBP + -0x4c8],0x0
	000248a7:MOV qword ptr [RBP + -0x4c0],0x0
	000248b2:MOV qword ptr [RBP + -0x4b8],0x0
	000248bd:MOV qword ptr [RBP + -0x4b0],0x0
	000248c8:MOV qword ptr [RBP + -0x4a8],0x0
	000248d3:MOV qword ptr [RBP + -0x4a0],0x0
	000248de:MOV qword ptr [RBP + -0x4d0],0x1
	000248e9:JMP 0x00025465
	000248ee:MOV qword ptr [RBP + -0x4d0],0x0
	000248f9:MOV qword ptr [RBP + -0x4c8],0x0
	00024904:MOV qword ptr [RBP + -0x4c0],0x0
	0002490f:MOV qword ptr [RBP + -0x4b8],0x0
	0002491a:MOV qword ptr [RBP + -0x4b0],0x0
	00024925:MOV qword ptr [RBP + -0x4a8],0x0
	00024930:MOV qword ptr [RBP + -0x4a0],0x0
	0002493b:MOV RAX,qword ptr [RBP + -0x548]
	00024942:SUB RAX,0x38
	00024946:MOV RAX,qword ptr [RAX]
	00024949:MOV qword ptr [RBP + -0x4c8],RAX
	00024950:JMP 0x00025465
	00024955:MOV qword ptr [RBP + -0x4d0],0x0
	00024960:MOV qword ptr [RBP + -0x4c8],0x0
	0002496b:MOV qword ptr [RBP + -0x4c0],0x0
	00024976:MOV qword ptr [RBP + -0x4b8],0x0
	00024981:MOV qword ptr [RBP + -0x4b0],0x0
	0002498c:MOV qword ptr [RBP + -0x4a8],0x0
	00024997:MOV qword ptr [RBP + -0x4a0],0x0
	000249a2:MOV RAX,qword ptr [RBP + -0x548]
	000249a9:SUB RAX,0x38
	000249ad:MOV RAX,qword ptr [RAX + 0x8]
	000249b1:MOV qword ptr [RBP + -0x4c8],RAX
	000249b8:JMP 0x00025465
	000249bd:MOV qword ptr [RBP + -0x4d0],0x0
	000249c8:MOV qword ptr [RBP + -0x4c8],0x0
	000249d3:MOV qword ptr [RBP + -0x4c0],0x0
	000249de:MOV qword ptr [RBP + -0x4b8],0x0
	000249e9:MOV qword ptr [RBP + -0x4b0],0x0
	000249f4:MOV qword ptr [RBP + -0x4a8],0x0
	000249ff:MOV qword ptr [RBP + -0x4a0],0x0
	00024a0a:MOV qword ptr [RBP + -0x4c8],0x1
	00024a15:JMP 0x00025465
	00024a1a:MOV qword ptr [RBP + -0x4d0],0x0
	00024a25:MOV qword ptr [RBP + -0x4c8],0x0
	00024a30:MOV qword ptr [RBP + -0x4c0],0x0
	00024a3b:MOV qword ptr [RBP + -0x4b8],0x0
	00024a46:MOV qword ptr [RBP + -0x4b0],0x0
	00024a51:MOV qword ptr [RBP + -0x4a8],0x0
	00024a5c:MOV qword ptr [RBP + -0x4a0],0x0
	00024a67:MOV RAX,qword ptr [RBP + -0x548]
	00024a6e:SUB RAX,0x38
	00024a72:MOV RDX,qword ptr [RAX]
	00024a75:MOV RAX,qword ptr [RBP + -0x548]
	00024a7c:MOV RAX,qword ptr [RAX]
	00024a7f:MOV ECX,0x0
	00024a84:IMUL RAX,RDX
	00024a88:JNO 0x00024a8f
	00024a8a:MOV ECX,0x1
	00024a8f:MOV qword ptr [RBP + -0x4c0],RAX
	00024a96:MOV RAX,RCX
	00024a99:AND EAX,0x1
	00024a9c:TEST AL,AL
	00024a9e:JZ 0x0002545b
	00024aa4:JMP 0x00025803
	00024aa9:MOV qword ptr [RBP + -0x4d0],0x0
	00024ab4:MOV qword ptr [RBP + -0x4c8],0x0
	00024abf:MOV qword ptr [RBP + -0x4c0],0x0
	00024aca:MOV qword ptr [RBP + -0x4b8],0x0
	00024ad5:MOV qword ptr [RBP + -0x4b0],0x0
	00024ae0:MOV qword ptr [RBP + -0x4a8],0x0
	00024aeb:MOV qword ptr [RBP + -0x4a0],0x0
	00024af6:MOV RAX,qword ptr [RBP + -0x548]
	00024afd:SUB RAX,0x38
	00024b01:MOV RDX,qword ptr [RAX + 0x8]
	00024b05:MOV RAX,qword ptr [RBP + -0x548]
	00024b0c:MOV RAX,qword ptr [RAX]
	00024b0f:MOV ECX,0x0
	00024b14:IMUL RAX,RDX
	00024b18:JNO 0x00024b1f
	00024b1a:MOV ECX,0x1
	00024b1f:MOV qword ptr [RBP + -0x4c0],RAX
	00024b26:MOV RAX,RCX
	00024b29:AND EAX,0x1
	00024b2c:TEST AL,AL
	00024b2e:JZ 0x0002545e
	00024b34:JMP 0x00025803
	00024b39:MOV qword ptr [RBP + -0x4d0],0x0
	00024b44:MOV qword ptr [RBP + -0x4c8],0x0
	00024b4f:MOV qword ptr [RBP + -0x4c0],0x0
	00024b5a:MOV qword ptr [RBP + -0x4b8],0x0
	00024b65:MOV qword ptr [RBP + -0x4b0],0x0
	00024b70:MOV qword ptr [RBP + -0x4a8],0x0
	00024b7b:MOV qword ptr [RBP + -0x4a0],0x0
	00024b86:MOV RAX,qword ptr [RBP + -0x548]
	00024b8d:MOV RAX,qword ptr [RAX]
	00024b90:MOV qword ptr [RBP + -0x4c0],RAX
	00024b97:JMP 0x00025465
	00024b9c:MOV qword ptr [RBP + -0x4d0],0x0
	00024ba7:MOV qword ptr [RBP + -0x4c8],0x0
	00024bb2:MOV qword ptr [RBP + -0x4c0],0x0
	00024bbd:MOV qword ptr [RBP + -0x4b8],0x0
	00024bc8:MOV qword ptr [RBP + -0x4b0],0x0
	00024bd3:MOV qword ptr [RBP + -0x4a8],0x0
	00024bde:MOV qword ptr [RBP + -0x4a0],0x0
	00024be9:MOV RAX,qword ptr [RBP + -0x548]
	00024bf0:SUB RAX,0x38
	00024bf4:MOV RAX,qword ptr [RAX]
	00024bf7:MOV qword ptr [RBP + -0x4b8],RAX
	00024bfe:JMP 0x00025465
	00024c03:MOV qword ptr [RBP + -0x4d0],0x0
	00024c0e:MOV qword ptr [RBP + -0x4c8],0x0
	00024c19:MOV qword ptr [RBP + -0x4c0],0x0
	00024c24:MOV qword ptr [RBP + -0x4b8],0x0
	00024c2f:MOV qword ptr [RBP + -0x4b0],0x0
	00024c3a:MOV qword ptr [RBP + -0x4a8],0x0
	00024c45:MOV qword ptr [RBP + -0x4a0],0x0
	00024c50:MOV RAX,qword ptr [RBP + -0x548]
	00024c57:SUB RAX,0x38
	00024c5b:MOV RAX,qword ptr [RAX + 0x8]
	00024c5f:MOV qword ptr [RBP + -0x4b8],RAX
	00024c66:JMP 0x00025465
	00024c6b:MOV qword ptr [RBP + -0x4d0],0x0
	00024c76:MOV qword ptr [RBP + -0x4c8],0x0
	00024c81:MOV qword ptr [RBP + -0x4c0],0x0
	00024c8c:MOV qword ptr [RBP + -0x4b8],0x0
	00024c97:MOV qword ptr [RBP + -0x4b0],0x0
	00024ca2:MOV qword ptr [RBP + -0x4a8],0x0
	00024cad:MOV qword ptr [RBP + -0x4a0],0x0
	00024cb8:MOV qword ptr [RBP + -0x4b8],0x1
	00024cc3:JMP 0x00025465
	00024cc8:MOV qword ptr [RBP + -0x4d0],0x0
	00024cd3:MOV qword ptr [RBP + -0x4c8],0x0
	00024cde:MOV qword ptr [RBP + -0x4c0],0x0
	00024ce9:MOV qword ptr [RBP + -0x4b8],0x0
	00024cf4:MOV qword ptr [RBP + -0x4b0],0x0
	00024cff:MOV qword ptr [RBP + -0x4a8],0x0
	00024d0a:MOV qword ptr [RBP + -0x4a0],0x0
	00024d15:MOV RAX,qword ptr [RBP + -0x548]
	00024d1c:SUB RAX,0x38
	00024d20:MOV RAX,qword ptr [RAX]
	00024d23:MOV qword ptr [RBP + -0x4b0],RAX
	00024d2a:JMP 0x00025465
	00024d2f:MOV qword ptr [RBP + -0x4d0],0x0
	00024d3a:MOV qword ptr [RBP + -0x4c8],0x0
	00024d45:MOV qword ptr [RBP + -0x4c0],0x0
	00024d50:MOV qword ptr [RBP + -0x4b8],0x0
	00024d5b:MOV qword ptr [RBP + -0x4b0],0x0
	00024d66:MOV qword ptr [RBP + -0x4a8],0x0
	00024d71:MOV qword ptr [RBP + -0x4a0],0x0
	00024d7c:MOV RAX,qword ptr [RBP + -0x548]
	00024d83:SUB RAX,0x38
	00024d87:MOV RAX,qword ptr [RAX + 0x8]
	00024d8b:MOV qword ptr [RBP + -0x4b0],RAX
	00024d92:JMP 0x00025465
	00024d97:MOV qword ptr [RBP + -0x4d0],0x0
	00024da2:MOV qword ptr [RBP + -0x4c8],0x0
	00024dad:MOV qword ptr [RBP + -0x4c0],0x0
	00024db8:MOV qword ptr [RBP + -0x4b8],0x0
	00024dc3:MOV qword ptr [RBP + -0x4b0],0x0
	00024dce:MOV qword ptr [RBP + -0x4a8],0x0
	00024dd9:MOV qword ptr [RBP + -0x4a0],0x0
	00024de4:MOV qword ptr [RBP + -0x4b0],0x1
	00024def:JMP 0x00025465
	00024df4:MOV qword ptr [RBP + -0x4d0],0x0
	00024dff:MOV qword ptr [RBP + -0x4c8],0x0
	00024e0a:MOV qword ptr [RBP + -0x4c0],0x0
	00024e15:MOV qword ptr [RBP + -0x4b8],0x0
	00024e20:MOV qword ptr [RBP + -0x4b0],0x0
	00024e2b:MOV qword ptr [RBP + -0x4a8],0x0
	00024e36:MOV qword ptr [RBP + -0x4a0],0x0
	00024e41:MOV RAX,qword ptr [RBP + -0x548]
	00024e48:SUB RAX,0x38
	00024e4c:MOV RAX,qword ptr [RAX]
	00024e4f:MOV qword ptr [RBP + -0x4a8],RAX
	00024e56:JMP 0x00025465
	00024e5b:MOV qword ptr [RBP + -0x4d0],0x0
	00024e66:MOV qword ptr [RBP + -0x4c8],0x0
	00024e71:MOV qword ptr [RBP + -0x4c0],0x0
	00024e7c:MOV qword ptr [RBP + -0x4b8],0x0
	00024e87:MOV qword ptr [RBP + -0x4b0],0x0
	00024e92:MOV qword ptr [RBP + -0x4a8],0x0
	00024e9d:MOV qword ptr [RBP + -0x4a0],0x0
	00024ea8:MOV RAX,qword ptr [RBP + -0x548]
	00024eaf:SUB RAX,0x38
	00024eb3:MOV RAX,qword ptr [RAX + 0x8]
	00024eb7:MOV qword ptr [RBP + -0x4a8],RAX
	00024ebe:JMP 0x00025465
	00024ec3:MOV qword ptr [RBP + -0x4d0],0x0
	00024ece:MOV qword ptr [RBP + -0x4c8],0x0
	00024ed9:MOV qword ptr [RBP + -0x4c0],0x0
	00024ee4:MOV qword ptr [RBP + -0x4b8],0x0
	00024eef:MOV qword ptr [RBP + -0x4b0],0x0
	00024efa:MOV qword ptr [RBP + -0x4a8],0x0
	00024f05:MOV qword ptr [RBP + -0x4a0],0x0
	00024f10:MOV RAX,qword ptr [RBP + -0x548]
	00024f17:SUB RAX,0x38
	00024f1b:MOV RAX,qword ptr [RAX]
	00024f1e:MOV qword ptr [RBP + -0x4a8],RAX
	00024f25:MOV RAX,qword ptr [RBP + -0x548]
	00024f2c:SUB RAX,0x38
	00024f30:MOV RAX,qword ptr [RAX + 0x8]
	00024f34:MOV dword ptr [RBP + -0x4a0],EAX
	00024f3a:JMP 0x00025465
	00024f3f:MOV qword ptr [RBP + -0x4d0],0x0
	00024f4a:MOV qword ptr [RBP + -0x4c8],0x0
	00024f55:MOV qword ptr [RBP + -0x4c0],0x0
	00024f60:MOV qword ptr [RBP + -0x4b8],0x0
	00024f6b:MOV qword ptr [RBP + -0x4b0],0x0
	00024f76:MOV qword ptr [RBP + -0x4a8],0x0
	00024f81:MOV qword ptr [RBP + -0x4a0],0x0
	00024f8c:MOV RAX,qword ptr [RBP + -0x548]
	00024f93:SUB RAX,0x38
	00024f97:MOV RAX,qword ptr [RAX]
	00024f9a:MOV qword ptr [RBP + -0x4a8],RAX
	00024fa1:MOV RAX,qword ptr [RBP + -0x548]
	00024fa8:SUB RAX,0x38
	00024fac:MOV RAX,qword ptr [RAX + 0x8]
	00024fb0:MOV dword ptr [RBP + -0x4a0],EAX
	00024fb6:JMP 0x00025465
	00024fbb:MOV qword ptr [RBP + -0x4d0],0x0
	00024fc6:MOV qword ptr [RBP + -0x4c8],0x0
	00024fd1:MOV qword ptr [RBP + -0x4c0],0x0
	00024fdc:MOV qword ptr [RBP + -0x4b8],0x0
	00024fe7:MOV qword ptr [RBP + -0x4b0],0x0
	00024ff2:MOV qword ptr [RBP + -0x4a8],0x0
	00024ffd:MOV qword ptr [RBP + -0x4a0],0x0
	00025008:MOV qword ptr [RBP + -0x4a8],0x1
	00025013:JMP 0x00025465
	00025018:MOV qword ptr [RBP + -0x4d0],0x0
	00025023:MOV qword ptr [RBP + -0x4c8],0x0
	0002502e:MOV qword ptr [RBP + -0x4c0],0x0
	00025039:MOV qword ptr [RBP + -0x4b8],0x0
	00025044:MOV qword ptr [RBP + -0x4b0],0x0
	0002504f:MOV qword ptr [RBP + -0x4a8],0x0
	0002505a:MOV qword ptr [RBP + -0x4a0],0x0
	00025065:MOV RAX,qword ptr [RBP + -0x548]
	0002506c:SUB RAX,0x38
	00025070:MOV RAX,qword ptr [RAX + 0x8]
	00025074:MOV qword ptr [RBP + -0x4d0],RAX
	0002507b:JMP 0x00025465
	00025080:MOV qword ptr [RBP + -0x4d0],0x0
	0002508b:MOV qword ptr [RBP + -0x4c8],0x0
	00025096:MOV qword ptr [RBP + -0x4c0],0x0
	000250a1:MOV qword ptr [RBP + -0x4b8],0x0
	000250ac:MOV qword ptr [RBP + -0x4b0],0x0
	000250b7:MOV qword ptr [RBP + -0x4a8],0x0
	000250c2:MOV qword ptr [RBP + -0x4a0],0x0
	000250cd:MOV RAX,qword ptr [RBP + -0x548]
	000250d4:SUB RAX,0x38
	000250d8:MOV RAX,qword ptr [RAX + 0x8]
	000250dc:MOV qword ptr [RBP + -0x4c8],RAX
	000250e3:JMP 0x00025465
	000250e8:MOV qword ptr [RBP + -0x4d0],0x0
	000250f3:MOV qword ptr [RBP + -0x4c8],0x0
	000250fe:MOV qword ptr [RBP + -0x4c0],0x0
	00025109:MOV qword ptr [RBP + -0x4b8],0x0
	00025114:MOV qword ptr [RBP + -0x4b0],0x0
	0002511f:MOV qword ptr [RBP + -0x4a8],0x0
	0002512a:MOV qword ptr [RBP + -0x4a0],0x0
	00025135:MOV RAX,qword ptr [RBP + -0x548]
	0002513c:SUB RAX,0x38
	00025140:MOV RDX,qword ptr [RAX + 0x8]
	00025144:MOV RAX,qword ptr [RBP + -0x548]
	0002514b:MOV RAX,qword ptr [RAX]
	0002514e:MOV ECX,0x0
	00025153:IMUL RAX,RDX
	00025157:JNO 0x0002515e
	00025159:MOV ECX,0x1
	0002515e:MOV qword ptr [RBP + -0x4c0],RAX
	00025165:MOV RAX,RCX
	00025168:AND EAX,0x1
	0002516b:TEST AL,AL
	0002516d:JZ 0x00025461
	00025173:JMP 0x00025803
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
	00025183:MOV qword ptr [RBP + -0x4c8],0x0
	0002518e:MOV qword ptr [RBP + -0x4c0],0x0
	00025199:MOV qword ptr [RBP + -0x4b8],0x0
	000251a4:MOV qword ptr [RBP + -0x4b0],0x0
	000251af:MOV qword ptr [RBP + -0x4a8],0x0
	000251ba:MOV qword ptr [RBP + -0x4a0],0x0
	000251c5:MOV RAX,qword ptr [RBP + -0x548]
	000251cc:SUB RAX,0x38
	000251d0:MOV RAX,qword ptr [RAX + 0x8]
	000251d4:MOV qword ptr [RBP + -0x4b8],RAX
	000251db:JMP 0x00025465
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
	000251eb:MOV qword ptr [RBP + -0x4c8],0x0
	000251f6:MOV qword ptr [RBP + -0x4c0],0x0
	00025201:MOV qword ptr [RBP + -0x4b8],0x0
	0002520c:MOV qword ptr [RBP + -0x4b0],0x0
	00025217:MOV qword ptr [RBP + -0x4a8],0x0
	00025222:MOV qword ptr [RBP + -0x4a0],0x0
	0002522d:MOV RAX,qword ptr [RBP + -0x548]
	00025234:SUB RAX,0x38
	00025238:MOV RAX,qword ptr [RAX + 0x8]
	0002523c:MOV qword ptr [RBP + -0x4b0],RAX
	00025243:JMP 0x00025465
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
	00025253:MOV qword ptr [RBP + -0x4c8],0x0
	0002525e:MOV qword ptr [RBP + -0x4c0],0x0
	00025269:MOV qword ptr [RBP + -0x4b8],0x0
	00025274:MOV qword ptr [RBP + -0x4b0],0x0
	0002527f:MOV qword ptr [RBP + -0x4a8],0x0
	0002528a:MOV qword ptr [RBP + -0x4a0],0x0
	00025295:MOV RAX,qword ptr [RBP + -0x548]
	0002529c:SUB RAX,0x38
	000252a0:MOV RAX,qword ptr [RAX + 0x8]
	000252a4:MOV qword ptr [RBP + -0x4a8],RAX
	000252ab:JMP 0x00025465
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
	000252bb:MOV qword ptr [RBP + -0x4c8],0x0
	000252c6:MOV qword ptr [RBP + -0x4c0],0x0
	000252d1:MOV qword ptr [RBP + -0x4b8],0x0
	000252dc:MOV qword ptr [RBP + -0x4b0],0x0
	000252e7:MOV qword ptr [RBP + -0x4a8],0x0
	000252f2:MOV qword ptr [RBP + -0x4a0],0x0
	000252fd:MOV RAX,qword ptr [RBP + -0x548]
	00025304:MOV RAX,qword ptr [RAX]
	00025307:MOV qword ptr [RBP + -0x4c0],RAX
	0002530e:JMP 0x00025465
	00025313:MOV RAX,qword ptr [RBP + -0x548]
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
	0002531e:MOV RDI,RAX
	00025321:CALL 0x000222c3
	00025326:TEST AL,AL
	00025328:JNZ 0x000257fc
	0002532e:MOV RAX,qword ptr [RBP + -0x548]
	00025335:MOV RAX,qword ptr [RAX + 0x8]
	00025339:MOV qword ptr [RBP + -0x4d0],RAX
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
	0002534b:JMP 0x00025465
	00025350:MOV RAX,qword ptr [RBP + -0x548]
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
	00025363:TEST AL,AL
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
324: debug_print_relative_time("relative",pc);
	00024023:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
326: case 0x21:
	00024034:MOV dword ptr [RAX + 0x18],0x6270
END_OF_LINE
----------------------------------------------
327: pc->time_zone = 0x6270;
	00024034:MOV dword ptr [RAX + 0x18],0x6270
END_OF_LINE
----------------------------------------------
328: _Var5 = apply_relative_time(pc,yyvsp->rel,1);
	0002405f:PUSH qword ptr [RAX]
	00024061:MOV ESI,0x1
	00024066:MOV RDI,RDX
	00024069:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
329: if (!_Var5) goto LAB_00025803;
	00024072:XOR EAX,0x1
	00024075:TEST AL,AL
	00024077:JNZ 0x000257ea
	0002407d:MOV RAX,qword ptr [RBP + -0x598]
	00024084:MOV RSI,RAX
	00024087:LEA RAX,[0x34c5e]
	0002408e:MOV RDI,RAX
	00024091:CALL 0x000232a7
	00024096:JMP 0x00025465
	0002409b:MOV RAX,qword ptr [RBP + -0x548]
	000240a2:MOV RCX,qword ptr [RAX]
	000240a5:MOV RAX,qword ptr [RBP + -0x548]
	000240ac:SUB RAX,0x38
	000240b0:MOV RDX,qword ptr [RBP + -0x598]
	000240b7:SUB RSP,0x8
	000240bb:PUSH qword ptr [RAX + 0x10]
	000240be:PUSH qword ptr [RAX + 0x8]
	000240c1:PUSH qword ptr [RAX]
	000240c3:MOV RSI,RCX
	000240c6:MOV RDI,RDX
	000240c9:CALL 0x0002596a
	000240ce:ADD RSP,0x20
	000240d2:XOR EAX,0x1
	000240d5:TEST AL,AL
	000240d7:JNZ 0x000257ed
	000240dd:MOV RAX,qword ptr [RBP + -0x598]
	000240e4:MOV EAX,dword ptr [RAX + 0x18]
	000240e7:MOV RDX,qword ptr [RBP + -0x548]
	000240ee:SUB RDX,0x70
	000240f2:MOV RCX,qword ptr [RDX]
	000240f5:CDQE
	000240f7:MOV EDX,0x0
	000240fc:ADD RAX,RCX
	000240ff:JNO 0x00024106
	00024101:MOV EDX,0x1
	00024106:MOVSXD RCX,EAX
	00024109:CMP RAX,RCX
	0002410c:JZ 0x00024113
	0002410e:MOV EDX,0x1
	00024113:MOV ECX,EAX
	00024115:MOV RAX,qword ptr [RBP + -0x598]
	0002411c:MOV dword ptr [RAX + 0x18],ECX
	0002411f:MOV EAX,EDX
	00024121:AND EAX,0x1
	00024124:TEST AL,AL
	00024126:JZ 0x0002544c
	0002412c:JMP 0x00025803
	00024131:MOV RAX,qword ptr [RBP + -0x548]
	00024138:MOV RAX,qword ptr [RAX]
	0002413b:ADD EAX,0xe10
	00024140:MOV EDX,EAX
	00024142:MOV RAX,qword ptr [RBP + -0x598]
	00024149:MOV dword ptr [RAX + 0x18],EDX
	0002414c:JMP 0x00025465
	00024151:MOV RAX,qword ptr [RBP + -0x548]
	00024158:SUB RAX,0x38
	0002415c:MOV RAX,qword ptr [RAX]
	0002415f:ADD EAX,0xe10
	00024164:MOV EDX,EAX
	00024166:MOV RAX,qword ptr [RBP + -0x598]
	0002416d:MOV dword ptr [RAX + 0x18],EDX
	00024170:JMP 0x00025465
	00024175:MOV RAX,qword ptr [RBP + -0x598]
	0002417c:MOV qword ptr [RAX + 0x8],0x0
	00024184:MOV RAX,qword ptr [RBP + -0x548]
	0002418b:MOV RAX,qword ptr [RAX]
	0002418e:MOV EDX,EAX
	00024190:MOV RAX,qword ptr [RBP + -0x598]
	00024197:MOV dword ptr [RAX + 0x10],EDX
	0002419a:JMP 0x00025465
	0002419f:MOV RAX,qword ptr [RBP + -0x598]
	000241a6:MOV qword ptr [RAX + 0x8],0x0
	000241ae:MOV RAX,qword ptr [RBP + -0x548]
	000241b5:SUB RAX,0x38
	000241b9:MOV RAX,qword ptr [RAX]
	000241bc:MOV EDX,EAX
	000241be:MOV RAX,qword ptr [RBP + -0x598]
	000241c5:MOV dword ptr [RAX + 0x10],EDX
	000241c8:JMP 0x00025465
	000241cd:MOV RAX,qword ptr [RBP + -0x548]
	000241d4:SUB RAX,0x38
	000241d8:MOV RDX,qword ptr [RAX]
	000241db:MOV RAX,qword ptr [RBP + -0x598]
	000241e2:MOV qword ptr [RAX + 0x8],RDX
	000241e6:MOV RAX,qword ptr [RBP + -0x548]
	000241ed:MOV RAX,qword ptr [RAX]
	000241f0:MOV EDX,EAX
	000241f2:MOV RAX,qword ptr [RBP + -0x598]
	000241f9:MOV dword ptr [RAX + 0x10],EDX
	000241fc:MOV RAX,qword ptr [RBP + -0x598]
	00024203:MOV byte ptr [RAX + 0xe0],0x1
	0002420a:JMP 0x00025465
	0002420f:MOV RAX,qword ptr [RBP + -0x548]
	00024216:SUB RAX,0x38
	0002421a:MOV RDX,qword ptr [RAX + 0x8]
	0002421e:MOV RAX,qword ptr [RBP + -0x598]
	00024225:MOV qword ptr [RAX + 0x8],RDX
	00024229:MOV RAX,qword ptr [RBP + -0x548]
	00024230:MOV RAX,qword ptr [RAX]
	00024233:MOV EDX,EAX
	00024235:MOV RAX,qword ptr [RBP + -0x598]
	0002423c:MOV dword ptr [RAX + 0x10],EDX
	0002423f:MOV RAX,qword ptr [RBP + -0x598]
	00024246:MOV byte ptr [RAX + 0xe0],0x1
	0002424d:JMP 0x00025465
	00024252:MOV RAX,qword ptr [RBP + -0x548]
	00024259:SUB RAX,0x70
	0002425d:MOV RDX,qword ptr [RAX + 0x8]
	00024261:MOV RAX,qword ptr [RBP + -0x598]
	00024268:MOV qword ptr [RAX + 0x38],RDX
	0002426c:MOV RAX,qword ptr [RBP + -0x548]
	00024273:MOV RDX,qword ptr [RAX + 0x8]
	00024277:MOV RAX,qword ptr [RBP + -0x598]
	0002427e:MOV qword ptr [RAX + 0x40],RDX
	00024282:JMP 0x00025465
	00024287:MOV RAX,qword ptr [RBP + -0x548]
	0002428e:SUB RAX,0xe0
	00024294:MOV RAX,qword ptr [RAX + 0x10]
	00024298:CMP RAX,0x3
	0002429c:JLE 0x0002435c
	000242a2:MOV RAX,qword ptr [RBP + -0x598]
	000242a9:MOVZX EAX,byte ptr [RAX + 0xd9]
	000242b0:TEST AL,AL
	000242b2:JZ 0x000242fb
	000242b4:MOV RAX,qword ptr [RBP + -0x548]
	000242bb:SUB RAX,0xe0
	000242c1:MOV RAX,qword ptr [RAX + 0x10]
	000242c5:MOV qword ptr [RBP + -0x518],RAX
	000242cc:MOV RAX,qword ptr [RBP + -0x548]
	000242d3:SUB RAX,0xe0
	000242d9:MOV RAX,qword ptr [RAX + 0x8]
	000242dd:MOV RDX,qword ptr [RBP + -0x518]
	000242e4:MOV RSI,RAX
	000242e7:LEA RAX,[0x34c78]
	000242ee:MOV RDI,RAX
	000242f1:MOV EAX,0x0
	000242f6:CALL 0x000222e9
	000242fb:MOV RAX,qword ptr [RBP + -0x548]
	00024302:LEA RSI,[RAX + -0xe0]
	00024309:MOV RCX,qword ptr [RBP + -0x598]
	00024310:MOV RAX,qword ptr [RSI]
	00024313:MOV RDX,qword ptr [RSI + 0x8]
	00024317:MOV qword ptr [RCX + 0x20],RAX
	0002431b:MOV qword ptr [RCX + 0x28],RDX
	0002431f:MOV RAX,qword ptr [RSI + 0x10]
	00024323:MOV qword ptr [RCX + 0x30],RAX
	00024327:MOV RAX,qword ptr [RBP + -0x548]
	0002432e:SUB RAX,0x70
	00024332:MOV RDX,qword ptr [RAX + 0x8]
	00024336:MOV RAX,qword ptr [RBP + -0x598]
	0002433d:MOV qword ptr [RAX + 0x38],RDX
	00024341:MOV RAX,qword ptr [RBP + -0x548]
	00024348:MOV RDX,qword ptr [RAX + 0x8]
	0002434c:MOV RAX,qword ptr [RBP + -0x598]
	00024353:MOV qword ptr [RAX + 0x40],RDX
	00024357:JMP 0x00025465
	0002435c:MOV RAX,qword ptr [RBP + -0x598]
	00024363:MOVZX EAX,byte ptr [RAX + 0xd9]
	0002436a:TEST AL,AL
	0002436c:JZ 0x00024396
	0002436e:MOV RAX,qword ptr [RBP + -0x548]
	00024375:SUB RAX,0xe0
	0002437b:MOV RAX,qword ptr [RAX + 0x8]
	0002437f:MOV RSI,RAX
	00024382:LEA RAX,[0x34cb0]
	00024389:MOV RDI,RAX
	0002438c:MOV EAX,0x0
	00024391:CALL 0x000222e9
	00024396:MOV RAX,qword ptr [RBP + -0x548]
	0002439d:SUB RAX,0xe0
	000243a3:MOV RDX,qword ptr [RAX + 0x8]
	000243a7:MOV RAX,qword ptr [RBP + -0x598]
	000243ae:MOV qword ptr [RAX + 0x38],RDX
	000243b2:MOV RAX,qword ptr [RBP + -0x548]
	000243b9:SUB RAX,0x70
	000243bd:MOV RDX,qword ptr [RAX + 0x8]
	000243c1:MOV RAX,qword ptr [RBP + -0x598]
	000243c8:MOV qword ptr [RAX + 0x40],RDX
	000243cc:MOV RCX,qword ptr [RBP + -0x598]
	000243d3:MOV RSI,qword ptr [RBP + -0x548]
	000243da:MOV RAX,qword ptr [RSI]
	000243dd:MOV RDX,qword ptr [RSI + 0x8]
	000243e1:MOV qword ptr [RCX + 0x20],RAX
	000243e5:MOV qword ptr [RCX + 0x28],RDX
	000243e9:MOV RAX,qword ptr [RSI + 0x10]
	000243ed:MOV qword ptr [RCX + 0x30],RAX
	000243f1:JMP 0x00025465
	000243f6:MOV RAX,qword ptr [RBP + -0x548]
	000243fd:SUB RAX,0x70
	00024401:MOV RDX,qword ptr [RAX + 0x8]
	00024405:MOV RAX,qword ptr [RBP + -0x598]
	0002440c:MOV qword ptr [RAX + 0x40],RDX
	00024410:MOV RAX,qword ptr [RBP + -0x548]
	00024417:SUB RAX,0x38
	0002441b:MOV RDX,qword ptr [RAX]
	0002441e:MOV RAX,qword ptr [RBP + -0x598]
	00024425:MOV qword ptr [RAX + 0x38],RDX
	00024429:MOV RAX,qword ptr [RBP + -0x548]
	00024430:MOV RAX,qword ptr [RAX + 0x8]
	00024434:MOV EDX,0x0
	00024439:NEG RAX
	0002443c:JNO 0x00024443
	0002443e:MOV EDX,0x1
	00024443:MOV RCX,RAX
	00024446:MOV RAX,qword ptr [RBP + -0x598]
	0002444d:MOV qword ptr [RAX + 0x28],RCX
	00024451:MOV RAX,RDX
	00024454:AND EAX,0x1
	00024457:TEST AL,AL
	00024459:JNZ 0x000257f0
	0002445f:MOV RAX,qword ptr [RBP + -0x548]
	00024466:MOV RDX,qword ptr [RAX + 0x10]
	0002446a:MOV RAX,qword ptr [RBP + -0x598]
	00024471:MOV qword ptr [RAX + 0x30],RDX
	00024475:JMP 0x00025465
	0002447a:MOV RAX,qword ptr [RBP + -0x548]
	00024481:SUB RAX,0x70
	00024485:MOV RDX,qword ptr [RAX]
	00024488:MOV RAX,qword ptr [RBP + -0x598]
	0002448f:MOV qword ptr [RAX + 0x38],RDX
	00024493:MOV RAX,qword ptr [RBP + -0x548]
	0002449a:SUB RAX,0x38
	0002449e:MOV RAX,qword ptr [RAX + 0x8]
	000244a2:MOV EDX,0x0
	000244a7:NEG RAX
	000244aa:JNO 0x000244b1
	000244ac:MOV EDX,0x1
	000244b1:MOV RCX,RAX
	000244b4:MOV RAX,qword ptr [RBP + -0x598]
	000244bb:MOV qword ptr [RAX + 0x40],RCX
	000244bf:MOV RAX,RDX
	000244c2:AND EAX,0x1
	000244c5:TEST AL,AL
	000244c7:JNZ 0x000257f3
	000244cd:MOV RAX,qword ptr [RBP + -0x548]
	000244d4:MOV RAX,qword ptr [RAX + 0x8]
	000244d8:MOV EDX,0x0
	000244dd:NEG RAX
	000244e0:JNO 0x000244e7
	000244e2:MOV EDX,0x1
	000244e7:MOV RCX,RAX
	000244ea:MOV RAX,qword ptr [RBP + -0x598]
	000244f1:MOV qword ptr [RAX + 0x28],RCX
	000244f5:MOV RAX,RDX
	000244f8:AND EAX,0x1
	000244fb:TEST AL,AL
	000244fd:JNZ 0x000257f6
	00024503:MOV RAX,qword ptr [RBP + -0x548]
	0002450a:MOV RDX,qword ptr [RAX + 0x10]
	0002450e:MOV RAX,qword ptr [RBP + -0x598]
	00024515:MOV qword ptr [RAX + 0x30],RDX
	00024519:JMP 0x00025465
	0002451e:MOV RAX,qword ptr [RBP + -0x548]
	00024525:SUB RAX,0x38
	00024529:MOV RDX,qword ptr [RAX]
	0002452c:MOV RAX,qword ptr [RBP + -0x598]
	00024533:MOV qword ptr [RAX + 0x38],RDX
	00024537:MOV RAX,qword ptr [RBP + -0x548]
	0002453e:MOV RDX,qword ptr [RAX + 0x8]
	00024542:MOV RAX,qword ptr [RBP + -0x598]
	00024549:MOV qword ptr [RAX + 0x40],RDX
	0002454d:JMP 0x00025465
	00024552:MOV RAX,qword ptr [RBP + -0x548]
	00024559:SUB RAX,0xa8
	0002455f:MOV RDX,qword ptr [RAX]
	00024562:MOV RAX,qword ptr [RBP + -0x598]
	00024569:MOV qword ptr [RAX + 0x38],RDX
	0002456d:MOV RAX,qword ptr [RBP + -0x548]
	00024574:SUB RAX,0x70
	00024578:MOV RDX,qword ptr [RAX + 0x8]
	0002457c:MOV RAX,qword ptr [RBP + -0x598]
	00024583:MOV qword ptr [RAX + 0x40],RDX
	00024587:MOV RCX,qword ptr [RBP + -0x598]
	0002458e:MOV RSI,qword ptr [RBP + -0x548]
	00024595:MOV RAX,qword ptr [RSI]
	00024598:MOV RDX,qword ptr [RSI + 0x8]
	0002459c:MOV qword ptr [RCX + 0x20],RAX
	000245a0:MOV qword ptr [RCX + 0x28],RDX
	000245a4:MOV RAX,qword ptr [RSI + 0x10]
	000245a8:MOV qword ptr [RCX + 0x30],RAX
	000245ac:JMP 0x00025465
	000245b1:MOV RAX,qword ptr [RBP + -0x548]
	000245b8:SUB RAX,0x38
	000245bc:MOV RDX,qword ptr [RAX + 0x8]
	000245c0:MOV RAX,qword ptr [RBP + -0x598]
	000245c7:MOV qword ptr [RAX + 0x40],RDX
	000245cb:MOV RAX,qword ptr [RBP + -0x548]
	000245d2:MOV RDX,qword ptr [RAX]
	000245d5:MOV RAX,qword ptr [RBP + -0x598]
	000245dc:MOV qword ptr [RAX + 0x38],RDX
	000245e0:JMP 0x00025465
	000245e5:MOV RAX,qword ptr [RBP + -0x548]
	000245ec:SUB RAX,0x70
	000245f0:MOV RDX,qword ptr [RAX + 0x8]
	000245f4:MOV RAX,qword ptr [RBP + -0x598]
	000245fb:MOV qword ptr [RAX + 0x40],RDX
	000245ff:MOV RAX,qword ptr [RBP + -0x548]
	00024606:SUB RAX,0x38
	0002460a:MOV RDX,qword ptr [RAX]
	0002460d:MOV RAX,qword ptr [RBP + -0x598]
	00024614:MOV qword ptr [RAX + 0x38],RDX
	00024618:MOV RCX,qword ptr [RBP + -0x598]
	0002461f:MOV RSI,qword ptr [RBP + -0x548]
	00024626:MOV RAX,qword ptr [RSI]
	00024629:MOV RDX,qword ptr [RSI + 0x8]
	0002462d:MOV qword ptr [RCX + 0x20],RAX
	00024631:MOV qword ptr [RCX + 0x28],RDX
	00024635:MOV RAX,qword ptr [RSI + 0x10]
	00024639:MOV qword ptr [RCX + 0x30],RAX
	0002463d:JMP 0x00025465
	00024642:MOV RAX,qword ptr [RBP + -0x548]
	00024649:LEA RSI,[RAX + -0x70]
	0002464d:MOV RCX,qword ptr [RBP + -0x598]
	00024654:MOV RAX,qword ptr [RSI]
	00024657:MOV RDX,qword ptr [RSI + 0x8]
	0002465b:MOV qword ptr [RCX + 0x20],RAX
	0002465f:MOV qword ptr [RCX + 0x28],RDX
	00024663:MOV RAX,qword ptr [RSI + 0x10]
	00024667:MOV qword ptr [RCX + 0x30],RAX
	0002466b:MOV RAX,qword ptr [RBP + -0x548]
	00024672:SUB RAX,0x38
	00024676:MOV RAX,qword ptr [RAX + 0x8]
	0002467a:MOV EDX,0x0
	0002467f:NEG RAX
	00024682:JNO 0x00024689
	00024684:MOV EDX,0x1
	00024689:MOV RCX,RAX
	0002468c:MOV RAX,qword ptr [RBP + -0x598]
	00024693:MOV qword ptr [RAX + 0x38],RCX
	00024697:MOV RAX,RDX
	0002469a:AND EAX,0x1
	0002469d:TEST AL,AL
	0002469f:JNZ 0x000257f9
	000246a5:MOV RAX,qword ptr [RBP + -0x548]
	000246ac:MOV RAX,qword ptr [RAX + 0x8]
	000246b0:MOV EDX,0x0
	000246b5:NEG RAX
	000246b8:JNO 0x000246bf
	000246ba:MOV EDX,0x1
	000246bf:MOV RCX,RAX
	000246c2:MOV RAX,qword ptr [RBP + -0x598]
	000246c9:MOV qword ptr [RAX + 0x40],RCX
	000246cd:MOV RAX,RDX
	000246d0:AND EAX,0x1
	000246d3:TEST AL,AL
	000246d5:JZ 0x0002544f
	000246db:JMP 0x00025803
	000246e0:MOV RAX,qword ptr [RBP + -0x548]
	000246e7:MOV RAX,qword ptr [RAX]
	000246ea:MOV ECX,EAX
	000246ec:MOV RAX,qword ptr [RBP + -0x548]
	000246f3:SUB RAX,0x38
	000246f7:MOV RDX,qword ptr [RBP + -0x598]
	000246fe:SUB RSP,0x8
	00024702:PUSH qword ptr [RAX + 0x30]
	00024705:PUSH qword ptr [RAX + 0x28]
	00024708:PUSH qword ptr [RAX + 0x20]
	0002470b:PUSH qword ptr [RAX + 0x18]
	0002470e:PUSH qword ptr [RAX + 0x10]
	00024711:PUSH qword ptr [RAX + 0x8]
	00024714:PUSH qword ptr [RAX]
	00024716:MOV ESI,ECX
	00024718:MOV RDI,RDX
	0002471b:CALL 0x0002267a
	00024720:ADD RSP,0x40
	00024724:XOR EAX,0x1
	00024727:TEST AL,AL
	00024729:JZ 0x00025452
	0002472f:JMP 0x00025803
	00024734:MOV RDX,qword ptr [RBP + -0x598]
	0002473b:SUB RSP,0x8
	0002473f:MOV RAX,qword ptr [RBP + -0x548]
	00024746:PUSH qword ptr [RAX + 0x30]
	00024749:PUSH qword ptr [RAX + 0x28]
	0002474c:PUSH qword ptr [RAX + 0x20]
	0002474f:PUSH qword ptr [RAX + 0x18]
	00024752:PUSH qword ptr [RAX + 0x10]
	00024755:PUSH qword ptr [RAX + 0x8]
	00024758:PUSH qword ptr [RAX]
	0002475a:MOV ESI,0x1
	0002475f:MOV RDI,RDX
	00024762:CALL 0x0002267a
	00024767:ADD RSP,0x40
	0002476b:XOR EAX,0x1
	0002476e:TEST AL,AL
	00024770:JZ 0x00025455
	00024776:JMP 0x00025803
	0002477b:MOV RDX,qword ptr [RBP + -0x598]
	00024782:SUB RSP,0x8
	00024786:MOV RAX,qword ptr [RBP + -0x548]
	0002478d:PUSH qword ptr [RAX + 0x30]
	00024790:PUSH qword ptr [RAX + 0x28]
	00024793:PUSH qword ptr [RAX + 0x20]
	00024796:PUSH qword ptr [RAX + 0x18]
	00024799:PUSH qword ptr [RAX + 0x10]
	0002479c:PUSH qword ptr [RAX + 0x8]
	0002479f:PUSH qword ptr [RAX]
	000247a1:MOV ESI,0x1
	000247a6:MOV RDI,RDX
	000247a9:CALL 0x0002267a
	000247ae:ADD RSP,0x40
	000247b2:XOR EAX,0x1
	000247b5:TEST AL,AL
	000247b7:JZ 0x00025458
	000247bd:JMP 0x00025803
	000247c2:MOV qword ptr [RBP + -0x4d0],0x0
	000247cd:MOV qword ptr [RBP + -0x4c8],0x0
	000247d8:MOV qword ptr [RBP + -0x4c0],0x0
	000247e3:MOV qword ptr [RBP + -0x4b8],0x0
	000247ee:MOV qword ptr [RBP + -0x4b0],0x0
	000247f9:MOV qword ptr [RBP + -0x4a8],0x0
	00024804:MOV qword ptr [RBP + -0x4a0],0x0
	0002480f:MOV RAX,qword ptr [RBP + -0x548]
	00024816:SUB RAX,0x38
	0002481a:MOV RAX,qword ptr [RAX]
	0002481d:MOV qword ptr [RBP + -0x4d0],RAX
	00024824:JMP 0x00025465
	00024829:MOV qword ptr [RBP + -0x4d0],0x0
	00024834:MOV qword ptr [RBP + -0x4c8],0x0
	0002483f:MOV qword ptr [RBP + -0x4c0],0x0
	0002484a:MOV qword ptr [RBP + -0x4b8],0x0
	00024855:MOV qword ptr [RBP + -0x4b0],0x0
	00024860:MOV qword ptr [RBP + -0x4a8],0x0
	0002486b:MOV qword ptr [RBP + -0x4a0],0x0
	00024876:MOV RAX,qword ptr [RBP + -0x548]
	0002487d:SUB RAX,0x38
	00024881:MOV RAX,qword ptr [RAX + 0x8]
	00024885:MOV qword ptr [RBP + -0x4d0],RAX
	0002488c:JMP 0x00025465
	00024891:MOV qword ptr [RBP + -0x4d0],0x0
	0002489c:MOV qword ptr [RBP + -0x4c8],0x0
	000248a7:MOV qword ptr [RBP + -0x4c0],0x0
	000248b2:MOV qword ptr [RBP + -0x4b8],0x0
	000248bd:MOV qword ptr [RBP + -0x4b0],0x0
	000248c8:MOV qword ptr [RBP + -0x4a8],0x0
	000248d3:MOV qword ptr [RBP + -0x4a0],0x0
	000248de:MOV qword ptr [RBP + -0x4d0],0x1
	000248e9:JMP 0x00025465
	000248ee:MOV qword ptr [RBP + -0x4d0],0x0
	000248f9:MOV qword ptr [RBP + -0x4c8],0x0
	00024904:MOV qword ptr [RBP + -0x4c0],0x0
	0002490f:MOV qword ptr [RBP + -0x4b8],0x0
	0002491a:MOV qword ptr [RBP + -0x4b0],0x0
	00024925:MOV qword ptr [RBP + -0x4a8],0x0
	00024930:MOV qword ptr [RBP + -0x4a0],0x0
	0002493b:MOV RAX,qword ptr [RBP + -0x548]
	00024942:SUB RAX,0x38
	00024946:MOV RAX,qword ptr [RAX]
	00024949:MOV qword ptr [RBP + -0x4c8],RAX
	00024950:JMP 0x00025465
	00024955:MOV qword ptr [RBP + -0x4d0],0x0
	00024960:MOV qword ptr [RBP + -0x4c8],0x0
	0002496b:MOV qword ptr [RBP + -0x4c0],0x0
	00024976:MOV qword ptr [RBP + -0x4b8],0x0
	00024981:MOV qword ptr [RBP + -0x4b0],0x0
	0002498c:MOV qword ptr [RBP + -0x4a8],0x0
	00024997:MOV qword ptr [RBP + -0x4a0],0x0
	000249a2:MOV RAX,qword ptr [RBP + -0x548]
	000249a9:SUB RAX,0x38
	000249ad:MOV RAX,qword ptr [RAX + 0x8]
	000249b1:MOV qword ptr [RBP + -0x4c8],RAX
	000249b8:JMP 0x00025465
	000249bd:MOV qword ptr [RBP + -0x4d0],0x0
	000249c8:MOV qword ptr [RBP + -0x4c8],0x0
	000249d3:MOV qword ptr [RBP + -0x4c0],0x0
	000249de:MOV qword ptr [RBP + -0x4b8],0x0
	000249e9:MOV qword ptr [RBP + -0x4b0],0x0
	000249f4:MOV qword ptr [RBP + -0x4a8],0x0
	000249ff:MOV qword ptr [RBP + -0x4a0],0x0
	00024a0a:MOV qword ptr [RBP + -0x4c8],0x1
	00024a15:JMP 0x00025465
	00024a1a:MOV qword ptr [RBP + -0x4d0],0x0
	00024a25:MOV qword ptr [RBP + -0x4c8],0x0
	00024a30:MOV qword ptr [RBP + -0x4c0],0x0
	00024a3b:MOV qword ptr [RBP + -0x4b8],0x0
	00024a46:MOV qword ptr [RBP + -0x4b0],0x0
	00024a51:MOV qword ptr [RBP + -0x4a8],0x0
	00024a5c:MOV qword ptr [RBP + -0x4a0],0x0
	00024a67:MOV RAX,qword ptr [RBP + -0x548]
	00024a6e:SUB RAX,0x38
	00024a72:MOV RDX,qword ptr [RAX]
	00024a75:MOV RAX,qword ptr [RBP + -0x548]
	00024a7c:MOV RAX,qword ptr [RAX]
	00024a7f:MOV ECX,0x0
	00024a84:IMUL RAX,RDX
	00024a88:JNO 0x00024a8f
	00024a8a:MOV ECX,0x1
	00024a8f:MOV qword ptr [RBP + -0x4c0],RAX
	00024a96:MOV RAX,RCX
	00024a99:AND EAX,0x1
	00024a9c:TEST AL,AL
	00024a9e:JZ 0x0002545b
	00024aa4:JMP 0x00025803
	00024aa9:MOV qword ptr [RBP + -0x4d0],0x0
	00024ab4:MOV qword ptr [RBP + -0x4c8],0x0
	00024abf:MOV qword ptr [RBP + -0x4c0],0x0
	00024aca:MOV qword ptr [RBP + -0x4b8],0x0
	00024ad5:MOV qword ptr [RBP + -0x4b0],0x0
	00024ae0:MOV qword ptr [RBP + -0x4a8],0x0
	00024aeb:MOV qword ptr [RBP + -0x4a0],0x0
	00024af6:MOV RAX,qword ptr [RBP + -0x548]
	00024afd:SUB RAX,0x38
	00024b01:MOV RDX,qword ptr [RAX + 0x8]
	00024b05:MOV RAX,qword ptr [RBP + -0x548]
	00024b0c:MOV RAX,qword ptr [RAX]
	00024b0f:MOV ECX,0x0
	00024b14:IMUL RAX,RDX
	00024b18:JNO 0x00024b1f
	00024b1a:MOV ECX,0x1
	00024b1f:MOV qword ptr [RBP + -0x4c0],RAX
	00024b26:MOV RAX,RCX
	00024b29:AND EAX,0x1
	00024b2c:TEST AL,AL
	00024b2e:JZ 0x0002545e
	00024b34:JMP 0x00025803
	00024b39:MOV qword ptr [RBP + -0x4d0],0x0
	00024b44:MOV qword ptr [RBP + -0x4c8],0x0
	00024b4f:MOV qword ptr [RBP + -0x4c0],0x0
	00024b5a:MOV qword ptr [RBP + -0x4b8],0x0
	00024b65:MOV qword ptr [RBP + -0x4b0],0x0
	00024b70:MOV qword ptr [RBP + -0x4a8],0x0
	00024b7b:MOV qword ptr [RBP + -0x4a0],0x0
	00024b86:MOV RAX,qword ptr [RBP + -0x548]
	00024b8d:MOV RAX,qword ptr [RAX]
	00024b90:MOV qword ptr [RBP + -0x4c0],RAX
	00024b97:JMP 0x00025465
	00024b9c:MOV qword ptr [RBP + -0x4d0],0x0
	00024ba7:MOV qword ptr [RBP + -0x4c8],0x0
	00024bb2:MOV qword ptr [RBP + -0x4c0],0x0
	00024bbd:MOV qword ptr [RBP + -0x4b8],0x0
	00024bc8:MOV qword ptr [RBP + -0x4b0],0x0
	00024bd3:MOV qword ptr [RBP + -0x4a8],0x0
	00024bde:MOV qword ptr [RBP + -0x4a0],0x0
	00024be9:MOV RAX,qword ptr [RBP + -0x548]
	00024bf0:SUB RAX,0x38
	00024bf4:MOV RAX,qword ptr [RAX]
	00024bf7:MOV qword ptr [RBP + -0x4b8],RAX
	00024bfe:JMP 0x00025465
	00024c03:MOV qword ptr [RBP + -0x4d0],0x0
	00024c0e:MOV qword ptr [RBP + -0x4c8],0x0
	00024c19:MOV qword ptr [RBP + -0x4c0],0x0
	00024c24:MOV qword ptr [RBP + -0x4b8],0x0
	00024c2f:MOV qword ptr [RBP + -0x4b0],0x0
	00024c3a:MOV qword ptr [RBP + -0x4a8],0x0
	00024c45:MOV qword ptr [RBP + -0x4a0],0x0
	00024c50:MOV RAX,qword ptr [RBP + -0x548]
	00024c57:SUB RAX,0x38
	00024c5b:MOV RAX,qword ptr [RAX + 0x8]
	00024c5f:MOV qword ptr [RBP + -0x4b8],RAX
	00024c66:JMP 0x00025465
	00024c6b:MOV qword ptr [RBP + -0x4d0],0x0
	00024c76:MOV qword ptr [RBP + -0x4c8],0x0
	00024c81:MOV qword ptr [RBP + -0x4c0],0x0
	00024c8c:MOV qword ptr [RBP + -0x4b8],0x0
	00024c97:MOV qword ptr [RBP + -0x4b0],0x0
	00024ca2:MOV qword ptr [RBP + -0x4a8],0x0
	00024cad:MOV qword ptr [RBP + -0x4a0],0x0
	00024cb8:MOV qword ptr [RBP + -0x4b8],0x1
	00024cc3:JMP 0x00025465
	00024cc8:MOV qword ptr [RBP + -0x4d0],0x0
	00024cd3:MOV qword ptr [RBP + -0x4c8],0x0
	00024cde:MOV qword ptr [RBP + -0x4c0],0x0
	00024ce9:MOV qword ptr [RBP + -0x4b8],0x0
	00024cf4:MOV qword ptr [RBP + -0x4b0],0x0
	00024cff:MOV qword ptr [RBP + -0x4a8],0x0
	00024d0a:MOV qword ptr [RBP + -0x4a0],0x0
	00024d15:MOV RAX,qword ptr [RBP + -0x548]
	00024d1c:SUB RAX,0x38
	00024d20:MOV RAX,qword ptr [RAX]
	00024d23:MOV qword ptr [RBP + -0x4b0],RAX
	00024d2a:JMP 0x00025465
	00024d2f:MOV qword ptr [RBP + -0x4d0],0x0
	00024d3a:MOV qword ptr [RBP + -0x4c8],0x0
	00024d45:MOV qword ptr [RBP + -0x4c0],0x0
	00024d50:MOV qword ptr [RBP + -0x4b8],0x0
	00024d5b:MOV qword ptr [RBP + -0x4b0],0x0
	00024d66:MOV qword ptr [RBP + -0x4a8],0x0
	00024d71:MOV qword ptr [RBP + -0x4a0],0x0
	00024d7c:MOV RAX,qword ptr [RBP + -0x548]
	00024d83:SUB RAX,0x38
	00024d87:MOV RAX,qword ptr [RAX + 0x8]
	00024d8b:MOV qword ptr [RBP + -0x4b0],RAX
	00024d92:JMP 0x00025465
	00024d97:MOV qword ptr [RBP + -0x4d0],0x0
	00024da2:MOV qword ptr [RBP + -0x4c8],0x0
	00024dad:MOV qword ptr [RBP + -0x4c0],0x0
	00024db8:MOV qword ptr [RBP + -0x4b8],0x0
	00024dc3:MOV qword ptr [RBP + -0x4b0],0x0
	00024dce:MOV qword ptr [RBP + -0x4a8],0x0
	00024dd9:MOV qword ptr [RBP + -0x4a0],0x0
	00024de4:MOV qword ptr [RBP + -0x4b0],0x1
	00024def:JMP 0x00025465
	00024df4:MOV qword ptr [RBP + -0x4d0],0x0
	00024dff:MOV qword ptr [RBP + -0x4c8],0x0
	00024e0a:MOV qword ptr [RBP + -0x4c0],0x0
	00024e15:MOV qword ptr [RBP + -0x4b8],0x0
	00024e20:MOV qword ptr [RBP + -0x4b0],0x0
	00024e2b:MOV qword ptr [RBP + -0x4a8],0x0
	00024e36:MOV qword ptr [RBP + -0x4a0],0x0
	00024e41:MOV RAX,qword ptr [RBP + -0x548]
	00024e48:SUB RAX,0x38
	00024e4c:MOV RAX,qword ptr [RAX]
	00024e4f:MOV qword ptr [RBP + -0x4a8],RAX
	00024e56:JMP 0x00025465
	00024e5b:MOV qword ptr [RBP + -0x4d0],0x0
	00024e66:MOV qword ptr [RBP + -0x4c8],0x0
	00024e71:MOV qword ptr [RBP + -0x4c0],0x0
	00024e7c:MOV qword ptr [RBP + -0x4b8],0x0
	00024e87:MOV qword ptr [RBP + -0x4b0],0x0
	00024e92:MOV qword ptr [RBP + -0x4a8],0x0
	00024e9d:MOV qword ptr [RBP + -0x4a0],0x0
	00024ea8:MOV RAX,qword ptr [RBP + -0x548]
	00024eaf:SUB RAX,0x38
	00024eb3:MOV RAX,qword ptr [RAX + 0x8]
	00024eb7:MOV qword ptr [RBP + -0x4a8],RAX
	00024ebe:JMP 0x00025465
	00024ec3:MOV qword ptr [RBP + -0x4d0],0x0
	00024ece:MOV qword ptr [RBP + -0x4c8],0x0
	00024ed9:MOV qword ptr [RBP + -0x4c0],0x0
	00024ee4:MOV qword ptr [RBP + -0x4b8],0x0
	00024eef:MOV qword ptr [RBP + -0x4b0],0x0
	00024efa:MOV qword ptr [RBP + -0x4a8],0x0
	00024f05:MOV qword ptr [RBP + -0x4a0],0x0
	00024f10:MOV RAX,qword ptr [RBP + -0x548]
	00024f17:SUB RAX,0x38
	00024f1b:MOV RAX,qword ptr [RAX]
	00024f1e:MOV qword ptr [RBP + -0x4a8],RAX
	00024f25:MOV RAX,qword ptr [RBP + -0x548]
	00024f2c:SUB RAX,0x38
	00024f30:MOV RAX,qword ptr [RAX + 0x8]
	00024f34:MOV dword ptr [RBP + -0x4a0],EAX
	00024f3a:JMP 0x00025465
	00024f3f:MOV qword ptr [RBP + -0x4d0],0x0
	00024f4a:MOV qword ptr [RBP + -0x4c8],0x0
	00024f55:MOV qword ptr [RBP + -0x4c0],0x0
	00024f60:MOV qword ptr [RBP + -0x4b8],0x0
	00024f6b:MOV qword ptr [RBP + -0x4b0],0x0
	00024f76:MOV qword ptr [RBP + -0x4a8],0x0
	00024f81:MOV qword ptr [RBP + -0x4a0],0x0
	00024f8c:MOV RAX,qword ptr [RBP + -0x548]
	00024f93:SUB RAX,0x38
	00024f97:MOV RAX,qword ptr [RAX]
	00024f9a:MOV qword ptr [RBP + -0x4a8],RAX
	00024fa1:MOV RAX,qword ptr [RBP + -0x548]
	00024fa8:SUB RAX,0x38
	00024fac:MOV RAX,qword ptr [RAX + 0x8]
	00024fb0:MOV dword ptr [RBP + -0x4a0],EAX
	00024fb6:JMP 0x00025465
	00024fbb:MOV qword ptr [RBP + -0x4d0],0x0
	00024fc6:MOV qword ptr [RBP + -0x4c8],0x0
	00024fd1:MOV qword ptr [RBP + -0x4c0],0x0
	00024fdc:MOV qword ptr [RBP + -0x4b8],0x0
	00024fe7:MOV qword ptr [RBP + -0x4b0],0x0
	00024ff2:MOV qword ptr [RBP + -0x4a8],0x0
	00024ffd:MOV qword ptr [RBP + -0x4a0],0x0
	00025008:MOV qword ptr [RBP + -0x4a8],0x1
	00025013:JMP 0x00025465
	00025018:MOV qword ptr [RBP + -0x4d0],0x0
	00025023:MOV qword ptr [RBP + -0x4c8],0x0
	0002502e:MOV qword ptr [RBP + -0x4c0],0x0
	00025039:MOV qword ptr [RBP + -0x4b8],0x0
	00025044:MOV qword ptr [RBP + -0x4b0],0x0
	0002504f:MOV qword ptr [RBP + -0x4a8],0x0
	0002505a:MOV qword ptr [RBP + -0x4a0],0x0
	00025065:MOV RAX,qword ptr [RBP + -0x548]
	0002506c:SUB RAX,0x38
	00025070:MOV RAX,qword ptr [RAX + 0x8]
	00025074:MOV qword ptr [RBP + -0x4d0],RAX
	0002507b:JMP 0x00025465
	00025080:MOV qword ptr [RBP + -0x4d0],0x0
	0002508b:MOV qword ptr [RBP + -0x4c8],0x0
	00025096:MOV qword ptr [RBP + -0x4c0],0x0
	000250a1:MOV qword ptr [RBP + -0x4b8],0x0
	000250ac:MOV qword ptr [RBP + -0x4b0],0x0
	000250b7:MOV qword ptr [RBP + -0x4a8],0x0
	000250c2:MOV qword ptr [RBP + -0x4a0],0x0
	000250cd:MOV RAX,qword ptr [RBP + -0x548]
	000250d4:SUB RAX,0x38
	000250d8:MOV RAX,qword ptr [RAX + 0x8]
	000250dc:MOV qword ptr [RBP + -0x4c8],RAX
	000250e3:JMP 0x00025465
	000250e8:MOV qword ptr [RBP + -0x4d0],0x0
	000250f3:MOV qword ptr [RBP + -0x4c8],0x0
	000250fe:MOV qword ptr [RBP + -0x4c0],0x0
	00025109:MOV qword ptr [RBP + -0x4b8],0x0
	00025114:MOV qword ptr [RBP + -0x4b0],0x0
	0002511f:MOV qword ptr [RBP + -0x4a8],0x0
	0002512a:MOV qword ptr [RBP + -0x4a0],0x0
	00025135:MOV RAX,qword ptr [RBP + -0x548]
	0002513c:SUB RAX,0x38
	00025140:MOV RDX,qword ptr [RAX + 0x8]
	00025144:MOV RAX,qword ptr [RBP + -0x548]
	0002514b:MOV RAX,qword ptr [RAX]
	0002514e:MOV ECX,0x0
	00025153:IMUL RAX,RDX
	00025157:JNO 0x0002515e
	00025159:MOV ECX,0x1
	0002515e:MOV qword ptr [RBP + -0x4c0],RAX
	00025165:MOV RAX,RCX
	00025168:AND EAX,0x1
	0002516b:TEST AL,AL
	0002516d:JZ 0x00025461
	00025173:JMP 0x00025803
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
	00025183:MOV qword ptr [RBP + -0x4c8],0x0
	0002518e:MOV qword ptr [RBP + -0x4c0],0x0
	00025199:MOV qword ptr [RBP + -0x4b8],0x0
	000251a4:MOV qword ptr [RBP + -0x4b0],0x0
	000251af:MOV qword ptr [RBP + -0x4a8],0x0
	000251ba:MOV qword ptr [RBP + -0x4a0],0x0
	000251c5:MOV RAX,qword ptr [RBP + -0x548]
	000251cc:SUB RAX,0x38
	000251d0:MOV RAX,qword ptr [RAX + 0x8]
	000251d4:MOV qword ptr [RBP + -0x4b8],RAX
	000251db:JMP 0x00025465
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
	000251eb:MOV qword ptr [RBP + -0x4c8],0x0
	000251f6:MOV qword ptr [RBP + -0x4c0],0x0
	00025201:MOV qword ptr [RBP + -0x4b8],0x0
	0002520c:MOV qword ptr [RBP + -0x4b0],0x0
	00025217:MOV qword ptr [RBP + -0x4a8],0x0
	00025222:MOV qword ptr [RBP + -0x4a0],0x0
	0002522d:MOV RAX,qword ptr [RBP + -0x548]
	00025234:SUB RAX,0x38
	00025238:MOV RAX,qword ptr [RAX + 0x8]
	0002523c:MOV qword ptr [RBP + -0x4b0],RAX
	00025243:JMP 0x00025465
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
	00025253:MOV qword ptr [RBP + -0x4c8],0x0
	0002525e:MOV qword ptr [RBP + -0x4c0],0x0
	00025269:MOV qword ptr [RBP + -0x4b8],0x0
	00025274:MOV qword ptr [RBP + -0x4b0],0x0
	0002527f:MOV qword ptr [RBP + -0x4a8],0x0
	0002528a:MOV qword ptr [RBP + -0x4a0],0x0
	00025295:MOV RAX,qword ptr [RBP + -0x548]
	0002529c:SUB RAX,0x38
	000252a0:MOV RAX,qword ptr [RAX + 0x8]
	000252a4:MOV qword ptr [RBP + -0x4a8],RAX
	000252ab:JMP 0x00025465
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
	000252bb:MOV qword ptr [RBP + -0x4c8],0x0
	000252c6:MOV qword ptr [RBP + -0x4c0],0x0
	000252d1:MOV qword ptr [RBP + -0x4b8],0x0
	000252dc:MOV qword ptr [RBP + -0x4b0],0x0
	000252e7:MOV qword ptr [RBP + -0x4a8],0x0
	000252f2:MOV qword ptr [RBP + -0x4a0],0x0
	000252fd:MOV RAX,qword ptr [RBP + -0x548]
	00025304:MOV RAX,qword ptr [RAX]
	00025307:MOV qword ptr [RBP + -0x4c0],RAX
	0002530e:JMP 0x00025465
	00025313:MOV RAX,qword ptr [RBP + -0x548]
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
	0002531e:MOV RDI,RAX
	00025321:CALL 0x000222c3
	00025326:TEST AL,AL
	00025328:JNZ 0x000257fc
	0002532e:MOV RAX,qword ptr [RBP + -0x548]
	00025335:MOV RAX,qword ptr [RAX + 0x8]
	00025339:MOV qword ptr [RBP + -0x4d0],RAX
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
	0002534b:JMP 0x00025465
	00025350:MOV RAX,qword ptr [RBP + -0x548]
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
	00025363:TEST AL,AL
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
330: debug_print_relative_time("relative",pc);
	00024091:CALL 0x000232a7
END_OF_LINE
----------------------------------------------
332: case 0x22:
	000240a2:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
333: _Var5 = time_zone_hhmm(pc,yyvsp[-1].textintval,yyvsp->intval);
	000240a2:MOV RCX,qword ptr [RAX]
	000240a5:MOV RAX,qword ptr [RBP + -0x548]
	000240ac:SUB RAX,0x38
	000240b0:MOV RDX,qword ptr [RBP + -0x598]
	000240b7:SUB RSP,0x8
	000240bb:PUSH qword ptr [RAX + 0x10]
	000240be:PUSH qword ptr [RAX + 0x8]
	000240c1:PUSH qword ptr [RAX]
	000240c3:MOV RSI,RCX
	000240c6:MOV RDI,RDX
	000240c9:CALL 0x0002596a
END_OF_LINE
----------------------------------------------
334: if ((!_Var5) ||
	000240d2:XOR EAX,0x1
	000240d5:TEST AL,AL
	000240d7:JNZ 0x000257ed
	000240dd:MOV RAX,qword ptr [RBP + -0x598]
	000240e4:MOV EAX,dword ptr [RAX + 0x18]
	000240e7:MOV RDX,qword ptr [RBP + -0x548]
	000240ee:SUB RDX,0x70
	000240f2:MOV RCX,qword ptr [RDX]
	000240f5:CDQE
	000240f7:MOV EDX,0x0
	000240fc:ADD RAX,RCX
	000240ff:JNO 0x00024106
	00024101:MOV EDX,0x1
	00024106:MOVSXD RCX,EAX
	00024109:CMP RAX,RCX
	0002410c:JZ 0x00024113
	0002410e:MOV EDX,0x1
	00024113:MOV ECX,EAX
	00024115:MOV RAX,qword ptr [RBP + -0x598]
	0002411c:MOV dword ptr [RAX + 0x18],ECX
	0002411f:MOV EAX,EDX
	00024121:AND EAX,0x1
	00024124:TEST AL,AL
	00024126:JZ 0x0002544c
END_OF_LINE
----------------------------------------------
335: (iVar8 = pc->time_zone, lVar10 = yyvsp[-2].intval, lVar12 = iVar8 + lVar10,
	000240e4:MOV EAX,dword ptr [RAX + 0x18]
	000240e7:MOV RDX,qword ptr [RBP + -0x548]
	000240ee:SUB RDX,0x70
	000240f2:MOV RCX,qword ptr [RDX]
	000240f5:CDQE
	000240f7:MOV EDX,0x0
	000240fc:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
336: iVar7 = (int)lVar12, pc->time_zone = iVar7, lVar12 != iVar7 || SCARRY8((long)iVar8,lVar10))
	000240f5:CDQE
	000240f7:MOV EDX,0x0
	000240fc:ADD RAX,RCX
	000240ff:JNO 0x00024106
	00024101:MOV EDX,0x1
	00024106:MOVSXD RCX,EAX
	00024109:CMP RAX,RCX
	0002410c:JZ 0x00024113
	0002410e:MOV EDX,0x1
	00024113:MOV ECX,EAX
	00024115:MOV RAX,qword ptr [RBP + -0x598]
	0002411c:MOV dword ptr [RAX + 0x18],ECX
	0002411f:MOV EAX,EDX
	00024121:AND EAX,0x1
	00024124:TEST AL,AL
	00024126:JZ 0x0002544c
END_OF_LINE
----------------------------------------------
337: ) goto LAB_00025803;
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
339: case 0x23:
	00024138:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
340: pc->time_zone = (int)yyvsp->intval + 0xe10;
	00024138:MOV RAX,qword ptr [RAX]
	0002413b:ADD EAX,0xe10
	00024140:MOV EDX,EAX
	00024142:MOV RAX,qword ptr [RBP + -0x598]
	00024149:MOV dword ptr [RAX + 0x18],EDX
END_OF_LINE
----------------------------------------------
342: case 0x24:
	00024158:SUB RAX,0x38
END_OF_LINE
----------------------------------------------
343: pc->time_zone = (int)yyvsp[-1].intval + 0xe10;
	00024158:SUB RAX,0x38
	0002415c:MOV RAX,qword ptr [RAX]
	0002415f:ADD EAX,0xe10
	00024164:MOV EDX,EAX
	00024166:MOV RAX,qword ptr [RBP + -0x598]
	0002416d:MOV dword ptr [RAX + 0x18],EDX
END_OF_LINE
----------------------------------------------
345: case 0x25:
	0002417c:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
346: pc->day_ordinal = 0;
	0002417c:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
347: pc->day_number = (int)yyvsp->intval;
	0002418b:MOV RAX,qword ptr [RAX]
	0002418e:MOV EDX,EAX
	00024190:MOV RAX,qword ptr [RBP + -0x598]
	00024197:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
349: case 0x26:
	000241a6:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
350: pc->day_ordinal = 0;
	000241a6:MOV qword ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
351: pc->day_number = (int)yyvsp[-1].intval;
	000241b5:SUB RAX,0x38
	000241b9:MOV RAX,qword ptr [RAX]
	000241bc:MOV EDX,EAX
	000241be:MOV RAX,qword ptr [RBP + -0x598]
	000241c5:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
353: case 0x27:
	000241d4:SUB RAX,0x38
END_OF_LINE
----------------------------------------------
354: pc->day_ordinal = yyvsp[-1].intval;
	000241d4:SUB RAX,0x38
	000241d8:MOV RDX,qword ptr [RAX]
	000241db:MOV RAX,qword ptr [RBP + -0x598]
	000241e2:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
355: pc->day_number = (int)yyvsp->intval;
	000241ed:MOV RAX,qword ptr [RAX]
	000241f0:MOV EDX,EAX
	000241f2:MOV RAX,qword ptr [RBP + -0x598]
	000241f9:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
356: pc->debug_ordinal_day_seen = true;
	00024203:MOV byte ptr [RAX + 0xe0],0x1
END_OF_LINE
----------------------------------------------
358: case 0x28:
	0002421a:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
359: pc->day_ordinal = *(intmax_t *)((long)yyvsp + -0x30);
	0002421a:MOV RDX,qword ptr [RAX + 0x8]
	0002421e:MOV RAX,qword ptr [RBP + -0x598]
	00024225:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
360: pc->day_number = (int)yyvsp->intval;
	00024230:MOV RAX,qword ptr [RAX]
	00024233:MOV EDX,EAX
	00024235:MOV RAX,qword ptr [RBP + -0x598]
	0002423c:MOV dword ptr [RAX + 0x10],EDX
END_OF_LINE
----------------------------------------------
361: pc->debug_ordinal_day_seen = true;
	00024246:MOV byte ptr [RAX + 0xe0],0x1
END_OF_LINE
----------------------------------------------
363: case 0x29:
	0002425d:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
364: pc->month = *(intmax_t *)((long)yyvsp + -0x68);
	0002425d:MOV RDX,qword ptr [RAX + 0x8]
	00024261:MOV RAX,qword ptr [RBP + -0x598]
	00024268:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
365: pc->day = (yyvsp->textintval).value;
	00024273:MOV RDX,qword ptr [RAX + 0x8]
	00024277:MOV RAX,qword ptr [RBP + -0x598]
	0002427e:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
367: case 0x2a:
	00024294:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
368: if (*(long *)((long)yyvsp + -0xd0) < 4) {
	00024294:MOV RAX,qword ptr [RAX + 0x10]
	00024298:CMP RAX,0x3
	0002429c:JLE 0x0002435c
END_OF_LINE
----------------------------------------------
369: if (pc->parse_datetime_debug != false) {
	00024363:MOVZX EAX,byte ptr [RAX + 0xd9]
	0002436a:TEST AL,AL
	0002436c:JZ 0x00024396
END_OF_LINE
----------------------------------------------
370: dbg_printf("warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\n",
	00024391:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
371: *(undefined8 *)((long)yyvsp + -0xd8));
	0002437b:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
373: pc->month = *(intmax_t *)((long)yyvsp + -0xd8);
	000243a3:MOV RDX,qword ptr [RAX + 0x8]
	000243a7:MOV RAX,qword ptr [RBP + -0x598]
	000243ae:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
374: pc->day = *(intmax_t *)((long)yyvsp + -0x68);
	000243bd:MOV RDX,qword ptr [RAX + 0x8]
	000243c1:MOV RAX,qword ptr [RBP + -0x598]
	000243c8:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
375: iVar4 = (yyvsp->textintval).value;
	000243dd:MOV RDX,qword ptr [RSI + 0x8]
END_OF_LINE
----------------------------------------------
376: *(intmax_t *)&pc->year = yyvsp->intval;
	000243da:MOV RAX,qword ptr [RSI]
	000243dd:MOV RDX,qword ptr [RSI + 0x8]
	000243e1:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
377: (pc->year).value = iVar4;
	000243e5:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
378: (pc->year).digits = (yyvsp->textintval).digits;
	000243e9:MOV RAX,qword ptr [RSI + 0x10]
	000243ed:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
381: if (pc->parse_datetime_debug != false) {
	000242a9:MOVZX EAX,byte ptr [RAX + 0xd9]
	000242b0:TEST AL,AL
	000242b2:JZ 0x000242fb
END_OF_LINE
----------------------------------------------
382: dbg_printf("warning: value %ld has %ld digits. Assuming YYYY/MM/DD\n",
	000242f6:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
383: *(undefined8 *)((long)yyvsp + -0xd8),*(undefined8 *)((long)yyvsp + -0xd0));
	000242c1:MOV RAX,qword ptr [RAX + 0x10]
	000242c5:MOV qword ptr [RBP + -0x518],RAX
	000242cc:MOV RAX,qword ptr [RBP + -0x548]
	000242d3:SUB RAX,0xe0
	000242d9:MOV RAX,qword ptr [RAX + 0x8]
	000242dd:MOV RDX,qword ptr [RBP + -0x518]
	000242e4:MOV RSI,RAX
	000242e7:LEA RAX,[0x34c78]
	000242ee:MOV RDI,RAX
	000242f1:MOV EAX,0x0
	000242f6:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
385: iVar4 = *(intmax_t *)((long)yyvsp + -0xd8);
	00024313:MOV RDX,qword ptr [RSI + 0x8]
END_OF_LINE
----------------------------------------------
386: *(intmax_t *)&pc->year = yyvsp[-4].intval;
	00024302:LEA RSI,[RAX + -0xe0]
	00024309:MOV RCX,qword ptr [RBP + -0x598]
	00024310:MOV RAX,qword ptr [RSI]
	00024313:MOV RDX,qword ptr [RSI + 0x8]
	00024317:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
387: (pc->year).value = iVar4;
	0002431b:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
388: (pc->year).digits = *(ptrdiff_t *)((long)yyvsp + -0xd0);
	0002431f:MOV RAX,qword ptr [RSI + 0x10]
	00024323:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
389: pc->month = *(intmax_t *)((long)yyvsp + -0x68);
	00024332:MOV RDX,qword ptr [RAX + 0x8]
	00024336:MOV RAX,qword ptr [RBP + -0x598]
	0002433d:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
390: pc->day = (yyvsp->textintval).value;
	00024348:MOV RDX,qword ptr [RAX + 0x8]
	0002434c:MOV RAX,qword ptr [RBP + -0x598]
	00024353:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
393: case 0x2b:
	00024401:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
394: pc->day = *(intmax_t *)((long)yyvsp + -0x68);
	00024401:MOV RDX,qword ptr [RAX + 0x8]
	00024405:MOV RAX,qword ptr [RBP + -0x598]
	0002440c:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
395: pc->month = yyvsp[-1].intval;
	00024417:SUB RAX,0x38
	0002441b:MOV RDX,qword ptr [RAX]
	0002441e:MOV RAX,qword ptr [RBP + -0x598]
	00024425:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
396: (pc->year).value = -(yyvsp->textintval).value;
	00024430:MOV RAX,qword ptr [RAX + 0x8]
	00024434:MOV EDX,0x0
	00024439:NEG RAX
	0002443c:JNO 0x00024443
	0002443e:MOV EDX,0x1
	00024443:MOV RCX,RAX
	00024446:MOV RAX,qword ptr [RBP + -0x598]
	0002444d:MOV qword ptr [RAX + 0x28],RCX
END_OF_LINE
----------------------------------------------
397: (pc->year).digits = (yyvsp->textintval).digits;
	00024466:MOV RDX,qword ptr [RAX + 0x10]
	0002446a:MOV RAX,qword ptr [RBP + -0x598]
	00024471:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
399: case 0x2c:
	00024481:SUB RAX,0x70
END_OF_LINE
----------------------------------------------
400: pc->month = yyvsp[-2].intval;
	00024481:SUB RAX,0x70
	00024485:MOV RDX,qword ptr [RAX]
	00024488:MOV RAX,qword ptr [RBP + -0x598]
	0002448f:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
401: pc->day = -*(long *)((long)yyvsp + -0x30);
	0002449e:MOV RAX,qword ptr [RAX + 0x8]
	000244a2:MOV EDX,0x0
	000244a7:NEG RAX
	000244aa:JNO 0x000244b1
	000244ac:MOV EDX,0x1
	000244b1:MOV RCX,RAX
	000244b4:MOV RAX,qword ptr [RBP + -0x598]
	000244bb:MOV qword ptr [RAX + 0x40],RCX
END_OF_LINE
----------------------------------------------
402: (pc->year).value = -(yyvsp->textintval).value;
	000244d4:MOV RAX,qword ptr [RAX + 0x8]
	000244d8:MOV EDX,0x0
	000244dd:NEG RAX
	000244e0:JNO 0x000244e7
	000244e2:MOV EDX,0x1
	000244e7:MOV RCX,RAX
	000244ea:MOV RAX,qword ptr [RBP + -0x598]
	000244f1:MOV qword ptr [RAX + 0x28],RCX
END_OF_LINE
----------------------------------------------
403: (pc->year).digits = (yyvsp->textintval).digits;
	0002450a:MOV RDX,qword ptr [RAX + 0x10]
	0002450e:MOV RAX,qword ptr [RBP + -0x598]
	00024515:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
405: case 0x2d:
	00024525:SUB RAX,0x38
END_OF_LINE
----------------------------------------------
406: pc->month = yyvsp[-1].intval;
	00024525:SUB RAX,0x38
	00024529:MOV RDX,qword ptr [RAX]
	0002452c:MOV RAX,qword ptr [RBP + -0x598]
	00024533:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
407: pc->day = (yyvsp->textintval).value;
	0002453e:MOV RDX,qword ptr [RAX + 0x8]
	00024542:MOV RAX,qword ptr [RBP + -0x598]
	00024549:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
409: case 0x2e:
	00024559:SUB RAX,0xa8
END_OF_LINE
----------------------------------------------
410: pc->month = yyvsp[-3].intval;
	00024559:SUB RAX,0xa8
	0002455f:MOV RDX,qword ptr [RAX]
	00024562:MOV RAX,qword ptr [RBP + -0x598]
	00024569:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
411: pc->day = *(intmax_t *)((long)yyvsp + -0x68);
	00024578:MOV RDX,qword ptr [RAX + 0x8]
	0002457c:MOV RAX,qword ptr [RBP + -0x598]
	00024583:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
412: iVar4 = (yyvsp->textintval).value;
	00024598:MOV RDX,qword ptr [RSI + 0x8]
END_OF_LINE
----------------------------------------------
413: *(intmax_t *)&pc->year = yyvsp->intval;
	00024595:MOV RAX,qword ptr [RSI]
	00024598:MOV RDX,qword ptr [RSI + 0x8]
	0002459c:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
414: (pc->year).value = iVar4;
	000245a0:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
415: (pc->year).digits = (yyvsp->textintval).digits;
	000245a4:MOV RAX,qword ptr [RSI + 0x10]
	000245a8:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
417: case 0x2f:
	000245bc:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
418: pc->day = *(intmax_t *)((long)yyvsp + -0x30);
	000245bc:MOV RDX,qword ptr [RAX + 0x8]
	000245c0:MOV RAX,qword ptr [RBP + -0x598]
	000245c7:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
419: pc->month = yyvsp->intval;
	000245d2:MOV RDX,qword ptr [RAX]
	000245d5:MOV RAX,qword ptr [RBP + -0x598]
	000245dc:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
421: case 0x30:
	000245f0:MOV RDX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
422: pc->day = *(intmax_t *)((long)yyvsp + -0x68);
	000245f0:MOV RDX,qword ptr [RAX + 0x8]
	000245f4:MOV RAX,qword ptr [RBP + -0x598]
	000245fb:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
423: pc->month = yyvsp[-1].intval;
	00024606:SUB RAX,0x38
	0002460a:MOV RDX,qword ptr [RAX]
	0002460d:MOV RAX,qword ptr [RBP + -0x598]
	00024614:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
424: iVar4 = (yyvsp->textintval).value;
	00024629:MOV RDX,qword ptr [RSI + 0x8]
END_OF_LINE
----------------------------------------------
425: *(intmax_t *)&pc->year = yyvsp->intval;
	00024626:MOV RAX,qword ptr [RSI]
	00024629:MOV RDX,qword ptr [RSI + 0x8]
	0002462d:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
426: (pc->year).value = iVar4;
	00024631:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
427: (pc->year).digits = (yyvsp->textintval).digits;
	00024635:MOV RAX,qword ptr [RSI + 0x10]
	00024639:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
429: case 0x32:
	00024649:LEA RSI,[RAX + -0x70]
END_OF_LINE
----------------------------------------------
430: iVar4 = *(intmax_t *)((long)yyvsp + -0x68);
	00024657:MOV RDX,qword ptr [RSI + 0x8]
END_OF_LINE
----------------------------------------------
431: *(intmax_t *)&pc->year = yyvsp[-2].intval;
	00024649:LEA RSI,[RAX + -0x70]
	0002464d:MOV RCX,qword ptr [RBP + -0x598]
	00024654:MOV RAX,qword ptr [RSI]
	00024657:MOV RDX,qword ptr [RSI + 0x8]
	0002465b:MOV qword ptr [RCX + 0x20],RAX
END_OF_LINE
----------------------------------------------
432: (pc->year).value = iVar4;
	0002465f:MOV qword ptr [RCX + 0x28],RDX
END_OF_LINE
----------------------------------------------
433: (pc->year).digits = *(ptrdiff_t *)((long)yyvsp + -0x60);
	00024663:MOV RAX,qword ptr [RSI + 0x10]
	00024667:MOV qword ptr [RCX + 0x30],RAX
END_OF_LINE
----------------------------------------------
434: pc->month = -*(long *)((long)yyvsp + -0x30);
	00024676:MOV RAX,qword ptr [RAX + 0x8]
	0002467a:MOV EDX,0x0
	0002467f:NEG RAX
	00024682:JNO 0x00024689
	00024684:MOV EDX,0x1
	00024689:MOV RCX,RAX
	0002468c:MOV RAX,qword ptr [RBP + -0x598]
	00024693:MOV qword ptr [RAX + 0x38],RCX
END_OF_LINE
----------------------------------------------
435: pc->day = -(yyvsp->textintval).value;
	000246ac:MOV RAX,qword ptr [RAX + 0x8]
	000246b0:MOV EDX,0x0
	000246b5:NEG RAX
	000246b8:JNO 0x000246bf
	000246ba:MOV EDX,0x1
	000246bf:MOV RCX,RAX
	000246c2:MOV RAX,qword ptr [RBP + -0x598]
	000246c9:MOV qword ptr [RAX + 0x40],RCX
END_OF_LINE
----------------------------------------------
437: case 0x33:
	000246e7:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
438: bVar6 = apply_relative_time(pc,yyvsp[-1].rel,(int)yyvsp->intval);
	000246e7:MOV RAX,qword ptr [RAX]
	000246ea:MOV ECX,EAX
	000246ec:MOV RAX,qword ptr [RBP + -0x548]
	000246f3:SUB RAX,0x38
	000246f7:MOV RDX,qword ptr [RBP + -0x598]
	000246fe:SUB RSP,0x8
	00024702:PUSH qword ptr [RAX + 0x30]
	00024705:PUSH qword ptr [RAX + 0x28]
	00024708:PUSH qword ptr [RAX + 0x20]
	0002470b:PUSH qword ptr [RAX + 0x18]
	0002470e:PUSH qword ptr [RAX + 0x10]
	00024711:PUSH qword ptr [RAX + 0x8]
	00024714:PUSH qword ptr [RAX]
	00024716:MOV ESI,ECX
	00024718:MOV RDI,RDX
	0002471b:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
439: goto joined_r0x0002541e;
	0002541e:JZ 0x00025464
END_OF_LINE
----------------------------------------------
440: case 0x34:
	00024758:PUSH qword ptr [RAX]
END_OF_LINE
----------------------------------------------
441: bVar6 = apply_relative_time(pc,yyvsp->rel,1);
	00024758:PUSH qword ptr [RAX]
	0002475a:MOV ESI,0x1
	0002475f:MOV RDI,RDX
	00024762:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
442: goto joined_r0x0002541e;
	0002541e:JZ 0x00025464
END_OF_LINE
----------------------------------------------
443: case 0x35:
	0002479f:PUSH qword ptr [RAX]
END_OF_LINE
----------------------------------------------
444: bVar6 = apply_relative_time(pc,yyvsp->rel,1);
	0002479f:PUSH qword ptr [RAX]
	000247a1:MOV ESI,0x1
	000247a6:MOV RDI,RDX
	000247a9:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
445: goto joined_r0x0002541e;
	0002541e:JZ 0x00025464
END_OF_LINE
----------------------------------------------
446: case 0x36:
	000247cd:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
447: yyval.textintval.value = 0;
	000247cd:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
448: yyval.textintval.digits = 0;
	000247d8:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
449: yyval.rel.hour = 0;
	000247e3:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
450: yyval.rel.minutes = 0;
	000247ee:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
451: yyval.rel.seconds = 0;
	000247f9:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
452: yyval._48_8_ = 0;
	00024804:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
453: yyval.intval = yyvsp[-1].intval;
	00024816:SUB RAX,0x38
	0002481a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
455: case 0x37:
	00024834:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
456: yyval.textintval.value = 0;
	00024834:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
457: yyval.textintval.digits = 0;
	0002483f:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
458: yyval.rel.hour = 0;
	0002484a:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
459: yyval.rel.minutes = 0;
	00024855:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
460: yyval.rel.seconds = 0;
	00024860:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
461: yyval._48_8_ = 0;
	0002486b:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
462: yyval.intval = *(intmax_t *)((long)yyvsp + -0x30);
	00024881:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
464: case 0x38:
	0002489c:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
465: yyval.textintval.value = 0;
	0002489c:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
466: yyval.textintval.digits = 0;
	000248a7:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
467: yyval.rel.hour = 0;
	000248b2:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
468: yyval.rel.minutes = 0;
	000248bd:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
469: yyval.rel.seconds = 0;
	000248c8:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
470: yyval._48_8_ = 0;
	000248d3:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
471: yyval.intval = 1;
	000248de:MOV qword ptr [RBP + -0x4d0],0x1
END_OF_LINE
----------------------------------------------
473: case 0x39:
	000248ee:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
474: yyval.intval = 0;
	000248ee:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
475: yyval.textintval.digits = 0;
	00024904:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
476: yyval.rel.hour = 0;
	0002490f:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
477: yyval.rel.minutes = 0;
	0002491a:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
478: yyval.rel.seconds = 0;
	00024925:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
479: yyval._48_8_ = 0;
	00024930:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
480: yyval.textintval.value = yyvsp[-1].intval;
	00024942:SUB RAX,0x38
	00024946:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
482: case 0x3a:
	00024955:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
483: yyval.intval = 0;
	00024955:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
484: yyval.textintval.digits = 0;
	0002496b:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
485: yyval.rel.hour = 0;
	00024976:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
486: yyval.rel.minutes = 0;
	00024981:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
487: yyval.rel.seconds = 0;
	0002498c:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
488: yyval._48_8_ = 0;
	00024997:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
489: yyval.textintval.value = *(undefined8 *)((long)yyvsp + -0x30);
	000249ad:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
491: case 0x3b:
	000249bd:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
492: yyval.intval = 0;
	000249bd:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
493: yyval.textintval.digits = 0;
	000249d3:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
494: yyval.rel.hour = 0;
	000249de:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
495: yyval.rel.minutes = 0;
	000249e9:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
496: yyval.rel.seconds = 0;
	000249f4:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
497: yyval._48_8_ = 0;
	000249ff:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
498: yyval.textintval.value = 1;
	00024a0a:MOV qword ptr [RBP + -0x4c8],0x1
END_OF_LINE
----------------------------------------------
500: case 0x3c:
	00024a1a:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
501: yyval.intval = 0;
	00024a1a:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
502: yyval.textintval.value = 0;
	00024a25:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
503: yyval.rel.hour = 0;
	00024a3b:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
504: yyval.rel.minutes = 0;
	00024a46:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
505: yyval.rel.seconds = 0;
	00024a51:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
506: yyval._48_8_ = 0;
	00024a5c:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
507: yyval.textintval.digits = yyvsp->intval * yyvsp[-1].intval;
	00024a6e:SUB RAX,0x38
	00024a72:MOV RDX,qword ptr [RAX]
	00024a75:MOV RAX,qword ptr [RBP + -0x548]
	00024a7c:MOV RAX,qword ptr [RAX]
	00024a7f:MOV ECX,0x0
	00024a84:IMUL RAX,RDX
END_OF_LINE
----------------------------------------------
508: if (SEXT816(yyval.textintval.digits) != SEXT816(yyvsp->intval) * SEXT816(yyvsp[-1].intval))
	00024a6e:SUB RAX,0x38
	00024a72:MOV RDX,qword ptr [RAX]
	00024a75:MOV RAX,qword ptr [RBP + -0x548]
	00024a7c:MOV RAX,qword ptr [RAX]
	00024a7f:MOV ECX,0x0
	00024a84:IMUL RAX,RDX
	00024a88:JNO 0x00024a8f
END_OF_LINE
----------------------------------------------
509: goto LAB_00025803;
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
511: case 0x3d:
	00024aa9:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
512: yyval.intval = 0;
	00024aa9:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
513: yyval.textintval.value = 0;
	00024ab4:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
514: yyval.rel.hour = 0;
	00024aca:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
515: yyval.rel.minutes = 0;
	00024ad5:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
516: yyval.rel.seconds = 0;
	00024ae0:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
517: yyval._48_8_ = 0;
	00024aeb:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
518: yyval.textintval.digits = yyvsp->intval * *(long *)((long)yyvsp + -0x30);
	00024b01:MOV RDX,qword ptr [RAX + 0x8]
	00024b05:MOV RAX,qword ptr [RBP + -0x548]
	00024b0c:MOV RAX,qword ptr [RAX]
	00024b0f:MOV ECX,0x0
	00024b14:IMUL RAX,RDX
END_OF_LINE
----------------------------------------------
519: if (SEXT816(yyval.textintval.digits) !=
	00024b14:IMUL RAX,RDX
	00024b18:JNO 0x00024b1f
END_OF_LINE
----------------------------------------------
520: SEXT816(yyvsp->intval) * SEXT816(*(long *)((long)yyvsp + -0x30))) goto LAB_00025803;
	00024b01:MOV RDX,qword ptr [RAX + 0x8]
	00024b05:MOV RAX,qword ptr [RBP + -0x548]
	00024b0c:MOV RAX,qword ptr [RAX]
	00024b0f:MOV ECX,0x0
	00024b14:IMUL RAX,RDX
	00024b18:JNO 0x00024b1f
	00024b1a:MOV ECX,0x1
	00024b1f:MOV qword ptr [RBP + -0x4c0],RAX
	00024b26:MOV RAX,RCX
	00024b29:AND EAX,0x1
	00024b2c:TEST AL,AL
	00024b2e:JZ 0x0002545e
	00024b34:JMP 0x00025803
	00024b39:MOV qword ptr [RBP + -0x4d0],0x0
	00024b44:MOV qword ptr [RBP + -0x4c8],0x0
	00024b4f:MOV qword ptr [RBP + -0x4c0],0x0
	00024b5a:MOV qword ptr [RBP + -0x4b8],0x0
	00024b65:MOV qword ptr [RBP + -0x4b0],0x0
	00024b70:MOV qword ptr [RBP + -0x4a8],0x0
	00024b7b:MOV qword ptr [RBP + -0x4a0],0x0
	00024b86:MOV RAX,qword ptr [RBP + -0x548]
	00024b8d:MOV RAX,qword ptr [RAX]
	00024b90:MOV qword ptr [RBP + -0x4c0],RAX
	00024b97:JMP 0x00025465
	00024b9c:MOV qword ptr [RBP + -0x4d0],0x0
	00024ba7:MOV qword ptr [RBP + -0x4c8],0x0
	00024bb2:MOV qword ptr [RBP + -0x4c0],0x0
	00024bbd:MOV qword ptr [RBP + -0x4b8],0x0
	00024bc8:MOV qword ptr [RBP + -0x4b0],0x0
	00024bd3:MOV qword ptr [RBP + -0x4a8],0x0
	00024bde:MOV qword ptr [RBP + -0x4a0],0x0
	00024be9:MOV RAX,qword ptr [RBP + -0x548]
	00024bf0:SUB RAX,0x38
	00024bf4:MOV RAX,qword ptr [RAX]
	00024bf7:MOV qword ptr [RBP + -0x4b8],RAX
	00024bfe:JMP 0x00025465
	00024c03:MOV qword ptr [RBP + -0x4d0],0x0
	00024c0e:MOV qword ptr [RBP + -0x4c8],0x0
	00024c19:MOV qword ptr [RBP + -0x4c0],0x0
	00024c24:MOV qword ptr [RBP + -0x4b8],0x0
	00024c2f:MOV qword ptr [RBP + -0x4b0],0x0
	00024c3a:MOV qword ptr [RBP + -0x4a8],0x0
	00024c45:MOV qword ptr [RBP + -0x4a0],0x0
	00024c50:MOV RAX,qword ptr [RBP + -0x548]
	00024c57:SUB RAX,0x38
	00024c5b:MOV RAX,qword ptr [RAX + 0x8]
	00024c5f:MOV qword ptr [RBP + -0x4b8],RAX
	00024c66:JMP 0x00025465
	00024c6b:MOV qword ptr [RBP + -0x4d0],0x0
	00024c76:MOV qword ptr [RBP + -0x4c8],0x0
	00024c81:MOV qword ptr [RBP + -0x4c0],0x0
	00024c8c:MOV qword ptr [RBP + -0x4b8],0x0
	00024c97:MOV qword ptr [RBP + -0x4b0],0x0
	00024ca2:MOV qword ptr [RBP + -0x4a8],0x0
	00024cad:MOV qword ptr [RBP + -0x4a0],0x0
	00024cb8:MOV qword ptr [RBP + -0x4b8],0x1
	00024cc3:JMP 0x00025465
	00024cc8:MOV qword ptr [RBP + -0x4d0],0x0
	00024cd3:MOV qword ptr [RBP + -0x4c8],0x0
	00024cde:MOV qword ptr [RBP + -0x4c0],0x0
	00024ce9:MOV qword ptr [RBP + -0x4b8],0x0
	00024cf4:MOV qword ptr [RBP + -0x4b0],0x0
	00024cff:MOV qword ptr [RBP + -0x4a8],0x0
	00024d0a:MOV qword ptr [RBP + -0x4a0],0x0
	00024d15:MOV RAX,qword ptr [RBP + -0x548]
	00024d1c:SUB RAX,0x38
	00024d20:MOV RAX,qword ptr [RAX]
	00024d23:MOV qword ptr [RBP + -0x4b0],RAX
	00024d2a:JMP 0x00025465
	00024d2f:MOV qword ptr [RBP + -0x4d0],0x0
	00024d3a:MOV qword ptr [RBP + -0x4c8],0x0
	00024d45:MOV qword ptr [RBP + -0x4c0],0x0
	00024d50:MOV qword ptr [RBP + -0x4b8],0x0
	00024d5b:MOV qword ptr [RBP + -0x4b0],0x0
	00024d66:MOV qword ptr [RBP + -0x4a8],0x0
	00024d71:MOV qword ptr [RBP + -0x4a0],0x0
	00024d7c:MOV RAX,qword ptr [RBP + -0x548]
	00024d83:SUB RAX,0x38
	00024d87:MOV RAX,qword ptr [RAX + 0x8]
	00024d8b:MOV qword ptr [RBP + -0x4b0],RAX
	00024d92:JMP 0x00025465
	00024d97:MOV qword ptr [RBP + -0x4d0],0x0
	00024da2:MOV qword ptr [RBP + -0x4c8],0x0
	00024dad:MOV qword ptr [RBP + -0x4c0],0x0
	00024db8:MOV qword ptr [RBP + -0x4b8],0x0
	00024dc3:MOV qword ptr [RBP + -0x4b0],0x0
	00024dce:MOV qword ptr [RBP + -0x4a8],0x0
	00024dd9:MOV qword ptr [RBP + -0x4a0],0x0
	00024de4:MOV qword ptr [RBP + -0x4b0],0x1
	00024def:JMP 0x00025465
	00024df4:MOV qword ptr [RBP + -0x4d0],0x0
	00024dff:MOV qword ptr [RBP + -0x4c8],0x0
	00024e0a:MOV qword ptr [RBP + -0x4c0],0x0
	00024e15:MOV qword ptr [RBP + -0x4b8],0x0
	00024e20:MOV qword ptr [RBP + -0x4b0],0x0
	00024e2b:MOV qword ptr [RBP + -0x4a8],0x0
	00024e36:MOV qword ptr [RBP + -0x4a0],0x0
	00024e41:MOV RAX,qword ptr [RBP + -0x548]
	00024e48:SUB RAX,0x38
	00024e4c:MOV RAX,qword ptr [RAX]
	00024e4f:MOV qword ptr [RBP + -0x4a8],RAX
	00024e56:JMP 0x00025465
	00024e5b:MOV qword ptr [RBP + -0x4d0],0x0
	00024e66:MOV qword ptr [RBP + -0x4c8],0x0
	00024e71:MOV qword ptr [RBP + -0x4c0],0x0
	00024e7c:MOV qword ptr [RBP + -0x4b8],0x0
	00024e87:MOV qword ptr [RBP + -0x4b0],0x0
	00024e92:MOV qword ptr [RBP + -0x4a8],0x0
	00024e9d:MOV qword ptr [RBP + -0x4a0],0x0
	00024ea8:MOV RAX,qword ptr [RBP + -0x548]
	00024eaf:SUB RAX,0x38
	00024eb3:MOV RAX,qword ptr [RAX + 0x8]
	00024eb7:MOV qword ptr [RBP + -0x4a8],RAX
	00024ebe:JMP 0x00025465
	00024ec3:MOV qword ptr [RBP + -0x4d0],0x0
	00024ece:MOV qword ptr [RBP + -0x4c8],0x0
	00024ed9:MOV qword ptr [RBP + -0x4c0],0x0
	00024ee4:MOV qword ptr [RBP + -0x4b8],0x0
	00024eef:MOV qword ptr [RBP + -0x4b0],0x0
	00024efa:MOV qword ptr [RBP + -0x4a8],0x0
	00024f05:MOV qword ptr [RBP + -0x4a0],0x0
	00024f10:MOV RAX,qword ptr [RBP + -0x548]
	00024f17:SUB RAX,0x38
	00024f1b:MOV RAX,qword ptr [RAX]
	00024f1e:MOV qword ptr [RBP + -0x4a8],RAX
	00024f25:MOV RAX,qword ptr [RBP + -0x548]
	00024f2c:SUB RAX,0x38
	00024f30:MOV RAX,qword ptr [RAX + 0x8]
	00024f34:MOV dword ptr [RBP + -0x4a0],EAX
	00024f3a:JMP 0x00025465
	00024f3f:MOV qword ptr [RBP + -0x4d0],0x0
	00024f4a:MOV qword ptr [RBP + -0x4c8],0x0
	00024f55:MOV qword ptr [RBP + -0x4c0],0x0
	00024f60:MOV qword ptr [RBP + -0x4b8],0x0
	00024f6b:MOV qword ptr [RBP + -0x4b0],0x0
	00024f76:MOV qword ptr [RBP + -0x4a8],0x0
	00024f81:MOV qword ptr [RBP + -0x4a0],0x0
	00024f8c:MOV RAX,qword ptr [RBP + -0x548]
	00024f93:SUB RAX,0x38
	00024f97:MOV RAX,qword ptr [RAX]
	00024f9a:MOV qword ptr [RBP + -0x4a8],RAX
	00024fa1:MOV RAX,qword ptr [RBP + -0x548]
	00024fa8:SUB RAX,0x38
	00024fac:MOV RAX,qword ptr [RAX + 0x8]
	00024fb0:MOV dword ptr [RBP + -0x4a0],EAX
	00024fb6:JMP 0x00025465
	00024fbb:MOV qword ptr [RBP + -0x4d0],0x0
	00024fc6:MOV qword ptr [RBP + -0x4c8],0x0
	00024fd1:MOV qword ptr [RBP + -0x4c0],0x0
	00024fdc:MOV qword ptr [RBP + -0x4b8],0x0
	00024fe7:MOV qword ptr [RBP + -0x4b0],0x0
	00024ff2:MOV qword ptr [RBP + -0x4a8],0x0
	00024ffd:MOV qword ptr [RBP + -0x4a0],0x0
	00025008:MOV qword ptr [RBP + -0x4a8],0x1
	00025013:JMP 0x00025465
	00025018:MOV qword ptr [RBP + -0x4d0],0x0
	00025023:MOV qword ptr [RBP + -0x4c8],0x0
	0002502e:MOV qword ptr [RBP + -0x4c0],0x0
	00025039:MOV qword ptr [RBP + -0x4b8],0x0
	00025044:MOV qword ptr [RBP + -0x4b0],0x0
	0002504f:MOV qword ptr [RBP + -0x4a8],0x0
	0002505a:MOV qword ptr [RBP + -0x4a0],0x0
	00025065:MOV RAX,qword ptr [RBP + -0x548]
	0002506c:SUB RAX,0x38
	00025070:MOV RAX,qword ptr [RAX + 0x8]
	00025074:MOV qword ptr [RBP + -0x4d0],RAX
	0002507b:JMP 0x00025465
	00025080:MOV qword ptr [RBP + -0x4d0],0x0
	0002508b:MOV qword ptr [RBP + -0x4c8],0x0
	00025096:MOV qword ptr [RBP + -0x4c0],0x0
	000250a1:MOV qword ptr [RBP + -0x4b8],0x0
	000250ac:MOV qword ptr [RBP + -0x4b0],0x0
	000250b7:MOV qword ptr [RBP + -0x4a8],0x0
	000250c2:MOV qword ptr [RBP + -0x4a0],0x0
	000250cd:MOV RAX,qword ptr [RBP + -0x548]
	000250d4:SUB RAX,0x38
	000250d8:MOV RAX,qword ptr [RAX + 0x8]
	000250dc:MOV qword ptr [RBP + -0x4c8],RAX
	000250e3:JMP 0x00025465
	000250e8:MOV qword ptr [RBP + -0x4d0],0x0
	000250f3:MOV qword ptr [RBP + -0x4c8],0x0
	000250fe:MOV qword ptr [RBP + -0x4c0],0x0
	00025109:MOV qword ptr [RBP + -0x4b8],0x0
	00025114:MOV qword ptr [RBP + -0x4b0],0x0
	0002511f:MOV qword ptr [RBP + -0x4a8],0x0
	0002512a:MOV qword ptr [RBP + -0x4a0],0x0
	00025135:MOV RAX,qword ptr [RBP + -0x548]
	0002513c:SUB RAX,0x38
	00025140:MOV RDX,qword ptr [RAX + 0x8]
	00025144:MOV RAX,qword ptr [RBP + -0x548]
	0002514b:MOV RAX,qword ptr [RAX]
	0002514e:MOV ECX,0x0
	00025153:IMUL RAX,RDX
	00025157:JNO 0x0002515e
	00025159:MOV ECX,0x1
	0002515e:MOV qword ptr [RBP + -0x4c0],RAX
	00025165:MOV RAX,RCX
	00025168:AND EAX,0x1
	0002516b:TEST AL,AL
	0002516d:JZ 0x00025461
	00025173:JMP 0x00025803
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
	00025183:MOV qword ptr [RBP + -0x4c8],0x0
	0002518e:MOV qword ptr [RBP + -0x4c0],0x0
	00025199:MOV qword ptr [RBP + -0x4b8],0x0
	000251a4:MOV qword ptr [RBP + -0x4b0],0x0
	000251af:MOV qword ptr [RBP + -0x4a8],0x0
	000251ba:MOV qword ptr [RBP + -0x4a0],0x0
	000251c5:MOV RAX,qword ptr [RBP + -0x548]
	000251cc:SUB RAX,0x38
	000251d0:MOV RAX,qword ptr [RAX + 0x8]
	000251d4:MOV qword ptr [RBP + -0x4b8],RAX
	000251db:JMP 0x00025465
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
	000251eb:MOV qword ptr [RBP + -0x4c8],0x0
	000251f6:MOV qword ptr [RBP + -0x4c0],0x0
	00025201:MOV qword ptr [RBP + -0x4b8],0x0
	0002520c:MOV qword ptr [RBP + -0x4b0],0x0
	00025217:MOV qword ptr [RBP + -0x4a8],0x0
	00025222:MOV qword ptr [RBP + -0x4a0],0x0
	0002522d:MOV RAX,qword ptr [RBP + -0x548]
	00025234:SUB RAX,0x38
	00025238:MOV RAX,qword ptr [RAX + 0x8]
	0002523c:MOV qword ptr [RBP + -0x4b0],RAX
	00025243:JMP 0x00025465
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
	00025253:MOV qword ptr [RBP + -0x4c8],0x0
	0002525e:MOV qword ptr [RBP + -0x4c0],0x0
	00025269:MOV qword ptr [RBP + -0x4b8],0x0
	00025274:MOV qword ptr [RBP + -0x4b0],0x0
	0002527f:MOV qword ptr [RBP + -0x4a8],0x0
	0002528a:MOV qword ptr [RBP + -0x4a0],0x0
	00025295:MOV RAX,qword ptr [RBP + -0x548]
	0002529c:SUB RAX,0x38
	000252a0:MOV RAX,qword ptr [RAX + 0x8]
	000252a4:MOV qword ptr [RBP + -0x4a8],RAX
	000252ab:JMP 0x00025465
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
	000252bb:MOV qword ptr [RBP + -0x4c8],0x0
	000252c6:MOV qword ptr [RBP + -0x4c0],0x0
	000252d1:MOV qword ptr [RBP + -0x4b8],0x0
	000252dc:MOV qword ptr [RBP + -0x4b0],0x0
	000252e7:MOV qword ptr [RBP + -0x4a8],0x0
	000252f2:MOV qword ptr [RBP + -0x4a0],0x0
	000252fd:MOV RAX,qword ptr [RBP + -0x548]
	00025304:MOV RAX,qword ptr [RAX]
	00025307:MOV qword ptr [RBP + -0x4c0],RAX
	0002530e:JMP 0x00025465
	00025313:MOV RAX,qword ptr [RBP + -0x548]
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
	0002531e:MOV RDI,RAX
	00025321:CALL 0x000222c3
	00025326:TEST AL,AL
	00025328:JNZ 0x000257fc
	0002532e:MOV RAX,qword ptr [RBP + -0x548]
	00025335:MOV RAX,qword ptr [RAX + 0x8]
	00025339:MOV qword ptr [RBP + -0x4d0],RAX
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
	0002534b:JMP 0x00025465
	00025350:MOV RAX,qword ptr [RBP + -0x548]
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
	00025363:TEST AL,AL
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
522: case 0x3e:
	00024b39:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
523: yyval.intval = 0;
	00024b39:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
524: yyval.textintval.value = 0;
	00024b44:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
525: yyval.rel.hour = 0;
	00024b5a:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
526: yyval.rel.minutes = 0;
	00024b65:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
527: yyval.rel.seconds = 0;
	00024b70:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
528: yyval._48_8_ = 0;
	00024b7b:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
529: yyval.textintval.digits = yyvsp->intval;
	00024b8d:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
531: case 0x3f:
	00024b9c:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
532: yyval.intval = 0;
	00024b9c:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
533: yyval.textintval.value = 0;
	00024ba7:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
534: yyval.textintval.digits = 0;
	00024bb2:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
535: yyval.rel.minutes = 0;
	00024bc8:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
536: yyval.rel.seconds = 0;
	00024bd3:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
537: yyval._48_8_ = 0;
	00024bde:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
538: yyval.rel.hour = yyvsp[-1].intval;
	00024bf0:SUB RAX,0x38
	00024bf4:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
540: case 0x40:
	00024c03:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
541: yyval.intval = 0;
	00024c03:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
542: yyval.textintval.value = 0;
	00024c0e:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
543: yyval.textintval.digits = 0;
	00024c19:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
544: yyval.rel.minutes = 0;
	00024c2f:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
545: yyval.rel.seconds = 0;
	00024c3a:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
546: yyval._48_8_ = 0;
	00024c45:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
547: yyval.rel.hour = *(intmax_t *)((long)yyvsp + -0x30);
	00024c5b:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
549: case 0x41:
	00024c6b:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
550: yyval.intval = 0;
	00024c6b:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
551: yyval.textintval.value = 0;
	00024c76:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
552: yyval.textintval.digits = 0;
	00024c81:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
553: yyval.rel.minutes = 0;
	00024c97:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
554: yyval.rel.seconds = 0;
	00024ca2:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
555: yyval._48_8_ = 0;
	00024cad:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
556: yyval.rel.hour = 1;
	00024cb8:MOV qword ptr [RBP + -0x4b8],0x1
END_OF_LINE
----------------------------------------------
558: case 0x42:
	00024cc8:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
559: yyval.intval = 0;
	00024cc8:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
560: yyval.textintval.value = 0;
	00024cd3:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
561: yyval.textintval.digits = 0;
	00024cde:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
562: yyval.rel.hour = 0;
	00024ce9:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
563: yyval.rel.seconds = 0;
	00024cff:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
564: yyval._48_8_ = 0;
	00024d0a:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
565: yyval.rel.minutes = yyvsp[-1].intval;
	00024d1c:SUB RAX,0x38
	00024d20:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
567: case 0x43:
	00024d2f:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
568: yyval.intval = 0;
	00024d2f:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
569: yyval.textintval.value = 0;
	00024d3a:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
570: yyval.textintval.digits = 0;
	00024d45:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
571: yyval.rel.hour = 0;
	00024d50:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
572: yyval.rel.seconds = 0;
	00024d66:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
573: yyval._48_8_ = 0;
	00024d71:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
574: yyval.rel.minutes = *(intmax_t *)((long)yyvsp + -0x30);
	00024d87:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
576: case 0x44:
	00024d97:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
577: yyval.intval = 0;
	00024d97:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
578: yyval.textintval.value = 0;
	00024da2:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
579: yyval.textintval.digits = 0;
	00024dad:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
580: yyval.rel.hour = 0;
	00024db8:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
581: yyval.rel.seconds = 0;
	00024dce:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
582: yyval._48_8_ = 0;
	00024dd9:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
583: yyval.rel.minutes = 1;
	00024de4:MOV qword ptr [RBP + -0x4b0],0x1
END_OF_LINE
----------------------------------------------
585: case 0x45:
	00024df4:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
586: yyval.intval = 0;
	00024df4:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
587: yyval.textintval.value = 0;
	00024dff:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
588: yyval.textintval.digits = 0;
	00024e0a:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
589: yyval.rel.hour = 0;
	00024e15:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
590: yyval.rel.minutes = 0;
	00024e20:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
591: yyval._48_8_ = 0;
	00024e36:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
592: yyval.rel.seconds = yyvsp[-1].intval;
	00024e48:SUB RAX,0x38
	00024e4c:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
594: case 0x46:
	00024e5b:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
595: yyval.intval = 0;
	00024e5b:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
596: yyval.textintval.value = 0;
	00024e66:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
597: yyval.textintval.digits = 0;
	00024e71:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
598: yyval.rel.hour = 0;
	00024e7c:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
599: yyval.rel.minutes = 0;
	00024e87:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
600: yyval._48_8_ = 0;
	00024e9d:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
601: yyval.rel.seconds = *(intmax_t *)((long)yyvsp + -0x30);
	00024eb3:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
603: case 0x47:
	00024ec3:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
604: yyval.intval = 0;
	00024ec3:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
605: yyval.textintval.value = 0;
	00024ece:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
606: yyval.textintval.digits = 0;
	00024ed9:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
607: yyval.rel.hour = 0;
	00024ee4:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
608: yyval.rel.minutes = 0;
	00024eef:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
609: yyval.rel.seconds = yyvsp[-1].intval;
	00024f17:SUB RAX,0x38
	00024f1b:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
610: yyval._48_8_ = *(ulong *)((long)yyvsp + -0x30) & 0xffffffff;
	00024f30:MOV RAX,qword ptr [RAX + 0x8]
	00024f34:MOV dword ptr [RBP + -0x4a0],EAX
END_OF_LINE
----------------------------------------------
612: case 0x48:
	00024f3f:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
613: yyval.intval = 0;
	00024f3f:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
614: yyval.textintval.value = 0;
	00024f4a:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
615: yyval.textintval.digits = 0;
	00024f55:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
616: yyval.rel.hour = 0;
	00024f60:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
617: yyval.rel.minutes = 0;
	00024f6b:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
618: yyval.rel.seconds = yyvsp[-1].intval;
	00024f93:SUB RAX,0x38
	00024f97:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
619: yyval._48_8_ = *(ulong *)((long)yyvsp + -0x30) & 0xffffffff;
	00024fac:MOV RAX,qword ptr [RAX + 0x8]
	00024fb0:MOV dword ptr [RBP + -0x4a0],EAX
END_OF_LINE
----------------------------------------------
621: case 0x49:
	00024fbb:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
622: yyval.intval = 0;
	00024fbb:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
623: yyval.textintval.value = 0;
	00024fc6:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
624: yyval.textintval.digits = 0;
	00024fd1:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
625: yyval.rel.hour = 0;
	00024fdc:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
626: yyval.rel.minutes = 0;
	00024fe7:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
627: yyval._48_8_ = 0;
	00024ffd:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
628: yyval.rel.seconds = 1;
	00025008:MOV qword ptr [RBP + -0x4a8],0x1
END_OF_LINE
----------------------------------------------
630: case 0x4b:
	00025023:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
631: yyval.textintval.value = 0;
	00025023:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
632: yyval.textintval.digits = 0;
	0002502e:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
633: yyval.rel.hour = 0;
	00025039:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
634: yyval.rel.minutes = 0;
	00025044:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
635: yyval.rel.seconds = 0;
	0002504f:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
636: yyval._48_8_ = 0;
	0002505a:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
637: yyval.intval = *(intmax_t *)((long)yyvsp + -0x30);
	00025070:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
639: case 0x4c:
	00025080:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
640: yyval.intval = 0;
	00025080:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
641: yyval.textintval.digits = 0;
	00025096:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
642: yyval.rel.hour = 0;
	000250a1:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
643: yyval.rel.minutes = 0;
	000250ac:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
644: yyval.rel.seconds = 0;
	000250b7:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
645: yyval._48_8_ = 0;
	000250c2:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
646: yyval.textintval.value = *(undefined8 *)((long)yyvsp + -0x30);
	000250d8:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
648: case 0x4d:
	000250e8:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
649: yyval.intval = 0;
	000250e8:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
650: yyval.textintval.value = 0;
	000250f3:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
651: yyval.rel.hour = 0;
	00025109:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
652: yyval.rel.minutes = 0;
	00025114:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
653: yyval.rel.seconds = 0;
	0002511f:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
654: yyval._48_8_ = 0;
	0002512a:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
655: yyval.textintval.digits = yyvsp->intval * *(long *)((long)yyvsp + -0x30);
	00025140:MOV RDX,qword ptr [RAX + 0x8]
	00025144:MOV RAX,qword ptr [RBP + -0x548]
	0002514b:MOV RAX,qword ptr [RAX]
	0002514e:MOV ECX,0x0
	00025153:IMUL RAX,RDX
END_OF_LINE
----------------------------------------------
656: if (SEXT816(yyval.textintval.digits) !=
	00025153:IMUL RAX,RDX
	00025157:JNO 0x0002515e
END_OF_LINE
----------------------------------------------
657: SEXT816(yyvsp->intval) * SEXT816(*(long *)((long)yyvsp + -0x30))) goto LAB_00025803;
	00025140:MOV RDX,qword ptr [RAX + 0x8]
	00025144:MOV RAX,qword ptr [RBP + -0x548]
	0002514b:MOV RAX,qword ptr [RAX]
	0002514e:MOV ECX,0x0
	00025153:IMUL RAX,RDX
	00025157:JNO 0x0002515e
	00025159:MOV ECX,0x1
	0002515e:MOV qword ptr [RBP + -0x4c0],RAX
	00025165:MOV RAX,RCX
	00025168:AND EAX,0x1
	0002516b:TEST AL,AL
	0002516d:JZ 0x00025461
	00025173:JMP 0x00025803
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
	00025183:MOV qword ptr [RBP + -0x4c8],0x0
	0002518e:MOV qword ptr [RBP + -0x4c0],0x0
	00025199:MOV qword ptr [RBP + -0x4b8],0x0
	000251a4:MOV qword ptr [RBP + -0x4b0],0x0
	000251af:MOV qword ptr [RBP + -0x4a8],0x0
	000251ba:MOV qword ptr [RBP + -0x4a0],0x0
	000251c5:MOV RAX,qword ptr [RBP + -0x548]
	000251cc:SUB RAX,0x38
	000251d0:MOV RAX,qword ptr [RAX + 0x8]
	000251d4:MOV qword ptr [RBP + -0x4b8],RAX
	000251db:JMP 0x00025465
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
	000251eb:MOV qword ptr [RBP + -0x4c8],0x0
	000251f6:MOV qword ptr [RBP + -0x4c0],0x0
	00025201:MOV qword ptr [RBP + -0x4b8],0x0
	0002520c:MOV qword ptr [RBP + -0x4b0],0x0
	00025217:MOV qword ptr [RBP + -0x4a8],0x0
	00025222:MOV qword ptr [RBP + -0x4a0],0x0
	0002522d:MOV RAX,qword ptr [RBP + -0x548]
	00025234:SUB RAX,0x38
	00025238:MOV RAX,qword ptr [RAX + 0x8]
	0002523c:MOV qword ptr [RBP + -0x4b0],RAX
	00025243:JMP 0x00025465
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
	00025253:MOV qword ptr [RBP + -0x4c8],0x0
	0002525e:MOV qword ptr [RBP + -0x4c0],0x0
	00025269:MOV qword ptr [RBP + -0x4b8],0x0
	00025274:MOV qword ptr [RBP + -0x4b0],0x0
	0002527f:MOV qword ptr [RBP + -0x4a8],0x0
	0002528a:MOV qword ptr [RBP + -0x4a0],0x0
	00025295:MOV RAX,qword ptr [RBP + -0x548]
	0002529c:SUB RAX,0x38
	000252a0:MOV RAX,qword ptr [RAX + 0x8]
	000252a4:MOV qword ptr [RBP + -0x4a8],RAX
	000252ab:JMP 0x00025465
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
	000252bb:MOV qword ptr [RBP + -0x4c8],0x0
	000252c6:MOV qword ptr [RBP + -0x4c0],0x0
	000252d1:MOV qword ptr [RBP + -0x4b8],0x0
	000252dc:MOV qword ptr [RBP + -0x4b0],0x0
	000252e7:MOV qword ptr [RBP + -0x4a8],0x0
	000252f2:MOV qword ptr [RBP + -0x4a0],0x0
	000252fd:MOV RAX,qword ptr [RBP + -0x548]
	00025304:MOV RAX,qword ptr [RAX]
	00025307:MOV qword ptr [RBP + -0x4c0],RAX
	0002530e:JMP 0x00025465
	00025313:MOV RAX,qword ptr [RBP + -0x548]
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
	0002531e:MOV RDI,RAX
	00025321:CALL 0x000222c3
	00025326:TEST AL,AL
	00025328:JNZ 0x000257fc
	0002532e:MOV RAX,qword ptr [RBP + -0x548]
	00025335:MOV RAX,qword ptr [RAX + 0x8]
	00025339:MOV qword ptr [RBP + -0x4d0],RAX
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
	0002534b:JMP 0x00025465
	00025350:MOV RAX,qword ptr [RBP + -0x548]
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
	00025363:TEST AL,AL
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
659: case 0x4e:
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
660: yyval.intval = 0;
	00025178:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
661: yyval.textintval.value = 0;
	00025183:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
662: yyval.textintval.digits = 0;
	0002518e:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
663: yyval.rel.minutes = 0;
	000251a4:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
664: yyval.rel.seconds = 0;
	000251af:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
665: yyval._48_8_ = 0;
	000251ba:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
666: yyval.rel.hour = *(intmax_t *)((long)yyvsp + -0x30);
	000251d0:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
668: case 0x4f:
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
669: yyval.intval = 0;
	000251e0:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
670: yyval.textintval.value = 0;
	000251eb:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
671: yyval.textintval.digits = 0;
	000251f6:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
672: yyval.rel.hour = 0;
	00025201:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
673: yyval.rel.seconds = 0;
	00025217:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
674: yyval._48_8_ = 0;
	00025222:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
675: yyval.rel.minutes = *(intmax_t *)((long)yyvsp + -0x30);
	00025238:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
677: case 0x50:
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
678: yyval.intval = 0;
	00025248:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
679: yyval.textintval.value = 0;
	00025253:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
680: yyval.textintval.digits = 0;
	0002525e:MOV qword ptr [RBP + -0x4c0],0x0
END_OF_LINE
----------------------------------------------
681: yyval.rel.hour = 0;
	00025269:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
682: yyval.rel.minutes = 0;
	00025274:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
683: yyval._48_8_ = 0;
	0002528a:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
684: yyval.rel.seconds = *(intmax_t *)((long)yyvsp + -0x30);
	000252a0:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
686: case 0x51:
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
687: yyval.intval = 0;
	000252b0:MOV qword ptr [RBP + -0x4d0],0x0
END_OF_LINE
----------------------------------------------
688: yyval.textintval.value = 0;
	000252bb:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
689: yyval.rel.hour = 0;
	000252d1:MOV qword ptr [RBP + -0x4b8],0x0
END_OF_LINE
----------------------------------------------
690: yyval.rel.minutes = 0;
	000252dc:MOV qword ptr [RBP + -0x4b0],0x0
END_OF_LINE
----------------------------------------------
691: yyval.rel.seconds = 0;
	000252e7:MOV qword ptr [RBP + -0x4a8],0x0
END_OF_LINE
----------------------------------------------
692: yyval._48_8_ = 0;
	000252f2:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
693: yyval.textintval.digits = yyvsp->intval;
	00025304:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
695: case 0x55:
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
696: _Var5 = time_overflow((yyvsp->textintval).value);
	0002531a:MOV RAX,qword ptr [RAX + 0x8]
	0002531e:MOV RDI,RAX
	00025321:CALL 0x000222c3
END_OF_LINE
----------------------------------------------
697: if (_Var5) goto LAB_00025803;
	00025328:JNZ 0x000257fc
	0002532e:MOV RAX,qword ptr [RBP + -0x548]
	00025335:MOV RAX,qword ptr [RAX + 0x8]
	00025339:MOV qword ptr [RBP + -0x4d0],RAX
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
	0002534b:JMP 0x00025465
	00025350:MOV RAX,qword ptr [RBP + -0x548]
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
	00025363:TEST AL,AL
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
698: yyval.intval = (yyvsp->textintval).value;
	00025335:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
699: yyval.textintval.value = 0;
	00025340:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
701: case 0x57:
	00025357:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
702: _Var5 = time_overflow((yyvsp->textintval).value);
	00025357:MOV RAX,qword ptr [RAX + 0x8]
	0002535b:MOV RDI,RAX
	0002535e:CALL 0x000222c3
END_OF_LINE
----------------------------------------------
703: if (_Var5) goto LAB_00025803;
	00025365:JNZ 0x000257ff
	0002536b:MOV RAX,qword ptr [RBP + -0x548]
	00025372:MOV RAX,qword ptr [RAX + 0x8]
	00025376:MOV qword ptr [RBP + -0x4d0],RAX
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
	00025388:JMP 0x00025465
	0002538d:MOV RDX,qword ptr [RBP + -0x598]
	00025394:SUB RSP,0x8
	00025398:MOV RAX,qword ptr [RBP + -0x548]
	0002539f:PUSH qword ptr [RAX + 0x10]
	000253a2:PUSH qword ptr [RAX + 0x8]
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
	000253af:ADD RSP,0x20
	000253b3:JMP 0x00025465
	000253b8:MOV RAX,qword ptr [RBP + -0x548]
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
	000253de:ADD RSP,0x20
	000253e2:MOV RDX,qword ptr [RBP + -0x598]
	000253e9:SUB RSP,0x8
	000253ed:MOV RAX,qword ptr [RBP + -0x548]
	000253f4:PUSH qword ptr [RAX + 0x30]
	000253f7:PUSH qword ptr [RAX + 0x28]
	000253fa:PUSH qword ptr [RAX + 0x20]
	000253fd:PUSH qword ptr [RAX + 0x18]
	00025400:PUSH qword ptr [RAX + 0x10]
	00025403:PUSH qword ptr [RAX + 0x8]
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
	00025415:ADD RSP,0x40
	00025419:XOR EAX,0x1
	0002541c:TEST AL,AL
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
704: yyval.intval = (yyvsp->textintval).value;
	00025372:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
705: yyval.textintval.value = 0;
	0002537d:MOV qword ptr [RBP + -0x4c8],0x0
END_OF_LINE
----------------------------------------------
707: case 0x58:
	000253a5:PUSH qword ptr [RAX]
END_OF_LINE
----------------------------------------------
708: digits_to_date_time(pc,yyvsp->textintval);
	000253a5:PUSH qword ptr [RAX]
	000253a7:MOV RDI,RDX
	000253aa:CALL 0x000223e8
END_OF_LINE
----------------------------------------------
710: case 0x59:
	000253bf:SUB RAX,0x38
END_OF_LINE
----------------------------------------------
711: digits_to_date_time(pc,yyvsp[-1].textintval);
	000253bf:SUB RAX,0x38
	000253c3:MOV RDX,qword ptr [RBP + -0x598]
	000253ca:SUB RSP,0x8
	000253ce:PUSH qword ptr [RAX + 0x10]
	000253d1:PUSH qword ptr [RAX + 0x8]
	000253d4:PUSH qword ptr [RAX]
	000253d6:MOV RDI,RDX
	000253d9:CALL 0x000223e8
END_OF_LINE
----------------------------------------------
712: bVar6 = apply_relative_time(pc,yyvsp->rel,1);
	00025406:PUSH qword ptr [RAX]
	00025408:MOV ESI,0x1
	0002540d:MOV RDI,RDX
	00025410:CALL 0x0002267a
END_OF_LINE
----------------------------------------------
713: joined_r0x0002541e:
	0002541e:JZ 0x00025464
END_OF_LINE
----------------------------------------------
714: if (!bVar6) goto LAB_00025803;
	0002541e:JZ 0x00025464
	00025420:JMP 0x00025803
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
	00025430:JMP 0x00025465
	00025432:MOV RAX,qword ptr [RBP + -0x548]
	00025439:MOV RAX,qword ptr [RAX + 0x8]
	0002543d:MOV qword ptr [RBP + -0x4d0],RAX
	00025444:JMP 0x00025465
	00025446:NOP
	00025447:JMP 0x00025465
	00025449:NOP
	0002544a:JMP 0x00025465
	0002544c:NOP
	0002544d:JMP 0x00025465
	0002544f:NOP
	00025450:JMP 0x00025465
	00025452:NOP
	00025453:JMP 0x00025465
	00025455:NOP
	00025456:JMP 0x00025465
	00025458:NOP
	00025459:JMP 0x00025465
	0002545b:NOP
	0002545c:JMP 0x00025465
	0002545e:NOP
	0002545f:JMP 0x00025465
	00025461:NOP
	00025462:JMP 0x00025465
	00025464:NOP
	00025465:MOV EAX,dword ptr [RBP + -0x574]
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
	000255b3:NOP
	000255b4:CMP dword ptr [RBP + -0x590],-0x2
	000255bb:JZ 0x000255f1
	000255bd:CMP dword ptr [RBP + -0x590],0x0
	000255c4:JS 0x000255ea
	000255c6:CMP dword ptr [RBP + -0x590],0x115
	000255d0:JG 0x000255ea
	000255d2:MOV EAX,dword ptr [RBP + -0x590]
	000255d8:CDQE
	000255da:LEA RDX,[0x34780]
	000255e1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255e5:MOVSX EAX,AL
	000255e8:JMP 0x000255f6
	000255ea:MOV EAX,0x2
	000255ef:JMP 0x000255f6
	000255f1:MOV EAX,0xfffffffe
	000255f6:MOV dword ptr [RBP + -0x578],EAX
	000255fc:CMP dword ptr [RBP + -0x584],0x0
	00025603:JNZ 0x00025625
	00025605:ADD dword ptr [RBP + -0x58c],0x1
	0002560c:MOV RAX,qword ptr [RBP + -0x598]
	00025613:LEA RDX,[0x34cf2]
	0002561a:MOV RSI,RDX
	0002561d:MOV RDI,RAX
	00025620:CALL 0x0002664e
	00025625:CMP dword ptr [RBP + -0x584],0x3
	0002562c:JNZ 0x00025674
	0002562e:CMP dword ptr [RBP + -0x590],0x0
	00025635:JG 0x00025645
	00025637:CMP dword ptr [RBP + -0x590],0x0
	0002563e:JNZ 0x00025674
	00025640:JMP 0x00025803
	00025645:MOV RCX,qword ptr [RBP + -0x598]
	0002564c:LEA RDX,[RBP + -0x510]
	00025653:MOV EAX,dword ptr [RBP + -0x578]
	00025659:MOV ESI,EAX
	0002565b:LEA RAX,[0x34cff]
	00025662:MOV RDI,RAX
	00025665:CALL 0x0002348b
	0002566a:MOV dword ptr [RBP + -0x590],0xfffffffe
	00025674:NOP
	00025675:MOV dword ptr [RBP + -0x584],0x3
	0002567f:MOV EAX,dword ptr [RBP + -0x588]
	00025685:CDQE
	00025687:LEA RDX,[0x348a0]
	0002568e:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025692:MOVSX EAX,AL
	00025695:MOV dword ptr [RBP + -0x580],EAX
	0002569b:CMP dword ptr [RBP + -0x580],-0x5d
	000256a2:JZ 0x000256f9
	000256a4:ADD dword ptr [RBP + -0x580],0x1
	000256ab:CMP dword ptr [RBP + -0x580],0x0
	000256b2:JS 0x000256f9
	000256b4:CMP dword ptr [RBP + -0x580],0x70
	000256bb:JG 0x000256f9
	000256bd:MOV EAX,dword ptr [RBP + -0x580]
	000256c3:CDQE
	000256c5:LEA RDX,[0x34a60]
	000256cc:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256d0:CMP AL,0x1
	000256d2:JNZ 0x000256f9
	000256d4:MOV EAX,dword ptr [RBP + -0x580]
	000256da:CDQE
	000256dc:LEA RDX,[0x349e0]
	000256e3:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000256e7:MOVSX EAX,AL
	000256ea:MOV dword ptr [RBP + -0x580],EAX
	000256f0:CMP dword ptr [RBP + -0x580],0x0
	000256f7:JG 0x0002576a
	000256f9:MOV RAX,qword ptr [RBP + -0x558]
	00025700:CMP RAX,qword ptr [RBP + -0x560]
	00025707:JZ 0x00025802
	0002570d:MOV EAX,dword ptr [RBP + -0x588]
	00025713:CDQE
	00025715:LEA RDX,[0x34ae0]
	0002571c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025720:MOVSX EAX,AL
	00025723:MOV RCX,qword ptr [RBP + -0x598]
	0002572a:MOV RDX,qword ptr [RBP + -0x548]
	00025731:MOV ESI,EAX
	00025733:LEA RAX,[0x34d11]
	0002573a:MOV RDI,RAX
	0002573d:CALL 0x0002348b
	00025742:SUB qword ptr [RBP + -0x548],0x38
	0002574a:SUB qword ptr [RBP + -0x558],0x1
	00025752:MOV RAX,qword ptr [RBP + -0x558]
	00025759:MOVZX EAX,byte ptr [RAX]
	0002575c:MOVSX EAX,AL
	0002575f:MOV dword ptr [RBP + -0x588],EAX
	00025765:JMP 0x0002567f
	0002576a:NOP
	0002576b:ADD qword ptr [RBP + -0x548],0x38
	00025773:MOV RAX,qword ptr [RBP + -0x548]
	0002577a:MOV RCX,qword ptr [RBP + -0x510]
	00025781:MOV RBX,qword ptr [RBP + -0x508]
	00025788:MOV qword ptr [RAX],RCX
	0002578b:MOV qword ptr [RAX + 0x8],RBX
	0002578f:MOV RCX,qword ptr [RBP + -0x500]
	00025796:MOV RBX,qword ptr [RBP + -0x4f8]
	0002579d:MOV qword ptr [RAX + 0x10],RCX
	000257a1:MOV qword ptr [RAX + 0x18],RBX
	000257a5:MOV RCX,qword ptr [RBP + -0x4f0]
	000257ac:MOV RBX,qword ptr [RBP + -0x4e8]
	000257b3:MOV qword ptr [RAX + 0x20],RCX
	000257b7:MOV qword ptr [RAX + 0x28],RBX
	000257bb:MOV RDX,qword ptr [RBP + -0x4e0]
	000257c2:MOV qword ptr [RAX + 0x30],RDX
	000257c6:MOV EAX,dword ptr [RBP + -0x580]
	000257cc:MOV dword ptr [RBP + -0x588],EAX
	000257d2:JMP 0x0002355b
	000257d7:NOP
	000257d8:MOV dword ptr [RBP + -0x57c],0x0
	000257e2:JMP 0x00025837
	000257e4:NOP
	000257e5:JMP 0x00025803
	000257e7:NOP
	000257e8:JMP 0x00025803
	000257ea:NOP
	000257eb:JMP 0x00025803
	000257ed:NOP
	000257ee:JMP 0x00025803
	000257f0:NOP
	000257f1:JMP 0x00025803
	000257f3:NOP
	000257f4:JMP 0x00025803
	000257f6:NOP
	000257f7:JMP 0x00025803
	000257f9:NOP
	000257fa:JMP 0x00025803
	000257fc:NOP
	000257fd:JMP 0x00025803
	000257ff:NOP
	00025800:JMP 0x00025803
	00025802:NOP
	00025803:MOV dword ptr [RBP + -0x57c],0x1
END_OF_LINE
----------------------------------------------
716: case 0x5a:
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
END_OF_LINE
----------------------------------------------
717: yyval.intval = -1;
	00025425:MOV qword ptr [RBP + -0x4d0],-0x1
END_OF_LINE
----------------------------------------------
719: case 0x5b:
	00025439:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
720: yyval.intval = (yyvsp->textintval).value;
	00025439:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
722: yyssp = yyssp + -(long)yylen;
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
END_OF_LINE
----------------------------------------------
723: yyvsp[1 - (long)yylen].intval = yyval.intval;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
724: *(intmax_t *)((long)yyvsp + (long)yylen * -0x38 + 0x40) = yyval.textintval.value;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
725: *(ptrdiff_t *)((long)yyvsp + (long)yylen * -0x38 + 0x48) = yyval.textintval.digits;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
726: *(intmax_t *)((long)yyvsp + (long)yylen * -0x38 + 0x50) = yyval.rel.hour;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
727: *(intmax_t *)((long)yyvsp + (long)yylen * -0x38 + 0x58) = yyval.rel.minutes;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
728: *(intmax_t *)((long)yyvsp + (long)yylen * -0x38 + 0x60) = yyval.rel.seconds;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
729: *(undefined8 *)((long)yyvsp + (long)yylen * -0x38 + 0x68) = yyval._48_8_;
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
730: iVar8 = (int)*yyssp + (int)yypgoto[""[yyn] + -0x1c];
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
731: if (((iVar8 < 0) || (0x70 < iVar8)) ||
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
END_OF_LINE
----------------------------------------------
732: ("\x1b\x05\x06\a\b\t\n\x04\f\x0ff\x0f\x10\x13\x0f\x13\x13\x14\x13\x19p\x19\x13\x1b\x05\x06\a\b\t\n\x05\x06\a\b\t\n\x13\x13\x13k\x13\x14\x19\x19\x19q\x13\x14\x15\x16\x19\x05\x06\a\b\t\n\v\f\r\x0e\x17\x10\x11\x12\x13\x14\x15\x16`\x18\x05\x06\a\b\t\n"
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
733: [iVar8] != *yyssp)) {
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
END_OF_LINE
----------------------------------------------
734: cVar1 = ""[""[yyn] + -0x1c];
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
737: cVar1 = "OCDEFGH:IdkJKenL12efqM;N=>?@AB=>?@ABee\\oZ[jpXo\x05\x06\a\bX\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x01\x17\x18\x19\x1a\x1b\x1c\x1dO\x1e345678\f9=>?@AB<0P/\x06S\bQR\x1aTUVW^_`Yiabc"
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
738: [iVar8];
	00025580:CDQE
END_OF_LINE
----------------------------------------------
740: yystate = (int)cVar1;
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
END_OF_LINE
----------------------------------------------
741: yyvsp = yyvsp + (1 - (long)yylen);
	0002546b:MOVSXD RDX,EAX
	0002546e:MOV RAX,RDX
	00025471:SHL RAX,0x3
	00025475:SUB RAX,RDX
	00025478:SHL RAX,0x3
	0002547c:NEG RAX
	0002547f:ADD qword ptr [RBP + -0x548],RAX
	00025486:MOV EAX,dword ptr [RBP + -0x574]
	0002548c:CDQE
	0002548e:NEG RAX
	00025491:ADD qword ptr [RBP + -0x558],RAX
	00025498:MOV dword ptr [RBP + -0x574],0x0
	000254a2:ADD qword ptr [RBP + -0x548],0x38
	000254aa:MOV RAX,qword ptr [RBP + -0x548]
	000254b1:MOV RCX,qword ptr [RBP + -0x4d0]
	000254b8:MOV RBX,qword ptr [RBP + -0x4c8]
	000254bf:MOV qword ptr [RAX],RCX
	000254c2:MOV qword ptr [RAX + 0x8],RBX
	000254c6:MOV RCX,qword ptr [RBP + -0x4c0]
	000254cd:MOV RBX,qword ptr [RBP + -0x4b8]
	000254d4:MOV qword ptr [RAX + 0x10],RCX
	000254d8:MOV qword ptr [RAX + 0x18],RBX
	000254dc:MOV RCX,qword ptr [RBP + -0x4b0]
	000254e3:MOV RBX,qword ptr [RBP + -0x4a8]
	000254ea:MOV qword ptr [RAX + 0x20],RCX
	000254ee:MOV qword ptr [RAX + 0x28],RBX
	000254f2:MOV RDX,qword ptr [RBP + -0x4a0]
	000254f9:MOV qword ptr [RAX + 0x30],RDX
	000254fd:MOV EAX,dword ptr [RBP + -0x580]
	00025503:CDQE
	00025505:LEA RDX,[0x34b60]
	0002550c:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	00025510:MOVSX EAX,AL
	00025513:SUB EAX,0x1c
	00025516:MOV dword ptr [RBP + -0x570],EAX
	0002551c:MOV EAX,dword ptr [RBP + -0x570]
	00025522:CDQE
	00025524:LEA RDX,[0x349a0]
	0002552b:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002552f:MOVSX EDX,AL
	00025532:MOV RAX,qword ptr [RBP + -0x558]
	00025539:MOVZX EAX,byte ptr [RAX]
	0002553c:MOVSX EAX,AL
	0002553f:ADD EAX,EDX
	00025541:MOV dword ptr [RBP + -0x56c],EAX
	00025547:CMP dword ptr [RBP + -0x56c],0x0
	0002554e:JS 0x00025592
	00025550:CMP dword ptr [RBP + -0x56c],0x70
	00025557:JG 0x00025592
	00025559:MOV EAX,dword ptr [RBP + -0x56c]
	0002555f:CDQE
	00025561:LEA RDX,[0x34a60]
	00025568:MOVZX EDX,byte ptr [RAX + RDX*0x1]
	0002556c:MOV RAX,qword ptr [RBP + -0x558]
	00025573:MOVZX EAX,byte ptr [RAX]
	00025576:CMP DL,AL
	00025578:JNZ 0x00025592
	0002557a:MOV EAX,dword ptr [RBP + -0x56c]
	00025580:CDQE
	00025582:LEA RDX,[0x349e0]
	00025589:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	0002558d:MOVSX EAX,AL
	00025590:JMP 0x000255a8
	00025592:MOV EAX,dword ptr [RBP + -0x570]
	00025598:CDQE
	0002559a:LEA RDX,[0x349c0]
	000255a1:MOVZX EAX,byte ptr [RAX + RDX*0x1]
	000255a5:MOVSX EAX,AL
	000255a8:MOV dword ptr [RBP + -0x588],EAX
	000255ae:JMP 0x0002355b
END_OF_LINE
----------------------------------------------
742: LAB_0002355b:
	0002355b:ADD qword ptr [RBP + -0x558],0x1
END_OF_LINE
----------------------------------------------
743: yyssp = yyssp + 1;
	0002355b:ADD qword ptr [RBP + -0x558],0x1
END_OF_LINE
----------------------------------------------
744: } while( true );
	0002355b:ADD qword ptr [RBP + -0x558],0x1
END_OF_LINE



Function: time_zone_hhmm
----------------------------------------------
15: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002597e:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
16: bVar4 = false;
	0002598d:MOV byte ptr [RBP + -0x11],0x0
END_OF_LINE
----------------------------------------------
17: if ((s.digits < 3) && (mm < 0)) {
	00025999:JG 0x000259c3
	0002599b:CMP qword ptr [RBP + -0x30],0x0
	000259a0:JNS 0x000259c3
END_OF_LINE
----------------------------------------------
18: s.value = s.value * 100;
	000259bb:SHL RAX,0x2
END_OF_LINE
----------------------------------------------
20: if (mm < 0) {
	000259c3:CMP qword ptr [RBP + -0x30],0x0
	000259c8:JNS 0x00025a5a
END_OF_LINE
----------------------------------------------
21: n_minutes = (s.value / 100) * 0x3c + s.value % 100;
	000259e6:SAR RAX,0x6
	000259ea:SAR RCX,0x3f
	000259ee:SUB RAX,RCX
	000259f1:MOV RDX,RAX
	000259f4:MOV RAX,RDX
	000259f7:SHL RAX,0x4
	000259fb:SUB RAX,RDX
	000259fe:SHL RAX,0x2
	00025a02:MOV RDI,RAX
	00025a05:MOV RCX,qword ptr [RBP + 0x18]
	00025a09:MOV RDX,-0x5c28f5c28f5c28f5
	00025a13:MOV RAX,RCX
	00025a16:IMUL RDX
	00025a19:LEA RAX,[RDX + RCX*0x1]
	00025a1d:SAR RAX,0x6
	00025a21:MOV RSI,RCX
	00025a24:SAR RSI,0x3f
	00025a28:SUB RAX,RSI
	00025a2b:MOV RDX,RAX
	00025a2e:MOV RAX,RDX
	00025a31:SHL RAX,0x2
	00025a35:ADD RAX,RDX
	00025a38:LEA RDX,[RAX*0x4]
	00025a40:ADD RAX,RDX
	00025a43:SHL RAX,0x2
	00025a47:SUB RCX,RAX
	00025a4a:MOV RDX,RCX
	00025a4d:LEA RAX,[RDI + RDX*0x1]
END_OF_LINE
----------------------------------------------
24: lVar3 = s.value * 0x3c;
	00025a63:IMUL RAX,RAX,0x3c
END_OF_LINE
----------------------------------------------
25: if (s.negative == false) {
	00025a8a:TEST AL,AL
	00025a8c:JZ 0x00025ab1
END_OF_LINE
----------------------------------------------
26: bVar4 = SCARRY8(mm,lVar3);
	00025abe:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
27: n_minutes = mm + lVar3;
	00025abe:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
30: bVar4 = SBORROW8(lVar3,mm);
	00025a97:SUB RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
31: n_minutes = lVar3 - mm;
	00025a97:SUB RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
33: bVar4 = bVar4 || SEXT816(lVar3) != SEXT816(s.value) * SEXT816(0x3c);
	00025a63:IMUL RAX,RAX,0x3c
	00025a67:JNO 0x00025a6e
	00025a69:MOV EDX,0x1
	00025a6e:MOV qword ptr [RBP + -0x10],RAX
	00025a72:MOV RAX,RDX
	00025a75:AND EAX,0x1
	00025a78:OR AL,byte ptr [RBP + -0x11]
	00025a7b:MOVZX EAX,AL
	00025a7e:TEST EAX,EAX
	00025a80:SETNZ AL
	00025a83:MOV byte ptr [RBP + -0x11],AL
	00025a86:MOVZX EAX,byte ptr [RBP + 0x10]
	00025a8a:TEST AL,AL
	00025a8c:JZ 0x00025ab1
	00025a8e:MOV RAX,qword ptr [RBP + -0x10]
	00025a92:MOV EDX,0x0
	00025a97:SUB RAX,qword ptr [RBP + -0x30]
	00025a9b:JNO 0x00025aa2
	00025a9d:MOV EDX,0x1
	00025aa2:MOV qword ptr [RBP + -0x10],RAX
	00025aa6:MOV RAX,RDX
	00025aa9:AND EAX,0x1
	00025aac:MOVZX EAX,AL
	00025aaf:JMP 0x00025ad5
	00025ab1:MOV RDX,qword ptr [RBP + -0x10]
	00025ab5:MOV ECX,0x0
	00025aba:MOV RAX,qword ptr [RBP + -0x30]
	00025abe:ADD RAX,RDX
	00025ac1:JNO 0x00025ac8
	00025ac3:MOV ECX,0x1
	00025ac8:MOV qword ptr [RBP + -0x10],RAX
	00025acc:MOV RAX,RCX
	00025acf:AND EAX,0x1
	00025ad2:MOVZX EAX,AL
	00025ad5:MOVZX EDX,byte ptr [RBP + -0x11]
	00025ad9:OR EAX,EDX
END_OF_LINE
----------------------------------------------
35: if (((bVar4) || (n_minutes < -0x5a0)) || (0x5a0 < n_minutes)) {
	00025ae7:JNZ 0x00025b01
	00025ae9:MOV RAX,qword ptr [RBP + -0x10]
	00025aed:CMP RAX,-0x5a0
	00025af3:JL 0x00025b01
	00025af5:MOV RAX,qword ptr [RBP + -0x10]
	00025af9:CMP RAX,0x5a0
	00025aff:JLE 0x00025b08
END_OF_LINE
----------------------------------------------
36: _Var2 = false;
	00025b01:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
39: pc->time_zone = (int)n_minutes * 0x3c;
	00025b0c:IMUL EAX,EAX,0x3c
	00025b0f:MOV EDX,EAX
	00025b11:MOV RAX,qword ptr [RBP + -0x28]
	00025b15:MOV dword ptr [RAX + 0x18],EDX
END_OF_LINE
----------------------------------------------
40: _Var2 = true;
	00025b18:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
42: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00025b21:SUB RDX,qword ptr FS:[0x28]
	00025b2a:JZ 0x00025b31
END_OF_LINE
----------------------------------------------
44: __stack_chk_fail();
	00025b2c:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
46: return _Var2;
	00025b32:RET
END_OF_LINE



Function: to_hour
----------------------------------------------
9: iVar1 = (int)hours;
	00025b46:JZ 0x00025b69
END_OF_LINE
----------------------------------------------
10: if (meridian == 0) {
	00025b42:CMP dword ptr [RBP + -0xc],0x0
	00025b46:JZ 0x00025b69
END_OF_LINE
----------------------------------------------
11: if ((hours < 1) || (0xb < hours)) {
	00025b6e:JLE 0x00025b77
	00025b70:CMP qword ptr [RBP + -0x8],0xb
	00025b75:JLE 0x00025b8c
END_OF_LINE
----------------------------------------------
12: if (hours == 0xc) {
	00025b77:CMP qword ptr [RBP + -0x8],0xc
	00025b7c:JNZ 0x00025b85
END_OF_LINE
----------------------------------------------
13: iVar1 = 0;
	00025b7e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: iVar1 = -1;
	00025b85:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
20: else if (meridian == 1) {
	00025b48:CMP dword ptr [RBP + -0xc],0x1
	00025b4c:JZ 0x00025b92
END_OF_LINE
----------------------------------------------
21: if ((hours < 1) || (0xb < hours)) {
	00025b97:JLE 0x00025ba9
	00025b99:CMP qword ptr [RBP + -0x8],0xb
	00025b9e:JG 0x00025ba9
END_OF_LINE
----------------------------------------------
22: if (hours == 0xc) {
	00025ba9:CMP qword ptr [RBP + -0x8],0xc
	00025bae:JNZ 0x00025bb7
END_OF_LINE
----------------------------------------------
23: iVar1 = 0xc;
	00025bb0:MOV EAX,0xc
END_OF_LINE
----------------------------------------------
26: iVar1 = -1;
	00025bb7:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
30: iVar1 = iVar1 + 0xc;
	00025ba4:ADD EAX,0xc
END_OF_LINE
----------------------------------------------
33: else if ((hours < 0) || (0x17 < hours)) {
	00025b4e:CMP qword ptr [RBP + -0x8],0x0
	00025b53:JS 0x00025b62
	00025b55:CMP qword ptr [RBP + -0x8],0x17
	00025b5a:JG 0x00025b62
END_OF_LINE
----------------------------------------------
34: iVar1 = -1;
	00025b62:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
36: return iVar1;
	00025bbd:RET
END_OF_LINE



Function: tm_year_str
----------------------------------------------
11: uVar2 = tm_year % 100;
	00025bf1:SUB EAX,ECX
END_OF_LINE
----------------------------------------------
12: if ((int)uVar2 < 1) {
	00025bf5:NEG EDX
	00025bf7:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
13: uVar2 = -uVar2;
	00025bf5:NEG EDX
	00025bf7:CMOVNS EAX,EDX
END_OF_LINE
----------------------------------------------
15: uVar3 = tm_year / 100 + 0x13;
	00025c0d:SAR EDX,0x5
	00025c10:SAR EAX,0x1f
	00025c13:MOV ESI,EAX
	00025c15:MOV EAX,EDX
	00025c17:SUB EAX,ESI
	00025c19:ADD EAX,0x13
END_OF_LINE
----------------------------------------------
16: uVar1 = -uVar3;
	00025c1e:NEG EDX
	00025c20:CMOVS EDX,EAX
END_OF_LINE
----------------------------------------------
17: if (0 < (int)uVar3) {
	00025c1e:NEG EDX
	00025c20:CMOVS EDX,EAX
END_OF_LINE
----------------------------------------------
18: uVar1 = uVar3;
	00025c20:CMOVS EDX,EAX
END_OF_LINE
----------------------------------------------
20: sprintf(buf,"-%02d%02d" + (int)(uint)(-0x76d < tm_year),(ulong)uVar1,(ulong)uVar2);
	00025bfa:MOV ECX,EAX
	00025bfc:MOV EAX,dword ptr [RBP + -0x4]
	00025bff:MOVSXD RDX,EAX
	00025c02:IMUL RDX,RDX,0x51eb851f
	00025c09:SHR RDX,0x20
	00025c0d:SAR EDX,0x5
	00025c10:SAR EAX,0x1f
	00025c13:MOV ESI,EAX
	00025c15:MOV EAX,EDX
	00025c17:SUB EAX,ESI
	00025c19:ADD EAX,0x13
	00025c1c:MOV EDX,EAX
	00025c1e:NEG EDX
	00025c20:CMOVS EDX,EAX
	00025c23:CMP dword ptr [RBP + -0x4],0xfffff894
	00025c2a:SETGE AL
	00025c2d:MOVZX EAX,AL
	00025c30:CDQE
	00025c32:LEA RSI,[0x35140]
	00025c39:ADD RSI,RAX
	00025c3c:MOV RAX,qword ptr [RBP + -0x10]
	00025c40:MOV RDI,RAX
	00025c43:MOV EAX,0x0
	00025c48:CALL 0x00005fe0
END_OF_LINE
----------------------------------------------
21: return buf;
	00025c4d:MOV RAX,qword ptr [RBP + -0x10]
	00025c51:LEAVE
	00025c52:RET
END_OF_LINE



Function: to_tm_year
----------------------------------------------
13: year = textyear.value;
	00025c6c:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
14: if ((-1 < textyear.value) && (textyear.digits == 2)) {
	00025c70:CMP qword ptr [RBP + -0x8],0x0
	00025c75:JS 0x00025cbd
	00025c77:MOV RAX,qword ptr [RBP + 0x20]
	00025c7b:CMP RAX,0x2
	00025c7f:JNZ 0x00025cbd
END_OF_LINE
----------------------------------------------
15: if (textyear.value < 0x45) {
	00025c86:JG 0x00025c8f
END_OF_LINE
----------------------------------------------
16: lVar3 = 2000;
	00025c88:MOV EAX,0x7d0
END_OF_LINE
----------------------------------------------
19: lVar3 = 0x76c;
	00025c8f:MOV EAX,0x76c
END_OF_LINE
----------------------------------------------
21: year = textyear.value + lVar3;
	00025c94:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
22: if (debug) {
	00025c9c:JZ 0x00025cbd
END_OF_LINE
----------------------------------------------
23: dbg_printf("warning: adjusting year value %ld to %ld\n",textyear.value,year);
	00025cb8:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
26: if (year < 0) {
	00025cbd:CMP qword ptr [RBP + -0x8],0x0
	00025cc2:JNS 0x00025cf7
END_OF_LINE
----------------------------------------------
27: iVar2 = (int)(-0x76c - year);
	00025cd0:SUB RAX,qword ptr [RBP + -0x8]
	00025cd4:JNO 0x00025cdb
	00025cd6:MOV EDX,0x1
	00025cdb:MOVSXD RCX,EAX
END_OF_LINE
----------------------------------------------
28: bVar4 = -0x76c - year != (long)iVar2 || SBORROW8(-0x76c,year);
	00025cd0:SUB RAX,qword ptr [RBP + -0x8]
	00025cd4:JNO 0x00025cdb
	00025cd6:MOV EDX,0x1
	00025cdb:MOVSXD RCX,EAX
	00025cde:CMP RAX,RCX
	00025ce1:JZ 0x00025ce8
	00025ce3:MOV EDX,0x1
	00025ce8:MOV ECX,EAX
END_OF_LINE
----------------------------------------------
29: *tm_year = iVar2;
	00025cee:MOV dword ptr [RAX],ECX
END_OF_LINE
----------------------------------------------
32: iVar2 = (int)(year + -0x76c);
	00025d00:SUB RAX,0x76c
	00025d06:JNO 0x00025d0d
	00025d08:MOV EDX,0x1
	00025d0d:MOVSXD RCX,EAX
END_OF_LINE
----------------------------------------------
33: bVar4 = year + -0x76c != (long)iVar2 || SBORROW8(year,0x76c);
	00025d00:SUB RAX,0x76c
	00025d06:JNO 0x00025d0d
	00025d08:MOV EDX,0x1
	00025d0d:MOVSXD RCX,EAX
	00025d10:CMP RAX,RCX
	00025d13:JZ 0x00025d1a
	00025d15:MOV EDX,0x1
	00025d1a:MOV ECX,EAX
END_OF_LINE
----------------------------------------------
34: *tm_year = iVar2;
	00025d20:MOV dword ptr [RAX],ECX
END_OF_LINE
----------------------------------------------
36: if (bVar4) {
	00025d29:JZ 0x00025d53
END_OF_LINE
----------------------------------------------
37: if (debug) {
	00025d2f:JZ 0x00025d4c
END_OF_LINE
----------------------------------------------
38: dbg_printf("error: out-of-range year %ld\n",year);
	00025d47:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
40: _Var1 = false;
	00025d4c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
43: _Var1 = true;
	00025d53:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
45: return _Var1;
	00025d59:RET
END_OF_LINE



Function: lookup_zone
----------------------------------------------
10: for (tp = universal_time_zone_table; tp->name != (char *)0x0; tp = tp + 1) {
	00025d75:MOV qword ptr [RBP + -0x8],RAX
	00025d79:JMP 0x00025da3
	00025d7b:MOV RAX,qword ptr [RBP + -0x8]
	00025d7f:MOV RDX,qword ptr [RAX]
	00025d82:MOV RAX,qword ptr [RBP + -0x20]
	00025d86:MOV RSI,RDX
	00025d89:MOV RDI,RAX
	00025d8c:CALL 0x00005ce0
	00025d91:TEST EAX,EAX
	00025d93:JNZ 0x00025d9e
	00025d95:MOV RAX,qword ptr [RBP + -0x8]
	00025d99:JMP 0x00025e33
	00025d9e:ADD qword ptr [RBP + -0x8],0x10
	00025da3:MOV RAX,qword ptr [RBP + -0x8]
	00025da7:MOV RAX,qword ptr [RAX]
	00025daa:TEST RAX,RAX
	00025dad:JNZ 0x00025d7b
END_OF_LINE
----------------------------------------------
11: iVar1 = strcmp(name,tp->name);
	00025d7f:MOV RDX,qword ptr [RAX]
	00025d82:MOV RAX,qword ptr [RBP + -0x20]
	00025d86:MOV RSI,RDX
	00025d89:MOV RDI,RAX
	00025d8c:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
12: if (iVar1 == 0) {
	00025d91:TEST EAX,EAX
	00025d93:JNZ 0x00025d9e
END_OF_LINE
----------------------------------------------
13: return tp;
	00025e33:LEAVE
	00025e34:RET
END_OF_LINE
----------------------------------------------
16: for (tp = pc->local_time_zone_table; tp->name != (char *)0x0; tp = tp + 1) {
	00025db3:ADD RAX,0xe8
	00025db9:MOV qword ptr [RBP + -0x8],RAX
	00025dbd:JMP 0x00025de4
	00025dbf:MOV RAX,qword ptr [RBP + -0x8]
	00025dc3:MOV RDX,qword ptr [RAX]
	00025dc6:MOV RAX,qword ptr [RBP + -0x20]
	00025dca:MOV RSI,RDX
	00025dcd:MOV RDI,RAX
	00025dd0:CALL 0x00005ce0
	00025dd5:TEST EAX,EAX
	00025dd7:JNZ 0x00025ddf
	00025dd9:MOV RAX,qword ptr [RBP + -0x8]
	00025ddd:JMP 0x00025e33
	00025ddf:ADD qword ptr [RBP + -0x8],0x10
	00025de4:MOV RAX,qword ptr [RBP + -0x8]
	00025de8:MOV RAX,qword ptr [RAX]
	00025deb:TEST RAX,RAX
	00025dee:JNZ 0x00025dbf
END_OF_LINE
----------------------------------------------
17: iVar1 = strcmp(name,tp->name);
	00025dc3:MOV RDX,qword ptr [RAX]
	00025dc6:MOV RAX,qword ptr [RBP + -0x20]
	00025dca:MOV RSI,RDX
	00025dcd:MOV RDI,RAX
	00025dd0:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
18: if (iVar1 == 0) {
	00025dd5:TEST EAX,EAX
	00025dd7:JNZ 0x00025ddf
END_OF_LINE
----------------------------------------------
19: return tp;
	00025e33:LEAVE
	00025e34:RET
END_OF_LINE
----------------------------------------------
22: tp = time_zone_table;
	00025df7:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
23: while( true ) {
	00025e15:JNZ 0x00025e1d
END_OF_LINE
----------------------------------------------
24: if (tp->name == (char *)0x0) {
	00025e26:MOV RAX,qword ptr [RAX]
	00025e29:TEST RAX,RAX
	00025e2c:JNZ 0x00025dfd
END_OF_LINE
----------------------------------------------
25: return (table *)0x0;
	00025e33:LEAVE
	00025e34:RET
END_OF_LINE
----------------------------------------------
27: iVar1 = strcmp(name,tp->name);
	00025e01:MOV RDX,qword ptr [RAX]
	00025e04:MOV RAX,qword ptr [RBP + -0x20]
	00025e08:MOV RSI,RDX
	00025e0b:MOV RDI,RAX
	00025e0e:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
28: if (iVar1 == 0) break;
	00025e13:TEST EAX,EAX
	00025e15:JNZ 0x00025e1d
END_OF_LINE
----------------------------------------------
29: tp = tp + 1;
	00025e1d:ADD qword ptr [RBP + -0x8],0x10
END_OF_LINE
----------------------------------------------
31: return tp;
	00025e33:LEAVE
	00025e34:RET
END_OF_LINE



Function: lookup_word
----------------------------------------------
19: for (p = word; *p != '\0'; p = p + 1) {
	00025e51:JMP 0x00025e7b
	00025e53:MOV RAX,qword ptr [RBP + -0x20]
	00025e57:MOVZX EAX,byte ptr [RAX]
	00025e5a:MOVSX EAX,AL
	00025e5d:MOV EDI,EAX
	00025e5f:CALL 0x000222d6
	00025e64:MOVZX EAX,AL
	00025e67:MOV EDI,EAX
	00025e69:CALL 0x0002d1cb
	00025e6e:MOV EDX,EAX
	00025e70:MOV RAX,qword ptr [RBP + -0x20]
	00025e74:MOV byte ptr [RAX],DL
	00025e76:ADD qword ptr [RBP + -0x20],0x1
	00025e7b:MOV RAX,qword ptr [RBP + -0x20]
	00025e7f:MOVZX EAX,byte ptr [RAX]
	00025e82:TEST AL,AL
	00025e84:JNZ 0x00025e53
END_OF_LINE
----------------------------------------------
20: bVar1 = to_uchar(*p);
	00025e57:MOVZX EAX,byte ptr [RAX]
	00025e5a:MOVSX EAX,AL
	00025e5d:MOV EDI,EAX
	00025e5f:CALL 0x000222d6
END_OF_LINE
----------------------------------------------
21: iVar3 = c_toupper((uint)bVar1);
	00025e67:MOV EDI,EAX
	00025e69:CALL 0x0002d1cb
END_OF_LINE
----------------------------------------------
22: *p = (char)iVar3;
	00025e74:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
24: for (tp = meridian_table; tp->name != (char *)0x0; tp = tp + 1) {
	00025e8d:MOV qword ptr [RBP + -0x10],RAX
	00025e91:JMP 0x00025ebb
	00025e93:MOV RAX,qword ptr [RBP + -0x10]
	00025e97:MOV RDX,qword ptr [RAX]
	00025e9a:MOV RAX,qword ptr [RBP + -0x40]
	00025e9e:MOV RSI,RDX
	00025ea1:MOV RDI,RAX
	00025ea4:CALL 0x00005ce0
	00025ea9:TEST EAX,EAX
	00025eab:JNZ 0x00025eb6
	00025ead:MOV RAX,qword ptr [RBP + -0x10]
	00025eb1:JMP 0x0002617a
	00025eb6:ADD qword ptr [RBP + -0x10],0x10
	00025ebb:MOV RAX,qword ptr [RBP + -0x10]
	00025ebf:MOV RAX,qword ptr [RAX]
	00025ec2:TEST RAX,RAX
	00025ec5:JNZ 0x00025e93
END_OF_LINE
----------------------------------------------
25: iVar3 = strcmp(word,tp->name);
	00025e97:MOV RDX,qword ptr [RAX]
	00025e9a:MOV RAX,qword ptr [RBP + -0x40]
	00025e9e:MOV RSI,RDX
	00025ea1:MOV RDI,RAX
	00025ea4:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
26: if (iVar3 == 0) {
	00025ea9:TEST EAX,EAX
	00025eab:JNZ 0x00025eb6
END_OF_LINE
----------------------------------------------
27: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE
----------------------------------------------
30: sVar4 = strlen(word);
	00025ece:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
31: if ((sVar4 == 3) || ((sVar4 == 4 && (word[3] == '.')))) {
	00025ed7:CMP qword ptr [RBP + -0x8],0x3
	00025edc:JZ 0x00025ef4
	00025ede:CMP qword ptr [RBP + -0x8],0x4
	00025ee3:JNZ 0x00025efb
	00025ee5:MOV RAX,qword ptr [RBP + -0x40]
	00025ee9:ADD RAX,0x3
	00025eed:MOVZX EAX,byte ptr [RAX]
	00025ef0:CMP AL,0x2e
	00025ef2:JNZ 0x00025efb
END_OF_LINE
----------------------------------------------
32: bVar2 = true;
	00025ef4:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
35: bVar2 = false;
	00025efb:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
37: tp = month_and_day_table;
	00025f0e:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
38: while( true ) {
	00025f59:JZ 0x00025f64
END_OF_LINE
----------------------------------------------
39: if (tp->name == (char *)0x0) {
	00025f6d:MOV RAX,qword ptr [RAX]
	00025f70:TEST RAX,RAX
	00025f73:JNZ 0x00025f14
END_OF_LINE
----------------------------------------------
40: ptVar5 = lookup_zone(pc,word);
	00025f83:CALL 0x00025d5a
END_OF_LINE
----------------------------------------------
41: if (ptVar5 == (table *)0x0) {
	00025f8c:CMP qword ptr [RBP + -0x10],0x0
	00025f91:JZ 0x00025f9c
END_OF_LINE
----------------------------------------------
42: iVar3 = strcmp(word,"DST");
	00025fad:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
43: if (iVar3 == 0) {
	00025fb2:TEST EAX,EAX
	00025fb4:JNZ 0x00025fc2
END_OF_LINE
----------------------------------------------
44: ptVar5 = dst_table;
	00025fb6:LEA RAX,[0x3d050]
END_OF_LINE
----------------------------------------------
47: for (tp = time_units_table; tp->name != (char *)0x0; tp = tp + 1) {
	00025fc9:MOV qword ptr [RBP + -0x10],RAX
	00025fcd:JMP 0x00025ff7
	00025fcf:MOV RAX,qword ptr [RBP + -0x10]
	00025fd3:MOV RDX,qword ptr [RAX]
	00025fd6:MOV RAX,qword ptr [RBP + -0x40]
	00025fda:MOV RSI,RDX
	00025fdd:MOV RDI,RAX
	00025fe0:CALL 0x00005ce0
	00025fe5:TEST EAX,EAX
	00025fe7:JNZ 0x00025ff2
	00025fe9:MOV RAX,qword ptr [RBP + -0x10]
	00025fed:JMP 0x0002617a
	00025ff2:ADD qword ptr [RBP + -0x10],0x10
	00025ff7:MOV RAX,qword ptr [RBP + -0x10]
	00025ffb:MOV RAX,qword ptr [RAX]
	00025ffe:TEST RAX,RAX
	00026001:JNZ 0x00025fcf
END_OF_LINE
----------------------------------------------
48: iVar3 = strcmp(word,tp->name);
	00025fd3:MOV RDX,qword ptr [RAX]
	00025fd6:MOV RAX,qword ptr [RBP + -0x40]
	00025fda:MOV RSI,RDX
	00025fdd:MOV RDI,RAX
	00025fe0:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
49: if (iVar3 == 0) {
	00025fe5:TEST EAX,EAX
	00025fe7:JNZ 0x00025ff2
END_OF_LINE
----------------------------------------------
50: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE
----------------------------------------------
53: if (word[sVar4 - 1] == 'S') {
	00026007:LEA RDX,[RAX + -0x1]
	0002600b:MOV RAX,qword ptr [RBP + -0x40]
	0002600f:ADD RAX,RDX
	00026012:MOVZX EAX,byte ptr [RAX]
	00026015:CMP AL,0x53
	00026017:JNZ 0x0002607e
END_OF_LINE
----------------------------------------------
54: word[sVar4 - 1] = '\0';
	0002601d:LEA RDX,[RAX + -0x1]
	00026021:MOV RAX,qword ptr [RBP + -0x40]
	00026025:ADD RAX,RDX
	00026028:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
55: for (tp = time_units_table; tp->name != (char *)0x0; tp = tp + 1) {
	00026032:MOV qword ptr [RBP + -0x10],RAX
	00026036:JMP 0x00026060
	00026038:MOV RAX,qword ptr [RBP + -0x10]
	0002603c:MOV RDX,qword ptr [RAX]
	0002603f:MOV RAX,qword ptr [RBP + -0x40]
	00026043:MOV RSI,RDX
	00026046:MOV RDI,RAX
	00026049:CALL 0x00005ce0
	0002604e:TEST EAX,EAX
	00026050:JNZ 0x0002605b
	00026052:MOV RAX,qword ptr [RBP + -0x10]
	00026056:JMP 0x0002617a
	0002605b:ADD qword ptr [RBP + -0x10],0x10
	00026060:MOV RAX,qword ptr [RBP + -0x10]
	00026064:MOV RAX,qword ptr [RAX]
	00026067:TEST RAX,RAX
	0002606a:JNZ 0x00026038
END_OF_LINE
----------------------------------------------
56: iVar3 = strcmp(word,tp->name);
	0002603c:MOV RDX,qword ptr [RAX]
	0002603f:MOV RAX,qword ptr [RBP + -0x40]
	00026043:MOV RSI,RDX
	00026046:MOV RDI,RAX
	00026049:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
57: if (iVar3 == 0) {
	0002604e:TEST EAX,EAX
	00026050:JNZ 0x0002605b
END_OF_LINE
----------------------------------------------
58: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE
----------------------------------------------
61: word[sVar4 - 1] = 'S';
	00026070:LEA RDX,[RAX + -0x1]
	00026074:MOV RAX,qword ptr [RBP + -0x40]
	00026078:ADD RAX,RDX
	0002607b:MOV byte ptr [RAX],0x53
END_OF_LINE
----------------------------------------------
63: for (tp = relative_time_table; tp->name != (char *)0x0; tp = tp + 1) {
	00026085:MOV qword ptr [RBP + -0x10],RAX
	00026089:JMP 0x000260b3
	0002608b:MOV RAX,qword ptr [RBP + -0x10]
	0002608f:MOV RDX,qword ptr [RAX]
	00026092:MOV RAX,qword ptr [RBP + -0x40]
	00026096:MOV RSI,RDX
	00026099:MOV RDI,RAX
	0002609c:CALL 0x00005ce0
	000260a1:TEST EAX,EAX
	000260a3:JNZ 0x000260ae
	000260a5:MOV RAX,qword ptr [RBP + -0x10]
	000260a9:JMP 0x0002617a
	000260ae:ADD qword ptr [RBP + -0x10],0x10
	000260b3:MOV RAX,qword ptr [RBP + -0x10]
	000260b7:MOV RAX,qword ptr [RAX]
	000260ba:TEST RAX,RAX
	000260bd:JNZ 0x0002608b
END_OF_LINE
----------------------------------------------
64: iVar3 = strcmp(word,tp->name);
	0002608f:MOV RDX,qword ptr [RAX]
	00026092:MOV RAX,qword ptr [RBP + -0x40]
	00026096:MOV RSI,RDX
	00026099:MOV RDI,RAX
	0002609c:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
65: if (iVar3 == 0) {
	000260a1:TEST EAX,EAX
	000260a3:JNZ 0x000260ae
END_OF_LINE
----------------------------------------------
66: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE
----------------------------------------------
69: if (sVar4 == 1) {
	000260bf:CMP qword ptr [RBP + -0x8],0x1
	000260c4:JNZ 0x00026102
END_OF_LINE
----------------------------------------------
70: for (tp = military_table; tp->name != (char *)0x0; tp = tp + 1) {
	000260cd:MOV qword ptr [RBP + -0x10],RAX
	000260d1:JMP 0x000260f6
	000260d3:MOV RAX,qword ptr [RBP + -0x40]
	000260d7:MOVZX EDX,byte ptr [RAX]
	000260da:MOV RAX,qword ptr [RBP + -0x10]
	000260de:MOV RAX,qword ptr [RAX]
	000260e1:MOVZX EAX,byte ptr [RAX]
	000260e4:CMP DL,AL
	000260e6:JNZ 0x000260f1
	000260e8:MOV RAX,qword ptr [RBP + -0x10]
	000260ec:JMP 0x0002617a
	000260f1:ADD qword ptr [RBP + -0x10],0x10
	000260f6:MOV RAX,qword ptr [RBP + -0x10]
	000260fa:MOV RAX,qword ptr [RAX]
	000260fd:TEST RAX,RAX
	00026100:JNZ 0x000260d3
END_OF_LINE
----------------------------------------------
71: if (*word == *tp->name) {
	000260d7:MOVZX EDX,byte ptr [RAX]
	000260da:MOV RAX,qword ptr [RBP + -0x10]
	000260de:MOV RAX,qword ptr [RAX]
	000260e1:MOVZX EAX,byte ptr [RAX]
	000260e4:CMP DL,AL
	000260e6:JNZ 0x000260f1
END_OF_LINE
----------------------------------------------
72: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE
----------------------------------------------
76: bVar2 = false;
	00026102:MOV byte ptr [RBP + -0x22],0x0
END_OF_LINE
----------------------------------------------
77: p = word;
	00026116:JMP 0x00026133
END_OF_LINE
----------------------------------------------
78: q = word;
	00026116:JMP 0x00026133
END_OF_LINE
----------------------------------------------
79: while (*p = *q, *p != '\0') {
	00026137:MOVZX EDX,byte ptr [RAX]
	0002613a:MOV RAX,qword ptr [RBP + -0x20]
	0002613e:MOV byte ptr [RAX],DL
	00026140:MOV RAX,qword ptr [RBP + -0x20]
	00026144:MOVZX EAX,byte ptr [RAX]
	00026147:TEST AL,AL
	00026149:JNZ 0x00026118
END_OF_LINE
----------------------------------------------
80: if (*q == '.') {
	0002611c:MOVZX EAX,byte ptr [RAX]
	0002611f:CMP AL,0x2e
	00026121:JNZ 0x00026129
END_OF_LINE
----------------------------------------------
81: bVar2 = true;
	00026123:MOV byte ptr [RBP + -0x22],0x1
END_OF_LINE
----------------------------------------------
84: p = p + 1;
	00026129:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
86: q = q + 1;
	0002612e:ADD qword ptr [RBP + -0x18],0x1
END_OF_LINE
----------------------------------------------
88: if ((!bVar2) || (ptVar5 = lookup_zone(pc,word), ptVar5 == (table *)0x0)) {
	0002614f:JZ 0x00026175
	00026151:MOV RDX,qword ptr [RBP + -0x40]
	00026155:MOV RAX,qword ptr [RBP + -0x38]
	00026159:MOV RSI,RDX
	0002615c:MOV RDI,RAX
	0002615f:CALL 0x00025d5a
	00026164:MOV qword ptr [RBP + -0x10],RAX
	00026168:CMP qword ptr [RBP + -0x10],0x0
	0002616d:JZ 0x00026175
END_OF_LINE
----------------------------------------------
89: ptVar5 = (table *)0x0;
	00026175:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
93: return ptVar5;
	0002617b:RET
END_OF_LINE
----------------------------------------------
95: if (bVar2) {
	00025f18:JZ 0x00025f3c
END_OF_LINE
----------------------------------------------
96: iVar3 = strncmp(word,tp->name,3);
	00025f1e:MOV RCX,qword ptr [RAX]
	00025f21:MOV RAX,qword ptr [RBP + -0x40]
	00025f25:MOV EDX,0x3
	00025f2a:MOV RSI,RCX
	00025f2d:MOV RDI,RAX
	00025f30:CALL 0x00005920
END_OF_LINE
----------------------------------------------
99: iVar3 = strcmp(word,tp->name);
	00025f40:MOV RDX,qword ptr [RAX]
	00025f43:MOV RAX,qword ptr [RBP + -0x40]
	00025f47:MOV RSI,RDX
	00025f4a:MOV RDI,RAX
	00025f4d:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
101: if (iVar3 == 0) break;
	00025f35:TEST EAX,EAX
	00025f37:SETZ AL
	00025f3a:JMP 0x00025f57
	00025f3c:MOV RAX,qword ptr [RBP + -0x10]
	00025f40:MOV RDX,qword ptr [RAX]
	00025f43:MOV RAX,qword ptr [RBP + -0x40]
	00025f47:MOV RSI,RDX
	00025f4a:MOV RDI,RAX
	00025f4d:CALL 0x00005ce0
	00025f52:TEST EAX,EAX
	00025f54:SETZ AL
	00025f57:TEST AL,AL
	00025f59:JZ 0x00025f64
END_OF_LINE
----------------------------------------------
102: tp = tp + 1;
	00025f64:ADD qword ptr [RBP + -0x10],0x10
END_OF_LINE
----------------------------------------------
104: return tp;
	0002617a:LEAVE
	0002617b:RET
END_OF_LINE



Function: yylex
----------------------------------------------
30: lVar4 = *(long *)(in_FS_OFFSET + 0x28);
	00026190:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
32: while( true ) {
	000261e8:JNZ 0x000264dc
END_OF_LINE
----------------------------------------------
33: while( true ) {
	000261cd:JNZ 0x000261a1
END_OF_LINE
----------------------------------------------
34: c = *pc->input;
	000261b7:MOV RAX,qword ptr [RAX]
	000261ba:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
35: _Var5 = c_isspace((uint)c);
	000261c4:MOV EDI,EAX
	000261c6:CALL 0x0002d10f
END_OF_LINE
----------------------------------------------
36: if (!_Var5) break;
	000261cd:JNZ 0x000261a1
END_OF_LINE
----------------------------------------------
37: pc->input = pc->input + 1;
	000261a5:MOV RAX,qword ptr [RAX]
	000261a8:LEA RDX,[RAX + 0x1]
	000261ac:MOV RAX,qword ptr [RBP + -0x70]
	000261b0:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
39: _Var5 = c_isdigit((uint)c);
	000261d3:MOV EDI,EAX
	000261d5:CALL 0x0002d035
END_OF_LINE
----------------------------------------------
40: if (((_Var5) || (c == 0x2d)) || (c == 0x2b)) break;
	000261dc:JNZ 0x000261ee
	000261de:CMP byte ptr [RBP + -0x5d],0x2d
	000261e2:JZ 0x000261ee
	000261e4:CMP byte ptr [RBP + -0x5d],0x2b
	000261e8:JNZ 0x000264dc
END_OF_LINE
----------------------------------------------
41: _Var5 = c_isalpha((uint)c);
	000264e0:MOV EDI,EAX
	000264e2:CALL 0x0002cf8d
END_OF_LINE
----------------------------------------------
42: if (_Var5) {
	000264e9:JZ 0x000265be
END_OF_LINE
----------------------------------------------
43: p_1 = buff;
	000264ef:LEA RAX,[RBP + -0x20]
END_OF_LINE
----------------------------------------------
45: if (p_1 < buff + 0x13) {
	000264fb:ADD RAX,0x13
	000264ff:CMP qword ptr [RBP + -0x38],RAX
	00026503:JNC 0x00026517
END_OF_LINE
----------------------------------------------
46: *p_1 = c;
	00026515:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
47: p_1 = p_1 + 1;
	00026509:LEA RDX,[RAX + 0x1]
	0002650d:MOV qword ptr [RBP + -0x38],RDX
	00026511:MOVZX EDX,byte ptr [RBP + -0x5d]
	00026515:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
49: pc->input = pc->input + 1;
	0002651b:MOV RAX,qword ptr [RAX]
	0002651e:LEA RDX,[RAX + 0x1]
	00026522:MOV RAX,qword ptr [RBP + -0x70]
	00026526:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
50: c = *pc->input;
	0002652d:MOV RAX,qword ptr [RAX]
	00026530:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
51: _Var5 = c_isalpha((uint)c);
	0002653a:MOV EDI,EAX
	0002653c:CALL 0x0002cf8d
END_OF_LINE
----------------------------------------------
52: } while ((_Var5) || (c == 0x2e));
	00026543:JNZ 0x000264f7
	00026545:CMP byte ptr [RBP + -0x5d],0x2e
	00026549:JZ 0x000264f7
END_OF_LINE
----------------------------------------------
53: *p_1 = '\0';
	0002654f:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
54: ptVar10 = lookup_word(pc,buff);
	00026552:LEA RDX,[RBP + -0x20]
	00026556:MOV RAX,qword ptr [RBP + -0x70]
	0002655a:MOV RSI,RDX
	0002655d:MOV RDI,RAX
	00026560:CALL 0x00025e35
END_OF_LINE
----------------------------------------------
55: if (ptVar10 == (table *)0x0) {
	00026569:CMP qword ptr [RBP + -0x28],0x0
	0002656e:JNZ 0x000265a4
END_OF_LINE
----------------------------------------------
56: if (pc->parse_datetime_debug != false) {
	00026574:MOVZX EAX,byte ptr [RAX + 0xd9]
	0002657b:TEST AL,AL
	0002657d:JZ 0x0002659a
END_OF_LINE
----------------------------------------------
57: dbg_printf("error: unknown word \'%s\'\n",buff);
	0002657f:LEA RAX,[RBP + -0x20]
	00026583:MOV RSI,RAX
	00026586:LEA RAX,[0x35198]
	0002658d:MOV RDI,RAX
	00026590:MOV EAX,0x0
	00026595:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
59: uVar8 = 0x3f;
	0002659a:MOV EAX,0x3f
END_OF_LINE
----------------------------------------------
62: *(long *)lvalp = (long)ptVar10->value;
	000265a8:MOV EAX,dword ptr [RAX + 0xc]
	000265ab:MOVSXD RDX,EAX
	000265ae:MOV RAX,qword ptr [RBP + -0x68]
	000265b2:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
63: uVar8 = ptVar10->type;
	000265b9:MOV EAX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
65: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
67: if (c != 0x28) {
	000265be:CMP byte ptr [RBP + -0x5d],0x28
	000265c2:JZ 0x000265e8
END_OF_LINE
----------------------------------------------
68: pcVar2 = pc->input;
	000265c8:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
69: pc->input = pcVar2 + 1;
	000265cb:LEA RCX,[RAX + 0x1]
	000265cf:MOV RDX,qword ptr [RBP + -0x70]
	000265d3:MOV qword ptr [RDX],RCX
END_OF_LINE
----------------------------------------------
70: bVar6 = to_uchar(*pcVar2);
	000265d6:MOVZX EAX,byte ptr [RAX]
	000265d9:MOVSX EAX,AL
	000265dc:MOV EDI,EAX
	000265de:CALL 0x000222d6
END_OF_LINE
----------------------------------------------
71: uVar8 = (uint)bVar6;
	000265e3:MOVZX EAX,AL
END_OF_LINE
----------------------------------------------
72: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
74: count = 0;
	000265e8:MOV qword ptr [RBP + -0x30],0x0
END_OF_LINE
----------------------------------------------
76: pcVar2 = pc->input;
	000265f4:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
77: pc->input = pcVar2 + 1;
	000265f7:LEA RCX,[RAX + 0x1]
	000265fb:MOV RDX,qword ptr [RBP + -0x70]
	000265ff:MOV qword ptr [RDX],RCX
END_OF_LINE
----------------------------------------------
78: cVar3 = *pcVar2;
	00026602:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
79: if (cVar3 == '\0') {
	00026608:CMP byte ptr [RBP + -0x5d],0x0
	0002660c:JNZ 0x00026614
END_OF_LINE
----------------------------------------------
80: uVar8 = 0;
	0002660e:MOVZX EAX,byte ptr [RBP + -0x5d]
END_OF_LINE
----------------------------------------------
81: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
83: if (cVar3 == '(') {
	00026614:CMP byte ptr [RBP + -0x5d],0x28
	00026618:JNZ 0x00026621
END_OF_LINE
----------------------------------------------
84: count = count + 1;
	0002661a:ADD qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
86: else if (cVar3 == ')') {
	00026621:CMP byte ptr [RBP + -0x5d],0x29
	00026625:JNZ 0x0002662c
END_OF_LINE
----------------------------------------------
87: count = count + -1;
	00026627:SUB qword ptr [RBP + -0x30],0x1
END_OF_LINE
----------------------------------------------
89: } while (count != 0);
	0002662c:CMP qword ptr [RBP + -0x30],0x0
	00026631:JNZ 0x000265f0
END_OF_LINE
----------------------------------------------
91: value = 0;
	000261ee:MOV qword ptr [RBP + -0x50],0x0
END_OF_LINE
----------------------------------------------
92: if ((c != 0x2d) && (c != 0x2b)) {
	000261f6:CMP byte ptr [RBP + -0x5d],0x2d
	000261fa:JZ 0x00026202
	000261fc:CMP byte ptr [RBP + -0x5d],0x2b
	00026200:JNZ 0x0002625f
END_OF_LINE
----------------------------------------------
93: sign = 0;
	0002625f:MOV dword ptr [RBP + -0x5c],0x0
END_OF_LINE
----------------------------------------------
96: if (c == 0x2d) {
	00026202:CMP byte ptr [RBP + -0x5d],0x2d
	00026206:JNZ 0x0002620f
END_OF_LINE
----------------------------------------------
97: sign = -1;
	00026208:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
100: sign = 1;
	0002620f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
103: pc->input = pc->input + 1;
	0002621e:MOV RAX,qword ptr [RAX]
	00026221:LEA RDX,[RAX + 0x1]
	00026225:MOV RAX,qword ptr [RBP + -0x70]
	00026229:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
104: c = *pc->input;
	00026230:MOV RAX,qword ptr [RAX]
	00026233:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
105: _Var5 = c_isspace((uint)c);
	0002623d:MOV EDI,EAX
	0002623f:CALL 0x0002d10f
END_OF_LINE
----------------------------------------------
106: } while (_Var5);
	00026246:JNZ 0x00026219
END_OF_LINE
----------------------------------------------
107: _Var5 = c_isdigit((uint)c);
	0002624c:MOV EDI,EAX
	0002624e:CALL 0x0002d035
END_OF_LINE
----------------------------------------------
108: } while (!_Var5);
	00026258:JZ 0x00026266
END_OF_LINE
----------------------------------------------
109: pbVar1 = (byte *)pc->input;
	0002626a:MOV RAX,qword ptr [RAX]
	0002626d:MOV qword ptr [RBP + -0x48],RAX
END_OF_LINE
----------------------------------------------
111: p = (char *)pbVar1;
	00026271:MOV RAX,qword ptr [RBP + -0x50]
END_OF_LINE
----------------------------------------------
112: lVar9 = value * 10;
	0002627a:IMUL RAX,RAX,0xa
END_OF_LINE
----------------------------------------------
113: if (SEXT816(lVar9) != SEXT816(value) * SEXT816(10)) {
	0002627a:IMUL RAX,RAX,0xa
	0002627e:JNO 0x00026285
END_OF_LINE
----------------------------------------------
114: uVar8 = 0x3f;
	00026293:MOV EAX,0x3f
END_OF_LINE
----------------------------------------------
115: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
117: if (sign < 0) {
	000262a1:CMP dword ptr [RBP + -0x5c],0x0
	000262a5:JNS 0x000262b4
END_OF_LINE
----------------------------------------------
118: iVar7 = 0x30 - (uint)c;
	000262b0:SUB EAX,ECX
END_OF_LINE
----------------------------------------------
121: iVar7 = c - 0x30;
	000262b8:SUB EAX,0x30
END_OF_LINE
----------------------------------------------
123: value = iVar7 + lVar9;
	000262bb:CDQE
	000262bd:MOV ECX,0x0
	000262c2:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
124: if (SCARRY8((long)iVar7,lVar9)) {
	000262bb:CDQE
	000262bd:MOV ECX,0x0
	000262c2:ADD RAX,RDX
	000262c5:JNO 0x000262cc
END_OF_LINE
----------------------------------------------
125: uVar8 = 0x3f;
	000262da:MOV EAX,0x3f
END_OF_LINE
----------------------------------------------
126: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
128: pbVar1 = (byte *)(p + 1);
	000262e4:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
129: c = *pbVar1;
	000262ed:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
130: _Var5 = c_isdigit((uint)c);
	000262f7:MOV EDI,EAX
	000262f9:CALL 0x0002d035
END_OF_LINE
----------------------------------------------
131: } while (_Var5);
	00026300:JNZ 0x00026271
END_OF_LINE
----------------------------------------------
132: if (((c == 0x2e) || (c == 0x2c)) && (_Var5 = c_isdigit((int)p[2]), _Var5)) {
	00026306:CMP byte ptr [RBP + -0x5d],0x2e
	0002630a:JZ 0x00026316
	0002630c:CMP byte ptr [RBP + -0x5d],0x2c
	00026310:JNZ 0x00026484
	00026316:MOV RAX,qword ptr [RBP + -0x48]
	0002631a:ADD RAX,0x1
	0002631e:MOVZX EAX,byte ptr [RAX]
	00026321:MOVSX EAX,AL
	00026324:MOV EDI,EAX
	00026326:CALL 0x0002d035
	0002632b:TEST AL,AL
	0002632d:JZ 0x00026484
END_OF_LINE
----------------------------------------------
133: _Var5 = time_overflow(value);
	0002633a:CALL 0x000222c3
END_OF_LINE
----------------------------------------------
134: if (_Var5) {
	00026341:JZ 0x0002634d
END_OF_LINE
----------------------------------------------
135: uVar8 = 0x3f;
	00026343:MOV EAX,0x3f
END_OF_LINE
----------------------------------------------
138: pcVar2 = p + 2;
	00026355:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
139: p = p + 3;
	0002635e:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
140: ns = *pcVar2 + -0x30;
	00026366:MOVZX EAX,byte ptr [RAX]
	00026369:MOVSX EAX,AL
	0002636c:SUB EAX,0x30
END_OF_LINE
----------------------------------------------
141: for (digits = 2; digits < 10; digits = digits + 1) {
	00026372:MOV dword ptr [RBP + -0x54],0x2
	00026379:JMP 0x000263bb
	0002637b:MOV EDX,dword ptr [RBP + -0x58]
	0002637e:MOV EAX,EDX
	00026380:SHL EAX,0x2
	00026383:ADD EAX,EDX
	00026385:ADD EAX,EAX
	00026387:MOV dword ptr [RBP + -0x58],EAX
	0002638a:MOV RAX,qword ptr [RBP + -0x48]
	0002638e:MOVZX EAX,byte ptr [RAX]
	00026391:MOVSX EAX,AL
	00026394:MOV EDI,EAX
	00026396:CALL 0x0002d035
	0002639b:TEST AL,AL
	0002639d:JZ 0x000263b7
	0002639f:MOV RAX,qword ptr [RBP + -0x48]
	000263a3:LEA RDX,[RAX + 0x1]
	000263a7:MOV qword ptr [RBP + -0x48],RDX
	000263ab:MOVZX EAX,byte ptr [RAX]
	000263ae:MOVSX EAX,AL
	000263b1:SUB EAX,0x30
	000263b4:ADD dword ptr [RBP + -0x58],EAX
	000263b7:ADD dword ptr [RBP + -0x54],0x1
	000263bb:CMP dword ptr [RBP + -0x54],0x9
	000263bf:JLE 0x0002637b
END_OF_LINE
----------------------------------------------
142: ns = ns * 10;
	00026385:ADD EAX,EAX
END_OF_LINE
----------------------------------------------
143: _Var5 = c_isdigit((int)*p);
	0002638e:MOVZX EAX,byte ptr [RAX]
	00026391:MOVSX EAX,AL
	00026394:MOV EDI,EAX
	00026396:CALL 0x0002d035
END_OF_LINE
----------------------------------------------
144: if (_Var5) {
	0002639d:JZ 0x000263b7
END_OF_LINE
----------------------------------------------
145: ns = ns + *p + -0x30;
	000263ab:MOVZX EAX,byte ptr [RAX]
	000263ae:MOVSX EAX,AL
	000263b1:SUB EAX,0x30
	000263b4:ADD dword ptr [RBP + -0x58],EAX
END_OF_LINE
----------------------------------------------
146: p = p + 1;
	000263a3:LEA RDX,[RAX + 0x1]
	000263a7:MOV qword ptr [RBP + -0x48],RDX
	000263ab:MOVZX EAX,byte ptr [RAX]
	000263ae:MOVSX EAX,AL
	000263b1:SUB EAX,0x30
	000263b4:ADD dword ptr [RBP + -0x58],EAX
END_OF_LINE
----------------------------------------------
149: if (sign < 0) {
	000263c1:CMP dword ptr [RBP + -0x5c],0x0
	000263c5:JNS 0x000263fb
END_OF_LINE
----------------------------------------------
150: while (_Var5 = c_isdigit((int)*p), _Var5) {
	000263e3:MOVZX EAX,byte ptr [RAX]
	000263e6:MOVSX EAX,AL
	000263e9:MOV EDI,EAX
	000263eb:CALL 0x0002d035
	000263f0:TEST AL,AL
	000263f2:JNZ 0x000263c9
END_OF_LINE
----------------------------------------------
151: if (*p != '0') {
	000263cd:MOVZX EAX,byte ptr [RAX]
	000263d0:CMP AL,0x30
	000263d2:JZ 0x000263da
END_OF_LINE
----------------------------------------------
152: ns = ns + 1;
	000263d4:ADD dword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
155: p = p + 1;
	000263da:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
158: while (_Var5 = c_isdigit((int)*p), _Var5) {
	000263ff:MOVZX EAX,byte ptr [RAX]
	00026402:MOVSX EAX,AL
	00026405:MOV EDI,EAX
	00026407:CALL 0x0002d035
	0002640c:TEST AL,AL
	0002640e:JNZ 0x000263f6
END_OF_LINE
----------------------------------------------
159: p = p + 1;
	000263f6:ADD qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
161: s = value;
	00026414:JNS 0x00026446
END_OF_LINE
----------------------------------------------
162: if ((sign < 0) && (ns != 0)) {
	00026410:CMP dword ptr [RBP + -0x5c],0x0
	00026414:JNS 0x00026446
	00026416:CMP dword ptr [RBP + -0x58],0x0
	0002641a:JZ 0x00026446
END_OF_LINE
----------------------------------------------
163: if (value == -0x8000000000000000) {
	00026426:CMP qword ptr [RBP + -0x40],RAX
	0002642a:JNZ 0x00026436
END_OF_LINE
----------------------------------------------
164: uVar8 = 0x3f;
	0002642c:MOV EAX,0x3f
END_OF_LINE
----------------------------------------------
165: goto LAB_00026638;
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
167: s = value + -1;
	00026436:SUB qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
168: ns = 1000000000 - ns;
	00026440:SUB EAX,dword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
170: lvalp->intval = s;
	0002644e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
171: (lvalp->textintval).value = (long)ns;
	00026454:MOVSXD RDX,EAX
	00026457:MOV RAX,qword ptr [RBP + -0x68]
	0002645b:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
172: pc->input = p;
	00026467:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
173: if (sign == 0) {
	0002646a:CMP dword ptr [RBP + -0x5c],0x0
	0002646e:JZ 0x0002647a
END_OF_LINE
----------------------------------------------
174: uVar8 = 0x115;
	0002647a:MOV EAX,0x115
END_OF_LINE
----------------------------------------------
177: uVar8 = 0x114;
	00026470:MOV EAX,0x114
END_OF_LINE
----------------------------------------------
182: (lvalp->textintval).negative = SUB41((uint)sign >> 0x1f,0);
	00026490:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
183: (lvalp->textintval).value = value;
	0002649a:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
184: (lvalp->textintval).digits = (long)pbVar1 - (long)pc->input;
	000264a2:MOV RCX,qword ptr [RAX]
	000264a5:MOV RAX,qword ptr [RBP + -0x48]
	000264a9:SUB RAX,RCX
	000264ac:MOV RDX,RAX
	000264af:MOV RAX,qword ptr [RBP + -0x68]
	000264b3:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
185: pc->input = (char *)pbVar1;
	000264bf:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
186: if (sign == 0) {
	000264c2:CMP dword ptr [RBP + -0x5c],0x0
	000264c6:JZ 0x000264d2
END_OF_LINE
----------------------------------------------
187: uVar8 = 0x113;
	000264d2:MOV EAX,0x113
END_OF_LINE
----------------------------------------------
190: uVar8 = 0x112;
	000264c8:MOV EAX,0x112
END_OF_LINE
----------------------------------------------
193: LAB_00026638:
	00026638:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
194: if (lVar4 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002663c:SUB RDX,qword ptr FS:[0x28]
	00026645:JZ 0x0002664c
END_OF_LINE
----------------------------------------------
196: __stack_chk_fail();
	00026647:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
198: return uVar8;
	0002664d:RET
END_OF_LINE



Function: yyerror
----------------------------------------------
8: return 0;
	00026664:RET
END_OF_LINE



Function: mktime_ok
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00026681:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: t_local = t;
	00026698:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
16: tm1_local = tm1;
	00026698:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
17: tm0_local = tm0;
	00026698:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
18: tz_local = tz;
	00026698:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
19: if (t == -1) {
	00026694:CMP RAX,-0x1
	00026698:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
20: tm1_local = localtime_rz(tz,&t_local,&ltm);
	0002669a:LEA RDX,[RBP + -0x40]
	0002669e:LEA RCX,[RBP + -0x60]
	000266a2:MOV RAX,qword ptr [RBP + -0x48]
	000266a6:MOV RSI,RCX
	000266a9:MOV RDI,RAX
	000266ac:CALL 0x0002cb90
END_OF_LINE
----------------------------------------------
21: if (tm1_local == (tm *)0x0) {
	000266b5:CMP qword ptr [RBP + -0x58],0x0
	000266ba:JNZ 0x000266c3
END_OF_LINE
----------------------------------------------
22: _Var2 = false;
	000266bc:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
23: goto LAB_00026732;
	00026732:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
26: _Var2 = (tm1_local->tm_year ^ tm0_local->tm_year |
	0002671f:MOV EDX,dword ptr [RAX + 0x14]
	00026722:MOV RAX,qword ptr [RBP + -0x58]
	00026726:MOV EAX,dword ptr [RAX + 0x14]
	00026729:XOR EAX,EDX
	0002672b:OR EAX,ECX
	0002672d:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
27: tm0_local->tm_sec ^ tm1_local->tm_sec | tm1_local->tm_min ^ tm0_local->tm_min |
	000266c7:MOV EDX,dword ptr [RAX]
	000266c9:MOV RAX,qword ptr [RBP + -0x58]
	000266cd:MOV EAX,dword ptr [RAX]
	000266cf:MOV ECX,EDX
	000266d1:XOR ECX,EAX
	000266d3:MOV RAX,qword ptr [RBP + -0x50]
	000266d7:MOV EDX,dword ptr [RAX + 0x4]
	000266da:MOV RAX,qword ptr [RBP + -0x58]
	000266de:MOV EAX,dword ptr [RAX + 0x4]
	000266e1:XOR EAX,EDX
	000266e3:OR ECX,EAX
	000266e5:MOV RAX,qword ptr [RBP + -0x50]
	000266e9:MOV EDX,dword ptr [RAX + 0x8]
	000266ec:MOV RAX,qword ptr [RBP + -0x58]
	000266f0:MOV EAX,dword ptr [RAX + 0x8]
	000266f3:XOR EAX,EDX
	000266f5:OR ECX,EAX
END_OF_LINE
----------------------------------------------
28: tm1_local->tm_hour ^ tm0_local->tm_hour | tm1_local->tm_mday ^ tm0_local->tm_mday |
	000266e9:MOV EDX,dword ptr [RAX + 0x8]
	000266ec:MOV RAX,qword ptr [RBP + -0x58]
	000266f0:MOV EAX,dword ptr [RAX + 0x8]
	000266f3:XOR EAX,EDX
	000266f5:OR ECX,EAX
	000266f7:MOV RAX,qword ptr [RBP + -0x50]
	000266fb:MOV EDX,dword ptr [RAX + 0xc]
	000266fe:MOV RAX,qword ptr [RBP + -0x58]
	00026702:MOV EAX,dword ptr [RAX + 0xc]
	00026705:XOR EAX,EDX
	00026707:OR ECX,EAX
	00026709:MOV RAX,qword ptr [RBP + -0x50]
	0002670d:MOV EDX,dword ptr [RAX + 0x10]
	00026710:MOV RAX,qword ptr [RBP + -0x58]
	00026714:MOV EAX,dword ptr [RAX + 0x10]
	00026717:XOR EAX,EDX
	00026719:OR ECX,EAX
END_OF_LINE
----------------------------------------------
29: tm1_local->tm_mon ^ tm0_local->tm_mon) == 0;
	0002670d:MOV EDX,dword ptr [RAX + 0x10]
	00026710:MOV RAX,qword ptr [RBP + -0x58]
	00026714:MOV EAX,dword ptr [RAX + 0x10]
	00026717:XOR EAX,EDX
	00026719:OR ECX,EAX
	0002671b:MOV RAX,qword ptr [RBP + -0x50]
	0002671f:MOV EDX,dword ptr [RAX + 0x14]
	00026722:MOV RAX,qword ptr [RBP + -0x58]
	00026726:MOV EAX,dword ptr [RAX + 0x14]
	00026729:XOR EAX,EDX
	0002672b:OR EAX,ECX
	0002672d:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
30: LAB_00026732:
	00026732:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
31: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00026736:SUB RDX,qword ptr FS:[0x28]
	0002673f:JZ 0x00026746
END_OF_LINE
----------------------------------------------
33: __stack_chk_fail();
	00026741:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
35: return _Var2;
	00026747:RET
END_OF_LINE



Function: debug_strfdatetime
----------------------------------------------
18: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00026763:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
19: sVar3 = nstrftime(buf,(long)n,"(Y-M-D) %Y-%m-%d %H:%M:%S",tm,(timezone_t)0x0,0);
	00026775:MOVSXD RSI,EAX
	00026778:MOV RDX,qword ptr [RBP + -0x48]
	0002677c:MOV RAX,qword ptr [RBP + -0x58]
	00026780:MOV R9D,0x0
	00026786:MOV R8D,0x0
	0002678c:MOV RCX,RDX
	0002678f:LEA RDX,[0x351b2]
	00026796:MOV RDI,RAX
	00026799:CALL 0x0002d9cc
END_OF_LINE
----------------------------------------------
20: iVar2 = (int)sVar3;
	0002679e:MOV dword ptr [RBP + -0x34],EAX
END_OF_LINE
----------------------------------------------
21: if (((pc != (parser_control *)0x0) && (iVar2 < n)) && (pc->zones_seen != 0)) {
	000267a1:CMP qword ptr [RBP + -0x50],0x0
	000267a6:JZ 0x00026845
	000267ac:MOV EAX,dword ptr [RBP + -0x34]
	000267af:CMP EAX,dword ptr [RBP + -0x5c]
	000267b2:JGE 0x00026845
	000267b8:MOV RAX,qword ptr [RBP + -0x50]
	000267bc:MOV RAX,qword ptr [RAX + 0xd0]
	000267c3:TEST RAX,RAX
	000267c6:JZ 0x00026845
END_OF_LINE
----------------------------------------------
22: tz = pc->time_zone;
	000267cc:MOV EAX,dword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
23: if (((pc->local_zones_seen != 0) && (pc->zones_seen == 0)) && (0 < pc->local_isdst)) {
	000267d6:MOV RAX,qword ptr [RAX + 0xb8]
	000267dd:TEST RAX,RAX
	000267e0:JZ 0x00026804
	000267e2:MOV RAX,qword ptr [RBP + -0x50]
	000267e6:MOV RAX,qword ptr [RAX + 0xd0]
	000267ed:TEST RAX,RAX
	000267f0:JNZ 0x00026804
	000267f2:MOV RAX,qword ptr [RBP + -0x50]
	000267f6:MOV EAX,dword ptr [RAX + 0x14]
	000267f9:TEST EAX,EAX
	000267fb:JLE 0x00026804
END_OF_LINE
----------------------------------------------
24: tz = tz + 0xe10;
	000267fd:ADD dword ptr [RBP + -0x38],0xe10
END_OF_LINE
----------------------------------------------
26: pcVar4 = time_zone_str(tz,time_zone_buf);
	00026804:LEA RDX,[RBP + -0x30]
	00026808:MOV EAX,dword ptr [RBP + -0x38]
	0002680b:MOV RSI,RDX
	0002680e:MOV EDI,EAX
	00026810:CALL 0x00022b0a
END_OF_LINE
----------------------------------------------
27: snprintf(buf + iVar2,(long)(n - iVar2)," TZ=%s",pcVar4);
	0002681b:SUB EAX,dword ptr [RBP + -0x34]
	0002681e:CDQE
	00026820:MOV ECX,dword ptr [RBP + -0x34]
	00026823:MOVSXD RSI,ECX
	00026826:MOV RCX,qword ptr [RBP + -0x58]
	0002682a:LEA RDI,[RSI + RCX*0x1]
	0002682e:MOV RCX,RDX
	00026831:LEA RDX,[0x351cc]
	00026838:MOV RSI,RAX
	0002683b:MOV EAX,0x0
	00026840:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
29: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002684d:SUB RDX,qword ptr FS:[0x28]
	00026856:JZ 0x0002685d
END_OF_LINE
----------------------------------------------
31: __stack_chk_fail();
	00026858:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
33: return buf;
	00026845:MOV RAX,qword ptr [RBP + -0x58]
	00026849:MOV RDX,qword ptr [RBP + -0x8]
	0002684d:SUB RDX,qword ptr FS:[0x28]
	00026856:JZ 0x0002685d
	00026858:CALL 0x00005b00
	0002685d:LEAVE
	0002685e:RET
END_OF_LINE



Function: debug_strfdate
----------------------------------------------
15: lVar3 = *(long *)(in_FS_OFFSET + 0x28);
	00026879:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
16: uVar1 = tm->tm_mday;
	0002688c:MOV EBX,dword ptr [RAX + 0xc]
END_OF_LINE
----------------------------------------------
17: iVar2 = tm->tm_mon;
	00026893:MOV EAX,dword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
18: pcVar4 = tm_year_str(tm->tm_year,tm_year_buf);
	0002689e:MOV EAX,dword ptr [RAX + 0x14]
	000268a1:LEA RDX,[RBP + -0x25]
	000268a5:MOV RSI,RDX
	000268a8:MOV EDI,EAX
	000268aa:CALL 0x00025bbe
END_OF_LINE
----------------------------------------------
19: snprintf(buf,(long)n,"(Y-M-D) %s-%02d-%02d",pcVar4,(ulong)(iVar2 + 1),(ulong)uVar1);
	00026896:LEA R12D,[RAX + 0x1]
	0002689a:MOV RAX,qword ptr [RBP + -0x38]
	0002689e:MOV EAX,dword ptr [RAX + 0x14]
	000268a1:LEA RDX,[RBP + -0x25]
	000268a5:MOV RSI,RDX
	000268a8:MOV EDI,EAX
	000268aa:CALL 0x00025bbe
	000268af:MOV RDX,RAX
	000268b2:MOV EAX,dword ptr [RBP + -0x44]
	000268b5:MOVSXD RSI,EAX
	000268b8:MOV RAX,qword ptr [RBP + -0x40]
	000268bc:MOV R9D,EBX
	000268bf:MOV R8D,R12D
	000268c2:MOV RCX,RDX
	000268c5:LEA RDX,[0x351d3]
	000268cc:MOV RDI,RAX
	000268cf:MOV EAX,0x0
	000268d4:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
20: if (lVar3 != *(long *)(in_FS_OFFSET + 0x28)) {
	000268e1:SUB RDX,qword ptr FS:[0x28]
	000268ea:JZ 0x000268f1
END_OF_LINE
----------------------------------------------
22: __stack_chk_fail();
	000268ec:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
24: return buf;
	000268d9:MOV RAX,qword ptr [RBP + -0x40]
	000268dd:MOV RDX,qword ptr [RBP + -0x18]
	000268e1:SUB RDX,qword ptr FS:[0x28]
	000268ea:JZ 0x000268f1
	000268ec:CALL 0x00005b00
	000268f1:ADD RSP,0x40
	000268f5:POP RBX
	000268f6:POP R12
	000268f8:POP RBP
	000268f9:RET
END_OF_LINE



Function: debug_strftime
----------------------------------------------
9: snprintf(buf,(long)n,"%02d:%02d:%02d",(ulong)(uint)tm->tm_hour,(ulong)(uint)tm->tm_min,
	0002691b:MOV ECX,dword ptr [RAX + 0x4]
	0002691e:MOV RAX,qword ptr [RBP + -0x8]
	00026922:MOV EDX,dword ptr [RAX + 0x8]
	00026925:MOV EAX,dword ptr [RBP + -0x14]
	00026928:MOVSXD RSI,EAX
	0002692b:MOV RAX,qword ptr [RBP + -0x10]
	0002692f:MOV R9D,EDI
	00026932:MOV R8D,ECX
	00026935:MOV ECX,EDX
	00026937:LEA RDX,[0x351e8]
	0002693e:MOV RDI,RAX
	00026941:MOV EAX,0x0
	00026946:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
10: (ulong)(uint)tm->tm_sec);
	00026915:MOV EDI,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
11: return buf;
	0002694b:MOV RAX,qword ptr [RBP + -0x10]
	0002694f:LEAVE
	00026950:RET
END_OF_LINE



Function: debug_mktime_not_ok
----------------------------------------------
35: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002697d:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
36: bVar10 = tm0->tm_sec != tm1->tm_sec;
	00026993:MOV EDX,dword ptr [RAX]
	00026995:MOV RAX,qword ptr [RBP + -0x90]
	0002699c:MOV EAX,dword ptr [RAX]
	0002699e:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
37: bVar11 = tm0->tm_min != tm1->tm_min;
	000269ad:MOV EDX,dword ptr [RAX + 0x4]
	000269b0:MOV RAX,qword ptr [RBP + -0x90]
	000269b7:MOV EAX,dword ptr [RAX + 0x4]
	000269ba:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
38: bVar12 = tm0->tm_hour == tm1->tm_hour;
	000269c9:MOV EDX,dword ptr [RAX + 0x8]
	000269cc:MOV RAX,qword ptr [RBP + -0x90]
	000269d3:MOV EAX,dword ptr [RAX + 0x8]
	000269d6:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
39: bVar13 = tm0->tm_mday != tm1->tm_mday;
	000269e5:MOV EDX,dword ptr [RAX + 0xc]
	000269e8:MOV RAX,qword ptr [RBP + -0x90]
	000269ef:MOV EAX,dword ptr [RAX + 0xc]
	000269f2:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
40: bVar14 = tm0->tm_mon != tm1->tm_mon;
	00026a01:MOV EDX,dword ptr [RAX + 0x10]
	00026a04:MOV RAX,qword ptr [RBP + -0x90]
	00026a0b:MOV EAX,dword ptr [RAX + 0x10]
	00026a0e:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
41: bVar15 = tm0->tm_year != tm1->tm_year;
	00026a1d:MOV EDX,dword ptr [RAX + 0x14]
	00026a20:MOV RAX,qword ptr [RBP + -0x90]
	00026a27:MOV EAX,dword ptr [RAX + 0x14]
	00026a2a:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
42: if (((((bVar10) || (bVar11)) || (bVar12)) || ((bVar13 || (bVar14)))) || (bVar15)) {
	00026a36:JZ 0x00026a62
	00026a38:CMP byte ptr [RBP + -0x7a],0x0
	00026a3c:JZ 0x00026a62
	00026a3e:MOVZX EAX,byte ptr [RBP + -0x79]
	00026a42:XOR EAX,0x1
	00026a45:TEST AL,AL
	00026a47:JZ 0x00026a62
	00026a49:CMP byte ptr [RBP + -0x78],0x0
	00026a4d:JZ 0x00026a62
	00026a4f:CMP byte ptr [RBP + -0x77],0x0
	00026a53:JZ 0x00026a62
	00026a55:CMP byte ptr [RBP + -0x76],0x0
	00026a59:JZ 0x00026a62
END_OF_LINE
----------------------------------------------
43: bVar2 = false;
	00026a62:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
46: bVar2 = true;
	00026a5b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
48: if (pc->parse_datetime_debug == true) {
	00026a75:MOVZX EAX,byte ptr [RAX + 0xd9]
	00026a7c:XOR EAX,0x1
	00026a7f:TEST AL,AL
	00026a81:JNZ 0x00026cb7
END_OF_LINE
----------------------------------------------
49: dbg_printf("error: invalid date/time value:\n");
	00026a96:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
50: pcVar3 = debug_strfdatetime(tm0,pc,tmp,100);
	00026a9b:LEA RDX,[RBP + -0x70]
	00026a9f:MOV RSI,qword ptr [RBP + -0x98]
	00026aa6:MOV RAX,qword ptr [RBP + -0x88]
	00026aad:MOV ECX,0x64
	00026ab2:MOV RDI,RAX
	00026ab5:CALL 0x00026748
END_OF_LINE
----------------------------------------------
51: dbg_printf("    user provided time: \'%s\'\n",pcVar3);
	00026acc:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
52: pcVar3 = debug_strfdatetime(tm1,pc,tmp,100);
	00026ad1:LEA RDX,[RBP + -0x70]
	00026ad5:MOV RSI,qword ptr [RBP + -0x98]
	00026adc:MOV RAX,qword ptr [RBP + -0x90]
	00026ae3:MOV ECX,0x64
	00026ae8:MOV RDI,RAX
	00026aeb:CALL 0x00026748
END_OF_LINE
----------------------------------------------
53: dbg_printf("       normalized time: \'%s\'\n",pcVar3);
	00026b02:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
54: if (bVar10) {
	00026b0b:JZ 0x00026b16
END_OF_LINE
----------------------------------------------
55: puVar7 = &DAT_00035255;
	00026b16:LEA RSI,[0x35255]
END_OF_LINE
----------------------------------------------
58: puVar7 = &DAT_000346f4;
	00026b0d:LEA RSI,[0x346f4]
END_OF_LINE
----------------------------------------------
60: if (bVar11) {
	00026b21:JZ 0x00026b2c
END_OF_LINE
----------------------------------------------
61: puVar5 = &DAT_00035255;
	00026b2c:LEA RCX,[0x35255]
END_OF_LINE
----------------------------------------------
64: puVar5 = &DAT_000346f4;
	00026b23:LEA RCX,[0x346f4]
END_OF_LINE
----------------------------------------------
66: if (bVar12) {
	00026b37:JZ 0x00026b42
END_OF_LINE
----------------------------------------------
67: puVar6 = &DAT_000346f4;
	00026b39:LEA RDX,[0x346f4]
END_OF_LINE
----------------------------------------------
70: puVar6 = &DAT_00035255;
	00026b42:LEA RDX,[0x35255]
END_OF_LINE
----------------------------------------------
72: if (bVar13) {
	00026b4d:JZ 0x00026b58
END_OF_LINE
----------------------------------------------
73: puVar9 = &DAT_00035255;
	00026b58:LEA R8,[0x35255]
END_OF_LINE
----------------------------------------------
76: puVar9 = &DAT_000346f4;
	00026b4f:LEA R8,[0x346f4]
END_OF_LINE
----------------------------------------------
78: if (bVar14) {
	00026b63:JZ 0x00026b6e
END_OF_LINE
----------------------------------------------
79: puVar8 = &DAT_00035255;
	00026b6e:LEA RDI,[0x35255]
END_OF_LINE
----------------------------------------------
82: puVar8 = &DAT_000346f4;
	00026b65:LEA RDI,[0x346f4]
END_OF_LINE
----------------------------------------------
84: if (bVar15) {
	00026b79:JZ 0x00026b84
END_OF_LINE
----------------------------------------------
85: puVar4 = &DAT_00035258;
	00026b84:LEA RAX,[0x35258]
END_OF_LINE
----------------------------------------------
88: puVar4 = &DAT_000346f4;
	00026b7b:LEA RAX,[0x346f4]
END_OF_LINE
----------------------------------------------
90: i = snprintf(tmp,100,"                                 %4s %2s %2s %2s %2s %2s",puVar4,puVar8,
	00026b8b:LEA R10,[RBP + -0x70]
	00026b8f:SUB RSP,0x8
	00026b93:PUSH RSI
	00026b94:PUSH RCX
	00026b95:PUSH RDX
	00026b96:MOV R9,R8
	00026b99:MOV R8,RDI
	00026b9c:MOV RCX,RAX
	00026b9f:LEA RAX,[0x35260]
	00026ba6:MOV RDX,RAX
	00026ba9:MOV ESI,0x64
	00026bae:MOV RDI,R10
	00026bb1:MOV EAX,0x0
	00026bb6:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
91: puVar9,puVar6,puVar5,puVar7);
	00026bb6:CALL 0x00005b90
END_OF_LINE
----------------------------------------------
92: if (-1 < i) {
	00026bc2:CMP dword ptr [RBP + -0x74],0x0
	00026bc6:JS 0x00026bfe
END_OF_LINE
----------------------------------------------
93: if (99 < (uint)i) {
	00026bce:JBE 0x00026bdd
END_OF_LINE
----------------------------------------------
94: i = 99;
	00026bd0:MOV dword ptr [RBP + -0x74],0x63
END_OF_LINE
----------------------------------------------
96: while ((0 < i && (tmp[i + -1] == ' '))) {
	00026be1:JLE 0x00026bf4
	00026be3:MOV EAX,dword ptr [RBP + -0x74]
	00026be6:SUB EAX,0x1
	00026be9:CDQE
	00026beb:MOVZX EAX,byte ptr [RBP + RAX*0x1 + -0x70]
	00026bf0:CMP AL,0x20
	00026bf2:JZ 0x00026bd9
END_OF_LINE
----------------------------------------------
97: i = i + -1;
	00026bd9:SUB dword ptr [RBP + -0x74],0x1
END_OF_LINE
----------------------------------------------
99: tmp[i] = '\0';
	00026bf7:CDQE
	00026bf9:MOV byte ptr [RBP + RAX*0x1 + -0x70],0x0
END_OF_LINE
----------------------------------------------
101: dbg_printf("%s\n",tmp);
	00026bfe:LEA RAX,[RBP + -0x70]
	00026c02:MOV RSI,RAX
	00026c05:LEA RAX,[0x35299]
	00026c0c:MOV RDI,RAX
	00026c0f:MOV EAX,0x0
	00026c14:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
102: dbg_printf("     possible reasons:\n");
	00026c28:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
103: if (bVar2) {
	00026c31:JZ 0x00026c47
END_OF_LINE
----------------------------------------------
104: dbg_printf("       non-existing due to daylight-saving time;\n");
	00026c42:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
106: if ((bVar13) && (bVar14)) {
	00026c50:JZ 0x00026c71
	00026c52:MOVZX EAX,byte ptr [RBP + -0x77]
	00026c56:XOR EAX,0x1
	00026c59:TEST AL,AL
	00026c5b:JZ 0x00026c71
END_OF_LINE
----------------------------------------------
107: dbg_printf("       invalid day/month combination;\n");
	00026c6c:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
109: dbg_printf("       numeric values overflow;\n");
	00026c80:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
110: if (time_zone_seen) {
	00026c8c:JZ 0x00026c97
END_OF_LINE
----------------------------------------------
111: pcVar3 = "incorrect timezone";
	00026c8e:LEA RAX,[0x35339]
END_OF_LINE
----------------------------------------------
114: pcVar3 = "missing timezone";
	00026c97:LEA RAX,[0x3534c]
END_OF_LINE
----------------------------------------------
116: dbg_printf("       %s\n",pcVar3);
	00026cb0:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
118: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00026cbc:SUB RAX,qword ptr FS:[0x28]
	00026cc5:JZ 0x00026ccc
END_OF_LINE
----------------------------------------------
120: __stack_chk_fail();
	00026cc7:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
122: return;
	00026ccd:RET
END_OF_LINE



Function: parse_datetime
----------------------------------------------
15: name = getenv("TZ");
	00026cf0:CALL 0x00005880
END_OF_LINE
----------------------------------------------
16: tzdefault = tzalloc(name);
	00026d00:CALL 0x0002c6e0
END_OF_LINE
----------------------------------------------
17: if (tzdefault == (timezone_t)0x0) {
	00026d09:CMP qword ptr [RBP + -0x8],0x0
	00026d0e:JNZ 0x00026d17
END_OF_LINE
----------------------------------------------
18: _Var1 = false;
	00026d10:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
21: _Var1 = parse_datetime2(result,p,now,0,tzdefault,name);
	00026d39:CALL 0x00026d53
END_OF_LINE
----------------------------------------------
22: tzfree(tzdefault);
	00026d48:CALL 0x0002c969
END_OF_LINE
----------------------------------------------
24: return _Var1;
	00026d52:RET
END_OF_LINE



Function: parse_datetime2
----------------------------------------------
87: lVar3 = *(long *)(in_FS_OFFSET + 0x28);
	00026d90:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
88: ok = false;
	00026d9f:MOV byte ptr [RBP + -0x4e3],0x0
END_OF_LINE
----------------------------------------------
89: sVar10 = strlen(p);
	00026db0:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
90: tz1alloc = (char *)0x0;
	00026dc6:MOV qword ptr [RBP + -0x4a0],0x0
END_OF_LINE
----------------------------------------------
91: now_local = now;
	00026dd9:JNZ 0x00026df8
END_OF_LINE
----------------------------------------------
92: if (now == (timespec *)0x0) {
	00026dd1:CMP qword ptr [RBP + -0x508],0x0
	00026dd9:JNZ 0x00026df8
END_OF_LINE
----------------------------------------------
93: gettime(&gettime_buffer);
	00026ddb:LEA RAX,[RBP + -0x410]
	00026de2:MOV RDI,RAX
	00026de5:CALL 0x0001eb5c
END_OF_LINE
----------------------------------------------
94: now_local = &gettime_buffer;
	00026dea:LEA RAX,[RBP + -0x410]
END_OF_LINE
----------------------------------------------
96: lVar15 = now_local->tv_sec;
	00026dff:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
97: _Var4 = now_local->tv_nsec;
	00026e10:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
98: p_local = p;
	00026e1a:JMP 0x00026e24
END_OF_LINE
----------------------------------------------
99: while (_Var6 = c_isspace((uint)(byte)*p_local), _Var6) {
	00026e2b:MOVZX EAX,byte ptr [RAX]
	00026e2e:MOV byte ptr [RBP + -0x4e1],AL
	00026e34:MOVZX EAX,byte ptr [RBP + -0x4e1]
	00026e3b:MOV EDI,EAX
	00026e3d:CALL 0x0002d10f
	00026e42:TEST AL,AL
	00026e44:JNZ 0x00026e1c
END_OF_LINE
----------------------------------------------
100: p_local = p_local + 1;
	00026e1c:ADD qword ptr [RBP + -0x500],0x1
END_OF_LINE
----------------------------------------------
102: iVar7 = strncmp(p_local,"TZ=\"",4);
	00026e6d:CALL 0x00005920
END_OF_LINE
----------------------------------------------
103: tzstring_local = tzstring;
	00026e74:JNZ 0x0002705c
END_OF_LINE
----------------------------------------------
104: tz = tzdefault;
	00026e74:JNZ 0x0002705c
END_OF_LINE
----------------------------------------------
105: if (iVar7 == 0) {
	00026e72:TEST EAX,EAX
	00026e74:JNZ 0x0002705c
END_OF_LINE
----------------------------------------------
106: tzsize = 1;
	00026e8c:MOV qword ptr [RBP + -0x488],0x1
END_OF_LINE
----------------------------------------------
107: s = p_local + 4;
	00026e81:ADD RAX,0x4
	00026e85:MOV qword ptr [RBP + -0x460],RAX
	00026e8c:MOV qword ptr [RBP + -0x488],0x1
	00026e97:MOV RAX,qword ptr [RBP + -0x460]
	00026e9e:MOV qword ptr [RBP + -0x480],RAX
	00026ea5:JMP 0x0002704a
END_OF_LINE
----------------------------------------------
108: LAB_0002704a:
	0002704a:MOV RAX,qword ptr [RBP + -0x480]
END_OF_LINE
----------------------------------------------
109: tz = tzdefault;
	00027056:JNZ 0x00026eaa
END_OF_LINE
----------------------------------------------
110: if (*s != '\0') {
	00027051:MOVZX EAX,byte ptr [RAX]
	00027054:TEST AL,AL
	00027056:JNZ 0x00026eaa
END_OF_LINE
----------------------------------------------
111: tz = tzdefault;
	00026eb6:JNZ 0x00026ee9
END_OF_LINE
----------------------------------------------
112: if (*s != '\\') {
	00026eb1:MOVZX EAX,byte ptr [RAX]
	00026eb4:CMP AL,0x5c
	00026eb6:JNZ 0x00026ee9
END_OF_LINE
----------------------------------------------
113: if (*s != '\"') goto LAB_0002703a;
	00026ef0:MOVZX EAX,byte ptr [RAX]
	00026ef3:CMP AL,0x22
	00026ef5:JNZ 0x0002703a
	00026efb:LEA RAX,[RBP + -0x100]
	00026f02:MOV qword ptr [RBP + -0x478],RAX
	00026f09:CMP qword ptr [RBP + -0x488],0x64
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
	00026f37:MOV RAX,qword ptr [RBP + -0x4a0]
	00026f3e:MOV qword ptr [RBP + -0x478],RAX
	00026f45:MOV RAX,qword ptr [RBP + -0x478]
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
	00026f53:MOV RAX,qword ptr [RBP + -0x460]
	00026f5a:MOV qword ptr [RBP + -0x480],RAX
	00026f61:JMP 0x00026fa2
	00026f63:MOV RAX,qword ptr [RBP + -0x480]
	00026f6a:MOVZX EAX,byte ptr [RAX]
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
	00026fa2:MOV RAX,qword ptr [RBP + -0x480]
	00026fa9:MOVZX EAX,byte ptr [RAX]
	00026fac:CMP AL,0x22
	00026fae:JNZ 0x00026f63
	00026fb0:MOV RAX,qword ptr [RBP + -0x470]
	00026fb7:MOV byte ptr [RAX],0x0
	00026fba:MOV RAX,qword ptr [RBP + -0x478]
	00026fc1:MOV RDI,RAX
	00026fc4:CALL 0x0002c6e0
	00026fc9:MOV qword ptr [RBP + -0x458],RAX
	00026fd0:CMP qword ptr [RBP + -0x458],0x0
	00026fd8:JZ 0x000289f6
	00026fde:MOV RAX,qword ptr [RBP + -0x458]
	00026fe5:MOV qword ptr [RBP + -0x490],RAX
	00026fec:MOV RAX,qword ptr [RBP + -0x478]
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
	00026ffa:MOV RAX,qword ptr [RBP + -0x480]
	00027001:ADD RAX,0x1
	00027005:MOV qword ptr [RBP + -0x500],RAX
	0002700c:JMP 0x00027016
	0002700e:ADD qword ptr [RBP + -0x500],0x1
	00027016:MOV RAX,qword ptr [RBP + -0x500]
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
	00027034:TEST AL,AL
	00027036:JNZ 0x0002700e
	00027038:JMP 0x0002705c
	0002703a:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
114: tz1string = tz1buf;
	00026efb:LEA RAX,[RBP + -0x100]
END_OF_LINE
----------------------------------------------
115: if ((tzsize < 0x65) ||
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
END_OF_LINE
----------------------------------------------
116: (tz1alloc = (char *)malloc(tzsize), tz1string = tz1alloc, tz1alloc != (char *)0x0)) {
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
END_OF_LINE
----------------------------------------------
117: z = tz1string;
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
END_OF_LINE
----------------------------------------------
118: for (s = p_local + 4; *s != '\"'; s = s + (cVar2 == '\\') + 1) {
	00026e81:ADD RAX,0x4
	00026e85:MOV qword ptr [RBP + -0x460],RAX
	00026e8c:MOV qword ptr [RBP + -0x488],0x1
	00026e97:MOV RAX,qword ptr [RBP + -0x460]
	00026e9e:MOV qword ptr [RBP + -0x480],RAX
	00026ea5:JMP 0x0002704a
	00026eaa:MOV RAX,qword ptr [RBP + -0x480]
	00026eb1:MOVZX EAX,byte ptr [RAX]
	00026eb4:CMP AL,0x5c
	00026eb6:JNZ 0x00026ee9
	00026eb8:ADD qword ptr [RBP + -0x480],0x1
	00026ec0:MOV RAX,qword ptr [RBP + -0x480]
	00026ec7:MOVZX EAX,byte ptr [RAX]
	00026eca:CMP AL,0x5c
	00026ecc:JZ 0x0002703a
	00026ed2:MOV RAX,qword ptr [RBP + -0x480]
	00026ed9:MOVZX EAX,byte ptr [RAX]
	00026edc:CMP AL,0x22
	00026ede:JZ 0x0002703a
	00026ee4:JMP 0x0002705c
	00026ee9:MOV RAX,qword ptr [RBP + -0x480]
	00026ef0:MOVZX EAX,byte ptr [RAX]
	00026ef3:CMP AL,0x22
	00026ef5:JNZ 0x0002703a
	00026efb:LEA RAX,[RBP + -0x100]
	00026f02:MOV qword ptr [RBP + -0x478],RAX
	00026f09:CMP qword ptr [RBP + -0x488],0x64
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
	00026f37:MOV RAX,qword ptr [RBP + -0x4a0]
	00026f3e:MOV qword ptr [RBP + -0x478],RAX
	00026f45:MOV RAX,qword ptr [RBP + -0x478]
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
	00026f53:MOV RAX,qword ptr [RBP + -0x460]
	00026f5a:MOV qword ptr [RBP + -0x480],RAX
	00026f61:JMP 0x00026fa2
	00026f63:MOV RAX,qword ptr [RBP + -0x480]
	00026f6a:MOVZX EAX,byte ptr [RAX]
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
	00026fa2:MOV RAX,qword ptr [RBP + -0x480]
	00026fa9:MOVZX EAX,byte ptr [RAX]
	00026fac:CMP AL,0x22
	00026fae:JNZ 0x00026f63
END_OF_LINE
----------------------------------------------
119: cVar2 = *s;
	00026f6a:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
120: *z = s[cVar2 == '\\'];
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
121: z = z + 1;
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
123: *z = '\0';
	00026fb7:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
124: ptVar14 = tzalloc(tz1string);
	00026fc4:CALL 0x0002c6e0
END_OF_LINE
----------------------------------------------
125: if (ptVar14 == (timezone_t)0x0) goto LAB_00028a18;
	00026fd0:CMP qword ptr [RBP + -0x458],0x0
	00026fd8:JZ 0x000289f6
	00026fde:MOV RAX,qword ptr [RBP + -0x458]
	00026fe5:MOV qword ptr [RBP + -0x490],RAX
	00026fec:MOV RAX,qword ptr [RBP + -0x478]
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
	00026ffa:MOV RAX,qword ptr [RBP + -0x480]
	00027001:ADD RAX,0x1
	00027005:MOV qword ptr [RBP + -0x500],RAX
	0002700c:JMP 0x00027016
	0002700e:ADD qword ptr [RBP + -0x500],0x1
	00027016:MOV RAX,qword ptr [RBP + -0x500]
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
	00027034:TEST AL,AL
	00027036:JNZ 0x0002700e
	00027038:JMP 0x0002705c
	0002703a:ADD qword ptr [RBP + -0x480],0x1
	00027042:ADD qword ptr [RBP + -0x488],0x1
	0002704a:MOV RAX,qword ptr [RBP + -0x480]
	00027051:MOVZX EAX,byte ptr [RAX]
	00027054:TEST AL,AL
	00027056:JNZ 0x00026eaa
	0002705c:MOV RCX,qword ptr [RBP + -0x508]
	00027063:LEA RDX,[RBP + -0x380]
	0002706a:MOV RAX,qword ptr [RBP + -0x490]
	00027071:MOV RSI,RCX
	00027074:MOV RDI,RAX
	00027077:CALL 0x0002cb90
	0002707c:TEST RAX,RAX
	0002707f:JZ 0x000289f9
	00027085:MOV RAX,qword ptr [RBP + -0x500]
	0002708c:MOVZX EAX,byte ptr [RAX]
	0002708f:TEST AL,AL
	00027091:JNZ 0x000270a1
	00027093:LEA RAX,[0x35370]
	0002709a:MOV qword ptr [RBP + -0x500],RAX
	000270a1:MOV RAX,qword ptr [RBP + -0x500]
	000270a8:MOV qword ptr [RBP + -0x2c0],RAX
	000270af:MOV EAX,dword ptr [RBP + -0x50c]
	000270b5:AND EAX,0x1
	000270b8:TEST EAX,EAX
	000270ba:SETNZ AL
	000270bd:MOV byte ptr [RBP + -0x1e7],AL
	000270c3:MOV EAX,dword ptr [RBP + -0x36c]
	000270c9:MOV EDX,0x0
	000270ce:CDQE
	000270d0:ADD RAX,0x76c
	000270d6:MOV qword ptr [RBP + -0x298],RAX
	000270dd:MOV RAX,RDX
	000270e0:AND EAX,0x1
	000270e3:TEST AL,AL
	000270e5:JZ 0x0002710f
	000270e7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000270ee:TEST AL,AL
	000270f0:JZ 0x000289fc
	000270f6:LEA RAX,[0x35378]
	000270fd:MOV RDI,RAX
	00027100:MOV EAX,0x0
	00027105:CALL 0x000222e9
	0002710a:JMP 0x000289fc
	0002710f:MOV qword ptr [RBP + -0x290],0x0
	0002711a:MOV EAX,dword ptr [RBP + -0x370]
	00027120:ADD EAX,0x1
	00027123:CDQE
	00027125:MOV qword ptr [RBP + -0x288],RAX
	0002712c:MOV EAX,dword ptr [RBP + -0x374]
	00027132:CDQE
	00027134:MOV qword ptr [RBP + -0x280],RAX
	0002713b:MOV EAX,dword ptr [RBP + -0x378]
	00027141:CDQE
	00027143:MOV qword ptr [RBP + -0x278],RAX
	0002714a:MOV EAX,dword ptr [RBP + -0x37c]
	00027150:CDQE
	00027152:MOV qword ptr [RBP + -0x270],RAX
	00027159:MOV EAX,dword ptr [RBP + -0x380]
	0002715f:CDQE
	00027161:MOV qword ptr [RBP + -0x268],RAX
	00027168:MOV EAX,dword ptr [RBP + -0x4d8]
	0002716e:CDQE
	00027170:MOV qword ptr [RBP + -0x260],RAX
	00027177:MOV EAX,dword ptr [RBP + -0x360]
	0002717d:MOV dword ptr [RBP + -0x3e0],EAX
	00027183:MOV dword ptr [RBP + -0x2a4],0x2
	0002718d:MOV qword ptr [RBP + -0x258],0x0
	00027198:MOV qword ptr [RBP + -0x250],0x0
	000271a3:MOV qword ptr [RBP + -0x248],0x0
	000271ae:MOV qword ptr [RBP + -0x240],0x0
	000271b9:MOV qword ptr [RBP + -0x238],0x0
	000271c4:MOV qword ptr [RBP + -0x230],0x0
	000271cf:MOV qword ptr [RBP + -0x228],0x0
	000271da:MOV byte ptr [RBP + -0x220],0x0
	000271e1:MOV byte ptr [RBP + -0x21f],0x0
	000271e8:MOV qword ptr [RBP + -0x218],0x0
	000271f3:MOV qword ptr [RBP + -0x210],0x0
	000271fe:MOV qword ptr [RBP + -0x1f8],0x0
	00027209:MOV qword ptr [RBP + -0x208],0x0
	00027214:MOV qword ptr [RBP + -0x200],0x0
	0002721f:MOV qword ptr [RBP + -0x1f0],0x0
	0002722a:MOV byte ptr [RBP + -0x1e8],0x0
	00027231:MOV byte ptr [RBP + -0x1e6],0x0
	00027238:MOV byte ptr [RBP + -0x1e5],0x0
	0002723f:MOV byte ptr [RBP + -0x1e3],0x0
	00027246:MOV byte ptr [RBP + -0x1e4],0x0
	0002724d:MOV byte ptr [RBP + -0x1e2],0x0
	00027254:MOV byte ptr [RBP + -0x1e1],0x0
	0002725b:MOV byte ptr [RBP + -0x1e0],0x0
	00027262:MOV RAX,qword ptr [RBP + -0x350]
	00027269:MOV qword ptr [RBP + -0x1d8],RAX
	00027270:MOV dword ptr [RBP + -0x1d0],0x10d
	0002727a:MOV EAX,dword ptr [RBP + -0x360]
	00027280:MOV dword ptr [RBP + -0x1cc],EAX
	00027286:MOV qword ptr [RBP + -0x1c8],0x0
	00027291:MOV dword ptr [RBP + -0x4dc],0x1
	0002729b:JMP 0x00027378
	000272a0:MOV EAX,dword ptr [RBP + -0x4dc]
	000272a6:IMUL EAX,EAX,0x76a700
	000272ac:MOVSXD RDX,EAX
	000272af:MOV ECX,0x0
	000272b4:MOV RAX,qword ptr [RBP + -0x498]
	000272bb:ADD RAX,RDX
	000272be:JNO 0x000272c5
	000272c0:MOV ECX,0x1
	000272c5:MOV qword ptr [RBP + -0x3c0],RAX
	000272cc:MOV RAX,RCX
	000272cf:AND EAX,0x1
	000272d2:TEST AL,AL
	000272d4:JNZ 0x00027385
	000272da:MOV RAX,qword ptr [RBP + -0x3c0]
	000272e1:MOV RDI,RAX
	000272e4:CALL 0x000222c3
	000272e9:TEST AL,AL
	000272eb:JNZ 0x00027385
	000272f1:MOV RAX,qword ptr [RBP + -0x3c0]
	000272f8:MOV qword ptr [RBP + -0x340],RAX
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
	00027340:MOV RAX,qword ptr [RBP + -0x2d0]
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
	00027358:MOV EAX,dword ptr [RBP + -0x2e0]
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
	0002736f:JMP 0x00027385
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
	00027378:CMP dword ptr [RBP + -0x4dc],0x3
	0002737f:JLE 0x000272a0
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
	0002738c:TEST RAX,RAX
	0002738f:JZ 0x000273cf
	00027391:MOV RAX,qword ptr [RBP + -0x1c8]
	00027398:TEST RAX,RAX
	0002739b:JZ 0x000273cf
	0002739d:MOV RDX,qword ptr [RBP + -0x1c8]
	000273a4:MOV RAX,qword ptr [RBP + -0x1d8]
	000273ab:MOV RSI,RDX
	000273ae:MOV RDI,RAX
	000273b1:CALL 0x00005ce0
	000273b6:TEST EAX,EAX
	000273b8:JNZ 0x000273cf
	000273ba:MOV dword ptr [RBP + -0x1cc],0xffffffff
	000273c4:MOV qword ptr [RBP + -0x1c8],0x0
	000273cf:LEA RAX,[RBP + -0x2c0]
	000273d6:MOV RDI,RAX
	000273d9:CALL 0x000234b7
	000273de:TEST EAX,EAX
	000273e0:JZ 0x0002742d
	000273e2:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000273e9:TEST AL,AL
	000273eb:JZ 0x000289ff
	000273f1:MOV RDX,qword ptr [RBP + -0x2c0]
	000273f8:MOV RAX,qword ptr [RBP + -0x2c0]
	000273ff:CMP qword ptr [RBP + -0x468],RAX
	00027406:JA 0x00027411
	00027408:LEA RAX,[0x3539a]
	0002740f:JMP 0x00027418
	00027411:LEA RAX,[0x353b8]
	00027418:MOV RSI,RDX
	0002741b:MOV RDI,RAX
	0002741e:MOV EAX,0x0
	00027423:CALL 0x000222e9
	00027428:JMP 0x000289ff
	0002742d:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027434:TEST AL,AL
	00027436:JZ 0x00027643
	0002743c:LEA RAX,[0x353e0]
	00027443:MOV RDI,RAX
	00027446:MOV EAX,0x0
	0002744b:CALL 0x000222e9
	00027450:MOVZX EAX,byte ptr [RBP + -0x220]
	00027457:TEST AL,AL
	00027459:JZ 0x00027486
	0002745b:MOV RAX,qword ptr [0x0003dfe0]
	00027462:MOV RAX,qword ptr [RAX]
	00027465:MOV RCX,RAX
	00027468:MOV EDX,0x18
	0002746d:MOV ESI,0x1
	00027472:LEA RAX,[0x353f1]
	00027479:MOV RDI,RAX
	0002747c:CALL 0x00006010
	00027481:JMP 0x0002759d
	00027486:MOV RAX,qword ptr [RBP + -0x1f0]
	0002748d:TEST RAX,RAX
	00027490:JZ 0x000274bd
	00027492:MOV RAX,qword ptr [0x0003dfe0]
	00027499:MOV RAX,qword ptr [RAX]
	0002749c:MOV RCX,RAX
	0002749f:MOV EDX,0x17
	000274a4:MOV ESI,0x1
	000274a9:LEA RAX,[0x3540a]
	000274b0:MOV RDI,RAX
	000274b3:CALL 0x00006010
	000274b8:JMP 0x0002759d
	000274bd:CMP qword ptr [RBP + -0x520],0x0
	000274c5:JZ 0x00027577
	000274cb:MOV RAX,qword ptr [RBP + -0x490]
	000274d2:CMP RAX,qword ptr [RBP + -0x518]
	000274d9:JZ 0x00027508
	000274db:MOV RAX,qword ptr [0x0003dfe0]
	000274e2:MOV RAX,qword ptr [RAX]
	000274e5:MOV RDX,qword ptr [RBP + -0x520]
	000274ec:LEA RCX,[0x35422]
	000274f3:MOV RSI,RCX
	000274f6:MOV RDI,RAX
	000274f9:MOV EAX,0x0
	000274fe:CALL 0x00005d30
	00027503:JMP 0x0002759d
	00027508:MOV RAX,qword ptr [RBP + -0x520]
	0002750f:LEA RDX,[0x35439]
	00027516:MOV RSI,RDX
	00027519:MOV RDI,RAX
	0002751c:CALL 0x00005ce0
	00027521:TEST EAX,EAX
	00027523:JNZ 0x0002754d
	00027525:MOV RAX,qword ptr [0x0003dfe0]
	0002752c:MOV RAX,qword ptr [RAX]
	0002752f:MOV RCX,RAX
	00027532:MOV EDX,0x21
	00027537:MOV ESI,0x1
	0002753c:LEA RAX,[0x35440]
	00027543:MOV RDI,RAX
	00027546:CALL 0x00006010
	0002754b:JMP 0x0002759d
	0002754d:MOV RAX,qword ptr [0x0003dfe0]
	00027554:MOV RAX,qword ptr [RAX]
	00027557:MOV RDX,qword ptr [RBP + -0x520]
	0002755e:LEA RCX,[0x35462]
	00027565:MOV RSI,RCX
	00027568:MOV RDI,RAX
	0002756b:MOV EAX,0x0
	00027570:CALL 0x00005d30
	00027575:JMP 0x0002759d
	00027577:MOV RAX,qword ptr [0x0003dfe0]
	0002757e:MOV RAX,qword ptr [RAX]
	00027581:MOV RCX,RAX
	00027584:MOV EDX,0xe
	00027589:MOV ESI,0x1
	0002758e:LEA RAX,[0x3547c]
	00027595:MOV RDI,RAX
	00027598:CALL 0x00006010
	0002759d:MOV RAX,qword ptr [RBP + -0x208]
	000275a4:TEST RAX,RAX
	000275a7:JZ 0x000275e5
	000275a9:MOV RAX,qword ptr [RBP + -0x1f0]
	000275b0:TEST RAX,RAX
	000275b3:JNZ 0x000275e5
	000275b5:MOV EAX,dword ptr [RBP + -0x2ac]
	000275bb:TEST EAX,EAX
	000275bd:JLE 0x000275e5
	000275bf:MOV RAX,qword ptr [0x0003dfe0]
	000275c6:MOV RAX,qword ptr [RAX]
	000275c9:MOV RCX,RAX
	000275cc:MOV EDX,0x5
	000275d1:MOV ESI,0x1
	000275d6:LEA RAX,[0x3548b]
	000275dd:MOV RDI,RAX
	000275e0:CALL 0x00006010
	000275e5:MOV RAX,qword ptr [RBP + -0x1f0]
	000275ec:TEST RAX,RAX
	000275ef:JZ 0x0002762c
	000275f1:MOV EAX,dword ptr [RBP + -0x2a8]
	000275f7:LEA RDX,[RBP + -0x190]
	000275fe:MOV RSI,RDX
	00027601:MOV EDI,EAX
	00027603:CALL 0x00022b0a
	00027608:MOV RDX,RAX
	0002760b:MOV RAX,qword ptr [0x0003dfe0]
	00027612:MOV RAX,qword ptr [RAX]
	00027615:LEA RCX,[0x35491]
	0002761c:MOV RSI,RCX
	0002761f:MOV RDI,RAX
	00027622:MOV EAX,0x0
	00027627:CALL 0x00005d30
	0002762c:MOV RAX,qword ptr [0x0003dfe0]
	00027633:MOV RAX,qword ptr [RAX]
	00027636:MOV RSI,RAX
	00027639:MOV EDI,0xa
	0002763e:CALL 0x00005c60
	00027643:MOVZX EAX,byte ptr [RBP + -0x220]
	0002764a:TEST AL,AL
	0002764c:JZ 0x0002766f
	0002764e:MOV RCX,qword ptr [RBP + -0x4f8]
	00027655:MOV RAX,qword ptr [RBP + -0x268]
	0002765c:MOV RDX,qword ptr [RBP + -0x260]
	00027663:MOV qword ptr [RCX],RAX
	00027666:MOV qword ptr [RCX + 0x8],RDX
	0002766a:JMP 0x000287e8
	0002766f:MOV RDX,qword ptr [RBP + -0x1f8]
	00027676:MOV RAX,qword ptr [RBP + -0x218]
	0002767d:OR RDX,RAX
	00027680:MOV RAX,qword ptr [RBP + -0x210]
	00027687:OR RDX,RAX
	0002768a:MOV RAX,qword ptr [RBP + -0x200]
	00027691:MOV RCX,RDX
	00027694:OR RCX,RAX
	00027697:MOV RDX,qword ptr [RBP + -0x208]
	0002769e:MOV RAX,qword ptr [RBP + -0x1f0]
	000276a5:ADD RAX,RDX
	000276a8:OR RAX,RCX
	000276ab:CMP RAX,0x1
	000276af:JLE 0x0002777c
	000276b5:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000276bc:TEST AL,AL
	000276be:JZ 0x00028a02
	000276c4:MOV RAX,qword ptr [RBP + -0x1f8]
	000276cb:CMP RAX,0x1
	000276cf:JLE 0x000276e5
	000276d1:LEA RAX,[0x35498]
	000276d8:MOV RDI,RAX
	000276db:MOV EAX,0x0
	000276e0:CALL 0x000222e9
	000276e5:MOV RAX,qword ptr [RBP + -0x218]
	000276ec:CMP RAX,0x1
	000276f0:JLE 0x00027706
	000276f2:LEA RAX,[0x354c0]
	000276f9:MOV RDI,RAX
	000276fc:MOV EAX,0x0
	00027701:CALL 0x000222e9
	00027706:MOV RAX,qword ptr [RBP + -0x210]
	0002770d:CMP RAX,0x1
	00027711:JLE 0x00027727
	00027713:LEA RAX,[0x354e8]
	0002771a:MOV RDI,RAX
	0002771d:MOV EAX,0x0
	00027722:CALL 0x000222e9
	00027727:MOV RAX,qword ptr [RBP + -0x200]
	0002772e:CMP RAX,0x1
	00027732:JLE 0x00027748
	00027734:LEA RAX,[0x35510]
	0002773b:MOV RDI,RAX
	0002773e:MOV EAX,0x0
	00027743:CALL 0x000222e9
	00027748:MOV RDX,qword ptr [RBP + -0x208]
	0002774f:MOV RAX,qword ptr [RBP + -0x1f0]
	00027756:ADD RAX,RDX
	00027759:CMP RAX,0x1
	0002775d:JLE 0x00028a02
	00027763:LEA RAX,[0x35540]
	0002776a:MOV RDI,RAX
	0002776d:MOV EAX,0x0
	00027772:CALL 0x000222e9
	00027777:JMP 0x00028a02
	0002777c:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027783:MOVZX EAX,AL
	00027786:LEA RDX,[RBP + -0x400]
	0002778d:ADD RDX,0x14
	00027791:SUB RSP,0x8
	00027795:PUSH qword ptr [RBP + -0x290]
	0002779b:PUSH qword ptr [RBP + -0x298]
	000277a1:PUSH qword ptr [RBP + -0x2a0]
	000277a7:MOV RSI,RDX
	000277aa:MOV EDI,EAX
	000277ac:CALL 0x00025c53
	000277b1:ADD RSP,0x20
	000277b5:XOR EAX,0x1
	000277b8:TEST AL,AL
	000277ba:JNZ 0x00027822
	000277bc:MOV RAX,qword ptr [RBP + -0x288]
	000277c3:MOV EDX,0x0
	000277c8:ADD RAX,-0x1
	000277cc:JNO 0x000277d3
	000277ce:MOV EDX,0x1
	000277d3:MOVSXD RCX,EAX
	000277d6:CMP RAX,RCX
	000277d9:JZ 0x000277e0
	000277db:MOV EDX,0x1
	000277e0:MOV dword ptr [RBP + -0x3f0],EAX
	000277e6:MOV EAX,EDX
	000277e8:AND EAX,0x1
	000277eb:TEST AL,AL
	000277ed:JNZ 0x00027822
	000277ef:MOV RAX,qword ptr [RBP + -0x280]
	000277f6:MOV EDX,0x0
	000277fb:ADD RAX,0x0
	000277ff:JNO 0x00027806
	00027801:MOV EDX,0x1
	00027806:MOVSXD RCX,EAX
	00027809:CMP RAX,RCX
	0002780c:JZ 0x00027813
	0002780e:MOV EDX,0x1
	00027813:MOV dword ptr [RBP + -0x3f4],EAX
	00027819:MOV EAX,EDX
	0002781b:AND EAX,0x1
	0002781e:TEST AL,AL
	00027820:JZ 0x0002784a
	00027822:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027829:TEST AL,AL
	0002782b:JZ 0x00028a05
	00027831:LEA RAX,[0x35568]
	00027838:MOV RDI,RAX
	0002783b:MOV EAX,0x0
	00027840:CALL 0x000222e9
	00027845:JMP 0x00028a05
	0002784a:MOV RAX,qword ptr [RBP + -0x1f8]
	00027851:TEST RAX,RAX
	00027854:JNZ 0x00027885
	00027856:MOVZX EAX,byte ptr [RBP + -0x21f]
	0002785d:TEST AL,AL
	0002785f:JZ 0x00027992
	00027865:MOV RAX,qword ptr [RBP + -0x218]
	0002786c:TEST RAX,RAX
	0002786f:JNZ 0x00027992
	00027875:MOV RAX,qword ptr [RBP + -0x210]
	0002787c:TEST RAX,RAX
	0002787f:JNZ 0x00027992
	00027885:MOV EDX,dword ptr [RBP + -0x2a4]
	0002788b:MOV RAX,qword ptr [RBP + -0x278]
	00027892:MOV ESI,EDX
	00027894:MOV RDI,RAX
	00027897:CALL 0x00025b33
	0002789c:MOV dword ptr [RBP + -0x3f8],EAX
	000278a2:MOV EAX,dword ptr [RBP + -0x3f8]
	000278a8:TEST EAX,EAX
	000278aa:JNS 0x0002791a
	000278ac:MOV EAX,dword ptr [RBP + -0x2a4]
	000278b2:TEST EAX,EAX
	000278b4:JZ 0x000278d3
	000278b6:MOV EAX,dword ptr [RBP + -0x2a4]
	000278bc:CMP EAX,0x1
	000278bf:JNZ 0x000278ca
	000278c1:LEA RAX,[0x346c9]
	000278c8:JMP 0x000278da
	000278ca:LEA RAX,[0x346f4]
	000278d1:JMP 0x000278da
	000278d3:LEA RAX,[0x3558d]
	000278da:MOV qword ptr [RBP + -0x450],RAX
	000278e1:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000278e8:TEST AL,AL
	000278ea:JZ 0x00028a08
	000278f0:MOV RAX,qword ptr [RBP + -0x278]
	000278f7:MOV RDX,qword ptr [RBP + -0x450]
	000278fe:MOV RSI,RAX
	00027901:LEA RAX,[0x35590]
	00027908:MOV RDI,RAX
	0002790b:MOV EAX,0x0
	00027910:CALL 0x000222e9
	00027915:JMP 0x00028a08
	0002791a:MOV RAX,qword ptr [RBP + -0x270]
	00027921:MOV dword ptr [RBP + -0x3fc],EAX
	00027927:MOV RAX,qword ptr [RBP + -0x268]
	0002792e:MOV dword ptr [RBP + -0x400],EAX
	00027934:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002793b:TEST AL,AL
	0002793d:JZ 0x000279de
	00027943:LEA RCX,[RBP + -0x170]
	0002794a:LEA RAX,[RBP + -0x400]
	00027951:MOV EDX,0x64
	00027956:MOV RSI,RCX
	00027959:MOV RDI,RAX
	0002795c:CALL 0x000268fa
	00027961:MOV RDX,RAX
	00027964:MOV RAX,qword ptr [RBP + -0x1f8]
	0002796b:TEST RAX,RAX
	0002796e:JZ 0x00027979
	00027970:LEA RAX,[0x355b0]
	00027977:JMP 0x00027980
	00027979:LEA RAX,[0x355e0]
	00027980:MOV RSI,RDX
	00027983:MOV RDI,RAX
	00027986:MOV EAX,0x0
	0002798b:CALL 0x000222e9
	00027990:JMP 0x000279de
	00027992:MOV dword ptr [RBP + -0x400],0x0
	0002799c:MOV EAX,dword ptr [RBP + -0x400]
	000279a2:MOV dword ptr [RBP + -0x3fc],EAX
	000279a8:MOV EAX,dword ptr [RBP + -0x3fc]
	000279ae:MOV dword ptr [RBP + -0x3f8],EAX
	000279b4:MOV qword ptr [RBP + -0x260],0x0
	000279bf:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000279c6:TEST AL,AL
	000279c8:JZ 0x000279de
	000279ca:LEA RAX,[0x35610]
	000279d1:MOV RDI,RAX
	000279d4:MOV EAX,0x0
	000279d9:CALL 0x000222e9
	000279de:MOV RDX,qword ptr [RBP + -0x218]
	000279e5:MOV RAX,qword ptr [RBP + -0x210]
	000279ec:OR RDX,RAX
	000279ef:MOV RAX,qword ptr [RBP + -0x1f8]
	000279f6:OR RAX,RDX
	000279f9:TEST RAX,RAX
	000279fc:JZ 0x00027a08
	000279fe:MOV dword ptr [RBP + -0x3e0],0xffffffff
	00027a08:MOV RAX,qword ptr [RBP + -0x208]
	00027a0f:TEST RAX,RAX
	00027a12:JZ 0x00027a20
	00027a14:MOV EAX,dword ptr [RBP + -0x2ac]
	00027a1a:MOV dword ptr [RBP + -0x3e0],EAX
	00027a20:MOV EAX,dword ptr [RBP + -0x400]
	00027a26:MOV dword ptr [RBP + -0x3c0],EAX
	00027a2c:MOV EAX,dword ptr [RBP + -0x3fc]
	00027a32:MOV dword ptr [RBP + -0x3bc],EAX
	00027a38:MOV EAX,dword ptr [RBP + -0x3f8]
	00027a3e:MOV dword ptr [RBP + -0x3b8],EAX
	00027a44:MOV EAX,dword ptr [RBP + -0x3f4]
	00027a4a:MOV dword ptr [RBP + -0x3b4],EAX
	00027a50:MOV EAX,dword ptr [RBP + -0x3f0]
	00027a56:MOV dword ptr [RBP + -0x3b0],EAX
	00027a5c:MOV EAX,dword ptr [RBP + -0x3ec]
	00027a62:MOV dword ptr [RBP + -0x3ac],EAX
	00027a68:MOV EAX,dword ptr [RBP + -0x3e0]
	00027a6e:MOV dword ptr [RBP + -0x3a0],EAX
	00027a74:LEA RDX,[RBP + -0x400]
	00027a7b:MOV RAX,qword ptr [RBP + -0x490]
	00027a82:MOV RSI,RDX
	00027a85:MOV RDI,RAX
	00027a88:CALL 0x0002cc40
	00027a8d:MOV qword ptr [RBP + -0x498],RAX
	00027a94:MOV RCX,qword ptr [RBP + -0x498]
	00027a9b:LEA RDX,[RBP + -0x400]
	00027aa2:LEA RSI,[RBP + -0x3c0]
	00027aa9:MOV RAX,qword ptr [RBP + -0x490]
	00027ab0:MOV RDI,RAX
	00027ab3:CALL 0x00026665
	00027ab8:XOR EAX,0x1
	00027abb:TEST AL,AL
	00027abd:JZ 0x00027c5c
	00027ac3:MOV byte ptr [RBP + -0x4e2],0x0
	00027aca:MOV RAX,qword ptr [RBP + -0x1f0]
	00027ad1:TEST RAX,RAX
	00027ad4:SETNZ AL
	00027ad7:MOV byte ptr [RBP + -0x4e0],AL
	00027add:CMP byte ptr [RBP + -0x4e0],0x0
	00027ae4:JZ 0x00027c25
	00027aea:MOV byte ptr [RBP + -0x8e],0x58
	00027af1:MOVZX EAX,byte ptr [RBP + -0x8e]
	00027af8:MOV byte ptr [RBP + -0x8f],AL
	00027afe:MOVZX EAX,byte ptr [RBP + -0x8f]
	00027b05:MOV byte ptr [RBP + -0x90],AL
	00027b0b:MOV EAX,dword ptr [RBP + -0x2a8]
	00027b11:LEA RDX,[RBP + -0x90]
	00027b18:ADD RDX,0x3
	00027b1c:MOV RSI,RDX
	00027b1f:MOV EDI,EAX
	00027b21:CALL 0x00022b0a
	00027b26:LEA RAX,[RBP + -0x90]
	00027b2d:MOV RDI,RAX
	00027b30:CALL 0x0002c6e0
	00027b35:MOV qword ptr [RBP + -0x448],RAX
	00027b3c:CMP qword ptr [RBP + -0x448],0x0
	00027b44:JNZ 0x00027b78
	00027b46:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027b4d:TEST AL,AL
	00027b4f:JZ 0x00028a0b
	00027b55:LEA RAX,[RBP + -0x90]
	00027b5c:MOV RSI,RAX
	00027b5f:LEA RAX,[0x35644]
	00027b66:MOV RDI,RAX
	00027b69:MOV EAX,0x0
	00027b6e:CALL 0x000222e9
	00027b73:JMP 0x00028a02
	00027b78:MOV EAX,dword ptr [RBP + -0x3c0]
	00027b7e:MOV dword ptr [RBP + -0x400],EAX
	00027b84:MOV EAX,dword ptr [RBP + -0x3bc]
	00027b8a:MOV dword ptr [RBP + -0x3fc],EAX
	00027b90:MOV EAX,dword ptr [RBP + -0x3b8]
	00027b96:MOV dword ptr [RBP + -0x3f8],EAX
	00027b9c:MOV EAX,dword ptr [RBP + -0x3b4]
	00027ba2:MOV dword ptr [RBP + -0x3f4],EAX
	00027ba8:MOV EAX,dword ptr [RBP + -0x3b0]
	00027bae:MOV dword ptr [RBP + -0x3f0],EAX
	00027bb4:MOV EAX,dword ptr [RBP + -0x3ac]
	00027bba:MOV dword ptr [RBP + -0x3ec],EAX
	00027bc0:MOV EAX,dword ptr [RBP + -0x3a0]
	00027bc6:MOV dword ptr [RBP + -0x3e0],EAX
	00027bcc:LEA RDX,[RBP + -0x400]
	00027bd3:MOV RAX,qword ptr [RBP + -0x448]
	00027bda:MOV RSI,RDX
	00027bdd:MOV RDI,RAX
	00027be0:CALL 0x0002cc40
	00027be5:MOV qword ptr [RBP + -0x498],RAX
	00027bec:MOV RCX,qword ptr [RBP + -0x498]
	00027bf3:LEA RDX,[RBP + -0x400]
	00027bfa:LEA RSI,[RBP + -0x3c0]
	00027c01:MOV RAX,qword ptr [RBP + -0x448]
	00027c08:MOV RDI,RAX
	00027c0b:CALL 0x00026665
	00027c10:MOV byte ptr [RBP + -0x4e2],AL
	00027c16:MOV RAX,qword ptr [RBP + -0x448]
	00027c1d:MOV RDI,RAX
	00027c20:CALL 0x0002c969
	00027c25:MOVZX EAX,byte ptr [RBP + -0x4e2]
	00027c2c:XOR EAX,0x1
	00027c2f:TEST AL,AL
	00027c31:JZ 0x00027c5c
	00027c33:MOVZX ECX,byte ptr [RBP + -0x4e0]
	00027c3a:LEA RDX,[RBP + -0x2c0]
	00027c41:LEA RSI,[RBP + -0x400]
	00027c48:LEA RAX,[RBP + -0x3c0]
	00027c4f:MOV RDI,RAX
	00027c52:CALL 0x00026951
	00027c57:JMP 0x00028a18
	00027c5c:MOV RAX,qword ptr [RBP + -0x210]
	00027c63:TEST RAX,RAX
	00027c66:JZ 0x00027ea4
	00027c6c:MOV RAX,qword ptr [RBP + -0x218]
	00027c73:TEST RAX,RAX
	00027c76:JNZ 0x00027ea4
	00027c7c:MOV RDX,qword ptr [RBP + -0x2b8]
	00027c83:MOV RAX,qword ptr [RBP + -0x2b8]
	00027c8a:TEST RAX,RAX
	00027c8d:JLE 0x00027ca6
	00027c8f:MOV ECX,dword ptr [RBP + -0x3e8]
	00027c95:MOV EAX,dword ptr [RBP + -0x2b0]
	00027c9b:CMP ECX,EAX
	00027c9d:JZ 0x00027ca6
	00027c9f:MOV EAX,0x1
	00027ca4:JMP 0x00027cab
	00027ca6:MOV EAX,0x0
	00027cab:MOVSXD RCX,EAX
	00027cae:MOV RAX,RDX
	00027cb1:SUB RAX,RCX
	00027cb4:MOV EDX,0x0
	00027cb9:IMUL RAX,RAX,0x7
	00027cbd:JNO 0x00027cc4
	00027cbf:MOV EDX,0x1
	00027cc4:MOV qword ptr [RBP + -0x300],RAX
	00027ccb:MOV RAX,RDX
	00027cce:AND EAX,0x1
	00027cd1:TEST AL,AL
	00027cd3:JNZ 0x00027d72
	00027cd9:MOV EAX,dword ptr [RBP + -0x2b0]
	00027cdf:MOV EDX,dword ptr [RBP + -0x3e8]
	00027ce5:SUB EAX,EDX
	00027ce7:LEA EDX,[RAX + 0x7]
	00027cea:MOVSXD RAX,EDX
	00027ced:IMUL RAX,RAX,-0x6db6db6d
	00027cf4:SHR RAX,0x20
	00027cf8:ADD EAX,EDX
	00027cfa:SAR EAX,0x2
	00027cfd:MOV ECX,EDX
	00027cff:SAR ECX,0x1f
	00027d02:SUB EAX,ECX
	00027d04:MOV ECX,EAX
	00027d06:SHL ECX,0x3
	00027d09:SUB ECX,EAX
	00027d0b:MOV EAX,EDX
	00027d0d:SUB EAX,ECX
	00027d0f:MOV RDX,qword ptr [RBP + -0x300]
	00027d16:CDQE
	00027d18:MOV ECX,0x0
	00027d1d:ADD RAX,RDX
	00027d20:JNO 0x00027d27
	00027d22:MOV ECX,0x1
	00027d27:MOV qword ptr [RBP + -0x300],RAX
	00027d2e:MOV RAX,RCX
	00027d31:AND EAX,0x1
	00027d34:TEST AL,AL
	00027d36:JNZ 0x00027d72
	00027d38:MOV RCX,qword ptr [RBP + -0x300]
	00027d3f:MOV EAX,dword ptr [RBP + -0x3f4]
	00027d45:CDQE
	00027d47:MOV EDX,0x0
	00027d4c:ADD RAX,RCX
	00027d4f:JNO 0x00027d56
	00027d51:MOV EDX,0x1
	00027d56:MOVSXD RCX,EAX
	00027d59:CMP RAX,RCX
	00027d5c:JZ 0x00027d63
	00027d5e:MOV EDX,0x1
	00027d63:MOV dword ptr [RBP + -0x3f4],EAX
	00027d69:MOV EAX,EDX
	00027d6b:AND EAX,0x1
	00027d6e:TEST AL,AL
	00027d70:JZ 0x00027d7f
	00027d72:MOV qword ptr [RBP + -0x498],-0x1
	00027d7d:JMP 0x00027da9
	00027d7f:MOV dword ptr [RBP + -0x3e0],0xffffffff
	00027d89:LEA RDX,[RBP + -0x400]
	00027d90:MOV RAX,qword ptr [RBP + -0x490]
	00027d97:MOV RSI,RDX
	00027d9a:MOV RDI,RAX
	00027d9d:CALL 0x0002cc40
	00027da2:MOV qword ptr [RBP + -0x498],RAX
	00027da9:CMP qword ptr [RBP + -0x498],-0x1
	00027db1:JNZ 0x00027e3c
	00027db7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027dbe:TEST AL,AL
	00027dc0:JZ 0x00028a0e
	00027dc6:LEA RDX,[RBP + -0x170]
	00027dcd:LEA RSI,[RBP + -0x2c0]
	00027dd4:LEA RAX,[RBP + -0x400]
	00027ddb:MOV ECX,0x64
	00027de0:MOV RDI,RAX
	00027de3:CALL 0x00026748
	00027de8:MOV R13,RAX
	00027deb:MOV R12D,dword ptr [RBP + -0x2b0]
	00027df2:MOV RBX,qword ptr [RBP + -0x2b8]
	00027df9:LEA RCX,[RBP + -0x90]
	00027e00:LEA RAX,[RBP + -0x2c0]
	00027e07:MOV EDX,0x64
	00027e0c:MOV RSI,RCX
	00027e0f:MOV RDI,RAX
	00027e12:CALL 0x000229c0
	00027e17:MOV R8,R13
	00027e1a:MOV ECX,R12D
	00027e1d:MOV RDX,RBX
	00027e20:MOV RSI,RAX
	00027e23:LEA RAX,[0x35668]
	00027e2a:MOV RDI,RAX
	00027e2d:MOV EAX,0x0
	00027e32:CALL 0x000222e9
	00027e37:JMP 0x00028a02
	00027e3c:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027e43:TEST AL,AL
	00027e45:JZ 0x00027ea4
	00027e47:LEA RDX,[RBP + -0x170]
	00027e4e:LEA RSI,[RBP + -0x2c0]
	00027e55:LEA RAX,[RBP + -0x400]
	00027e5c:MOV ECX,0x64
	00027e61:MOV RDI,RAX
	00027e64:CALL 0x00026748
	00027e69:MOV RBX,RAX
	00027e6c:LEA RCX,[RBP + -0x90]
	00027e73:LEA RAX,[RBP + -0x2c0]
	00027e7a:MOV EDX,0x64
	00027e7f:MOV RSI,RCX
	00027e82:MOV RDI,RAX
	00027e85:CALL 0x000229c0
	00027e8a:MOV RDX,RBX
	00027e8d:MOV RSI,RAX
	00027e90:LEA RAX,[0x356b7]
	00027e97:MOV RDI,RAX
	00027e9a:MOV EAX,0x0
	00027e9f:CALL 0x000222e9
	00027ea4:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027eab:TEST AL,AL
	00027ead:JZ 0x00027f86
	00027eb3:MOV RAX,qword ptr [RBP + -0x218]
	00027eba:TEST RAX,RAX
	00027ebd:JNZ 0x00027f00
	00027ebf:MOV RAX,qword ptr [RBP + -0x210]
	00027ec6:TEST RAX,RAX
	00027ec9:JNZ 0x00027f00
	00027ecb:LEA RCX,[RBP + -0x170]
	00027ed2:LEA RAX,[RBP + -0x400]
	00027ed9:MOV EDX,0x64
	00027ede:MOV RSI,RCX
	00027ee1:MOV RDI,RAX
	00027ee4:CALL 0x0002685f
	00027ee9:MOV RSI,RAX
	00027eec:LEA RAX,[0x356d8]
	00027ef3:MOV RDI,RAX
	00027ef6:MOV EAX,0x0
	00027efb:CALL 0x000222e9
	00027f00:MOV RAX,qword ptr [RBP + -0x210]
	00027f07:TEST RAX,RAX
	00027f0a:JZ 0x00027f4d
	00027f0c:MOV RAX,qword ptr [RBP + -0x218]
	00027f13:TEST RAX,RAX
	00027f16:JZ 0x00027f4d
	00027f18:LEA RCX,[RBP + -0x90]
	00027f1f:LEA RAX,[RBP + -0x2c0]
	00027f26:MOV EDX,0x64
	00027f2b:MOV RSI,RCX
	00027f2e:MOV RDI,RAX
	00027f31:CALL 0x000229c0
	00027f36:MOV RSI,RAX
	00027f39:LEA RAX,[0x35708]
	00027f40:MOV RDI,RAX
	00027f43:MOV EAX,0x0
	00027f48:CALL 0x000222e9
	00027f4d:LEA RDX,[RBP + -0x170]
	00027f54:LEA RSI,[RBP + -0x2c0]
	00027f5b:LEA RAX,[RBP + -0x400]
	00027f62:MOV ECX,0x64
	00027f67:MOV RDI,RAX
	00027f6a:CALL 0x00026748
	00027f6f:MOV RSI,RAX
	00027f72:LEA RAX,[0x35741]
	00027f79:MOV RDI,RAX
	00027f7c:MOV EAX,0x0
	00027f81:CALL 0x000222e9
	00027f86:MOV RDX,qword ptr [RBP + -0x258]
	00027f8d:MOV RAX,qword ptr [RBP + -0x250]
	00027f94:OR RDX,RAX
	00027f97:MOV RAX,qword ptr [RBP + -0x248]
	00027f9e:OR RAX,RDX
	00027fa1:TEST RAX,RAX
	00027fa4:JZ 0x00028350
	00027faa:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027fb1:TEST AL,AL
	00027fb3:JZ 0x00028017
	00027fb5:MOV RAX,qword ptr [RBP + -0x258]
	00027fbc:TEST RAX,RAX
	00027fbf:JNZ 0x00027fcd
	00027fc1:MOV RAX,qword ptr [RBP + -0x250]
	00027fc8:TEST RAX,RAX
	00027fcb:JZ 0x00027fec
	00027fcd:MOV EAX,dword ptr [RBP + -0x3f4]
	00027fd3:CMP EAX,0xf
	00027fd6:JZ 0x00027fec
	00027fd8:LEA RAX,[0x35760]
	00027fdf:MOV RDI,RAX
	00027fe2:MOV EAX,0x0
	00027fe7:CALL 0x000222e9
	00027fec:MOV RAX,qword ptr [RBP + -0x248]
	00027ff3:TEST RAX,RAX
	00027ff6:JZ 0x00028017
	00027ff8:MOV EAX,dword ptr [RBP + -0x3f8]
	00027ffe:CMP EAX,0xc
	00028001:JZ 0x00028017
	00028003:LEA RAX,[0x357c8]
	0002800a:MOV RDI,RAX
	0002800d:MOV EAX,0x0
	00028012:CALL 0x000222e9
	00028017:MOV EAX,dword ptr [RBP + -0x3ec]
	0002801d:MOV RCX,qword ptr [RBP + -0x258]
	00028024:CDQE
	00028026:MOV EDX,0x0
	0002802b:ADD RAX,RCX
	0002802e:JNO 0x00028035
	00028030:MOV EDX,0x1
	00028035:MOVSXD RCX,EAX
	00028038:CMP RAX,RCX
	0002803b:JZ 0x00028042
	0002803d:MOV EDX,0x1
	00028042:MOV dword ptr [RBP + -0x4a8],EAX
	00028048:MOV EAX,EDX
	0002804a:AND EAX,0x1
	0002804d:TEST AL,AL
	0002804f:JNZ 0x000280c5
	00028051:MOV EAX,dword ptr [RBP + -0x3f0]
	00028057:MOV RCX,qword ptr [RBP + -0x250]
	0002805e:CDQE
	00028060:MOV EDX,0x0
	00028065:ADD RAX,RCX
	00028068:JNO 0x0002806f
	0002806a:MOV EDX,0x1
	0002806f:MOVSXD RCX,EAX
	00028072:CMP RAX,RCX
	00028075:JZ 0x0002807c
	00028077:MOV EDX,0x1
	0002807c:MOV dword ptr [RBP + -0x340],EAX
	00028082:MOV EAX,EDX
	00028084:AND EAX,0x1
	00028087:TEST AL,AL
	00028089:JNZ 0x000280c5
	0002808b:MOV EAX,dword ptr [RBP + -0x3f4]
	00028091:MOV RCX,qword ptr [RBP + -0x248]
	00028098:CDQE
	0002809a:MOV EDX,0x0
	0002809f:ADD RAX,RCX
	000280a2:JNO 0x000280a9
	000280a4:MOV EDX,0x1
	000280a9:MOVSXD RCX,EAX
	000280ac:CMP RAX,RCX
	000280af:JZ 0x000280b6
	000280b1:MOV EDX,0x1
	000280b6:MOV dword ptr [RBP + -0x300],EAX
	000280bc:MOV EAX,EDX
	000280be:AND EAX,0x1
	000280c1:TEST AL,AL
	000280c3:JZ 0x000280fc
	000280c5:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000280cc:TEST AL,AL
	000280ce:JZ 0x00028a11
	000280d4:MOV EDX,0x877
	000280d9:LEA RAX,[0x3580f]
	000280e0:MOV RSI,RAX
	000280e3:LEA RAX,[0x35820]
	000280ea:MOV RDI,RAX
	000280ed:MOV EAX,0x0
	000280f2:CALL 0x000222e9
	000280f7:JMP 0x00028a11
	000280fc:MOV EAX,dword ptr [RBP + -0x4a8]
	00028102:MOV dword ptr [RBP + -0x3ec],EAX
	00028108:MOV EAX,dword ptr [RBP + -0x340]
	0002810e:MOV dword ptr [RBP + -0x3f0],EAX
	00028114:MOV EAX,dword ptr [RBP + -0x300]
	0002811a:MOV dword ptr [RBP + -0x3f4],EAX
	00028120:MOV EAX,dword ptr [RBP + -0x3b8]
	00028126:MOV dword ptr [RBP + -0x3f8],EAX
	0002812c:MOV EAX,dword ptr [RBP + -0x3bc]
	00028132:MOV dword ptr [RBP + -0x3fc],EAX
	00028138:MOV EAX,dword ptr [RBP + -0x3c0]
	0002813e:MOV dword ptr [RBP + -0x400],EAX
	00028144:MOV EAX,dword ptr [RBP + -0x3a0]
	0002814a:MOV dword ptr [RBP + -0x3e0],EAX
	00028150:LEA RDX,[RBP + -0x400]
	00028157:MOV RAX,qword ptr [RBP + -0x490]
	0002815e:MOV RSI,RDX
	00028161:MOV RDI,RAX
	00028164:CALL 0x0002cc40
	00028169:MOV qword ptr [RBP + -0x498],RAX
	00028170:CMP qword ptr [RBP + -0x498],-0x1
	00028178:JNZ 0x000281c7
	0002817a:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00028181:TEST AL,AL
	00028183:JZ 0x0002834a
	00028189:LEA RDX,[RBP + -0x170]
	00028190:LEA RSI,[RBP + -0x2c0]
	00028197:LEA RAX,[RBP + -0x400]
	0002819e:MOV ECX,0x64
	000281a3:MOV RDI,RAX
	000281a6:CALL 0x00026748
	000281ab:MOV RSI,RAX
	000281ae:LEA RAX,[0x35830]
	000281b5:MOV RDI,RAX
	000281b8:MOV EAX,0x0
	000281bd:CALL 0x000222e9
	000281c2:JMP 0x0002834a
	000281c7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000281ce:TEST AL,AL
	000281d0:JZ 0x00028350
	000281d6:MOV RCX,qword ptr [RBP + -0x248]
	000281dd:MOV RDX,qword ptr [RBP + -0x250]
	000281e4:MOV RAX,qword ptr [RBP + -0x258]
	000281eb:MOV RSI,RAX
	000281ee:LEA RAX,[0x35870]
	000281f5:MOV RDI,RAX
	000281f8:MOV EAX,0x0
	000281fd:CALL 0x000222e9
	00028202:LEA RDX,[RBP + -0x170]
	00028209:LEA RSI,[RBP + -0x2c0]
	00028210:LEA RAX,[RBP + -0x400]
	00028217:MOV ECX,0x64
	0002821c:MOV RDI,RAX
	0002821f:CALL 0x00026748
	00028224:MOV RSI,RAX
	00028227:LEA RAX,[0x358ad]
	0002822e:MOV RDI,RAX
	00028231:MOV EAX,0x0
	00028236:CALL 0x000222e9
	0002823b:MOV EAX,dword ptr [RBP + -0x3a0]
	00028241:CMP EAX,-0x1
	00028244:JZ 0x0002826a
	00028246:MOV EDX,dword ptr [RBP + -0x3e0]
	0002824c:MOV EAX,dword ptr [RBP + -0x3a0]
	00028252:CMP EDX,EAX
	00028254:JZ 0x0002826a
	00028256:LEA RAX,[0x358c8]
	0002825d:MOV RDI,RAX
	00028260:MOV EAX,0x0
	00028265:CALL 0x000222e9
	0002826a:MOV RAX,qword ptr [RBP + -0x248]
	00028271:TEST RAX,RAX
	00028274:JNZ 0x00028350
	0002827a:MOV EDX,dword ptr [RBP + -0x3f4]
	00028280:MOV EAX,dword ptr [RBP + -0x300]
	00028286:CMP EDX,EAX
	00028288:JNZ 0x000282ae
	0002828a:MOV RAX,qword ptr [RBP + -0x250]
	00028291:TEST RAX,RAX
	00028294:JNZ 0x00028350
	0002829a:MOV EDX,dword ptr [RBP + -0x3f0]
	000282a0:MOV EAX,dword ptr [RBP + -0x340]
	000282a6:CMP EDX,EAX
	000282a8:JZ 0x00028350
	000282ae:LEA RAX,[0x35908]
	000282b5:MOV RDI,RAX
	000282b8:MOV EAX,0x0
	000282bd:CALL 0x000222e9
	000282c2:MOV EBX,dword ptr [RBP + -0x300]
	000282c8:MOV EAX,dword ptr [RBP + -0x340]
	000282ce:LEA R12D,[RAX + 0x1]
	000282d2:MOV EAX,dword ptr [RBP + -0x4a8]
	000282d8:LEA RDX,[RBP + -0x19d]
	000282df:MOV RSI,RDX
	000282e2:MOV EDI,EAX
	000282e4:CALL 0x00025bbe
	000282e9:MOV ECX,EBX
	000282eb:MOV EDX,R12D
	000282ee:MOV RSI,RAX
	000282f1:LEA RAX,[0x35948]
	000282f8:MOV RDI,RAX
	000282fb:MOV EAX,0x0
	00028300:CALL 0x000222e9
	00028305:MOV EBX,dword ptr [RBP + -0x3f4]
	0002830b:MOV EAX,dword ptr [RBP + -0x3f0]
	00028311:LEA R12D,[RAX + 0x1]
	00028315:MOV EAX,dword ptr [RBP + -0x3ec]
	0002831b:LEA RDX,[RBP + -0x19d]
	00028322:MOV RSI,RDX
	00028325:MOV EDI,EAX
	00028327:CALL 0x00025bbe
	0002832c:MOV ECX,EBX
	0002832e:MOV EDX,R12D
	00028331:MOV RSI,RAX
	00028334:LEA RAX,[0x35970]
	0002833b:MOV RDI,RAX
	0002833e:MOV EAX,0x0
	00028343:CALL 0x000222e9
	00028348:JMP 0x00028350
	0002834a:NOP
	0002834b:JMP 0x00028a02
	00028350:MOV RAX,qword ptr [RBP + -0x1f0]
	00028357:TEST RAX,RAX
	0002835a:JZ 0x00028457
	00028360:MOV EAX,dword ptr [RBP + -0x2a8]
	00028366:CDQE
	00028368:MOV qword ptr [RBP + -0x340],RAX
	0002836f:MOV byte ptr [RBP + -0x4df],0x0
	00028376:MOV RAX,qword ptr [RBP + -0x3d8]
	0002837d:MOV qword ptr [RBP + -0x440],RAX
	00028384:MOV RAX,qword ptr [RBP + -0x340]
	0002838b:MOV EDX,0x0
	00028390:SUB RAX,qword ptr [RBP + -0x440]
	00028397:JNO 0x0002839e
	00028399:MOV EDX,0x1
	0002839e:MOV qword ptr [RBP + -0x340],RAX
	000283a5:MOV RAX,RDX
	000283a8:AND EAX,0x1
	000283ab:OR AL,byte ptr [RBP + -0x4df]
	000283b1:MOVZX EAX,AL
	000283b4:TEST EAX,EAX
	000283b6:SETNZ AL
	000283b9:MOV byte ptr [RBP + -0x4df],AL
	000283bf:MOV RDX,qword ptr [RBP + -0x340]
	000283c6:MOV ECX,0x0
	000283cb:MOV RAX,qword ptr [RBP + -0x498]
	000283d2:SUB RAX,RDX
	000283d5:JNO 0x000283dc
	000283d7:MOV ECX,0x1
	000283dc:MOV qword ptr [RBP + -0x300],RAX
	000283e3:MOV RAX,RCX
	000283e6:AND EAX,0x1
	000283e9:OR AL,byte ptr [RBP + -0x4df]
	000283ef:MOVZX EAX,AL
	000283f2:TEST EAX,EAX
	000283f4:SETNZ AL
	000283f7:MOV byte ptr [RBP + -0x4df],AL
	000283fd:CMP byte ptr [RBP + -0x4df],0x0
	00028404:JNZ 0x00028419
	00028406:MOV RAX,qword ptr [RBP + -0x300]
	0002840d:MOV RDI,RAX
	00028410:CALL 0x000222c3
	00028415:TEST AL,AL
	00028417:JZ 0x00028449
	00028419:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00028420:TEST AL,AL
	00028422:JZ 0x00028a14
	00028428:MOV EAX,dword ptr [RBP + -0x2a8]
	0002842e:MOV ESI,EAX
	00028430:LEA RAX,[0x35998]
	00028437:MOV RDI,RAX
	0002843a:MOV EAX,0x0
	0002843f:CALL 0x000222e9
	00028444:JMP 0x00028a02
	00028449:MOV RAX,qword ptr [RBP + -0x300]
	00028450:MOV qword ptr [RBP + -0x498],RAX
	00028457:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002845e:TEST AL,AL
	00028460:JZ 0x000284b6
	00028462:MOV RAX,qword ptr [RBP + -0x498]
	00028469:MOV qword ptr [RBP + -0x438],RAX
	00028470:LEA RDX,[RBP + -0x170]
	00028477:LEA RSI,[RBP + -0x2c0]
	0002847e:LEA RAX,[RBP + -0x400]
	00028485:MOV ECX,0x64
	0002848a:MOV RDI,RAX
	0002848d:CALL 0x00026748
	00028492:MOV RCX,RAX
	00028495:MOV RAX,qword ptr [RBP + -0x438]
	0002849c:MOV RDX,RAX
	0002849f:MOV RSI,RCX
	000284a2:LEA RAX,[0x359c3]
	000284a9:MOV RDI,RAX
	000284ac:MOV EAX,0x0
	000284b1:CALL 0x000222e9
	000284b6:MOV RAX,qword ptr [RBP + -0x260]
	000284bd:MOV qword ptr [RBP + -0x430],RAX
	000284c4:MOV EAX,dword ptr [RBP + -0x228]
	000284ca:MOVSXD RDX,EAX
	000284cd:MOV RAX,qword ptr [RBP + -0x430]
	000284d4:ADD RAX,RDX
	000284d7:MOV qword ptr [RBP + -0x428],RAX
	000284de:MOV RCX,qword ptr [RBP + -0x428]
	000284e5:MOV RDX,0x112e0be826d694b3
	000284ef:MOV RAX,RCX
	000284f2:IMUL RDX
	000284f5:MOV RAX,RDX
	000284f8:SAR RAX,0x1a
	000284fc:MOV RDX,RCX
	000284ff:SAR RDX,0x3f
	00028503:SUB RAX,RDX
	00028506:IMUL RDX,RAX,0x3b9aca00
	0002850d:MOV RAX,RCX
	00028510:SUB RAX,RDX
	00028513:LEA RCX,[RAX + 0x3b9aca00]
	0002851a:MOV RDX,0x112e0be826d694b3
	00028524:MOV RAX,RCX
	00028527:IMUL RDX
	0002852a:MOV RAX,RDX
	0002852d:SAR RAX,0x1a
	00028531:MOV RDX,RCX
	00028534:SAR RDX,0x3f
	00028538:SUB RAX,RDX
	0002853b:IMUL RDX,RAX,0x3b9aca00
	00028542:MOV RAX,RCX
	00028545:SUB RAX,RDX
	00028548:MOV dword ptr [RBP + -0x4d4],EAX
	0002854e:MOV EAX,dword ptr [RBP + -0x4d4]
	00028554:MOVSXD RDX,EAX
	00028557:MOV RAX,qword ptr [RBP + -0x428]
	0002855e:SUB RAX,RDX
	00028561:MOV RCX,RAX
	00028564:MOV RDX,0x112e0be826d694b3
	0002856e:MOV RAX,RCX
	00028571:IMUL RDX
	00028574:MOV RAX,RDX
	00028577:SAR RAX,0x1a
	0002857b:SAR RCX,0x3f
	0002857f:MOV RDX,RCX
	00028582:SUB RAX,RDX
	00028585:MOV dword ptr [RBP + -0x4d0],EAX
	0002858b:MOV RAX,qword ptr [RBP + -0x240]
	00028592:MOV EDX,0x0
	00028597:IMUL RAX,RAX,0xe10
	0002859e:JNO 0x000285a5
	000285a0:MOV EDX,0x1
	000285a5:MOV qword ptr [RBP + -0x4c8],RAX
	000285ac:MOV RAX,RDX
	000285af:AND EAX,0x1
	000285b2:TEST AL,AL
	000285b4:JNZ 0x000286b6
	000285ba:MOV RDX,qword ptr [RBP + -0x4c8]
	000285c1:MOV ECX,0x0
	000285c6:MOV RAX,qword ptr [RBP + -0x498]
	000285cd:ADD RAX,RDX
	000285d0:JNO 0x000285d7
	000285d2:MOV ECX,0x1
	000285d7:MOV qword ptr [RBP + -0x4c0],RAX
	000285de:MOV RAX,RCX
	000285e1:AND EAX,0x1
	000285e4:TEST AL,AL
	000285e6:JNZ 0x000286b6
	000285ec:MOV RAX,qword ptr [RBP + -0x238]
	000285f3:MOV EDX,0x0
	000285f8:IMUL RAX,RAX,0x3c
	000285fc:JNO 0x00028603
	000285fe:MOV EDX,0x1
	00028603:MOV qword ptr [RBP + -0x4b8],RAX
	0002860a:MOV RAX,RDX
	0002860d:AND EAX,0x1
	00028610:TEST AL,AL
	00028612:JNZ 0x000286b6
	00028618:MOV RDX,qword ptr [RBP + -0x4c0]
	0002861f:MOV RAX,qword ptr [RBP + -0x4b8]
	00028626:MOV ECX,0x0
	0002862b:ADD RAX,RDX
	0002862e:JNO 0x00028635
	00028630:MOV ECX,0x1
	00028635:MOV qword ptr [RBP + -0x4b0],RAX
	0002863c:MOV RAX,RCX
	0002863f:AND EAX,0x1
	00028642:TEST AL,AL
	00028644:JNZ 0x000286b6
	00028646:MOV RDX,qword ptr [RBP + -0x4b0]
	0002864d:MOV RAX,qword ptr [RBP + -0x230]
	00028654:MOV ECX,0x0
	00028659:ADD RAX,RDX
	0002865c:JNO 0x00028663
	0002865e:MOV ECX,0x1
	00028663:MOV qword ptr [RBP + -0x4a8],RAX
	0002866a:MOV RAX,RCX
	0002866d:AND EAX,0x1
	00028670:TEST AL,AL
	00028672:JNZ 0x000286b6
	00028674:MOV RDX,qword ptr [RBP + -0x4a8]
	0002867b:MOV EAX,dword ptr [RBP + -0x4d0]
	00028681:CDQE
	00028683:MOV ECX,0x0
	00028688:ADD RAX,RDX
	0002868b:JNO 0x00028692
	0002868d:MOV ECX,0x1
	00028692:MOV qword ptr [RBP + -0x340],RAX
	00028699:MOV RAX,RCX
	0002869c:AND EAX,0x1
	0002869f:TEST AL,AL
	000286a1:JNZ 0x000286b6
	000286a3:MOV RAX,qword ptr [RBP + -0x340]
	000286aa:MOV RDI,RAX
	000286ad:CALL 0x000222c3
	000286b2:TEST AL,AL
	000286b4:JZ 0x000286de
	000286b6:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000286bd:TEST AL,AL
	000286bf:JZ 0x00028a17
	000286c5:LEA RAX,[0x359e0]
	000286cc:MOV RDI,RAX
	000286cf:MOV EAX,0x0
	000286d4:CALL 0x000222e9
	000286d9:JMP 0x00028a02
	000286de:MOV RDX,qword ptr [RBP + -0x340]
	000286e5:MOV RAX,qword ptr [RBP + -0x4f8]
	000286ec:MOV qword ptr [RAX],RDX
	000286ef:MOV EAX,dword ptr [RBP + -0x4d4]
	000286f5:MOVSXD RDX,EAX
	000286f8:MOV RAX,qword ptr [RBP + -0x4f8]
	000286ff:MOV qword ptr [RAX + 0x8],RDX
	00028703:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002870a:TEST AL,AL
	0002870c:JZ 0x000287e8
	00028712:MOV RDX,qword ptr [RBP + -0x240]
	00028719:MOV RAX,qword ptr [RBP + -0x238]
	00028720:OR RDX,RAX
	00028723:MOV RAX,qword ptr [RBP + -0x230]
	0002872a:OR RDX,RAX
	0002872d:MOV EAX,dword ptr [RBP + -0x228]
	00028733:CDQE
	00028735:OR RAX,RDX
	00028738:TEST RAX,RAX
	0002873b:JZ 0x000287e8
	00028741:MOV ESI,dword ptr [RBP + -0x228]
	00028747:MOV RCX,qword ptr [RBP + -0x230]
	0002874e:MOV RDX,qword ptr [RBP + -0x238]
	00028755:MOV RAX,qword ptr [RBP + -0x240]
	0002875c:MOV R8D,ESI
	0002875f:MOV RSI,RAX
	00028762:LEA RAX,[0x35a10]
	00028769:MOV RDI,RAX
	0002876c:MOV EAX,0x0
	00028771:CALL 0x000222e9
	00028776:MOV RAX,qword ptr [RBP + -0x340]
	0002877d:MOV RSI,RAX
	00028780:LEA RAX,[0x35a60]
	00028787:MOV RDI,RAX
	0002878a:MOV EAX,0x0
	0002878f:CALL 0x000222e9
	00028794:MOV EAX,dword ptr [RBP + -0x3e0]
	0002879a:CMP EAX,-0x1
	0002879d:JZ 0x000287e8
	0002879f:MOV RCX,qword ptr [RBP + -0x4f8]
	000287a6:LEA RDX,[RBP + -0x300]
	000287ad:MOV RAX,qword ptr [RBP + -0x490]
	000287b4:MOV RSI,RCX
	000287b7:MOV RDI,RAX
	000287ba:CALL 0x0002cb90
	000287bf:TEST RAX,RAX
	000287c2:JZ 0x000287e8
	000287c4:MOV EDX,dword ptr [RBP + -0x3e0]
	000287ca:MOV EAX,dword ptr [RBP + -0x2e0]
	000287d0:CMP EDX,EAX
	000287d2:JZ 0x000287e8
	000287d4:LEA RAX,[0x35a88]
	000287db:MOV RDI,RAX
	000287de:MOV EAX,0x0
	000287e3:CALL 0x000222e9
	000287e8:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000287ef:TEST AL,AL
	000287f1:JZ 0x000289ea
	000287f7:CMP qword ptr [RBP + -0x520],0x0
	000287ff:JNZ 0x00028817
	00028801:LEA RAX,[0x35ac5]
	00028808:MOV RDI,RAX
	0002880b:MOV EAX,0x0
	00028810:CALL 0x000222e9
	00028815:JMP 0x00028868
	00028817:MOV RAX,qword ptr [RBP + -0x520]
	0002881e:LEA RDX,[0x35439]
	00028825:MOV RSI,RDX
	00028828:MOV RDI,RAX
	0002882b:CALL 0x00005ce0
	00028830:TEST EAX,EAX
	00028832:JNZ 0x0002884a
	00028834:LEA RAX,[0x35adf]
	0002883b:MOV RDI,RAX
	0002883e:MOV EAX,0x0
	00028843:CALL 0x000222e9
	00028848:JMP 0x00028868
	0002884a:MOV RAX,qword ptr [RBP + -0x520]
	00028851:MOV RSI,RAX
	00028854:LEA RAX,[0x35b00]
	0002885b:MOV RDI,RAX
	0002885e:MOV EAX,0x0
	00028863:CALL 0x000222e9
	00028868:MOV RAX,qword ptr [RBP + -0x4f8]
	0002886f:MOV RAX,qword ptr [RAX]
	00028872:MOV qword ptr [RBP + -0x420],RAX
	00028879:MOV RAX,qword ptr [RBP + -0x4f8]
	00028880:MOV RAX,qword ptr [RAX + 0x8]
	00028884:MOV dword ptr [RBP + -0x4cc],EAX
	0002888a:MOV EDX,dword ptr [RBP + -0x4cc]
	00028890:MOV RAX,qword ptr [RBP + -0x420]
	00028897:MOV RSI,RAX
	0002889a:LEA RAX,[0x35b28]
	000288a1:MOV RDI,RAX
	000288a4:MOV EAX,0x0
	000288a9:CALL 0x000222e9
	000288ae:MOV RAX,qword ptr [RBP + -0x4f8]
	000288b5:LEA RDX,[RBP + -0x340]
	000288bc:MOV RSI,RDX
	000288bf:MOV RDI,RAX
	000288c2:CALL 0x00005bb0
	000288c7:TEST RAX,RAX
	000288ca:SETNZ AL
	000288cd:MOV byte ptr [RBP + -0x4de],AL
	000288d3:CMP byte ptr [RBP + -0x4de],0x0
	000288da:JZ 0x00028913
	000288dc:LEA RDX,[RBP + -0x170]
	000288e3:LEA RAX,[RBP + -0x340]
	000288ea:MOV ECX,0x64
	000288ef:MOV ESI,0x0
	000288f4:MOV RDI,RAX
	000288f7:CALL 0x00026748
	000288fc:MOV RSI,RAX
	000288ff:LEA RAX,[0x35b49]
	00028906:MOV RDI,RAX
	00028909:MOV EAX,0x0
	0002890e:CALL 0x000222e9
	00028913:MOV RCX,qword ptr [RBP + -0x4f8]
	0002891a:LEA RDX,[RBP + -0x300]
	00028921:MOV RAX,qword ptr [RBP + -0x490]
	00028928:MOV RSI,RCX
	0002892b:MOV RDI,RAX
	0002892e:CALL 0x0002cb90
	00028933:TEST RAX,RAX
	00028936:JZ 0x000289ea
	0002893c:MOV byte ptr [RBP + -0x4dd],0x1
	00028943:MOV RAX,qword ptr [RBP + -0x2d8]
	0002894a:MOV qword ptr [RBP + -0x418],RAX
	00028951:CMP byte ptr [RBP + -0x4dd],0x0
	00028958:JZ 0x000289b3
	0002895a:MOV RAX,qword ptr [RBP + -0x418]
	00028961:MOV EDX,EAX
	00028963:LEA RAX,[RBP + -0x190]
	0002896a:MOV RSI,RAX
	0002896d:MOV EDI,EDX
	0002896f:CALL 0x00022b0a
	00028974:MOV RBX,RAX
	00028977:LEA RDX,[RBP + -0x170]
	0002897e:LEA RAX,[RBP + -0x300]
	00028985:MOV ECX,0x64
	0002898a:MOV ESI,0x0
	0002898f:MOV RDI,RAX
	00028992:CALL 0x00026748
	00028997:MOV RDX,RBX
	0002899a:MOV RSI,RAX
	0002899d:LEA RAX,[0x35b5a]
	000289a4:MOV RDI,RAX
	000289a7:MOV EAX,0x0
	000289ac:CALL 0x000222e9
	000289b1:JMP 0x000289ea
	000289b3:LEA RDX,[RBP + -0x170]
	000289ba:LEA RAX,[RBP + -0x300]
	000289c1:MOV ECX,0x64
	000289c6:MOV ESI,0x0
	000289cb:MOV RDI,RAX
	000289ce:CALL 0x00026748
	000289d3:MOV RSI,RAX
	000289d6:LEA RAX,[0x35b70]
	000289dd:MOV RDI,RAX
	000289e0:MOV EAX,0x0
	000289e5:CALL 0x000222e9
	000289ea:MOV byte ptr [RBP + -0x4e3],0x1
	000289f1:JMP 0x00028a18
	000289f3:NOP
	000289f4:JMP 0x00028a18
	000289f6:NOP
	000289f7:JMP 0x00028a18
	000289f9:NOP
	000289fa:JMP 0x00028a18
	000289fc:NOP
	000289fd:JMP 0x00028a18
	000289ff:NOP
	00028a00:JMP 0x00028a18
	00028a02:NOP
	00028a03:JMP 0x00028a18
	00028a05:NOP
	00028a06:JMP 0x00028a18
	00028a08:NOP
	00028a09:JMP 0x00028a18
	00028a0b:NOP
	00028a0c:JMP 0x00028a18
	00028a0e:NOP
	00028a0f:JMP 0x00028a18
	00028a11:NOP
	00028a12:JMP 0x00028a18
	00028a14:NOP
	00028a15:JMP 0x00028a18
	00028a17:NOP
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
126: tzstring_local = tz1string;
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
END_OF_LINE
----------------------------------------------
128: p_local = s + 1;
	00027001:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
129: _Var6 = c_isspace((uint)(byte)*p_local);
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
END_OF_LINE
----------------------------------------------
130: tz = ptVar14;
	00027036:JNZ 0x0002700e
END_OF_LINE
----------------------------------------------
131: s = p_local;
	00027036:JNZ 0x0002700e
END_OF_LINE
----------------------------------------------
132: } while (_Var6);
	00027036:JNZ 0x0002700e
END_OF_LINE
----------------------------------------------
133: goto LAB_0002705c;
	0002705c:MOV RCX,qword ptr [RBP + -0x508]
END_OF_LINE
----------------------------------------------
135: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
137: s = s + 1;
	00026eb8:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
138: if ((*s == '\\') || (*s == '\"')) goto LAB_0002703a;
	00026ec7:MOVZX EAX,byte ptr [RAX]
	00026eca:CMP AL,0x5c
	00026ecc:JZ 0x0002703a
	00026ed2:MOV RAX,qword ptr [RBP + -0x480]
	00026ed9:MOVZX EAX,byte ptr [RAX]
	00026edc:CMP AL,0x22
	00026ede:JZ 0x0002703a
	00026ee4:JMP 0x0002705c
	00026ee9:MOV RAX,qword ptr [RBP + -0x480]
	00026ef0:MOVZX EAX,byte ptr [RAX]
	00026ef3:CMP AL,0x22
	00026ef5:JNZ 0x0002703a
	00026efb:LEA RAX,[RBP + -0x100]
	00026f02:MOV qword ptr [RBP + -0x478],RAX
	00026f09:CMP qword ptr [RBP + -0x488],0x64
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
	00026f37:MOV RAX,qword ptr [RBP + -0x4a0]
	00026f3e:MOV qword ptr [RBP + -0x478],RAX
	00026f45:MOV RAX,qword ptr [RBP + -0x478]
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
	00026f53:MOV RAX,qword ptr [RBP + -0x460]
	00026f5a:MOV qword ptr [RBP + -0x480],RAX
	00026f61:JMP 0x00026fa2
	00026f63:MOV RAX,qword ptr [RBP + -0x480]
	00026f6a:MOVZX EAX,byte ptr [RAX]
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
	00026fa2:MOV RAX,qword ptr [RBP + -0x480]
	00026fa9:MOVZX EAX,byte ptr [RAX]
	00026fac:CMP AL,0x22
	00026fae:JNZ 0x00026f63
	00026fb0:MOV RAX,qword ptr [RBP + -0x470]
	00026fb7:MOV byte ptr [RAX],0x0
	00026fba:MOV RAX,qword ptr [RBP + -0x478]
	00026fc1:MOV RDI,RAX
	00026fc4:CALL 0x0002c6e0
	00026fc9:MOV qword ptr [RBP + -0x458],RAX
	00026fd0:CMP qword ptr [RBP + -0x458],0x0
	00026fd8:JZ 0x000289f6
	00026fde:MOV RAX,qword ptr [RBP + -0x458]
	00026fe5:MOV qword ptr [RBP + -0x490],RAX
	00026fec:MOV RAX,qword ptr [RBP + -0x478]
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
	00026ffa:MOV RAX,qword ptr [RBP + -0x480]
	00027001:ADD RAX,0x1
	00027005:MOV qword ptr [RBP + -0x500],RAX
	0002700c:JMP 0x00027016
	0002700e:ADD qword ptr [RBP + -0x500],0x1
	00027016:MOV RAX,qword ptr [RBP + -0x500]
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
	00027034:TEST AL,AL
	00027036:JNZ 0x0002700e
	00027038:JMP 0x0002705c
	0002703a:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
141: LAB_0002705c:
	0002705c:MOV RCX,qword ptr [RBP + -0x508]
END_OF_LINE
----------------------------------------------
142: ptVar11 = localtime_rz(tz,&now_local->tv_sec,&tmp);
	00027063:LEA RDX,[RBP + -0x380]
	0002706a:MOV RAX,qword ptr [RBP + -0x490]
	00027071:MOV RSI,RCX
	00027074:MOV RDI,RAX
	00027077:CALL 0x0002cb90
END_OF_LINE
----------------------------------------------
143: if (ptVar11 == (tm *)0x0) goto LAB_00028a18;
	0002707c:TEST RAX,RAX
	0002707f:JZ 0x000289f9
	00027085:MOV RAX,qword ptr [RBP + -0x500]
	0002708c:MOVZX EAX,byte ptr [RAX]
	0002708f:TEST AL,AL
	00027091:JNZ 0x000270a1
	00027093:LEA RAX,[0x35370]
	0002709a:MOV qword ptr [RBP + -0x500],RAX
	000270a1:MOV RAX,qword ptr [RBP + -0x500]
	000270a8:MOV qword ptr [RBP + -0x2c0],RAX
	000270af:MOV EAX,dword ptr [RBP + -0x50c]
	000270b5:AND EAX,0x1
	000270b8:TEST EAX,EAX
	000270ba:SETNZ AL
	000270bd:MOV byte ptr [RBP + -0x1e7],AL
	000270c3:MOV EAX,dword ptr [RBP + -0x36c]
	000270c9:MOV EDX,0x0
	000270ce:CDQE
	000270d0:ADD RAX,0x76c
	000270d6:MOV qword ptr [RBP + -0x298],RAX
	000270dd:MOV RAX,RDX
	000270e0:AND EAX,0x1
	000270e3:TEST AL,AL
	000270e5:JZ 0x0002710f
	000270e7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000270ee:TEST AL,AL
	000270f0:JZ 0x000289fc
	000270f6:LEA RAX,[0x35378]
	000270fd:MOV RDI,RAX
	00027100:MOV EAX,0x0
	00027105:CALL 0x000222e9
	0002710a:JMP 0x000289fc
	0002710f:MOV qword ptr [RBP + -0x290],0x0
	0002711a:MOV EAX,dword ptr [RBP + -0x370]
	00027120:ADD EAX,0x1
	00027123:CDQE
	00027125:MOV qword ptr [RBP + -0x288],RAX
	0002712c:MOV EAX,dword ptr [RBP + -0x374]
	00027132:CDQE
	00027134:MOV qword ptr [RBP + -0x280],RAX
	0002713b:MOV EAX,dword ptr [RBP + -0x378]
	00027141:CDQE
	00027143:MOV qword ptr [RBP + -0x278],RAX
	0002714a:MOV EAX,dword ptr [RBP + -0x37c]
	00027150:CDQE
	00027152:MOV qword ptr [RBP + -0x270],RAX
	00027159:MOV EAX,dword ptr [RBP + -0x380]
	0002715f:CDQE
	00027161:MOV qword ptr [RBP + -0x268],RAX
	00027168:MOV EAX,dword ptr [RBP + -0x4d8]
	0002716e:CDQE
	00027170:MOV qword ptr [RBP + -0x260],RAX
	00027177:MOV EAX,dword ptr [RBP + -0x360]
	0002717d:MOV dword ptr [RBP + -0x3e0],EAX
	00027183:MOV dword ptr [RBP + -0x2a4],0x2
	0002718d:MOV qword ptr [RBP + -0x258],0x0
	00027198:MOV qword ptr [RBP + -0x250],0x0
	000271a3:MOV qword ptr [RBP + -0x248],0x0
	000271ae:MOV qword ptr [RBP + -0x240],0x0
	000271b9:MOV qword ptr [RBP + -0x238],0x0
	000271c4:MOV qword ptr [RBP + -0x230],0x0
	000271cf:MOV qword ptr [RBP + -0x228],0x0
	000271da:MOV byte ptr [RBP + -0x220],0x0
	000271e1:MOV byte ptr [RBP + -0x21f],0x0
	000271e8:MOV qword ptr [RBP + -0x218],0x0
	000271f3:MOV qword ptr [RBP + -0x210],0x0
	000271fe:MOV qword ptr [RBP + -0x1f8],0x0
	00027209:MOV qword ptr [RBP + -0x208],0x0
	00027214:MOV qword ptr [RBP + -0x200],0x0
	0002721f:MOV qword ptr [RBP + -0x1f0],0x0
	0002722a:MOV byte ptr [RBP + -0x1e8],0x0
	00027231:MOV byte ptr [RBP + -0x1e6],0x0
	00027238:MOV byte ptr [RBP + -0x1e5],0x0
	0002723f:MOV byte ptr [RBP + -0x1e3],0x0
	00027246:MOV byte ptr [RBP + -0x1e4],0x0
	0002724d:MOV byte ptr [RBP + -0x1e2],0x0
	00027254:MOV byte ptr [RBP + -0x1e1],0x0
	0002725b:MOV byte ptr [RBP + -0x1e0],0x0
	00027262:MOV RAX,qword ptr [RBP + -0x350]
	00027269:MOV qword ptr [RBP + -0x1d8],RAX
	00027270:MOV dword ptr [RBP + -0x1d0],0x10d
	0002727a:MOV EAX,dword ptr [RBP + -0x360]
	00027280:MOV dword ptr [RBP + -0x1cc],EAX
	00027286:MOV qword ptr [RBP + -0x1c8],0x0
	00027291:MOV dword ptr [RBP + -0x4dc],0x1
	0002729b:JMP 0x00027378
	000272a0:MOV EAX,dword ptr [RBP + -0x4dc]
	000272a6:IMUL EAX,EAX,0x76a700
	000272ac:MOVSXD RDX,EAX
	000272af:MOV ECX,0x0
	000272b4:MOV RAX,qword ptr [RBP + -0x498]
	000272bb:ADD RAX,RDX
	000272be:JNO 0x000272c5
	000272c0:MOV ECX,0x1
	000272c5:MOV qword ptr [RBP + -0x3c0],RAX
	000272cc:MOV RAX,RCX
	000272cf:AND EAX,0x1
	000272d2:TEST AL,AL
	000272d4:JNZ 0x00027385
	000272da:MOV RAX,qword ptr [RBP + -0x3c0]
	000272e1:MOV RDI,RAX
	000272e4:CALL 0x000222c3
	000272e9:TEST AL,AL
	000272eb:JNZ 0x00027385
	000272f1:MOV RAX,qword ptr [RBP + -0x3c0]
	000272f8:MOV qword ptr [RBP + -0x340],RAX
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
	00027340:MOV RAX,qword ptr [RBP + -0x2d0]
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
	00027358:MOV EAX,dword ptr [RBP + -0x2e0]
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
	0002736f:JMP 0x00027385
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
	00027378:CMP dword ptr [RBP + -0x4dc],0x3
	0002737f:JLE 0x000272a0
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
	0002738c:TEST RAX,RAX
	0002738f:JZ 0x000273cf
	00027391:MOV RAX,qword ptr [RBP + -0x1c8]
	00027398:TEST RAX,RAX
	0002739b:JZ 0x000273cf
	0002739d:MOV RDX,qword ptr [RBP + -0x1c8]
	000273a4:MOV RAX,qword ptr [RBP + -0x1d8]
	000273ab:MOV RSI,RDX
	000273ae:MOV RDI,RAX
	000273b1:CALL 0x00005ce0
	000273b6:TEST EAX,EAX
	000273b8:JNZ 0x000273cf
	000273ba:MOV dword ptr [RBP + -0x1cc],0xffffffff
	000273c4:MOV qword ptr [RBP + -0x1c8],0x0
	000273cf:LEA RAX,[RBP + -0x2c0]
	000273d6:MOV RDI,RAX
	000273d9:CALL 0x000234b7
	000273de:TEST EAX,EAX
	000273e0:JZ 0x0002742d
	000273e2:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000273e9:TEST AL,AL
	000273eb:JZ 0x000289ff
	000273f1:MOV RDX,qword ptr [RBP + -0x2c0]
	000273f8:MOV RAX,qword ptr [RBP + -0x2c0]
	000273ff:CMP qword ptr [RBP + -0x468],RAX
	00027406:JA 0x00027411
	00027408:LEA RAX,[0x3539a]
	0002740f:JMP 0x00027418
	00027411:LEA RAX,[0x353b8]
	00027418:MOV RSI,RDX
	0002741b:MOV RDI,RAX
	0002741e:MOV EAX,0x0
	00027423:CALL 0x000222e9
	00027428:JMP 0x000289ff
	0002742d:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027434:TEST AL,AL
	00027436:JZ 0x00027643
	0002743c:LEA RAX,[0x353e0]
	00027443:MOV RDI,RAX
	00027446:MOV EAX,0x0
	0002744b:CALL 0x000222e9
	00027450:MOVZX EAX,byte ptr [RBP + -0x220]
	00027457:TEST AL,AL
	00027459:JZ 0x00027486
	0002745b:MOV RAX,qword ptr [0x0003dfe0]
	00027462:MOV RAX,qword ptr [RAX]
	00027465:MOV RCX,RAX
	00027468:MOV EDX,0x18
	0002746d:MOV ESI,0x1
	00027472:LEA RAX,[0x353f1]
	00027479:MOV RDI,RAX
	0002747c:CALL 0x00006010
	00027481:JMP 0x0002759d
	00027486:MOV RAX,qword ptr [RBP + -0x1f0]
	0002748d:TEST RAX,RAX
	00027490:JZ 0x000274bd
	00027492:MOV RAX,qword ptr [0x0003dfe0]
	00027499:MOV RAX,qword ptr [RAX]
	0002749c:MOV RCX,RAX
	0002749f:MOV EDX,0x17
	000274a4:MOV ESI,0x1
	000274a9:LEA RAX,[0x3540a]
	000274b0:MOV RDI,RAX
	000274b3:CALL 0x00006010
	000274b8:JMP 0x0002759d
	000274bd:CMP qword ptr [RBP + -0x520],0x0
	000274c5:JZ 0x00027577
	000274cb:MOV RAX,qword ptr [RBP + -0x490]
	000274d2:CMP RAX,qword ptr [RBP + -0x518]
	000274d9:JZ 0x00027508
	000274db:MOV RAX,qword ptr [0x0003dfe0]
	000274e2:MOV RAX,qword ptr [RAX]
	000274e5:MOV RDX,qword ptr [RBP + -0x520]
	000274ec:LEA RCX,[0x35422]
	000274f3:MOV RSI,RCX
	000274f6:MOV RDI,RAX
	000274f9:MOV EAX,0x0
	000274fe:CALL 0x00005d30
	00027503:JMP 0x0002759d
	00027508:MOV RAX,qword ptr [RBP + -0x520]
	0002750f:LEA RDX,[0x35439]
	00027516:MOV RSI,RDX
	00027519:MOV RDI,RAX
	0002751c:CALL 0x00005ce0
	00027521:TEST EAX,EAX
	00027523:JNZ 0x0002754d
	00027525:MOV RAX,qword ptr [0x0003dfe0]
	0002752c:MOV RAX,qword ptr [RAX]
	0002752f:MOV RCX,RAX
	00027532:MOV EDX,0x21
	00027537:MOV ESI,0x1
	0002753c:LEA RAX,[0x35440]
	00027543:MOV RDI,RAX
	00027546:CALL 0x00006010
	0002754b:JMP 0x0002759d
	0002754d:MOV RAX,qword ptr [0x0003dfe0]
	00027554:MOV RAX,qword ptr [RAX]
	00027557:MOV RDX,qword ptr [RBP + -0x520]
	0002755e:LEA RCX,[0x35462]
	00027565:MOV RSI,RCX
	00027568:MOV RDI,RAX
	0002756b:MOV EAX,0x0
	00027570:CALL 0x00005d30
	00027575:JMP 0x0002759d
	00027577:MOV RAX,qword ptr [0x0003dfe0]
	0002757e:MOV RAX,qword ptr [RAX]
	00027581:MOV RCX,RAX
	00027584:MOV EDX,0xe
	00027589:MOV ESI,0x1
	0002758e:LEA RAX,[0x3547c]
	00027595:MOV RDI,RAX
	00027598:CALL 0x00006010
	0002759d:MOV RAX,qword ptr [RBP + -0x208]
	000275a4:TEST RAX,RAX
	000275a7:JZ 0x000275e5
	000275a9:MOV RAX,qword ptr [RBP + -0x1f0]
	000275b0:TEST RAX,RAX
	000275b3:JNZ 0x000275e5
	000275b5:MOV EAX,dword ptr [RBP + -0x2ac]
	000275bb:TEST EAX,EAX
	000275bd:JLE 0x000275e5
	000275bf:MOV RAX,qword ptr [0x0003dfe0]
	000275c6:MOV RAX,qword ptr [RAX]
	000275c9:MOV RCX,RAX
	000275cc:MOV EDX,0x5
	000275d1:MOV ESI,0x1
	000275d6:LEA RAX,[0x3548b]
	000275dd:MOV RDI,RAX
	000275e0:CALL 0x00006010
	000275e5:MOV RAX,qword ptr [RBP + -0x1f0]
	000275ec:TEST RAX,RAX
	000275ef:JZ 0x0002762c
	000275f1:MOV EAX,dword ptr [RBP + -0x2a8]
	000275f7:LEA RDX,[RBP + -0x190]
	000275fe:MOV RSI,RDX
	00027601:MOV EDI,EAX
	00027603:CALL 0x00022b0a
	00027608:MOV RDX,RAX
	0002760b:MOV RAX,qword ptr [0x0003dfe0]
	00027612:MOV RAX,qword ptr [RAX]
	00027615:LEA RCX,[0x35491]
	0002761c:MOV RSI,RCX
	0002761f:MOV RDI,RAX
	00027622:MOV EAX,0x0
	00027627:CALL 0x00005d30
	0002762c:MOV RAX,qword ptr [0x0003dfe0]
	00027633:MOV RAX,qword ptr [RAX]
	00027636:MOV RSI,RAX
	00027639:MOV EDI,0xa
	0002763e:CALL 0x00005c60
	00027643:MOVZX EAX,byte ptr [RBP + -0x220]
	0002764a:TEST AL,AL
	0002764c:JZ 0x0002766f
	0002764e:MOV RCX,qword ptr [RBP + -0x4f8]
	00027655:MOV RAX,qword ptr [RBP + -0x268]
	0002765c:MOV RDX,qword ptr [RBP + -0x260]
	00027663:MOV qword ptr [RCX],RAX
	00027666:MOV qword ptr [RCX + 0x8],RDX
	0002766a:JMP 0x000287e8
	0002766f:MOV RDX,qword ptr [RBP + -0x1f8]
	00027676:MOV RAX,qword ptr [RBP + -0x218]
	0002767d:OR RDX,RAX
	00027680:MOV RAX,qword ptr [RBP + -0x210]
	00027687:OR RDX,RAX
	0002768a:MOV RAX,qword ptr [RBP + -0x200]
	00027691:MOV RCX,RDX
	00027694:OR RCX,RAX
	00027697:MOV RDX,qword ptr [RBP + -0x208]
	0002769e:MOV RAX,qword ptr [RBP + -0x1f0]
	000276a5:ADD RAX,RDX
	000276a8:OR RAX,RCX
	000276ab:CMP RAX,0x1
	000276af:JLE 0x0002777c
	000276b5:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000276bc:TEST AL,AL
	000276be:JZ 0x00028a02
	000276c4:MOV RAX,qword ptr [RBP + -0x1f8]
	000276cb:CMP RAX,0x1
	000276cf:JLE 0x000276e5
	000276d1:LEA RAX,[0x35498]
	000276d8:MOV RDI,RAX
	000276db:MOV EAX,0x0
	000276e0:CALL 0x000222e9
	000276e5:MOV RAX,qword ptr [RBP + -0x218]
	000276ec:CMP RAX,0x1
	000276f0:JLE 0x00027706
	000276f2:LEA RAX,[0x354c0]
	000276f9:MOV RDI,RAX
	000276fc:MOV EAX,0x0
	00027701:CALL 0x000222e9
	00027706:MOV RAX,qword ptr [RBP + -0x210]
	0002770d:CMP RAX,0x1
	00027711:JLE 0x00027727
	00027713:LEA RAX,[0x354e8]
	0002771a:MOV RDI,RAX
	0002771d:MOV EAX,0x0
	00027722:CALL 0x000222e9
	00027727:MOV RAX,qword ptr [RBP + -0x200]
	0002772e:CMP RAX,0x1
	00027732:JLE 0x00027748
	00027734:LEA RAX,[0x35510]
	0002773b:MOV RDI,RAX
	0002773e:MOV EAX,0x0
	00027743:CALL 0x000222e9
	00027748:MOV RDX,qword ptr [RBP + -0x208]
	0002774f:MOV RAX,qword ptr [RBP + -0x1f0]
	00027756:ADD RAX,RDX
	00027759:CMP RAX,0x1
	0002775d:JLE 0x00028a02
	00027763:LEA RAX,[0x35540]
	0002776a:MOV RDI,RAX
	0002776d:MOV EAX,0x0
	00027772:CALL 0x000222e9
	00027777:JMP 0x00028a02
	0002777c:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027783:MOVZX EAX,AL
	00027786:LEA RDX,[RBP + -0x400]
	0002778d:ADD RDX,0x14
	00027791:SUB RSP,0x8
	00027795:PUSH qword ptr [RBP + -0x290]
	0002779b:PUSH qword ptr [RBP + -0x298]
	000277a1:PUSH qword ptr [RBP + -0x2a0]
	000277a7:MOV RSI,RDX
	000277aa:MOV EDI,EAX
	000277ac:CALL 0x00025c53
	000277b1:ADD RSP,0x20
	000277b5:XOR EAX,0x1
	000277b8:TEST AL,AL
	000277ba:JNZ 0x00027822
	000277bc:MOV RAX,qword ptr [RBP + -0x288]
	000277c3:MOV EDX,0x0
	000277c8:ADD RAX,-0x1
	000277cc:JNO 0x000277d3
	000277ce:MOV EDX,0x1
	000277d3:MOVSXD RCX,EAX
	000277d6:CMP RAX,RCX
	000277d9:JZ 0x000277e0
	000277db:MOV EDX,0x1
	000277e0:MOV dword ptr [RBP + -0x3f0],EAX
	000277e6:MOV EAX,EDX
	000277e8:AND EAX,0x1
	000277eb:TEST AL,AL
	000277ed:JNZ 0x00027822
	000277ef:MOV RAX,qword ptr [RBP + -0x280]
	000277f6:MOV EDX,0x0
	000277fb:ADD RAX,0x0
	000277ff:JNO 0x00027806
	00027801:MOV EDX,0x1
	00027806:MOVSXD RCX,EAX
	00027809:CMP RAX,RCX
	0002780c:JZ 0x00027813
	0002780e:MOV EDX,0x1
	00027813:MOV dword ptr [RBP + -0x3f4],EAX
	00027819:MOV EAX,EDX
	0002781b:AND EAX,0x1
	0002781e:TEST AL,AL
	00027820:JZ 0x0002784a
	00027822:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027829:TEST AL,AL
	0002782b:JZ 0x00028a05
	00027831:LEA RAX,[0x35568]
	00027838:MOV RDI,RAX
	0002783b:MOV EAX,0x0
	00027840:CALL 0x000222e9
	00027845:JMP 0x00028a05
	0002784a:MOV RAX,qword ptr [RBP + -0x1f8]
	00027851:TEST RAX,RAX
	00027854:JNZ 0x00027885
	00027856:MOVZX EAX,byte ptr [RBP + -0x21f]
	0002785d:TEST AL,AL
	0002785f:JZ 0x00027992
	00027865:MOV RAX,qword ptr [RBP + -0x218]
	0002786c:TEST RAX,RAX
	0002786f:JNZ 0x00027992
	00027875:MOV RAX,qword ptr [RBP + -0x210]
	0002787c:TEST RAX,RAX
	0002787f:JNZ 0x00027992
	00027885:MOV EDX,dword ptr [RBP + -0x2a4]
	0002788b:MOV RAX,qword ptr [RBP + -0x278]
	00027892:MOV ESI,EDX
	00027894:MOV RDI,RAX
	00027897:CALL 0x00025b33
	0002789c:MOV dword ptr [RBP + -0x3f8],EAX
	000278a2:MOV EAX,dword ptr [RBP + -0x3f8]
	000278a8:TEST EAX,EAX
	000278aa:JNS 0x0002791a
	000278ac:MOV EAX,dword ptr [RBP + -0x2a4]
	000278b2:TEST EAX,EAX
	000278b4:JZ 0x000278d3
	000278b6:MOV EAX,dword ptr [RBP + -0x2a4]
	000278bc:CMP EAX,0x1
	000278bf:JNZ 0x000278ca
	000278c1:LEA RAX,[0x346c9]
	000278c8:JMP 0x000278da
	000278ca:LEA RAX,[0x346f4]
	000278d1:JMP 0x000278da
	000278d3:LEA RAX,[0x3558d]
	000278da:MOV qword ptr [RBP + -0x450],RAX
	000278e1:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000278e8:TEST AL,AL
	000278ea:JZ 0x00028a08
	000278f0:MOV RAX,qword ptr [RBP + -0x278]
	000278f7:MOV RDX,qword ptr [RBP + -0x450]
	000278fe:MOV RSI,RAX
	00027901:LEA RAX,[0x35590]
	00027908:MOV RDI,RAX
	0002790b:MOV EAX,0x0
	00027910:CALL 0x000222e9
	00027915:JMP 0x00028a08
	0002791a:MOV RAX,qword ptr [RBP + -0x270]
	00027921:MOV dword ptr [RBP + -0x3fc],EAX
	00027927:MOV RAX,qword ptr [RBP + -0x268]
	0002792e:MOV dword ptr [RBP + -0x400],EAX
	00027934:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002793b:TEST AL,AL
	0002793d:JZ 0x000279de
	00027943:LEA RCX,[RBP + -0x170]
	0002794a:LEA RAX,[RBP + -0x400]
	00027951:MOV EDX,0x64
	00027956:MOV RSI,RCX
	00027959:MOV RDI,RAX
	0002795c:CALL 0x000268fa
	00027961:MOV RDX,RAX
	00027964:MOV RAX,qword ptr [RBP + -0x1f8]
	0002796b:TEST RAX,RAX
	0002796e:JZ 0x00027979
	00027970:LEA RAX,[0x355b0]
	00027977:JMP 0x00027980
	00027979:LEA RAX,[0x355e0]
	00027980:MOV RSI,RDX
	00027983:MOV RDI,RAX
	00027986:MOV EAX,0x0
	0002798b:CALL 0x000222e9
	00027990:JMP 0x000279de
	00027992:MOV dword ptr [RBP + -0x400],0x0
	0002799c:MOV EAX,dword ptr [RBP + -0x400]
	000279a2:MOV dword ptr [RBP + -0x3fc],EAX
	000279a8:MOV EAX,dword ptr [RBP + -0x3fc]
	000279ae:MOV dword ptr [RBP + -0x3f8],EAX
	000279b4:MOV qword ptr [RBP + -0x260],0x0
	000279bf:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000279c6:TEST AL,AL
	000279c8:JZ 0x000279de
	000279ca:LEA RAX,[0x35610]
	000279d1:MOV RDI,RAX
	000279d4:MOV EAX,0x0
	000279d9:CALL 0x000222e9
	000279de:MOV RDX,qword ptr [RBP + -0x218]
	000279e5:MOV RAX,qword ptr [RBP + -0x210]
	000279ec:OR RDX,RAX
	000279ef:MOV RAX,qword ptr [RBP + -0x1f8]
	000279f6:OR RAX,RDX
	000279f9:TEST RAX,RAX
	000279fc:JZ 0x00027a08
	000279fe:MOV dword ptr [RBP + -0x3e0],0xffffffff
	00027a08:MOV RAX,qword ptr [RBP + -0x208]
	00027a0f:TEST RAX,RAX
	00027a12:JZ 0x00027a20
	00027a14:MOV EAX,dword ptr [RBP + -0x2ac]
	00027a1a:MOV dword ptr [RBP + -0x3e0],EAX
	00027a20:MOV EAX,dword ptr [RBP + -0x400]
	00027a26:MOV dword ptr [RBP + -0x3c0],EAX
	00027a2c:MOV EAX,dword ptr [RBP + -0x3fc]
	00027a32:MOV dword ptr [RBP + -0x3bc],EAX
	00027a38:MOV EAX,dword ptr [RBP + -0x3f8]
	00027a3e:MOV dword ptr [RBP + -0x3b8],EAX
	00027a44:MOV EAX,dword ptr [RBP + -0x3f4]
	00027a4a:MOV dword ptr [RBP + -0x3b4],EAX
	00027a50:MOV EAX,dword ptr [RBP + -0x3f0]
	00027a56:MOV dword ptr [RBP + -0x3b0],EAX
	00027a5c:MOV EAX,dword ptr [RBP + -0x3ec]
	00027a62:MOV dword ptr [RBP + -0x3ac],EAX
	00027a68:MOV EAX,dword ptr [RBP + -0x3e0]
	00027a6e:MOV dword ptr [RBP + -0x3a0],EAX
	00027a74:LEA RDX,[RBP + -0x400]
	00027a7b:MOV RAX,qword ptr [RBP + -0x490]
	00027a82:MOV RSI,RDX
	00027a85:MOV RDI,RAX
	00027a88:CALL 0x0002cc40
	00027a8d:MOV qword ptr [RBP + -0x498],RAX
	00027a94:MOV RCX,qword ptr [RBP + -0x498]
	00027a9b:LEA RDX,[RBP + -0x400]
	00027aa2:LEA RSI,[RBP + -0x3c0]
	00027aa9:MOV RAX,qword ptr [RBP + -0x490]
	00027ab0:MOV RDI,RAX
	00027ab3:CALL 0x00026665
	00027ab8:XOR EAX,0x1
	00027abb:TEST AL,AL
	00027abd:JZ 0x00027c5c
	00027ac3:MOV byte ptr [RBP + -0x4e2],0x0
	00027aca:MOV RAX,qword ptr [RBP + -0x1f0]
	00027ad1:TEST RAX,RAX
	00027ad4:SETNZ AL
	00027ad7:MOV byte ptr [RBP + -0x4e0],AL
	00027add:CMP byte ptr [RBP + -0x4e0],0x0
	00027ae4:JZ 0x00027c25
	00027aea:MOV byte ptr [RBP + -0x8e],0x58
	00027af1:MOVZX EAX,byte ptr [RBP + -0x8e]
	00027af8:MOV byte ptr [RBP + -0x8f],AL
	00027afe:MOVZX EAX,byte ptr [RBP + -0x8f]
	00027b05:MOV byte ptr [RBP + -0x90],AL
	00027b0b:MOV EAX,dword ptr [RBP + -0x2a8]
	00027b11:LEA RDX,[RBP + -0x90]
	00027b18:ADD RDX,0x3
	00027b1c:MOV RSI,RDX
	00027b1f:MOV EDI,EAX
	00027b21:CALL 0x00022b0a
	00027b26:LEA RAX,[RBP + -0x90]
	00027b2d:MOV RDI,RAX
	00027b30:CALL 0x0002c6e0
	00027b35:MOV qword ptr [RBP + -0x448],RAX
	00027b3c:CMP qword ptr [RBP + -0x448],0x0
	00027b44:JNZ 0x00027b78
	00027b46:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027b4d:TEST AL,AL
	00027b4f:JZ 0x00028a0b
	00027b55:LEA RAX,[RBP + -0x90]
	00027b5c:MOV RSI,RAX
	00027b5f:LEA RAX,[0x35644]
	00027b66:MOV RDI,RAX
	00027b69:MOV EAX,0x0
	00027b6e:CALL 0x000222e9
	00027b73:JMP 0x00028a02
	00027b78:MOV EAX,dword ptr [RBP + -0x3c0]
	00027b7e:MOV dword ptr [RBP + -0x400],EAX
	00027b84:MOV EAX,dword ptr [RBP + -0x3bc]
	00027b8a:MOV dword ptr [RBP + -0x3fc],EAX
	00027b90:MOV EAX,dword ptr [RBP + -0x3b8]
	00027b96:MOV dword ptr [RBP + -0x3f8],EAX
	00027b9c:MOV EAX,dword ptr [RBP + -0x3b4]
	00027ba2:MOV dword ptr [RBP + -0x3f4],EAX
	00027ba8:MOV EAX,dword ptr [RBP + -0x3b0]
	00027bae:MOV dword ptr [RBP + -0x3f0],EAX
	00027bb4:MOV EAX,dword ptr [RBP + -0x3ac]
	00027bba:MOV dword ptr [RBP + -0x3ec],EAX
	00027bc0:MOV EAX,dword ptr [RBP + -0x3a0]
	00027bc6:MOV dword ptr [RBP + -0x3e0],EAX
	00027bcc:LEA RDX,[RBP + -0x400]
	00027bd3:MOV RAX,qword ptr [RBP + -0x448]
	00027bda:MOV RSI,RDX
	00027bdd:MOV RDI,RAX
	00027be0:CALL 0x0002cc40
	00027be5:MOV qword ptr [RBP + -0x498],RAX
	00027bec:MOV RCX,qword ptr [RBP + -0x498]
	00027bf3:LEA RDX,[RBP + -0x400]
	00027bfa:LEA RSI,[RBP + -0x3c0]
	00027c01:MOV RAX,qword ptr [RBP + -0x448]
	00027c08:MOV RDI,RAX
	00027c0b:CALL 0x00026665
	00027c10:MOV byte ptr [RBP + -0x4e2],AL
	00027c16:MOV RAX,qword ptr [RBP + -0x448]
	00027c1d:MOV RDI,RAX
	00027c20:CALL 0x0002c969
	00027c25:MOVZX EAX,byte ptr [RBP + -0x4e2]
	00027c2c:XOR EAX,0x1
	00027c2f:TEST AL,AL
	00027c31:JZ 0x00027c5c
	00027c33:MOVZX ECX,byte ptr [RBP + -0x4e0]
	00027c3a:LEA RDX,[RBP + -0x2c0]
	00027c41:LEA RSI,[RBP + -0x400]
	00027c48:LEA RAX,[RBP + -0x3c0]
	00027c4f:MOV RDI,RAX
	00027c52:CALL 0x00026951
	00027c57:JMP 0x00028a18
	00027c5c:MOV RAX,qword ptr [RBP + -0x210]
	00027c63:TEST RAX,RAX
	00027c66:JZ 0x00027ea4
	00027c6c:MOV RAX,qword ptr [RBP + -0x218]
	00027c73:TEST RAX,RAX
	00027c76:JNZ 0x00027ea4
	00027c7c:MOV RDX,qword ptr [RBP + -0x2b8]
	00027c83:MOV RAX,qword ptr [RBP + -0x2b8]
	00027c8a:TEST RAX,RAX
	00027c8d:JLE 0x00027ca6
	00027c8f:MOV ECX,dword ptr [RBP + -0x3e8]
	00027c95:MOV EAX,dword ptr [RBP + -0x2b0]
	00027c9b:CMP ECX,EAX
	00027c9d:JZ 0x00027ca6
	00027c9f:MOV EAX,0x1
	00027ca4:JMP 0x00027cab
	00027ca6:MOV EAX,0x0
	00027cab:MOVSXD RCX,EAX
	00027cae:MOV RAX,RDX
	00027cb1:SUB RAX,RCX
	00027cb4:MOV EDX,0x0
	00027cb9:IMUL RAX,RAX,0x7
	00027cbd:JNO 0x00027cc4
	00027cbf:MOV EDX,0x1
	00027cc4:MOV qword ptr [RBP + -0x300],RAX
	00027ccb:MOV RAX,RDX
	00027cce:AND EAX,0x1
	00027cd1:TEST AL,AL
	00027cd3:JNZ 0x00027d72
	00027cd9:MOV EAX,dword ptr [RBP + -0x2b0]
	00027cdf:MOV EDX,dword ptr [RBP + -0x3e8]
	00027ce5:SUB EAX,EDX
	00027ce7:LEA EDX,[RAX + 0x7]
	00027cea:MOVSXD RAX,EDX
	00027ced:IMUL RAX,RAX,-0x6db6db6d
	00027cf4:SHR RAX,0x20
	00027cf8:ADD EAX,EDX
	00027cfa:SAR EAX,0x2
	00027cfd:MOV ECX,EDX
	00027cff:SAR ECX,0x1f
	00027d02:SUB EAX,ECX
	00027d04:MOV ECX,EAX
	00027d06:SHL ECX,0x3
	00027d09:SUB ECX,EAX
	00027d0b:MOV EAX,EDX
	00027d0d:SUB EAX,ECX
	00027d0f:MOV RDX,qword ptr [RBP + -0x300]
	00027d16:CDQE
	00027d18:MOV ECX,0x0
	00027d1d:ADD RAX,RDX
	00027d20:JNO 0x00027d27
	00027d22:MOV ECX,0x1
	00027d27:MOV qword ptr [RBP + -0x300],RAX
	00027d2e:MOV RAX,RCX
	00027d31:AND EAX,0x1
	00027d34:TEST AL,AL
	00027d36:JNZ 0x00027d72
	00027d38:MOV RCX,qword ptr [RBP + -0x300]
	00027d3f:MOV EAX,dword ptr [RBP + -0x3f4]
	00027d45:CDQE
	00027d47:MOV EDX,0x0
	00027d4c:ADD RAX,RCX
	00027d4f:JNO 0x00027d56
	00027d51:MOV EDX,0x1
	00027d56:MOVSXD RCX,EAX
	00027d59:CMP RAX,RCX
	00027d5c:JZ 0x00027d63
	00027d5e:MOV EDX,0x1
	00027d63:MOV dword ptr [RBP + -0x3f4],EAX
	00027d69:MOV EAX,EDX
	00027d6b:AND EAX,0x1
	00027d6e:TEST AL,AL
	00027d70:JZ 0x00027d7f
	00027d72:MOV qword ptr [RBP + -0x498],-0x1
	00027d7d:JMP 0x00027da9
	00027d7f:MOV dword ptr [RBP + -0x3e0],0xffffffff
	00027d89:LEA RDX,[RBP + -0x400]
	00027d90:MOV RAX,qword ptr [RBP + -0x490]
	00027d97:MOV RSI,RDX
	00027d9a:MOV RDI,RAX
	00027d9d:CALL 0x0002cc40
	00027da2:MOV qword ptr [RBP + -0x498],RAX
	00027da9:CMP qword ptr [RBP + -0x498],-0x1
	00027db1:JNZ 0x00027e3c
	00027db7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027dbe:TEST AL,AL
	00027dc0:JZ 0x00028a0e
	00027dc6:LEA RDX,[RBP + -0x170]
	00027dcd:LEA RSI,[RBP + -0x2c0]
	00027dd4:LEA RAX,[RBP + -0x400]
	00027ddb:MOV ECX,0x64
	00027de0:MOV RDI,RAX
	00027de3:CALL 0x00026748
	00027de8:MOV R13,RAX
	00027deb:MOV R12D,dword ptr [RBP + -0x2b0]
	00027df2:MOV RBX,qword ptr [RBP + -0x2b8]
	00027df9:LEA RCX,[RBP + -0x90]
	00027e00:LEA RAX,[RBP + -0x2c0]
	00027e07:MOV EDX,0x64
	00027e0c:MOV RSI,RCX
	00027e0f:MOV RDI,RAX
	00027e12:CALL 0x000229c0
	00027e17:MOV R8,R13
	00027e1a:MOV ECX,R12D
	00027e1d:MOV RDX,RBX
	00027e20:MOV RSI,RAX
	00027e23:LEA RAX,[0x35668]
	00027e2a:MOV RDI,RAX
	00027e2d:MOV EAX,0x0
	00027e32:CALL 0x000222e9
	00027e37:JMP 0x00028a02
	00027e3c:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027e43:TEST AL,AL
	00027e45:JZ 0x00027ea4
	00027e47:LEA RDX,[RBP + -0x170]
	00027e4e:LEA RSI,[RBP + -0x2c0]
	00027e55:LEA RAX,[RBP + -0x400]
	00027e5c:MOV ECX,0x64
	00027e61:MOV RDI,RAX
	00027e64:CALL 0x00026748
	00027e69:MOV RBX,RAX
	00027e6c:LEA RCX,[RBP + -0x90]
	00027e73:LEA RAX,[RBP + -0x2c0]
	00027e7a:MOV EDX,0x64
	00027e7f:MOV RSI,RCX
	00027e82:MOV RDI,RAX
	00027e85:CALL 0x000229c0
	00027e8a:MOV RDX,RBX
	00027e8d:MOV RSI,RAX
	00027e90:LEA RAX,[0x356b7]
	00027e97:MOV RDI,RAX
	00027e9a:MOV EAX,0x0
	00027e9f:CALL 0x000222e9
	00027ea4:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027eab:TEST AL,AL
	00027ead:JZ 0x00027f86
	00027eb3:MOV RAX,qword ptr [RBP + -0x218]
	00027eba:TEST RAX,RAX
	00027ebd:JNZ 0x00027f00
	00027ebf:MOV RAX,qword ptr [RBP + -0x210]
	00027ec6:TEST RAX,RAX
	00027ec9:JNZ 0x00027f00
	00027ecb:LEA RCX,[RBP + -0x170]
	00027ed2:LEA RAX,[RBP + -0x400]
	00027ed9:MOV EDX,0x64
	00027ede:MOV RSI,RCX
	00027ee1:MOV RDI,RAX
	00027ee4:CALL 0x0002685f
	00027ee9:MOV RSI,RAX
	00027eec:LEA RAX,[0x356d8]
	00027ef3:MOV RDI,RAX
	00027ef6:MOV EAX,0x0
	00027efb:CALL 0x000222e9
	00027f00:MOV RAX,qword ptr [RBP + -0x210]
	00027f07:TEST RAX,RAX
	00027f0a:JZ 0x00027f4d
	00027f0c:MOV RAX,qword ptr [RBP + -0x218]
	00027f13:TEST RAX,RAX
	00027f16:JZ 0x00027f4d
	00027f18:LEA RCX,[RBP + -0x90]
	00027f1f:LEA RAX,[RBP + -0x2c0]
	00027f26:MOV EDX,0x64
	00027f2b:MOV RSI,RCX
	00027f2e:MOV RDI,RAX
	00027f31:CALL 0x000229c0
	00027f36:MOV RSI,RAX
	00027f39:LEA RAX,[0x35708]
	00027f40:MOV RDI,RAX
	00027f43:MOV EAX,0x0
	00027f48:CALL 0x000222e9
	00027f4d:LEA RDX,[RBP + -0x170]
	00027f54:LEA RSI,[RBP + -0x2c0]
	00027f5b:LEA RAX,[RBP + -0x400]
	00027f62:MOV ECX,0x64
	00027f67:MOV RDI,RAX
	00027f6a:CALL 0x00026748
	00027f6f:MOV RSI,RAX
	00027f72:LEA RAX,[0x35741]
	00027f79:MOV RDI,RAX
	00027f7c:MOV EAX,0x0
	00027f81:CALL 0x000222e9
	00027f86:MOV RDX,qword ptr [RBP + -0x258]
	00027f8d:MOV RAX,qword ptr [RBP + -0x250]
	00027f94:OR RDX,RAX
	00027f97:MOV RAX,qword ptr [RBP + -0x248]
	00027f9e:OR RAX,RDX
	00027fa1:TEST RAX,RAX
	00027fa4:JZ 0x00028350
	00027faa:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00027fb1:TEST AL,AL
	00027fb3:JZ 0x00028017
	00027fb5:MOV RAX,qword ptr [RBP + -0x258]
	00027fbc:TEST RAX,RAX
	00027fbf:JNZ 0x00027fcd
	00027fc1:MOV RAX,qword ptr [RBP + -0x250]
	00027fc8:TEST RAX,RAX
	00027fcb:JZ 0x00027fec
	00027fcd:MOV EAX,dword ptr [RBP + -0x3f4]
	00027fd3:CMP EAX,0xf
	00027fd6:JZ 0x00027fec
	00027fd8:LEA RAX,[0x35760]
	00027fdf:MOV RDI,RAX
	00027fe2:MOV EAX,0x0
	00027fe7:CALL 0x000222e9
	00027fec:MOV RAX,qword ptr [RBP + -0x248]
	00027ff3:TEST RAX,RAX
	00027ff6:JZ 0x00028017
	00027ff8:MOV EAX,dword ptr [RBP + -0x3f8]
	00027ffe:CMP EAX,0xc
	00028001:JZ 0x00028017
	00028003:LEA RAX,[0x357c8]
	0002800a:MOV RDI,RAX
	0002800d:MOV EAX,0x0
	00028012:CALL 0x000222e9
	00028017:MOV EAX,dword ptr [RBP + -0x3ec]
	0002801d:MOV RCX,qword ptr [RBP + -0x258]
	00028024:CDQE
	00028026:MOV EDX,0x0
	0002802b:ADD RAX,RCX
	0002802e:JNO 0x00028035
	00028030:MOV EDX,0x1
	00028035:MOVSXD RCX,EAX
	00028038:CMP RAX,RCX
	0002803b:JZ 0x00028042
	0002803d:MOV EDX,0x1
	00028042:MOV dword ptr [RBP + -0x4a8],EAX
	00028048:MOV EAX,EDX
	0002804a:AND EAX,0x1
	0002804d:TEST AL,AL
	0002804f:JNZ 0x000280c5
	00028051:MOV EAX,dword ptr [RBP + -0x3f0]
	00028057:MOV RCX,qword ptr [RBP + -0x250]
	0002805e:CDQE
	00028060:MOV EDX,0x0
	00028065:ADD RAX,RCX
	00028068:JNO 0x0002806f
	0002806a:MOV EDX,0x1
	0002806f:MOVSXD RCX,EAX
	00028072:CMP RAX,RCX
	00028075:JZ 0x0002807c
	00028077:MOV EDX,0x1
	0002807c:MOV dword ptr [RBP + -0x340],EAX
	00028082:MOV EAX,EDX
	00028084:AND EAX,0x1
	00028087:TEST AL,AL
	00028089:JNZ 0x000280c5
	0002808b:MOV EAX,dword ptr [RBP + -0x3f4]
	00028091:MOV RCX,qword ptr [RBP + -0x248]
	00028098:CDQE
	0002809a:MOV EDX,0x0
	0002809f:ADD RAX,RCX
	000280a2:JNO 0x000280a9
	000280a4:MOV EDX,0x1
	000280a9:MOVSXD RCX,EAX
	000280ac:CMP RAX,RCX
	000280af:JZ 0x000280b6
	000280b1:MOV EDX,0x1
	000280b6:MOV dword ptr [RBP + -0x300],EAX
	000280bc:MOV EAX,EDX
	000280be:AND EAX,0x1
	000280c1:TEST AL,AL
	000280c3:JZ 0x000280fc
	000280c5:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000280cc:TEST AL,AL
	000280ce:JZ 0x00028a11
	000280d4:MOV EDX,0x877
	000280d9:LEA RAX,[0x3580f]
	000280e0:MOV RSI,RAX
	000280e3:LEA RAX,[0x35820]
	000280ea:MOV RDI,RAX
	000280ed:MOV EAX,0x0
	000280f2:CALL 0x000222e9
	000280f7:JMP 0x00028a11
	000280fc:MOV EAX,dword ptr [RBP + -0x4a8]
	00028102:MOV dword ptr [RBP + -0x3ec],EAX
	00028108:MOV EAX,dword ptr [RBP + -0x340]
	0002810e:MOV dword ptr [RBP + -0x3f0],EAX
	00028114:MOV EAX,dword ptr [RBP + -0x300]
	0002811a:MOV dword ptr [RBP + -0x3f4],EAX
	00028120:MOV EAX,dword ptr [RBP + -0x3b8]
	00028126:MOV dword ptr [RBP + -0x3f8],EAX
	0002812c:MOV EAX,dword ptr [RBP + -0x3bc]
	00028132:MOV dword ptr [RBP + -0x3fc],EAX
	00028138:MOV EAX,dword ptr [RBP + -0x3c0]
	0002813e:MOV dword ptr [RBP + -0x400],EAX
	00028144:MOV EAX,dword ptr [RBP + -0x3a0]
	0002814a:MOV dword ptr [RBP + -0x3e0],EAX
	00028150:LEA RDX,[RBP + -0x400]
	00028157:MOV RAX,qword ptr [RBP + -0x490]
	0002815e:MOV RSI,RDX
	00028161:MOV RDI,RAX
	00028164:CALL 0x0002cc40
	00028169:MOV qword ptr [RBP + -0x498],RAX
	00028170:CMP qword ptr [RBP + -0x498],-0x1
	00028178:JNZ 0x000281c7
	0002817a:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00028181:TEST AL,AL
	00028183:JZ 0x0002834a
	00028189:LEA RDX,[RBP + -0x170]
	00028190:LEA RSI,[RBP + -0x2c0]
	00028197:LEA RAX,[RBP + -0x400]
	0002819e:MOV ECX,0x64
	000281a3:MOV RDI,RAX
	000281a6:CALL 0x00026748
	000281ab:MOV RSI,RAX
	000281ae:LEA RAX,[0x35830]
	000281b5:MOV RDI,RAX
	000281b8:MOV EAX,0x0
	000281bd:CALL 0x000222e9
	000281c2:JMP 0x0002834a
	000281c7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000281ce:TEST AL,AL
	000281d0:JZ 0x00028350
	000281d6:MOV RCX,qword ptr [RBP + -0x248]
	000281dd:MOV RDX,qword ptr [RBP + -0x250]
	000281e4:MOV RAX,qword ptr [RBP + -0x258]
	000281eb:MOV RSI,RAX
	000281ee:LEA RAX,[0x35870]
	000281f5:MOV RDI,RAX
	000281f8:MOV EAX,0x0
	000281fd:CALL 0x000222e9
	00028202:LEA RDX,[RBP + -0x170]
	00028209:LEA RSI,[RBP + -0x2c0]
	00028210:LEA RAX,[RBP + -0x400]
	00028217:MOV ECX,0x64
	0002821c:MOV RDI,RAX
	0002821f:CALL 0x00026748
	00028224:MOV RSI,RAX
	00028227:LEA RAX,[0x358ad]
	0002822e:MOV RDI,RAX
	00028231:MOV EAX,0x0
	00028236:CALL 0x000222e9
	0002823b:MOV EAX,dword ptr [RBP + -0x3a0]
	00028241:CMP EAX,-0x1
	00028244:JZ 0x0002826a
	00028246:MOV EDX,dword ptr [RBP + -0x3e0]
	0002824c:MOV EAX,dword ptr [RBP + -0x3a0]
	00028252:CMP EDX,EAX
	00028254:JZ 0x0002826a
	00028256:LEA RAX,[0x358c8]
	0002825d:MOV RDI,RAX
	00028260:MOV EAX,0x0
	00028265:CALL 0x000222e9
	0002826a:MOV RAX,qword ptr [RBP + -0x248]
	00028271:TEST RAX,RAX
	00028274:JNZ 0x00028350
	0002827a:MOV EDX,dword ptr [RBP + -0x3f4]
	00028280:MOV EAX,dword ptr [RBP + -0x300]
	00028286:CMP EDX,EAX
	00028288:JNZ 0x000282ae
	0002828a:MOV RAX,qword ptr [RBP + -0x250]
	00028291:TEST RAX,RAX
	00028294:JNZ 0x00028350
	0002829a:MOV EDX,dword ptr [RBP + -0x3f0]
	000282a0:MOV EAX,dword ptr [RBP + -0x340]
	000282a6:CMP EDX,EAX
	000282a8:JZ 0x00028350
	000282ae:LEA RAX,[0x35908]
	000282b5:MOV RDI,RAX
	000282b8:MOV EAX,0x0
	000282bd:CALL 0x000222e9
	000282c2:MOV EBX,dword ptr [RBP + -0x300]
	000282c8:MOV EAX,dword ptr [RBP + -0x340]
	000282ce:LEA R12D,[RAX + 0x1]
	000282d2:MOV EAX,dword ptr [RBP + -0x4a8]
	000282d8:LEA RDX,[RBP + -0x19d]
	000282df:MOV RSI,RDX
	000282e2:MOV EDI,EAX
	000282e4:CALL 0x00025bbe
	000282e9:MOV ECX,EBX
	000282eb:MOV EDX,R12D
	000282ee:MOV RSI,RAX
	000282f1:LEA RAX,[0x35948]
	000282f8:MOV RDI,RAX
	000282fb:MOV EAX,0x0
	00028300:CALL 0x000222e9
	00028305:MOV EBX,dword ptr [RBP + -0x3f4]
	0002830b:MOV EAX,dword ptr [RBP + -0x3f0]
	00028311:LEA R12D,[RAX + 0x1]
	00028315:MOV EAX,dword ptr [RBP + -0x3ec]
	0002831b:LEA RDX,[RBP + -0x19d]
	00028322:MOV RSI,RDX
	00028325:MOV EDI,EAX
	00028327:CALL 0x00025bbe
	0002832c:MOV ECX,EBX
	0002832e:MOV EDX,R12D
	00028331:MOV RSI,RAX
	00028334:LEA RAX,[0x35970]
	0002833b:MOV RDI,RAX
	0002833e:MOV EAX,0x0
	00028343:CALL 0x000222e9
	00028348:JMP 0x00028350
	0002834a:NOP
	0002834b:JMP 0x00028a02
	00028350:MOV RAX,qword ptr [RBP + -0x1f0]
	00028357:TEST RAX,RAX
	0002835a:JZ 0x00028457
	00028360:MOV EAX,dword ptr [RBP + -0x2a8]
	00028366:CDQE
	00028368:MOV qword ptr [RBP + -0x340],RAX
	0002836f:MOV byte ptr [RBP + -0x4df],0x0
	00028376:MOV RAX,qword ptr [RBP + -0x3d8]
	0002837d:MOV qword ptr [RBP + -0x440],RAX
	00028384:MOV RAX,qword ptr [RBP + -0x340]
	0002838b:MOV EDX,0x0
	00028390:SUB RAX,qword ptr [RBP + -0x440]
	00028397:JNO 0x0002839e
	00028399:MOV EDX,0x1
	0002839e:MOV qword ptr [RBP + -0x340],RAX
	000283a5:MOV RAX,RDX
	000283a8:AND EAX,0x1
	000283ab:OR AL,byte ptr [RBP + -0x4df]
	000283b1:MOVZX EAX,AL
	000283b4:TEST EAX,EAX
	000283b6:SETNZ AL
	000283b9:MOV byte ptr [RBP + -0x4df],AL
	000283bf:MOV RDX,qword ptr [RBP + -0x340]
	000283c6:MOV ECX,0x0
	000283cb:MOV RAX,qword ptr [RBP + -0x498]
	000283d2:SUB RAX,RDX
	000283d5:JNO 0x000283dc
	000283d7:MOV ECX,0x1
	000283dc:MOV qword ptr [RBP + -0x300],RAX
	000283e3:MOV RAX,RCX
	000283e6:AND EAX,0x1
	000283e9:OR AL,byte ptr [RBP + -0x4df]
	000283ef:MOVZX EAX,AL
	000283f2:TEST EAX,EAX
	000283f4:SETNZ AL
	000283f7:MOV byte ptr [RBP + -0x4df],AL
	000283fd:CMP byte ptr [RBP + -0x4df],0x0
	00028404:JNZ 0x00028419
	00028406:MOV RAX,qword ptr [RBP + -0x300]
	0002840d:MOV RDI,RAX
	00028410:CALL 0x000222c3
	00028415:TEST AL,AL
	00028417:JZ 0x00028449
	00028419:MOVZX EAX,byte ptr [RBP + -0x1e7]
	00028420:TEST AL,AL
	00028422:JZ 0x00028a14
	00028428:MOV EAX,dword ptr [RBP + -0x2a8]
	0002842e:MOV ESI,EAX
	00028430:LEA RAX,[0x35998]
	00028437:MOV RDI,RAX
	0002843a:MOV EAX,0x0
	0002843f:CALL 0x000222e9
	00028444:JMP 0x00028a02
	00028449:MOV RAX,qword ptr [RBP + -0x300]
	00028450:MOV qword ptr [RBP + -0x498],RAX
	00028457:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002845e:TEST AL,AL
	00028460:JZ 0x000284b6
	00028462:MOV RAX,qword ptr [RBP + -0x498]
	00028469:MOV qword ptr [RBP + -0x438],RAX
	00028470:LEA RDX,[RBP + -0x170]
	00028477:LEA RSI,[RBP + -0x2c0]
	0002847e:LEA RAX,[RBP + -0x400]
	00028485:MOV ECX,0x64
	0002848a:MOV RDI,RAX
	0002848d:CALL 0x00026748
	00028492:MOV RCX,RAX
	00028495:MOV RAX,qword ptr [RBP + -0x438]
	0002849c:MOV RDX,RAX
	0002849f:MOV RSI,RCX
	000284a2:LEA RAX,[0x359c3]
	000284a9:MOV RDI,RAX
	000284ac:MOV EAX,0x0
	000284b1:CALL 0x000222e9
	000284b6:MOV RAX,qword ptr [RBP + -0x260]
	000284bd:MOV qword ptr [RBP + -0x430],RAX
	000284c4:MOV EAX,dword ptr [RBP + -0x228]
	000284ca:MOVSXD RDX,EAX
	000284cd:MOV RAX,qword ptr [RBP + -0x430]
	000284d4:ADD RAX,RDX
	000284d7:MOV qword ptr [RBP + -0x428],RAX
	000284de:MOV RCX,qword ptr [RBP + -0x428]
	000284e5:MOV RDX,0x112e0be826d694b3
	000284ef:MOV RAX,RCX
	000284f2:IMUL RDX
	000284f5:MOV RAX,RDX
	000284f8:SAR RAX,0x1a
	000284fc:MOV RDX,RCX
	000284ff:SAR RDX,0x3f
	00028503:SUB RAX,RDX
	00028506:IMUL RDX,RAX,0x3b9aca00
	0002850d:MOV RAX,RCX
	00028510:SUB RAX,RDX
	00028513:LEA RCX,[RAX + 0x3b9aca00]
	0002851a:MOV RDX,0x112e0be826d694b3
	00028524:MOV RAX,RCX
	00028527:IMUL RDX
	0002852a:MOV RAX,RDX
	0002852d:SAR RAX,0x1a
	00028531:MOV RDX,RCX
	00028534:SAR RDX,0x3f
	00028538:SUB RAX,RDX
	0002853b:IMUL RDX,RAX,0x3b9aca00
	00028542:MOV RAX,RCX
	00028545:SUB RAX,RDX
	00028548:MOV dword ptr [RBP + -0x4d4],EAX
	0002854e:MOV EAX,dword ptr [RBP + -0x4d4]
	00028554:MOVSXD RDX,EAX
	00028557:MOV RAX,qword ptr [RBP + -0x428]
	0002855e:SUB RAX,RDX
	00028561:MOV RCX,RAX
	00028564:MOV RDX,0x112e0be826d694b3
	0002856e:MOV RAX,RCX
	00028571:IMUL RDX
	00028574:MOV RAX,RDX
	00028577:SAR RAX,0x1a
	0002857b:SAR RCX,0x3f
	0002857f:MOV RDX,RCX
	00028582:SUB RAX,RDX
	00028585:MOV dword ptr [RBP + -0x4d0],EAX
	0002858b:MOV RAX,qword ptr [RBP + -0x240]
	00028592:MOV EDX,0x0
	00028597:IMUL RAX,RAX,0xe10
	0002859e:JNO 0x000285a5
	000285a0:MOV EDX,0x1
	000285a5:MOV qword ptr [RBP + -0x4c8],RAX
	000285ac:MOV RAX,RDX
	000285af:AND EAX,0x1
	000285b2:TEST AL,AL
	000285b4:JNZ 0x000286b6
	000285ba:MOV RDX,qword ptr [RBP + -0x4c8]
	000285c1:MOV ECX,0x0
	000285c6:MOV RAX,qword ptr [RBP + -0x498]
	000285cd:ADD RAX,RDX
	000285d0:JNO 0x000285d7
	000285d2:MOV ECX,0x1
	000285d7:MOV qword ptr [RBP + -0x4c0],RAX
	000285de:MOV RAX,RCX
	000285e1:AND EAX,0x1
	000285e4:TEST AL,AL
	000285e6:JNZ 0x000286b6
	000285ec:MOV RAX,qword ptr [RBP + -0x238]
	000285f3:MOV EDX,0x0
	000285f8:IMUL RAX,RAX,0x3c
	000285fc:JNO 0x00028603
	000285fe:MOV EDX,0x1
	00028603:MOV qword ptr [RBP + -0x4b8],RAX
	0002860a:MOV RAX,RDX
	0002860d:AND EAX,0x1
	00028610:TEST AL,AL
	00028612:JNZ 0x000286b6
	00028618:MOV RDX,qword ptr [RBP + -0x4c0]
	0002861f:MOV RAX,qword ptr [RBP + -0x4b8]
	00028626:MOV ECX,0x0
	0002862b:ADD RAX,RDX
	0002862e:JNO 0x00028635
	00028630:MOV ECX,0x1
	00028635:MOV qword ptr [RBP + -0x4b0],RAX
	0002863c:MOV RAX,RCX
	0002863f:AND EAX,0x1
	00028642:TEST AL,AL
	00028644:JNZ 0x000286b6
	00028646:MOV RDX,qword ptr [RBP + -0x4b0]
	0002864d:MOV RAX,qword ptr [RBP + -0x230]
	00028654:MOV ECX,0x0
	00028659:ADD RAX,RDX
	0002865c:JNO 0x00028663
	0002865e:MOV ECX,0x1
	00028663:MOV qword ptr [RBP + -0x4a8],RAX
	0002866a:MOV RAX,RCX
	0002866d:AND EAX,0x1
	00028670:TEST AL,AL
	00028672:JNZ 0x000286b6
	00028674:MOV RDX,qword ptr [RBP + -0x4a8]
	0002867b:MOV EAX,dword ptr [RBP + -0x4d0]
	00028681:CDQE
	00028683:MOV ECX,0x0
	00028688:ADD RAX,RDX
	0002868b:JNO 0x00028692
	0002868d:MOV ECX,0x1
	00028692:MOV qword ptr [RBP + -0x340],RAX
	00028699:MOV RAX,RCX
	0002869c:AND EAX,0x1
	0002869f:TEST AL,AL
	000286a1:JNZ 0x000286b6
	000286a3:MOV RAX,qword ptr [RBP + -0x340]
	000286aa:MOV RDI,RAX
	000286ad:CALL 0x000222c3
	000286b2:TEST AL,AL
	000286b4:JZ 0x000286de
	000286b6:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000286bd:TEST AL,AL
	000286bf:JZ 0x00028a17
	000286c5:LEA RAX,[0x359e0]
	000286cc:MOV RDI,RAX
	000286cf:MOV EAX,0x0
	000286d4:CALL 0x000222e9
	000286d9:JMP 0x00028a02
	000286de:MOV RDX,qword ptr [RBP + -0x340]
	000286e5:MOV RAX,qword ptr [RBP + -0x4f8]
	000286ec:MOV qword ptr [RAX],RDX
	000286ef:MOV EAX,dword ptr [RBP + -0x4d4]
	000286f5:MOVSXD RDX,EAX
	000286f8:MOV RAX,qword ptr [RBP + -0x4f8]
	000286ff:MOV qword ptr [RAX + 0x8],RDX
	00028703:MOVZX EAX,byte ptr [RBP + -0x1e7]
	0002870a:TEST AL,AL
	0002870c:JZ 0x000287e8
	00028712:MOV RDX,qword ptr [RBP + -0x240]
	00028719:MOV RAX,qword ptr [RBP + -0x238]
	00028720:OR RDX,RAX
	00028723:MOV RAX,qword ptr [RBP + -0x230]
	0002872a:OR RDX,RAX
	0002872d:MOV EAX,dword ptr [RBP + -0x228]
	00028733:CDQE
	00028735:OR RAX,RDX
	00028738:TEST RAX,RAX
	0002873b:JZ 0x000287e8
	00028741:MOV ESI,dword ptr [RBP + -0x228]
	00028747:MOV RCX,qword ptr [RBP + -0x230]
	0002874e:MOV RDX,qword ptr [RBP + -0x238]
	00028755:MOV RAX,qword ptr [RBP + -0x240]
	0002875c:MOV R8D,ESI
	0002875f:MOV RSI,RAX
	00028762:LEA RAX,[0x35a10]
	00028769:MOV RDI,RAX
	0002876c:MOV EAX,0x0
	00028771:CALL 0x000222e9
	00028776:MOV RAX,qword ptr [RBP + -0x340]
	0002877d:MOV RSI,RAX
	00028780:LEA RAX,[0x35a60]
	00028787:MOV RDI,RAX
	0002878a:MOV EAX,0x0
	0002878f:CALL 0x000222e9
	00028794:MOV EAX,dword ptr [RBP + -0x3e0]
	0002879a:CMP EAX,-0x1
	0002879d:JZ 0x000287e8
	0002879f:MOV RCX,qword ptr [RBP + -0x4f8]
	000287a6:LEA RDX,[RBP + -0x300]
	000287ad:MOV RAX,qword ptr [RBP + -0x490]
	000287b4:MOV RSI,RCX
	000287b7:MOV RDI,RAX
	000287ba:CALL 0x0002cb90
	000287bf:TEST RAX,RAX
	000287c2:JZ 0x000287e8
	000287c4:MOV EDX,dword ptr [RBP + -0x3e0]
	000287ca:MOV EAX,dword ptr [RBP + -0x2e0]
	000287d0:CMP EDX,EAX
	000287d2:JZ 0x000287e8
	000287d4:LEA RAX,[0x35a88]
	000287db:MOV RDI,RAX
	000287de:MOV EAX,0x0
	000287e3:CALL 0x000222e9
	000287e8:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000287ef:TEST AL,AL
	000287f1:JZ 0x000289ea
	000287f7:CMP qword ptr [RBP + -0x520],0x0
	000287ff:JNZ 0x00028817
	00028801:LEA RAX,[0x35ac5]
	00028808:MOV RDI,RAX
	0002880b:MOV EAX,0x0
	00028810:CALL 0x000222e9
	00028815:JMP 0x00028868
	00028817:MOV RAX,qword ptr [RBP + -0x520]
	0002881e:LEA RDX,[0x35439]
	00028825:MOV RSI,RDX
	00028828:MOV RDI,RAX
	0002882b:CALL 0x00005ce0
	00028830:TEST EAX,EAX
	00028832:JNZ 0x0002884a
	00028834:LEA RAX,[0x35adf]
	0002883b:MOV RDI,RAX
	0002883e:MOV EAX,0x0
	00028843:CALL 0x000222e9
	00028848:JMP 0x00028868
	0002884a:MOV RAX,qword ptr [RBP + -0x520]
	00028851:MOV RSI,RAX
	00028854:LEA RAX,[0x35b00]
	0002885b:MOV RDI,RAX
	0002885e:MOV EAX,0x0
	00028863:CALL 0x000222e9
	00028868:MOV RAX,qword ptr [RBP + -0x4f8]
	0002886f:MOV RAX,qword ptr [RAX]
	00028872:MOV qword ptr [RBP + -0x420],RAX
	00028879:MOV RAX,qword ptr [RBP + -0x4f8]
	00028880:MOV RAX,qword ptr [RAX + 0x8]
	00028884:MOV dword ptr [RBP + -0x4cc],EAX
	0002888a:MOV EDX,dword ptr [RBP + -0x4cc]
	00028890:MOV RAX,qword ptr [RBP + -0x420]
	00028897:MOV RSI,RAX
	0002889a:LEA RAX,[0x35b28]
	000288a1:MOV RDI,RAX
	000288a4:MOV EAX,0x0
	000288a9:CALL 0x000222e9
	000288ae:MOV RAX,qword ptr [RBP + -0x4f8]
	000288b5:LEA RDX,[RBP + -0x340]
	000288bc:MOV RSI,RDX
	000288bf:MOV RDI,RAX
	000288c2:CALL 0x00005bb0
	000288c7:TEST RAX,RAX
	000288ca:SETNZ AL
	000288cd:MOV byte ptr [RBP + -0x4de],AL
	000288d3:CMP byte ptr [RBP + -0x4de],0x0
	000288da:JZ 0x00028913
	000288dc:LEA RDX,[RBP + -0x170]
	000288e3:LEA RAX,[RBP + -0x340]
	000288ea:MOV ECX,0x64
	000288ef:MOV ESI,0x0
	000288f4:MOV RDI,RAX
	000288f7:CALL 0x00026748
	000288fc:MOV RSI,RAX
	000288ff:LEA RAX,[0x35b49]
	00028906:MOV RDI,RAX
	00028909:MOV EAX,0x0
	0002890e:CALL 0x000222e9
	00028913:MOV RCX,qword ptr [RBP + -0x4f8]
	0002891a:LEA RDX,[RBP + -0x300]
	00028921:MOV RAX,qword ptr [RBP + -0x490]
	00028928:MOV RSI,RCX
	0002892b:MOV RDI,RAX
	0002892e:CALL 0x0002cb90
	00028933:TEST RAX,RAX
	00028936:JZ 0x000289ea
	0002893c:MOV byte ptr [RBP + -0x4dd],0x1
	00028943:MOV RAX,qword ptr [RBP + -0x2d8]
	0002894a:MOV qword ptr [RBP + -0x418],RAX
	00028951:CMP byte ptr [RBP + -0x4dd],0x0
	00028958:JZ 0x000289b3
	0002895a:MOV RAX,qword ptr [RBP + -0x418]
	00028961:MOV EDX,EAX
	00028963:LEA RAX,[RBP + -0x190]
	0002896a:MOV RSI,RAX
	0002896d:MOV EDI,EDX
	0002896f:CALL 0x00022b0a
	00028974:MOV RBX,RAX
	00028977:LEA RDX,[RBP + -0x170]
	0002897e:LEA RAX,[RBP + -0x300]
	00028985:MOV ECX,0x64
	0002898a:MOV ESI,0x0
	0002898f:MOV RDI,RAX
	00028992:CALL 0x00026748
	00028997:MOV RDX,RBX
	0002899a:MOV RSI,RAX
	0002899d:LEA RAX,[0x35b5a]
	000289a4:MOV RDI,RAX
	000289a7:MOV EAX,0x0
	000289ac:CALL 0x000222e9
	000289b1:JMP 0x000289ea
	000289b3:LEA RDX,[RBP + -0x170]
	000289ba:LEA RAX,[RBP + -0x300]
	000289c1:MOV ECX,0x64
	000289c6:MOV ESI,0x0
	000289cb:MOV RDI,RAX
	000289ce:CALL 0x00026748
	000289d3:MOV RSI,RAX
	000289d6:LEA RAX,[0x35b70]
	000289dd:MOV RDI,RAX
	000289e0:MOV EAX,0x0
	000289e5:CALL 0x000222e9
	000289ea:MOV byte ptr [RBP + -0x4e3],0x1
	000289f1:JMP 0x00028a18
	000289f3:NOP
	000289f4:JMP 0x00028a18
	000289f6:NOP
	000289f7:JMP 0x00028a18
	000289f9:NOP
	000289fa:JMP 0x00028a18
	000289fc:NOP
	000289fd:JMP 0x00028a18
	000289ff:NOP
	00028a00:JMP 0x00028a18
	00028a02:NOP
	00028a03:JMP 0x00028a18
	00028a05:NOP
	00028a06:JMP 0x00028a18
	00028a08:NOP
	00028a09:JMP 0x00028a18
	00028a0b:NOP
	00028a0c:JMP 0x00028a18
	00028a0e:NOP
	00028a0f:JMP 0x00028a18
	00028a11:NOP
	00028a12:JMP 0x00028a18
	00028a14:NOP
	00028a15:JMP 0x00028a18
	00028a17:NOP
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
144: if (*p_local == '\0') {
	0002708c:MOVZX EAX,byte ptr [RAX]
	0002708f:TEST AL,AL
	00027091:JNZ 0x000270a1
END_OF_LINE
----------------------------------------------
145: p_local = "0";
	0002709a:MOV qword ptr [RBP + -0x500],RAX
END_OF_LINE
----------------------------------------------
147: pc.input = p_local;
	000270a8:MOV qword ptr [RBP + -0x2c0],RAX
END_OF_LINE
----------------------------------------------
148: pc.parse_datetime_debug = (flags & 1) != 0;
	000270b5:AND EAX,0x1
	000270b8:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
149: pc.year.value = (long)tmp.tm_year + 0x76c;
	000270ce:CDQE
	000270d0:ADD RAX,0x76c
END_OF_LINE
----------------------------------------------
150: pc.year.digits = 0;
	0002710f:MOV qword ptr [RBP + -0x290],0x0
END_OF_LINE
----------------------------------------------
151: pc.month = (intmax_t)(tmp.tm_mon + 1);
	00027120:ADD EAX,0x1
	00027123:CDQE
END_OF_LINE
----------------------------------------------
152: pc.day = (intmax_t)tmp.tm_mday;
	00027132:CDQE
END_OF_LINE
----------------------------------------------
153: pc.hour = (intmax_t)tmp.tm_hour;
	00027141:CDQE
END_OF_LINE
----------------------------------------------
154: pc.minutes = (intmax_t)tmp.tm_min;
	00027150:CDQE
END_OF_LINE
----------------------------------------------
155: pc.seconds.tv_sec = (__time_t)tmp.tm_sec;
	0002715f:CDQE
END_OF_LINE
----------------------------------------------
156: pc.seconds.tv_nsec = (__syscall_slong_t)(int)_Var4;
	00026e14:MOV dword ptr [RBP + -0x4d8],EAX
	00026e1a:JMP 0x00026e24
	00026e1c:ADD qword ptr [RBP + -0x500],0x1
	00026e24:MOV RAX,qword ptr [RBP + -0x500]
	00026e2b:MOVZX EAX,byte ptr [RAX]
	00026e2e:MOV byte ptr [RBP + -0x4e1],AL
	00026e34:MOVZX EAX,byte ptr [RBP + -0x4e1]
	00026e3b:MOV EDI,EAX
	00026e3d:CALL 0x0002d10f
	00026e42:TEST AL,AL
	00026e44:JNZ 0x00026e1c
	00026e46:MOV RAX,qword ptr [RBP + -0x518]
	00026e4d:MOV qword ptr [RBP + -0x490],RAX
	00026e54:MOV RAX,qword ptr [RBP + -0x500]
	00026e5b:MOV EDX,0x4
	00026e60:LEA RCX,[0x3536b]
	00026e67:MOV RSI,RCX
	00026e6a:MOV RDI,RAX
	00026e6d:CALL 0x00005920
	00026e72:TEST EAX,EAX
	00026e74:JNZ 0x0002705c
	00026e7a:MOV RAX,qword ptr [RBP + -0x500]
	00026e81:ADD RAX,0x4
	00026e85:MOV qword ptr [RBP + -0x460],RAX
	00026e8c:MOV qword ptr [RBP + -0x488],0x1
	00026e97:MOV RAX,qword ptr [RBP + -0x460]
	00026e9e:MOV qword ptr [RBP + -0x480],RAX
	00026ea5:JMP 0x0002704a
	00026eaa:MOV RAX,qword ptr [RBP + -0x480]
	00026eb1:MOVZX EAX,byte ptr [RAX]
	00026eb4:CMP AL,0x5c
	00026eb6:JNZ 0x00026ee9
	00026eb8:ADD qword ptr [RBP + -0x480],0x1
	00026ec0:MOV RAX,qword ptr [RBP + -0x480]
	00026ec7:MOVZX EAX,byte ptr [RAX]
	00026eca:CMP AL,0x5c
	00026ecc:JZ 0x0002703a
	00026ed2:MOV RAX,qword ptr [RBP + -0x480]
	00026ed9:MOVZX EAX,byte ptr [RAX]
	00026edc:CMP AL,0x22
	00026ede:JZ 0x0002703a
	00026ee4:JMP 0x0002705c
	00026ee9:MOV RAX,qword ptr [RBP + -0x480]
	00026ef0:MOVZX EAX,byte ptr [RAX]
	00026ef3:CMP AL,0x22
	00026ef5:JNZ 0x0002703a
	00026efb:LEA RAX,[RBP + -0x100]
	00026f02:MOV qword ptr [RBP + -0x478],RAX
	00026f09:CMP qword ptr [RBP + -0x488],0x64
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
	00026f37:MOV RAX,qword ptr [RBP + -0x4a0]
	00026f3e:MOV qword ptr [RBP + -0x478],RAX
	00026f45:MOV RAX,qword ptr [RBP + -0x478]
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
	00026f53:MOV RAX,qword ptr [RBP + -0x460]
	00026f5a:MOV qword ptr [RBP + -0x480],RAX
	00026f61:JMP 0x00026fa2
	00026f63:MOV RAX,qword ptr [RBP + -0x480]
	00026f6a:MOVZX EAX,byte ptr [RAX]
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
	00026fa2:MOV RAX,qword ptr [RBP + -0x480]
	00026fa9:MOVZX EAX,byte ptr [RAX]
	00026fac:CMP AL,0x22
	00026fae:JNZ 0x00026f63
	00026fb0:MOV RAX,qword ptr [RBP + -0x470]
	00026fb7:MOV byte ptr [RAX],0x0
	00026fba:MOV RAX,qword ptr [RBP + -0x478]
	00026fc1:MOV RDI,RAX
	00026fc4:CALL 0x0002c6e0
	00026fc9:MOV qword ptr [RBP + -0x458],RAX
	00026fd0:CMP qword ptr [RBP + -0x458],0x0
	00026fd8:JZ 0x000289f6
	00026fde:MOV RAX,qword ptr [RBP + -0x458]
	00026fe5:MOV qword ptr [RBP + -0x490],RAX
	00026fec:MOV RAX,qword ptr [RBP + -0x478]
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
	00026ffa:MOV RAX,qword ptr [RBP + -0x480]
	00027001:ADD RAX,0x1
	00027005:MOV qword ptr [RBP + -0x500],RAX
	0002700c:JMP 0x00027016
	0002700e:ADD qword ptr [RBP + -0x500],0x1
	00027016:MOV RAX,qword ptr [RBP + -0x500]
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
	00027034:TEST AL,AL
	00027036:JNZ 0x0002700e
	00027038:JMP 0x0002705c
	0002703a:ADD qword ptr [RBP + -0x480],0x1
	00027042:ADD qword ptr [RBP + -0x488],0x1
	0002704a:MOV RAX,qword ptr [RBP + -0x480]
	00027051:MOVZX EAX,byte ptr [RAX]
	00027054:TEST AL,AL
	00027056:JNZ 0x00026eaa
	0002705c:MOV RCX,qword ptr [RBP + -0x508]
	00027063:LEA RDX,[RBP + -0x380]
	0002706a:MOV RAX,qword ptr [RBP + -0x490]
	00027071:MOV RSI,RCX
	00027074:MOV RDI,RAX
	00027077:CALL 0x0002cb90
	0002707c:TEST RAX,RAX
	0002707f:JZ 0x000289f9
	00027085:MOV RAX,qword ptr [RBP + -0x500]
	0002708c:MOVZX EAX,byte ptr [RAX]
	0002708f:TEST AL,AL
	00027091:JNZ 0x000270a1
	00027093:LEA RAX,[0x35370]
	0002709a:MOV qword ptr [RBP + -0x500],RAX
	000270a1:MOV RAX,qword ptr [RBP + -0x500]
	000270a8:MOV qword ptr [RBP + -0x2c0],RAX
	000270af:MOV EAX,dword ptr [RBP + -0x50c]
	000270b5:AND EAX,0x1
	000270b8:TEST EAX,EAX
	000270ba:SETNZ AL
	000270bd:MOV byte ptr [RBP + -0x1e7],AL
	000270c3:MOV EAX,dword ptr [RBP + -0x36c]
	000270c9:MOV EDX,0x0
	000270ce:CDQE
	000270d0:ADD RAX,0x76c
	000270d6:MOV qword ptr [RBP + -0x298],RAX
	000270dd:MOV RAX,RDX
	000270e0:AND EAX,0x1
	000270e3:TEST AL,AL
	000270e5:JZ 0x0002710f
	000270e7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000270ee:TEST AL,AL
	000270f0:JZ 0x000289fc
	000270f6:LEA RAX,[0x35378]
	000270fd:MOV RDI,RAX
	00027100:MOV EAX,0x0
	00027105:CALL 0x000222e9
	0002710a:JMP 0x000289fc
	0002710f:MOV qword ptr [RBP + -0x290],0x0
	0002711a:MOV EAX,dword ptr [RBP + -0x370]
	00027120:ADD EAX,0x1
	00027123:CDQE
	00027125:MOV qword ptr [RBP + -0x288],RAX
	0002712c:MOV EAX,dword ptr [RBP + -0x374]
	00027132:CDQE
	00027134:MOV qword ptr [RBP + -0x280],RAX
	0002713b:MOV EAX,dword ptr [RBP + -0x378]
	00027141:CDQE
	00027143:MOV qword ptr [RBP + -0x278],RAX
	0002714a:MOV EAX,dword ptr [RBP + -0x37c]
	00027150:CDQE
	00027152:MOV qword ptr [RBP + -0x270],RAX
	00027159:MOV EAX,dword ptr [RBP + -0x380]
	0002715f:CDQE
	00027161:MOV qword ptr [RBP + -0x268],RAX
	00027168:MOV EAX,dword ptr [RBP + -0x4d8]
	0002716e:CDQE
END_OF_LINE
----------------------------------------------
157: tm.tm_isdst = tmp.tm_isdst;
	0002717d:MOV dword ptr [RBP + -0x3e0],EAX
END_OF_LINE
----------------------------------------------
158: pc.meridian = 2;
	00027183:MOV dword ptr [RBP + -0x2a4],0x2
END_OF_LINE
----------------------------------------------
159: pc.rel.year = 0;
	0002718d:MOV qword ptr [RBP + -0x258],0x0
END_OF_LINE
----------------------------------------------
160: pc.rel.month = 0;
	00027198:MOV qword ptr [RBP + -0x250],0x0
END_OF_LINE
----------------------------------------------
161: pc.rel.day = 0;
	000271a3:MOV qword ptr [RBP + -0x248],0x0
END_OF_LINE
----------------------------------------------
162: pc.rel.hour = 0;
	000271ae:MOV qword ptr [RBP + -0x240],0x0
END_OF_LINE
----------------------------------------------
163: pc.rel.minutes = 0;
	000271b9:MOV qword ptr [RBP + -0x238],0x0
END_OF_LINE
----------------------------------------------
164: pc.rel.seconds = 0;
	000271c4:MOV qword ptr [RBP + -0x230],0x0
END_OF_LINE
----------------------------------------------
165: pc.rel.ns = 0;
	000271cf:MOV qword ptr [RBP + -0x228],0x0
END_OF_LINE
----------------------------------------------
166: pc.rel._52_4_ = 0;
	000271cf:MOV qword ptr [RBP + -0x228],0x0
END_OF_LINE
----------------------------------------------
167: pc.timespec_seen = false;
	000271da:MOV byte ptr [RBP + -0x220],0x0
END_OF_LINE
----------------------------------------------
168: pc.rels_seen = false;
	000271e1:MOV byte ptr [RBP + -0x21f],0x0
END_OF_LINE
----------------------------------------------
169: pc.dates_seen = 0;
	000271e8:MOV qword ptr [RBP + -0x218],0x0
END_OF_LINE
----------------------------------------------
170: pc.days_seen = 0;
	000271f3:MOV qword ptr [RBP + -0x210],0x0
END_OF_LINE
----------------------------------------------
171: pc.times_seen = 0;
	000271fe:MOV qword ptr [RBP + -0x1f8],0x0
END_OF_LINE
----------------------------------------------
172: pc.local_zones_seen = 0;
	00027209:MOV qword ptr [RBP + -0x208],0x0
END_OF_LINE
----------------------------------------------
173: pc.dsts_seen = 0;
	00027214:MOV qword ptr [RBP + -0x200],0x0
END_OF_LINE
----------------------------------------------
174: pc.zones_seen = 0;
	0002721f:MOV qword ptr [RBP + -0x1f0],0x0
END_OF_LINE
----------------------------------------------
175: pc.year_seen = false;
	0002722a:MOV byte ptr [RBP + -0x1e8],0x0
END_OF_LINE
----------------------------------------------
176: pc.debug_dates_seen = false;
	00027231:MOV byte ptr [RBP + -0x1e6],0x0
END_OF_LINE
----------------------------------------------
177: pc.debug_days_seen = false;
	00027238:MOV byte ptr [RBP + -0x1e5],0x0
END_OF_LINE
----------------------------------------------
178: pc.debug_times_seen = false;
	0002723f:MOV byte ptr [RBP + -0x1e3],0x0
END_OF_LINE
----------------------------------------------
179: pc.debug_local_zones_seen = false;
	00027246:MOV byte ptr [RBP + -0x1e4],0x0
END_OF_LINE
----------------------------------------------
180: pc.debug_zones_seen = false;
	0002724d:MOV byte ptr [RBP + -0x1e2],0x0
END_OF_LINE
----------------------------------------------
181: pc.debug_year_seen = false;
	00027254:MOV byte ptr [RBP + -0x1e1],0x0
END_OF_LINE
----------------------------------------------
182: pc.debug_ordinal_day_seen = false;
	0002725b:MOV byte ptr [RBP + -0x1e0],0x0
END_OF_LINE
----------------------------------------------
183: pc.local_time_zone_table[0].name = tmp.tm_zone;
	00027269:MOV qword ptr [RBP + -0x1d8],RAX
END_OF_LINE
----------------------------------------------
184: pc.local_time_zone_table[0].type = 0x10d;
	00027270:MOV dword ptr [RBP + -0x1d0],0x10d
END_OF_LINE
----------------------------------------------
185: pc.local_time_zone_table[0].value = tmp.tm_isdst;
	00027280:MOV dword ptr [RBP + -0x1cc],EAX
END_OF_LINE
----------------------------------------------
186: pc.local_time_zone_table[1].name = (char *)0x0;
	00027286:MOV qword ptr [RBP + -0x1c8],0x0
END_OF_LINE
----------------------------------------------
187: quarter = 1;
	00027291:MOV dword ptr [RBP + -0x4dc],0x1
END_OF_LINE
----------------------------------------------
188: while( true ) {
	0002733e:JZ 0x00027371
END_OF_LINE
----------------------------------------------
189: if ((3 < quarter) ||
	000272be:JNO 0x000272c5
	000272c0:MOV ECX,0x1
	000272c5:MOV qword ptr [RBP + -0x3c0],RAX
	000272cc:MOV RAX,RCX
	000272cf:AND EAX,0x1
	000272d2:TEST AL,AL
	000272d4:JNZ 0x00027385
	000272da:MOV RAX,qword ptr [RBP + -0x3c0]
	000272e1:MOV RDI,RAX
	000272e4:CALL 0x000222c3
	000272e9:TEST AL,AL
	000272eb:JNZ 0x00027385
	000272f1:MOV RAX,qword ptr [RBP + -0x3c0]
	000272f8:MOV qword ptr [RBP + -0x340],RAX
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
	00027340:MOV RAX,qword ptr [RBP + -0x2d0]
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
	00027358:MOV EAX,dword ptr [RBP + -0x2e0]
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
	0002736f:JMP 0x00027385
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
	00027378:CMP dword ptr [RBP + -0x4dc],0x3
	0002737f:JLE 0x000272a0
END_OF_LINE
----------------------------------------------
190: (tm0._0_8_ = lVar15 + quarter * 0x76a700, SCARRY8(lVar15,(long)(quarter * 0x76a700))))
	000272a6:IMUL EAX,EAX,0x76a700
	000272ac:MOVSXD RDX,EAX
	000272af:MOV ECX,0x0
	000272b4:MOV RAX,qword ptr [RBP + -0x498]
	000272bb:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
191: goto LAB_00027385;
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
END_OF_LINE
----------------------------------------------
192: _Var6 = time_overflow(tm0._0_8_);
	000272e4:CALL 0x000222c3
END_OF_LINE
----------------------------------------------
193: if (_Var6) goto LAB_00027385;
	000272eb:JNZ 0x00027385
	000272f1:MOV RAX,qword ptr [RBP + -0x3c0]
	000272f8:MOV qword ptr [RBP + -0x340],RAX
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
	00027340:MOV RAX,qword ptr [RBP + -0x2d0]
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
	00027358:MOV EAX,dword ptr [RBP + -0x2e0]
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
	0002736f:JMP 0x00027385
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
	00027378:CMP dword ptr [RBP + -0x4dc],0x3
	0002737f:JLE 0x000272a0
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
END_OF_LINE
----------------------------------------------
194: probe._0_4_ = tm0.tm_sec;
	000272f8:MOV qword ptr [RBP + -0x340],RAX
END_OF_LINE
----------------------------------------------
195: probe._4_4_ = tm0.tm_min;
	000272f8:MOV qword ptr [RBP + -0x340],RAX
END_OF_LINE
----------------------------------------------
196: ptVar11 = localtime_rz(tz,&probe,&probe_tm);
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
END_OF_LINE
----------------------------------------------
197: if (((ptVar11 != (tm *)0x0) && (probe_tm.tm_zone != (char *)0x0)) &&
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
END_OF_LINE
----------------------------------------------
198: (probe_tm.tm_isdst != pc.local_time_zone_table[0].value)) break;
	0002733c:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
199: quarter = quarter + 1;
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
END_OF_LINE
----------------------------------------------
201: pc.local_time_zone_table[1].name = probe_tm.tm_zone;
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
END_OF_LINE
----------------------------------------------
202: pc.local_time_zone_table[1].type = 0x10d;
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
END_OF_LINE
----------------------------------------------
203: pc.local_time_zone_table[1].value = probe_tm.tm_isdst;
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
END_OF_LINE
----------------------------------------------
204: pc.local_time_zone_table[2].name = (char *)0x0;
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
END_OF_LINE
----------------------------------------------
205: LAB_00027385:
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
END_OF_LINE
----------------------------------------------
206: if (((pc.local_time_zone_table[0].name != (char *)0x0) &&
	0002738c:TEST RAX,RAX
	0002738f:JZ 0x000273cf
	00027391:MOV RAX,qword ptr [RBP + -0x1c8]
	00027398:TEST RAX,RAX
	0002739b:JZ 0x000273cf
	0002739d:MOV RDX,qword ptr [RBP + -0x1c8]
	000273a4:MOV RAX,qword ptr [RBP + -0x1d8]
	000273ab:MOV RSI,RDX
	000273ae:MOV RDI,RAX
	000273b1:CALL 0x00005ce0
	000273b6:TEST EAX,EAX
	000273b8:JNZ 0x000273cf
END_OF_LINE
----------------------------------------------
207: (pc.local_time_zone_table[1].name != (char *)0x0)) &&
	00027398:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
208: (iVar7 = strcmp(pc.local_time_zone_table[0].name,pc.local_time_zone_table[1].name), iVar7 == 0)
	000273b1:CALL 0x00005ce0
	000273b6:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
210: pc.local_time_zone_table[0].value = -1;
	000273ba:MOV dword ptr [RBP + -0x1cc],0xffffffff
END_OF_LINE
----------------------------------------------
211: pc.local_time_zone_table[1].name = (char *)0x0;
	000273c4:MOV qword ptr [RBP + -0x1c8],0x0
END_OF_LINE
----------------------------------------------
213: iVar7 = yyparse(&pc);
	000273cf:LEA RAX,[RBP + -0x2c0]
	000273d6:MOV RDI,RAX
	000273d9:CALL 0x000234b7
END_OF_LINE
----------------------------------------------
214: if (iVar7 != 0) {
	000273de:TEST EAX,EAX
	000273e0:JZ 0x0002742d
END_OF_LINE
----------------------------------------------
215: if (pc.parse_datetime_debug != false) {
	000273e9:TEST AL,AL
	000273eb:JZ 0x000289ff
END_OF_LINE
----------------------------------------------
216: if (pc.input < p + sVar10) {
	00026dbc:ADD RAX,RDX
	00026dbf:MOV qword ptr [RBP + -0x468],RAX
	00026dc6:MOV qword ptr [RBP + -0x4a0],0x0
	00026dd1:CMP qword ptr [RBP + -0x508],0x0
	00026dd9:JNZ 0x00026df8
	00026ddb:LEA RAX,[RBP + -0x410]
	00026de2:MOV RDI,RAX
	00026de5:CALL 0x0001eb5c
	00026dea:LEA RAX,[RBP + -0x410]
	00026df1:MOV qword ptr [RBP + -0x508],RAX
	00026df8:MOV RAX,qword ptr [RBP + -0x508]
	00026dff:MOV RAX,qword ptr [RAX]
	00026e02:MOV qword ptr [RBP + -0x498],RAX
	00026e09:MOV RAX,qword ptr [RBP + -0x508]
	00026e10:MOV RAX,qword ptr [RAX + 0x8]
	00026e14:MOV dword ptr [RBP + -0x4d8],EAX
	00026e1a:JMP 0x00026e24
	00026e1c:ADD qword ptr [RBP + -0x500],0x1
	00026e24:MOV RAX,qword ptr [RBP + -0x500]
	00026e2b:MOVZX EAX,byte ptr [RAX]
	00026e2e:MOV byte ptr [RBP + -0x4e1],AL
	00026e34:MOVZX EAX,byte ptr [RBP + -0x4e1]
	00026e3b:MOV EDI,EAX
	00026e3d:CALL 0x0002d10f
	00026e42:TEST AL,AL
	00026e44:JNZ 0x00026e1c
	00026e46:MOV RAX,qword ptr [RBP + -0x518]
	00026e4d:MOV qword ptr [RBP + -0x490],RAX
	00026e54:MOV RAX,qword ptr [RBP + -0x500]
	00026e5b:MOV EDX,0x4
	00026e60:LEA RCX,[0x3536b]
	00026e67:MOV RSI,RCX
	00026e6a:MOV RDI,RAX
	00026e6d:CALL 0x00005920
	00026e72:TEST EAX,EAX
	00026e74:JNZ 0x0002705c
	00026e7a:MOV RAX,qword ptr [RBP + -0x500]
	00026e81:ADD RAX,0x4
	00026e85:MOV qword ptr [RBP + -0x460],RAX
	00026e8c:MOV qword ptr [RBP + -0x488],0x1
	00026e97:MOV RAX,qword ptr [RBP + -0x460]
	00026e9e:MOV qword ptr [RBP + -0x480],RAX
	00026ea5:JMP 0x0002704a
	00026eaa:MOV RAX,qword ptr [RBP + -0x480]
	00026eb1:MOVZX EAX,byte ptr [RAX]
	00026eb4:CMP AL,0x5c
	00026eb6:JNZ 0x00026ee9
	00026eb8:ADD qword ptr [RBP + -0x480],0x1
	00026ec0:MOV RAX,qword ptr [RBP + -0x480]
	00026ec7:MOVZX EAX,byte ptr [RAX]
	00026eca:CMP AL,0x5c
	00026ecc:JZ 0x0002703a
	00026ed2:MOV RAX,qword ptr [RBP + -0x480]
	00026ed9:MOVZX EAX,byte ptr [RAX]
	00026edc:CMP AL,0x22
	00026ede:JZ 0x0002703a
	00026ee4:JMP 0x0002705c
	00026ee9:MOV RAX,qword ptr [RBP + -0x480]
	00026ef0:MOVZX EAX,byte ptr [RAX]
	00026ef3:CMP AL,0x22
	00026ef5:JNZ 0x0002703a
	00026efb:LEA RAX,[RBP + -0x100]
	00026f02:MOV qword ptr [RBP + -0x478],RAX
	00026f09:CMP qword ptr [RBP + -0x488],0x64
	00026f11:JLE 0x00026f45
	00026f13:MOV RAX,qword ptr [RBP + -0x488]
	00026f1a:MOV RDI,RAX
	00026f1d:CALL 0x00005df0
	00026f22:MOV qword ptr [RBP + -0x4a0],RAX
	00026f29:CMP qword ptr [RBP + -0x4a0],0x0
	00026f31:JZ 0x000289f3
	00026f37:MOV RAX,qword ptr [RBP + -0x4a0]
	00026f3e:MOV qword ptr [RBP + -0x478],RAX
	00026f45:MOV RAX,qword ptr [RBP + -0x478]
	00026f4c:MOV qword ptr [RBP + -0x470],RAX
	00026f53:MOV RAX,qword ptr [RBP + -0x460]
	00026f5a:MOV qword ptr [RBP + -0x480],RAX
	00026f61:JMP 0x00026fa2
	00026f63:MOV RAX,qword ptr [RBP + -0x480]
	00026f6a:MOVZX EAX,byte ptr [RAX]
	00026f6d:CMP AL,0x5c
	00026f6f:SETZ AL
	00026f72:MOVZX EAX,AL
	00026f75:ADD qword ptr [RBP + -0x480],RAX
	00026f7c:MOV RAX,qword ptr [RBP + -0x470]
	00026f83:LEA RDX,[RAX + 0x1]
	00026f87:MOV qword ptr [RBP + -0x470],RDX
	00026f8e:MOV RDX,qword ptr [RBP + -0x480]
	00026f95:MOVZX EDX,byte ptr [RDX]
	00026f98:MOV byte ptr [RAX],DL
	00026f9a:ADD qword ptr [RBP + -0x480],0x1
	00026fa2:MOV RAX,qword ptr [RBP + -0x480]
	00026fa9:MOVZX EAX,byte ptr [RAX]
	00026fac:CMP AL,0x22
	00026fae:JNZ 0x00026f63
	00026fb0:MOV RAX,qword ptr [RBP + -0x470]
	00026fb7:MOV byte ptr [RAX],0x0
	00026fba:MOV RAX,qword ptr [RBP + -0x478]
	00026fc1:MOV RDI,RAX
	00026fc4:CALL 0x0002c6e0
	00026fc9:MOV qword ptr [RBP + -0x458],RAX
	00026fd0:CMP qword ptr [RBP + -0x458],0x0
	00026fd8:JZ 0x000289f6
	00026fde:MOV RAX,qword ptr [RBP + -0x458]
	00026fe5:MOV qword ptr [RBP + -0x490],RAX
	00026fec:MOV RAX,qword ptr [RBP + -0x478]
	00026ff3:MOV qword ptr [RBP + -0x520],RAX
	00026ffa:MOV RAX,qword ptr [RBP + -0x480]
	00027001:ADD RAX,0x1
	00027005:MOV qword ptr [RBP + -0x500],RAX
	0002700c:JMP 0x00027016
	0002700e:ADD qword ptr [RBP + -0x500],0x1
	00027016:MOV RAX,qword ptr [RBP + -0x500]
	0002701d:MOVZX EAX,byte ptr [RAX]
	00027020:MOV byte ptr [RBP + -0x4e1],AL
	00027026:MOVZX EAX,byte ptr [RBP + -0x4e1]
	0002702d:MOV EDI,EAX
	0002702f:CALL 0x0002d10f
	00027034:TEST AL,AL
	00027036:JNZ 0x0002700e
	00027038:JMP 0x0002705c
	0002703a:ADD qword ptr [RBP + -0x480],0x1
	00027042:ADD qword ptr [RBP + -0x488],0x1
	0002704a:MOV RAX,qword ptr [RBP + -0x480]
	00027051:MOVZX EAX,byte ptr [RAX]
	00027054:TEST AL,AL
	00027056:JNZ 0x00026eaa
	0002705c:MOV RCX,qword ptr [RBP + -0x508]
	00027063:LEA RDX,[RBP + -0x380]
	0002706a:MOV RAX,qword ptr [RBP + -0x490]
	00027071:MOV RSI,RCX
	00027074:MOV RDI,RAX
	00027077:CALL 0x0002cb90
	0002707c:TEST RAX,RAX
	0002707f:JZ 0x000289f9
	00027085:MOV RAX,qword ptr [RBP + -0x500]
	0002708c:MOVZX EAX,byte ptr [RAX]
	0002708f:TEST AL,AL
	00027091:JNZ 0x000270a1
	00027093:LEA RAX,[0x35370]
	0002709a:MOV qword ptr [RBP + -0x500],RAX
	000270a1:MOV RAX,qword ptr [RBP + -0x500]
	000270a8:MOV qword ptr [RBP + -0x2c0],RAX
	000270af:MOV EAX,dword ptr [RBP + -0x50c]
	000270b5:AND EAX,0x1
	000270b8:TEST EAX,EAX
	000270ba:SETNZ AL
	000270bd:MOV byte ptr [RBP + -0x1e7],AL
	000270c3:MOV EAX,dword ptr [RBP + -0x36c]
	000270c9:MOV EDX,0x0
	000270ce:CDQE
	000270d0:ADD RAX,0x76c
	000270d6:MOV qword ptr [RBP + -0x298],RAX
	000270dd:MOV RAX,RDX
	000270e0:AND EAX,0x1
	000270e3:TEST AL,AL
	000270e5:JZ 0x0002710f
	000270e7:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000270ee:TEST AL,AL
	000270f0:JZ 0x000289fc
	000270f6:LEA RAX,[0x35378]
	000270fd:MOV RDI,RAX
	00027100:MOV EAX,0x0
	00027105:CALL 0x000222e9
	0002710a:JMP 0x000289fc
	0002710f:MOV qword ptr [RBP + -0x290],0x0
	0002711a:MOV EAX,dword ptr [RBP + -0x370]
	00027120:ADD EAX,0x1
	00027123:CDQE
	00027125:MOV qword ptr [RBP + -0x288],RAX
	0002712c:MOV EAX,dword ptr [RBP + -0x374]
	00027132:CDQE
	00027134:MOV qword ptr [RBP + -0x280],RAX
	0002713b:MOV EAX,dword ptr [RBP + -0x378]
	00027141:CDQE
	00027143:MOV qword ptr [RBP + -0x278],RAX
	0002714a:MOV EAX,dword ptr [RBP + -0x37c]
	00027150:CDQE
	00027152:MOV qword ptr [RBP + -0x270],RAX
	00027159:MOV EAX,dword ptr [RBP + -0x380]
	0002715f:CDQE
	00027161:MOV qword ptr [RBP + -0x268],RAX
	00027168:MOV EAX,dword ptr [RBP + -0x4d8]
	0002716e:CDQE
	00027170:MOV qword ptr [RBP + -0x260],RAX
	00027177:MOV EAX,dword ptr [RBP + -0x360]
	0002717d:MOV dword ptr [RBP + -0x3e0],EAX
	00027183:MOV dword ptr [RBP + -0x2a4],0x2
	0002718d:MOV qword ptr [RBP + -0x258],0x0
	00027198:MOV qword ptr [RBP + -0x250],0x0
	000271a3:MOV qword ptr [RBP + -0x248],0x0
	000271ae:MOV qword ptr [RBP + -0x240],0x0
	000271b9:MOV qword ptr [RBP + -0x238],0x0
	000271c4:MOV qword ptr [RBP + -0x230],0x0
	000271cf:MOV qword ptr [RBP + -0x228],0x0
	000271da:MOV byte ptr [RBP + -0x220],0x0
	000271e1:MOV byte ptr [RBP + -0x21f],0x0
	000271e8:MOV qword ptr [RBP + -0x218],0x0
	000271f3:MOV qword ptr [RBP + -0x210],0x0
	000271fe:MOV qword ptr [RBP + -0x1f8],0x0
	00027209:MOV qword ptr [RBP + -0x208],0x0
	00027214:MOV qword ptr [RBP + -0x200],0x0
	0002721f:MOV qword ptr [RBP + -0x1f0],0x0
	0002722a:MOV byte ptr [RBP + -0x1e8],0x0
	00027231:MOV byte ptr [RBP + -0x1e6],0x0
	00027238:MOV byte ptr [RBP + -0x1e5],0x0
	0002723f:MOV byte ptr [RBP + -0x1e3],0x0
	00027246:MOV byte ptr [RBP + -0x1e4],0x0
	0002724d:MOV byte ptr [RBP + -0x1e2],0x0
	00027254:MOV byte ptr [RBP + -0x1e1],0x0
	0002725b:MOV byte ptr [RBP + -0x1e0],0x0
	00027262:MOV RAX,qword ptr [RBP + -0x350]
	00027269:MOV qword ptr [RBP + -0x1d8],RAX
	00027270:MOV dword ptr [RBP + -0x1d0],0x10d
	0002727a:MOV EAX,dword ptr [RBP + -0x360]
	00027280:MOV dword ptr [RBP + -0x1cc],EAX
	00027286:MOV qword ptr [RBP + -0x1c8],0x0
	00027291:MOV dword ptr [RBP + -0x4dc],0x1
	0002729b:JMP 0x00027378
	000272a0:MOV EAX,dword ptr [RBP + -0x4dc]
	000272a6:IMUL EAX,EAX,0x76a700
	000272ac:MOVSXD RDX,EAX
	000272af:MOV ECX,0x0
	000272b4:MOV RAX,qword ptr [RBP + -0x498]
	000272bb:ADD RAX,RDX
	000272be:JNO 0x000272c5
	000272c0:MOV ECX,0x1
	000272c5:MOV qword ptr [RBP + -0x3c0],RAX
	000272cc:MOV RAX,RCX
	000272cf:AND EAX,0x1
	000272d2:TEST AL,AL
	000272d4:JNZ 0x00027385
	000272da:MOV RAX,qword ptr [RBP + -0x3c0]
	000272e1:MOV RDI,RAX
	000272e4:CALL 0x000222c3
	000272e9:TEST AL,AL
	000272eb:JNZ 0x00027385
	000272f1:MOV RAX,qword ptr [RBP + -0x3c0]
	000272f8:MOV qword ptr [RBP + -0x340],RAX
	000272ff:LEA RDX,[RBP + -0x300]
	00027306:LEA RCX,[RBP + -0x340]
	0002730d:MOV RAX,qword ptr [RBP + -0x490]
	00027314:MOV RSI,RCX
	00027317:MOV RDI,RAX
	0002731a:CALL 0x0002cb90
	0002731f:TEST RAX,RAX
	00027322:JZ 0x00027371
	00027324:MOV RAX,qword ptr [RBP + -0x2d0]
	0002732b:TEST RAX,RAX
	0002732e:JZ 0x00027371
	00027330:MOV EDX,dword ptr [RBP + -0x2e0]
	00027336:MOV EAX,dword ptr [RBP + -0x1cc]
	0002733c:CMP EDX,EAX
	0002733e:JZ 0x00027371
	00027340:MOV RAX,qword ptr [RBP + -0x2d0]
	00027347:MOV qword ptr [RBP + -0x1c8],RAX
	0002734e:MOV dword ptr [RBP + -0x1c0],0x10d
	00027358:MOV EAX,dword ptr [RBP + -0x2e0]
	0002735e:MOV dword ptr [RBP + -0x1bc],EAX
	00027364:MOV qword ptr [RBP + -0x1b8],0x0
	0002736f:JMP 0x00027385
	00027371:ADD dword ptr [RBP + -0x4dc],0x1
	00027378:CMP dword ptr [RBP + -0x4dc],0x3
	0002737f:JLE 0x000272a0
	00027385:MOV RAX,qword ptr [RBP + -0x1d8]
	0002738c:TEST RAX,RAX
	0002738f:JZ 0x000273cf
	00027391:MOV RAX,qword ptr [RBP + -0x1c8]
	00027398:TEST RAX,RAX
	0002739b:JZ 0x000273cf
	0002739d:MOV RDX,qword ptr [RBP + -0x1c8]
	000273a4:MOV RAX,qword ptr [RBP + -0x1d8]
	000273ab:MOV RSI,RDX
	000273ae:MOV RDI,RAX
	000273b1:CALL 0x00005ce0
	000273b6:TEST EAX,EAX
	000273b8:JNZ 0x000273cf
	000273ba:MOV dword ptr [RBP + -0x1cc],0xffffffff
	000273c4:MOV qword ptr [RBP + -0x1c8],0x0
	000273cf:LEA RAX,[RBP + -0x2c0]
	000273d6:MOV RDI,RAX
	000273d9:CALL 0x000234b7
	000273de:TEST EAX,EAX
	000273e0:JZ 0x0002742d
	000273e2:MOVZX EAX,byte ptr [RBP + -0x1e7]
	000273e9:TEST AL,AL
	000273eb:JZ 0x000289ff
	000273f1:MOV RDX,qword ptr [RBP + -0x2c0]
	000273f8:MOV RAX,qword ptr [RBP + -0x2c0]
	000273ff:CMP qword ptr [RBP + -0x468],RAX
	00027406:JA 0x00027411
END_OF_LINE
----------------------------------------------
217: pcVar12 = "error: parsing failed, stopped at \'%s\'\n";
	00027411:LEA RAX,[0x353b8]
END_OF_LINE
----------------------------------------------
220: pcVar12 = "error: parsing failed\n";
	00027408:LEA RAX,[0x3539a]
END_OF_LINE
----------------------------------------------
222: dbg_printf(pcVar12,pc.input);
	00027423:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
224: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
226: if (pc.parse_datetime_debug != false) {
	00027434:TEST AL,AL
	00027436:JZ 0x00027643
END_OF_LINE
----------------------------------------------
227: dbg_printf("input timezone: ");
	0002744b:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
228: if (pc.timespec_seen == false) {
	00027457:TEST AL,AL
	00027459:JZ 0x00027486
END_OF_LINE
----------------------------------------------
229: if (pc.zones_seen == 0) {
	0002748d:TEST RAX,RAX
	00027490:JZ 0x000274bd
END_OF_LINE
----------------------------------------------
230: if (tzstring_local == (char *)0x0) {
	000274bd:CMP qword ptr [RBP + -0x520],0x0
	000274c5:JZ 0x00027577
END_OF_LINE
----------------------------------------------
231: fwrite("system default",1,0xe,pFRam0000000000144490);
	00027598:CALL 0x00006010
END_OF_LINE
----------------------------------------------
233: else if (tz == tzdefault) {
	000274d2:CMP RAX,qword ptr [RBP + -0x518]
	000274d9:JZ 0x00027508
END_OF_LINE
----------------------------------------------
234: iVar7 = strcmp(tzstring_local,"UTC0");
	0002751c:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
235: if (iVar7 == 0) {
	00027521:TEST EAX,EAX
	00027523:JNZ 0x0002754d
END_OF_LINE
----------------------------------------------
236: fwrite("TZ=\"UTC0\" environment value or -u",1,0x21,pFRam0000000000144490);
	00027546:CALL 0x00006010
END_OF_LINE
----------------------------------------------
239: fprintf(pFRam0000000000144490,"TZ=\"%s\" environment value",tzstring_local);
	00027570:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
243: fprintf(pFRam0000000000144490,"TZ=\"%s\" in date string",tzstring_local);
	000274fe:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
247: fwrite("parsed date/time string",1,0x17,pFRam0000000000144490);
	000274b3:CALL 0x00006010
END_OF_LINE
----------------------------------------------
251: fwrite("\'@timespec\' - always UTC",1,0x18,pFRam0000000000144490);
	0002747c:CALL 0x00006010
END_OF_LINE
----------------------------------------------
253: if (((pc.local_zones_seen != 0) && (pc.zones_seen == 0)) && (0 < pc.local_isdst)) {
	000275a4:TEST RAX,RAX
	000275a7:JZ 0x000275e5
	000275a9:MOV RAX,qword ptr [RBP + -0x1f0]
	000275b0:TEST RAX,RAX
	000275b3:JNZ 0x000275e5
	000275b5:MOV EAX,dword ptr [RBP + -0x2ac]
	000275bb:TEST EAX,EAX
	000275bd:JLE 0x000275e5
END_OF_LINE
----------------------------------------------
254: fwrite(", dst",1,5,pFRam0000000000144490);
	000275e0:CALL 0x00006010
END_OF_LINE
----------------------------------------------
256: if (pc.zones_seen != 0) {
	000275ec:TEST RAX,RAX
	000275ef:JZ 0x0002762c
END_OF_LINE
----------------------------------------------
257: pcVar12 = time_zone_str(pc.time_zone,time_zone_buf);
	000275f7:LEA RDX,[RBP + -0x190]
	000275fe:MOV RSI,RDX
	00027601:MOV EDI,EAX
	00027603:CALL 0x00022b0a
END_OF_LINE
----------------------------------------------
258: fprintf(pFRam0000000000144490," (%s)",pcVar12);
	00027627:CALL 0x00005d30
END_OF_LINE
----------------------------------------------
260: fputc(10,pFRam0000000000144490);
	0002763e:CALL 0x00005c60
END_OF_LINE
----------------------------------------------
262: if (pc.timespec_seen == false) {
	0002764a:TEST AL,AL
	0002764c:JZ 0x0002766f
END_OF_LINE
----------------------------------------------
263: if (1 < (pc.zones_seen + pc.local_zones_seen |
	000276a5:ADD RAX,RDX
	000276a8:OR RAX,RCX
	000276ab:CMP RAX,0x1
	000276af:JLE 0x0002777c
END_OF_LINE
----------------------------------------------
264: pc.times_seen | pc.dates_seen | pc.days_seen | pc.dsts_seen)) {
	0002767d:OR RDX,RAX
	00027680:MOV RAX,qword ptr [RBP + -0x210]
	00027687:OR RDX,RAX
	0002768a:MOV RAX,qword ptr [RBP + -0x200]
	00027691:MOV RCX,RDX
	00027694:OR RCX,RAX
END_OF_LINE
----------------------------------------------
265: if (pc.parse_datetime_debug != false) {
	000276bc:TEST AL,AL
	000276be:JZ 0x00028a02
END_OF_LINE
----------------------------------------------
266: if (1 < pc.times_seen) {
	000276cf:JLE 0x000276e5
END_OF_LINE
----------------------------------------------
267: dbg_printf("error: seen multiple time parts\n");
	000276e0:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
269: if (1 < pc.dates_seen) {
	000276f0:JLE 0x00027706
END_OF_LINE
----------------------------------------------
270: dbg_printf("error: seen multiple date parts\n");
	00027701:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
272: if (1 < pc.days_seen) {
	00027711:JLE 0x00027727
END_OF_LINE
----------------------------------------------
273: dbg_printf("error: seen multiple days parts\n");
	00027722:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
275: if (1 < pc.dsts_seen) {
	00027732:JLE 0x00027748
END_OF_LINE
----------------------------------------------
276: dbg_printf("error: seen multiple daylight-saving parts\n");
	00027743:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
278: if (1 < pc.zones_seen + pc.local_zones_seen) {
	00027756:ADD RAX,RDX
	00027759:CMP RAX,0x1
	0002775d:JLE 0x00028a02
END_OF_LINE
----------------------------------------------
279: dbg_printf("error: seen multiple time-zone parts\n");
	00027772:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
282: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
284: textyear.value = pc.year.value;
	000277ac:CALL 0x00025c53
END_OF_LINE
----------------------------------------------
285: textyear.negative = pc.year.negative;
	000277ac:CALL 0x00025c53
END_OF_LINE
----------------------------------------------
286: textyear._1_7_ = pc.year._1_7_;
	000277ac:CALL 0x00025c53
END_OF_LINE
----------------------------------------------
287: textyear.digits = pc.year.digits;
	000277ac:CALL 0x00025c53
END_OF_LINE
----------------------------------------------
288: _Var6 = to_tm_year(textyear,pc.parse_datetime_debug,&tm.tm_year);
	0002778d:ADD RDX,0x14
	00027791:SUB RSP,0x8
	00027795:PUSH qword ptr [RBP + -0x290]
	0002779b:PUSH qword ptr [RBP + -0x298]
	000277a1:PUSH qword ptr [RBP + -0x2a0]
	000277a7:MOV RSI,RDX
	000277aa:MOV EDI,EAX
	000277ac:CALL 0x00025c53
END_OF_LINE
----------------------------------------------
289: if (((!_Var6) ||
	000277ba:JNZ 0x00027822
	000277bc:MOV RAX,qword ptr [RBP + -0x288]
	000277c3:MOV EDX,0x0
	000277c8:ADD RAX,-0x1
	000277cc:JNO 0x000277d3
	000277ce:MOV EDX,0x1
	000277d3:MOVSXD RCX,EAX
	000277d6:CMP RAX,RCX
	000277d9:JZ 0x000277e0
	000277db:MOV EDX,0x1
	000277e0:MOV dword ptr [RBP + -0x3f0],EAX
	000277e6:MOV EAX,EDX
	000277e8:AND EAX,0x1
	000277eb:TEST AL,AL
	000277ed:JNZ 0x00027822
	000277ef:MOV RAX,qword ptr [RBP + -0x280]
	000277f6:MOV EDX,0x0
	000277fb:ADD RAX,0x0
	000277ff:JNO 0x00027806
	00027801:MOV EDX,0x1
	00027806:MOVSXD RCX,EAX
	00027809:CMP RAX,RCX
	0002780c:JZ 0x00027813
	0002780e:MOV EDX,0x1
	00027813:MOV dword ptr [RBP + -0x3f4],EAX
	00027819:MOV EAX,EDX
	0002781b:AND EAX,0x1
	0002781e:TEST AL,AL
	00027820:JZ 0x0002784a
END_OF_LINE
----------------------------------------------
290: (tm.tm_mon = (int)(pc.month + -1), pc.month + -1 != (long)tm.tm_mon || SCARRY8(pc.month,-1))
	000277c8:ADD RAX,-0x1
	000277cc:JNO 0x000277d3
	000277ce:MOV EDX,0x1
	000277d3:MOVSXD RCX,EAX
	000277d6:CMP RAX,RCX
	000277d9:JZ 0x000277e0
	000277db:MOV EDX,0x1
	000277e0:MOV dword ptr [RBP + -0x3f0],EAX
	000277e6:MOV EAX,EDX
	000277e8:AND EAX,0x1
	000277eb:TEST AL,AL
	000277ed:JNZ 0x00027822
END_OF_LINE
----------------------------------------------
291: ) || (tm.tm_mday = (int)pc.day, pc.day != tm.tm_mday || SCARRY8(pc.day,0))) {
	000277fb:ADD RAX,0x0
	000277ff:JNO 0x00027806
	00027801:MOV EDX,0x1
	00027806:MOVSXD RCX,EAX
	00027809:CMP RAX,RCX
	0002780c:JZ 0x00027813
	0002780e:MOV EDX,0x1
	00027813:MOV dword ptr [RBP + -0x3f4],EAX
	00027819:MOV EAX,EDX
	0002781b:AND EAX,0x1
	0002781e:TEST AL,AL
	00027820:JZ 0x0002784a
END_OF_LINE
----------------------------------------------
292: if (pc.parse_datetime_debug != false) {
	00027829:TEST AL,AL
	0002782b:JZ 0x00028a05
END_OF_LINE
----------------------------------------------
293: dbg_printf("error: year, month, or day overflow\n");
	00027840:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
295: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
297: if ((pc.times_seen == 0) &&
	00027851:TEST RAX,RAX
	00027854:JNZ 0x00027885
	00027856:MOVZX EAX,byte ptr [RBP + -0x21f]
	0002785d:TEST AL,AL
	0002785f:JZ 0x00027992
	00027865:MOV RAX,qword ptr [RBP + -0x218]
	0002786c:TEST RAX,RAX
	0002786f:JNZ 0x00027992
	00027875:MOV RAX,qword ptr [RBP + -0x210]
	0002787c:TEST RAX,RAX
	0002787f:JNZ 0x00027992
END_OF_LINE
----------------------------------------------
298: (((pc.rels_seen == false || (pc.dates_seen != 0)) || (pc.days_seen != 0)))) {
	0002785d:TEST AL,AL
	0002785f:JZ 0x00027992
	00027865:MOV RAX,qword ptr [RBP + -0x218]
	0002786c:TEST RAX,RAX
	0002786f:JNZ 0x00027992
	00027875:MOV RAX,qword ptr [RBP + -0x210]
	0002787c:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
299: tm.tm_sec = 0;
	00027992:MOV dword ptr [RBP + -0x400],0x0
END_OF_LINE
----------------------------------------------
300: tm.tm_min = 0;
	000279a2:MOV dword ptr [RBP + -0x3fc],EAX
END_OF_LINE
----------------------------------------------
301: tm.tm_hour = 0;
	000279ae:MOV dword ptr [RBP + -0x3f8],EAX
END_OF_LINE
----------------------------------------------
302: pc.seconds.tv_nsec = 0;
	000279b4:MOV qword ptr [RBP + -0x260],0x0
END_OF_LINE
----------------------------------------------
303: if (pc.parse_datetime_debug != false) {
	000279c6:TEST AL,AL
	000279c8:JZ 0x000279de
END_OF_LINE
----------------------------------------------
304: dbg_printf("warning: using midnight as starting time: 00:00:00\n");
	000279d9:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
308: tm.tm_hour = to_hour(pc.hour,pc.meridian);
	00027897:CALL 0x00025b33
END_OF_LINE
----------------------------------------------
309: if (tm.tm_hour < 0) {
	000278a8:TEST EAX,EAX
	000278aa:JNS 0x0002791a
END_OF_LINE
----------------------------------------------
310: if (pc.meridian == 0) {
	000278b2:TEST EAX,EAX
	000278b4:JZ 0x000278d3
END_OF_LINE
----------------------------------------------
311: puVar13 = &DAT_0003558d;
	000278d3:LEA RAX,[0x3558d]
END_OF_LINE
----------------------------------------------
313: else if (pc.meridian == 1) {
	000278bc:CMP EAX,0x1
	000278bf:JNZ 0x000278ca
END_OF_LINE
----------------------------------------------
314: puVar13 = &DAT_000346c9;
	000278c1:LEA RAX,[0x346c9]
END_OF_LINE
----------------------------------------------
317: puVar13 = &DAT_000346f4;
	000278ca:LEA RAX,[0x346f4]
END_OF_LINE
----------------------------------------------
319: if (pc.parse_datetime_debug != false) {
	000278e8:TEST AL,AL
	000278ea:JZ 0x00028a08
END_OF_LINE
----------------------------------------------
320: dbg_printf("error: invalid hour %ld%s\n",pc.hour,puVar13);
	00027910:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
322: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
324: tm.tm_min = (int)pc.minutes;
	00027921:MOV dword ptr [RBP + -0x3fc],EAX
END_OF_LINE
----------------------------------------------
325: tm.tm_sec = (int)pc.seconds.tv_sec;
	0002792e:MOV dword ptr [RBP + -0x400],EAX
END_OF_LINE
----------------------------------------------
326: if (pc.parse_datetime_debug != false) {
	0002793b:TEST AL,AL
	0002793d:JZ 0x000279de
END_OF_LINE
----------------------------------------------
327: pcVar12 = debug_strftime(&tm,dbg_tm,100);
	00027943:LEA RCX,[RBP + -0x170]
	0002794a:LEA RAX,[RBP + -0x400]
	00027951:MOV EDX,0x64
	00027956:MOV RSI,RCX
	00027959:MOV RDI,RAX
	0002795c:CALL 0x000268fa
END_OF_LINE
----------------------------------------------
328: if (pc.times_seen == 0) {
	0002796b:TEST RAX,RAX
	0002796e:JZ 0x00027979
END_OF_LINE
----------------------------------------------
329: pcVar19 = "using current time as starting value: \'%s\'\n";
	00027979:LEA RAX,[0x355e0]
END_OF_LINE
----------------------------------------------
332: pcVar19 = "using specified time as starting value: \'%s\'\n";
	00027970:LEA RAX,[0x355b0]
END_OF_LINE
----------------------------------------------
334: dbg_printf(pcVar19,pcVar12);
	0002798b:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
337: if ((pc.times_seen | pc.dates_seen | pc.days_seen) != 0) {
	000279ec:OR RDX,RAX
	000279ef:MOV RAX,qword ptr [RBP + -0x1f8]
	000279f6:OR RAX,RDX
	000279f9:TEST RAX,RAX
	000279fc:JZ 0x00027a08
END_OF_LINE
----------------------------------------------
338: tm.tm_isdst = -1;
	000279fe:MOV dword ptr [RBP + -0x3e0],0xffffffff
END_OF_LINE
----------------------------------------------
340: if (pc.local_zones_seen != 0) {
	00027a0f:TEST RAX,RAX
	00027a12:JZ 0x00027a20
END_OF_LINE
----------------------------------------------
341: tm.tm_isdst = pc.local_isdst;
	00027a1a:MOV dword ptr [RBP + -0x3e0],EAX
END_OF_LINE
----------------------------------------------
343: tm0.tm_min = tm.tm_min;
	00027a32:MOV dword ptr [RBP + -0x3bc],EAX
END_OF_LINE
----------------------------------------------
344: tm0.tm_sec = tm.tm_sec;
	00027a32:MOV dword ptr [RBP + -0x3bc],EAX
END_OF_LINE
----------------------------------------------
345: tm0.tm_hour = tm.tm_hour;
	00027a3e:MOV dword ptr [RBP + -0x3b8],EAX
END_OF_LINE
----------------------------------------------
346: tm0.tm_mday = tm.tm_mday;
	00027a4a:MOV dword ptr [RBP + -0x3b4],EAX
END_OF_LINE
----------------------------------------------
347: tm0.tm_mon = tm.tm_mon;
	00027a56:MOV dword ptr [RBP + -0x3b0],EAX
END_OF_LINE
----------------------------------------------
348: tm0.tm_year = tm.tm_year;
	00027a62:MOV dword ptr [RBP + -0x3ac],EAX
END_OF_LINE
----------------------------------------------
349: tm0.tm_isdst = tm.tm_isdst;
	00027a6e:MOV dword ptr [RBP + -0x3a0],EAX
END_OF_LINE
----------------------------------------------
350: Start = mktime_z(tz,&tm);
	00027a74:LEA RDX,[RBP + -0x400]
	00027a7b:MOV RAX,qword ptr [RBP + -0x490]
	00027a82:MOV RSI,RDX
	00027a85:MOV RDI,RAX
	00027a88:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
351: _Var6 = mktime_ok(tz,&tm0,&tm,Start);
	00027a9b:LEA RDX,[RBP + -0x400]
	00027aa2:LEA RSI,[RBP + -0x3c0]
	00027aa9:MOV RAX,qword ptr [RBP + -0x490]
	00027ab0:MOV RDI,RAX
	00027ab3:CALL 0x00026665
END_OF_LINE
----------------------------------------------
352: if (!_Var6) {
	00027abd:JZ 0x00027c5c
END_OF_LINE
----------------------------------------------
353: repaired = false;
	00027ac3:MOV byte ptr [RBP + -0x4e2],0x0
END_OF_LINE
----------------------------------------------
354: bVar20 = pc.zones_seen != 0;
	00027ad1:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
355: if (bVar20) {
	00027ae4:JZ 0x00027c25
END_OF_LINE
----------------------------------------------
356: dbg_ord[2] = 'X';
	00027aea:MOV byte ptr [RBP + -0x8e],0x58
END_OF_LINE
----------------------------------------------
357: dbg_ord[1] = 'X';
	00027af8:MOV byte ptr [RBP + -0x8f],AL
END_OF_LINE
----------------------------------------------
358: dbg_ord[0] = 'X';
	00027b05:MOV byte ptr [RBP + -0x90],AL
END_OF_LINE
----------------------------------------------
359: time_zone_str(pc.time_zone,dbg_ord + 3);
	00027b18:ADD RDX,0x3
	00027b1c:MOV RSI,RDX
	00027b1f:MOV EDI,EAX
	00027b21:CALL 0x00022b0a
END_OF_LINE
----------------------------------------------
360: ptVar14 = tzalloc(dbg_ord);
	00027b26:LEA RAX,[RBP + -0x90]
	00027b2d:MOV RDI,RAX
	00027b30:CALL 0x0002c6e0
END_OF_LINE
----------------------------------------------
361: if (ptVar14 == (timezone_t)0x0) {
	00027b3c:CMP qword ptr [RBP + -0x448],0x0
	00027b44:JNZ 0x00027b78
END_OF_LINE
----------------------------------------------
362: if (pc.parse_datetime_debug != false) {
	00027b4d:TEST AL,AL
	00027b4f:JZ 0x00028a0b
END_OF_LINE
----------------------------------------------
363: dbg_printf("error: tzalloc (\"%s\") failed\n",dbg_ord);
	00027b55:LEA RAX,[RBP + -0x90]
	00027b5c:MOV RSI,RAX
	00027b5f:LEA RAX,[0x35644]
	00027b66:MOV RDI,RAX
	00027b69:MOV EAX,0x0
	00027b6e:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
365: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
367: tm.tm_sec = tm0.tm_sec;
	00027b7e:MOV dword ptr [RBP + -0x400],EAX
END_OF_LINE
----------------------------------------------
368: tm.tm_min = tm0.tm_min;
	00027b8a:MOV dword ptr [RBP + -0x3fc],EAX
END_OF_LINE
----------------------------------------------
369: tm.tm_hour = tm0.tm_hour;
	00027b96:MOV dword ptr [RBP + -0x3f8],EAX
END_OF_LINE
----------------------------------------------
370: tm.tm_mday = tm0.tm_mday;
	00027ba2:MOV dword ptr [RBP + -0x3f4],EAX
END_OF_LINE
----------------------------------------------
371: tm.tm_mon = tm0.tm_mon;
	00027bae:MOV dword ptr [RBP + -0x3f0],EAX
END_OF_LINE
----------------------------------------------
372: tm.tm_year = tm0.tm_year;
	00027bba:MOV dword ptr [RBP + -0x3ec],EAX
END_OF_LINE
----------------------------------------------
373: tm.tm_isdst = tm0.tm_isdst;
	00027bc6:MOV dword ptr [RBP + -0x3e0],EAX
END_OF_LINE
----------------------------------------------
374: Start = mktime_z(ptVar14,&tm);
	00027bcc:LEA RDX,[RBP + -0x400]
	00027bd3:MOV RAX,qword ptr [RBP + -0x448]
	00027bda:MOV RSI,RDX
	00027bdd:MOV RDI,RAX
	00027be0:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
375: repaired = mktime_ok(ptVar14,&tm0,&tm,Start);
	00027bf3:LEA RDX,[RBP + -0x400]
	00027bfa:LEA RSI,[RBP + -0x3c0]
	00027c01:MOV RAX,qword ptr [RBP + -0x448]
	00027c08:MOV RDI,RAX
	00027c0b:CALL 0x00026665
END_OF_LINE
----------------------------------------------
376: tzfree(ptVar14);
	00027c20:CALL 0x0002c969
END_OF_LINE
----------------------------------------------
378: if (repaired != true) {
	00027c2f:TEST AL,AL
	00027c31:JZ 0x00027c5c
END_OF_LINE
----------------------------------------------
379: debug_mktime_not_ok(&tm0,&tm,&pc,bVar20);
	00027c3a:LEA RDX,[RBP + -0x2c0]
	00027c41:LEA RSI,[RBP + -0x400]
	00027c48:LEA RAX,[RBP + -0x3c0]
	00027c4f:MOV RDI,RAX
	00027c52:CALL 0x00026951
END_OF_LINE
----------------------------------------------
380: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
383: if ((pc.days_seen != 0) && (pc.dates_seen == 0)) {
	00027c63:TEST RAX,RAX
	00027c66:JZ 0x00027ea4
	00027c6c:MOV RAX,qword ptr [RBP + -0x218]
	00027c73:TEST RAX,RAX
	00027c76:JNZ 0x00027ea4
END_OF_LINE
----------------------------------------------
384: if ((pc.day_ordinal < 1) || (tm.tm_wday == pc.day_number)) {
	00027c8d:JLE 0x00027ca6
	00027c8f:MOV ECX,dword ptr [RBP + -0x3e8]
	00027c95:MOV EAX,dword ptr [RBP + -0x2b0]
	00027c9b:CMP ECX,EAX
	00027c9d:JZ 0x00027ca6
END_OF_LINE
----------------------------------------------
385: iVar7 = 0;
	00027ca6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
388: iVar7 = 1;
	00027c9f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
390: probe_tm._0_8_ = (pc.day_ordinal - iVar7) * 7;
	00027cab:MOVSXD RCX,EAX
	00027cae:MOV RAX,RDX
	00027cb1:SUB RAX,RCX
	00027cb4:MOV EDX,0x0
	00027cb9:IMUL RAX,RAX,0x7
END_OF_LINE
----------------------------------------------
391: if (((SEXT816((long)probe_tm._0_8_) != SEXT816(pc.day_ordinal - iVar7) * SEXT816(7)) ||
	00027cab:MOVSXD RCX,EAX
	00027cae:MOV RAX,RDX
	00027cb1:SUB RAX,RCX
	00027cb4:MOV EDX,0x0
	00027cb9:IMUL RAX,RAX,0x7
	00027cbd:JNO 0x00027cc4
	00027cbf:MOV EDX,0x1
	00027cc4:MOV qword ptr [RBP + -0x300],RAX
	00027ccb:MOV RAX,RDX
	00027cce:AND EAX,0x1
	00027cd1:TEST AL,AL
	00027cd3:JNZ 0x00027d72
	00027cd9:MOV EAX,dword ptr [RBP + -0x2b0]
	00027cdf:MOV EDX,dword ptr [RBP + -0x3e8]
	00027ce5:SUB EAX,EDX
	00027ce7:LEA EDX,[RAX + 0x7]
	00027cea:MOVSXD RAX,EDX
	00027ced:IMUL RAX,RAX,-0x6db6db6d
	00027cf4:SHR RAX,0x20
	00027cf8:ADD EAX,EDX
	00027cfa:SAR EAX,0x2
	00027cfd:MOV ECX,EDX
	00027cff:SAR ECX,0x1f
	00027d02:SUB EAX,ECX
	00027d04:MOV ECX,EAX
	00027d06:SHL ECX,0x3
	00027d09:SUB ECX,EAX
	00027d0b:MOV EAX,EDX
	00027d0d:SUB EAX,ECX
	00027d0f:MOV RDX,qword ptr [RBP + -0x300]
	00027d16:CDQE
	00027d18:MOV ECX,0x0
	00027d1d:ADD RAX,RDX
	00027d20:JNO 0x00027d27
	00027d22:MOV ECX,0x1
	00027d27:MOV qword ptr [RBP + -0x300],RAX
	00027d2e:MOV RAX,RCX
	00027d31:AND EAX,0x1
	00027d34:TEST AL,AL
	00027d36:JNZ 0x00027d72
	00027d38:MOV RCX,qword ptr [RBP + -0x300]
	00027d3f:MOV EAX,dword ptr [RBP + -0x3f4]
	00027d45:CDQE
	00027d47:MOV EDX,0x0
	00027d4c:ADD RAX,RCX
	00027d4f:JNO 0x00027d56
	00027d51:MOV EDX,0x1
	00027d56:MOVSXD RCX,EAX
	00027d59:CMP RAX,RCX
	00027d5c:JZ 0x00027d63
	00027d5e:MOV EDX,0x1
	00027d63:MOV dword ptr [RBP + -0x3f4],EAX
	00027d69:MOV EAX,EDX
	00027d6b:AND EAX,0x1
	00027d6e:TEST AL,AL
	00027d70:JZ 0x00027d7f
END_OF_LINE
----------------------------------------------
392: (lVar15 = (long)(((pc.day_number - tm.tm_wday) + 7) % 7),
	00027ce5:SUB EAX,EDX
	00027ce7:LEA EDX,[RAX + 0x7]
	00027cea:MOVSXD RAX,EDX
	00027ced:IMUL RAX,RAX,-0x6db6db6d
	00027cf4:SHR RAX,0x20
	00027cf8:ADD EAX,EDX
	00027cfa:SAR EAX,0x2
	00027cfd:MOV ECX,EDX
	00027cff:SAR ECX,0x1f
	00027d02:SUB EAX,ECX
	00027d04:MOV ECX,EAX
	00027d06:SHL ECX,0x3
	00027d09:SUB ECX,EAX
	00027d0b:MOV EAX,EDX
	00027d0d:SUB EAX,ECX
	00027d0f:MOV RDX,qword ptr [RBP + -0x300]
	00027d16:CDQE
END_OF_LINE
----------------------------------------------
393: bVar20 = SCARRY8(lVar15,probe_tm._0_8_), probe_tm._0_8_ = lVar15 + probe_tm._0_8_, bVar20)
	00027d1d:ADD RAX,RDX
	00027d20:JNO 0x00027d27
END_OF_LINE
----------------------------------------------
394: ) || (lVar15 = (long)tm.tm_mday, lVar16 = lVar15 + probe_tm._0_8_,
	00027d45:CDQE
	00027d47:MOV EDX,0x0
	00027d4c:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
395: tm.tm_mday = (int)lVar16, lVar16 != tm.tm_mday || SCARRY8(lVar15,probe_tm._0_8_))) {
	00027d4c:ADD RAX,RCX
	00027d4f:JNO 0x00027d56
	00027d51:MOV EDX,0x1
	00027d56:MOVSXD RCX,EAX
	00027d59:CMP RAX,RCX
	00027d5c:JZ 0x00027d63
	00027d5e:MOV EDX,0x1
	00027d63:MOV dword ptr [RBP + -0x3f4],EAX
	00027d69:MOV EAX,EDX
	00027d6b:AND EAX,0x1
	00027d6e:TEST AL,AL
	00027d70:JZ 0x00027d7f
END_OF_LINE
----------------------------------------------
396: Start = -1;
	00027d72:MOV qword ptr [RBP + -0x498],-0x1
END_OF_LINE
----------------------------------------------
399: tm.tm_isdst = -1;
	00027d7f:MOV dword ptr [RBP + -0x3e0],0xffffffff
END_OF_LINE
----------------------------------------------
400: Start = mktime_z(tz,&tm);
	00027d89:LEA RDX,[RBP + -0x400]
	00027d90:MOV RAX,qword ptr [RBP + -0x490]
	00027d97:MOV RSI,RDX
	00027d9a:MOV RDI,RAX
	00027d9d:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
402: if (Start == -1) {
	00027da9:CMP qword ptr [RBP + -0x498],-0x1
	00027db1:JNZ 0x00027e3c
END_OF_LINE
----------------------------------------------
403: if (pc.parse_datetime_debug != false) {
	00027dbe:TEST AL,AL
	00027dc0:JZ 0x00028a0e
END_OF_LINE
----------------------------------------------
404: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00027dc6:LEA RDX,[RBP + -0x170]
	00027dcd:LEA RSI,[RBP + -0x2c0]
	00027dd4:LEA RAX,[RBP + -0x400]
	00027ddb:MOV ECX,0x64
	00027de0:MOV RDI,RAX
	00027de3:CALL 0x00026748
END_OF_LINE
----------------------------------------------
405: pcVar19 = str_days(&pc,dbg_ord,100);
	00027df9:LEA RCX,[RBP + -0x90]
	00027e00:LEA RAX,[RBP + -0x2c0]
	00027e07:MOV EDX,0x64
	00027e0c:MOV RSI,RCX
	00027e0f:MOV RDI,RAX
	00027e12:CALL 0x000229c0
END_OF_LINE
----------------------------------------------
406: dbg_printf("error: day \'%s\' (day ordinal=%ld number=%d) resulted in an invalid date: \'%s\'\n"
	00027e32:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
407: ,pcVar19,pc.day_ordinal,(ulong)(uint)pc.day_number,pcVar12);
	00027e1a:MOV ECX,R12D
	00027e1d:MOV RDX,RBX
	00027e20:MOV RSI,RAX
	00027e23:LEA RAX,[0x35668]
	00027e2a:MOV RDI,RAX
	00027e2d:MOV EAX,0x0
	00027e32:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
409: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
411: if (pc.parse_datetime_debug != false) {
	00027e43:TEST AL,AL
	00027e45:JZ 0x00027ea4
END_OF_LINE
----------------------------------------------
412: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00027e47:LEA RDX,[RBP + -0x170]
	00027e4e:LEA RSI,[RBP + -0x2c0]
	00027e55:LEA RAX,[RBP + -0x400]
	00027e5c:MOV ECX,0x64
	00027e61:MOV RDI,RAX
	00027e64:CALL 0x00026748
END_OF_LINE
----------------------------------------------
413: pcVar19 = str_days(&pc,dbg_ord,100);
	00027e6c:LEA RCX,[RBP + -0x90]
	00027e73:LEA RAX,[RBP + -0x2c0]
	00027e7a:MOV EDX,0x64
	00027e7f:MOV RSI,RCX
	00027e82:MOV RDI,RAX
	00027e85:CALL 0x000229c0
END_OF_LINE
----------------------------------------------
414: dbg_printf("new start date: \'%s\' is \'%s\'\n",pcVar19,pcVar12);
	00027e9f:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
417: if (pc.parse_datetime_debug != false) {
	00027eab:TEST AL,AL
	00027ead:JZ 0x00027f86
END_OF_LINE
----------------------------------------------
418: if ((pc.dates_seen == 0) && (pc.days_seen == 0)) {
	00027eba:TEST RAX,RAX
	00027ebd:JNZ 0x00027f00
	00027ebf:MOV RAX,qword ptr [RBP + -0x210]
	00027ec6:TEST RAX,RAX
	00027ec9:JNZ 0x00027f00
END_OF_LINE
----------------------------------------------
419: pcVar12 = debug_strfdate(&tm,dbg_tm,100);
	00027ecb:LEA RCX,[RBP + -0x170]
	00027ed2:LEA RAX,[RBP + -0x400]
	00027ed9:MOV EDX,0x64
	00027ede:MOV RSI,RCX
	00027ee1:MOV RDI,RAX
	00027ee4:CALL 0x0002685f
END_OF_LINE
----------------------------------------------
420: dbg_printf("using current date as starting value: \'%s\'\n",pcVar12);
	00027efb:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
422: if ((pc.days_seen != 0) && (pc.dates_seen != 0)) {
	00027f07:TEST RAX,RAX
	00027f0a:JZ 0x00027f4d
	00027f0c:MOV RAX,qword ptr [RBP + -0x218]
	00027f13:TEST RAX,RAX
	00027f16:JZ 0x00027f4d
END_OF_LINE
----------------------------------------------
423: pcVar12 = str_days(&pc,dbg_ord,100);
	00027f18:LEA RCX,[RBP + -0x90]
	00027f1f:LEA RAX,[RBP + -0x2c0]
	00027f26:MOV EDX,0x64
	00027f2b:MOV RSI,RCX
	00027f2e:MOV RDI,RAX
	00027f31:CALL 0x000229c0
END_OF_LINE
----------------------------------------------
424: dbg_printf("warning: day (%s) ignored when explicit dates are given\n",pcVar12);
	00027f48:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
426: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00027f4d:LEA RDX,[RBP + -0x170]
	00027f54:LEA RSI,[RBP + -0x2c0]
	00027f5b:LEA RAX,[RBP + -0x400]
	00027f62:MOV ECX,0x64
	00027f67:MOV RDI,RAX
	00027f6a:CALL 0x00026748
END_OF_LINE
----------------------------------------------
427: dbg_printf("starting date/time: \'%s\'\n",pcVar12);
	00027f81:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
429: if ((pc.rel.day | pc.rel.year | pc.rel.month) != 0) {
	00027f94:OR RDX,RAX
	00027f97:MOV RAX,qword ptr [RBP + -0x248]
	00027f9e:OR RAX,RDX
	00027fa1:TEST RAX,RAX
	00027fa4:JZ 0x00028350
END_OF_LINE
----------------------------------------------
430: if (pc.parse_datetime_debug != false) {
	00027fb1:TEST AL,AL
	00027fb3:JZ 0x00028017
END_OF_LINE
----------------------------------------------
431: if (((pc.rel.year != 0) || (pc.rel.month != 0)) && (tm.tm_mday != 0xf)) {
	00027fbc:TEST RAX,RAX
	00027fbf:JNZ 0x00027fcd
	00027fc1:MOV RAX,qword ptr [RBP + -0x250]
	00027fc8:TEST RAX,RAX
	00027fcb:JZ 0x00027fec
	00027fcd:MOV EAX,dword ptr [RBP + -0x3f4]
	00027fd3:CMP EAX,0xf
	00027fd6:JZ 0x00027fec
END_OF_LINE
----------------------------------------------
432: dbg_printf(
	00027fe7:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
433: "warning: when adding relative months/years, it is recommended to specify the 15th of the months\n"
	00027fe7:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
436: if ((pc.rel.day != 0) && (tm.tm_hour != 0xc)) {
	00027ff3:TEST RAX,RAX
	00027ff6:JZ 0x00028017
	00027ff8:MOV EAX,dword ptr [RBP + -0x3f8]
	00027ffe:CMP EAX,0xc
	00028001:JZ 0x00028017
END_OF_LINE
----------------------------------------------
437: dbg_printf("warning: when adding relative days, it is recommended to specify noon\n");
	00028012:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
440: lVar15 = tm.tm_year + pc.rel.year;
	00028024:CDQE
	00028026:MOV EDX,0x0
	0002802b:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
441: iVar7 = (int)lVar15;
	00028035:MOVSXD RCX,EAX
END_OF_LINE
----------------------------------------------
442: if (lVar15 == iVar7 && !SCARRY8((long)tm.tm_year,pc.rel.year)) {
	00028024:CDQE
	00028026:MOV EDX,0x0
	0002802b:ADD RAX,RCX
	0002802e:JNO 0x00028035
	00028030:MOV EDX,0x1
	00028035:MOVSXD RCX,EAX
	00028038:CMP RAX,RCX
	0002803b:JZ 0x00028042
	0002803d:MOV EDX,0x1
	00028042:MOV dword ptr [RBP + -0x4a8],EAX
	00028048:MOV EAX,EDX
	0002804a:AND EAX,0x1
	0002804d:TEST AL,AL
	0002804f:JNZ 0x000280c5
END_OF_LINE
----------------------------------------------
443: lVar15 = tm.tm_mon + pc.rel.month;
	0002805e:CDQE
	00028060:MOV EDX,0x0
	00028065:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
444: iVar8 = (int)lVar15;
	0002806f:MOVSXD RCX,EAX
END_OF_LINE
----------------------------------------------
445: probe = CONCAT44(probe._4_4_,iVar8);
	0002807c:MOV dword ptr [RBP + -0x340],EAX
END_OF_LINE
----------------------------------------------
446: if (lVar15 == iVar8 && !SCARRY8((long)tm.tm_mon,pc.rel.month)) {
	0002805e:CDQE
	00028060:MOV EDX,0x0
	00028065:ADD RAX,RCX
	00028068:JNO 0x0002806f
	0002806a:MOV EDX,0x1
	0002806f:MOVSXD RCX,EAX
	00028072:CMP RAX,RCX
	00028075:JZ 0x0002807c
	00028077:MOV EDX,0x1
	0002807c:MOV dword ptr [RBP + -0x340],EAX
	00028082:MOV EAX,EDX
	00028084:AND EAX,0x1
	00028087:TEST AL,AL
	00028089:JNZ 0x000280c5
END_OF_LINE
----------------------------------------------
447: lVar15 = tm.tm_mday + pc.rel.day;
	00028098:CDQE
	0002809a:MOV EDX,0x0
	0002809f:ADD RAX,RCX
END_OF_LINE
----------------------------------------------
448: iVar9 = (int)lVar15;
	000280a9:MOVSXD RCX,EAX
END_OF_LINE
----------------------------------------------
449: probe_tm.tm_sec = iVar9;
	000280b6:MOV dword ptr [RBP + -0x300],EAX
END_OF_LINE
----------------------------------------------
450: if (lVar15 == iVar9 && !SCARRY8((long)tm.tm_mday,pc.rel.day)) {
	00028098:CDQE
	0002809a:MOV EDX,0x0
	0002809f:ADD RAX,RCX
	000280a2:JNO 0x000280a9
	000280a4:MOV EDX,0x1
	000280a9:MOVSXD RCX,EAX
	000280ac:CMP RAX,RCX
	000280af:JZ 0x000280b6
	000280b1:MOV EDX,0x1
	000280b6:MOV dword ptr [RBP + -0x300],EAX
	000280bc:MOV EAX,EDX
	000280be:AND EAX,0x1
	000280c1:TEST AL,AL
	000280c3:JZ 0x000280fc
END_OF_LINE
----------------------------------------------
451: tm.tm_hour = tm0.tm_hour;
	00028126:MOV dword ptr [RBP + -0x3f8],EAX
END_OF_LINE
----------------------------------------------
452: tm.tm_min = tm0.tm_min;
	00028132:MOV dword ptr [RBP + -0x3fc],EAX
END_OF_LINE
----------------------------------------------
453: tm.tm_sec = tm0.tm_sec;
	0002813e:MOV dword ptr [RBP + -0x400],EAX
END_OF_LINE
----------------------------------------------
454: tm.tm_isdst = tm0.tm_isdst;
	0002814a:MOV dword ptr [RBP + -0x3e0],EAX
END_OF_LINE
----------------------------------------------
455: tm.tm_mday = iVar9;
	00028164:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
456: tm.tm_mon = iVar8;
	00028164:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
457: tm.tm_year = iVar7;
	00028164:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
458: Start = mktime_z(tz,&tm);
	00028150:LEA RDX,[RBP + -0x400]
	00028157:MOV RAX,qword ptr [RBP + -0x490]
	0002815e:MOV RSI,RDX
	00028161:MOV RDI,RAX
	00028164:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
459: if (Start == -1) {
	00028170:CMP qword ptr [RBP + -0x498],-0x1
	00028178:JNZ 0x000281c7
END_OF_LINE
----------------------------------------------
460: if (pc.parse_datetime_debug != false) {
	00028181:TEST AL,AL
	00028183:JZ 0x0002834a
END_OF_LINE
----------------------------------------------
461: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00028189:LEA RDX,[RBP + -0x170]
	00028190:LEA RSI,[RBP + -0x2c0]
	00028197:LEA RAX,[RBP + -0x400]
	0002819e:MOV ECX,0x64
	000281a3:MOV RDI,RAX
	000281a6:CALL 0x00026748
END_OF_LINE
----------------------------------------------
462: dbg_printf("error: adding relative date resulted in an invalid date: \'%s\'\n",
	000281bd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
463: pcVar12);
	000281bd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
465: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
467: if (pc.parse_datetime_debug != false) {
	000281ce:TEST AL,AL
	000281d0:JZ 0x00028350
END_OF_LINE
----------------------------------------------
468: dbg_printf("after date adjustment (%+ld years, %+ld months, %+ld days),\n",pc.rel.year
	000281fd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
469: ,pc.rel.month,pc.rel.day);
	000281fd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
470: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00028202:LEA RDX,[RBP + -0x170]
	00028209:LEA RSI,[RBP + -0x2c0]
	00028210:LEA RAX,[RBP + -0x400]
	00028217:MOV ECX,0x64
	0002821c:MOV RDI,RAX
	0002821f:CALL 0x00026748
END_OF_LINE
----------------------------------------------
471: dbg_printf("    new date/time = \'%s\'\n",pcVar12);
	00028236:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
472: if ((tm0.tm_isdst != -1) && (tm.tm_isdst != tm0.tm_isdst)) {
	00028241:CMP EAX,-0x1
	00028244:JZ 0x0002826a
	00028246:MOV EDX,dword ptr [RBP + -0x3e0]
	0002824c:MOV EAX,dword ptr [RBP + -0x3a0]
	00028252:CMP EDX,EAX
	00028254:JZ 0x0002826a
END_OF_LINE
----------------------------------------------
473: dbg_printf("warning: daylight saving time changed after date adjustment\n");
	00028265:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
475: if ((pc.rel.day == 0) &&
	00028271:TEST RAX,RAX
	00028274:JNZ 0x00028350
	0002827a:MOV EDX,dword ptr [RBP + -0x3f4]
	00028280:MOV EAX,dword ptr [RBP + -0x300]
	00028286:CMP EDX,EAX
	00028288:JNZ 0x000282ae
	0002828a:MOV RAX,qword ptr [RBP + -0x250]
	00028291:TEST RAX,RAX
	00028294:JNZ 0x00028350
	0002829a:MOV EDX,dword ptr [RBP + -0x3f0]
	000282a0:MOV EAX,dword ptr [RBP + -0x340]
	000282a6:CMP EDX,EAX
	000282a8:JZ 0x00028350
END_OF_LINE
----------------------------------------------
476: ((tm.tm_mday != probe_tm.tm_sec ||
	00028286:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
477: ((pc.rel.month == 0 && (tm.tm_mon != (int)probe)))))) {
	00028291:TEST RAX,RAX
	00028294:JNZ 0x00028350
	0002829a:MOV EDX,dword ptr [RBP + -0x3f0]
	000282a0:MOV EAX,dword ptr [RBP + -0x340]
	000282a6:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
478: dbg_printf("warning: month/year adjustment resulted in shifted dates:\n");
	000282bd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
479: uVar5 = probe_tm._0_8_;
	000282bd:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
480: uVar1 = (int)probe + 1;
	000282ce:LEA R12D,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
481: pcVar12 = tm_year_str(iVar7,tm_year_buf);
	000282d8:LEA RDX,[RBP + -0x19d]
	000282df:MOV RSI,RDX
	000282e2:MOV EDI,EAX
	000282e4:CALL 0x00025bbe
END_OF_LINE
----------------------------------------------
482: dbg_printf("     adjusted Y M D: %s %02d %02d\n",pcVar12,(ulong)uVar1,
	000282ce:LEA R12D,[RAX + 0x1]
	000282d2:MOV EAX,dword ptr [RBP + -0x4a8]
	000282d8:LEA RDX,[RBP + -0x19d]
	000282df:MOV RSI,RDX
	000282e2:MOV EDI,EAX
	000282e4:CALL 0x00025bbe
	000282e9:MOV ECX,EBX
	000282eb:MOV EDX,R12D
	000282ee:MOV RSI,RAX
	000282f1:LEA RAX,[0x35948]
	000282f8:MOV RDI,RAX
	000282fb:MOV EAX,0x0
	00028300:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
483: uVar5 & 0xffffffff);
	000282e9:MOV ECX,EBX
END_OF_LINE
----------------------------------------------
484: iVar7 = tm.tm_mday;
	00028300:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
485: uVar1 = tm.tm_mon + 1;
	00028311:LEA R12D,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
486: pcVar12 = tm_year_str(tm.tm_year,tm_year_buf);
	0002831b:LEA RDX,[RBP + -0x19d]
	00028322:MOV RSI,RDX
	00028325:MOV EDI,EAX
	00028327:CALL 0x00025bbe
END_OF_LINE
----------------------------------------------
487: dbg_printf("   normalized Y M D: %s %02d %02d\n",pcVar12,(ulong)uVar1,
	00028311:LEA R12D,[RAX + 0x1]
	00028315:MOV EAX,dword ptr [RBP + -0x3ec]
	0002831b:LEA RDX,[RBP + -0x19d]
	00028322:MOV RSI,RDX
	00028325:MOV EDI,EAX
	00028327:CALL 0x00025bbe
	0002832c:MOV ECX,EBX
	0002832e:MOV EDX,R12D
	00028331:MOV RSI,RAX
	00028334:LEA RAX,[0x35970]
	0002833b:MOV RDI,RAX
	0002833e:MOV EAX,0x0
	00028343:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
488: (ulong)(uint)iVar7);
	0002832c:MOV ECX,EBX
END_OF_LINE
----------------------------------------------
491: goto LAB_00028350;
	00028350:MOV RAX,qword ptr [RBP + -0x1f0]
END_OF_LINE
----------------------------------------------
495: if (pc.parse_datetime_debug != false) {
	000280cc:TEST AL,AL
	000280ce:JZ 0x00028a11
END_OF_LINE
----------------------------------------------
496: dbg_printf("error: %s:%d\n","parse-datetime.y",0x877);
	000280f2:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
498: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
500: LAB_00028350:
	00028350:MOV RAX,qword ptr [RBP + -0x1f0]
END_OF_LINE
----------------------------------------------
501: if (pc.zones_seen != 0) {
	00028357:TEST RAX,RAX
	0002835a:JZ 0x00028457
END_OF_LINE
----------------------------------------------
502: probe = pc.time_zone - tm.tm_gmtoff;
	00028366:CDQE
	00028368:MOV qword ptr [RBP + -0x340],RAX
	0002836f:MOV byte ptr [RBP + -0x4df],0x0
	00028376:MOV RAX,qword ptr [RBP + -0x3d8]
	0002837d:MOV qword ptr [RBP + -0x440],RAX
	00028384:MOV RAX,qword ptr [RBP + -0x340]
	0002838b:MOV EDX,0x0
	00028390:SUB RAX,qword ptr [RBP + -0x440]
END_OF_LINE
----------------------------------------------
503: probe_tm._0_8_ = Start - probe;
	000283d2:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
504: if (((byte)(SBORROW8(Start,probe) | SBORROW8((long)pc.time_zone,tm.tm_gmtoff) != false) != 0)
	00028366:CDQE
	00028368:MOV qword ptr [RBP + -0x340],RAX
	0002836f:MOV byte ptr [RBP + -0x4df],0x0
	00028376:MOV RAX,qword ptr [RBP + -0x3d8]
	0002837d:MOV qword ptr [RBP + -0x440],RAX
	00028384:MOV RAX,qword ptr [RBP + -0x340]
	0002838b:MOV EDX,0x0
	00028390:SUB RAX,qword ptr [RBP + -0x440]
	00028397:JNO 0x0002839e
	00028399:MOV EDX,0x1
	0002839e:MOV qword ptr [RBP + -0x340],RAX
	000283a5:MOV RAX,RDX
	000283a8:AND EAX,0x1
	000283ab:OR AL,byte ptr [RBP + -0x4df]
	000283b1:MOVZX EAX,AL
	000283b4:TEST EAX,EAX
	000283b6:SETNZ AL
	000283b9:MOV byte ptr [RBP + -0x4df],AL
	000283bf:MOV RDX,qword ptr [RBP + -0x340]
	000283c6:MOV ECX,0x0
	000283cb:MOV RAX,qword ptr [RBP + -0x498]
	000283d2:SUB RAX,RDX
	000283d5:JNO 0x000283dc
	000283d7:MOV ECX,0x1
	000283dc:MOV qword ptr [RBP + -0x300],RAX
	000283e3:MOV RAX,RCX
	000283e6:AND EAX,0x1
	000283e9:OR AL,byte ptr [RBP + -0x4df]
	000283ef:MOVZX EAX,AL
	000283f2:TEST EAX,EAX
	000283f4:SETNZ AL
	000283f7:MOV byte ptr [RBP + -0x4df],AL
	000283fd:CMP byte ptr [RBP + -0x4df],0x0
	00028404:JNZ 0x00028419
	00028406:MOV RAX,qword ptr [RBP + -0x300]
	0002840d:MOV RDI,RAX
	00028410:CALL 0x000222c3
	00028415:TEST AL,AL
	00028417:JZ 0x00028449
END_OF_LINE
----------------------------------------------
505: || (_Var6 = time_overflow(probe_tm._0_8_), _Var6)) {
	00028410:CALL 0x000222c3
	00028415:TEST AL,AL
	00028417:JZ 0x00028449
END_OF_LINE
----------------------------------------------
506: if (pc.parse_datetime_debug != false) {
	00028420:TEST AL,AL
	00028422:JZ 0x00028a14
END_OF_LINE
----------------------------------------------
507: dbg_printf("error: timezone %d caused time_t overflow\n",(ulong)(uint)pc.time_zone);
	0002842e:MOV ESI,EAX
	00028430:LEA RAX,[0x35998]
	00028437:MOV RDI,RAX
	0002843a:MOV EAX,0x0
	0002843f:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
509: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
511: Start._0_4_ = probe_tm.tm_sec;
	00028450:MOV qword ptr [RBP + -0x498],RAX
END_OF_LINE
----------------------------------------------
512: Start._4_4_ = probe_tm.tm_min;
	00028450:MOV qword ptr [RBP + -0x498],RAX
END_OF_LINE
----------------------------------------------
514: if (pc.parse_datetime_debug != false) {
	0002845e:TEST AL,AL
	00028460:JZ 0x000284b6
END_OF_LINE
----------------------------------------------
515: pcVar12 = debug_strfdatetime(&tm,&pc,dbg_tm,100);
	00028470:LEA RDX,[RBP + -0x170]
	00028477:LEA RSI,[RBP + -0x2c0]
	0002847e:LEA RAX,[RBP + -0x400]
	00028485:MOV ECX,0x64
	0002848a:MOV RDI,RAX
	0002848d:CALL 0x00026748
END_OF_LINE
----------------------------------------------
516: dbg_printf("\'%s\' = %ld epoch-seconds\n",pcVar12,Start);
	000284b1:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
518: lVar15 = (pc.seconds.tv_nsec + pc.rel.ns) % 1000000000 + 1000000000;
	000284ca:MOVSXD RDX,EAX
	000284cd:MOV RAX,qword ptr [RBP + -0x430]
	000284d4:ADD RAX,RDX
	000284d7:MOV qword ptr [RBP + -0x428],RAX
	000284de:MOV RCX,qword ptr [RBP + -0x428]
	000284e5:MOV RDX,0x112e0be826d694b3
	000284ef:MOV RAX,RCX
	000284f2:IMUL RDX
	000284f5:MOV RAX,RDX
	000284f8:SAR RAX,0x1a
	000284fc:MOV RDX,RCX
	000284ff:SAR RDX,0x3f
	00028503:SUB RAX,RDX
	00028506:IMUL RDX,RAX,0x3b9aca00
	0002850d:MOV RAX,RCX
	00028510:SUB RAX,RDX
	00028513:LEA RCX,[RAX + 0x3b9aca00]
END_OF_LINE
----------------------------------------------
519: iVar7 = (int)lVar15 + (int)(lVar15 / 1000000000) * -1000000000;
	0002852d:SAR RAX,0x1a
	00028531:MOV RDX,RCX
	00028534:SAR RDX,0x3f
	00028538:SUB RAX,RDX
	0002853b:IMUL RDX,RAX,0x3b9aca00
	00028542:MOV RAX,RCX
	00028545:SUB RAX,RDX
	00028548:MOV dword ptr [RBP + -0x4d4],EAX
END_OF_LINE
----------------------------------------------
520: lVar15 = pc.rel.hour * 0xe10;
	00028597:IMUL RAX,RAX,0xe10
END_OF_LINE
----------------------------------------------
521: if (((((SEXT816(lVar15) != SEXT816(pc.rel.hour) * SEXT416(0xe10)) || (SCARRY8(Start,lVar15))) ||
	00028597:IMUL RAX,RAX,0xe10
	0002859e:JNO 0x000285a5
	000285a0:MOV EDX,0x1
	000285a5:MOV qword ptr [RBP + -0x4c8],RAX
	000285ac:MOV RAX,RDX
	000285af:AND EAX,0x1
	000285b2:TEST AL,AL
	000285b4:JNZ 0x000286b6
	000285ba:MOV RDX,qword ptr [RBP + -0x4c8]
	000285c1:MOV ECX,0x0
	000285c6:MOV RAX,qword ptr [RBP + -0x498]
	000285cd:ADD RAX,RDX
	000285d0:JNO 0x000285d7
	000285d2:MOV ECX,0x1
	000285d7:MOV qword ptr [RBP + -0x4c0],RAX
	000285de:MOV RAX,RCX
	000285e1:AND EAX,0x1
	000285e4:TEST AL,AL
	000285e6:JNZ 0x000286b6
	000285ec:MOV RAX,qword ptr [RBP + -0x238]
	000285f3:MOV EDX,0x0
	000285f8:IMUL RAX,RAX,0x3c
	000285fc:JNO 0x00028603
	000285fe:MOV EDX,0x1
	00028603:MOV qword ptr [RBP + -0x4b8],RAX
	0002860a:MOV RAX,RDX
	0002860d:AND EAX,0x1
	00028610:TEST AL,AL
	00028612:JNZ 0x000286b6
	00028618:MOV RDX,qword ptr [RBP + -0x4c0]
	0002861f:MOV RAX,qword ptr [RBP + -0x4b8]
	00028626:MOV ECX,0x0
	0002862b:ADD RAX,RDX
	0002862e:JNO 0x00028635
	00028630:MOV ECX,0x1
	00028635:MOV qword ptr [RBP + -0x4b0],RAX
	0002863c:MOV RAX,RCX
	0002863f:AND EAX,0x1
	00028642:TEST AL,AL
	00028644:JNZ 0x000286b6
	00028646:MOV RDX,qword ptr [RBP + -0x4b0]
	0002864d:MOV RAX,qword ptr [RBP + -0x230]
	00028654:MOV ECX,0x0
	00028659:ADD RAX,RDX
	0002865c:JNO 0x00028663
	0002865e:MOV ECX,0x1
	00028663:MOV qword ptr [RBP + -0x4a8],RAX
	0002866a:MOV RAX,RCX
	0002866d:AND EAX,0x1
	00028670:TEST AL,AL
	00028672:JNZ 0x000286b6
	00028674:MOV RDX,qword ptr [RBP + -0x4a8]
	0002867b:MOV EAX,dword ptr [RBP + -0x4d0]
	00028681:CDQE
	00028683:MOV ECX,0x0
	00028688:ADD RAX,RDX
	0002868b:JNO 0x00028692
	0002868d:MOV ECX,0x1
	00028692:MOV qword ptr [RBP + -0x340],RAX
	00028699:MOV RAX,RCX
	0002869c:AND EAX,0x1
	0002869f:TEST AL,AL
	000286a1:JNZ 0x000286b6
	000286a3:MOV RAX,qword ptr [RBP + -0x340]
	000286aa:MOV RDI,RAX
	000286ad:CALL 0x000222c3
	000286b2:TEST AL,AL
	000286b4:JZ 0x000286de
END_OF_LINE
----------------------------------------------
522: (lVar16 = pc.rel.minutes * 0x3c, SEXT816(lVar16) != SEXT816(pc.rel.minutes) * SEXT816(0x3c)
	000285f8:IMUL RAX,RAX,0x3c
END_OF_LINE
----------------------------------------------
523: )) || ((lVar17 = lVar16 + Start + lVar15, SCARRY8(lVar16,Start + lVar15) ||
	000285cd:ADD RAX,RDX
	000285d0:JNO 0x000285d7
	000285d2:MOV ECX,0x1
	000285d7:MOV qword ptr [RBP + -0x4c0],RAX
	000285de:MOV RAX,RCX
	000285e1:AND EAX,0x1
	000285e4:TEST AL,AL
	000285e6:JNZ 0x000286b6
	000285ec:MOV RAX,qword ptr [RBP + -0x238]
	000285f3:MOV EDX,0x0
	000285f8:IMUL RAX,RAX,0x3c
	000285fc:JNO 0x00028603
	000285fe:MOV EDX,0x1
	00028603:MOV qword ptr [RBP + -0x4b8],RAX
	0002860a:MOV RAX,RDX
	0002860d:AND EAX,0x1
	00028610:TEST AL,AL
	00028612:JNZ 0x000286b6
	00028618:MOV RDX,qword ptr [RBP + -0x4c0]
	0002861f:MOV RAX,qword ptr [RBP + -0x4b8]
	00028626:MOV ECX,0x0
	0002862b:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
524: (lVar15 = pc.rel.seconds + lVar17, SCARRY8(pc.rel.seconds,lVar17))))) ||
	00028659:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
525: ((lVar16 = (long)(int)(((pc.seconds.tv_nsec + pc.rel.ns) - (long)iVar7) / 1000000000),
	000284ca:MOVSXD RDX,EAX
	000284cd:MOV RAX,qword ptr [RBP + -0x430]
	000284d4:ADD RAX,RDX
	000284d7:MOV qword ptr [RBP + -0x428],RAX
	000284de:MOV RCX,qword ptr [RBP + -0x428]
	000284e5:MOV RDX,0x112e0be826d694b3
	000284ef:MOV RAX,RCX
	000284f2:IMUL RDX
	000284f5:MOV RAX,RDX
	000284f8:SAR RAX,0x1a
	000284fc:MOV RDX,RCX
	000284ff:SAR RDX,0x3f
	00028503:SUB RAX,RDX
	00028506:IMUL RDX,RAX,0x3b9aca00
	0002850d:MOV RAX,RCX
	00028510:SUB RAX,RDX
	00028513:LEA RCX,[RAX + 0x3b9aca00]
	0002851a:MOV RDX,0x112e0be826d694b3
	00028524:MOV RAX,RCX
	00028527:IMUL RDX
	0002852a:MOV RAX,RDX
	0002852d:SAR RAX,0x1a
	00028531:MOV RDX,RCX
	00028534:SAR RDX,0x3f
	00028538:SUB RAX,RDX
	0002853b:IMUL RDX,RAX,0x3b9aca00
	00028542:MOV RAX,RCX
	00028545:SUB RAX,RDX
	00028548:MOV dword ptr [RBP + -0x4d4],EAX
	0002854e:MOV EAX,dword ptr [RBP + -0x4d4]
	00028554:MOVSXD RDX,EAX
	00028557:MOV RAX,qword ptr [RBP + -0x428]
	0002855e:SUB RAX,RDX
	00028561:MOV RCX,RAX
	00028564:MOV RDX,0x112e0be826d694b3
	0002856e:MOV RAX,RCX
	00028571:IMUL RDX
	00028574:MOV RAX,RDX
	00028577:SAR RAX,0x1a
	0002857b:SAR RCX,0x3f
	0002857f:MOV RDX,RCX
	00028582:SUB RAX,RDX
	00028585:MOV dword ptr [RBP + -0x4d0],EAX
	0002858b:MOV RAX,qword ptr [RBP + -0x240]
	00028592:MOV EDX,0x0
	00028597:IMUL RAX,RAX,0xe10
	0002859e:JNO 0x000285a5
	000285a0:MOV EDX,0x1
	000285a5:MOV qword ptr [RBP + -0x4c8],RAX
	000285ac:MOV RAX,RDX
	000285af:AND EAX,0x1
	000285b2:TEST AL,AL
	000285b4:JNZ 0x000286b6
	000285ba:MOV RDX,qword ptr [RBP + -0x4c8]
	000285c1:MOV ECX,0x0
	000285c6:MOV RAX,qword ptr [RBP + -0x498]
	000285cd:ADD RAX,RDX
	000285d0:JNO 0x000285d7
	000285d2:MOV ECX,0x1
	000285d7:MOV qword ptr [RBP + -0x4c0],RAX
	000285de:MOV RAX,RCX
	000285e1:AND EAX,0x1
	000285e4:TEST AL,AL
	000285e6:JNZ 0x000286b6
	000285ec:MOV RAX,qword ptr [RBP + -0x238]
	000285f3:MOV EDX,0x0
	000285f8:IMUL RAX,RAX,0x3c
	000285fc:JNO 0x00028603
	000285fe:MOV EDX,0x1
	00028603:MOV qword ptr [RBP + -0x4b8],RAX
	0002860a:MOV RAX,RDX
	0002860d:AND EAX,0x1
	00028610:TEST AL,AL
	00028612:JNZ 0x000286b6
	00028618:MOV RDX,qword ptr [RBP + -0x4c0]
	0002861f:MOV RAX,qword ptr [RBP + -0x4b8]
	00028626:MOV ECX,0x0
	0002862b:ADD RAX,RDX
	0002862e:JNO 0x00028635
	00028630:MOV ECX,0x1
	00028635:MOV qword ptr [RBP + -0x4b0],RAX
	0002863c:MOV RAX,RCX
	0002863f:AND EAX,0x1
	00028642:TEST AL,AL
	00028644:JNZ 0x000286b6
	00028646:MOV RDX,qword ptr [RBP + -0x4b0]
	0002864d:MOV RAX,qword ptr [RBP + -0x230]
	00028654:MOV ECX,0x0
	00028659:ADD RAX,RDX
	0002865c:JNO 0x00028663
	0002865e:MOV ECX,0x1
	00028663:MOV qword ptr [RBP + -0x4a8],RAX
	0002866a:MOV RAX,RCX
	0002866d:AND EAX,0x1
	00028670:TEST AL,AL
	00028672:JNZ 0x000286b6
	00028674:MOV RDX,qword ptr [RBP + -0x4a8]
	0002867b:MOV EAX,dword ptr [RBP + -0x4d0]
	00028681:CDQE
END_OF_LINE
----------------------------------------------
526: probe = lVar16 + lVar15, SCARRY8(lVar16,lVar15) || (_Var6 = time_overflow(probe), _Var6))))
	00028688:ADD RAX,RDX
	0002868b:JNO 0x00028692
	0002868d:MOV ECX,0x1
	00028692:MOV qword ptr [RBP + -0x340],RAX
	00028699:MOV RAX,RCX
	0002869c:AND EAX,0x1
	0002869f:TEST AL,AL
	000286a1:JNZ 0x000286b6
	000286a3:MOV RAX,qword ptr [RBP + -0x340]
	000286aa:MOV RDI,RAX
	000286ad:CALL 0x000222c3
	000286b2:TEST AL,AL
	000286b4:JZ 0x000286de
END_OF_LINE
----------------------------------------------
528: if (pc.parse_datetime_debug != false) {
	000286bd:TEST AL,AL
	000286bf:JZ 0x00028a17
END_OF_LINE
----------------------------------------------
529: dbg_printf("error: adding relative time caused an overflow\n");
	000286d4:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
531: goto LAB_00028a18;
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
533: result->tv_sec = probe;
	000286ec:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
534: result->tv_nsec = (long)iVar7;
	000286f5:MOVSXD RDX,EAX
	000286f8:MOV RAX,qword ptr [RBP + -0x4f8]
	000286ff:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
535: if ((pc.parse_datetime_debug != false) &&
	0002870a:TEST AL,AL
	0002870c:JZ 0x000287e8
	00028712:MOV RDX,qword ptr [RBP + -0x240]
	00028719:MOV RAX,qword ptr [RBP + -0x238]
	00028720:OR RDX,RAX
	00028723:MOV RAX,qword ptr [RBP + -0x230]
	0002872a:OR RDX,RAX
	0002872d:MOV EAX,dword ptr [RBP + -0x228]
	00028733:CDQE
	00028735:OR RAX,RDX
	00028738:TEST RAX,RAX
	0002873b:JZ 0x000287e8
END_OF_LINE
----------------------------------------------
536: (((long)pc.rel.ns | pc.rel.hour | pc.rel.minutes | pc.rel.seconds) != 0)) {
	00028720:OR RDX,RAX
	00028723:MOV RAX,qword ptr [RBP + -0x230]
	0002872a:OR RDX,RAX
	0002872d:MOV EAX,dword ptr [RBP + -0x228]
	00028733:CDQE
	00028735:OR RAX,RDX
	00028738:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
537: dbg_printf("after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\n",
	00028771:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
538: pc.rel.hour,pc.rel.minutes,pc.rel.seconds,pc.rel._48_8_ & 0xffffffff);
	0002875c:MOV R8D,ESI
	0002875f:MOV RSI,RAX
	00028762:LEA RAX,[0x35a10]
	00028769:MOV RDI,RAX
	0002876c:MOV EAX,0x0
	00028771:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
539: dbg_printf("    new time = %ld epoch-seconds\n",probe);
	0002878f:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
540: if ((tm.tm_isdst != -1) &&
	0002879a:CMP EAX,-0x1
	0002879d:JZ 0x000287e8
	0002879f:MOV RCX,qword ptr [RBP + -0x4f8]
	000287a6:LEA RDX,[RBP + -0x300]
	000287ad:MOV RAX,qword ptr [RBP + -0x490]
	000287b4:MOV RSI,RCX
	000287b7:MOV RDI,RAX
	000287ba:CALL 0x0002cb90
	000287bf:TEST RAX,RAX
	000287c2:JZ 0x000287e8
	000287c4:MOV EDX,dword ptr [RBP + -0x3e0]
	000287ca:MOV EAX,dword ptr [RBP + -0x2e0]
	000287d0:CMP EDX,EAX
	000287d2:JZ 0x000287e8
END_OF_LINE
----------------------------------------------
541: ((ptVar11 = localtime_rz(tz,&result->tv_sec,&probe_tm), ptVar11 != (tm *)0x0 &&
	000287a6:LEA RDX,[RBP + -0x300]
	000287ad:MOV RAX,qword ptr [RBP + -0x490]
	000287b4:MOV RSI,RCX
	000287b7:MOV RDI,RAX
	000287ba:CALL 0x0002cb90
	000287bf:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
542: (tm.tm_isdst != probe_tm.tm_isdst)))) {
	000287d0:CMP EDX,EAX
END_OF_LINE
----------------------------------------------
543: dbg_printf("warning: daylight saving time changed after time adjustment\n");
	000287e3:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
548: result->tv_sec = pc.seconds.tv_sec;
	00027663:MOV qword ptr [RCX],RAX
END_OF_LINE
----------------------------------------------
549: result->tv_nsec = pc.seconds.tv_nsec;
	00027666:MOV qword ptr [RCX + 0x8],RDX
END_OF_LINE
----------------------------------------------
551: if (pc.parse_datetime_debug != false) {
	000287ef:TEST AL,AL
	000287f1:JZ 0x000289ea
END_OF_LINE
----------------------------------------------
552: if (tzstring_local == (char *)0x0) {
	000287f7:CMP qword ptr [RBP + -0x520],0x0
	000287ff:JNZ 0x00028817
END_OF_LINE
----------------------------------------------
553: dbg_printf("timezone: system default\n");
	00028810:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
556: iVar7 = strcmp(tzstring_local,"UTC0");
	0002882b:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
557: if (iVar7 == 0) {
	00028830:TEST EAX,EAX
	00028832:JNZ 0x0002884a
END_OF_LINE
----------------------------------------------
558: dbg_printf("timezone: Universal Time\n");
	00028843:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
561: dbg_printf("timezone: TZ=\"%s\" environment value\n",tzstring_local);
	00028863:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
564: dbg_printf("final: %ld.%09d (epoch-seconds)\n",result->tv_sec,result->tv_nsec & 0xffffffff);
	0002886f:MOV RAX,qword ptr [RAX]
	00028872:MOV qword ptr [RBP + -0x420],RAX
	00028879:MOV RAX,qword ptr [RBP + -0x4f8]
	00028880:MOV RAX,qword ptr [RAX + 0x8]
	00028884:MOV dword ptr [RBP + -0x4cc],EAX
	0002888a:MOV EDX,dword ptr [RBP + -0x4cc]
	00028890:MOV RAX,qword ptr [RBP + -0x420]
	00028897:MOV RSI,RAX
	0002889a:LEA RAX,[0x35b28]
	000288a1:MOV RDI,RAX
	000288a4:MOV EAX,0x0
	000288a9:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
565: ptVar18 = gmtime_r(&result->tv_sec,(tm *)&probe);
	000288b5:LEA RDX,[RBP + -0x340]
	000288bc:MOV RSI,RDX
	000288bf:MOV RDI,RAX
	000288c2:CALL 0x00005bb0
END_OF_LINE
----------------------------------------------
566: if (ptVar18 != (tm *)0x0) {
	000288c7:TEST RAX,RAX
	000288ca:SETNZ AL
	000288cd:MOV byte ptr [RBP + -0x4de],AL
	000288d3:CMP byte ptr [RBP + -0x4de],0x0
	000288da:JZ 0x00028913
END_OF_LINE
----------------------------------------------
567: pcVar12 = debug_strfdatetime((tm *)&probe,(parser_control *)0x0,dbg_tm,100);
	000288dc:LEA RDX,[RBP + -0x170]
	000288e3:LEA RAX,[RBP + -0x340]
	000288ea:MOV ECX,0x64
	000288ef:MOV ESI,0x0
	000288f4:MOV RDI,RAX
	000288f7:CALL 0x00026748
END_OF_LINE
----------------------------------------------
568: dbg_printf("final: %s (UTC)\n",pcVar12);
	0002890e:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
570: ptVar11 = localtime_rz(tz,&result->tv_sec,&probe_tm);
	0002891a:LEA RDX,[RBP + -0x300]
	00028921:MOV RAX,qword ptr [RBP + -0x490]
	00028928:MOV RSI,RCX
	0002892b:MOV RDI,RAX
	0002892e:CALL 0x0002cb90
END_OF_LINE
----------------------------------------------
571: if (ptVar11 != (tm *)0x0) {
	00028933:TEST RAX,RAX
	00028936:JZ 0x000289ea
END_OF_LINE
----------------------------------------------
572: pcVar12 = time_zone_str((int)probe_tm.tm_gmtoff,time_zone_buf);
	00028963:LEA RAX,[RBP + -0x190]
	0002896a:MOV RSI,RAX
	0002896d:MOV EDI,EDX
	0002896f:CALL 0x00022b0a
END_OF_LINE
----------------------------------------------
573: pcVar19 = debug_strfdatetime(&probe_tm,(parser_control *)0x0,dbg_tm,100);
	00028977:LEA RDX,[RBP + -0x170]
	0002897e:LEA RAX,[RBP + -0x300]
	00028985:MOV ECX,0x64
	0002898a:MOV ESI,0x0
	0002898f:MOV RDI,RAX
	00028992:CALL 0x00026748
END_OF_LINE
----------------------------------------------
574: dbg_printf("final: %s (UTC%s)\n",pcVar19,pcVar12);
	000289ac:CALL 0x000222e9
END_OF_LINE
----------------------------------------------
577: ok = true;
	000289ea:MOV byte ptr [RBP + -0x4e3],0x1
END_OF_LINE
----------------------------------------------
578: LAB_00028a18:
	00028a18:MOV RAX,qword ptr [RBP + -0x490]
END_OF_LINE
----------------------------------------------
579: if (tz != tzdefault) {
	00028a1f:CMP RAX,qword ptr [RBP + -0x518]
	00028a26:JZ 0x00028a37
END_OF_LINE
----------------------------------------------
580: tzfree(tz);
	00028a32:CALL 0x0002c969
END_OF_LINE
----------------------------------------------
582: free(tz1alloc);
	00028a41:CALL 0x00005860
END_OF_LINE
----------------------------------------------
583: if (lVar3 != *(long *)(in_FS_OFFSET + 0x28)) {
	00028a51:SUB RDX,qword ptr FS:[0x28]
	00028a5a:JZ 0x00028a61
END_OF_LINE
----------------------------------------------
585: __stack_chk_fail();
	00028a5c:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
587: return ok;
	00028a6b:RET
END_OF_LINE
----------------------------------------------
588: LAB_0002703a:
	0002703a:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
589: s = s + 1;
	0002703a:ADD qword ptr [RBP + -0x480],0x1
END_OF_LINE
----------------------------------------------
590: tzsize = tzsize + 1;
	00027042:ADD qword ptr [RBP + -0x488],0x1
END_OF_LINE
----------------------------------------------
591: goto LAB_0002704a;
	0002704a:MOV RAX,qword ptr [RBP + -0x480]
END_OF_LINE



Function: set_program_name
----------------------------------------------
12: if (argv0 != (char *)0x0) {
	00028a7c:CMP qword ptr [RBP + -0x18],0x0
	00028a81:JNZ 0x00028aae
END_OF_LINE
----------------------------------------------
13: pcVar2 = strrchr(argv0,0x2f);
	00028aba:CALL 0x00005ba0
END_OF_LINE
----------------------------------------------
14: __s1 = argv0;
	00028ac8:JZ 0x00028ad4
END_OF_LINE
----------------------------------------------
15: if (pcVar2 != (char *)0x0) {
	00028ac3:CMP qword ptr [RBP + -0x10],0x0
	00028ac8:JZ 0x00028ad4
END_OF_LINE
----------------------------------------------
16: __s1 = pcVar2 + 1;
	00028ace:ADD RAX,0x1
	00028ad2:JMP 0x00028ad8
END_OF_LINE
----------------------------------------------
18: argv0_local = argv0;
	00028ae8:JLE 0x00028b4e
END_OF_LINE
----------------------------------------------
19: if (((6 < (long)__s1 - (long)argv0) &&
	00028ae0:SUB RAX,qword ptr [RBP + -0x18]
	00028ae4:CMP RAX,0x6
	00028ae8:JLE 0x00028b4e
	00028aea:MOV RAX,qword ptr [RBP + -0x8]
	00028aee:SUB RAX,0x7
	00028af2:MOV EDX,0x7
	00028af7:LEA RCX,[0x35c98]
	00028afe:MOV RSI,RCX
	00028b01:MOV RDI,RAX
	00028b04:CALL 0x00005920
	00028b09:TEST EAX,EAX
	00028b0b:JNZ 0x00028b4e
	00028b0d:MOV RAX,qword ptr [RBP + -0x8]
	00028b11:MOV qword ptr [RBP + -0x18],RAX
	00028b15:MOV RAX,qword ptr [RBP + -0x8]
	00028b19:MOV EDX,0x3
	00028b1e:LEA RCX,[0x35ca0]
	00028b25:MOV RSI,RCX
	00028b28:MOV RDI,RAX
	00028b2b:CALL 0x00005920
	00028b30:TEST EAX,EAX
	00028b32:JNZ 0x00028b4e
END_OF_LINE
----------------------------------------------
20: (iVar1 = strncmp(__s1 + -7,"/.libs/",7), argv0_local = argv0, iVar1 == 0)) &&
	00028aee:SUB RAX,0x7
	00028af2:MOV EDX,0x7
	00028af7:LEA RCX,[0x35c98]
	00028afe:MOV RSI,RCX
	00028b01:MOV RDI,RAX
	00028b04:CALL 0x00005920
	00028b09:TEST EAX,EAX
	00028b0b:JNZ 0x00028b4e
END_OF_LINE
----------------------------------------------
21: (iVar1 = strncmp(__s1,"lt-",3), argv0_local = __s1, iVar1 == 0)) {
	00028b2b:CALL 0x00005920
	00028b30:TEST EAX,EAX
	00028b32:JNZ 0x00028b4e
END_OF_LINE
----------------------------------------------
22: pcRam0000000000144450 = __s1 + 3;
	00028b38:ADD RAX,0x3
END_OF_LINE
----------------------------------------------
23: argv0_local = pcRam0000000000144450;
	00028b4b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
25: program_name = argv0_local;
	00028b59:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
26: pcRam00000000001442e0 = argv0_local;
	00028b67:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
27: return;
	00028b6c:RET
END_OF_LINE
----------------------------------------------
29: fwrite("A NULL argv[0] was passed through an exec system call.\n",1,0x37,pFRam0000000000144490);
	00028aa4:CALL 0x00006010
END_OF_LINE
----------------------------------------------
31: abort();
	00028aa9:CALL 0x000058f0
END_OF_LINE



Function: clone_quoting_options
----------------------------------------------
12: piVar2 = __errno_location();
	00028b7d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
13: iVar1 = *piVar2;
	00028b82:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
14: if (o == (quoting_options *)0x0) {
	00028b87:CMP qword ptr [RBP + -0x18],0x0
	00028b8c:JZ 0x00028b94
END_OF_LINE
----------------------------------------------
15: o = &default_quoting_options;
	00028b94:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
17: pqVar3 = (quoting_options *)xmemdup(o,0x38);
	00028ba3:CALL 0x0002bea9
END_OF_LINE
----------------------------------------------
18: piVar2 = __errno_location();
	00028bac:CALL 0x00005900
END_OF_LINE
----------------------------------------------
19: *piVar2 = iVar1;
	00028bb4:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
20: return pqVar3;
	00028bb6:MOV RAX,qword ptr [RBP + -0x8]
	00028bba:LEAVE
	00028bbb:RET
END_OF_LINE



Function: get_quoting_style
----------------------------------------------
7: if (o == (quoting_options *)0x0) {
	00028bc8:CMP qword ptr [RBP + -0x8],0x0
	00028bcd:JZ 0x00028bd5
END_OF_LINE
----------------------------------------------
8: o = &default_quoting_options;
	00028bd5:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
10: return o->style;
	00028bdc:MOV EAX,dword ptr [RAX]
	00028bde:POP RBP
	00028bdf:RET
END_OF_LINE



Function: set_quoting_style
----------------------------------------------
8: if (o == (quoting_options *)0x0) {
	00028bef:CMP qword ptr [RBP + -0x8],0x0
	00028bf4:JZ 0x00028bfc
END_OF_LINE
----------------------------------------------
9: o = &default_quoting_options;
	00028bfc:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
11: o->style = s;
	00028c06:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
12: return;
	00028c0a:RET
END_OF_LINE



Function: set_char_quoting
----------------------------------------------
15: if (o == (quoting_options *)0x0) {
	00028c26:CMP qword ptr [RBP + -0x28],0x0
	00028c2b:JZ 0x00028c33
END_OF_LINE
----------------------------------------------
16: o = &default_quoting_options;
	00028c33:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
18: puVar2 = o->quote_these_too + ((byte)c >> 5);
	00028c42:SHR AL,0x5
	00028c45:MOVZX EAX,AL
	00028c48:SHL RAX,0x2
	00028c4c:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
19: wVar1 = *puVar2 >> (c & 0x1fU) & 1;
	00028c57:AND EAX,0x1f
	00028c5a:MOV dword ptr [RBP + -0x10],EAX
	00028c5d:MOV RAX,qword ptr [RBP + -0x8]
	00028c61:MOV EDX,dword ptr [RAX]
	00028c63:MOV EAX,dword ptr [RBP + -0x10]
	00028c66:MOV ECX,EAX
	00028c68:SHR EDX,CL
	00028c6a:MOV EAX,EDX
	00028c6c:AND EAX,0x1
END_OF_LINE
----------------------------------------------
20: *puVar2 = *puVar2 ^ (i & 1U ^ wVar1) << (c & 0x1fU);
	00028c57:AND EAX,0x1f
	00028c5a:MOV dword ptr [RBP + -0x10],EAX
	00028c5d:MOV RAX,qword ptr [RBP + -0x8]
	00028c61:MOV EDX,dword ptr [RAX]
	00028c63:MOV EAX,dword ptr [RBP + -0x10]
	00028c66:MOV ECX,EAX
	00028c68:SHR EDX,CL
	00028c6a:MOV EAX,EDX
	00028c6c:AND EAX,0x1
	00028c6f:MOV dword ptr [RBP + -0xc],EAX
	00028c72:MOV RAX,qword ptr [RBP + -0x8]
	00028c76:MOV ESI,dword ptr [RAX]
	00028c78:MOV EAX,dword ptr [RBP + -0x30]
	00028c7b:AND EAX,0x1
	00028c7e:XOR EAX,dword ptr [RBP + -0xc]
	00028c81:MOV EDX,EAX
	00028c83:MOV EAX,dword ptr [RBP + -0x10]
	00028c86:MOV ECX,EAX
	00028c88:SHL EDX,CL
	00028c8a:MOV EAX,EDX
	00028c8c:XOR ESI,EAX
	00028c8e:MOV EDX,ESI
	00028c90:MOV RAX,qword ptr [RBP + -0x8]
	00028c94:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
21: return wVar1;
	00028c9a:RET
END_OF_LINE



Function: set_quoting_flags
----------------------------------------------
10: o_local = o;
	00028caf:JNZ 0x00028cbc
END_OF_LINE
----------------------------------------------
11: if (o == (quoting_options *)0x0) {
	00028caa:CMP qword ptr [RBP + -0x18],0x0
	00028caf:JNZ 0x00028cbc
END_OF_LINE
----------------------------------------------
12: o_local = &default_quoting_options;
	00028cb8:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
14: wVar1 = o_local->flags;
	00028cc0:MOV EAX,dword ptr [RAX + 0x4]
END_OF_LINE
----------------------------------------------
15: o_local->flags = i;
	00028ccd:MOV dword ptr [RAX + 0x4],EDX
END_OF_LINE
----------------------------------------------
16: return wVar1;
	00028cd4:RET
END_OF_LINE



Function: set_custom_quoting
----------------------------------------------
9: o_local = o;
	00028cf2:JNZ 0x00028cff
END_OF_LINE
----------------------------------------------
10: if (o == (quoting_options *)0x0) {
	00028ced:CMP qword ptr [RBP + -0x8],0x0
	00028cf2:JNZ 0x00028cff
END_OF_LINE
----------------------------------------------
11: o_local = &default_quoting_options;
	00028cfb:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
13: o_local->style = custom_quoting_style;
	00028d03:MOV dword ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
14: if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {
	00028d09:CMP qword ptr [RBP + -0x10],0x0
	00028d0e:JZ 0x00028d17
	00028d10:CMP qword ptr [RBP + -0x18],0x0
	00028d15:JNZ 0x00028d1c
END_OF_LINE
----------------------------------------------
15: o_local->left_quote = left_quote;
	00028d24:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
16: o_local->right_quote = right_quote;
	00028d30:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
17: return;
	00028d36:RET
END_OF_LINE
----------------------------------------------
20: abort();
	00028d17:CALL 0x000058f0
END_OF_LINE



Function: quoting_options_from_style
----------------------------------------------
11: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00028d4b:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
12: if (style == custom_quoting_style) {
	00028d92:CMP dword ptr [RBP + -0x5c],0xa
	00028d96:JNZ 0x00028d9d
END_OF_LINE
----------------------------------------------
14: abort();
	00028d98:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
16: o.flags = L'\0';
	00028da0:MOV dword ptr [RBP + -0x50],EAX
END_OF_LINE
----------------------------------------------
17: o.style = style;
	00028da0:MOV dword ptr [RBP + -0x50],EAX
END_OF_LINE
----------------------------------------------
18: __return_storage_ptr__->style = o.style;
	00028daf:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
19: __return_storage_ptr__->flags = o.flags;
	00028daf:MOV qword ptr [RAX],RCX
END_OF_LINE
----------------------------------------------
20: *(undefined8 *)__return_storage_ptr__->quote_these_too = 0;
	00028db2:MOV qword ptr [RAX + 0x8],RBX
END_OF_LINE
----------------------------------------------
21: *(undefined8 *)(__return_storage_ptr__->quote_these_too + 2) = 0;
	00028dbe:MOV qword ptr [RAX + 0x10],RCX
END_OF_LINE
----------------------------------------------
22: *(undefined8 *)(__return_storage_ptr__->quote_these_too + 4) = 0;
	00028dc2:MOV qword ptr [RAX + 0x18],RBX
END_OF_LINE
----------------------------------------------
23: *(undefined8 *)(__return_storage_ptr__->quote_these_too + 6) = 0;
	00028dce:MOV qword ptr [RAX + 0x20],RCX
END_OF_LINE
----------------------------------------------
24: __return_storage_ptr__->left_quote = (char *)0x0;
	00028dd2:MOV qword ptr [RAX + 0x28],RBX
END_OF_LINE
----------------------------------------------
25: __return_storage_ptr__->right_quote = (char *)0x0;
	00028dda:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
26: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00028de2:SUB RAX,qword ptr FS:[0x28]
	00028deb:JZ 0x00028df2
END_OF_LINE
----------------------------------------------
28: __stack_chk_fail();
	00028ded:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
30: return __return_storage_ptr__;
	00028df2:MOV RAX,qword ptr [RBP + -0x58]
	00028df6:MOV RBX,qword ptr [RBP + -0x8]
	00028dfa:LEAVE
	00028dfb:RET
END_OF_LINE



Function: gettext_quote
----------------------------------------------
14: pcVar2 = locale_charset();
	00028e2a:CALL 0x0002d7f4
END_OF_LINE
----------------------------------------------
15: iVar1 = c_strcasecmp(pcVar2,"UTF-8");
	00028e44:CALL 0x0002d1ee
END_OF_LINE
----------------------------------------------
16: if (iVar1 == 0) {
	00028e49:TEST EAX,EAX
	00028e4b:JNZ 0x00028e6a
END_OF_LINE
----------------------------------------------
17: if (*msgid == '`') {
	00028e51:MOVZX EAX,byte ptr [RAX]
	00028e54:CMP AL,0x60
	00028e56:JNZ 0x00028e61
END_OF_LINE
----------------------------------------------
18: pcVar2 = &DAT_00035d4e;
	00028e58:LEA RAX,[0x35d4e]
END_OF_LINE
----------------------------------------------
21: pcVar2 = &DAT_00035d52;
	00028e61:LEA RAX,[0x35d52]
END_OF_LINE
----------------------------------------------
25: iVar1 = c_strcasecmp(pcVar2,"GB18030");
	00028e7b:CALL 0x0002d1ee
END_OF_LINE
----------------------------------------------
26: if (iVar1 == 0) {
	00028e80:TEST EAX,EAX
	00028e82:JNZ 0x00028ea1
END_OF_LINE
----------------------------------------------
27: if (*msgid == '`') {
	00028e88:MOVZX EAX,byte ptr [RAX]
	00028e8b:CMP AL,0x60
	00028e8d:JNZ 0x00028e98
END_OF_LINE
----------------------------------------------
28: pcVar2 = &DAT_00035d5e;
	00028e8f:LEA RAX,[0x35d5e]
END_OF_LINE
----------------------------------------------
31: pcVar2 = &DAT_00035d62;
	00028e98:LEA RAX,[0x35d62]
END_OF_LINE
----------------------------------------------
34: else if (s == clocale_quoting_style) {
	00028ea1:CMP dword ptr [RBP + -0x1c],0x9
	00028ea5:JNZ 0x00028eb0
END_OF_LINE
----------------------------------------------
35: pcVar2 = "\"";
	00028ea7:LEA RAX,[0x35d65]
END_OF_LINE
----------------------------------------------
38: pcVar2 = "\'";
	00028eb0:LEA RAX,[0x35d67]
END_OF_LINE
----------------------------------------------
41: return pcVar2;
	00028eb8:RET
END_OF_LINE



Function: quotearg_buffer_restyled
----------------------------------------------
59: left_quote_local = left_quote;
	00028f02:MOV qword ptr [RBP + -0xb8],RAX
END_OF_LINE
----------------------------------------------
60: right_quote_local = right_quote;
	00028f0d:MOV qword ptr [RBP + -0xc0],RAX
END_OF_LINE
----------------------------------------------
61: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00028f14:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
62: len = 0;
	00028f23:MOV qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
63: orig_buffersize = 0;
	00028f2b:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
64: quote_string = (char *)0x0;
	00028f33:MOV qword ptr [RBP + -0x50],0x0
END_OF_LINE
----------------------------------------------
65: quote_string_len = 0;
	00028f3b:MOV qword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
66: bVar2 = false;
	00028f43:MOV byte ptr [RBP + -0x78],0x0
END_OF_LINE
----------------------------------------------
67: sVar9 = __ctype_get_mb_cur_max();
	00028f47:CALL 0x00005ac0
END_OF_LINE
----------------------------------------------
68: bVar13 = (flags & 2U) != 0;
	00028f5c:AND EAX,0x2
	00028f5f:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
69: bVar3 = false;
	00028f67:MOV byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
70: bVar6 = false;
	00028f6b:MOV byte ptr [RBP + -0x75],0x0
END_OF_LINE
----------------------------------------------
71: bVar7 = true;
	00028f6f:MOV byte ptr [RBP + -0x74],0x1
END_OF_LINE
----------------------------------------------
72: quoting_style_local = quoting_style;
	00028f6f:MOV byte ptr [RBP + -0x74],0x1
END_OF_LINE
----------------------------------------------
73: argsize_local = argsize;
	00028f6f:MOV byte ptr [RBP + -0x74],0x1
END_OF_LINE
----------------------------------------------
74: buffersize_local = buffersize;
	00028f6f:MOV byte ptr [RBP + -0x74],0x1
END_OF_LINE
----------------------------------------------
75: LAB_00028f73:
	00028f73:CMP dword ptr [RBP + -0xa4],0xa
END_OF_LINE
----------------------------------------------
76: switch(quoting_style_local) {
	00028fa4:JMP RAX
END_OF_LINE
----------------------------------------------
77: case literal_quoting_style:
	00029127:MOV byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
78: bVar13 = false;
	00029127:MOV byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
80: case shell_escape_quoting_style:
	000290c3:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
81: bVar2 = true;
	000290c3:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
82: case shell_quoting_style:
	000290c7:MOV byte ptr [RBP + -0x77],0x1
END_OF_LINE
----------------------------------------------
83: bVar13 = true;
	000290c7:MOV byte ptr [RBP + -0x77],0x1
END_OF_LINE
----------------------------------------------
84: case shell_escape_always_quoting_style:
	000290cb:MOVZX EAX,byte ptr [RBP + -0x77]
END_OF_LINE
----------------------------------------------
85: if (!bVar13) {
	000290d2:TEST AL,AL
	000290d4:JZ 0x000290da
END_OF_LINE
----------------------------------------------
86: bVar2 = true;
	000290d6:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
88: case shell_always_quoting_style:
	000290da:MOV dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
89: quoting_style_local = shell_always_quoting_style;
	000290da:MOV dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
90: if (!bVar13) {
	000290eb:TEST AL,AL
	000290ed:JZ 0x00029112
END_OF_LINE
----------------------------------------------
91: if (len < buffersize_local) {
	000290f3:CMP RAX,qword ptr [RBP + -0x90]
	000290fa:JNC 0x0002910d
END_OF_LINE
----------------------------------------------
92: buffer[len] = '\'';
	00029107:ADD RAX,RDX
	0002910a:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
94: len = len + 1;
	0002910d:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
96: quote_string = "\'";
	00029119:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
97: quote_string_len = 1;
	0002911d:MOV qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
99: case c_maybe_quoting_style:
	00028fa7:MOV dword ptr [RBP + -0xa4],0x5
END_OF_LINE
----------------------------------------------
100: quoting_style_local = c_quoting_style;
	00028fa7:MOV dword ptr [RBP + -0xa4],0x5
END_OF_LINE
----------------------------------------------
101: bVar13 = true;
	00028fb1:MOV byte ptr [RBP + -0x77],0x1
END_OF_LINE
----------------------------------------------
102: case c_quoting_style:
	00028fb5:MOVZX EAX,byte ptr [RBP + -0x77]
END_OF_LINE
----------------------------------------------
103: if (!bVar13) {
	00028fbc:TEST AL,AL
	00028fbe:JZ 0x00028fe3
END_OF_LINE
----------------------------------------------
104: if (len < buffersize_local) {
	00028fc4:CMP RAX,qword ptr [RBP + -0x90]
	00028fcb:JNC 0x00028fde
END_OF_LINE
----------------------------------------------
105: buffer[len] = '\"';
	00028fd8:ADD RAX,RDX
	00028fdb:MOV byte ptr [RAX],0x22
END_OF_LINE
----------------------------------------------
107: len = len + 1;
	00028fde:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
109: bVar2 = true;
	00028fe3:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
110: quote_string = "\"";
	00028fee:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
111: quote_string_len = 1;
	00028ff2:MOV qword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
113: case escape_quoting_style:
	00028fff:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
114: bVar2 = true;
	00028fff:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
115: bVar13 = false;
	00029003:MOV byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
117: case locale_quoting_style:
	0002900c:CMP dword ptr [RBP + -0xa4],0xa
END_OF_LINE
----------------------------------------------
118: case clocale_quoting_style:
	0002900c:CMP dword ptr [RBP + -0xa4],0xa
END_OF_LINE
----------------------------------------------
119: case custom_quoting_style:
	0002900c:CMP dword ptr [RBP + -0xa4],0xa
END_OF_LINE
----------------------------------------------
120: if (quoting_style_local != custom_quoting_style) {
	0002900c:CMP dword ptr [RBP + -0xa4],0xa
	00029013:JZ 0x00029051
END_OF_LINE
----------------------------------------------
121: left_quote_local = gettext_quote("`",quoting_style_local);
	00029027:CALL 0x00028dfc
END_OF_LINE
----------------------------------------------
122: right_quote_local = gettext_quote("\'",quoting_style_local);
	00029045:CALL 0x00028dfc
END_OF_LINE
----------------------------------------------
124: if (!bVar13) {
	00029058:TEST AL,AL
	0002905a:JZ 0x000290a2
END_OF_LINE
----------------------------------------------
125: for (quote_string = left_quote_local; *quote_string != '\0'; quote_string = quote_string + 1)
	00029063:MOV qword ptr [RBP + -0x50],RAX
	00029067:JMP 0x00029097
	00029069:MOV RAX,qword ptr [RBP + -0x60]
	0002906d:CMP RAX,qword ptr [RBP + -0x90]
	00029074:JNC 0x0002908d
	00029076:MOV RDX,qword ptr [RBP + -0x88]
	0002907d:MOV RAX,qword ptr [RBP + -0x60]
	00029081:ADD RDX,RAX
	00029084:MOV RAX,qword ptr [RBP + -0x50]
	00029088:MOVZX EAX,byte ptr [RAX]
	0002908b:MOV byte ptr [RDX],AL
	0002908d:ADD qword ptr [RBP + -0x60],0x1
	00029092:ADD qword ptr [RBP + -0x50],0x1
	00029097:MOV RAX,qword ptr [RBP + -0x50]
	0002909b:MOVZX EAX,byte ptr [RAX]
	0002909e:TEST AL,AL
	000290a0:JNZ 0x00029069
END_OF_LINE
----------------------------------------------
127: if (len < buffersize_local) {
	0002906d:CMP RAX,qword ptr [RBP + -0x90]
	00029074:JNC 0x0002908d
END_OF_LINE
----------------------------------------------
128: buffer[len] = *quote_string;
	00029081:ADD RDX,RAX
	00029084:MOV RAX,qword ptr [RBP + -0x50]
	00029088:MOVZX EAX,byte ptr [RAX]
	0002908b:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
130: len = len + 1;
	0002908d:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
133: bVar2 = true;
	000290a2:MOV byte ptr [RBP + -0x78],0x1
END_OF_LINE
----------------------------------------------
134: quote_string = right_quote_local;
	000290ad:MOV qword ptr [RBP + -0x50],RAX
END_OF_LINE
----------------------------------------------
135: quote_string_len = strlen(right_quote_local);
	000290b8:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
137: default:
	0002912d:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
139: abort();
	0002912d:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
141: i = 0;
	00029132:MOV qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
142: LAB_00029d79:
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
END_OF_LINE
----------------------------------------------
143: if (argsize_local == 0xffffffffffffffff) {
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
END_OF_LINE
----------------------------------------------
144: bVar15 = arg[i] != '\0';
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
END_OF_LINE
----------------------------------------------
147: bVar15 = i != argsize_local;
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
149: if (!bVar15) goto code_r0x00029db1;
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
150: bVar4 = false;
	0002913f:MOV byte ptr [RBP + -0x71],0x0
END_OF_LINE
----------------------------------------------
151: bVar5 = false;
	00029143:MOV byte ptr [RBP + -0x70],0x0
END_OF_LINE
----------------------------------------------
152: bVar15 = false;
	00029147:MOV byte ptr [RBP + -0x6f],0x0
END_OF_LINE
----------------------------------------------
153: if (((bVar2) && (quoting_style_local != shell_always_quoting_style)) && (quote_string_len != 0)) {
	0002914f:JZ 0x000291e5
	00029155:CMP dword ptr [RBP + -0xa4],0x2
	0002915c:JZ 0x000291e5
	00029162:CMP qword ptr [RBP + -0x48],0x0
	00029167:JZ 0x000291e5
END_OF_LINE
----------------------------------------------
154: uVar12 = i + quote_string_len;
	00029171:LEA RBX,[RDX + RAX*0x1]
END_OF_LINE
----------------------------------------------
155: if ((argsize_local == 0xffffffffffffffff) && (1 < quote_string_len)) {
	00029175:CMP qword ptr [RBP + -0xa0],-0x1
	0002917d:JNZ 0x000291a5
	0002917f:CMP qword ptr [RBP + -0x48],0x1
	00029184:JBE 0x000291a5
END_OF_LINE
----------------------------------------------
156: argsize_local = strlen(arg);
	00029190:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
158: if ((uVar12 <= argsize_local) &&
	000291ac:CMP RAX,RBX
	000291af:JC 0x000291e5
	000291b1:MOV RDX,qword ptr [RBP + -0x98]
	000291b8:MOV RAX,qword ptr [RBP + -0x68]
	000291bc:LEA RCX,[RDX + RAX*0x1]
	000291c0:MOV RDX,qword ptr [RBP + -0x48]
	000291c4:MOV RAX,qword ptr [RBP + -0x50]
	000291c8:MOV RSI,RAX
	000291cb:MOV RDI,RCX
	000291ce:CALL 0x00005cb0
	000291d3:TEST EAX,EAX
	000291d5:JNZ 0x000291e5
END_OF_LINE
----------------------------------------------
159: (iVar8 = memcmp(arg + i,quote_string,quote_string_len), iVar8 == 0)) {
	000291bc:LEA RCX,[RDX + RAX*0x1]
	000291c0:MOV RDX,qword ptr [RBP + -0x48]
	000291c4:MOV RAX,qword ptr [RBP + -0x50]
	000291c8:MOV RSI,RAX
	000291cb:MOV RDI,RCX
	000291ce:CALL 0x00005cb0
	000291d3:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
160: if (bVar13) goto LAB_00029ee9;
	000291db:JNZ 0x00029edc
	000291e1:MOV byte ptr [RBP + -0x71],0x1
	000291e5:MOV RDX,qword ptr [RBP + -0x98]
	000291ec:MOV RAX,qword ptr [RBP + -0x68]
	000291f0:ADD RAX,RDX
	000291f3:MOVZX EAX,byte ptr [RAX]
	000291f6:MOV byte ptr [RBP + -0x73],AL
	000291f9:MOVZX EAX,byte ptr [RBP + -0x73]
	000291fd:CMP EAX,0x7e
	00029200:JZ 0x00029698
	00029206:CMP EAX,0x7e
	00029209:JG 0x00029784
	0002920f:CMP EAX,0x7d
	00029212:JZ 0x00029666
	00029218:CMP EAX,0x7d
	0002921b:JG 0x00029784
	00029221:CMP EAX,0x7c
	00029224:JZ 0x000296a7
	0002922a:CMP EAX,0x7c
	0002922d:JG 0x00029784
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
161: bVar4 = true;
	000291e1:MOV byte ptr [RBP + -0x71],0x1
END_OF_LINE
----------------------------------------------
164: c = arg[i];
	000291f0:ADD RAX,RDX
	000291f3:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
165: if (c == 0x7e) {
	000291fd:CMP EAX,0x7e
	00029200:JZ 0x00029698
END_OF_LINE
----------------------------------------------
166: switchD_001292da_caseD_23:
	00029698:CMP qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
167: if (i != 0) goto LAB_00029bbe;
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
168: switchD_001292da_caseD_20:
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
169: bVar15 = true;
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
170: switchD_001292da_caseD_21:
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
171: if (quoting_style_local == shell_always_quoting_style) {
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
END_OF_LINE
----------------------------------------------
172: joined_r0x00029480:
	00029480:JZ 0x000295cf
END_OF_LINE
----------------------------------------------
173: if (bVar13) goto LAB_00029ee9;
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
175: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
177: if (0x7e < c) {
	00029209:JG 0x00029784
END_OF_LINE
----------------------------------------------
178: switchD_001292da_caseD_1:
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
179: if (sVar9 != 1) {
	00028f4c:CMP RAX,0x1
	00028f50:SETZ AL
	00028f53:MOV byte ptr [RBP + -0x6d],AL
	00028f56:MOV EAX,dword ptr [RBP + -0xa8]
	00028f5c:AND EAX,0x2
	00028f5f:TEST EAX,EAX
	00028f61:SETNZ AL
	00028f64:MOV byte ptr [RBP + -0x77],AL
	00028f67:MOV byte ptr [RBP + -0x76],0x0
	00028f6b:MOV byte ptr [RBP + -0x75],0x0
	00028f6f:MOV byte ptr [RBP + -0x74],0x1
	00028f73:CMP dword ptr [RBP + -0xa4],0xa
	00028f7a:JA 0x0002912d
	00028f80:MOV EAX,dword ptr [RBP + -0xa4]
	00028f86:LEA RDX,[RAX*0x4]
	00028f8e:LEA RAX,[0x35d6c]
	00028f95:MOV EAX,dword ptr [RDX + RAX*0x1]
	00028f98:CDQE
	00028f9a:LEA RDX,[0x35d6c]
	00028fa1:ADD RAX,RDX
	00028fa4:JMP RAX
	00028fa7:MOV dword ptr [RBP + -0xa4],0x5
	00028fb1:MOV byte ptr [RBP + -0x77],0x1
	00028fb5:MOVZX EAX,byte ptr [RBP + -0x77]
	00028fb9:XOR EAX,0x1
	00028fbc:TEST AL,AL
	00028fbe:JZ 0x00028fe3
	00028fc0:MOV RAX,qword ptr [RBP + -0x60]
	00028fc4:CMP RAX,qword ptr [RBP + -0x90]
	00028fcb:JNC 0x00028fde
	00028fcd:MOV RDX,qword ptr [RBP + -0x88]
	00028fd4:MOV RAX,qword ptr [RBP + -0x60]
	00028fd8:ADD RAX,RDX
	00028fdb:MOV byte ptr [RAX],0x22
	00028fde:ADD qword ptr [RBP + -0x60],0x1
	00028fe3:MOV byte ptr [RBP + -0x78],0x1
	00028fe7:LEA RAX,[0x35d65]
	00028fee:MOV qword ptr [RBP + -0x50],RAX
	00028ff2:MOV qword ptr [RBP + -0x48],0x1
	00028ffa:JMP 0x00029132
	00028fff:MOV byte ptr [RBP + -0x78],0x1
	00029003:MOV byte ptr [RBP + -0x77],0x0
	00029007:JMP 0x00029132
	0002900c:CMP dword ptr [RBP + -0xa4],0xa
	00029013:JZ 0x00029051
	00029015:MOV EAX,dword ptr [RBP + -0xa4]
	0002901b:MOV ESI,EAX
	0002901d:LEA RAX,[0x35d69]
	00029024:MOV RDI,RAX
	00029027:CALL 0x00028dfc
	0002902c:MOV qword ptr [RBP + -0xb8],RAX
	00029033:MOV EAX,dword ptr [RBP + -0xa4]
	00029039:MOV ESI,EAX
	0002903b:LEA RAX,[0x35d67]
	00029042:MOV RDI,RAX
	00029045:CALL 0x00028dfc
	0002904a:MOV qword ptr [RBP + -0xc0],RAX
	00029051:MOVZX EAX,byte ptr [RBP + -0x77]
	00029055:XOR EAX,0x1
	00029058:TEST AL,AL
	0002905a:JZ 0x000290a2
	0002905c:MOV RAX,qword ptr [RBP + -0xb8]
	00029063:MOV qword ptr [RBP + -0x50],RAX
	00029067:JMP 0x00029097
	00029069:MOV RAX,qword ptr [RBP + -0x60]
	0002906d:CMP RAX,qword ptr [RBP + -0x90]
	00029074:JNC 0x0002908d
	00029076:MOV RDX,qword ptr [RBP + -0x88]
	0002907d:MOV RAX,qword ptr [RBP + -0x60]
	00029081:ADD RDX,RAX
	00029084:MOV RAX,qword ptr [RBP + -0x50]
	00029088:MOVZX EAX,byte ptr [RAX]
	0002908b:MOV byte ptr [RDX],AL
	0002908d:ADD qword ptr [RBP + -0x60],0x1
	00029092:ADD qword ptr [RBP + -0x50],0x1
	00029097:MOV RAX,qword ptr [RBP + -0x50]
	0002909b:MOVZX EAX,byte ptr [RAX]
	0002909e:TEST AL,AL
	000290a0:JNZ 0x00029069
	000290a2:MOV byte ptr [RBP + -0x78],0x1
	000290a6:MOV RAX,qword ptr [RBP + -0xc0]
	000290ad:MOV qword ptr [RBP + -0x50],RAX
	000290b1:MOV RAX,qword ptr [RBP + -0x50]
	000290b5:MOV RDI,RAX
	000290b8:CALL 0x00005ad0
	000290bd:MOV qword ptr [RBP + -0x48],RAX
	000290c1:JMP 0x00029132
	000290c3:MOV byte ptr [RBP + -0x78],0x1
	000290c7:MOV byte ptr [RBP + -0x77],0x1
	000290cb:MOVZX EAX,byte ptr [RBP + -0x77]
	000290cf:XOR EAX,0x1
	000290d2:TEST AL,AL
	000290d4:JZ 0x000290da
	000290d6:MOV byte ptr [RBP + -0x78],0x1
	000290da:MOV dword ptr [RBP + -0xa4],0x2
	000290e4:MOVZX EAX,byte ptr [RBP + -0x77]
	000290e8:XOR EAX,0x1
	000290eb:TEST AL,AL
	000290ed:JZ 0x00029112
	000290ef:MOV RAX,qword ptr [RBP + -0x60]
	000290f3:CMP RAX,qword ptr [RBP + -0x90]
	000290fa:JNC 0x0002910d
	000290fc:MOV RDX,qword ptr [RBP + -0x88]
	00029103:MOV RAX,qword ptr [RBP + -0x60]
	00029107:ADD RAX,RDX
	0002910a:MOV byte ptr [RAX],0x27
	0002910d:ADD qword ptr [RBP + -0x60],0x1
	00029112:LEA RAX,[0x35d67]
	00029119:MOV qword ptr [RBP + -0x50],RAX
	0002911d:MOV qword ptr [RBP + -0x48],0x1
	00029125:JMP 0x00029132
	00029127:MOV byte ptr [RBP + -0x77],0x0
	0002912b:JMP 0x00029132
	0002912d:CALL 0x000058f0
	00029132:MOV qword ptr [RBP + -0x68],0x0
	0002913a:JMP 0x00029d79
	0002913f:MOV byte ptr [RBP + -0x71],0x0
	00029143:MOV byte ptr [RBP + -0x70],0x0
	00029147:MOV byte ptr [RBP + -0x6f],0x0
	0002914b:CMP byte ptr [RBP + -0x78],0x0
	0002914f:JZ 0x000291e5
	00029155:CMP dword ptr [RBP + -0xa4],0x2
	0002915c:JZ 0x000291e5
	00029162:CMP qword ptr [RBP + -0x48],0x0
	00029167:JZ 0x000291e5
	00029169:MOV RDX,qword ptr [RBP + -0x68]
	0002916d:MOV RAX,qword ptr [RBP + -0x48]
	00029171:LEA RBX,[RDX + RAX*0x1]
	00029175:CMP qword ptr [RBP + -0xa0],-0x1
	0002917d:JNZ 0x000291a5
	0002917f:CMP qword ptr [RBP + -0x48],0x1
	00029184:JBE 0x000291a5
	00029186:MOV RAX,qword ptr [RBP + -0x98]
	0002918d:MOV RDI,RAX
	00029190:CALL 0x00005ad0
	00029195:MOV qword ptr [RBP + -0xa0],RAX
	0002919c:MOV RAX,qword ptr [RBP + -0xa0]
	000291a3:JMP 0x000291ac
	000291a5:MOV RAX,qword ptr [RBP + -0xa0]
	000291ac:CMP RAX,RBX
	000291af:JC 0x000291e5
	000291b1:MOV RDX,qword ptr [RBP + -0x98]
	000291b8:MOV RAX,qword ptr [RBP + -0x68]
	000291bc:LEA RCX,[RDX + RAX*0x1]
	000291c0:MOV RDX,qword ptr [RBP + -0x48]
	000291c4:MOV RAX,qword ptr [RBP + -0x50]
	000291c8:MOV RSI,RAX
	000291cb:MOV RDI,RCX
	000291ce:CALL 0x00005cb0
	000291d3:TEST EAX,EAX
	000291d5:JNZ 0x000291e5
	000291d7:CMP byte ptr [RBP + -0x77],0x0
	000291db:JNZ 0x00029edc
	000291e1:MOV byte ptr [RBP + -0x71],0x1
	000291e5:MOV RDX,qword ptr [RBP + -0x98]
	000291ec:MOV RAX,qword ptr [RBP + -0x68]
	000291f0:ADD RAX,RDX
	000291f3:MOVZX EAX,byte ptr [RAX]
	000291f6:MOV byte ptr [RBP + -0x73],AL
	000291f9:MOVZX EAX,byte ptr [RBP + -0x73]
	000291fd:CMP EAX,0x7e
	00029200:JZ 0x00029698
	00029206:CMP EAX,0x7e
	00029209:JG 0x00029784
	0002920f:CMP EAX,0x7d
	00029212:JZ 0x00029666
	00029218:CMP EAX,0x7d
	0002921b:JG 0x00029784
	00029221:CMP EAX,0x7c
	00029224:JZ 0x000296a7
	0002922a:CMP EAX,0x7c
	0002922d:JG 0x00029784
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
END_OF_LINE
----------------------------------------------
180: memset(&mbstate,0,8);
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
181: m = 0;
	000297d2:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
182: bVar15 = true;
	000297da:MOV byte ptr [RBP + -0x6e],0x1
END_OF_LINE
----------------------------------------------
183: if (argsize_local == 0xffffffffffffffff) {
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
END_OF_LINE
----------------------------------------------
184: argsize_local = strlen(arg);
	000297f2:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
186: LAB_000297fe:
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
END_OF_LINE
----------------------------------------------
187: bytes = rpl_mbrtowc(&w,arg + i + m,argsize_local - (i + m),&mbstate);
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
END_OF_LINE
----------------------------------------------
188: if (bytes != 0) {
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
END_OF_LINE
----------------------------------------------
189: if (bytes == 0xffffffffffffffff) {
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
END_OF_LINE
----------------------------------------------
190: bVar15 = false;
	00029858:MOV byte ptr [RBP + -0x6e],0x0
END_OF_LINE
----------------------------------------------
193: if (bytes != 0xfffffffffffffffe) goto LAB_000298ac;
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
194: bVar15 = false;
	00029868:MOV byte ptr [RBP + -0x6e],0x0
END_OF_LINE
----------------------------------------------
195: for (; (m + i < argsize_local && (arg[i + m] != '\0')); m = m + 1) {
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
END_OF_LINE
----------------------------------------------
199: goto LAB_0002995b;
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
END_OF_LINE
----------------------------------------------
201: m = 1;
	0002978a:MOV qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
202: ppuVar10 = __ctype_b_loc();
	00029792:CALL 0x000060a0
END_OF_LINE
----------------------------------------------
203: bVar15 = ((*ppuVar10)[c] & 0x4000) != 0;
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
204: LAB_0002995b:
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
END_OF_LINE
----------------------------------------------
205: if ((m < 2) && ((!bVar2 || (bVar15)))) goto LAB_00029bbe;
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
206: ilim = m + i;
	0002998a:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
207: while( true ) {
	00029b03:JBE 0x00029ba8
END_OF_LINE
----------------------------------------------
208: if ((!bVar2) || (bVar15)) {
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
END_OF_LINE
----------------------------------------------
209: if (bVar4) {
	00029ace:JZ 0x00029af7
END_OF_LINE
----------------------------------------------
210: if (len < buffersize_local) {
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
END_OF_LINE
----------------------------------------------
211: buffer[len] = '\\';
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
END_OF_LINE
----------------------------------------------
213: len = len + 1;
	00029aee:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
214: bVar4 = false;
	00029af3:MOV byte ptr [RBP + -0x71],0x0
END_OF_LINE
----------------------------------------------
218: if (bVar13) goto LAB_00029ee9;
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
219: bVar5 = true;
	000299b4:MOV byte ptr [RBP + -0x70],0x1
END_OF_LINE
----------------------------------------------
220: if ((quoting_style_local == shell_always_quoting_style) && (!bVar3)) {
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
END_OF_LINE
----------------------------------------------
221: if (len < buffersize_local) {
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
END_OF_LINE
----------------------------------------------
222: buffer[len] = '\'';
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
224: if (len + 1 < buffersize_local) {
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
END_OF_LINE
----------------------------------------------
225: buffer[len + 1] = '$';
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
END_OF_LINE
----------------------------------------------
227: if (len + 2 < buffersize_local) {
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
END_OF_LINE
----------------------------------------------
228: buffer[len + 2] = '\'';
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
230: len = len + 3;
	00029a30:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
231: bVar3 = true;
	00029a35:MOV byte ptr [RBP + -0x76],0x1
END_OF_LINE
----------------------------------------------
233: if (len < buffersize_local) {
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
END_OF_LINE
----------------------------------------------
234: buffer[len] = '\\';
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
END_OF_LINE
----------------------------------------------
236: if (len + 1 < buffersize_local) {
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
END_OF_LINE
----------------------------------------------
237: buffer[len + 1] = (c >> 6) + 0x30;
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
239: if (len + 2 < buffersize_local) {
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
END_OF_LINE
----------------------------------------------
240: buffer[len + 2] = (c >> 3 & 7) + 0x30;
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
242: len = len + 3;
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
243: c = (c & 7) + 0x30;
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
END_OF_LINE
----------------------------------------------
245: if (ilim <= i + 1) break;
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
END_OF_LINE
----------------------------------------------
246: if ((bVar3) && (!bVar5)) {
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
END_OF_LINE
----------------------------------------------
247: if (len < buffersize_local) {
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
END_OF_LINE
----------------------------------------------
248: buffer[len] = '\'';
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
250: if (len + 1 < buffersize_local) {
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
END_OF_LINE
----------------------------------------------
251: buffer[len + 1] = '\'';
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
253: len = len + 2;
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
254: bVar3 = false;
	00029b60:MOV byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
256: if (len < buffersize_local) {
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
END_OF_LINE
----------------------------------------------
257: buffer[len] = c;
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
259: len = len + 1;
	00029b85:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
260: i = i + 1;
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
261: c = arg[i];
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
263: goto LAB_00029ce4;
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
265: if (c == 0x7d) {
	0002920f:CMP EAX,0x7d
	00029212:JZ 0x00029666
END_OF_LINE
----------------------------------------------
266: LAB_00029666:
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
END_OF_LINE
----------------------------------------------
267: if (argsize_local == 0xffffffffffffffff) {
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
END_OF_LINE
----------------------------------------------
268: bVar14 = arg[1] != '\0';
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
END_OF_LINE
----------------------------------------------
271: bVar14 = argsize_local != 1;
	00029685:CMP qword ptr [RBP + -0xa0],0x1
END_OF_LINE
----------------------------------------------
273: if (bVar14) goto LAB_00029bbe;
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
274: goto switchD_001292da_caseD_23;
	00029698:CMP qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
276: if (0x7d < c) goto switchD_001292da_caseD_1;
	0002921b:JG 0x00029784
	00029221:CMP EAX,0x7c
	00029224:JZ 0x000296a7
	0002922a:CMP EAX,0x7c
	0002922d:JG 0x00029784
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
277: if (c == 0x7c) goto switchD_001292da_caseD_21;
	00029221:CMP EAX,0x7c
	00029224:JZ 0x000296a7
	0002922a:CMP EAX,0x7c
	0002922d:JG 0x00029784
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
278: if (0x7c < c) goto switchD_001292da_caseD_1;
	0002922d:JG 0x00029784
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
279: if (c == 0x7b) goto LAB_00029666;
	00029233:CMP EAX,0x7b
	00029236:JZ 0x00029666
	0002923c:CMP EAX,0x7b
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
END_OF_LINE
----------------------------------------------
280: if (0x7b < c) goto switchD_001292da_caseD_1;
	0002923f:JG 0x00029784
	00029245:CMP EAX,0x3f
	00029248:JG 0x000292dd
	0002924e:TEST EAX,EAX
	00029250:JNS 0x000292b1
	00029252:JMP 0x00029784
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
	00029264:MOV RAX,RDX
	00029267:MOV RDX,0x3ffffff53ffffff
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
281: if (0x3f < c) {
	00029248:JG 0x000292dd
END_OF_LINE
----------------------------------------------
282: if ((0x7a < c) || (c < 0x41)) goto switchD_001292da_caseD_1;
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
283: uVar12 = 1L << (c + 0xbf & 0x3f);
	00029257:SUB EAX,0x41
	0002925a:MOV EDX,0x1
	0002925f:MOV ECX,EAX
	00029261:SHL RDX,CL
END_OF_LINE
----------------------------------------------
284: if ((uVar12 & 0x3ffffff53ffffff) != 0) goto switchD_001292da_caseD_25;
	00029271:AND RDX,RAX
	00029274:TEST RDX,RDX
	00029277:SETNZ DL
	0002927a:TEST DL,DL
	0002927c:JNZ 0x0002977b
	00029282:MOV RDX,RAX
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
285: if ((uVar12 & 0xa4000000) != 0) goto switchD_001292da_caseD_21;
	00029285:AND EDX,0xa4000000
	0002928b:TEST RDX,RDX
	0002928e:SETNZ DL
	00029291:TEST DL,DL
	00029293:JNZ 0x000296a7
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
286: if ((uVar12 & 0x8000000) == 0) goto switchD_001292da_caseD_1;
	00029299:AND EAX,0x8000000
	0002929e:TEST RAX,RAX
	000292a1:SETNZ AL
	000292a4:TEST AL,AL
	000292a6:JNZ 0x00029605
	000292ac:JMP 0x00029784
	000292b1:CMP EAX,0x3f
	000292b4:JA 0x00029784
	000292ba:MOV EAX,EAX
	000292bc:LEA RDX,[RAX*0x4]
	000292c4:LEA RAX,[0x35d98]
	000292cb:MOV EAX,dword ptr [RDX + RAX*0x1]
	000292ce:CDQE
	000292d0:LEA RDX,[0x35d98]
	000292d7:ADD RAX,RDX
	000292da:JMP RAX
	000292dd:CMP EAX,0x7a
	000292e0:JG 0x00029784
	000292e6:CMP EAX,0x41
	000292e9:JGE 0x00029257
	000292ef:JMP 0x00029784
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
	00029308:MOV byte ptr [RBP + -0x70],0x1
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
	00029320:MOV RAX,qword ptr [RBP + -0x60]
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
	0002932d:MOV RDX,qword ptr [RBP + -0x88]
	00029334:MOV RAX,qword ptr [RBP + -0x60]
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
	00029384:ADD qword ptr [RBP + -0x60],0x1
	00029389:MOV byte ptr [RBP + -0x76],0x1
	0002938d:MOV RAX,qword ptr [RBP + -0x60]
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
	0002939a:MOV RDX,qword ptr [RBP + -0x88]
	000293a1:MOV RAX,qword ptr [RBP + -0x60]
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
	000293ab:ADD qword ptr [RBP + -0x60],0x1
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
	00029400:MOV RAX,qword ptr [RBP + -0x60]
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
	0002940d:MOV RDX,qword ptr [RBP + -0x88]
	00029414:MOV RAX,qword ptr [RBP + -0x60]
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
	00029441:ADD qword ptr [RBP + -0x60],0x1
	00029446:MOV byte ptr [RBP + -0x73],0x30
	0002944a:JMP 0x00029bae
	0002944f:MOV EAX,dword ptr [RBP + -0xa8]
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
287: if (quoting_style_local != shell_always_quoting_style) {
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
END_OF_LINE
----------------------------------------------
288: esc = c;
	00029628:JZ 0x0002963b
END_OF_LINE
----------------------------------------------
289: if (((!bVar2) || (!bVar13)) || (quote_string_len == 0)) goto LAB_0002963c;
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
290: goto LAB_00029ce4;
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
292: if (bVar13) goto LAB_00029ee9;
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
293: goto LAB_00029ce4;
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
295: switch(c) {
	000292da:JMP RAX
END_OF_LINE
----------------------------------------------
296: case '\0':
	000292f4:CMP byte ptr [RBP + -0x78],0x0
END_OF_LINE
----------------------------------------------
297: if (!bVar2) {
	000292f4:CMP byte ptr [RBP + -0x78],0x0
	000292f8:JZ 0x0002944f
END_OF_LINE
----------------------------------------------
298: if ((flags & 1U) == 0) goto LAB_00029bbe;
	00029455:AND EAX,0x1
	00029458:TEST EAX,EAX
	0002945a:JZ 0x00029bae
	00029460:JMP 0x00029d74
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
	00029517:CMP byte ptr [RBP + -0x77],0x0
	0002951b:JNZ 0x00029edf
	00029521:MOV RAX,qword ptr [RBP + -0x68]
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
	00029536:MOV byte ptr [RBP + -0x73],AL
	00029539:ADD qword ptr [RBP + -0x68],0x2
	0002953e:MOV RAX,qword ptr [RBP + -0x60]
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
	0002954b:MOV RDX,qword ptr [RBP + -0x88]
	00029552:MOV RAX,qword ptr [RBP + -0x60]
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
	000295c5:ADD qword ptr [RBP + -0x60],0x1
	000295ca:JMP 0x000295cd
	000295cc:NOP
	000295cd:JMP 0x000295d5
	000295cf:NOP
	000295d0:JMP 0x00029bbe
	000295d5:NOP
	000295d6:JMP 0x00029bbe
	000295db:MOV byte ptr [RBP + -0x72],0x61
	000295df:JMP 0x00029650
	000295e1:MOV byte ptr [RBP + -0x72],0x62
	000295e5:JMP 0x00029650
	000295e7:MOV byte ptr [RBP + -0x72],0x66
	000295eb:JMP 0x00029650
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
	000295f1:JMP 0x0002963c
	000295f3:MOV byte ptr [RBP + -0x72],0x72
	000295f7:JMP 0x0002963c
	000295f9:MOV byte ptr [RBP + -0x72],0x74
	000295fd:JMP 0x0002963c
	000295ff:MOV byte ptr [RBP + -0x72],0x76
	00029603:JMP 0x00029650
	00029605:MOVZX EAX,byte ptr [RBP + -0x73]
	00029609:MOV byte ptr [RBP + -0x72],AL
	0002960c:CMP dword ptr [RBP + -0xa4],0x2
	00029613:JNZ 0x00029624
	00029615:CMP byte ptr [RBP + -0x77],0x0
	00029619:JZ 0x00029cdd
	0002961f:JMP 0x00029ee9
	00029624:CMP byte ptr [RBP + -0x78],0x0
	00029628:JZ 0x0002963b
	0002962a:CMP byte ptr [RBP + -0x77],0x0
	0002962e:JZ 0x0002963b
	00029630:CMP qword ptr [RBP + -0x48],0x0
	00029635:JNZ 0x00029ce0
	0002963b:NOP
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
299: goto LAB_00029d74;
	00029d74:ADD qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
301: if (!bVar13) {
	000292fe:CMP byte ptr [RBP + -0x77],0x0
	00029302:JNZ 0x00029ee9
END_OF_LINE
----------------------------------------------
302: bVar5 = true;
	00029308:MOV byte ptr [RBP + -0x70],0x1
END_OF_LINE
----------------------------------------------
303: if ((quoting_style_local == shell_always_quoting_style) && (!bVar3)) {
	0002930c:CMP dword ptr [RBP + -0xa4],0x2
	00029313:JNZ 0x0002938d
	00029315:MOVZX EAX,byte ptr [RBP + -0x76]
	00029319:XOR EAX,0x1
	0002931c:TEST AL,AL
	0002931e:JZ 0x0002938d
END_OF_LINE
----------------------------------------------
304: if (len < buffersize_local) {
	00029324:CMP RAX,qword ptr [RBP + -0x90]
	0002932b:JNC 0x0002933e
END_OF_LINE
----------------------------------------------
305: buffer[len] = '\'';
	00029338:ADD RAX,RDX
	0002933b:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
307: if (len + 1 < buffersize_local) {
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
END_OF_LINE
----------------------------------------------
308: buffer[len + 1] = '$';
	0002933e:ADD qword ptr [RBP + -0x60],0x1
	00029343:MOV RAX,qword ptr [RBP + -0x60]
	00029347:CMP RAX,qword ptr [RBP + -0x90]
	0002934e:JNC 0x00029361
	00029350:MOV RDX,qword ptr [RBP + -0x88]
	00029357:MOV RAX,qword ptr [RBP + -0x60]
	0002935b:ADD RAX,RDX
	0002935e:MOV byte ptr [RAX],0x24
END_OF_LINE
----------------------------------------------
310: if (len + 2 < buffersize_local) {
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
END_OF_LINE
----------------------------------------------
311: buffer[len + 2] = '\'';
	00029361:ADD qword ptr [RBP + -0x60],0x1
	00029366:MOV RAX,qword ptr [RBP + -0x60]
	0002936a:CMP RAX,qword ptr [RBP + -0x90]
	00029371:JNC 0x00029384
	00029373:MOV RDX,qword ptr [RBP + -0x88]
	0002937a:MOV RAX,qword ptr [RBP + -0x60]
	0002937e:ADD RAX,RDX
	00029381:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
313: len = len + 3;
	00029384:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
314: bVar3 = true;
	00029389:MOV byte ptr [RBP + -0x76],0x1
END_OF_LINE
----------------------------------------------
316: if (len < buffersize_local) {
	00029391:CMP RAX,qword ptr [RBP + -0x90]
	00029398:JNC 0x000293ab
END_OF_LINE
----------------------------------------------
317: buffer[len] = '\\';
	000293a5:ADD RAX,RDX
	000293a8:MOV byte ptr [RAX],0x5c
END_OF_LINE
----------------------------------------------
319: uVar12 = len + 1;
	000293ab:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
320: if ((((quoting_style_local != shell_always_quoting_style) && (i + 1 < argsize_local)) &&
	000293b0:CMP dword ptr [RBP + -0xa4],0x2
	000293b7:JZ 0x00029446
	000293bd:MOV RAX,qword ptr [RBP + -0x68]
	000293c1:ADD RAX,0x1
	000293c5:CMP qword ptr [RBP + -0xa0],RAX
	000293cc:JBE 0x00029446
	000293ce:MOV RAX,qword ptr [RBP + -0x68]
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
END_OF_LINE
----------------------------------------------
321: ('/' < arg[i + 1])) && (arg[i + 1] < ':')) {
	000293d2:LEA RDX,[RAX + 0x1]
	000293d6:MOV RAX,qword ptr [RBP + -0x98]
	000293dd:ADD RAX,RDX
	000293e0:MOVZX EAX,byte ptr [RAX]
	000293e3:CMP AL,0x2f
	000293e5:JLE 0x00029446
	000293e7:MOV RAX,qword ptr [RBP + -0x68]
	000293eb:LEA RDX,[RAX + 0x1]
	000293ef:MOV RAX,qword ptr [RBP + -0x98]
	000293f6:ADD RAX,RDX
	000293f9:MOVZX EAX,byte ptr [RAX]
	000293fc:CMP AL,0x39
	000293fe:JG 0x00029446
END_OF_LINE
----------------------------------------------
322: if (uVar12 < buffersize_local) {
	00029404:CMP RAX,qword ptr [RBP + -0x90]
	0002940b:JNC 0x0002941e
END_OF_LINE
----------------------------------------------
323: buffer[uVar12] = '0';
	00029418:ADD RAX,RDX
	0002941b:MOV byte ptr [RAX],0x30
END_OF_LINE
----------------------------------------------
325: if (len + 2 < buffersize_local) {
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
END_OF_LINE
----------------------------------------------
326: buffer[len + 2] = '0';
	0002941e:ADD qword ptr [RBP + -0x60],0x1
	00029423:MOV RAX,qword ptr [RBP + -0x60]
	00029427:CMP RAX,qword ptr [RBP + -0x90]
	0002942e:JNC 0x00029441
	00029430:MOV RDX,qword ptr [RBP + -0x88]
	00029437:MOV RAX,qword ptr [RBP + -0x60]
	0002943b:ADD RAX,RDX
	0002943e:MOV byte ptr [RAX],0x30
END_OF_LINE
----------------------------------------------
328: uVar12 = len + 3;
	00029441:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
330: len = uVar12;
	00029446:MOV byte ptr [RBP + -0x73],0x30
END_OF_LINE
----------------------------------------------
331: c = '0';
	00029446:MOV byte ptr [RBP + -0x73],0x30
END_OF_LINE
----------------------------------------------
332: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
334: goto LAB_00029ee9;
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
335: default:
	00029788:JZ 0x000297bc
END_OF_LINE
----------------------------------------------
336: goto switchD_001292da_caseD_1;
	00029784:CMP byte ptr [RBP + -0x6d],0x0
END_OF_LINE
----------------------------------------------
337: case '\a':
	000295db:MOV byte ptr [RBP + -0x72],0x61
END_OF_LINE
----------------------------------------------
338: esc = 'a';
	000295db:MOV byte ptr [RBP + -0x72],0x61
END_OF_LINE
----------------------------------------------
340: case '\b':
	000295e1:MOV byte ptr [RBP + -0x72],0x62
END_OF_LINE
----------------------------------------------
341: esc = 'b';
	000295e1:MOV byte ptr [RBP + -0x72],0x62
END_OF_LINE
----------------------------------------------
343: case '\t':
	000295f9:MOV byte ptr [RBP + -0x72],0x74
END_OF_LINE
----------------------------------------------
344: esc = 't';
	000295f9:MOV byte ptr [RBP + -0x72],0x74
END_OF_LINE
----------------------------------------------
345: goto LAB_0002963c;
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
346: case '\n':
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
END_OF_LINE
----------------------------------------------
347: esc = 'n';
	000295ed:MOV byte ptr [RBP + -0x72],0x6e
END_OF_LINE
----------------------------------------------
348: goto LAB_0002963c;
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
349: case '\v':
	000295ff:MOV byte ptr [RBP + -0x72],0x76
END_OF_LINE
----------------------------------------------
350: esc = 'v';
	000295ff:MOV byte ptr [RBP + -0x72],0x76
END_OF_LINE
----------------------------------------------
352: case '\f':
	000295e7:MOV byte ptr [RBP + -0x72],0x66
END_OF_LINE
----------------------------------------------
353: esc = 'f';
	000295e7:MOV byte ptr [RBP + -0x72],0x66
END_OF_LINE
----------------------------------------------
355: case '\r':
	000295f3:MOV byte ptr [RBP + -0x72],0x72
END_OF_LINE
----------------------------------------------
356: esc = 'r';
	000295f3:MOV byte ptr [RBP + -0x72],0x72
END_OF_LINE
----------------------------------------------
357: LAB_0002963c:
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
358: if ((quoting_style_local == shell_always_quoting_style) && (bVar13)) goto LAB_00029ee9;
	0002963c:CMP dword ptr [RBP + -0xa4],0x2
	00029643:JNZ 0x0002964f
	00029645:CMP byte ptr [RBP + -0x77],0x0
	00029649:JNZ 0x00029ee2
	0002964f:NOP
	00029650:CMP byte ptr [RBP + -0x78],0x0
	00029654:JZ 0x00029bb1
	0002965a:MOVZX EAX,byte ptr [RBP + -0x72]
	0002965e:MOV byte ptr [RBP + -0x73],AL
	00029661:JMP 0x00029c29
	00029666:CMP qword ptr [RBP + -0xa0],-0x1
	0002966e:JNZ 0x00029685
	00029670:MOV RAX,qword ptr [RBP + -0x98]
	00029677:ADD RAX,0x1
	0002967b:MOVZX EAX,byte ptr [RAX]
	0002967e:TEST AL,AL
	00029680:SETNZ AL
	00029683:JMP 0x00029690
	00029685:CMP qword ptr [RBP + -0xa0],0x1
	0002968d:SETNZ AL
	00029690:TEST AL,AL
	00029692:JNZ 0x00029bb4
	00029698:CMP qword ptr [RBP + -0x68],0x0
	0002969d:JNZ 0x00029bb7
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
	000296ae:JNZ 0x00029bba
	000296b4:CMP byte ptr [RBP + -0x77],0x0
	000296b8:JZ 0x00029bba
	000296be:JMP 0x00029ee9
	000296c3:MOV byte ptr [RBP + -0x75],0x1
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
360: case ' ':
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
361: goto switchD_001292da_caseD_20;
	000296a3:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
362: case '!':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
363: case '\"':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
364: case '$':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
365: case '&':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
366: case '(':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
367: case ')':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
368: case '*':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
369: case ';':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
370: case '<':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
371: case '=':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
372: case '>':
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
373: goto switchD_001292da_caseD_21;
	000296a7:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
374: case '#':
	00029698:CMP qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
375: goto switchD_001292da_caseD_23;
	00029698:CMP qword ptr [RBP + -0x68],0x0
END_OF_LINE
----------------------------------------------
376: case '%':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
377: case '+':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
378: case ',':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
379: case '-':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
380: case '.':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
381: case '/':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
382: case '0':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
383: case '1':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
384: case '2':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
385: case '3':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
386: case '4':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
387: case '5':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
388: case '6':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
389: case '7':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
390: case '8':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
391: case '9':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
392: case ':':
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
393: switchD_001292da_caseD_25:
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
394: bVar15 = true;
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
395: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
396: case '\'':
	000296c3:MOV byte ptr [RBP + -0x75],0x1
END_OF_LINE
----------------------------------------------
397: bVar6 = true;
	000296c3:MOV byte ptr [RBP + -0x75],0x1
END_OF_LINE
----------------------------------------------
398: bVar15 = true;
	000296c7:MOV byte ptr [RBP + -0x6f],0x1
END_OF_LINE
----------------------------------------------
399: if (quoting_style_local != shell_always_quoting_style) goto LAB_00029bbe;
	000296cb:CMP dword ptr [RBP + -0xa4],0x2
	000296d2:JNZ 0x00029bbd
	000296d8:CMP byte ptr [RBP + -0x77],0x0
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
400: if (bVar13) goto LAB_00029ee9;
	000296dc:JNZ 0x00029ee5
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
	000296f3:MOV RAX,qword ptr [RBP + -0x90]
	000296fa:MOV qword ptr [RBP + -0x58],RAX
	000296fe:MOV qword ptr [RBP + -0x90],0x0
	00029709:MOV RAX,qword ptr [RBP + -0x60]
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
	00029716:MOV RDX,qword ptr [RBP + -0x88]
	0002971d:MOV RAX,qword ptr [RBP + -0x60]
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
	0002976d:ADD qword ptr [RBP + -0x60],0x1
	00029772:MOV byte ptr [RBP + -0x76],0x0
	00029776:JMP 0x00029bbd
	0002977b:MOV byte ptr [RBP + -0x6f],0x1
	0002977f:JMP 0x00029bbe
	00029784:CMP byte ptr [RBP + -0x6d],0x0
	00029788:JZ 0x000297bc
	0002978a:MOV qword ptr [RBP + -0x40],0x1
	00029792:CALL 0x000060a0
	00029797:MOV RDX,qword ptr [RAX]
	0002979a:MOVZX EAX,byte ptr [RBP + -0x73]
	0002979e:ADD RAX,RAX
	000297a1:ADD RAX,RDX
	000297a4:MOVZX EAX,word ptr [RAX]
	000297a7:MOVZX EAX,AX
	000297aa:AND EAX,0x4000
	000297af:TEST EAX,EAX
	000297b1:SETNZ AL
	000297b4:MOV byte ptr [RBP + -0x6e],AL
	000297b7:JMP 0x0002995b
	000297bc:LEA RAX,[RBP + -0x20]
	000297c0:MOV EDX,0x8
	000297c5:MOV ESI,0x0
	000297ca:MOV RDI,RAX
	000297cd:CALL 0x00005c10
	000297d2:MOV qword ptr [RBP + -0x40],0x0
	000297da:MOV byte ptr [RBP + -0x6e],0x1
	000297de:CMP qword ptr [RBP + -0xa0],-0x1
	000297e6:JNZ 0x000297fe
	000297e8:MOV RAX,qword ptr [RBP + -0x98]
	000297ef:MOV RDI,RAX
	000297f2:CALL 0x00005ad0
	000297f7:MOV qword ptr [RBP + -0xa0],RAX
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
	00029802:MOV RAX,qword ptr [RBP + -0x40]
	00029806:ADD RDX,RAX
	00029809:MOV RAX,qword ptr [RBP + -0xa0]
	00029810:SUB RAX,RDX
	00029813:MOV RDI,RAX
	00029816:MOV RDX,qword ptr [RBP + -0x68]
	0002981a:MOV RAX,qword ptr [RBP + -0x40]
	0002981e:ADD RDX,RAX
	00029821:MOV RAX,qword ptr [RBP + -0x98]
	00029828:LEA RSI,[RDX + RAX*0x1]
	0002982c:LEA RDX,[RBP + -0x20]
	00029830:LEA RAX,[RBP + -0x6c]
	00029834:MOV RCX,RDX
	00029837:MOV RDX,RDI
	0002983a:MOV RDI,RAX
	0002983d:CALL 0x0002c50c
	00029842:MOV qword ptr [RBP + -0x30],RAX
	00029846:CMP qword ptr [RBP + -0x30],0x0
	0002984b:JZ 0x00029957
	00029851:CMP qword ptr [RBP + -0x30],-0x1
	00029856:JNZ 0x00029861
	00029858:MOV byte ptr [RBP + -0x6e],0x0
	0002985c:JMP 0x0002995b
	00029861:CMP qword ptr [RBP + -0x30],-0x2
	00029866:JNZ 0x000298ac
	00029868:MOV byte ptr [RBP + -0x6e],0x0
	0002986c:JMP 0x00029873
	0002986e:ADD qword ptr [RBP + -0x40],0x1
	00029873:MOV RDX,qword ptr [RBP + -0x68]
	00029877:MOV RAX,qword ptr [RBP + -0x40]
	0002987b:ADD RAX,RDX
	0002987e:CMP qword ptr [RBP + -0xa0],RAX
	00029885:JBE 0x0002995a
	0002988b:MOV RDX,qword ptr [RBP + -0x68]
	0002988f:MOV RAX,qword ptr [RBP + -0x40]
	00029893:ADD RDX,RAX
	00029896:MOV RAX,qword ptr [RBP + -0x98]
	0002989d:ADD RAX,RDX
	000298a0:MOVZX EAX,byte ptr [RAX]
	000298a3:TEST AL,AL
	000298a5:JNZ 0x0002986e
	000298a7:JMP 0x0002995a
	000298ac:CMP byte ptr [RBP + -0x77],0x0
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
	00029927:MOV EAX,dword ptr [RBP + -0x6c]
	0002992a:MOV EDI,EAX
	0002992c:CALL 0x00006050
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
	00029935:MOV byte ptr [RBP + -0x6e],0x0
	00029939:MOV RAX,qword ptr [RBP + -0x30]
	0002993d:ADD qword ptr [RBP + -0x40],RAX
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002995f:MOV byte ptr [RBP + -0x6f],AL
	00029962:CMP qword ptr [RBP + -0x40],0x1
	00029967:JA 0x00029982
	00029969:CMP byte ptr [RBP + -0x78],0x0
	0002996d:JZ 0x00029bbe
	00029973:MOVZX EAX,byte ptr [RBP + -0x6e]
	00029977:XOR EAX,0x1
	0002997a:TEST AL,AL
	0002997c:JZ 0x00029bbe
	00029982:MOV RDX,qword ptr [RBP + -0x68]
	00029986:MOV RAX,qword ptr [RBP + -0x40]
	0002998a:ADD RAX,RDX
	0002998d:MOV qword ptr [RBP + -0x28],RAX
	00029991:CMP byte ptr [RBP + -0x78],0x0
	00029995:JZ 0x00029aca
	0002999b:MOVZX EAX,byte ptr [RBP + -0x6e]
	0002999f:XOR EAX,0x1
	000299a2:TEST AL,AL
	000299a4:JZ 0x00029aca
	000299aa:CMP byte ptr [RBP + -0x77],0x0
	000299ae:JNZ 0x00029ee9
	000299b4:MOV byte ptr [RBP + -0x70],0x1
	000299b8:CMP dword ptr [RBP + -0xa4],0x2
	000299bf:JNZ 0x00029a39
	000299c1:MOVZX EAX,byte ptr [RBP + -0x76]
	000299c5:XOR EAX,0x1
	000299c8:TEST AL,AL
	000299ca:JZ 0x00029a39
	000299cc:MOV RAX,qword ptr [RBP + -0x60]
	000299d0:CMP RAX,qword ptr [RBP + -0x90]
	000299d7:JNC 0x000299ea
	000299d9:MOV RDX,qword ptr [RBP + -0x88]
	000299e0:MOV RAX,qword ptr [RBP + -0x60]
	000299e4:ADD RAX,RDX
	000299e7:MOV byte ptr [RAX],0x27
	000299ea:ADD qword ptr [RBP + -0x60],0x1
	000299ef:MOV RAX,qword ptr [RBP + -0x60]
	000299f3:CMP RAX,qword ptr [RBP + -0x90]
	000299fa:JNC 0x00029a0d
	000299fc:MOV RDX,qword ptr [RBP + -0x88]
	00029a03:MOV RAX,qword ptr [RBP + -0x60]
	00029a07:ADD RAX,RDX
	00029a0a:MOV byte ptr [RAX],0x24
	00029a0d:ADD qword ptr [RBP + -0x60],0x1
	00029a12:MOV RAX,qword ptr [RBP + -0x60]
	00029a16:CMP RAX,qword ptr [RBP + -0x90]
	00029a1d:JNC 0x00029a30
	00029a1f:MOV RDX,qword ptr [RBP + -0x88]
	00029a26:MOV RAX,qword ptr [RBP + -0x60]
	00029a2a:ADD RAX,RDX
	00029a2d:MOV byte ptr [RAX],0x27
	00029a30:ADD qword ptr [RBP + -0x60],0x1
	00029a35:MOV byte ptr [RBP + -0x76],0x1
	00029a39:MOV RAX,qword ptr [RBP + -0x60]
	00029a3d:CMP RAX,qword ptr [RBP + -0x90]
	00029a44:JNC 0x00029a57
	00029a46:MOV RDX,qword ptr [RBP + -0x88]
	00029a4d:MOV RAX,qword ptr [RBP + -0x60]
	00029a51:ADD RAX,RDX
	00029a54:MOV byte ptr [RAX],0x5c
	00029a57:ADD qword ptr [RBP + -0x60],0x1
	00029a5c:MOV RAX,qword ptr [RBP + -0x60]
	00029a60:CMP RAX,qword ptr [RBP + -0x90]
	00029a67:JNC 0x00029a85
	00029a69:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a6d:SHR AL,0x6
	00029a70:LEA ECX,[RAX + 0x30]
	00029a73:MOV RDX,qword ptr [RBP + -0x88]
	00029a7a:MOV RAX,qword ptr [RBP + -0x60]
	00029a7e:ADD RAX,RDX
	00029a81:MOV EDX,ECX
	00029a83:MOV byte ptr [RAX],DL
	00029a85:ADD qword ptr [RBP + -0x60],0x1
	00029a8a:MOV RAX,qword ptr [RBP + -0x60]
	00029a8e:CMP RAX,qword ptr [RBP + -0x90]
	00029a95:JNC 0x00029ab6
	00029a97:MOVZX EAX,byte ptr [RBP + -0x73]
	00029a9b:SHR AL,0x3
	00029a9e:AND EAX,0x7
	00029aa1:LEA ECX,[RAX + 0x30]
	00029aa4:MOV RDX,qword ptr [RBP + -0x88]
	00029aab:MOV RAX,qword ptr [RBP + -0x60]
	00029aaf:ADD RAX,RDX
	00029ab2:MOV EDX,ECX
	00029ab4:MOV byte ptr [RAX],DL
	00029ab6:ADD qword ptr [RBP + -0x60],0x1
	00029abb:MOVZX EAX,byte ptr [RBP + -0x73]
	00029abf:AND EAX,0x7
	00029ac2:ADD EAX,0x30
	00029ac5:MOV byte ptr [RBP + -0x73],AL
	00029ac8:JMP 0x00029af7
	00029aca:CMP byte ptr [RBP + -0x71],0x0
	00029ace:JZ 0x00029af7
	00029ad0:MOV RAX,qword ptr [RBP + -0x60]
	00029ad4:CMP RAX,qword ptr [RBP + -0x90]
	00029adb:JNC 0x00029aee
	00029add:MOV RDX,qword ptr [RBP + -0x88]
	00029ae4:MOV RAX,qword ptr [RBP + -0x60]
	00029ae8:ADD RAX,RDX
	00029aeb:MOV byte ptr [RAX],0x5c
	00029aee:ADD qword ptr [RBP + -0x60],0x1
	00029af3:MOV byte ptr [RBP + -0x71],0x0
	00029af7:MOV RAX,qword ptr [RBP + -0x68]
	00029afb:ADD RAX,0x1
	00029aff:CMP qword ptr [RBP + -0x28],RAX
	00029b03:JBE 0x00029ba8
	00029b09:CMP byte ptr [RBP + -0x76],0x0
	00029b0d:JZ 0x00029b64
	00029b0f:MOVZX EAX,byte ptr [RBP + -0x70]
	00029b13:XOR EAX,0x1
	00029b16:TEST AL,AL
	00029b18:JZ 0x00029b64
	00029b1a:MOV RAX,qword ptr [RBP + -0x60]
	00029b1e:CMP RAX,qword ptr [RBP + -0x90]
	00029b25:JNC 0x00029b38
	00029b27:MOV RDX,qword ptr [RBP + -0x88]
	00029b2e:MOV RAX,qword ptr [RBP + -0x60]
	00029b32:ADD RAX,RDX
	00029b35:MOV byte ptr [RAX],0x27
	00029b38:ADD qword ptr [RBP + -0x60],0x1
	00029b3d:MOV RAX,qword ptr [RBP + -0x60]
	00029b41:CMP RAX,qword ptr [RBP + -0x90]
	00029b48:JNC 0x00029b5b
	00029b4a:MOV RDX,qword ptr [RBP + -0x88]
	00029b51:MOV RAX,qword ptr [RBP + -0x60]
	00029b55:ADD RAX,RDX
	00029b58:MOV byte ptr [RAX],0x27
	00029b5b:ADD qword ptr [RBP + -0x60],0x1
	00029b60:MOV byte ptr [RBP + -0x76],0x0
	00029b64:MOV RAX,qword ptr [RBP + -0x60]
	00029b68:CMP RAX,qword ptr [RBP + -0x90]
	00029b6f:JNC 0x00029b85
	00029b71:MOV RDX,qword ptr [RBP + -0x88]
	00029b78:MOV RAX,qword ptr [RBP + -0x60]
	00029b7c:ADD RDX,RAX
	00029b7f:MOVZX EAX,byte ptr [RBP + -0x73]
	00029b83:MOV byte ptr [RDX],AL
	00029b85:ADD qword ptr [RBP + -0x60],0x1
	00029b8a:ADD qword ptr [RBP + -0x68],0x1
	00029b8f:MOV RDX,qword ptr [RBP + -0x98]
	00029b96:MOV RAX,qword ptr [RBP + -0x68]
	00029b9a:ADD RAX,RDX
	00029b9d:MOVZX EAX,byte ptr [RAX]
	00029ba0:MOV byte ptr [RBP + -0x73],AL
	00029ba3:JMP 0x00029991
	00029ba8:NOP
	00029ba9:JMP 0x00029ce4
	00029bae:NOP
	00029baf:JMP 0x00029bbe
	00029bb1:NOP
	00029bb2:JMP 0x00029bbe
	00029bb4:NOP
	00029bb5:JMP 0x00029bbe
	00029bb7:NOP
	00029bb8:JMP 0x00029bbe
	00029bba:NOP
	00029bbb:JMP 0x00029bbe
	00029bbd:NOP
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
	00029bc2:XOR EAX,0x1
	00029bc5:TEST AL,AL
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
401: if ((buffersize_local != 0) && (orig_buffersize == 0)) {
	000296e2:CMP qword ptr [RBP + -0x90],0x0
	000296ea:JZ 0x00029709
	000296ec:CMP qword ptr [RBP + -0x58],0x0
	000296f1:JNZ 0x00029709
END_OF_LINE
----------------------------------------------
402: orig_buffersize = buffersize_local;
	000296fa:MOV qword ptr [RBP + -0x58],RAX
END_OF_LINE
----------------------------------------------
403: buffersize_local = 0;
	000296fe:MOV qword ptr [RBP + -0x90],0x0
END_OF_LINE
----------------------------------------------
405: if (len < buffersize_local) {
	0002970d:CMP RAX,qword ptr [RBP + -0x90]
	00029714:JNC 0x00029727
END_OF_LINE
----------------------------------------------
406: buffer[len] = '\'';
	00029721:ADD RAX,RDX
	00029724:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
408: if (len + 1 < buffersize_local) {
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
END_OF_LINE
----------------------------------------------
409: buffer[len + 1] = '\\';
	00029727:ADD qword ptr [RBP + -0x60],0x1
	0002972c:MOV RAX,qword ptr [RBP + -0x60]
	00029730:CMP RAX,qword ptr [RBP + -0x90]
	00029737:JNC 0x0002974a
	00029739:MOV RDX,qword ptr [RBP + -0x88]
	00029740:MOV RAX,qword ptr [RBP + -0x60]
	00029744:ADD RAX,RDX
	00029747:MOV byte ptr [RAX],0x5c
END_OF_LINE
----------------------------------------------
411: if (len + 2 < buffersize_local) {
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
END_OF_LINE
----------------------------------------------
412: buffer[len + 2] = '\'';
	0002974a:ADD qword ptr [RBP + -0x60],0x1
	0002974f:MOV RAX,qword ptr [RBP + -0x60]
	00029753:CMP RAX,qword ptr [RBP + -0x90]
	0002975a:JNC 0x0002976d
	0002975c:MOV RDX,qword ptr [RBP + -0x88]
	00029763:MOV RAX,qword ptr [RBP + -0x60]
	00029767:ADD RAX,RDX
	0002976a:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
414: len = len + 3;
	0002976d:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
415: bVar3 = false;
	00029772:MOV byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
416: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
417: case '?':
	00029465:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
418: if (quoting_style_local == shell_always_quoting_style) goto joined_r0x00029480;
	00029465:CMP dword ptr [RBP + -0xa4],0x2
	0002946c:JZ 0x0002947c
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
END_OF_LINE
----------------------------------------------
419: if ((((quoting_style_local == c_quoting_style) && ((flags & 4U) != 0)) &&
	0002946e:CMP dword ptr [RBP + -0xa4],0x5
	00029475:JZ 0x0002948b
	00029477:JMP 0x000295d6
	0002947c:CMP byte ptr [RBP + -0x77],0x0
	00029480:JZ 0x000295cf
	00029486:JMP 0x00029ee9
	0002948b:MOV EAX,dword ptr [RBP + -0xa8]
	00029491:AND EAX,0x4
	00029494:TEST EAX,EAX
	00029496:JZ 0x000295d5
	0002949c:MOV RAX,qword ptr [RBP + -0x68]
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
	0002950c:SETNZ AL
	0002950f:TEST AL,AL
	00029511:JZ 0x000295cc
END_OF_LINE
----------------------------------------------
420: ((i + 2 < argsize_local && ((arg[i + 1] == '?' && ((byte)arg[i + 2] < 0x3f)))))) &&
	000294a0:ADD RAX,0x2
	000294a4:CMP qword ptr [RBP + -0xa0],RAX
	000294ab:JBE 0x000295d5
	000294b1:MOV RAX,qword ptr [RBP + -0x68]
	000294b5:LEA RDX,[RAX + 0x1]
	000294b9:MOV RAX,qword ptr [RBP + -0x98]
	000294c0:ADD RAX,RDX
	000294c3:MOVZX EAX,byte ptr [RAX]
	000294c6:CMP AL,0x3f
	000294c8:JNZ 0x000295d5
	000294ce:MOV RAX,qword ptr [RBP + -0x68]
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
END_OF_LINE
----------------------------------------------
421: ((0x7000a38200000000U >> (arg[i + 2] & 0x3fU) & 1) != 0)) {
	000294d2:LEA RDX,[RAX + 0x2]
	000294d6:MOV RAX,qword ptr [RBP + -0x98]
	000294dd:ADD RAX,RDX
	000294e0:MOVZX EAX,byte ptr [RAX]
	000294e3:MOVSX EAX,AL
	000294e6:CMP EAX,0x3e
	000294e9:SETA DL
	000294ec:TEST DL,DL
	000294ee:JNZ 0x000295cc
	000294f4:MOV RDX,0x7000a38200000000
	000294fe:MOV ECX,EAX
	00029500:SHR RDX,CL
	00029503:MOV RAX,RDX
	00029506:AND EAX,0x1
	00029509:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
422: if (!bVar13) {
	0002951b:JNZ 0x00029edf
END_OF_LINE
----------------------------------------------
423: c = arg[i + 2];
	00029525:LEA RDX,[RAX + 0x2]
	00029529:MOV RAX,qword ptr [RBP + -0x98]
	00029530:ADD RAX,RDX
	00029533:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
424: i = i + 2;
	00029539:ADD qword ptr [RBP + -0x68],0x2
END_OF_LINE
----------------------------------------------
425: if (len < buffersize_local) {
	00029542:CMP RAX,qword ptr [RBP + -0x90]
	00029549:JNC 0x0002955c
END_OF_LINE
----------------------------------------------
426: buffer[len] = '?';
	00029556:ADD RAX,RDX
	00029559:MOV byte ptr [RAX],0x3f
END_OF_LINE
----------------------------------------------
428: if (len + 1 < buffersize_local) {
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
END_OF_LINE
----------------------------------------------
429: buffer[len + 1] = '\"';
	0002955c:ADD qword ptr [RBP + -0x60],0x1
	00029561:MOV RAX,qword ptr [RBP + -0x60]
	00029565:CMP RAX,qword ptr [RBP + -0x90]
	0002956c:JNC 0x0002957f
	0002956e:MOV RDX,qword ptr [RBP + -0x88]
	00029575:MOV RAX,qword ptr [RBP + -0x60]
	00029579:ADD RAX,RDX
	0002957c:MOV byte ptr [RAX],0x22
END_OF_LINE
----------------------------------------------
431: if (len + 2 < buffersize_local) {
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
END_OF_LINE
----------------------------------------------
432: buffer[len + 2] = '\"';
	0002957f:ADD qword ptr [RBP + -0x60],0x1
	00029584:MOV RAX,qword ptr [RBP + -0x60]
	00029588:CMP RAX,qword ptr [RBP + -0x90]
	0002958f:JNC 0x000295a2
	00029591:MOV RDX,qword ptr [RBP + -0x88]
	00029598:MOV RAX,qword ptr [RBP + -0x60]
	0002959c:ADD RAX,RDX
	0002959f:MOV byte ptr [RAX],0x22
END_OF_LINE
----------------------------------------------
434: if (len + 3 < buffersize_local) {
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
END_OF_LINE
----------------------------------------------
435: buffer[len + 3] = '?';
	000295a2:ADD qword ptr [RBP + -0x60],0x1
	000295a7:MOV RAX,qword ptr [RBP + -0x60]
	000295ab:CMP RAX,qword ptr [RBP + -0x90]
	000295b2:JNC 0x000295c5
	000295b4:MOV RDX,qword ptr [RBP + -0x88]
	000295bb:MOV RAX,qword ptr [RBP + -0x60]
	000295bf:ADD RAX,RDX
	000295c2:MOV byte ptr [RAX],0x3f
END_OF_LINE
----------------------------------------------
437: len = len + 4;
	000295c5:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
438: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
440: goto LAB_00029ee9;
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
442: goto LAB_00029bbe;
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
444: if (bVar2) {
	00029654:JZ 0x00029bb1
END_OF_LINE
----------------------------------------------
445: c = esc;
	0002965e:MOV byte ptr [RBP + -0x73],AL
END_OF_LINE
----------------------------------------------
446: LAB_00029c29:
	00029c29:CMP byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
447: if (bVar13) goto LAB_00029ee9;
	00029c2d:JNZ 0x00029ee9
	00029c33:MOV byte ptr [RBP + -0x70],0x1
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
	00029c4b:MOV RAX,qword ptr [RBP + -0x60]
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
	00029c58:MOV RDX,qword ptr [RBP + -0x88]
	00029c5f:MOV RAX,qword ptr [RBP + -0x60]
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
	00029caf:ADD qword ptr [RBP + -0x60],0x1
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
	00029cb8:MOV RAX,qword ptr [RBP + -0x60]
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
	00029cc5:MOV RDX,qword ptr [RBP + -0x88]
	00029ccc:MOV RAX,qword ptr [RBP + -0x60]
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
	00029cdb:JMP 0x00029ce4
	00029cdd:NOP
	00029cde:JMP 0x00029ce4
	00029ce0:NOP
	00029ce1:JMP 0x00029ce4
	00029ce3:NOP
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
	00029cf5:MOV RAX,qword ptr [RBP + -0x60]
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
	00029d02:MOV RDX,qword ptr [RBP + -0x88]
	00029d09:MOV RAX,qword ptr [RBP + -0x60]
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
	00029d36:ADD qword ptr [RBP + -0x60],0x1
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
	00029d3f:MOV RAX,qword ptr [RBP + -0x60]
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
	00029d4c:MOV RDX,qword ptr [RBP + -0x88]
	00029d53:MOV RAX,qword ptr [RBP + -0x60]
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
	00029d60:ADD qword ptr [RBP + -0x60],0x1
	00029d65:MOVZX EAX,byte ptr [RBP + -0x6f]
	00029d69:XOR EAX,0x1
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
	00029d70:MOV byte ptr [RBP + -0x74],0x0
	00029d74:ADD qword ptr [RBP + -0x68],0x1
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
	00029d81:JNZ 0x00029d9b
	00029d83:MOV RDX,qword ptr [RBP + -0x98]
	00029d8a:MOV RAX,qword ptr [RBP + -0x68]
	00029d8e:ADD RAX,RDX
	00029d91:MOVZX EAX,byte ptr [RAX]
	00029d94:TEST AL,AL
	00029d96:SETNZ AL
	00029d99:JMP 0x00029da9
	00029d9b:MOV RAX,qword ptr [RBP + -0x68]
	00029d9f:CMP RAX,qword ptr [RBP + -0xa0]
	00029da6:SETNZ AL
	00029da9:TEST AL,AL
	00029dab:JNZ 0x0002913f
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
	00029ded:CMP byte ptr [RBP + -0x74],0x0
	00029df1:JZ 0x00029e42
	00029df3:MOV EDI,dword ptr [RBP + -0xa8]
	00029df9:MOV RCX,qword ptr [RBP + -0xa0]
	00029e00:MOV RDX,qword ptr [RBP + -0x98]
	00029e07:MOV RSI,qword ptr [RBP + -0x58]
	00029e0b:MOV RAX,qword ptr [RBP + -0x88]
	00029e12:SUB RSP,0x8
	00029e16:PUSH qword ptr [RBP + -0xc0]
	00029e1c:PUSH qword ptr [RBP + -0xb8]
	00029e22:PUSH qword ptr [RBP + -0xb0]
	00029e28:MOV R9D,EDI
	00029e2b:MOV R8D,0x5
	00029e31:MOV RDI,RAX
	00029e34:CALL 0x00028eb9
	00029e39:ADD RSP,0x20
	00029e3d:JMP 0x00029f54
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
	00029e53:MOV RAX,qword ptr [RBP + -0x58]
	00029e57:MOV qword ptr [RBP + -0x90],RAX
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
	00029e66:JMP 0x00028f73
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
	00029e7d:JMP 0x00029ead
	00029e7f:MOV RAX,qword ptr [RBP + -0x60]
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
	00029e8c:MOV RDX,qword ptr [RBP + -0x88]
	00029e93:MOV RAX,qword ptr [RBP + -0x60]
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
	00029eb8:MOV RAX,qword ptr [RBP + -0x60]
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
	00029ec5:MOV RDX,qword ptr [RBP + -0x88]
	00029ecc:MOV RAX,qword ptr [RBP + -0x60]
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
	00029ed6:MOV RAX,qword ptr [RBP + -0x60]
	00029eda:JMP 0x00029f54
	00029edc:NOP
	00029edd:JMP 0x00029ee9
	00029edf:NOP
	00029ee0:JMP 0x00029ee9
	00029ee2:NOP
	00029ee3:JMP 0x00029ee9
	00029ee5:NOP
	00029ee6:JMP 0x00029ee9
	00029ee8:NOP
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
448: bVar5 = true;
	00029c33:MOV byte ptr [RBP + -0x70],0x1
END_OF_LINE
----------------------------------------------
449: if ((quoting_style_local == shell_always_quoting_style) && (!bVar3)) {
	00029c37:CMP dword ptr [RBP + -0xa4],0x2
	00029c3e:JNZ 0x00029cb8
	00029c40:MOVZX EAX,byte ptr [RBP + -0x76]
	00029c44:XOR EAX,0x1
	00029c47:TEST AL,AL
	00029c49:JZ 0x00029cb8
END_OF_LINE
----------------------------------------------
450: if (len < buffersize_local) {
	00029c4f:CMP RAX,qword ptr [RBP + -0x90]
	00029c56:JNC 0x00029c69
END_OF_LINE
----------------------------------------------
451: buffer[len] = '\'';
	00029c63:ADD RAX,RDX
	00029c66:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
453: if (len + 1 < buffersize_local) {
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
END_OF_LINE
----------------------------------------------
454: buffer[len + 1] = '$';
	00029c69:ADD qword ptr [RBP + -0x60],0x1
	00029c6e:MOV RAX,qword ptr [RBP + -0x60]
	00029c72:CMP RAX,qword ptr [RBP + -0x90]
	00029c79:JNC 0x00029c8c
	00029c7b:MOV RDX,qword ptr [RBP + -0x88]
	00029c82:MOV RAX,qword ptr [RBP + -0x60]
	00029c86:ADD RAX,RDX
	00029c89:MOV byte ptr [RAX],0x24
END_OF_LINE
----------------------------------------------
456: if (len + 2 < buffersize_local) {
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
END_OF_LINE
----------------------------------------------
457: buffer[len + 2] = '\'';
	00029c8c:ADD qword ptr [RBP + -0x60],0x1
	00029c91:MOV RAX,qword ptr [RBP + -0x60]
	00029c95:CMP RAX,qword ptr [RBP + -0x90]
	00029c9c:JNC 0x00029caf
	00029c9e:MOV RDX,qword ptr [RBP + -0x88]
	00029ca5:MOV RAX,qword ptr [RBP + -0x60]
	00029ca9:ADD RAX,RDX
	00029cac:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
459: len = len + 3;
	00029caf:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
460: bVar3 = true;
	00029cb4:MOV byte ptr [RBP + -0x76],0x1
END_OF_LINE
----------------------------------------------
462: if (len < buffersize_local) {
	00029cbc:CMP RAX,qword ptr [RBP + -0x90]
	00029cc3:JNC 0x00029cd6
END_OF_LINE
----------------------------------------------
463: buffer[len] = '\\';
	00029cd0:ADD RAX,RDX
	00029cd3:MOV byte ptr [RAX],0x5c
END_OF_LINE
----------------------------------------------
465: len = len + 1;
	00029cd6:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
468: LAB_00029bbe:
	00029bbe:MOVZX EAX,byte ptr [RBP + -0x78]
END_OF_LINE
----------------------------------------------
469: if (((((bVar2) && (quoting_style_local != shell_always_quoting_style)) || (bVar13)) &&
	00029bc7:JNZ 0x00029bd2
	00029bc9:CMP dword ptr [RBP + -0xa4],0x2
	00029bd0:JNZ 0x00029bdd
	00029bd2:MOVZX EAX,byte ptr [RBP + -0x77]
	00029bd6:XOR EAX,0x1
	00029bd9:TEST AL,AL
	00029bdb:JNZ 0x00029c19
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
	00029c17:JNZ 0x00029c28
	00029c19:MOVZX EAX,byte ptr [RBP + -0x71]
	00029c1d:XOR EAX,0x1
	00029c20:TEST AL,AL
	00029c22:JNZ 0x00029ce3
END_OF_LINE
----------------------------------------------
470: ((quote_these_too != (uint *)0x0 && ((quote_these_too[c >> 5] >> (c & 0x1f) & 1) != 0)))) ||
	00029bdd:CMP qword ptr [RBP + -0xb0],0x0
	00029be5:JZ 0x00029c19
	00029be7:MOVZX EAX,byte ptr [RBP + -0x73]
	00029beb:SHR AL,0x5
	00029bee:MOVZX EAX,AL
	00029bf1:LEA RDX,[RAX*0x4]
	00029bf9:MOV RAX,qword ptr [RBP + -0xb0]
	00029c00:ADD RAX,RDX
	00029c03:MOV EDX,dword ptr [RAX]
	00029c05:MOVZX EAX,byte ptr [RBP + -0x73]
	00029c09:AND EAX,0x1f
	00029c0c:MOV ECX,EAX
	00029c0e:SHR EDX,CL
	00029c10:MOV EAX,EDX
	00029c12:AND EAX,0x1
	00029c15:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
471: (bVar4)) goto LAB_00029c29;
	00029c22:JNZ 0x00029ce3
	00029c28:NOP
	00029c29:CMP byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
473: LAB_00029ce4:
	00029ce4:CMP byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
474: if ((bVar3) && (!bVar5)) {
	00029ce8:JZ 0x00029d3f
	00029cea:MOVZX EAX,byte ptr [RBP + -0x70]
	00029cee:XOR EAX,0x1
	00029cf1:TEST AL,AL
	00029cf3:JZ 0x00029d3f
END_OF_LINE
----------------------------------------------
475: if (len < buffersize_local) {
	00029cf9:CMP RAX,qword ptr [RBP + -0x90]
	00029d00:JNC 0x00029d13
END_OF_LINE
----------------------------------------------
476: buffer[len] = '\'';
	00029d0d:ADD RAX,RDX
	00029d10:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
478: if (len + 1 < buffersize_local) {
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
END_OF_LINE
----------------------------------------------
479: buffer[len + 1] = '\'';
	00029d13:ADD qword ptr [RBP + -0x60],0x1
	00029d18:MOV RAX,qword ptr [RBP + -0x60]
	00029d1c:CMP RAX,qword ptr [RBP + -0x90]
	00029d23:JNC 0x00029d36
	00029d25:MOV RDX,qword ptr [RBP + -0x88]
	00029d2c:MOV RAX,qword ptr [RBP + -0x60]
	00029d30:ADD RAX,RDX
	00029d33:MOV byte ptr [RAX],0x27
END_OF_LINE
----------------------------------------------
481: len = len + 2;
	00029d36:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
482: bVar3 = false;
	00029d3b:MOV byte ptr [RBP + -0x76],0x0
END_OF_LINE
----------------------------------------------
484: if (len < buffersize_local) {
	00029d43:CMP RAX,qword ptr [RBP + -0x90]
	00029d4a:JNC 0x00029d60
END_OF_LINE
----------------------------------------------
485: buffer[len] = c;
	00029d57:ADD RDX,RAX
	00029d5a:MOVZX EAX,byte ptr [RBP + -0x73]
	00029d5e:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
487: len = len + 1;
	00029d60:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
488: if (!bVar15) {
	00029d6c:TEST AL,AL
	00029d6e:JZ 0x00029d74
END_OF_LINE
----------------------------------------------
489: bVar7 = false;
	00029d70:MOV byte ptr [RBP + -0x74],0x0
END_OF_LINE
----------------------------------------------
491: LAB_00029d74:
	00029d74:ADD qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
492: i = i + 1;
	00029d74:ADD qword ptr [RBP + -0x68],0x1
END_OF_LINE
----------------------------------------------
493: goto LAB_00029d79;
	00029d79:CMP qword ptr [RBP + -0xa0],-0x1
END_OF_LINE
----------------------------------------------
494: LAB_000298ac:
	000298ac:CMP byte ptr [RBP + -0x77],0x0
END_OF_LINE
----------------------------------------------
495: if ((bVar13) && (quoting_style_local == shell_always_quoting_style)) {
	000298b0:JZ 0x00029927
	000298b2:CMP dword ptr [RBP + -0xa4],0x2
	000298b9:JNZ 0x00029927
END_OF_LINE
----------------------------------------------
496: for (j = 1; j < bytes; j = j + 1) {
	000298bb:MOV qword ptr [RBP + -0x38],0x1
	000298c3:JMP 0x0002991d
	000298c5:MOV RDX,qword ptr [RBP + -0x68]
	000298c9:MOV RAX,qword ptr [RBP + -0x40]
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
	00029917:NOP
	00029918:ADD qword ptr [RBP + -0x38],0x1
	0002991d:MOV RAX,qword ptr [RBP + -0x38]
	00029921:CMP RAX,qword ptr [RBP + -0x30]
	00029925:JC 0x000298c5
END_OF_LINE
----------------------------------------------
497: if (((int)arg[i + m + j] - 0x5bU < 0x22) &&
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
	0002990c:SETNZ AL
	0002990f:TEST AL,AL
	00029911:JNZ 0x00029ee9
END_OF_LINE
----------------------------------------------
498: ((0x20000002bU >> ((byte)((int)arg[i + m + j] - 0x5bU) & 0x3f) & 1) != 0))
	000298cd:ADD RDX,RAX
	000298d0:MOV RAX,qword ptr [RBP + -0x38]
	000298d4:ADD RDX,RAX
	000298d7:MOV RAX,qword ptr [RBP + -0x98]
	000298de:ADD RAX,RDX
	000298e1:MOVZX EAX,byte ptr [RAX]
	000298e4:MOVSX EAX,AL
	000298e7:SUB EAX,0x5b
	000298ea:CMP EAX,0x21
	000298ed:SETA DL
	000298f0:TEST DL,DL
	000298f2:JNZ 0x00029917
	000298f4:MOV RDX,0x20000002b
	000298fe:MOV ECX,EAX
	00029900:SHR RDX,CL
	00029903:MOV RAX,RDX
	00029906:AND EAX,0x1
	00029909:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
499: goto LAB_00029ee9;
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
502: iVar8 = FUN_00006050(w);
	0002992c:CALL 0x00006050
END_OF_LINE
----------------------------------------------
503: if (iVar8 == 0) {
	00029931:TEST EAX,EAX
	00029933:JNZ 0x00029939
END_OF_LINE
----------------------------------------------
504: bVar15 = false;
	00029935:MOV byte ptr [RBP + -0x6e],0x0
END_OF_LINE
----------------------------------------------
506: m = m + bytes;
	0002993d:ADD qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
507: iVar8 = FUN_00006030(&mbstate);
	00029941:LEA RAX,[RBP + -0x20]
	00029945:MOV RDI,RAX
	00029948:CALL 0x00006030
END_OF_LINE
----------------------------------------------
508: if (iVar8 != 0) goto LAB_0002995b;
	0002994d:TEST EAX,EAX
	0002994f:JZ 0x000297fe
	00029955:JMP 0x0002995b
	00029957:NOP
	00029958:JMP 0x0002995b
	0002995a:NOP
	0002995b:MOVZX EAX,byte ptr [RBP + -0x6e]
END_OF_LINE
----------------------------------------------
509: goto LAB_000297fe;
	000297fe:MOV RDX,qword ptr [RBP + -0x68]
END_OF_LINE
----------------------------------------------
510: code_r0x00029db1:
	00029db1:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
511: if (((len == 0) && (quoting_style_local == shell_always_quoting_style)) && (bVar13)) {
	00029db1:CMP qword ptr [RBP + -0x60],0x0
	00029db6:JNZ 0x00029dcb
	00029db8:CMP dword ptr [RBP + -0xa4],0x2
	00029dbf:JNZ 0x00029dcb
	00029dc1:CMP byte ptr [RBP + -0x77],0x0
	00029dc5:JNZ 0x00029ee8
END_OF_LINE
----------------------------------------------
512: LAB_00029ee9:
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
END_OF_LINE
----------------------------------------------
513: if ((quoting_style_local == shell_always_quoting_style) && (bVar2)) {
	00029ee9:CMP dword ptr [RBP + -0xa4],0x2
	00029ef0:JNZ 0x00029f02
	00029ef2:CMP byte ptr [RBP + -0x78],0x0
	00029ef6:JZ 0x00029f02
END_OF_LINE
----------------------------------------------
514: quoting_style_local = shell_escape_always_quoting_style;
	00029ef8:MOV dword ptr [RBP + -0xa4],0x4
END_OF_LINE
----------------------------------------------
516: sVar11 = quotearg_buffer_restyled
	00029f4b:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
517: (buffer,buffersize_local,arg,argsize_local,quoting_style_local,
	00029f4b:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
518: flags & 0xfffffffd,(uint *)0x0,left_quote_local,right_quote_local);
	00029f08:AND EAX,0xfffffffd
	00029f0b:MOV R8D,EAX
	00029f0e:MOV EDI,dword ptr [RBP + -0xa4]
	00029f14:MOV RCX,qword ptr [RBP + -0xa0]
	00029f1b:MOV RDX,qword ptr [RBP + -0x98]
	00029f22:MOV RSI,qword ptr [RBP + -0x90]
	00029f29:MOV RAX,qword ptr [RBP + -0x88]
	00029f30:SUB RSP,0x8
	00029f34:PUSH qword ptr [RBP + -0xc0]
	00029f3a:PUSH qword ptr [RBP + -0xb8]
	00029f40:PUSH 0x0
	00029f42:MOV R9D,R8D
	00029f45:MOV R8D,EDI
	00029f48:MOV RDI,RAX
	00029f4b:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
519: goto LAB_00029f54;
	00029f54:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
521: if (((quoting_style_local == shell_always_quoting_style) && (!bVar13)) && (bVar6)) {
	00029dcb:CMP dword ptr [RBP + -0xa4],0x2
	00029dd2:JNZ 0x00029e6b
	00029dd8:MOVZX EAX,byte ptr [RBP + -0x77]
	00029ddc:XOR EAX,0x1
	00029ddf:TEST AL,AL
	00029de1:JZ 0x00029e6b
	00029de7:CMP byte ptr [RBP + -0x75],0x0
	00029deb:JZ 0x00029e6b
END_OF_LINE
----------------------------------------------
522: if (bVar7) {
	00029df1:JZ 0x00029e42
END_OF_LINE
----------------------------------------------
523: sVar11 = quotearg_buffer_restyled
	00029e34:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
524: (buffer,orig_buffersize,arg,argsize_local,c_quoting_style,flags,
	00029e34:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
525: quote_these_too,left_quote_local,right_quote_local);
	00029e34:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
526: goto LAB_00029f54;
	00029f54:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
528: if ((buffersize_local == 0) && (orig_buffersize != 0)) {
	00029e42:CMP qword ptr [RBP + -0x90],0x0
	00029e4a:JNZ 0x00029e6b
	00029e4c:CMP qword ptr [RBP + -0x58],0x0
	00029e51:JZ 0x00029e6b
END_OF_LINE
----------------------------------------------
529: buffersize_local = orig_buffersize;
	00029e57:MOV qword ptr [RBP + -0x90],RAX
END_OF_LINE
----------------------------------------------
530: len = 0;
	00029e5e:MOV qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
531: goto LAB_00028f73;
	00028f73:CMP dword ptr [RBP + -0xa4],0xa
END_OF_LINE
----------------------------------------------
534: if ((quote_string != (char *)0x0) && (!bVar13)) {
	00029e6b:CMP qword ptr [RBP + -0x50],0x0
	00029e70:JZ 0x00029eb8
	00029e72:MOVZX EAX,byte ptr [RBP + -0x77]
	00029e76:XOR EAX,0x1
	00029e79:TEST AL,AL
	00029e7b:JZ 0x00029eb8
END_OF_LINE
----------------------------------------------
535: for (; *quote_string != '\0'; quote_string = quote_string + 1) {
	00029ea8:ADD qword ptr [RBP + -0x50],0x1
	00029ead:MOV RAX,qword ptr [RBP + -0x50]
	00029eb1:MOVZX EAX,byte ptr [RAX]
	00029eb4:TEST AL,AL
	00029eb6:JNZ 0x00029e7f
END_OF_LINE
----------------------------------------------
536: if (len < buffersize_local) {
	00029e83:CMP RAX,qword ptr [RBP + -0x90]
	00029e8a:JNC 0x00029ea3
END_OF_LINE
----------------------------------------------
537: buffer[len] = *quote_string;
	00029e97:ADD RDX,RAX
	00029e9a:MOV RAX,qword ptr [RBP + -0x50]
	00029e9e:MOVZX EAX,byte ptr [RAX]
	00029ea1:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
539: len = len + 1;
	00029ea3:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
542: sVar11 = len;
	00029ec3:JNC 0x00029ed6
END_OF_LINE
----------------------------------------------
543: if (len < buffersize_local) {
	00029ebc:CMP RAX,qword ptr [RBP + -0x90]
	00029ec3:JNC 0x00029ed6
END_OF_LINE
----------------------------------------------
544: buffer[len] = '\0';
	00029ed0:ADD RAX,RDX
	00029ed3:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
546: LAB_00029f54:
	00029f54:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
547: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00029f58:SUB RDX,qword ptr FS:[0x28]
	00029f61:JZ 0x00029f68
END_OF_LINE
----------------------------------------------
548: return sVar11;
	00029f6d:RET
END_OF_LINE
----------------------------------------------
551: __stack_chk_fail();
	00029f63:CALL 0x00005b00
END_OF_LINE



Function: quotearg_buffer
----------------------------------------------
17: if (o == (quoting_options *)0x0) {
	00029f8e:CMP qword ptr [RBP + -0x48],0x0
	00029f93:JZ 0x00029f9b
END_OF_LINE
----------------------------------------------
18: o = &default_quoting_options;
	00029f9b:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
20: piVar2 = __errno_location();
	00029fa6:CALL 0x00005900
END_OF_LINE
----------------------------------------------
21: iVar1 = *piVar2;
	00029fab:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: sVar3 = quotearg_buffer_restyled
	00029ff9:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
23: (buffer,buffersize,arg,argsize,o->style,o->flags,o->quote_these_too,
	00029fc4:LEA R9,[RAX + 0x8]
	00029fc8:MOV RAX,qword ptr [RBP + -0x10]
	00029fcc:MOV R11D,dword ptr [RAX + 0x4]
	00029fd0:MOV RAX,qword ptr [RBP + -0x10]
	00029fd4:MOV R10D,dword ptr [RAX]
	00029fd7:MOV RCX,qword ptr [RBP + -0x40]
	00029fdb:MOV RDX,qword ptr [RBP + -0x38]
	00029fdf:MOV RSI,qword ptr [RBP + -0x30]
	00029fe3:MOV RAX,qword ptr [RBP + -0x28]
	00029fe7:SUB RSP,0x8
	00029feb:PUSH R8
	00029fed:PUSH RDI
	00029fee:PUSH R9
	00029ff0:MOV R9D,R11D
	00029ff3:MOV R8D,R10D
	00029ff6:MOV RDI,RAX
	00029ff9:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
24: o->left_quote,o->right_quote);
	00029fb4:MOV R8,qword ptr [RAX + 0x30]
	00029fb8:MOV RAX,qword ptr [RBP + -0x10]
	00029fbc:MOV RDI,qword ptr [RAX + 0x28]
	00029fc0:MOV RAX,qword ptr [RBP + -0x10]
	00029fc4:LEA R9,[RAX + 0x8]
	00029fc8:MOV RAX,qword ptr [RBP + -0x10]
	00029fcc:MOV R11D,dword ptr [RAX + 0x4]
	00029fd0:MOV RAX,qword ptr [RBP + -0x10]
	00029fd4:MOV R10D,dword ptr [RAX]
	00029fd7:MOV RCX,qword ptr [RBP + -0x40]
	00029fdb:MOV RDX,qword ptr [RBP + -0x38]
	00029fdf:MOV RSI,qword ptr [RBP + -0x30]
	00029fe3:MOV RAX,qword ptr [RBP + -0x28]
	00029fe7:SUB RSP,0x8
	00029feb:PUSH R8
	00029fed:PUSH RDI
	00029fee:PUSH R9
	00029ff0:MOV R9D,R11D
	00029ff3:MOV R8D,R10D
	00029ff6:MOV RDI,RAX
	00029ff9:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
25: piVar2 = __errno_location();
	0002a006:CALL 0x00005900
END_OF_LINE
----------------------------------------------
26: *piVar2 = iVar1;
	0002a00e:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
27: return sVar3;
	0002a010:MOV RAX,qword ptr [RBP + -0x8]
	0002a014:LEAVE
	0002a015:RET
END_OF_LINE



Function: quotearg_alloc
----------------------------------------------
10: pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);
	0002a045:CALL 0x0002a04c
END_OF_LINE
----------------------------------------------
11: return pcVar1;
	0002a04b:RET
END_OF_LINE



Function: quotearg_alloc_mem
----------------------------------------------
20: if (o == (quoting_options *)0x0) {
	0002a068:CMP qword ptr [RBP + -0x40],0x0
	0002a06d:JZ 0x0002a075
END_OF_LINE
----------------------------------------------
21: o = &default_quoting_options;
	0002a075:LEA RAX,[0x42f60]
END_OF_LINE
----------------------------------------------
23: piVar2 = __errno_location();
	0002a080:CALL 0x00005900
END_OF_LINE
----------------------------------------------
24: iVar1 = *piVar2;
	0002a085:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
25: flags_00 = (uint)(size == (size_t *)0x0) | o->flags;
	0002a08e:MOV EDX,dword ptr [RAX + 0x4]
	0002a091:CMP qword ptr [RBP + -0x38],0x0
	0002a096:SETZ AL
	0002a099:MOVZX EAX,AL
	0002a09c:OR EAX,EDX
END_OF_LINE
----------------------------------------------
26: sVar3 = quotearg_buffer_restyled
	0002a0e3:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
27: ((char *)0x0,0,arg,argsize,o->style,flags_00,o->quote_these_too,o->left_quote,
	0002a0ad:MOV RCX,qword ptr [RAX + 0x28]
	0002a0b1:MOV RAX,qword ptr [RBP + -0x18]
	0002a0b5:LEA RDI,[RAX + 0x8]
	0002a0b9:MOV RAX,qword ptr [RBP + -0x18]
	0002a0bd:MOV R8D,dword ptr [RAX]
	0002a0c0:MOV R9D,dword ptr [RBP + -0x1c]
	0002a0c4:MOV RDX,qword ptr [RBP + -0x30]
	0002a0c8:MOV RAX,qword ptr [RBP + -0x28]
	0002a0cc:SUB RSP,0x8
	0002a0d0:PUSH RSI
	0002a0d1:PUSH RCX
	0002a0d2:PUSH RDI
	0002a0d3:MOV RCX,RDX
	0002a0d6:MOV RDX,RAX
	0002a0d9:MOV ESI,0x0
	0002a0de:MOV EDI,0x0
	0002a0e3:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
28: o->right_quote);
	0002a0a5:MOV RSI,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
29: buffer = xcharalloc(sVar3 + 1);
	0002a0ec:ADD RAX,0x1
	0002a0f0:MOV qword ptr [RBP + -0x10],RAX
	0002a0f4:MOV RAX,qword ptr [RBP + -0x10]
	0002a0f8:MOV RDI,RAX
	0002a0fb:CALL 0x0002bd25
END_OF_LINE
----------------------------------------------
30: quotearg_buffer_restyled
	0002a149:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
31: (buffer,sVar3 + 1,arg,argsize,o->style,flags_00,o->quote_these_too,o->left_quote,
	0002a0ec:ADD RAX,0x1
	0002a0f0:MOV qword ptr [RBP + -0x10],RAX
	0002a0f4:MOV RAX,qword ptr [RBP + -0x10]
	0002a0f8:MOV RDI,RAX
	0002a0fb:CALL 0x0002bd25
	0002a100:MOV qword ptr [RBP + -0x8],RAX
	0002a104:MOV RAX,qword ptr [RBP + -0x18]
	0002a108:MOV R8,qword ptr [RAX + 0x30]
	0002a10c:MOV RAX,qword ptr [RBP + -0x18]
	0002a110:MOV RDI,qword ptr [RAX + 0x28]
	0002a114:MOV RAX,qword ptr [RBP + -0x18]
	0002a118:LEA R9,[RAX + 0x8]
	0002a11c:MOV RAX,qword ptr [RBP + -0x18]
	0002a120:MOV R10D,dword ptr [RAX]
	0002a123:MOV R11D,dword ptr [RBP + -0x1c]
	0002a127:MOV RCX,qword ptr [RBP + -0x30]
	0002a12b:MOV RDX,qword ptr [RBP + -0x28]
	0002a12f:MOV RSI,qword ptr [RBP + -0x10]
	0002a133:MOV RAX,qword ptr [RBP + -0x8]
	0002a137:SUB RSP,0x8
	0002a13b:PUSH R8
	0002a13d:PUSH RDI
	0002a13e:PUSH R9
	0002a140:MOV R9D,R11D
	0002a143:MOV R8D,R10D
	0002a146:MOV RDI,RAX
	0002a149:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
32: o->right_quote);
	0002a108:MOV R8,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
33: piVar2 = __errno_location();
	0002a152:CALL 0x00005900
END_OF_LINE
----------------------------------------------
34: *piVar2 = iVar1;
	0002a15a:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
35: if (size != (size_t *)0x0) {
	0002a15c:CMP qword ptr [RBP + -0x38],0x0
	0002a161:JZ 0x0002a172
END_OF_LINE
----------------------------------------------
36: *size = sVar3;
	0002a16f:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
38: return buffer;
	0002a172:MOV RAX,qword ptr [RBP + -0x8]
	0002a176:LEAVE
	0002a177:RET
END_OF_LINE



Function: quotearg_free
----------------------------------------------
11: __ptr = slotvec;
	0002a17c:PUSH RBP
END_OF_LINE
----------------------------------------------
12: for (i = L'\x01'; i < nslots; i = i + L'\x01') {
	0002a18f:MOV dword ptr [RBP + -0xc],0x1
	0002a196:JMP 0x0002a1bb
	0002a198:MOV EAX,dword ptr [RBP + -0xc]
	0002a19b:CDQE
	0002a19d:SHL RAX,0x4
	0002a1a1:MOV RDX,RAX
	0002a1a4:MOV RAX,qword ptr [RBP + -0x8]
	0002a1a8:ADD RAX,RDX
	0002a1ab:MOV RAX,qword ptr [RAX + 0x8]
	0002a1af:MOV RDI,RAX
	0002a1b2:CALL 0x00005860
	0002a1b7:ADD dword ptr [RBP + -0xc],0x1
	0002a1bb:MOV EAX,dword ptr [0x0003e140]
	0002a1c1:CMP dword ptr [RBP + -0xc],EAX
	0002a1c4:JL 0x0002a198
END_OF_LINE
----------------------------------------------
13: free(__ptr[i].val);
	0002a19b:CDQE
	0002a19d:SHL RAX,0x4
	0002a1a1:MOV RDX,RAX
	0002a1a4:MOV RAX,qword ptr [RBP + -0x8]
	0002a1a8:ADD RAX,RDX
	0002a1ab:MOV RAX,qword ptr [RAX + 0x8]
	0002a1af:MOV RDI,RAX
	0002a1b2:CALL 0x00005860
END_OF_LINE
----------------------------------------------
15: if (__ptr->val != slot0) {
	0002a1ca:MOV RAX,qword ptr [RAX + 0x8]
	0002a1ce:LEA RDX,[0x42fa0]
	0002a1d5:CMP RAX,RDX
	0002a1d8:JZ 0x0002a203
END_OF_LINE
----------------------------------------------
16: free(__ptr->val);
	0002a1de:MOV RAX,qword ptr [RAX + 0x8]
	0002a1e2:MOV RDI,RAX
	0002a1e5:CALL 0x00005860
END_OF_LINE
----------------------------------------------
17: slotvec0.size = 0x100;
	0002a1ea:MOV qword ptr [0x0003e1a0],0x100
END_OF_LINE
----------------------------------------------
18: slotvec0.val = slot0;
	0002a1fc:MOV qword ptr [0x0003e1a8],RAX
END_OF_LINE
----------------------------------------------
20: if (__ptr != &slotvec0) {
	0002a20a:CMP qword ptr [RBP + -0x8],RAX
	0002a20e:JZ 0x0002a22a
END_OF_LINE
----------------------------------------------
21: free(__ptr);
	0002a217:CALL 0x00005860
END_OF_LINE
----------------------------------------------
22: slotvec = &slotvec0;
	0002a223:MOV qword ptr [0x0003e1b0],RAX
END_OF_LINE
----------------------------------------------
24: nslots = L'\x01';
	0002a22a:MOV dword ptr [0x0003e140],0x1
END_OF_LINE
----------------------------------------------
25: return;
	0002a236:RET
END_OF_LINE



Function: quotearg_n_options
----------------------------------------------
26: piVar3 = __errno_location();
	0002a252:CALL 0x00005900
END_OF_LINE
----------------------------------------------
27: iVar1 = *piVar3;
	0002a257:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
28: sv = slotvec;
	0002a263:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
29: if (n < L'\0') {
	0002a267:CMP dword ptr [RBP + -0x34],0x0
	0002a26b:JNS 0x0002a272
END_OF_LINE
----------------------------------------------
31: abort();
	0002a26d:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
33: if (nslots <= n) {
	0002a27b:JL 0x0002a345
END_OF_LINE
----------------------------------------------
34: bVar5 = slotvec == &slotvec0;
	0002a288:CMP qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
35: if (L'\x7ffffffe' < n) {
	0002a29f:JGE 0x0002a2a6
END_OF_LINE
----------------------------------------------
37: xalloc_die();
	0002a2a1:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
39: p = slotvec;
	0002a2b9:JZ 0x0002a2c2
END_OF_LINE
----------------------------------------------
40: if (bVar5) {
	0002a2b9:JZ 0x0002a2c2
END_OF_LINE
----------------------------------------------
41: p = (slotvec *)0x0;
	0002a2bb:MOV EAX,0x0
	0002a2c0:JMP 0x0002a2c6
END_OF_LINE
----------------------------------------------
43: sv = (slotvec *)xrealloc(p,(long)(n + L'\x01') << 4);
	0002a2a9:ADD EAX,0x1
	0002a2ac:CDQE
	0002a2ae:SHL RAX,0x4
	0002a2b2:MOV RDX,RAX
	0002a2b5:CMP byte ptr [RBP + -0x2d],0x0
	0002a2b9:JZ 0x0002a2c2
	0002a2bb:MOV EAX,0x0
	0002a2c0:JMP 0x0002a2c6
	0002a2c2:MOV RAX,qword ptr [RBP + -0x20]
	0002a2c6:MOV RSI,RDX
	0002a2c9:MOV RDI,RAX
	0002a2cc:CALL 0x0002bd7c
END_OF_LINE
----------------------------------------------
44: pcVar2 = slotvec0.val;
	0002a2cc:CALL 0x0002bd7c
END_OF_LINE
----------------------------------------------
45: slotvec = sv;
	0002a2e4:JZ 0x0002a2ff
END_OF_LINE
----------------------------------------------
46: if (bVar5) {
	0002a2e4:JZ 0x0002a2ff
END_OF_LINE
----------------------------------------------
47: sv->size = slotvec0.size;
	0002a2f8:MOV qword ptr [RCX],RAX
END_OF_LINE
----------------------------------------------
48: sv->val = pcVar2;
	0002a2fb:MOV qword ptr [RCX + 0x8],RDX
END_OF_LINE
----------------------------------------------
50: memset(sv + nslots,0,(long)((n + L'\x01') - nslots) << 4);
	0002a302:ADD EAX,0x1
	0002a305:MOV EDX,dword ptr [0x0003e140]
	0002a30b:SUB EAX,EDX
	0002a30d:CDQE
	0002a30f:SHL RAX,0x4
	0002a313:MOV RDX,RAX
	0002a316:MOV EAX,dword ptr [0x0003e140]
	0002a31c:CDQE
	0002a31e:SHL RAX,0x4
	0002a322:MOV RCX,RAX
	0002a325:MOV RAX,qword ptr [RBP + -0x20]
	0002a329:ADD RAX,RCX
	0002a32c:MOV ESI,0x0
	0002a331:MOV RDI,RAX
	0002a334:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
51: nslots = n + L'\x01';
	0002a33c:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
53: buffersize = sv[n].size;
	0002a348:CDQE
	0002a34a:SHL RAX,0x4
	0002a34e:MOV RDX,RAX
	0002a351:MOV RAX,qword ptr [RBP + -0x20]
	0002a355:ADD RAX,RDX
	0002a358:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
54: val = sv[n].val;
	0002a362:CDQE
	0002a364:SHL RAX,0x4
	0002a368:MOV RDX,RAX
	0002a36b:MOV RAX,qword ptr [RBP + -0x20]
	0002a36f:ADD RAX,RDX
	0002a372:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
55: flags_00 = options->flags | 1;
	0002a37e:MOV EAX,dword ptr [RAX + 0x4]
	0002a381:OR EAX,0x1
END_OF_LINE
----------------------------------------------
56: sVar4 = quotearg_buffer_restyled
	0002a3cc:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
57: (val,buffersize,arg,argsize,options->style,flags_00,options->quote_these_too,
	0002a39b:LEA R9,[RAX + 0x8]
	0002a39f:MOV RAX,qword ptr [RBP + -0x50]
	0002a3a3:MOV R10D,dword ptr [RAX]
	0002a3a6:MOV R11D,dword ptr [RBP + -0x24]
	0002a3aa:MOV RCX,qword ptr [RBP + -0x48]
	0002a3ae:MOV RDX,qword ptr [RBP + -0x40]
	0002a3b2:MOV RSI,qword ptr [RBP + -0x10]
	0002a3b6:MOV RAX,qword ptr [RBP + -0x18]
	0002a3ba:SUB RSP,0x8
	0002a3be:PUSH R8
	0002a3c0:PUSH RDI
	0002a3c1:PUSH R9
	0002a3c3:MOV R9D,R11D
	0002a3c6:MOV R8D,R10D
	0002a3c9:MOV RDI,RAX
	0002a3cc:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
58: options->left_quote,options->right_quote);
	0002a38b:MOV R8,qword ptr [RAX + 0x30]
	0002a38f:MOV RAX,qword ptr [RBP + -0x50]
	0002a393:MOV RDI,qword ptr [RAX + 0x28]
	0002a397:MOV RAX,qword ptr [RBP + -0x50]
	0002a39b:LEA R9,[RAX + 0x8]
	0002a39f:MOV RAX,qword ptr [RBP + -0x50]
	0002a3a3:MOV R10D,dword ptr [RAX]
	0002a3a6:MOV R11D,dword ptr [RBP + -0x24]
	0002a3aa:MOV RCX,qword ptr [RBP + -0x48]
	0002a3ae:MOV RDX,qword ptr [RBP + -0x40]
	0002a3b2:MOV RSI,qword ptr [RBP + -0x10]
	0002a3b6:MOV RAX,qword ptr [RBP + -0x18]
	0002a3ba:SUB RSP,0x8
	0002a3be:PUSH R8
	0002a3c0:PUSH RDI
	0002a3c1:PUSH R9
	0002a3c3:MOV R9D,R11D
	0002a3c6:MOV R8D,R10D
	0002a3c9:MOV RDI,RAX
	0002a3cc:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
59: if (buffersize <= sVar4) {
	0002a3e1:JA 0x0002a49f
END_OF_LINE
----------------------------------------------
60: sVar4 = sVar4 + 1;
	0002a3eb:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
61: sv[n].size = sVar4;
	0002a3f6:CDQE
	0002a3f8:SHL RAX,0x4
	0002a3fc:MOV RDX,RAX
	0002a3ff:MOV RAX,qword ptr [RBP + -0x20]
	0002a403:ADD RDX,RAX
	0002a406:MOV RAX,qword ptr [RBP + -0x10]
	0002a40a:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
62: if (val != slot0) {
	0002a414:CMP qword ptr [RBP + -0x18],RAX
	0002a418:JZ 0x0002a426
END_OF_LINE
----------------------------------------------
63: free(val);
	0002a421:CALL 0x00005860
END_OF_LINE
----------------------------------------------
65: val = xcharalloc(sVar4);
	0002a42d:CALL 0x0002bd25
END_OF_LINE
----------------------------------------------
66: sv[n].val = val;
	0002a439:CDQE
	0002a43b:SHL RAX,0x4
	0002a43f:MOV RDX,RAX
	0002a442:MOV RAX,qword ptr [RBP + -0x20]
	0002a446:ADD RDX,RAX
	0002a449:MOV RAX,qword ptr [RBP + -0x18]
	0002a44d:MOV qword ptr [RDX + 0x8],RAX
END_OF_LINE
----------------------------------------------
67: quotearg_buffer_restyled
	0002a496:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
68: (val,sVar4,arg,argsize,options->style,flags_00,options->quote_these_too,
	0002a465:LEA R9,[RAX + 0x8]
	0002a469:MOV RAX,qword ptr [RBP + -0x50]
	0002a46d:MOV R10D,dword ptr [RAX]
	0002a470:MOV R11D,dword ptr [RBP + -0x24]
	0002a474:MOV RCX,qword ptr [RBP + -0x48]
	0002a478:MOV RDX,qword ptr [RBP + -0x40]
	0002a47c:MOV RSI,qword ptr [RBP + -0x10]
	0002a480:MOV RAX,qword ptr [RBP + -0x18]
	0002a484:SUB RSP,0x8
	0002a488:PUSH R8
	0002a48a:PUSH RDI
	0002a48b:PUSH R9
	0002a48d:MOV R9D,R11D
	0002a490:MOV R8D,R10D
	0002a493:MOV RDI,RAX
	0002a496:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
69: options->left_quote,options->right_quote);
	0002a455:MOV R8,qword ptr [RAX + 0x30]
	0002a459:MOV RAX,qword ptr [RBP + -0x50]
	0002a45d:MOV RDI,qword ptr [RAX + 0x28]
	0002a461:MOV RAX,qword ptr [RBP + -0x50]
	0002a465:LEA R9,[RAX + 0x8]
	0002a469:MOV RAX,qword ptr [RBP + -0x50]
	0002a46d:MOV R10D,dword ptr [RAX]
	0002a470:MOV R11D,dword ptr [RBP + -0x24]
	0002a474:MOV RCX,qword ptr [RBP + -0x48]
	0002a478:MOV RDX,qword ptr [RBP + -0x40]
	0002a47c:MOV RSI,qword ptr [RBP + -0x10]
	0002a480:MOV RAX,qword ptr [RBP + -0x18]
	0002a484:SUB RSP,0x8
	0002a488:PUSH R8
	0002a48a:PUSH RDI
	0002a48b:PUSH R9
	0002a48d:MOV R9D,R11D
	0002a490:MOV R8D,R10D
	0002a493:MOV RDI,RAX
	0002a496:CALL 0x00028eb9
END_OF_LINE
----------------------------------------------
71: piVar3 = __errno_location();
	0002a49f:CALL 0x00005900
END_OF_LINE
----------------------------------------------
72: *piVar3 = iVar1;
	0002a4a7:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
73: return val;
	0002a4a9:MOV RAX,qword ptr [RBP + -0x18]
	0002a4ad:LEAVE
	0002a4ae:RET
END_OF_LINE



Function: quotearg_n
----------------------------------------------
9: pcVar1 = quotearg_n_options(n,arg,0xffffffffffffffff,&default_quoting_options);
	0002a4dc:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002a4e2:RET
END_OF_LINE



Function: quotearg_n_mem
----------------------------------------------
10: pcVar1 = quotearg_n_options(n,arg,argsize,&default_quoting_options);
	0002a50e:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
11: return pcVar1;
	0002a514:RET
END_OF_LINE



Function: quotearg
----------------------------------------------
8: pcVar1 = quotearg_n(L'\0',arg);
	0002a531:CALL 0x0002a4af
END_OF_LINE
----------------------------------------------
9: return pcVar1;
	0002a537:RET
END_OF_LINE



Function: quotearg_mem
----------------------------------------------
9: pcVar1 = quotearg_n_mem(L'\0',arg,argsize);
	0002a55c:CALL 0x0002a4e3
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002a562:RET
END_OF_LINE



Function: quotearg_n_style
----------------------------------------------
13: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002a579:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
14: quoting_options_from_style(&o,s);
	0002a588:LEA RAX,[RBP + -0x40]
	0002a58c:MOV EDX,dword ptr [RBP + -0x48]
	0002a58f:MOV ESI,EDX
	0002a591:MOV RDI,RAX
	0002a594:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
15: pcVar2 = quotearg_n_options(n,arg,0xffffffffffffffff,&o);
	0002a599:LEA RDX,[RBP + -0x40]
	0002a59d:MOV RSI,qword ptr [RBP + -0x50]
	0002a5a1:MOV EAX,dword ptr [RBP + -0x44]
	0002a5a4:MOV RCX,RDX
	0002a5a7:MOV RDX,-0x1
	0002a5ae:MOV EDI,EAX
	0002a5b0:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
16: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002a5b9:SUB RDX,qword ptr FS:[0x28]
	0002a5c2:JZ 0x0002a5c9
END_OF_LINE
----------------------------------------------
18: __stack_chk_fail();
	0002a5c4:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
20: return pcVar2;
	0002a5ca:RET
END_OF_LINE



Function: quotearg_n_style_mem
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002a5e5:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: quoting_options_from_style(&o,s);
	0002a5f4:LEA RAX,[RBP + -0x40]
	0002a5f8:MOV EDX,dword ptr [RBP + -0x48]
	0002a5fb:MOV ESI,EDX
	0002a5fd:MOV RDI,RAX
	0002a600:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
16: pcVar2 = quotearg_n_options(n,arg,argsize,&o);
	0002a605:LEA RCX,[RBP + -0x40]
	0002a609:MOV RDX,qword ptr [RBP + -0x58]
	0002a60d:MOV RSI,qword ptr [RBP + -0x50]
	0002a611:MOV EAX,dword ptr [RBP + -0x44]
	0002a614:MOV EDI,EAX
	0002a616:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
17: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002a61f:SUB RDX,qword ptr FS:[0x28]
	0002a628:JZ 0x0002a62f
END_OF_LINE
----------------------------------------------
19: __stack_chk_fail();
	0002a62a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
21: return pcVar2;
	0002a630:RET
END_OF_LINE



Function: quotearg_style
----------------------------------------------
9: pcVar1 = quotearg_n_style(L'\0',s,arg);
	0002a652:CALL 0x0002a563
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002a658:RET
END_OF_LINE



Function: quotearg_style_mem
----------------------------------------------
10: pcVar1 = quotearg_n_style_mem(L'\0',s,arg,argsize);
	0002a682:CALL 0x0002a5cb
END_OF_LINE
----------------------------------------------
11: return pcVar1;
	0002a688:RET
END_OF_LINE



Function: quotearg_char_mem
----------------------------------------------
13: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002a6a2:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
14: options._0_8_ = default_quoting_options._0_8_;
	0002a6bf:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
15: options.quote_these_too._0_8_ = default_quoting_options.quote_these_too._0_8_;
	0002a6c3:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
16: options.quote_these_too._8_8_ = default_quoting_options.quote_these_too._8_8_;
	0002a6d5:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
17: options.quote_these_too._16_8_ = default_quoting_options.quote_these_too._16_8_;
	0002a6d9:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
18: options.quote_these_too._24_8_ = default_quoting_options.quote_these_too._24_8_;
	0002a6eb:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
19: options.left_quote = default_quoting_options.left_quote;
	0002a6ef:MOV qword ptr [RBP + -0x18],RDX
END_OF_LINE
----------------------------------------------
20: options.right_quote = default_quoting_options.right_quote;
	0002a6fa:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
21: set_char_quoting(&options,ch,L'\x01');
	0002a702:LEA RAX,[RBP + -0x40]
	0002a706:MOV EDX,0x1
	0002a70b:MOV ESI,ECX
	0002a70d:MOV RDI,RAX
	0002a710:CALL 0x00028c0b
END_OF_LINE
----------------------------------------------
22: pcVar2 = quotearg_n_options(L'\0',arg,argsize,&options);
	0002a715:LEA RCX,[RBP + -0x40]
	0002a719:MOV RDX,qword ptr [RBP + -0x50]
	0002a71d:MOV RAX,qword ptr [RBP + -0x48]
	0002a721:MOV RSI,RAX
	0002a724:MOV EDI,0x0
	0002a729:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
23: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002a732:SUB RDX,qword ptr FS:[0x28]
	0002a73b:JZ 0x0002a742
END_OF_LINE
----------------------------------------------
25: __stack_chk_fail();
	0002a73d:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
27: return pcVar2;
	0002a743:RET
END_OF_LINE



Function: quotearg_char
----------------------------------------------
9: pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff,ch);
	0002a76b:CALL 0x0002a689
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002a771:RET
END_OF_LINE



Function: quotearg_colon
----------------------------------------------
8: pcVar1 = quotearg_char(arg,':');
	0002a78e:CALL 0x0002a744
END_OF_LINE
----------------------------------------------
9: return pcVar1;
	0002a794:RET
END_OF_LINE



Function: quotearg_colon_mem
----------------------------------------------
9: pcVar1 = quotearg_char_mem(arg,argsize,':');
	0002a7bc:CALL 0x0002a689
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002a7c2:RET
END_OF_LINE



Function: quotearg_n_style_colon
----------------------------------------------
14: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002a7dc:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
15: arg_local = arg;
	0002a7fa:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
16: s_local = s;
	0002a7fa:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
17: n_local = n;
	0002a7fa:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
18: quoting_options_from_style(&local_98,s);
	0002a7eb:LEA RAX,[RBP + -0x90]
	0002a7f2:MOV EDX,dword ptr [RBP + -0x48]
	0002a7f5:MOV ESI,EDX
	0002a7f7:MOV RDI,RAX
	0002a7fa:CALL 0x00028d37
END_OF_LINE
----------------------------------------------
19: options.style = local_98.style;
	0002a80d:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
20: options.flags = local_98.flags;
	0002a80d:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
21: options.quote_these_too[0] = local_98.quote_these_too[0];
	0002a811:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
22: options.quote_these_too[1] = local_98.quote_these_too[1];
	0002a811:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
23: options.quote_these_too[2] = local_98.quote_these_too[2];
	0002a81d:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
24: options.quote_these_too[3] = local_98.quote_these_too[3];
	0002a81d:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
25: options.quote_these_too[4] = local_98.quote_these_too[4];
	0002a821:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
26: options.quote_these_too[5] = local_98.quote_these_too[5];
	0002a821:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
27: options.quote_these_too[6] = local_98.quote_these_too[6];
	0002a82d:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
28: options.quote_these_too[7] = local_98.quote_these_too[7];
	0002a82d:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
29: options.left_quote = local_98.left_quote;
	0002a831:MOV qword ptr [RBP + -0x18],RDX
END_OF_LINE
----------------------------------------------
30: options.right_quote = local_98.right_quote;
	0002a839:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
31: set_char_quoting(&options,':',L'\x01');
	0002a83d:LEA RAX,[RBP + -0x40]
	0002a841:MOV EDX,0x1
	0002a846:MOV ESI,0x3a
	0002a84b:MOV RDI,RAX
	0002a84e:CALL 0x00028c0b
END_OF_LINE
----------------------------------------------
32: pcVar2 = quotearg_n_options(n_local,arg_local,0xffffffffffffffff,&options);
	0002a853:LEA RDX,[RBP + -0x40]
	0002a857:MOV RSI,qword ptr [RBP + -0x50]
	0002a85b:MOV EAX,dword ptr [RBP + -0x44]
	0002a85e:MOV RCX,RDX
	0002a861:MOV RDX,-0x1
	0002a868:MOV EDI,EAX
	0002a86a:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
33: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002a873:SUB RDX,qword ptr FS:[0x28]
	0002a87c:JZ 0x0002a883
END_OF_LINE
----------------------------------------------
35: __stack_chk_fail();
	0002a87e:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
37: return pcVar2;
	0002a884:RET
END_OF_LINE



Function: quotearg_n_custom
----------------------------------------------
11: pcVar1 = quotearg_n_custom_mem(n,left_quote,right_quote,arg,0xffffffffffffffff);
	0002a8b8:CALL 0x0002a8bf
END_OF_LINE
----------------------------------------------
12: return pcVar1;
	0002a8be:RET
END_OF_LINE



Function: quotearg_n_custom_mem
----------------------------------------------
15: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002a8de:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
16: o._0_8_ = default_quoting_options._0_8_;
	0002a8fb:MOV qword ptr [RBP + -0x40],RAX
END_OF_LINE
----------------------------------------------
17: o.quote_these_too._0_8_ = default_quoting_options.quote_these_too._0_8_;
	0002a8ff:MOV qword ptr [RBP + -0x38],RDX
END_OF_LINE
----------------------------------------------
18: o.quote_these_too._8_8_ = default_quoting_options.quote_these_too._8_8_;
	0002a911:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
19: o.quote_these_too._16_8_ = default_quoting_options.quote_these_too._16_8_;
	0002a915:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
20: o.quote_these_too._24_8_ = default_quoting_options.quote_these_too._24_8_;
	0002a927:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
21: o.left_quote = default_quoting_options.left_quote;
	0002a92b:MOV qword ptr [RBP + -0x18],RDX
END_OF_LINE
----------------------------------------------
22: o.right_quote = default_quoting_options.right_quote;
	0002a936:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
23: set_custom_quoting(&o,left_quote,right_quote);
	0002a942:LEA RAX,[RBP + -0x40]
	0002a946:MOV RSI,RCX
	0002a949:MOV RDI,RAX
	0002a94c:CALL 0x00028cd5
END_OF_LINE
----------------------------------------------
24: pcVar2 = quotearg_n_options(n,arg,argsize,&o);
	0002a951:LEA RCX,[RBP + -0x40]
	0002a955:MOV RDX,qword ptr [RBP + -0x68]
	0002a959:MOV RSI,qword ptr [RBP + -0x60]
	0002a95d:MOV EAX,dword ptr [RBP + -0x44]
	0002a960:MOV EDI,EAX
	0002a962:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
25: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002a96b:SUB RDX,qword ptr FS:[0x28]
	0002a974:JZ 0x0002a97b
END_OF_LINE
----------------------------------------------
27: __stack_chk_fail();
	0002a976:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
29: return pcVar2;
	0002a97c:RET
END_OF_LINE



Function: quotearg_custom
----------------------------------------------
10: pcVar1 = quotearg_n_custom(L'\0',left_quote,right_quote,arg);
	0002a9a9:CALL 0x0002a885
END_OF_LINE
----------------------------------------------
11: return pcVar1;
	0002a9af:RET
END_OF_LINE



Function: quotearg_custom_mem
----------------------------------------------
11: pcVar1 = quotearg_n_custom_mem(L'\0',left_quote,right_quote,arg,argsize);
	0002a9e7:CALL 0x0002a8bf
END_OF_LINE
----------------------------------------------
12: return pcVar1;
	0002a9ed:RET
END_OF_LINE



Function: quote_n_mem
----------------------------------------------
10: pcVar1 = quotearg_n_options(n,arg,argsize,&quote_quoting_options);
	0002aa19:CALL 0x0002a237
END_OF_LINE
----------------------------------------------
11: return pcVar1;
	0002aa1f:RET
END_OF_LINE



Function: quote_mem
----------------------------------------------
9: pcVar1 = quote_n_mem(L'\0',arg,argsize);
	0002aa44:CALL 0x0002a9ee
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002aa4a:RET
END_OF_LINE



Function: quote_n
----------------------------------------------
9: pcVar1 = quote_n_mem(n,arg,0xffffffffffffffff);
	0002aa71:CALL 0x0002a9ee
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002aa77:RET
END_OF_LINE



Function: quote
----------------------------------------------
8: pcVar1 = quote_n(L'\0',arg);
	0002aa94:CALL 0x0002aa4b
END_OF_LINE
----------------------------------------------
9: return pcVar1;
	0002aa9a:RET
END_OF_LINE



Function: errno_fail
----------------------------------------------
8: piVar1 = __errno_location();
	0002aaaa:CALL 0x00005900
END_OF_LINE
----------------------------------------------
9: *piVar1 = e;
	0002aab2:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
10: return -1;
	0002aaba:RET
END_OF_LINE



Function: renameat2
----------------------------------------------
35: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002aaeb:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
36: lVar5 = syscall(0x13c,(ulong)(uint)fd1,src,(ulong)(uint)fd2,dst,(ulong)flags);
	0002ab1b:MOV ECX,dword ptr [RBP + -0x168]
	0002ab21:MOV RDX,qword ptr [RBP + -0x170]
	0002ab28:MOV EAX,dword ptr [RBP + -0x164]
	0002ab2e:MOV R9D,EDI
	0002ab31:MOV R8,RSI
	0002ab34:MOV ESI,EAX
	0002ab36:MOV EDI,0x13c
	0002ab3b:MOV EAX,0x0
	0002ab40:CALL 0x00005d40
END_OF_LINE
----------------------------------------------
37: iVar3 = (int)lVar5;
	0002ab45:MOV dword ptr [RBP + -0x15c],EAX
END_OF_LINE
----------------------------------------------
38: piVar6 = __errno_location();
	0002ab4b:CALL 0x00005900
END_OF_LINE
----------------------------------------------
39: iVar4 = *piVar6;
	0002ab50:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
40: if ((-1 < iVar3) || (((iVar4 != 0x16 && (iVar4 != 0x26)) && (iVar4 != 0x5f)))) goto LAB_0002ae8d;
	0002ab58:CMP dword ptr [RBP + -0x15c],0x0
	0002ab5f:JNS 0x0002ab7c
	0002ab61:CMP dword ptr [RBP + -0x158],0x16
	0002ab68:JZ 0x0002ab87
	0002ab6a:CMP dword ptr [RBP + -0x158],0x26
	0002ab71:JZ 0x0002ab87
	0002ab73:CMP dword ptr [RBP + -0x158],0x5f
	0002ab7a:JZ 0x0002ab87
	0002ab7c:MOV EAX,dword ptr [RBP + -0x15c]
	0002ab82:JMP 0x0002ae8d
	0002ab87:MOV RAX,qword ptr [RBP + -0x170]
	0002ab8e:MOV qword ptr [RBP + -0x150],RAX
	0002ab95:MOV RAX,qword ptr [RBP + -0x178]
	0002ab9c:MOV qword ptr [RBP + -0x148],RAX
	0002aba3:MOV dword ptr [RBP + -0x154],0x14
	0002abad:MOV byte ptr [RBP + -0x15f],0x0
	0002abb4:CMP dword ptr [RBP + -0x17c],0x0
	0002abbb:JZ 0x0002ac33
	0002abbd:MOV EAX,dword ptr [RBP + -0x17c]
	0002abc3:AND EAX,0xfffffffe
	0002abc6:TEST EAX,EAX
	0002abc8:JZ 0x0002abd9
	0002abca:MOV EDI,0x5f
	0002abcf:CALL 0x0002aa9b
	0002abd4:JMP 0x0002ae8d
	0002abd9:LEA RDX,[RBP + -0xa0]
	0002abe0:MOV RCX,qword ptr [RBP + -0x178]
	0002abe7:MOV EAX,dword ptr [RBP + -0x168]
	0002abed:MOV RSI,RCX
	0002abf0:MOV EDI,EAX
	0002abf2:CALL 0x0002b053
	0002abf7:TEST EAX,EAX
	0002abf9:JZ 0x0002ac07
	0002abfb:CALL 0x00005900
	0002ac00:MOV EAX,dword ptr [RAX]
	0002ac02:CMP EAX,0x4b
	0002ac05:JNZ 0x0002ac16
	0002ac07:MOV EDI,0x11
	0002ac0c:CALL 0x0002aa9b
	0002ac11:JMP 0x0002ae8d
	0002ac16:CALL 0x00005900
	0002ac1b:MOV EAX,dword ptr [RAX]
	0002ac1d:CMP EAX,0x2
	0002ac20:JZ 0x0002ac2c
	0002ac22:MOV EAX,0xffffffff
	0002ac27:JMP 0x0002ae8d
	0002ac2c:MOV byte ptr [RBP + -0x15f],0x1
	0002ac33:MOV RAX,qword ptr [RBP + -0x170]
	0002ac3a:MOV RDI,RAX
	0002ac3d:CALL 0x00005ad0
	0002ac42:MOV qword ptr [RBP + -0x140],RAX
	0002ac49:MOV RAX,qword ptr [RBP + -0x178]
	0002ac50:MOV RDI,RAX
	0002ac53:CALL 0x00005ad0
	0002ac58:MOV qword ptr [RBP + -0x138],RAX
	0002ac5f:CMP qword ptr [RBP + -0x140],0x0
	0002ac67:JZ 0x0002ac73
	0002ac69:CMP qword ptr [RBP + -0x138],0x0
	0002ac71:JNZ 0x0002ac99
	0002ac73:MOV RCX,qword ptr [RBP + -0x178]
	0002ac7a:MOV EDX,dword ptr [RBP + -0x168]
	0002ac80:MOV RSI,qword ptr [RBP + -0x170]
	0002ac87:MOV EAX,dword ptr [RBP + -0x164]
	0002ac8d:MOV EDI,EAX
	0002ac8f:CALL 0x00005fd0
	0002ac94:JMP 0x0002ae8d
	0002ac99:MOV RAX,qword ptr [RBP + -0x140]
	0002aca0:LEA RDX,[RAX + -0x1]
	0002aca4:MOV RAX,qword ptr [RBP + -0x170]
	0002acab:ADD RAX,RDX
	0002acae:MOVZX EAX,byte ptr [RAX]
	0002acb1:CMP AL,0x2f
	0002acb3:SETZ AL
	0002acb6:MOV byte ptr [RBP + -0x15e],AL
	0002acbc:MOV RAX,qword ptr [RBP + -0x138]
	0002acc3:LEA RDX,[RAX + -0x1]
	0002acc7:MOV RAX,qword ptr [RBP + -0x178]
	0002acce:ADD RAX,RDX
	0002acd1:MOVZX EAX,byte ptr [RAX]
	0002acd4:CMP AL,0x2f
	0002acd6:SETZ AL
	0002acd9:MOV byte ptr [RBP + -0x15d],AL
	0002acdf:MOVZX EAX,byte ptr [RBP + -0x15e]
	0002ace6:XOR EAX,0x1
	0002ace9:TEST AL,AL
	0002aceb:JZ 0x0002ad21
	0002aced:MOVZX EAX,byte ptr [RBP + -0x15d]
	0002acf4:XOR EAX,0x1
	0002acf7:TEST AL,AL
	0002acf9:JZ 0x0002ad21
	0002acfb:MOV RCX,qword ptr [RBP + -0x178]
	0002ad02:MOV EDX,dword ptr [RBP + -0x168]
	0002ad08:MOV RSI,qword ptr [RBP + -0x170]
	0002ad0f:MOV EAX,dword ptr [RBP + -0x164]
	0002ad15:MOV EDI,EAX
	0002ad17:CALL 0x00005fd0
	0002ad1c:JMP 0x0002ae8d
	0002ad21:LEA RDX,[RBP + -0x130]
	0002ad28:MOV RCX,qword ptr [RBP + -0x170]
	0002ad2f:MOV EAX,dword ptr [RBP + -0x164]
	0002ad35:MOV RSI,RCX
	0002ad38:MOV EDI,EAX
	0002ad3a:CALL 0x0002b053
	0002ad3f:TEST EAX,EAX
	0002ad41:JZ 0x0002ad4d
	0002ad43:MOV EAX,0xffffffff
	0002ad48:JMP 0x0002ae8d
	0002ad4d:CMP byte ptr [RBP + -0x15f],0x0
	0002ad54:JZ 0x0002ad7b
	0002ad56:MOV EAX,dword ptr [RBP + -0x118]
	0002ad5c:AND EAX,0xf000
	0002ad61:CMP EAX,0x4000
	0002ad66:JZ 0x0002ae07
	0002ad6c:MOV EDI,0x2
	0002ad71:CALL 0x0002aa9b
	0002ad76:JMP 0x0002ae8d
	0002ad7b:LEA RDX,[RBP + -0xa0]
	0002ad82:MOV RCX,qword ptr [RBP + -0x178]
	0002ad89:MOV EAX,dword ptr [RBP + -0x168]
	0002ad8f:MOV RSI,RCX
	0002ad92:MOV EDI,EAX
	0002ad94:CALL 0x0002b053
	0002ad99:TEST EAX,EAX
	0002ad9b:JZ 0x0002adc5
	0002ad9d:CALL 0x00005900
	0002ada2:MOV EAX,dword ptr [RAX]
	0002ada4:CMP EAX,0x2
	0002ada7:JNZ 0x0002adbb
	0002ada9:MOV EAX,dword ptr [RBP + -0x118]
	0002adaf:AND EAX,0xf000
	0002adb4:CMP EAX,0x4000
	0002adb9:JZ 0x0002ae07
	0002adbb:MOV EAX,0xffffffff
	0002adc0:JMP 0x0002ae8d
	0002adc5:MOV EAX,dword ptr [RBP + -0x88]
	0002adcb:AND EAX,0xf000
	0002add0:CMP EAX,0x4000
	0002add5:JZ 0x0002ade6
	0002add7:MOV EDI,0x14
	0002addc:CALL 0x0002aa9b
	0002ade1:JMP 0x0002ae8d
	0002ade6:MOV EAX,dword ptr [RBP + -0x118]
	0002adec:AND EAX,0xf000
	0002adf1:CMP EAX,0x4000
	0002adf6:JZ 0x0002ae07
	0002adf8:MOV EDI,0x15
	0002adfd:CALL 0x0002aa9b
	0002ae02:JMP 0x0002ae8d
	0002ae07:MOV RCX,qword ptr [RBP + -0x148]
	0002ae0e:MOV EDX,dword ptr [RBP + -0x168]
	0002ae14:MOV RSI,qword ptr [RBP + -0x150]
	0002ae1b:MOV EAX,dword ptr [RBP + -0x164]
	0002ae21:MOV EDI,EAX
	0002ae23:CALL 0x00005fd0
	0002ae28:MOV dword ptr [RBP + -0x15c],EAX
	0002ae2e:CALL 0x00005900
	0002ae33:MOV EAX,dword ptr [RAX]
	0002ae35:MOV dword ptr [RBP + -0x154],EAX
	0002ae3b:NOP
	0002ae3c:MOV RAX,qword ptr [RBP + -0x150]
	0002ae43:CMP RAX,qword ptr [RBP + -0x170]
	0002ae4a:JZ 0x0002ae5b
	0002ae4c:MOV RAX,qword ptr [RBP + -0x150]
	0002ae53:MOV RDI,RAX
	0002ae56:CALL 0x00005860
	0002ae5b:MOV RAX,qword ptr [RBP + -0x148]
	0002ae62:CMP RAX,qword ptr [RBP + -0x178]
	0002ae69:JZ 0x0002ae7a
	0002ae6b:MOV RAX,qword ptr [RBP + -0x148]
	0002ae72:MOV RDI,RAX
	0002ae75:CALL 0x00005860
	0002ae7a:CALL 0x00005900
	0002ae7f:MOV EDX,dword ptr [RBP + -0x154]
	0002ae85:MOV dword ptr [RAX],EDX
	0002ae87:MOV EAX,dword ptr [RBP + -0x15c]
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
41: bVar2 = false;
	0002abad:MOV byte ptr [RBP + -0x15f],0x0
END_OF_LINE
----------------------------------------------
42: if (flags != 0) {
	0002abb4:CMP dword ptr [RBP + -0x17c],0x0
	0002abbb:JZ 0x0002ac33
END_OF_LINE
----------------------------------------------
43: if ((flags & 0xfffffffe) != 0) {
	0002abc3:AND EAX,0xfffffffe
	0002abc6:TEST EAX,EAX
	0002abc8:JZ 0x0002abd9
END_OF_LINE
----------------------------------------------
44: iVar3 = errno_fail(0x5f);
	0002abcf:CALL 0x0002aa9b
END_OF_LINE
----------------------------------------------
45: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
47: iVar4 = lstatat(fd2,dst,&dst_st);
	0002abd9:LEA RDX,[RBP + -0xa0]
	0002abe0:MOV RCX,qword ptr [RBP + -0x178]
	0002abe7:MOV EAX,dword ptr [RBP + -0x168]
	0002abed:MOV RSI,RCX
	0002abf0:MOV EDI,EAX
	0002abf2:CALL 0x0002b053
END_OF_LINE
----------------------------------------------
48: if ((iVar4 == 0) || (piVar6 = __errno_location(), *piVar6 == 0x4b)) {
	0002abf7:TEST EAX,EAX
	0002abf9:JZ 0x0002ac07
	0002abfb:CALL 0x00005900
	0002ac00:MOV EAX,dword ptr [RAX]
	0002ac02:CMP EAX,0x4b
	0002ac05:JNZ 0x0002ac16
END_OF_LINE
----------------------------------------------
49: iVar3 = errno_fail(0x11);
	0002ac0c:CALL 0x0002aa9b
END_OF_LINE
----------------------------------------------
50: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
52: piVar6 = __errno_location();
	0002ac16:CALL 0x00005900
END_OF_LINE
----------------------------------------------
53: if (*piVar6 != 2) {
	0002ac1b:MOV EAX,dword ptr [RAX]
	0002ac1d:CMP EAX,0x2
	0002ac20:JZ 0x0002ac2c
END_OF_LINE
----------------------------------------------
54: iVar3 = -1;
	0002ac22:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
55: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
57: bVar2 = true;
	0002ac2c:MOV byte ptr [RBP + -0x15f],0x1
END_OF_LINE
----------------------------------------------
59: sVar7 = strlen(src);
	0002ac3d:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
60: sVar8 = strlen(dst);
	0002ac53:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
61: if ((sVar7 == 0) || (sVar8 == 0)) {
	0002ac5f:CMP qword ptr [RBP + -0x140],0x0
	0002ac67:JZ 0x0002ac73
	0002ac69:CMP qword ptr [RBP + -0x138],0x0
	0002ac71:JNZ 0x0002ac99
END_OF_LINE
----------------------------------------------
62: iVar3 = renameat(fd1,src,fd2,dst);
	0002ac8f:CALL 0x00005fd0
END_OF_LINE
----------------------------------------------
64: else if ((src[sVar7 - 1] == '/') || (dst[sVar8 - 1] == '/')) {
	0002aca0:LEA RDX,[RAX + -0x1]
	0002aca4:MOV RAX,qword ptr [RBP + -0x170]
	0002acab:ADD RAX,RDX
	0002acae:MOVZX EAX,byte ptr [RAX]
	0002acb1:CMP AL,0x2f
	0002acb3:SETZ AL
	0002acb6:MOV byte ptr [RBP + -0x15e],AL
	0002acbc:MOV RAX,qword ptr [RBP + -0x138]
	0002acc3:LEA RDX,[RAX + -0x1]
	0002acc7:MOV RAX,qword ptr [RBP + -0x178]
	0002acce:ADD RAX,RDX
	0002acd1:MOVZX EAX,byte ptr [RAX]
	0002acd4:CMP AL,0x2f
	0002acd6:SETZ AL
	0002acd9:MOV byte ptr [RBP + -0x15d],AL
	0002acdf:MOVZX EAX,byte ptr [RBP + -0x15e]
	0002ace6:XOR EAX,0x1
	0002ace9:TEST AL,AL
	0002aceb:JZ 0x0002ad21
	0002aced:MOVZX EAX,byte ptr [RBP + -0x15d]
	0002acf4:XOR EAX,0x1
	0002acf7:TEST AL,AL
	0002acf9:JZ 0x0002ad21
END_OF_LINE
----------------------------------------------
65: iVar4 = lstatat(fd1,src,&src_st);
	0002ad21:LEA RDX,[RBP + -0x130]
	0002ad28:MOV RCX,qword ptr [RBP + -0x170]
	0002ad2f:MOV EAX,dword ptr [RBP + -0x164]
	0002ad35:MOV RSI,RCX
	0002ad38:MOV EDI,EAX
	0002ad3a:CALL 0x0002b053
END_OF_LINE
----------------------------------------------
66: if (iVar4 == 0) {
	0002ad3f:TEST EAX,EAX
	0002ad41:JZ 0x0002ad4d
END_OF_LINE
----------------------------------------------
67: if (bVar2) {
	0002ad54:JZ 0x0002ad7b
END_OF_LINE
----------------------------------------------
68: if ((src_st.st_mode & 0xf000) != 0x4000) {
	0002ad5c:AND EAX,0xf000
	0002ad61:CMP EAX,0x4000
	0002ad66:JZ 0x0002ae07
END_OF_LINE
----------------------------------------------
69: iVar3 = errno_fail(2);
	0002ad71:CALL 0x0002aa9b
END_OF_LINE
----------------------------------------------
70: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
74: iVar4 = lstatat(fd2,dst,&dst_st);
	0002ad7b:LEA RDX,[RBP + -0xa0]
	0002ad82:MOV RCX,qword ptr [RBP + -0x178]
	0002ad89:MOV EAX,dword ptr [RBP + -0x168]
	0002ad8f:MOV RSI,RCX
	0002ad92:MOV EDI,EAX
	0002ad94:CALL 0x0002b053
END_OF_LINE
----------------------------------------------
75: if (iVar4 == 0) {
	0002ad99:TEST EAX,EAX
	0002ad9b:JZ 0x0002adc5
END_OF_LINE
----------------------------------------------
76: if ((dst_st.st_mode & 0xf000) != 0x4000) {
	0002adcb:AND EAX,0xf000
	0002add0:CMP EAX,0x4000
	0002add5:JZ 0x0002ade6
END_OF_LINE
----------------------------------------------
77: iVar3 = errno_fail(0x14);
	0002addc:CALL 0x0002aa9b
END_OF_LINE
----------------------------------------------
78: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
80: if ((src_st.st_mode & 0xf000) != 0x4000) {
	0002adec:AND EAX,0xf000
	0002adf1:CMP EAX,0x4000
	0002adf6:JZ 0x0002ae07
END_OF_LINE
----------------------------------------------
81: iVar3 = errno_fail(0x15);
	0002adfd:CALL 0x0002aa9b
END_OF_LINE
----------------------------------------------
82: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
86: piVar6 = __errno_location();
	0002ad9d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
87: if ((*piVar6 != 2) || ((src_st.st_mode & 0xf000) != 0x4000)) {
	0002ada2:MOV EAX,dword ptr [RAX]
	0002ada4:CMP EAX,0x2
	0002ada7:JNZ 0x0002adbb
	0002ada9:MOV EAX,dword ptr [RBP + -0x118]
	0002adaf:AND EAX,0xf000
	0002adb4:CMP EAX,0x4000
	0002adb9:JZ 0x0002ae07
END_OF_LINE
----------------------------------------------
88: iVar3 = -1;
	0002adbb:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
89: goto LAB_0002ae8d;
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
93: iVar3 = renameat(fd1,src,fd2,dst);
	0002ae23:CALL 0x00005fd0
END_OF_LINE
----------------------------------------------
94: piVar6 = __errno_location();
	0002ae2e:CALL 0x00005900
END_OF_LINE
----------------------------------------------
95: iVar4 = *piVar6;
	0002ae33:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
96: piVar6 = __errno_location();
	0002ae7a:CALL 0x00005900
END_OF_LINE
----------------------------------------------
97: *piVar6 = iVar4;
	0002ae85:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
100: iVar3 = -1;
	0002ad43:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
104: iVar3 = renameat(fd1,src,fd2,dst);
	0002ad17:CALL 0x00005fd0
END_OF_LINE
----------------------------------------------
106: LAB_0002ae8d:
	0002ae8d:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
107: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002ae91:SUB RDX,qword ptr FS:[0x28]
	0002ae9a:JZ 0x0002aea1
END_OF_LINE
----------------------------------------------
109: __stack_chk_fail();
	0002ae9c:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
111: return iVar3;
	0002aea2:RET
END_OF_LINE



Function: safe_write
----------------------------------------------
12: count_local = count;
	0002aeb6:MOV qword ptr [RBP + -0x28],RDX
END_OF_LINE
----------------------------------------------
13: while( true ) {
	0002aef6:JNZ 0x0002af0c
END_OF_LINE
----------------------------------------------
15: sVar1 = write(fd,buf,count_local);
	0002aeca:CALL 0x00005a50
END_OF_LINE
----------------------------------------------
16: if (-1 < (long)sVar1) {
	0002aed3:CMP qword ptr [RBP + -0x8],0x0
	0002aed8:JS 0x0002aee0
END_OF_LINE
----------------------------------------------
17: return sVar1;
	0002af15:LEAVE
	0002af16:RET
END_OF_LINE
----------------------------------------------
19: piVar2 = __errno_location();
	0002aee0:CALL 0x00005900
END_OF_LINE
----------------------------------------------
20: } while (*piVar2 == 4);
	0002aee5:MOV EAX,dword ptr [RAX]
	0002aee7:CMP EAX,0x4
	0002aeea:JZ 0x0002af12
END_OF_LINE
----------------------------------------------
21: piVar2 = __errno_location();
	0002aeec:CALL 0x00005900
END_OF_LINE
----------------------------------------------
22: if (*piVar2 != 0x16) break;
	0002aef1:MOV EAX,dword ptr [RAX]
	0002aef3:CMP EAX,0x16
	0002aef6:JNZ 0x0002af0c
END_OF_LINE
----------------------------------------------
23: if (count_local < 0x7fffe001) {
	0002af00:JBE 0x0002af0c
END_OF_LINE
----------------------------------------------
24: return sVar1;
	0002af15:LEAVE
	0002af16:RET
END_OF_LINE
----------------------------------------------
26: count_local = 0x7fffe000;
	0002af02:MOV qword ptr [RBP + -0x28],0x7fffe000
END_OF_LINE
----------------------------------------------
28: return sVar1;
	0002af15:LEAVE
	0002af16:RET
END_OF_LINE



Function: get_handler
----------------------------------------------
8: if ((a->sa_flags & 4U) == 0) {
	0002af27:MOV EAX,dword ptr [RAX + 0x88]
	0002af2d:AND EAX,0x4
	0002af30:TEST EAX,EAX
	0002af32:JZ 0x0002af3d
END_OF_LINE
----------------------------------------------
9: p_Var1 = (a->__sigaction_handler).sa_handler;
	0002af41:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
12: p_Var1 = (a->__sigaction_handler).sa_handler;
	0002af38:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
14: return p_Var1;
	0002af45:RET
END_OF_LINE



Function: get_stat_atime_ns
----------------------------------------------
7: return (st->st_atim).tv_nsec;
	0002af56:MOV RAX,qword ptr [RAX + 0x50]
	0002af5a:POP RBP
	0002af5b:RET
END_OF_LINE



Function: get_stat_ctime_ns
----------------------------------------------
7: return (st->st_ctim).tv_nsec;
	0002af6c:MOV RAX,qword ptr [RAX + 0x70]
	0002af70:POP RBP
	0002af71:RET
END_OF_LINE



Function: get_stat_mtime_ns
----------------------------------------------
7: return (st->st_mtim).tv_nsec;
	0002af82:MOV RAX,qword ptr [RAX + 0x60]
	0002af86:POP RBP
	0002af87:RET
END_OF_LINE



Function: get_stat_birthtime_ns
----------------------------------------------
7: return 0;
	0002af94:MOV EAX,0x0
	0002af99:POP RBP
	0002af9a:RET
END_OF_LINE



Function: get_stat_atime
----------------------------------------------
7: return st->st_atim;
	0002afaf:MOV RAX,qword ptr [RAX + 0x48]
	0002afb3:POP RBP
	0002afb4:RET
END_OF_LINE



Function: get_stat_ctime
----------------------------------------------
7: return st->st_ctim;
	0002afc9:MOV RAX,qword ptr [RAX + 0x68]
	0002afcd:POP RBP
	0002afce:RET
END_OF_LINE



Function: get_stat_mtime
----------------------------------------------
7: return st->st_mtim;
	0002afe3:MOV RAX,qword ptr [RAX + 0x58]
	0002afe7:POP RBP
	0002afe8:RET
END_OF_LINE



Function: get_stat_birthtime
----------------------------------------------
9: tVar1.tv_nsec = -1;
	0002b009:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
10: tVar1.tv_sec = -1;
	0002b009:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
11: return tVar1;
	0002b00e:RET
END_OF_LINE



Function: stat_time_normalize
----------------------------------------------
8: return result;
	0002b022:RET
END_OF_LINE



Function: statat
----------------------------------------------
10: iVar1 = fstatat(fd,name,(stat *)st,0);
	0002b04c:CALL 0x00006090
END_OF_LINE
----------------------------------------------
11: return iVar1;
	0002b052:RET
END_OF_LINE



Function: lstatat
----------------------------------------------
10: iVar1 = fstatat(fd,name,(stat *)st,0x100);
	0002b07c:CALL 0x00006090
END_OF_LINE
----------------------------------------------
11: return iVar1;
	0002b082:RET
END_OF_LINE



Function: try_tempname
----------------------------------------------
30: lVar2 = *(long *)(in_FS_OFFSET + 0x28);
	0002b09e:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
31: piVar7 = __errno_location();
	0002b0b4:CALL 0x00005900
END_OF_LINE
----------------------------------------------
32: iVar1 = *piVar7;
	0002b0b9:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
33: sVar8 = strlen(tmpl);
	0002b0cc:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
34: iVar6 = (int)sVar8;
	0002b0d1:MOV dword ptr [RBP + -0x3c],EAX
END_OF_LINE
----------------------------------------------
35: if (suffixlen + 5 < iVar6) {
	0002b0d7:ADD EAX,0x5
	0002b0da:CMP dword ptr [RBP + -0x3c],EAX
	0002b0dd:JLE 0x0002b10d
END_OF_LINE
----------------------------------------------
36: iVar4 = memcmp(tmpl + ((iVar6 + -6) - suffixlen),"XXXXXX",6);
	0002b0e2:SUB EAX,0x6
	0002b0e5:SUB EAX,dword ptr [RBP + -0x5c]
	0002b0e8:MOVSXD RDX,EAX
	0002b0eb:MOV RAX,qword ptr [RBP + -0x58]
	0002b0ef:ADD RAX,RDX
	0002b0f2:MOV EDX,0x6
	0002b0f7:LEA RCX,[0x35edf]
	0002b0fe:MOV RSI,RCX
	0002b101:MOV RDI,RAX
	0002b104:CALL 0x00005cb0
END_OF_LINE
----------------------------------------------
37: if (iVar4 == 0) {
	0002b109:TEST EAX,EAX
	0002b10b:JZ 0x0002b122
END_OF_LINE
----------------------------------------------
38: pcVar9 = tmpl + ((iVar6 + -6) - suffixlen);
	0002b125:SUB EAX,0x6
	0002b128:SUB EAX,dword ptr [RBP + -0x5c]
	0002b12b:MOVSXD RDX,EAX
	0002b12e:MOV RAX,qword ptr [RBP + -0x58]
	0002b132:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
39: gettimeofday((timeval *)&tv,(__timezone_ptr_t)0x0);
	0002b139:LEA RAX,[RBP + -0x20]
	0002b13d:MOV ESI,0x0
	0002b142:MOV RDI,RAX
	0002b145:CALL 0x00005be0
END_OF_LINE
----------------------------------------------
40: _Var5 = getpid();
	0002b160:CALL 0x00005a60
END_OF_LINE
----------------------------------------------
41: try_tempname::value = try_tempname::value + ((long)_Var5 ^ tv.tv_sec ^ tv.tv_usec << 0x10);
	0002b14e:SHL RAX,0x10
	0002b152:MOV RDX,RAX
	0002b155:MOV RAX,qword ptr [RBP + -0x20]
	0002b159:XOR RAX,RDX
	0002b15c:MOV qword ptr [RBP + -0x30],RAX
	0002b160:CALL 0x00005a60
	0002b165:CDQE
	0002b167:XOR RAX,qword ptr [RBP + -0x30]
	0002b16b:MOV RDX,RAX
	0002b16e:MOV RAX,qword ptr [0x000430a0]
	0002b175:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
42: for (count = 0; uVar3 = try_tempname::value, count < 0x3a2f8; count = count + 1) {
	0002b17f:MOV dword ptr [RBP + -0x4c],0x0
	0002b186:JMP 0x0002b416
	0002b18b:MOV RAX,qword ptr [0x000430a0]
	0002b192:MOV qword ptr [RBP + -0x28],RAX
	0002b196:MOV RCX,qword ptr [RBP + -0x28]
	0002b19a:MOV RAX,RCX
	0002b19d:SHR RAX,0x1
	0002b1a0:MOV RDX,-0x7bdef7bdef7bdef7
	0002b1aa:MUL RDX
	0002b1ad:SHR RDX,0x4
	0002b1b1:MOV RAX,RDX
	0002b1b4:SHL RAX,0x5
	0002b1b8:SUB RAX,RDX
	0002b1bb:ADD RAX,RAX
	0002b1be:SUB RCX,RAX
	0002b1c1:MOV RDX,RCX
	0002b1c4:LEA RAX,[0x35ea0]
	0002b1cb:MOVZX EDX,byte ptr [RDX + RAX*0x1]
	0002b1cf:MOV RAX,qword ptr [RBP + -0x38]
	0002b1d3:MOV byte ptr [RAX],DL
	0002b1d5:MOV RAX,qword ptr [RBP + -0x28]
	0002b1d9:SHR RAX,0x1
	0002b1dc:MOV RDX,-0x7bdef7bdef7bdef7
	0002b1e6:MUL RDX
	0002b1e9:MOV RAX,RDX
	0002b1ec:SHR RAX,0x4
	0002b1f0:MOV qword ptr [RBP + -0x28],RAX
	0002b1f4:MOV RCX,qword ptr [RBP + -0x28]
	0002b1f8:MOV RAX,RCX
	0002b1fb:SHR RAX,0x1
	0002b1fe:MOV RDX,-0x7bdef7bdef7bdef7
	0002b208:MUL RDX
	0002b20b:SHR RDX,0x4
	0002b20f:MOV RAX,RDX
	0002b212:SHL RAX,0x5
	0002b216:SUB RAX,RDX
	0002b219:ADD RAX,RAX
	0002b21c:SUB RCX,RAX
	0002b21f:MOV RDX,RCX
	0002b222:MOV RAX,qword ptr [RBP + -0x38]
	0002b226:LEA RCX,[RAX + 0x1]
	0002b22a:LEA RAX,[0x35ea0]
	0002b231:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b235:MOV byte ptr [RCX],AL
	0002b237:MOV RAX,qword ptr [RBP + -0x28]
	0002b23b:SHR RAX,0x1
	0002b23e:MOV RDX,-0x7bdef7bdef7bdef7
	0002b248:MUL RDX
	0002b24b:MOV RAX,RDX
	0002b24e:SHR RAX,0x4
	0002b252:MOV qword ptr [RBP + -0x28],RAX
	0002b256:MOV RCX,qword ptr [RBP + -0x28]
	0002b25a:MOV RAX,RCX
	0002b25d:SHR RAX,0x1
	0002b260:MOV RDX,-0x7bdef7bdef7bdef7
	0002b26a:MUL RDX
	0002b26d:SHR RDX,0x4
	0002b271:MOV RAX,RDX
	0002b274:SHL RAX,0x5
	0002b278:SUB RAX,RDX
	0002b27b:ADD RAX,RAX
	0002b27e:SUB RCX,RAX
	0002b281:MOV RDX,RCX
	0002b284:MOV RAX,qword ptr [RBP + -0x38]
	0002b288:LEA RCX,[RAX + 0x2]
	0002b28c:LEA RAX,[0x35ea0]
	0002b293:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b297:MOV byte ptr [RCX],AL
	0002b299:MOV RAX,qword ptr [RBP + -0x28]
	0002b29d:SHR RAX,0x1
	0002b2a0:MOV RDX,-0x7bdef7bdef7bdef7
	0002b2aa:MUL RDX
	0002b2ad:MOV RAX,RDX
	0002b2b0:SHR RAX,0x4
	0002b2b4:MOV qword ptr [RBP + -0x28],RAX
	0002b2b8:MOV RCX,qword ptr [RBP + -0x28]
	0002b2bc:MOV RAX,RCX
	0002b2bf:SHR RAX,0x1
	0002b2c2:MOV RDX,-0x7bdef7bdef7bdef7
	0002b2cc:MUL RDX
	0002b2cf:SHR RDX,0x4
	0002b2d3:MOV RAX,RDX
	0002b2d6:SHL RAX,0x5
	0002b2da:SUB RAX,RDX
	0002b2dd:ADD RAX,RAX
	0002b2e0:SUB RCX,RAX
	0002b2e3:MOV RDX,RCX
	0002b2e6:MOV RAX,qword ptr [RBP + -0x38]
	0002b2ea:LEA RCX,[RAX + 0x3]
	0002b2ee:LEA RAX,[0x35ea0]
	0002b2f5:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b2f9:MOV byte ptr [RCX],AL
	0002b2fb:MOV RAX,qword ptr [RBP + -0x28]
	0002b2ff:SHR RAX,0x1
	0002b302:MOV RDX,-0x7bdef7bdef7bdef7
	0002b30c:MUL RDX
	0002b30f:MOV RAX,RDX
	0002b312:SHR RAX,0x4
	0002b316:MOV qword ptr [RBP + -0x28],RAX
	0002b31a:MOV RCX,qword ptr [RBP + -0x28]
	0002b31e:MOV RAX,RCX
	0002b321:SHR RAX,0x1
	0002b324:MOV RDX,-0x7bdef7bdef7bdef7
	0002b32e:MUL RDX
	0002b331:SHR RDX,0x4
	0002b335:MOV RAX,RDX
	0002b338:SHL RAX,0x5
	0002b33c:SUB RAX,RDX
	0002b33f:ADD RAX,RAX
	0002b342:SUB RCX,RAX
	0002b345:MOV RDX,RCX
	0002b348:MOV RAX,qword ptr [RBP + -0x38]
	0002b34c:LEA RCX,[RAX + 0x4]
	0002b350:LEA RAX,[0x35ea0]
	0002b357:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b35b:MOV byte ptr [RCX],AL
	0002b35d:MOV RAX,qword ptr [RBP + -0x28]
	0002b361:SHR RAX,0x1
	0002b364:MOV RDX,-0x7bdef7bdef7bdef7
	0002b36e:MUL RDX
	0002b371:MOV RAX,RDX
	0002b374:SHR RAX,0x4
	0002b378:MOV qword ptr [RBP + -0x28],RAX
	0002b37c:MOV RCX,qword ptr [RBP + -0x28]
	0002b380:MOV RAX,RCX
	0002b383:SHR RAX,0x1
	0002b386:MOV RDX,-0x7bdef7bdef7bdef7
	0002b390:MUL RDX
	0002b393:SHR RDX,0x4
	0002b397:MOV RAX,RDX
	0002b39a:SHL RAX,0x5
	0002b39e:SUB RAX,RDX
	0002b3a1:ADD RAX,RAX
	0002b3a4:SUB RCX,RAX
	0002b3a7:MOV RDX,RCX
	0002b3aa:MOV RAX,qword ptr [RBP + -0x38]
	0002b3ae:LEA RCX,[RAX + 0x5]
	0002b3b2:LEA RAX,[0x35ea0]
	0002b3b9:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b3bd:MOV byte ptr [RCX],AL
	0002b3bf:MOV RDX,qword ptr [RBP + -0x68]
	0002b3c3:MOV RAX,qword ptr [RBP + -0x58]
	0002b3c7:MOV RCX,qword ptr [RBP + -0x70]
	0002b3cb:MOV RSI,RDX
	0002b3ce:MOV RDI,RAX
	0002b3d1:CALL RCX
	0002b3d3:MOV dword ptr [RBP + -0x48],EAX
	0002b3d6:CMP dword ptr [RBP + -0x48],0x0
	0002b3da:JS 0x0002b3eb
	0002b3dc:CALL 0x00005900
	0002b3e1:MOV EDX,dword ptr [RBP + -0x44]
	0002b3e4:MOV dword ptr [RAX],EDX
	0002b3e6:MOV EAX,dword ptr [RBP + -0x48]
	0002b3e9:JMP 0x0002b432
	0002b3eb:CALL 0x00005900
	0002b3f0:MOV EAX,dword ptr [RAX]
	0002b3f2:CMP EAX,0x11
	0002b3f5:JZ 0x0002b3fe
	0002b3f7:MOV EAX,0xffffffff
	0002b3fc:JMP 0x0002b432
	0002b3fe:MOV RAX,qword ptr [0x000430a0]
	0002b405:ADD RAX,0x1e61
	0002b40b:MOV qword ptr [0x000430a0],RAX
	0002b412:ADD dword ptr [RBP + -0x4c],0x1
	0002b416:MOV EAX,dword ptr [RBP + -0x4c]
	0002b419:CMP EAX,dword ptr [RBP + -0x40]
	0002b41c:JC 0x0002b18b
END_OF_LINE
----------------------------------------------
43: *pcVar9 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	0002b1cb:MOVZX EDX,byte ptr [RDX + RAX*0x1]
	0002b1cf:MOV RAX,qword ptr [RBP + -0x38]
	0002b1d3:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
44: [try_tempname::value % 0x3e];
	0002b1be:SUB RCX,RAX
END_OF_LINE
----------------------------------------------
45: pcVar9[1] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	0002b226:LEA RCX,[RAX + 0x1]
	0002b22a:LEA RAX,[0x35ea0]
	0002b231:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b235:MOV byte ptr [RCX],AL
END_OF_LINE
----------------------------------------------
46: [(uVar3 / 0x3e) % 0x3e];
	0002b1ec:SHR RAX,0x4
	0002b1f0:MOV qword ptr [RBP + -0x28],RAX
	0002b1f4:MOV RCX,qword ptr [RBP + -0x28]
	0002b1f8:MOV RAX,RCX
	0002b1fb:SHR RAX,0x1
	0002b1fe:MOV RDX,-0x7bdef7bdef7bdef7
	0002b208:MUL RDX
	0002b20b:SHR RDX,0x4
	0002b20f:MOV RAX,RDX
	0002b212:SHL RAX,0x5
	0002b216:SUB RAX,RDX
	0002b219:ADD RAX,RAX
	0002b21c:SUB RCX,RAX
END_OF_LINE
----------------------------------------------
47: uVar10 = (uVar3 / 0x3e) / 0x3e;
	0002b1ec:SHR RAX,0x4
	0002b1f0:MOV qword ptr [RBP + -0x28],RAX
	0002b1f4:MOV RCX,qword ptr [RBP + -0x28]
	0002b1f8:MOV RAX,RCX
	0002b1fb:SHR RAX,0x1
	0002b1fe:MOV RDX,-0x7bdef7bdef7bdef7
	0002b208:MUL RDX
	0002b20b:SHR RDX,0x4
	0002b20f:MOV RAX,RDX
	0002b212:SHL RAX,0x5
	0002b216:SUB RAX,RDX
	0002b219:ADD RAX,RAX
	0002b21c:SUB RCX,RAX
	0002b21f:MOV RDX,RCX
	0002b222:MOV RAX,qword ptr [RBP + -0x38]
	0002b226:LEA RCX,[RAX + 0x1]
	0002b22a:LEA RAX,[0x35ea0]
	0002b231:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b235:MOV byte ptr [RCX],AL
	0002b237:MOV RAX,qword ptr [RBP + -0x28]
	0002b23b:SHR RAX,0x1
	0002b23e:MOV RDX,-0x7bdef7bdef7bdef7
	0002b248:MUL RDX
	0002b24b:MOV RAX,RDX
	0002b24e:SHR RAX,0x4
END_OF_LINE
----------------------------------------------
48: pcVar9[2] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"[uVar10 % 0x3e];
	0002b27e:SUB RCX,RAX
	0002b281:MOV RDX,RCX
	0002b284:MOV RAX,qword ptr [RBP + -0x38]
	0002b288:LEA RCX,[RAX + 0x2]
	0002b28c:LEA RAX,[0x35ea0]
	0002b293:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b297:MOV byte ptr [RCX],AL
END_OF_LINE
----------------------------------------------
49: uVar10 = uVar10 / 0x3e;
	0002b2b0:SHR RAX,0x4
END_OF_LINE
----------------------------------------------
50: pcVar9[3] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"[uVar10 % 0x3e];
	0002b2e0:SUB RCX,RAX
	0002b2e3:MOV RDX,RCX
	0002b2e6:MOV RAX,qword ptr [RBP + -0x38]
	0002b2ea:LEA RCX,[RAX + 0x3]
	0002b2ee:LEA RAX,[0x35ea0]
	0002b2f5:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b2f9:MOV byte ptr [RCX],AL
END_OF_LINE
----------------------------------------------
51: uVar10 = uVar10 / 0x3e;
	0002b312:SHR RAX,0x4
END_OF_LINE
----------------------------------------------
52: pcVar9[4] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"[uVar10 % 0x3e];
	0002b342:SUB RCX,RAX
	0002b345:MOV RDX,RCX
	0002b348:MOV RAX,qword ptr [RBP + -0x38]
	0002b34c:LEA RCX,[RAX + 0x4]
	0002b350:LEA RAX,[0x35ea0]
	0002b357:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b35b:MOV byte ptr [RCX],AL
END_OF_LINE
----------------------------------------------
53: pcVar9[5] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	0002b3ae:LEA RCX,[RAX + 0x5]
	0002b3b2:LEA RAX,[0x35ea0]
	0002b3b9:MOVZX EAX,byte ptr [RDX + RAX*0x1]
	0002b3bd:MOV byte ptr [RCX],AL
END_OF_LINE
----------------------------------------------
54: [(uVar10 / 0x3e) % 0x3e];
	0002b374:SHR RAX,0x4
	0002b378:MOV qword ptr [RBP + -0x28],RAX
	0002b37c:MOV RCX,qword ptr [RBP + -0x28]
	0002b380:MOV RAX,RCX
	0002b383:SHR RAX,0x1
	0002b386:MOV RDX,-0x7bdef7bdef7bdef7
	0002b390:MUL RDX
	0002b393:SHR RDX,0x4
	0002b397:MOV RAX,RDX
	0002b39a:SHL RAX,0x5
	0002b39e:SUB RAX,RDX
	0002b3a1:ADD RAX,RAX
	0002b3a4:SUB RCX,RAX
END_OF_LINE
----------------------------------------------
55: iVar6 = (*tryfunc)(tmpl,args);
	0002b3d1:CALL RCX
END_OF_LINE
----------------------------------------------
56: if (-1 < iVar6) {
	0002b3d6:CMP dword ptr [RBP + -0x48],0x0
	0002b3da:JS 0x0002b3eb
END_OF_LINE
----------------------------------------------
57: piVar7 = __errno_location();
	0002b3dc:CALL 0x00005900
END_OF_LINE
----------------------------------------------
58: *piVar7 = iVar1;
	0002b3e4:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
59: goto LAB_0002b432;
	0002b432:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
61: piVar7 = __errno_location();
	0002b3eb:CALL 0x00005900
END_OF_LINE
----------------------------------------------
62: if (*piVar7 != 0x11) {
	0002b3f0:MOV EAX,dword ptr [RAX]
	0002b3f2:CMP EAX,0x11
	0002b3f5:JZ 0x0002b3fe
END_OF_LINE
----------------------------------------------
63: iVar6 = -1;
	0002b3f7:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
64: goto LAB_0002b432;
	0002b432:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
66: try_tempname::value = try_tempname::value + 0x1e61;
	0002b405:ADD RAX,0x1e61
END_OF_LINE
----------------------------------------------
68: piVar7 = __errno_location();
	0002b422:CALL 0x00005900
END_OF_LINE
----------------------------------------------
69: *piVar7 = 0x11;
	0002b427:MOV dword ptr [RAX],0x11
END_OF_LINE
----------------------------------------------
70: iVar6 = -1;
	0002b42d:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
71: goto LAB_0002b432;
	0002b432:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
74: piVar7 = __errno_location();
	0002b10d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
75: *piVar7 = 0x16;
	0002b112:MOV dword ptr [RAX],0x16
END_OF_LINE
----------------------------------------------
76: iVar6 = -1;
	0002b118:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
77: LAB_0002b432:
	0002b432:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
78: if (lVar2 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002b436:SUB RDX,qword ptr FS:[0x28]
	0002b43f:JZ 0x0002b446
END_OF_LINE
----------------------------------------------
80: __stack_chk_fail();
	0002b441:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
82: return iVar6;
	0002b447:RET
END_OF_LINE



Function: try_file
----------------------------------------------
11: iVar1 = open(tmpl,*flags & 0xffffff3c | 0xc2,0x180);
	0002b468:MOV EAX,dword ptr [RAX]
	0002b46a:AND AL,0x3c
	0002b46c:OR AL,0xc2
	0002b46e:MOV ECX,EAX
	0002b470:MOV RAX,qword ptr [RBP + -0x18]
	0002b474:MOV EDX,0x180
	0002b479:MOV ESI,ECX
	0002b47b:MOV RDI,RAX
	0002b47e:MOV EAX,0x0
	0002b483:CALL 0x00005f30
END_OF_LINE
----------------------------------------------
12: return iVar1;
	0002b489:RET
END_OF_LINE



Function: try_dir
----------------------------------------------
9: iVar1 = mkdir(tmpl,0x1c0);
	0002b4aa:CALL 0x00005960
END_OF_LINE
----------------------------------------------
10: return iVar1;
	0002b4b0:RET
END_OF_LINE



Function: try_nocreate
----------------------------------------------
13: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002b4ce:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
14: iVar2 = lstat(tmpl,(stat *)&st);
	0002b4dd:LEA RDX,[RBP + -0xa0]
	0002b4e4:MOV RAX,qword ptr [RBP + -0xa8]
	0002b4eb:MOV RSI,RDX
	0002b4ee:MOV RDI,RAX
	0002b4f1:CALL 0x00005c90
END_OF_LINE
----------------------------------------------
15: if (iVar2 != 0) {
	0002b4f6:TEST EAX,EAX
	0002b4f8:JZ 0x0002b506
END_OF_LINE
----------------------------------------------
16: piVar3 = __errno_location();
	0002b4fa:CALL 0x00005900
END_OF_LINE
----------------------------------------------
17: if (*piVar3 != 0x4b) goto LAB_0002b511;
	0002b4ff:MOV EAX,dword ptr [RAX]
	0002b501:CMP EAX,0x4b
	0002b504:JNZ 0x0002b511
	0002b506:CALL 0x00005900
	0002b50b:MOV dword ptr [RAX],0x11
	0002b511:CALL 0x00005900
END_OF_LINE
----------------------------------------------
19: piVar3 = __errno_location();
	0002b506:CALL 0x00005900
END_OF_LINE
----------------------------------------------
20: *piVar3 = 0x11;
	0002b50b:MOV dword ptr [RAX],0x11
END_OF_LINE
----------------------------------------------
21: LAB_0002b511:
	0002b511:CALL 0x00005900
END_OF_LINE
----------------------------------------------
22: piVar3 = __errno_location();
	0002b511:CALL 0x00005900
END_OF_LINE
----------------------------------------------
23: if (*piVar3 == 2) {
	0002b516:MOV EAX,dword ptr [RAX]
	0002b518:CMP EAX,0x2
	0002b51b:JNZ 0x0002b524
END_OF_LINE
----------------------------------------------
24: iVar2 = 0;
	0002b51d:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
27: iVar2 = -1;
	0002b524:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
29: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002b52d:SUB RDX,qword ptr FS:[0x28]
	0002b536:JZ 0x0002b53d
END_OF_LINE
----------------------------------------------
31: __stack_chk_fail();
	0002b538:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
33: return iVar2;
	0002b53e:RET
END_OF_LINE



Function: gen_tempname
----------------------------------------------
12: flags_local = flags;
	0002b55c:JZ 0x0002b58c
END_OF_LINE
----------------------------------------------
13: suffixlen_local = suffixlen;
	0002b55c:JZ 0x0002b58c
END_OF_LINE
----------------------------------------------
14: tmpl_local = tmpl;
	0002b55c:JZ 0x0002b58c
END_OF_LINE
----------------------------------------------
15: if (kind == 2) {
	0002b558:CMP dword ptr [RBP + -0x24],0x2
	0002b55c:JZ 0x0002b58c
END_OF_LINE
----------------------------------------------
16: tryfunc = try_nocreate;
	0002b593:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
19: if (2 < kind) {
	0002b562:JG 0x0002b599
END_OF_LINE
----------------------------------------------
20: LAB_0002b599:
	0002b599:LEA RAX,[0x35f20]
END_OF_LINE
----------------------------------------------
22: __assert_fail("! \"invalid KIND in __gen_tempname\"","tempname.c",0x13f,"gen_tempname");
	0002b5bc:CALL 0x00005bf0
END_OF_LINE
----------------------------------------------
24: if (kind == 0) {
	0002b564:CMP dword ptr [RBP + -0x24],0x0
	0002b568:JZ 0x0002b572
END_OF_LINE
----------------------------------------------
25: tryfunc = try_file;
	0002b579:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
28: if (kind != 1) goto LAB_0002b599;
	0002b56a:CMP dword ptr [RBP + -0x24],0x1
	0002b56e:JZ 0x0002b57f
	0002b570:JMP 0x0002b599
	0002b572:LEA RAX,[0x2b448]
	0002b579:MOV qword ptr [RBP + -0x8],RAX
	0002b57d:JMP 0x0002b5c1
	0002b57f:LEA RAX,[0x2b48a]
	0002b586:MOV qword ptr [RBP + -0x8],RAX
	0002b58a:JMP 0x0002b5c1
	0002b58c:LEA RAX,[0x2b4b1]
	0002b593:MOV qword ptr [RBP + -0x8],RAX
	0002b597:JMP 0x0002b5c1
	0002b599:LEA RAX,[0x35f20]
END_OF_LINE
----------------------------------------------
29: tryfunc = try_dir;
	0002b586:MOV qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
32: iVar1 = try_tempname(tmpl,suffixlen,&flags_local,tryfunc);
	0002b5c5:LEA RDX,[RBP + -0x20]
	0002b5c9:MOV ESI,dword ptr [RBP + -0x1c]
	0002b5cc:MOV RAX,qword ptr [RBP + -0x18]
	0002b5d0:MOV RDI,RAX
	0002b5d3:CALL 0x0002b083
END_OF_LINE
----------------------------------------------
33: return iVar1;
	0002b5d9:RET
END_OF_LINE



Function: make_timespec
----------------------------------------------
10: tVar1.tv_nsec = ns;
	0002b5fe:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
11: tVar1.tv_sec = s;
	0002b5fe:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
12: return tVar1;
	0002b603:RET
END_OF_LINE



Function: timespec_cmp
----------------------------------------------
9: if (a.tv_sec < b.tv_sec) {
	0002b608:PUSH RBP
	0002b609:MOV RBP,RSP
	0002b60c:MOV RAX,RSI
	0002b60f:MOV R8,RDI
	0002b612:MOV RSI,R8
	0002b615:MOV RDI,R9
	0002b618:MOV RDI,RAX
	0002b61b:MOV qword ptr [RBP + -0x10],RSI
	0002b61f:MOV qword ptr [RBP + -0x8],RDI
	0002b623:MOV qword ptr [RBP + -0x20],RDX
	0002b627:MOV qword ptr [RBP + -0x18],RCX
	0002b62b:MOV RDX,qword ptr [RBP + -0x10]
	0002b62f:MOV RAX,qword ptr [RBP + -0x20]
	0002b633:CMP RDX,RAX
	0002b636:JGE 0x0002b63f
END_OF_LINE
----------------------------------------------
10: iVar1 = -1;
	0002b638:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
12: else if (b.tv_sec < a.tv_sec) {
	0002b608:PUSH RBP
	0002b609:MOV RBP,RSP
	0002b60c:MOV RAX,RSI
	0002b60f:MOV R8,RDI
	0002b612:MOV RSI,R8
	0002b615:MOV RDI,R9
	0002b618:MOV RDI,RAX
	0002b61b:MOV qword ptr [RBP + -0x10],RSI
	0002b61f:MOV qword ptr [RBP + -0x8],RDI
	0002b623:MOV qword ptr [RBP + -0x20],RDX
	0002b627:MOV qword ptr [RBP + -0x18],RCX
	0002b62b:MOV RDX,qword ptr [RBP + -0x10]
	0002b62f:MOV RAX,qword ptr [RBP + -0x20]
	0002b633:CMP RDX,RAX
	0002b636:JGE 0x0002b63f
	0002b638:MOV EAX,0xffffffff
	0002b63d:JMP 0x0002b68f
	0002b63f:MOV RDX,qword ptr [RBP + -0x10]
	0002b643:MOV RAX,qword ptr [RBP + -0x20]
	0002b647:CMP RDX,RAX
	0002b64a:JLE 0x0002b653
END_OF_LINE
----------------------------------------------
13: iVar1 = 1;
	0002b64c:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
16: iVar1 = a.tv_nsec - b.tv_nsec;
	0002b68d:SUB EAX,ECX
END_OF_LINE
----------------------------------------------
18: return iVar1;
	0002b690:RET
END_OF_LINE



Function: timespec_sign
----------------------------------------------
8: if (a.tv_sec < 0) {
	0002b695:PUSH RBP
	0002b696:MOV RBP,RSP
	0002b699:MOV RAX,RDI
	0002b69c:MOV RCX,RSI
	0002b69f:MOV RDX,RCX
	0002b6a2:MOV qword ptr [RBP + -0x10],RAX
	0002b6a6:MOV qword ptr [RBP + -0x8],RDX
	0002b6aa:MOV RAX,qword ptr [RBP + -0x10]
	0002b6ae:TEST RAX,RAX
	0002b6b1:JS 0x0002b6d3
END_OF_LINE
----------------------------------------------
9: iVar1 = -1;
	0002b6d3:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
11: else if ((a.tv_sec == 0) && (a.tv_nsec == 0)) {
	0002b695:PUSH RBP
	0002b696:MOV RBP,RSP
	0002b699:MOV RAX,RDI
	0002b69c:MOV RCX,RSI
	0002b69f:MOV RDX,RCX
	0002b6a2:MOV qword ptr [RBP + -0x10],RAX
	0002b6a6:MOV qword ptr [RBP + -0x8],RDX
	0002b6aa:MOV RAX,qword ptr [RBP + -0x10]
	0002b6ae:TEST RAX,RAX
	0002b6b1:JS 0x0002b6d3
	0002b6b3:MOV RAX,qword ptr [RBP + -0x10]
	0002b6b7:TEST RAX,RAX
	0002b6ba:JNZ 0x0002b6c5
	0002b6bc:MOV RAX,qword ptr [RBP + -0x8]
	0002b6c0:TEST RAX,RAX
	0002b6c3:JZ 0x0002b6cc
END_OF_LINE
----------------------------------------------
12: iVar1 = 0;
	0002b6cc:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: iVar1 = 1;
	0002b6c5:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
17: return iVar1;
	0002b6d9:RET
END_OF_LINE



Function: timespectod
----------------------------------------------
7: return (double)a.tv_nsec / 1000000000.0 + (double)a.tv_sec;
	0002b6de:PUSH RBP
	0002b6df:MOV RBP,RSP
	0002b6e2:MOV RAX,RDI
	0002b6e5:MOV RCX,RSI
	0002b6e8:MOV RDX,RCX
	0002b6eb:MOV qword ptr [RBP + -0x10],RAX
	0002b6ef:MOV qword ptr [RBP + -0x8],RDX
	0002b6f3:MOV RAX,qword ptr [RBP + -0x10]
	0002b6f7:PXOR XMM1,XMM1
	0002b6fb:CVTSI2SD XMM1,RAX
	0002b700:MOV RAX,qword ptr [RBP + -0x8]
	0002b704:PXOR XMM0,XMM0
	0002b708:CVTSI2SD XMM0,RAX
	0002b70d:MOVSD XMM2,qword ptr [0x00035f30]
	0002b715:DIVSD XMM0,XMM2
	0002b719:ADDSD XMM0,XMM1
	0002b71d:MOVQ RAX,XMM0
	0002b722:MOVQ XMM0,RAX
	0002b727:POP RBP
	0002b728:RET
END_OF_LINE



Function: cleanup_slaves
----------------------------------------------
11: while ((long)slaves_count != 0) {
	0002b73b:CDQE
	0002b73d:MOV qword ptr [RBP + -0x8],RAX
	0002b741:CMP qword ptr [RBP + -0x8],0x0
	0002b746:JZ 0x0002b798
END_OF_LINE
----------------------------------------------
12: lVar1 = (long)slaves_count + -1;
	0002b73b:CDQE
	0002b73d:MOV qword ptr [RBP + -0x8],RAX
	0002b741:CMP qword ptr [RBP + -0x8],0x0
	0002b746:JZ 0x0002b798
	0002b748:SUB qword ptr [RBP + -0x8],0x1
END_OF_LINE
----------------------------------------------
13: slaves_count = (sig_atomic_t)lVar1;
	0002b751:MOV dword ptr [0x000431c0],EAX
END_OF_LINE
----------------------------------------------
14: if (slaves[lVar1].used != 0) {
	0002b766:ADD RAX,RDX
	0002b769:MOV EAX,dword ptr [RAX]
	0002b76b:TEST EAX,EAX
	0002b76d:JZ 0x0002b735
END_OF_LINE
----------------------------------------------
15: kill(slaves[lVar1].child,1);
	0002b781:MOV EAX,dword ptr [RAX + 0x4]
	0002b784:MOV dword ptr [RBP + -0xc],EAX
	0002b787:MOV EAX,dword ptr [RBP + -0xc]
	0002b78a:MOV ESI,0x1
	0002b78f:MOV EDI,EAX
	0002b791:CALL 0x00005db0
END_OF_LINE
----------------------------------------------
18: return;
	0002b79b:RET
END_OF_LINE



Function: register_slave_subprocess
----------------------------------------------
15: if (!register_slave_subprocess::cleanup_slaves_registered) {
	0002b7b5:TEST AL,AL
	0002b7b7:JZ 0x0002b7de
END_OF_LINE
----------------------------------------------
16: atexit(cleanup_slaves);
	0002b7c3:CALL 0x00030220
END_OF_LINE
----------------------------------------------
17: at_fatal_signal(cleanup_slaves);
	0002b7d2:CALL 0x0001e8d2
END_OF_LINE
----------------------------------------------
18: register_slave_subprocess::cleanup_slaves_registered = true;
	0002b7d7:MOV byte ptr [0x000431c4],0x1
END_OF_LINE
----------------------------------------------
20: __src = slaves;
	0002b7de:MOV RAX,qword ptr [0x0003e1c0]
END_OF_LINE
----------------------------------------------
21: s = slaves;
	0002b7e5:MOV qword ptr [RBP + -0x28],RAX
END_OF_LINE
----------------------------------------------
22: while( true ) {
	0002b80e:JNZ 0x0002b829
END_OF_LINE
----------------------------------------------
23: if (slaves + slaves_count <= s) {
	0002b7ef:CDQE
	0002b7f1:LEA RDX,[RAX*0x8]
	0002b7f9:MOV RAX,qword ptr [RBP + -0x28]
	0002b7fd:ADD RAX,RDX
	0002b800:MOV qword ptr [RBP + -0x20],RAX
	0002b804:JMP 0x0002b82e
	0002b806:MOV RAX,qword ptr [RBP + -0x28]
	0002b80a:MOV EAX,dword ptr [RAX]
	0002b80c:TEST EAX,EAX
	0002b80e:JNZ 0x0002b829
	0002b810:MOV RAX,qword ptr [RBP + -0x28]
	0002b814:MOV EDX,dword ptr [RBP + -0x34]
	0002b817:MOV dword ptr [RAX + 0x4],EDX
	0002b81a:MOV RAX,qword ptr [RBP + -0x28]
	0002b81e:MOV dword ptr [RAX],0x1
	0002b824:JMP 0x0002b931
	0002b829:ADD qword ptr [RBP + -0x28],0x8
	0002b82e:MOV RAX,qword ptr [RBP + -0x28]
	0002b832:CMP RAX,qword ptr [RBP + -0x20]
	0002b836:JC 0x0002b806
END_OF_LINE
----------------------------------------------
24: if ((long)slaves_count == slaves_allocated) {
	0002b83e:MOVSXD RDX,EAX
	0002b841:MOV RAX,qword ptr [0x0003e1b8]
	0002b848:CMP RDX,RAX
	0002b84b:JNZ 0x0002b8ea
END_OF_LINE
----------------------------------------------
25: sVar1 = slaves_allocated * 2;
	0002b863:ADD RAX,RAX
END_OF_LINE
----------------------------------------------
26: __dest = (slaves_entry_t *)malloc(slaves_allocated << 4);
	0002b86e:SHL RAX,0x3
	0002b872:MOV RDI,RAX
	0002b875:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
27: if (__dest == (slaves_entry_t *)0x0) {
	0002b87e:CMP qword ptr [RBP + -0x8],0x0
	0002b883:JNZ 0x0002b899
END_OF_LINE
----------------------------------------------
28: kill(child,1);
	0002b88f:CALL 0x00005db0
END_OF_LINE
----------------------------------------------
30: xalloc_die();
	0002b894:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
32: memcpy(__dest,__src,slaves_allocated * 8);
	0002b8a0:LEA RDX,[RAX*0x8]
	0002b8a8:MOV RCX,qword ptr [RBP + -0x18]
	0002b8ac:MOV RAX,qword ptr [RBP + -0x8]
	0002b8b0:MOV RSI,RCX
	0002b8b3:MOV RDI,RAX
	0002b8b6:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
33: slaves_allocated = sVar1;
	0002b8dc:JZ 0x0002b8ea
END_OF_LINE
----------------------------------------------
34: slaves = __dest;
	0002b8dc:JZ 0x0002b8ea
END_OF_LINE
----------------------------------------------
35: if (__src != static_slaves) {
	0002b8d8:CMP qword ptr [RBP + -0x18],RAX
	0002b8dc:JZ 0x0002b8ea
END_OF_LINE
----------------------------------------------
36: free(__src);
	0002b8e5:CALL 0x00005860
END_OF_LINE
----------------------------------------------
39: slaves[slaves_count].child = child;
	0002b8f7:CDQE
	0002b8f9:SHL RAX,0x3
	0002b8fd:ADD RDX,RAX
	0002b900:MOV EAX,dword ptr [RBP + -0x34]
	0002b903:MOV dword ptr [RDX + 0x4],EAX
END_OF_LINE
----------------------------------------------
40: slaves[slaves_count].used = 1;
	0002b913:CDQE
	0002b915:SHL RAX,0x3
	0002b919:ADD RAX,RDX
	0002b91c:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
41: slaves_count = slaves_count + 1;
	0002b928:ADD EAX,0x1
	0002b92b:MOV dword ptr [0x000431c0],EAX
	0002b931:LEAVE
END_OF_LINE
----------------------------------------------
42: return;
	0002b932:RET
END_OF_LINE
----------------------------------------------
44: if (s->used == 0) break;
	0002b80a:MOV EAX,dword ptr [RAX]
	0002b80c:TEST EAX,EAX
	0002b80e:JNZ 0x0002b829
END_OF_LINE
----------------------------------------------
45: s = s + 1;
	0002b829:ADD qword ptr [RBP + -0x28],0x8
END_OF_LINE
----------------------------------------------
47: s->child = child;
	0002b817:MOV dword ptr [RAX + 0x4],EDX
END_OF_LINE
----------------------------------------------
48: s->used = 1;
	0002b81e:MOV dword ptr [RAX],0x1
END_OF_LINE
----------------------------------------------
49: return;
	0002b932:RET
END_OF_LINE



Function: unregister_slave_subprocess
----------------------------------------------
10: psVar1 = slaves + slaves_count;
	0002b94f:CDQE
	0002b951:LEA RDX,[RAX*0x8]
	0002b959:MOV RAX,qword ptr [RBP + -0x10]
	0002b95d:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
11: for (s = slaves; s < psVar1; s = s + 1) {
	0002b945:MOV qword ptr [RBP + -0x10],RAX
	0002b949:MOV EAX,dword ptr [0x000431c0]
	0002b94f:CDQE
	0002b951:LEA RDX,[RAX*0x8]
	0002b959:MOV RAX,qword ptr [RBP + -0x10]
	0002b95d:ADD RAX,RDX
	0002b960:MOV qword ptr [RBP + -0x8],RAX
	0002b964:JMP 0x0002b98b
	0002b966:MOV RAX,qword ptr [RBP + -0x10]
	0002b96a:MOV EAX,dword ptr [RAX]
	0002b96c:TEST EAX,EAX
	0002b96e:JZ 0x0002b986
	0002b970:MOV RAX,qword ptr [RBP + -0x10]
	0002b974:MOV EAX,dword ptr [RAX + 0x4]
	0002b977:CMP dword ptr [RBP + -0x14],EAX
	0002b97a:JNZ 0x0002b986
	0002b97c:MOV RAX,qword ptr [RBP + -0x10]
	0002b980:MOV dword ptr [RAX],0x0
	0002b986:ADD qword ptr [RBP + -0x10],0x8
	0002b98b:MOV RAX,qword ptr [RBP + -0x10]
	0002b98f:CMP RAX,qword ptr [RBP + -0x8]
	0002b993:JC 0x0002b966
END_OF_LINE
----------------------------------------------
12: if ((s->used != 0) && (child == s->child)) {
	0002b96a:MOV EAX,dword ptr [RAX]
	0002b96c:TEST EAX,EAX
	0002b96e:JZ 0x0002b986
	0002b970:MOV RAX,qword ptr [RBP + -0x10]
	0002b974:MOV EAX,dword ptr [RAX + 0x4]
	0002b977:CMP dword ptr [RBP + -0x14],EAX
	0002b97a:JNZ 0x0002b986
END_OF_LINE
----------------------------------------------
13: s->used = 0;
	0002b980:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
16: return;
	0002b998:RET
END_OF_LINE



Function: wait_subprocess
----------------------------------------------
20: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0002b9cc:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
21: if (termsigp != (int *)0x0) {
	0002b9db:CMP qword ptr [RBP + -0x38],0x0
	0002b9e0:JZ 0x0002b9ec
END_OF_LINE
----------------------------------------------
22: *termsigp = 0;
	0002b9e6:MOV dword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
24: status = 0;
	0002b9ec:MOV dword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
26: while (result = waitpid(child,&status,0), result != child) {
	0002b9f3:LEA RCX,[RBP + -0x10]
	0002b9f7:MOV EAX,dword ptr [RBP + -0x14]
	0002b9fa:MOV EDX,0x0
	0002b9ff:MOV RSI,RCX
	0002ba02:MOV EDI,EAX
	0002ba04:CALL 0x00005f20
	0002ba09:MOV dword ptr [RBP + -0xc],EAX
	0002ba0c:MOV EAX,dword ptr [RBP + -0xc]
	0002ba0f:CMP EAX,dword ptr [RBP + -0x14]
	0002ba12:JZ 0x0002ba63
END_OF_LINE
----------------------------------------------
27: piVar2 = __errno_location();
	0002ba14:CALL 0x00005900
END_OF_LINE
----------------------------------------------
28: if (*piVar2 != 4) {
	0002ba19:MOV EAX,dword ptr [RAX]
	0002ba1b:CMP EAX,0x4
	0002ba1e:JZ 0x0002ba70
END_OF_LINE
----------------------------------------------
29: if ((exit_on_error) || (!null_stderr)) {
	0002ba24:JNZ 0x0002ba31
	0002ba26:MOVZX EAX,byte ptr [RBP + -0x24]
	0002ba2a:XOR EAX,0x1
	0002ba2d:TEST AL,AL
	0002ba2f:JZ 0x0002ba59
END_OF_LINE
----------------------------------------------
30: piVar2 = __errno_location();
	0002ba31:CALL 0x00005900
END_OF_LINE
----------------------------------------------
31: error(exit_on_error,*piVar2,"%s subprocess",progname);
	0002ba36:MOV ESI,dword ptr [RAX]
	0002ba38:MOVZX EAX,byte ptr [RBP + -0x2c]
	0002ba3c:MOVZX EAX,AL
	0002ba3f:MOV RDX,qword ptr [RBP + -0x20]
	0002ba43:MOV RCX,RDX
	0002ba46:LEA RDX,[0x35f38]
	0002ba4d:MOV EDI,EAX
	0002ba4f:MOV EAX,0x0
	0002ba54:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
33: uVar1 = 0x7f;
	0002ba59:MOV EAX,0x7f
END_OF_LINE
----------------------------------------------
34: LAB_0002bb7b:
	0002bb7b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
35: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	0002bb7f:SUB RDX,qword ptr FS:[0x28]
	0002bb88:JZ 0x0002bb8f
END_OF_LINE
----------------------------------------------
36: return uVar1;
	0002bb90:RET
END_OF_LINE
----------------------------------------------
39: __stack_chk_fail();
	0002bb8a:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
42: } while ((status & 0xffU) == 0x7f);
	0002ba66:MOVZX EAX,AL
	0002ba69:CMP EAX,0x7f
	0002ba6c:JNZ 0x0002ba73
END_OF_LINE
----------------------------------------------
43: if (slave_process) {
	0002ba78:JZ 0x0002ba84
END_OF_LINE
----------------------------------------------
44: unregister_slave_subprocess(child);
	0002ba7f:CALL 0x0002b933
END_OF_LINE
----------------------------------------------
46: if ((char)(((byte)status & 0x7f) + 1) >> 1 < '\x01') {
	0002ba87:AND EAX,0x7f
	0002ba8a:ADD EAX,0x1
	0002ba8d:SAR AL,0x1
	0002ba8f:TEST AL,AL
	0002ba91:JLE 0x0002bb17
END_OF_LINE
----------------------------------------------
47: if ((status & 0x7fU) != 0) {
	0002bb1a:AND EAX,0x7f
	0002bb1d:TEST EAX,EAX
	0002bb1f:JZ 0x0002bb26
END_OF_LINE
----------------------------------------------
49: abort();
	0002bb21:CALL 0x000058f0
END_OF_LINE
----------------------------------------------
51: if ((status >> 8 & 0xffU) == 0x7f) {
	0002bb29:SAR EAX,0x8
	0002bb2c:MOVZX EAX,AL
	0002bb2f:CMP EAX,0x7f
	0002bb32:JNZ 0x0002bb72
END_OF_LINE
----------------------------------------------
52: if ((exit_on_error) || (!null_stderr)) {
	0002bb38:JNZ 0x0002bb45
	0002bb3a:MOVZX EAX,byte ptr [RBP + -0x24]
	0002bb3e:XOR EAX,0x1
	0002bb41:TEST AL,AL
	0002bb43:JZ 0x0002bb6b
END_OF_LINE
----------------------------------------------
53: error(exit_on_error,0,"%s subprocess failed",progname);
	0002bb66:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
55: uVar1 = 0x7f;
	0002bb6b:MOV EAX,0x7f
END_OF_LINE
----------------------------------------------
58: uVar1 = status >> 8 & 0xff;
	0002bb29:SAR EAX,0x8
	0002bb2c:MOVZX EAX,AL
	0002bb2f:CMP EAX,0x7f
	0002bb32:JNZ 0x0002bb72
	0002bb34:CMP byte ptr [RBP + -0x2c],0x0
	0002bb38:JNZ 0x0002bb45
	0002bb3a:MOVZX EAX,byte ptr [RBP + -0x24]
	0002bb3e:XOR EAX,0x1
	0002bb41:TEST AL,AL
	0002bb43:JZ 0x0002bb6b
	0002bb45:MOVZX EAX,byte ptr [RBP + -0x2c]
	0002bb49:MOVZX EAX,AL
	0002bb4c:MOV RDX,qword ptr [RBP + -0x20]
	0002bb50:MOV RCX,RDX
	0002bb53:LEA RDX,[0x35f6a]
	0002bb5a:MOV ESI,0x0
	0002bb5f:MOV EDI,EAX
	0002bb61:MOV EAX,0x0
	0002bb66:CALL 0x00005f10
	0002bb6b:MOV EAX,0x7f
	0002bb70:JMP 0x0002bb7b
	0002bb72:MOV EAX,dword ptr [RBP + -0x10]
	0002bb75:SAR EAX,0x8
	0002bb78:MOVZX EAX,AL
END_OF_LINE
----------------------------------------------
62: if (termsigp != (int *)0x0) {
	0002ba97:CMP qword ptr [RBP + -0x38],0x0
	0002ba9c:JZ 0x0002baac
END_OF_LINE
----------------------------------------------
63: *termsigp = status & 0x7f;
	0002baa1:AND EAX,0x7f
	0002baa4:MOV EDX,EAX
	0002baa6:MOV RAX,qword ptr [RBP + -0x38]
	0002baaa:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
65: if (((status & 0x7fU) == 0xd) && (ignore_sigpipe)) {
	0002baaf:AND EAX,0x7f
	0002bab2:CMP EAX,0xd
	0002bab5:JNZ 0x0002bac7
	0002bab7:CMP byte ptr [RBP + -0x18],0x0
	0002babb:JZ 0x0002bac7
END_OF_LINE
----------------------------------------------
66: uVar1 = 0;
	0002babd:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
69: if ((exit_on_error) || ((!null_stderr && (termsigp == (int *)0x0)))) {
	0002bacb:JNZ 0x0002badf
	0002bacd:MOVZX EAX,byte ptr [RBP + -0x24]
	0002bad1:XOR EAX,0x1
	0002bad4:TEST AL,AL
	0002bad6:JZ 0x0002bb10
	0002bad8:CMP qword ptr [RBP + -0x38],0x0
	0002badd:JNZ 0x0002bb10
END_OF_LINE
----------------------------------------------
70: error(exit_on_error,0,"%s subprocess got fatal signal %d",progname,status & 0x7f);
	0002bae2:AND EAX,0x7f
	0002bae5:MOV ECX,EAX
	0002bae7:MOVZX EAX,byte ptr [RBP + -0x2c]
	0002baeb:MOVZX EAX,AL
	0002baee:MOV RDX,qword ptr [RBP + -0x20]
	0002baf2:MOV R8D,ECX
	0002baf5:MOV RCX,RDX
	0002baf8:LEA RDX,[0x35f48]
	0002baff:MOV ESI,0x0
	0002bb04:MOV EDI,EAX
	0002bb06:MOV EAX,0x0
	0002bb0b:CALL 0x00005f10
END_OF_LINE
----------------------------------------------
72: uVar1 = 0x7f;
	0002bb10:MOV EAX,0x7f
END_OF_LINE
----------------------------------------------
75: goto LAB_0002bb7b;
	0002bb7b:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE



Function: xnmalloc
----------------------------------------------
11: auVar1._8_8_ = 0;
	0002bbae:MUL qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
12: auVar1._0_8_ = n;
	0002bbae:MUL qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
13: auVar2._8_8_ = 0;
	0002bbae:MUL qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
14: auVar2._0_8_ = s;
	0002bbae:MUL qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
15: if (SUB168(auVar1 * auVar2,0) < 0 || SUB168(auVar1 * auVar2,8) != 0) {
	0002bbae:MUL qword ptr [RBP + -0x10]
	0002bbb2:JNO 0x0002bbb9
	0002bbb4:MOV ECX,0x1
	0002bbb9:TEST RAX,RAX
	0002bbbc:JNS 0x0002bbc3
	0002bbbe:MOV ECX,0x1
	0002bbc3:MOV RAX,RCX
	0002bbc6:AND EAX,0x1
	0002bbc9:TEST AL,AL
	0002bbcb:JZ 0x0002bbd2
END_OF_LINE
----------------------------------------------
17: xalloc_die();
	0002bbcd:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
19: pvVar3 = xmalloc(n * s);
	0002bbd6:IMUL RAX,qword ptr [RBP + -0x10]
	0002bbdb:MOV RDI,RAX
	0002bbde:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
20: return pvVar3;
	0002bbe4:RET
END_OF_LINE



Function: xnrealloc
----------------------------------------------
12: auVar1._8_8_ = 0;
	0002bc06:MUL qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
13: auVar1._0_8_ = n;
	0002bc06:MUL qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
14: auVar2._8_8_ = 0;
	0002bc06:MUL qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
15: auVar2._0_8_ = s;
	0002bc06:MUL qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
16: if (SUB168(auVar1 * auVar2,0) < 0 || SUB168(auVar1 * auVar2,8) != 0) {
	0002bc06:MUL qword ptr [RBP + -0x18]
	0002bc0a:JNO 0x0002bc11
	0002bc0c:MOV ECX,0x1
	0002bc11:TEST RAX,RAX
	0002bc14:JNS 0x0002bc1b
	0002bc16:MOV ECX,0x1
	0002bc1b:MOV RAX,RCX
	0002bc1e:AND EAX,0x1
	0002bc21:TEST AL,AL
	0002bc23:JZ 0x0002bc2a
END_OF_LINE
----------------------------------------------
18: xalloc_die();
	0002bc25:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
20: pvVar3 = xrealloc(p,n * s);
	0002bc2e:IMUL RAX,qword ptr [RBP + -0x18]
	0002bc33:MOV RDX,RAX
	0002bc36:MOV RAX,qword ptr [RBP + -0x8]
	0002bc3a:MOV RSI,RDX
	0002bc3d:MOV RDI,RAX
	0002bc40:CALL 0x0002bd7c
END_OF_LINE
----------------------------------------------
21: return pvVar3;
	0002bc46:RET
END_OF_LINE



Function: x2nrealloc
----------------------------------------------
16: n = *pn;
	0002bc63:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
17: if (p == (void *)0x0) {
	0002bc6a:CMP qword ptr [RBP + -0x18],0x0
	0002bc6f:JNZ 0x0002bcc6
END_OF_LINE
----------------------------------------------
18: if (n == 0) {
	0002bc71:CMP qword ptr [RBP + -0x8],0x0
	0002bc76:JNZ 0x0002bc99
END_OF_LINE
----------------------------------------------
19: auVar1._8_8_ = 0;
	0002bc82:DIV qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
20: auVar1._0_8_ = s;
	0002bc82:DIV qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
21: lVar5 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / auVar1,0);
	0002bc82:DIV qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
22: n = lVar5 + (ulong)(lVar5 == 0);
	0002bc8a:CMP qword ptr [RBP + -0x8],0x0
	0002bc8f:SETZ AL
	0002bc92:MOVZX EAX,AL
	0002bc95:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
24: auVar3._8_8_ = 0;
	0002bca2:MUL qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
25: auVar3._0_8_ = n;
	0002bca2:MUL qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
26: auVar4._8_8_ = 0;
	0002bca2:MUL qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
27: auVar4._0_8_ = s;
	0002bca2:MUL qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
28: if (SUB168(auVar3 * auVar4,0) < 0 || SUB168(auVar3 * auVar4,8) != 0) {
	0002bca2:MUL qword ptr [RBP + -0x28]
	0002bca6:JNO 0x0002bcad
	0002bca8:MOV ECX,0x1
	0002bcad:TEST RAX,RAX
	0002bcb0:JNS 0x0002bcb7
	0002bcb2:MOV ECX,0x1
	0002bcb7:MOV RAX,RCX
	0002bcba:AND EAX,0x1
	0002bcbd:TEST AL,AL
	0002bcbf:JZ 0x0002bcfd
END_OF_LINE
----------------------------------------------
30: xalloc_die();
	0002bcc1:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
34: auVar2._8_8_ = 0;
	0002bcd5:DIV qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
35: auVar2._0_8_ = s;
	0002bcd5:DIV qword ptr [RBP + -0x28]
END_OF_LINE
----------------------------------------------
36: if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554)) / auVar2,0) <= n) {
	0002bcd5:DIV qword ptr [RBP + -0x28]
	0002bcd9:CMP qword ptr [RBP + -0x8],RAX
	0002bcdd:JC 0x0002bce4
END_OF_LINE
----------------------------------------------
38: xalloc_die();
	0002bcdf:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
40: n = n + (n >> 1) + 1;
	0002bce8:SHR RAX,0x1
	0002bceb:MOV RDX,RAX
	0002bcee:MOV RAX,qword ptr [RBP + -0x8]
	0002bcf2:ADD RAX,RDX
	0002bcf5:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
42: *pn = n;
	0002bd05:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
43: pvVar6 = xrealloc(p,n * s);
	0002bd0c:IMUL RAX,qword ptr [RBP + -0x28]
	0002bd11:MOV RDX,RAX
	0002bd14:MOV RAX,qword ptr [RBP + -0x18]
	0002bd18:MOV RSI,RDX
	0002bd1b:MOV RDI,RAX
	0002bd1e:CALL 0x0002bd7c
END_OF_LINE
----------------------------------------------
44: return pvVar6;
	0002bd24:RET
END_OF_LINE



Function: xcharalloc
----------------------------------------------
8: pcVar1 = (char *)xmalloc(n);
	0002bd3c:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
9: return pcVar1;
	0002bd42:RET
END_OF_LINE



Function: xmalloc
----------------------------------------------
9: pvVar1 = malloc(n);
	0002bd5a:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
10: if ((pvVar1 == (void *)0x0) && (n != 0)) {
	0002bd63:CMP qword ptr [RBP + -0x8],0x0
	0002bd68:JNZ 0x0002bd76
	0002bd6a:CMP qword ptr [RBP + -0x18],0x0
	0002bd6f:JZ 0x0002bd76
END_OF_LINE
----------------------------------------------
12: xalloc_die();
	0002bd71:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
14: return pvVar1;
	0002bd76:MOV RAX,qword ptr [RBP + -0x8]
	0002bd7a:LEAVE
	0002bd7b:RET
END_OF_LINE



Function: xrealloc
----------------------------------------------
9: if ((n == 0) && (p != (void *)0x0)) {
	0002bd90:CMP qword ptr [RBP + -0x10],0x0
	0002bd95:JNZ 0x0002bdb1
	0002bd97:CMP qword ptr [RBP + -0x8],0x0
	0002bd9c:JZ 0x0002bdb1
END_OF_LINE
----------------------------------------------
10: free(p);
	0002bda5:CALL 0x00005860
END_OF_LINE
----------------------------------------------
11: pvVar1 = (void *)0x0;
	0002bdaa:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: pvVar1 = realloc(p,n);
	0002bdbf:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
15: if ((pvVar1 == (void *)0x0) && (n != 0)) {
	0002bdc8:CMP qword ptr [RBP + -0x8],0x0
	0002bdcd:JNZ 0x0002bddb
	0002bdcf:CMP qword ptr [RBP + -0x10],0x0
	0002bdd4:JZ 0x0002bddb
END_OF_LINE
----------------------------------------------
17: xalloc_die();
	0002bdd6:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
20: return pvVar1;
	0002bde0:RET
END_OF_LINE



Function: x2realloc
----------------------------------------------
9: pvVar1 = x2nrealloc(p,pn,1);
	0002be08:CALL 0x0002bc47
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	0002be0e:RET
END_OF_LINE



Function: xzalloc
----------------------------------------------
8: pvVar1 = xmalloc(s);
	0002be26:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
9: pvVar1 = memset(pvVar1,0,s);
	0002be3d:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	0002be43:RET
END_OF_LINE



Function: xcalloc
----------------------------------------------
12: auVar1._8_8_ = 0;
	0002be61:MUL qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
13: auVar1._0_8_ = n;
	0002be61:MUL qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
14: auVar2._8_8_ = 0;
	0002be61:MUL qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
15: auVar2._0_8_ = s;
	0002be61:MUL qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
16: if ((-1 < SUB168(auVar1 * auVar2,0) && SUB168(auVar1 * auVar2,8) == 0) &&
	0002be61:MUL qword ptr [RBP + -0x20]
	0002be65:JNO 0x0002be6c
	0002be67:MOV ECX,0x1
	0002be6c:TEST RAX,RAX
	0002be6f:JNS 0x0002be76
	0002be71:MOV ECX,0x1
	0002be76:MOV RAX,RCX
	0002be79:AND EAX,0x1
	0002be7c:TEST AL,AL
	0002be7e:JNZ 0x0002be9e
	0002be80:MOV RDX,qword ptr [RBP + -0x20]
	0002be84:MOV RAX,qword ptr [RBP + -0x18]
	0002be88:MOV RSI,RDX
	0002be8b:MOV RDI,RAX
	0002be8e:CALL 0x00005cd0
	0002be93:MOV qword ptr [RBP + -0x8],RAX
	0002be97:CMP qword ptr [RBP + -0x8],0x0
	0002be9c:JNZ 0x0002bea3
END_OF_LINE
----------------------------------------------
17: (pvVar3 = calloc(n,s), pvVar3 != (void *)0x0)) {
	0002be8e:CALL 0x00005cd0
	0002be93:MOV qword ptr [RBP + -0x8],RAX
	0002be97:CMP qword ptr [RBP + -0x8],0x0
END_OF_LINE
----------------------------------------------
18: return pvVar3;
	0002bea3:MOV RAX,qword ptr [RBP + -0x8]
	0002bea7:LEAVE
	0002bea8:RET
END_OF_LINE
----------------------------------------------
21: xalloc_die();
	0002be9e:CALL 0x000186cd
END_OF_LINE



Function: xmemdup
----------------------------------------------
9: pvVar1 = xmalloc(s);
	0002bec4:CALL 0x0002bd43
END_OF_LINE
----------------------------------------------
10: pvVar1 = memcpy(pvVar1,p,s);
	0002beda:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
11: return pvVar1;
	0002bee0:RET
END_OF_LINE



Function: xstrdup
----------------------------------------------
9: sVar1 = strlen(string);
	0002bef8:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
10: pcVar2 = (char *)xmemdup(string,sVar1 + 1);
	0002befd:LEA RDX,[RAX + 0x1]
	0002bf01:MOV RAX,qword ptr [RBP + -0x8]
	0002bf05:MOV RSI,RDX
	0002bf08:MOV RDI,RAX
	0002bf0b:CALL 0x0002bea9
END_OF_LINE
----------------------------------------------
11: return pcVar2;
	0002bf11:RET
END_OF_LINE



Function: gl_list_create_empty
----------------------------------------------
16: pgVar1 = gl_list_nx_create_empty(implementation,equals_fn,hashcode_fn,dispose_fn,allow_duplicates)
	0002bf4e:CALL 0x00021a6b
END_OF_LINE
----------------------------------------------
18: if (pgVar1 == (gl_list_t)0x0) {
	0002bf57:CMP qword ptr [RBP + -0x8],0x0
	0002bf5c:JNZ 0x0002bf63
END_OF_LINE
----------------------------------------------
20: xalloc_die();
	0002bf5e:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
22: return pgVar1;
	0002bf63:MOV RAX,qword ptr [RBP + -0x8]
	0002bf67:LEAVE
	0002bf68:RET
END_OF_LINE



Function: gl_list_create
----------------------------------------------
16: pgVar1 = gl_list_nx_create(implementation,equals_fn,hashcode_fn,dispose_fn,allow_duplicates,count,
	0002bfb7:CALL 0x00021ab3
END_OF_LINE
----------------------------------------------
17: contents);
	0002bfb7:CALL 0x00021ab3
END_OF_LINE
----------------------------------------------
18: if (pgVar1 == (gl_list_t)0x0) {
	0002bfc4:CMP qword ptr [RBP + -0x8],0x0
	0002bfc9:JNZ 0x0002bfd0
END_OF_LINE
----------------------------------------------
20: xalloc_die();
	0002bfcb:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
22: return pgVar1;
	0002bfd0:MOV RAX,qword ptr [RBP + -0x8]
	0002bfd4:LEAVE
	0002bfd5:RET
END_OF_LINE



Function: gl_list_node_set_value
----------------------------------------------
11: iVar1 = gl_list_node_nx_set_value(list,node,elt);
	0002c000:CALL 0x00021b69
END_OF_LINE
----------------------------------------------
12: if (iVar1 < 0) {
	0002c008:CMP dword ptr [RBP + -0x4],0x0
	0002c00c:JNS 0x0002c013
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c00e:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return;
	0002c015:RET
END_OF_LINE



Function: gl_list_set_at
----------------------------------------------
11: pgVar1 = gl_list_nx_set_at(list,position,elt);
	0002c040:CALL 0x00021c36
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c049:CMP qword ptr [RBP + -0x8],0x0
	0002c04e:JNZ 0x0002c055
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c050:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return pgVar1;
	0002c055:MOV RAX,qword ptr [RBP + -0x8]
	0002c059:LEAVE
	0002c05a:RET
END_OF_LINE



Function: gl_list_add_first
----------------------------------------------
10: pgVar1 = gl_list_nx_add_first(list,elt);
	0002c07d:CALL 0x00021e34
END_OF_LINE
----------------------------------------------
11: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c086:CMP qword ptr [RBP + -0x8],0x0
	0002c08b:JNZ 0x0002c092
END_OF_LINE
----------------------------------------------
13: xalloc_die();
	0002c08d:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
15: return pgVar1;
	0002c092:MOV RAX,qword ptr [RBP + -0x8]
	0002c096:LEAVE
	0002c097:RET
END_OF_LINE



Function: gl_list_add_last
----------------------------------------------
10: pgVar1 = gl_list_nx_add_last(list,elt);
	0002c0ba:CALL 0x00021e65
END_OF_LINE
----------------------------------------------
11: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c0c3:CMP qword ptr [RBP + -0x8],0x0
	0002c0c8:JNZ 0x0002c0cf
END_OF_LINE
----------------------------------------------
13: xalloc_die();
	0002c0ca:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
15: return pgVar1;
	0002c0cf:MOV RAX,qword ptr [RBP + -0x8]
	0002c0d3:LEAVE
	0002c0d4:RET
END_OF_LINE



Function: gl_list_add_before
----------------------------------------------
11: pgVar1 = gl_list_nx_add_before(list,node,elt);
	0002c0ff:CALL 0x00021e96
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c108:CMP qword ptr [RBP + -0x8],0x0
	0002c10d:JNZ 0x0002c114
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c10f:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return pgVar1;
	0002c114:MOV RAX,qword ptr [RBP + -0x8]
	0002c118:LEAVE
	0002c119:RET
END_OF_LINE



Function: gl_list_add_after
----------------------------------------------
11: pgVar1 = gl_list_nx_add_after(list,node,elt);
	0002c144:CALL 0x00021ed0
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c14d:CMP qword ptr [RBP + -0x8],0x0
	0002c152:JNZ 0x0002c159
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c154:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return pgVar1;
	0002c159:MOV RAX,qword ptr [RBP + -0x8]
	0002c15d:LEAVE
	0002c15e:RET
END_OF_LINE



Function: gl_list_add_at
----------------------------------------------
11: pgVar1 = gl_list_nx_add_at(list,position,elt);
	0002c189:CALL 0x00021f0a
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c192:CMP qword ptr [RBP + -0x8],0x0
	0002c197:JNZ 0x0002c19e
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c199:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return pgVar1;
	0002c19e:MOV RAX,qword ptr [RBP + -0x8]
	0002c1a2:LEAVE
	0002c1a3:RET
END_OF_LINE



Function: gl_sortedlist_add
----------------------------------------------
11: pgVar1 = gl_sortedlist_nx_add(list,compar,elt);
	0002c1ce:CALL 0x00022249
END_OF_LINE
----------------------------------------------
12: if (pgVar1 == (gl_list_node_t)0x0) {
	0002c1d7:CMP qword ptr [RBP + -0x8],0x0
	0002c1dc:JNZ 0x0002c1e3
END_OF_LINE
----------------------------------------------
14: xalloc_die();
	0002c1de:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
16: return pgVar1;
	0002c1e3:MOV RAX,qword ptr [RBP + -0x8]
	0002c1e7:LEAVE
	0002c1e8:RET
END_OF_LINE



Function: xstrndup
----------------------------------------------
10: pcVar1 = strndup(string,n);
	0002c20b:CALL 0x00005ca0
END_OF_LINE
----------------------------------------------
11: if (pcVar1 == (char *)0x0) {
	0002c214:CMP qword ptr [RBP + -0x8],0x0
	0002c219:JNZ 0x0002c220
END_OF_LINE
----------------------------------------------
13: xalloc_die();
	0002c21b:CALL 0x000186cd
END_OF_LINE
----------------------------------------------
15: return pcVar1;
	0002c220:MOV RAX,qword ptr [RBP + -0x8]
	0002c224:LEAVE
	0002c225:RET
END_OF_LINE



Function: rpl_fcntl
----------------------------------------------
25: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002c281:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
26: if (action == 0x406) {
	0002c2ca:CMP dword ptr [RBP + -0xf8],0x406
	0002c2d4:JNZ 0x0002c476
END_OF_LINE
----------------------------------------------
27: if (rpl_fcntl::lexical_block_5::have_dupfd_cloexec < 0) {
	0002c328:TEST EAX,EAX
	0002c32a:JS 0x0002c3b3
END_OF_LINE
----------------------------------------------
28: result = rpl_fcntl(fd,0,local_a8 & 0xffffffff);
	0002c3b3:MOV EDX,dword ptr [RBP + -0xe4]
	0002c3b9:MOV EAX,dword ptr [RBP + -0xf4]
	0002c3bf:MOV ESI,0x0
	0002c3c4:MOV EDI,EAX
	0002c3c6:MOV EAX,0x0
	0002c3cb:CALL 0x0002c226
END_OF_LINE
----------------------------------------------
31: result = fcntl(fd,0x406,local_a8 & 0xffffffff);
	0002c330:MOV EDX,dword ptr [RBP + -0xe4]
	0002c336:MOV ECX,dword ptr [RBP + -0xf8]
	0002c33c:MOV EAX,dword ptr [RBP + -0xf4]
	0002c342:MOV ESI,ECX
	0002c344:MOV EDI,EAX
	0002c346:MOV EAX,0x0
	0002c34b:CALL 0x00005a10
END_OF_LINE
----------------------------------------------
32: if ((result < 0) && (piVar4 = __errno_location(), *piVar4 == 0x16)) {
	0002c356:CMP dword ptr [RBP + -0xe8],0x0
	0002c35d:JNS 0x0002c36b
	0002c35f:CALL 0x00005900
	0002c364:MOV EAX,dword ptr [RAX]
	0002c366:CMP EAX,0x16
	0002c369:JZ 0x0002c377
END_OF_LINE
----------------------------------------------
33: result = rpl_fcntl(fd,0,local_a8 & 0xffffffff);
	0002c377:MOV EDX,dword ptr [RBP + -0xe4]
	0002c37d:MOV EAX,dword ptr [RBP + -0xf4]
	0002c383:MOV ESI,0x0
	0002c388:MOV EDI,EAX
	0002c38a:MOV EAX,0x0
	0002c38f:CALL 0x0002c226
END_OF_LINE
----------------------------------------------
34: if (result < 0) goto LAB_0002c4ed;
	0002c39a:CMP dword ptr [RBP + -0xe8],0x0
	0002c3a1:JS 0x0002c4e9
	0002c3a7:MOV dword ptr [0x000431c8],0xffffffff
	0002c3b1:JMP 0x0002c3d6
	0002c3b3:MOV EDX,dword ptr [RBP + -0xe4]
	0002c3b9:MOV EAX,dword ptr [RBP + -0xf4]
	0002c3bf:MOV ESI,0x0
	0002c3c4:MOV EDI,EAX
	0002c3c6:MOV EAX,0x0
	0002c3cb:CALL 0x0002c226
	0002c3d0:MOV dword ptr [RBP + -0xe8],EAX
	0002c3d6:CMP dword ptr [RBP + -0xe8],0x0
	0002c3dd:JS 0x0002c4ec
	0002c3e3:MOV EAX,dword ptr [0x000431c8]
	0002c3e9:CMP EAX,-0x1
	0002c3ec:JNZ 0x0002c4ec
	0002c3f2:MOV EAX,dword ptr [RBP + -0xe8]
	0002c3f8:MOV ESI,0x1
	0002c3fd:MOV EDI,EAX
	0002c3ff:MOV EAX,0x0
	0002c404:CALL 0x00005a10
	0002c409:MOV dword ptr [RBP + -0xe0],EAX
	0002c40f:CMP dword ptr [RBP + -0xe0],0x0
	0002c416:JS 0x0002c443
	0002c418:MOV EAX,dword ptr [RBP + -0xe0]
	0002c41e:OR EAX,0x1
	0002c421:MOV EDX,EAX
	0002c423:MOV EAX,dword ptr [RBP + -0xe8]
	0002c429:MOV ESI,0x2
	0002c42e:MOV EDI,EAX
	0002c430:MOV EAX,0x0
	0002c435:CALL 0x00005a10
	0002c43a:CMP EAX,-0x1
	0002c43d:JNZ 0x0002c4ec
	0002c443:CALL 0x00005900
	0002c448:MOV EAX,dword ptr [RAX]
	0002c44a:MOV dword ptr [RBP + -0xdc],EAX
	0002c450:MOV EAX,dword ptr [RBP + -0xe8]
	0002c456:MOV EDI,EAX
	0002c458:CALL 0x00005c30
	0002c45d:CALL 0x00005900
	0002c462:MOV EDX,dword ptr [RBP + -0xdc]
	0002c468:MOV dword ptr [RAX],EDX
	0002c46a:MOV dword ptr [RBP + -0xe8],0xffffffff
	0002c474:JMP 0x0002c4ec
	0002c476:MOV EAX,dword ptr [RBP + -0xd0]
	0002c47c:CMP EAX,0x2f
	0002c47f:JA 0x0002c4a4
	0002c481:MOV RAX,qword ptr [RBP + -0xc0]
	0002c488:MOV EDX,dword ptr [RBP + -0xd0]
	0002c48e:MOV EDX,EDX
	0002c490:ADD RAX,RDX
	0002c493:MOV EDX,dword ptr [RBP + -0xd0]
	0002c499:ADD EDX,0x8
	0002c49c:MOV dword ptr [RBP + -0xd0],EDX
	0002c4a2:JMP 0x0002c4b6
	0002c4a4:MOV RAX,qword ptr [RBP + -0xc8]
	0002c4ab:LEA RDX,[RAX + 0x8]
	0002c4af:MOV qword ptr [RBP + -0xc8],RDX
	0002c4b6:MOV RAX,qword ptr [RAX]
	0002c4b9:MOV qword ptr [RBP + -0xd8],RAX
	0002c4c0:MOV RDX,qword ptr [RBP + -0xd8]
	0002c4c7:MOV ECX,dword ptr [RBP + -0xf8]
	0002c4cd:MOV EAX,dword ptr [RBP + -0xf4]
	0002c4d3:MOV ESI,ECX
	0002c4d5:MOV EDI,EAX
	0002c4d7:MOV EAX,0x0
	0002c4dc:CALL 0x00005a10
	0002c4e1:MOV dword ptr [RBP + -0xe8],EAX
	0002c4e7:JMP 0x0002c4ed
	0002c4e9:NOP
	0002c4ea:JMP 0x0002c4ed
	0002c4ec:NOP
	0002c4ed:MOV EAX,dword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
35: rpl_fcntl::lexical_block_5::have_dupfd_cloexec = -1;
	0002c3a7:MOV dword ptr [0x000431c8],0xffffffff
END_OF_LINE
----------------------------------------------
38: rpl_fcntl::lexical_block_5::have_dupfd_cloexec = 1;
	0002c36b:MOV dword ptr [0x000431c8],0x1
END_OF_LINE
----------------------------------------------
41: if (((-1 < result) && (rpl_fcntl::lexical_block_5::have_dupfd_cloexec == -1)) &&
	0002c3d6:CMP dword ptr [RBP + -0xe8],0x0
	0002c3dd:JS 0x0002c4ec
	0002c3e3:MOV EAX,dword ptr [0x000431c8]
	0002c3e9:CMP EAX,-0x1
	0002c3ec:JNZ 0x0002c4ec
	0002c3f2:MOV EAX,dword ptr [RBP + -0xe8]
	0002c3f8:MOV ESI,0x1
	0002c3fd:MOV EDI,EAX
	0002c3ff:MOV EAX,0x0
	0002c404:CALL 0x00005a10
	0002c409:MOV dword ptr [RBP + -0xe0],EAX
	0002c40f:CMP dword ptr [RBP + -0xe0],0x0
	0002c416:JS 0x0002c443
	0002c418:MOV EAX,dword ptr [RBP + -0xe0]
	0002c41e:OR EAX,0x1
	0002c421:MOV EDX,EAX
	0002c423:MOV EAX,dword ptr [RBP + -0xe8]
	0002c429:MOV ESI,0x2
	0002c42e:MOV EDI,EAX
	0002c430:MOV EAX,0x0
	0002c435:CALL 0x00005a10
	0002c43a:CMP EAX,-0x1
	0002c43d:JNZ 0x0002c4ec
END_OF_LINE
----------------------------------------------
42: ((uVar2 = fcntl(result,1), (int)uVar2 < 0 ||
	0002c404:CALL 0x00005a10
	0002c409:MOV dword ptr [RBP + -0xe0],EAX
	0002c40f:CMP dword ptr [RBP + -0xe0],0x0
END_OF_LINE
----------------------------------------------
43: (iVar3 = fcntl(result,2,(ulong)(uVar2 | 1)), iVar3 == -1)))) {
	0002c41e:OR EAX,0x1
	0002c421:MOV EDX,EAX
	0002c423:MOV EAX,dword ptr [RBP + -0xe8]
	0002c429:MOV ESI,0x2
	0002c42e:MOV EDI,EAX
	0002c430:MOV EAX,0x0
	0002c435:CALL 0x00005a10
	0002c43a:CMP EAX,-0x1
END_OF_LINE
----------------------------------------------
44: piVar4 = __errno_location();
	0002c443:CALL 0x00005900
END_OF_LINE
----------------------------------------------
45: iVar3 = *piVar4;
	0002c448:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
46: close(result);
	0002c458:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
47: piVar4 = __errno_location();
	0002c45d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
48: *piVar4 = iVar3;
	0002c468:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
49: result = -1;
	0002c46a:MOV dword ptr [RBP + -0xe8],0xffffffff
END_OF_LINE
----------------------------------------------
53: result = fcntl(fd,action,local_a8);
	0002c4dc:CALL 0x00005a10
END_OF_LINE
----------------------------------------------
55: LAB_0002c4ed:
	0002c4ed:MOV EAX,dword ptr [RBP + -0xe8]
END_OF_LINE
----------------------------------------------
56: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0002c4fa:SUB RDX,qword ptr FS:[0x28]
	0002c503:JZ 0x0002c50a
END_OF_LINE
----------------------------------------------
57: return result;
	0002c50b:RET
END_OF_LINE
----------------------------------------------
60: __stack_chk_fail();
	0002c505:CALL 0x00005b00
END_OF_LINE



Function: rpl_mbrtowc
----------------------------------------------
17: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0002c528:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
18: pwc_local = pwc;
	0002c53c:JNZ 0x0002c546
END_OF_LINE
----------------------------------------------
19: if (pwc == (wchar_t *)0x0) {
	0002c537:CMP qword ptr [RBP + -0x28],0x0
	0002c53c:JNZ 0x0002c546
END_OF_LINE
----------------------------------------------
20: pwc_local = &wc;
	0002c53e:LEA RAX,[RBP + -0x14]
END_OF_LINE
----------------------------------------------
22: ret = mbrtowc(pwc_local,s,n,(mbstate_t *)ps);
	0002c559:CALL 0x00005b30
END_OF_LINE
----------------------------------------------
23: sVar2 = ret;
	0002c567:JBE 0x0002c59c
END_OF_LINE
----------------------------------------------
24: if (((0xfffffffffffffffd < ret) && (n != 0)) && (_Var1 = hard_locale(0), sVar2 = ret, !_Var1)) {
	0002c567:JBE 0x0002c59c
	0002c569:CMP qword ptr [RBP + -0x38],0x0
	0002c56e:JZ 0x0002c59c
	0002c570:MOV EDI,0x0
	0002c575:CALL 0x0002d268
	0002c57a:XOR EAX,0x1
	0002c57d:TEST AL,AL
	0002c57f:JZ 0x0002c59c
END_OF_LINE
----------------------------------------------
25: *pwc_local = (uint)(byte)*s;
	0002c585:MOVZX EAX,byte ptr [RAX]
	0002c588:MOV byte ptr [RBP + -0x15],AL
	0002c58b:MOVZX EDX,byte ptr [RBP + -0x15]
	0002c58f:MOV RAX,qword ptr [RBP + -0x28]
	0002c593:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
26: sVar2 = 1;
	0002c595:MOV EAX,0x1
	0002c59a:JMP 0x0002c5a0
END_OF_LINE
----------------------------------------------
28: if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
	0002c5a4:SUB RDX,qword ptr FS:[0x28]
	0002c5ad:JZ 0x0002c5b4
END_OF_LINE
----------------------------------------------
29: return sVar2;
	0002c5b5:RET
END_OF_LINE
----------------------------------------------
32: __stack_chk_fail();
	0002c5af:CALL 0x00005b00
END_OF_LINE



Function: isdst_differ
----------------------------------------------
9: if ((((b == 0) == (a == 0)) || (a < 0)) || (b < 0)) {
	0002c5c4:CMP dword ptr [RBP + -0x4],0x0
	0002c5c8:SETZ DL
	0002c5cb:CMP dword ptr [RBP + -0x8],0x0
	0002c5cf:SETZ AL
	0002c5d2:XOR EAX,EDX
	0002c5d4:TEST AL,AL
	0002c5d6:JZ 0x0002c5eb
	0002c5d8:CMP dword ptr [RBP + -0x4],0x0
	0002c5dc:JS 0x0002c5eb
	0002c5de:CMP dword ptr [RBP + -0x8],0x0
	0002c5e2:JS 0x0002c5eb
END_OF_LINE
----------------------------------------------
10: _Var1 = false;
	0002c5eb:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: _Var1 = true;
	0002c5e4:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
15: return _Var1;
	0002c5f4:RET
END_OF_LINE



Function: equal_tm
----------------------------------------------
21: uVar1 = a->tm_sec;
	0002c60e:MOV EDX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: uVar2 = b->tm_sec;
	0002c614:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
23: uVar3 = a->tm_min;
	0002c61e:MOV EDX,dword ptr [RAX + 0x4]
END_OF_LINE
----------------------------------------------
24: uVar4 = b->tm_min;
	0002c625:MOV EAX,dword ptr [RAX + 0x4]
END_OF_LINE
----------------------------------------------
25: uVar5 = a->tm_hour;
	0002c630:MOV EDX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
26: uVar6 = b->tm_hour;
	0002c637:MOV EAX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
27: uVar7 = a->tm_mday;
	0002c642:MOV EDX,dword ptr [RAX + 0xc]
END_OF_LINE
----------------------------------------------
28: uVar8 = b->tm_mday;
	0002c649:MOV EAX,dword ptr [RAX + 0xc]
END_OF_LINE
----------------------------------------------
29: uVar9 = a->tm_mon;
	0002c654:MOV EDX,dword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
30: uVar10 = b->tm_mon;
	0002c65b:MOV EAX,dword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
31: uVar11 = a->tm_year;
	0002c666:MOV EDX,dword ptr [RAX + 0x14]
END_OF_LINE
----------------------------------------------
32: uVar12 = b->tm_year;
	0002c66d:MOV EAX,dword ptr [RAX + 0x14]
END_OF_LINE
----------------------------------------------
33: _Var13 = isdst_differ(a->tm_isdst,b->tm_isdst);
	0002c67a:MOV EDX,dword ptr [RAX + 0x20]
	0002c67d:MOV RAX,qword ptr [RBP + -0x10]
	0002c681:MOV EAX,dword ptr [RAX + 0x20]
	0002c684:MOV ESI,EDX
	0002c686:MOV EDI,EAX
	0002c688:CALL 0x0002c5b6
END_OF_LINE
----------------------------------------------
34: return (int)(((uint)_Var13 |
	0002c690:OR EAX,EBX
	0002c692:TEST EAX,EAX
	0002c694:SETZ AL
	0002c697:MOVZX EAX,AL
	0002c69a:MOV RBX,qword ptr [RBP + -0x8]
	0002c69e:LEAVE
	0002c69f:RET
END_OF_LINE
----------------------------------------------
35: uVar1 ^ uVar2 | uVar4 ^ uVar3 | uVar6 ^ uVar5 | uVar8 ^ uVar7 | uVar10 ^ uVar9 |
	0002c618:XOR ECX,EAX
	0002c61a:MOV RAX,qword ptr [RBP + -0x10]
	0002c61e:MOV EDX,dword ptr [RAX + 0x4]
	0002c621:MOV RAX,qword ptr [RBP + -0x18]
	0002c625:MOV EAX,dword ptr [RAX + 0x4]
	0002c628:XOR EAX,EDX
	0002c62a:OR ECX,EAX
	0002c62c:MOV RAX,qword ptr [RBP + -0x10]
	0002c630:MOV EDX,dword ptr [RAX + 0x8]
	0002c633:MOV RAX,qword ptr [RBP + -0x18]
	0002c637:MOV EAX,dword ptr [RAX + 0x8]
	0002c63a:XOR EAX,EDX
	0002c63c:OR ECX,EAX
	0002c63e:MOV RAX,qword ptr [RBP + -0x10]
	0002c642:MOV EDX,dword ptr [RAX + 0xc]
	0002c645:MOV RAX,qword ptr [RBP + -0x18]
	0002c649:MOV EAX,dword ptr [RAX + 0xc]
	0002c64c:XOR EAX,EDX
	0002c64e:OR ECX,EAX
	0002c650:MOV RAX,qword ptr [RBP + -0x10]
	0002c654:MOV EDX,dword ptr [RAX + 0x10]
	0002c657:MOV RAX,qword ptr [RBP + -0x18]
	0002c65b:MOV EAX,dword ptr [RAX + 0x10]
	0002c65e:XOR EAX,EDX
	0002c660:OR ECX,EAX
	0002c662:MOV RAX,qword ptr [RBP + -0x10]
	0002c666:MOV EDX,dword ptr [RAX + 0x14]
	0002c669:MOV RAX,qword ptr [RBP + -0x18]
	0002c66d:MOV EAX,dword ptr [RAX + 0x14]
	0002c670:XOR EAX,EDX
	0002c672:MOV EBX,ECX
	0002c674:OR EBX,EAX
END_OF_LINE
----------------------------------------------
36: uVar12 ^ uVar11) == 0);
	0002c670:XOR EAX,EDX
	0002c672:MOV EBX,ECX
	0002c674:OR EBX,EAX
	0002c676:MOV RAX,qword ptr [RBP + -0x18]
	0002c67a:MOV EDX,dword ptr [RAX + 0x20]
	0002c67d:MOV RAX,qword ptr [RBP + -0x10]
	0002c681:MOV EAX,dword ptr [RAX + 0x20]
	0002c684:MOV ESI,EDX
	0002c686:MOV EDI,EAX
	0002c688:CALL 0x0002c5b6
	0002c68d:MOVZX EAX,AL
	0002c690:OR EAX,EBX
	0002c692:TEST EAX,EAX
END_OF_LINE



Function: extend_abbrs
----------------------------------------------
9: memcpy(abbrs,abbr,abbr_size);
	0002c6ca:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
10: abbrs[abbr_size] = '\0';
	0002c6d7:ADD RAX,RDX
	0002c6da:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
11: return;
	0002c6df:RET
END_OF_LINE



Function: tzalloc
----------------------------------------------
14: if (name == (char *)0x0) {
	0002c6f0:CMP qword ptr [RBP + -0x28],0x0
	0002c6f5:JZ 0x0002c709
END_OF_LINE
----------------------------------------------
15: abbr_size_00 = 0;
	0002c709:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
18: sVar1 = strlen(name);
	0002c6fe:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
19: abbr_size_00 = sVar1 + 1;
	0002c703:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
21: uVar2 = abbr_size_00;
	0002c71e:CMOVC RAX,RDX
END_OF_LINE
----------------------------------------------
22: if (abbr_size_00 < 0x76) {
	0002c71b:CMP RAX,RDX
	0002c71e:CMOVC RAX,RDX
END_OF_LINE
----------------------------------------------
23: uVar2 = 0x76;
	0002c71e:CMOVC RAX,RDX
END_OF_LINE
----------------------------------------------
25: ptVar3 = (timezone_t)malloc(uVar2 + 0x11 & 0xfffffffffffffff8);
	0002c72e:ADD RAX,0x10
	0002c732:AND RAX,-0x8
	0002c736:MOV RDI,RAX
	0002c739:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
26: if (ptVar3 != (timezone_t)0x0) {
	0002c742:CMP qword ptr [RBP + -0x8],0x0
	0002c747:JZ 0x0002c78f
END_OF_LINE
----------------------------------------------
27: ptVar3->next = (tm_zone *)0x0;
	0002c74d:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
28: ptVar3->tz_is_set = name != (char *)0x0;
	0002c754:CMP qword ptr [RBP + -0x28],0x0
	0002c759:SETNZ AL
	0002c75c:MOV EDX,EAX
	0002c75e:MOV RAX,qword ptr [RBP + -0x8]
	0002c762:MOV byte ptr [RAX + 0x8],DL
END_OF_LINE
----------------------------------------------
29: ptVar3->field_0x9 = 0;
	0002c769:MOV byte ptr [RAX + 0x9],0x0
END_OF_LINE
----------------------------------------------
30: if (name != (char *)0x0) {
	0002c76d:CMP qword ptr [RBP + -0x28],0x0
	0002c772:JZ 0x0002c78f
END_OF_LINE
----------------------------------------------
31: extend_abbrs(&ptVar3->field_0x9,name,abbr_size_00);
	0002c778:LEA RCX,[RAX + 0x9]
	0002c77c:MOV RDX,qword ptr [RBP + -0x18]
	0002c780:MOV RAX,qword ptr [RBP + -0x28]
	0002c784:MOV RSI,RAX
	0002c787:MOV RDI,RCX
	0002c78a:CALL 0x0002c6a0
END_OF_LINE
----------------------------------------------
34: return ptVar3;
	0002c78f:MOV RAX,qword ptr [RBP + -0x8]
	0002c793:LEAVE
	0002c794:RET
END_OF_LINE



Function: save_abbr
----------------------------------------------
20: zone_copy = "";
	0002c7b8:MOV qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
21: __s2 = (tm *)tm->tm_zone;
	0002c7c0:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
22: if ((__s2 != (tm *)0x0) && ((__s2 < tm || (tm + 1 <= __s2)))) {
	0002c7c8:CMP qword ptr [RBP + -0x18],0x0
	0002c7cd:JZ 0x0002c7e7
	0002c7cf:MOV RAX,qword ptr [RBP + -0x30]
	0002c7d3:CMP RAX,qword ptr [RBP + -0x18]
	0002c7d7:JA 0x0002c7f1
	0002c7d9:MOV RAX,qword ptr [RBP + -0x30]
	0002c7dd:ADD RAX,0x38
	0002c7e1:CMP qword ptr [RBP + -0x18],RAX
	0002c7e5:JNC 0x0002c7f1
END_OF_LINE
----------------------------------------------
23: if (*(char *)&__s2->tm_sec != '\0') {
	0002c7f5:MOVZX EAX,byte ptr [RAX]
	0002c7f8:TEST AL,AL
	0002c7fa:JZ 0x0002c956
END_OF_LINE
----------------------------------------------
24: zone_copy = &tz->field_0x9;
	0002c804:ADD RAX,0x9
END_OF_LINE
----------------------------------------------
25: tz_local = tz;
	0002c80c:JMP 0x0002c93b
END_OF_LINE
----------------------------------------------
26: while (iVar2 = strcmp(zone_copy,(char *)__s2), iVar2 != 0) {
	0002c949:CALL 0x00005ce0
	0002c94e:TEST EAX,EAX
	0002c950:JNZ 0x0002c811
END_OF_LINE
----------------------------------------------
27: if ((*zone_copy == '\0') &&
	0002c815:MOVZX EAX,byte ptr [RAX]
	0002c818:TEST AL,AL
	0002c81a:JNZ 0x0002c8f9
	0002c820:MOV RAX,qword ptr [RBP + -0x28]
	0002c824:ADD RAX,0x9
	0002c828:CMP qword ptr [RBP + -0x20],RAX
	0002c82c:JNZ 0x0002c83e
	0002c82e:MOV RAX,qword ptr [RBP + -0x28]
	0002c832:MOVZX EAX,byte ptr [RAX + 0x8]
	0002c836:TEST AL,AL
	0002c838:JNZ 0x0002c8f9
END_OF_LINE
----------------------------------------------
28: ((zone_copy != &tz_local->field_0x9 || (tz_local->tz_is_set == '\0')))) {
	0002c824:ADD RAX,0x9
	0002c828:CMP qword ptr [RBP + -0x20],RAX
	0002c82c:JNZ 0x0002c83e
	0002c82e:MOV RAX,qword ptr [RBP + -0x28]
	0002c832:MOVZX EAX,byte ptr [RAX + 0x8]
	0002c836:TEST AL,AL
END_OF_LINE
----------------------------------------------
29: sVar3 = strlen((char *)__s2);
	0002c845:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
30: abbr_size = sVar3 + 1;
	0002c84a:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
31: uVar4 = (long)zone_copy - (long)&tz_local->field_0x9;
	0002c856:LEA RDX,[RAX + 0x9]
	0002c85a:MOV RAX,qword ptr [RBP + -0x20]
	0002c85e:SUB RAX,RDX
END_OF_LINE
----------------------------------------------
32: if (~uVar4 < abbr_size) {
	0002c869:NOT RAX
	0002c86c:CMP qword ptr [RBP + -0x10],RAX
	0002c870:JBE 0x0002c887
END_OF_LINE
----------------------------------------------
33: piVar5 = __errno_location();
	0002c872:CALL 0x00005900
END_OF_LINE
----------------------------------------------
34: *piVar5 = 0xc;
	0002c877:MOV dword ptr [RAX],0xc
END_OF_LINE
----------------------------------------------
35: return false;
	0002c968:RET
END_OF_LINE
----------------------------------------------
37: if (abbr_size + uVar4 < 0x77) {
	0002c88f:ADD RAX,RDX
	0002c892:CMP RAX,0x76
	0002c896:JA 0x0002c8b4
END_OF_LINE
----------------------------------------------
38: extend_abbrs(zone_copy,(char *)__s2,abbr_size);
	0002c8aa:CALL 0x0002c6a0
END_OF_LINE
----------------------------------------------
41: ptVar6 = tzalloc((char *)__s2);
	0002c8bb:CALL 0x0002c6e0
END_OF_LINE
----------------------------------------------
42: tz_local->next = ptVar6;
	0002c8c4:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
43: ptVar1 = tz_local->next;
	0002c8cb:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
44: if (ptVar1 == (tm_zone *)0x0) {
	0002c8d2:CMP qword ptr [RBP + -0x28],0x0
	0002c8d7:JNZ 0x0002c8e3
END_OF_LINE
----------------------------------------------
45: return false;
	0002c968:RET
END_OF_LINE
----------------------------------------------
47: ptVar1->tz_is_set = '\0';
	0002c8e7:MOV byte ptr [RAX + 0x8],0x0
END_OF_LINE
----------------------------------------------
48: zone_copy = &ptVar1->field_0x9;
	0002c8ef:ADD RAX,0x9
END_OF_LINE
----------------------------------------------
52: sVar3 = strlen(zone_copy);
	0002c900:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
53: zone_copy = zone_copy + sVar3 + 1;
	0002c905:ADD RAX,0x1
	0002c909:ADD qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
54: if ((*zone_copy == '\0') && (tz_local->next != (tm_zone *)0x0)) {
	0002c911:MOVZX EAX,byte ptr [RAX]
	0002c914:TEST AL,AL
	0002c916:JNZ 0x0002c93b
	0002c918:MOV RAX,qword ptr [RBP + -0x28]
	0002c91c:MOV RAX,qword ptr [RAX]
	0002c91f:TEST RAX,RAX
	0002c922:JZ 0x0002c93b
END_OF_LINE
----------------------------------------------
55: tz_local = tz_local->next;
	0002c928:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
56: zone_copy = &tz_local->field_0x9;
	0002c933:ADD RAX,0x9
END_OF_LINE
----------------------------------------------
60: tm->tm_zone = zone_copy;
	0002c95e:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
62: return true;
	0002c968:RET
END_OF_LINE



Function: tzfree
----------------------------------------------
9: tz_local = tz;
	0002c982:JZ 0x0002c9ac
END_OF_LINE
----------------------------------------------
10: if (tz != (timezone_t)Elf64_Ehdr_00000000.e_ident_magic_str) {
	0002c97e:CMP qword ptr [RBP + -0x18],RAX
	0002c982:JZ 0x0002c9ac
END_OF_LINE
----------------------------------------------
11: while (tz_local != (timezone_t)0x0) {
	0002c9a5:CMP qword ptr [RBP + -0x18],0x0
	0002c9aa:JNZ 0x0002c986
END_OF_LINE
----------------------------------------------
12: ptVar1 = tz_local->next;
	0002c98a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
13: free(tz_local);
	0002c998:CALL 0x00005860
END_OF_LINE
----------------------------------------------
14: tz_local = ptVar1;
	0002c9a1:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
17: return;
	0002c9ae:RET
END_OF_LINE



Function: getenv_TZ
----------------------------------------------
9: pcVar1 = getenv("TZ");
	0002c9c1:CALL 0x00005880
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	0002c9c7:RET
END_OF_LINE



Function: setenv_TZ
----------------------------------------------
8: if (tz == (char *)0x0) {
	0002c9d8:CMP qword ptr [RBP + -0x8],0x0
	0002c9dd:JZ 0x0002c9fc
END_OF_LINE
----------------------------------------------
9: iVar1 = unsetenv("TZ");
	0002ca06:CALL 0x00005fa0
END_OF_LINE
----------------------------------------------
12: iVar1 = setenv("TZ",tz,1);
	0002c9f5:CALL 0x00005a30
END_OF_LINE
----------------------------------------------
14: return iVar1;
	0002ca0c:RET
END_OF_LINE



Function: change_env
----------------------------------------------
9: if (tz->tz_is_set == '\0') {
	0002ca21:MOVZX EAX,byte ptr [RAX + 0x8]
	0002ca25:TEST AL,AL
	0002ca27:JZ 0x0002ca33
END_OF_LINE
----------------------------------------------
10: tz_00 = (char *)0x0;
	0002ca33:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: tz_00 = &tz->field_0x9;
	0002ca2d:ADD RAX,0x9
END_OF_LINE
----------------------------------------------
15: iVar1 = setenv_TZ(tz_00);
	0002ca3b:CALL 0x0002c9c8
END_OF_LINE
----------------------------------------------
16: if (iVar1 == 0) {
	0002ca40:TEST EAX,EAX
	0002ca42:JZ 0x0002ca4b
END_OF_LINE
----------------------------------------------
17: tzset();
	0002ca4b:CALL 0x00005da0
END_OF_LINE
----------------------------------------------
19: return iVar1 == 0;
	0002ca40:TEST EAX,EAX
	0002ca42:JZ 0x0002ca4b
	0002ca44:MOV EAX,0x0
	0002ca49:JMP 0x0002ca55
	0002ca4b:CALL 0x00005da0
	0002ca50:MOV EAX,0x1
	0002ca55:LEAVE
	0002ca56:RET
END_OF_LINE



Function: set_tz
----------------------------------------------
16: __s2 = getenv_TZ();
	0002ca67:CALL 0x0002c9af
END_OF_LINE
----------------------------------------------
17: if (__s2 == (char *)0x0) {
	0002ca70:CMP qword ptr [RBP + -0x10],0x0
	0002ca75:JZ 0x0002caaf
END_OF_LINE
----------------------------------------------
18: bVar4 = tz->tz_is_set == '\0';
	0002cab3:MOVZX EAX,byte ptr [RAX + 0x8]
	0002cab7:TEST AL,AL
END_OF_LINE
----------------------------------------------
20: else if ((tz->tz_is_set == '\0') || (iVar2 = strcmp(&tz->field_0x9,__s2), iVar2 != 0)) {
	0002ca7b:MOVZX EAX,byte ptr [RAX + 0x8]
	0002ca7f:TEST AL,AL
	0002ca81:JZ 0x0002caa5
	0002ca83:MOV RAX,qword ptr [RBP + -0x28]
	0002ca87:LEA RDX,[RAX + 0x9]
	0002ca8b:MOV RAX,qword ptr [RBP + -0x10]
	0002ca8f:MOV RSI,RAX
	0002ca92:MOV RDI,RDX
	0002ca95:CALL 0x00005ce0
	0002ca9a:TEST EAX,EAX
	0002ca9c:JNZ 0x0002caa5
END_OF_LINE
----------------------------------------------
21: bVar4 = false;
	0002caa5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
24: bVar4 = true;
	0002ca9e:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
26: if (bVar4) {
	0002cabe:JZ 0x0002cac7
END_OF_LINE
----------------------------------------------
27: tz_00 = (timezone_t)Elf64_Ehdr_00000000.e_ident_magic_str;
	0002cac0:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
30: tz_00 = tzalloc(__s2);
	0002cace:CALL 0x0002c6e0
END_OF_LINE
----------------------------------------------
31: if ((tz_00 != (timezone_t)0x0) && (_Var1 = change_env(tz), !_Var1)) {
	0002cad7:CMP qword ptr [RBP + -0x8],0x0
	0002cadc:JNZ 0x0002cae4
	0002cade:MOV RAX,qword ptr [RBP + -0x8]
	0002cae2:JMP 0x0002cb22
	0002cae4:MOV RAX,qword ptr [RBP + -0x28]
	0002cae8:MOV RDI,RAX
	0002caeb:CALL 0x0002ca0d
	0002caf0:XOR EAX,0x1
	0002caf3:TEST AL,AL
	0002caf5:JZ 0x0002cb1e
END_OF_LINE
----------------------------------------------
32: piVar3 = __errno_location();
	0002caf7:CALL 0x00005900
END_OF_LINE
----------------------------------------------
33: iVar2 = *piVar3;
	0002cafc:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
34: tzfree(tz_00);
	0002cb08:CALL 0x0002c969
END_OF_LINE
----------------------------------------------
35: piVar3 = __errno_location();
	0002cb0d:CALL 0x00005900
END_OF_LINE
----------------------------------------------
36: *piVar3 = iVar2;
	0002cb15:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
37: tz_00 = (timezone_t)0x0;
	0002cb17:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
40: return tz_00;
	0002cb23:RET
END_OF_LINE



Function: revert_tz
----------------------------------------------
11: if (tz == (timezone_t)Elf64_Ehdr_00000000.e_ident_magic_str) {
	0002cb39:CMP qword ptr [RBP + -0x18],RAX
	0002cb3d:JNZ 0x0002cb46
END_OF_LINE
----------------------------------------------
12: _Var1 = true;
	0002cb3f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
15: piVar2 = __errno_location();
	0002cb46:CALL 0x00005900
END_OF_LINE
----------------------------------------------
16: saved_errno = *piVar2;
	0002cb4b:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
17: _Var1 = change_env(tz);
	0002cb57:CALL 0x0002ca0d
END_OF_LINE
----------------------------------------------
18: if (!_Var1) {
	0002cb68:JZ 0x0002cb74
END_OF_LINE
----------------------------------------------
19: piVar2 = __errno_location();
	0002cb6a:CALL 0x00005900
END_OF_LINE
----------------------------------------------
20: saved_errno = *piVar2;
	0002cb6f:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: tzfree(tz);
	0002cb7b:CALL 0x0002c969
END_OF_LINE
----------------------------------------------
23: piVar2 = __errno_location();
	0002cb80:CALL 0x00005900
END_OF_LINE
----------------------------------------------
24: *piVar2 = saved_errno;
	0002cb88:MOV dword ptr [RAX],EDX
END_OF_LINE
----------------------------------------------
26: return _Var1;
	0002cb8f:RET
END_OF_LINE



Function: localtime_rz
----------------------------------------------
16: if (tz == (timezone_t)0x0) {
	0002cba8:CMP qword ptr [RBP + -0x18],0x0
	0002cbad:JNZ 0x0002cbc4
END_OF_LINE
----------------------------------------------
17: ptVar3 = (tm *)gmtime_r(t,(tm *)tm);
	0002cbbd:CALL 0x00005bb0
END_OF_LINE
----------------------------------------------
20: tz_00 = set_tz(tz);
	0002cbcb:CALL 0x0002ca57
END_OF_LINE
----------------------------------------------
21: if (tz_00 != (timezone_t)0x0) {
	0002cbd4:CMP qword ptr [RBP + -0x8],0x0
	0002cbd9:JZ 0x0002cc39
END_OF_LINE
----------------------------------------------
22: ptVar4 = localtime_r(t,(tm *)tm);
	0002cbe9:CALL 0x00005930
END_OF_LINE
----------------------------------------------
23: if ((ptVar4 == (tm *)0x0) || (_Var1 = save_abbr(tz,tm), !_Var1)) {
	0002cbee:TEST RAX,RAX
	0002cbf1:JZ 0x0002cc11
	0002cbf3:MOV RDX,qword ptr [RBP + -0x28]
	0002cbf7:MOV RAX,qword ptr [RBP + -0x18]
	0002cbfb:MOV RSI,RDX
	0002cbfe:MOV RDI,RAX
	0002cc01:CALL 0x0002c795
	0002cc06:TEST AL,AL
	0002cc08:JZ 0x0002cc11
END_OF_LINE
----------------------------------------------
24: bVar2 = false;
	0002cc11:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
27: bVar2 = true;
	0002cc0a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
29: _Var1 = revert_tz(tz_00);
	0002cc24:CALL 0x0002cb24
END_OF_LINE
----------------------------------------------
30: if ((_Var1) && (bVar2)) {
	0002cc2b:JZ 0x0002cc39
	0002cc2d:CMP byte ptr [RBP + -0x9],0x0
	0002cc31:JZ 0x0002cc39
END_OF_LINE
----------------------------------------------
31: return tm;
	0002cc3e:LEAVE
	0002cc3f:RET
END_OF_LINE
----------------------------------------------
34: ptVar3 = (tm *)0x0;
	0002cc39:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
36: return ptVar3;
	0002cc3f:RET
END_OF_LINE



Function: mktime_z
----------------------------------------------
18: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002cc54:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
19: if (tz == (timezone_t)0x0) {
	0002cc63:CMP qword ptr [RBP + -0x68],0x0
	0002cc68:JNZ 0x0002cc7b
END_OF_LINE
----------------------------------------------
20: tVar4 = timegm((tm *)tm);
	0002cc71:CALL 0x00005ed0
END_OF_LINE
----------------------------------------------
23: old_tz = set_tz(tz);
	0002cc82:CALL 0x0002ca57
END_OF_LINE
----------------------------------------------
24: if (old_tz != (timezone_t)0x0) {
	0002cc8b:CMP qword ptr [RBP + -0x50],0x0
	0002cc90:JZ 0x0002cd1f
END_OF_LINE
----------------------------------------------
25: t = mktime((tm *)tm);
	0002cc9d:CALL 0x00005e60
END_OF_LINE
----------------------------------------------
26: badtime = -1;
	0002cca6:MOV qword ptr [RBP + -0x48],-0x1
END_OF_LINE
----------------------------------------------
27: if (((t != -1) ||
	0002ccb2:CMP qword ptr [RBP + -0x48],RAX
	0002ccb6:JNZ 0x0002cce7
	0002ccb8:LEA RDX,[RBP + -0x40]
	0002ccbc:LEA RAX,[RBP + -0x58]
	0002ccc0:MOV RSI,RDX
	0002ccc3:MOV RDI,RAX
	0002ccc6:CALL 0x00005930
	0002cccb:TEST RAX,RAX
	0002ccce:JZ 0x0002cd09
	0002ccd0:LEA RDX,[RBP + -0x40]
	0002ccd4:MOV RAX,qword ptr [RBP + -0x70]
	0002ccd8:MOV RSI,RDX
	0002ccdb:MOV RDI,RAX
	0002ccde:CALL 0x0002c5f5
	0002cce3:TEST EAX,EAX
	0002cce5:JZ 0x0002cd09
	0002cce7:MOV RDX,qword ptr [RBP + -0x70]
	0002cceb:MOV RAX,qword ptr [RBP + -0x68]
	0002ccef:MOV RSI,RDX
	0002ccf2:MOV RDI,RAX
	0002ccf5:CALL 0x0002c795
	0002ccfa:XOR EAX,0x1
	0002ccfd:TEST AL,AL
	0002ccff:JZ 0x0002cd09
END_OF_LINE
----------------------------------------------
28: ((ptVar5 = localtime_r(&t,(tm *)&tm_1), ptVar5 != (tm *)0x0 &&
	0002ccb8:LEA RDX,[RBP + -0x40]
	0002ccbc:LEA RAX,[RBP + -0x58]
	0002ccc0:MOV RSI,RDX
	0002ccc3:MOV RDI,RAX
	0002ccc6:CALL 0x00005930
	0002cccb:TEST RAX,RAX
END_OF_LINE
----------------------------------------------
29: (iVar3 = equal_tm(tm,&tm_1), iVar3 != 0)))) && (_Var2 = save_abbr(tz,tm), !_Var2)) {
	0002ccd0:LEA RDX,[RBP + -0x40]
	0002ccd4:MOV RAX,qword ptr [RBP + -0x70]
	0002ccd8:MOV RSI,RDX
	0002ccdb:MOV RDI,RAX
	0002ccde:CALL 0x0002c5f5
	0002cce3:TEST EAX,EAX
	0002cce5:JZ 0x0002cd09
	0002cce7:MOV RDX,qword ptr [RBP + -0x70]
	0002cceb:MOV RAX,qword ptr [RBP + -0x68]
	0002ccef:MOV RSI,RDX
	0002ccf2:MOV RDI,RAX
	0002ccf5:CALL 0x0002c795
	0002ccfa:XOR EAX,0x1
	0002ccfd:TEST AL,AL
	0002ccff:JZ 0x0002cd09
END_OF_LINE
----------------------------------------------
30: t = badtime;
	0002cd05:MOV qword ptr [RBP + -0x58],RAX
END_OF_LINE
----------------------------------------------
32: _Var2 = revert_tz(old_tz);
	0002cd10:CALL 0x0002cb24
END_OF_LINE
----------------------------------------------
33: tVar4 = t;
	0002cd17:JZ 0x0002cd1f
END_OF_LINE
----------------------------------------------
34: if (_Var2) goto LAB_0002cd26;
	0002cd17:JZ 0x0002cd1f
	0002cd19:MOV RAX,qword ptr [RBP + -0x58]
	0002cd1d:JMP 0x0002cd26
	0002cd1f:MOV RAX,-0x1
	0002cd26:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
36: tVar4 = -1;
	0002cd1f:MOV RAX,-0x1
END_OF_LINE
----------------------------------------------
38: LAB_0002cd26:
	0002cd26:MOV RDX,qword ptr [RBP + -0x8]
END_OF_LINE
----------------------------------------------
39: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0002cd2a:SUB RDX,qword ptr FS:[0x28]
	0002cd33:JZ 0x0002cd3a
END_OF_LINE
----------------------------------------------
40: return tVar4;
	0002cd3b:RET
END_OF_LINE
----------------------------------------------
43: __stack_chk_fail();
	0002cd35:CALL 0x00005b00
END_OF_LINE



Function: xmemdup0
----------------------------------------------
10: __dest = xcharalloc(s + 1);
	0002cd54:ADD RAX,0x1
	0002cd58:MOV RDI,RAX
	0002cd5b:CALL 0x0002bd25
END_OF_LINE
----------------------------------------------
11: memcpy(__dest,p,s);
	0002cd76:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
12: __dest[s] = '\0';
	0002cd83:ADD RAX,RDX
	0002cd86:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
13: return __dest;
	0002cd89:MOV RAX,qword ptr [RBP + -0x8]
	0002cd8d:LEAVE
	0002cd8e:RET
END_OF_LINE



Function: rotl64
----------------------------------------------
9: bVar1 = (byte)n & 0x3f;
	0002cda7:ROL RDX,CL
END_OF_LINE
----------------------------------------------
10: return x << bVar1 | x >> 0x40 - bVar1;
	0002cda7:ROL RDX,CL
	0002cdaa:MOV RAX,RDX
	0002cdad:POP RBP
	0002cdae:RET
END_OF_LINE



Function: rotr64
----------------------------------------------
9: bVar1 = (byte)n & 0x3f;
	0002cdc7:ROR RDX,CL
END_OF_LINE
----------------------------------------------
10: return x >> bVar1 | x << 0x40 - bVar1;
	0002cdc7:ROR RDX,CL
	0002cdca:MOV RAX,RDX
	0002cdcd:POP RBP
	0002cdce:RET
END_OF_LINE



Function: rotl32
----------------------------------------------
9: bVar1 = (byte)n & 0x1f;
	0002cde5:ROL EDX,CL
END_OF_LINE
----------------------------------------------
10: return x << bVar1 | x >> 0x20 - bVar1;
	0002cde5:ROL EDX,CL
	0002cde7:MOV EAX,EDX
	0002cde9:POP RBP
	0002cdea:RET
END_OF_LINE



Function: rotr32
----------------------------------------------
9: bVar1 = (byte)n & 0x1f;
	0002ce01:ROR EDX,CL
END_OF_LINE
----------------------------------------------
10: return x >> bVar1 | x << 0x20 - bVar1;
	0002ce01:ROR EDX,CL
	0002ce03:MOV EAX,EDX
	0002ce05:POP RBP
	0002ce06:RET
END_OF_LINE



Function: rotl_sz
----------------------------------------------
8: return x >> (0x40 - (byte)n & 0x3f) | x << ((byte)n & 0x3f);
	0002ce22:SHL RSI,CL
	0002ce25:MOV EDX,dword ptr [RBP + -0xc]
	0002ce28:MOV EAX,0x40
	0002ce2d:SUB EAX,EDX
	0002ce2f:MOV RDX,qword ptr [RBP + -0x8]
	0002ce33:MOV ECX,EAX
	0002ce35:SHR RDX,CL
	0002ce38:MOV RAX,RDX
	0002ce3b:OR RAX,RSI
	0002ce3e:POP RBP
	0002ce3f:RET
END_OF_LINE



Function: rotr_sz
----------------------------------------------
8: return x << (0x40 - (byte)n & 0x3f) | x >> ((byte)n & 0x3f);
	0002ce5b:SHR RSI,CL
	0002ce5e:MOV EDX,dword ptr [RBP + -0xc]
	0002ce61:MOV EAX,0x40
	0002ce66:SUB EAX,EDX
	0002ce68:MOV RDX,qword ptr [RBP + -0x8]
	0002ce6c:MOV ECX,EAX
	0002ce6e:SHL RDX,CL
	0002ce71:MOV RAX,RDX
	0002ce74:OR RAX,RSI
	0002ce77:POP RBP
	0002ce78:RET
END_OF_LINE



Function: rotl16
----------------------------------------------
8: return (ushort)((int)(uint)x >> (0x10 - (byte)n & 0x1f)) | x << ((byte)n & 0x1f);
	0002ce93:SHL EDX,CL
	0002ce95:MOV EAX,EDX
	0002ce97:MOV ESI,EAX
	0002ce99:MOVZX EDX,word ptr [RBP + -0x4]
	0002ce9d:MOV EAX,0x10
	0002cea2:SUB EAX,dword ptr [RBP + -0x8]
	0002cea5:MOV ECX,EAX
	0002cea7:SAR EDX,CL
	0002cea9:MOV EAX,EDX
	0002ceab:OR EAX,ESI
	0002cead:POP RBP
	0002ceae:RET
END_OF_LINE



Function: rotr16
----------------------------------------------
8: return x << (0x10 - (byte)n & 0x1f) | (ushort)((int)(uint)x >> ((byte)n & 0x1f));
	0002cec9:SAR EDX,CL
	0002cecb:MOV EAX,EDX
	0002cecd:MOV ESI,EAX
	0002cecf:MOVZX EDX,word ptr [RBP + -0x4]
	0002ced3:MOV EAX,0x10
	0002ced8:SUB EAX,dword ptr [RBP + -0x8]
	0002cedb:MOV ECX,EAX
	0002cedd:SHL EDX,CL
	0002cedf:MOV EAX,EDX
	0002cee1:OR EAX,ESI
	0002cee3:POP RBP
	0002cee4:RET
END_OF_LINE



Function: rotl8
----------------------------------------------
8: return (byte)((int)(uint)x >> (8 - (byte)n & 0x1f)) | x << ((byte)n & 0x1f);
	0002cefe:SHL EDX,CL
	0002cf00:MOV EAX,EDX
	0002cf02:MOV ESI,EAX
	0002cf04:MOVZX EDX,byte ptr [RBP + -0x4]
	0002cf08:MOV EAX,0x8
	0002cf0d:SUB EAX,dword ptr [RBP + -0x8]
	0002cf10:MOV ECX,EAX
	0002cf12:SAR EDX,CL
	0002cf14:MOV EAX,EDX
	0002cf16:OR EAX,ESI
	0002cf18:POP RBP
	0002cf19:RET
END_OF_LINE



Function: rotr8
----------------------------------------------
8: return x << (8 - (byte)n & 0x1f) | (byte)((int)(uint)x >> ((byte)n & 0x1f));
	0002cf33:SAR EDX,CL
	0002cf35:MOV EAX,EDX
	0002cf37:MOV ESI,EAX
	0002cf39:MOVZX EDX,byte ptr [RBP + -0x4]
	0002cf3d:MOV EAX,0x8
	0002cf42:SUB EAX,dword ptr [RBP + -0x8]
	0002cf45:MOV ECX,EAX
	0002cf47:SHL EDX,CL
	0002cf49:MOV EAX,EDX
	0002cf4b:OR EAX,ESI
	0002cf4d:POP RBP
	0002cf4e:RET
END_OF_LINE



Function: c_isalnum
----------------------------------------------
8: if (0x7a < c) goto LAB_0002cf86;
	0002cf5e:JG 0x0002cf86
	0002cf60:CMP dword ptr [RBP + -0x4],0x61
	0002cf64:JGE 0x0002cf7f
	0002cf66:CMP dword ptr [RBP + -0x4],0x39
	0002cf6a:JG 0x0002cf74
	0002cf6c:CMP dword ptr [RBP + -0x4],0x30
	0002cf70:JGE 0x0002cf7f
	0002cf72:JMP 0x0002cf86
	0002cf74:MOV EAX,dword ptr [RBP + -0x4]
	0002cf77:SUB EAX,0x41
	0002cf7a:CMP EAX,0x19
	0002cf7d:JA 0x0002cf86
	0002cf7f:MOV EAX,0x1
	0002cf84:JMP 0x0002cf8b
	0002cf86:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
9: if (c < 0x61) {
	0002cf64:JGE 0x0002cf7f
END_OF_LINE
----------------------------------------------
10: if (c < 0x3a) {
	0002cf6a:JG 0x0002cf74
END_OF_LINE
----------------------------------------------
11: if (0x2f < c) goto LAB_0002cf7f;
	0002cf70:JGE 0x0002cf7f
	0002cf72:JMP 0x0002cf86
	0002cf74:MOV EAX,dword ptr [RBP + -0x4]
	0002cf77:SUB EAX,0x41
	0002cf7a:CMP EAX,0x19
	0002cf7d:JA 0x0002cf86
	0002cf7f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
13: else if (c - 0x41U < 0x1a) goto LAB_0002cf7f;
	0002cf77:SUB EAX,0x41
	0002cf7a:CMP EAX,0x19
	0002cf7d:JA 0x0002cf86
	0002cf7f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
14: LAB_0002cf86:
	0002cf86:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
15: _Var1 = false;
	0002cf86:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
18: LAB_0002cf7f:
	0002cf7f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
19: _Var1 = true;
	0002cf7f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
21: return _Var1;
	0002cf8c:RET
END_OF_LINE



Function: c_isalpha
----------------------------------------------
7: if (c < 0x5b) {
	0002cf9c:JG 0x0002cfa6
END_OF_LINE
----------------------------------------------
8: if (0x40 < c) {
	0002cfa2:JGE 0x0002cfb1
END_OF_LINE
----------------------------------------------
9: return true;
	0002cfbe:RET
END_OF_LINE
----------------------------------------------
12: else if (c - 0x61U < 0x1a) {
	0002cfa9:SUB EAX,0x61
	0002cfac:CMP EAX,0x19
	0002cfaf:JA 0x0002cfb8
END_OF_LINE
----------------------------------------------
13: return true;
	0002cfbe:RET
END_OF_LINE
----------------------------------------------
15: return false;
	0002cfbe:RET
END_OF_LINE



Function: c_isascii
----------------------------------------------
7: return (uint)c < 0x80;
	0002cfde:POP RBP
	0002cfdf:RET
END_OF_LINE



Function: c_isblank
----------------------------------------------
8: if ((c == 0x20) || (c == 9)) {
	0002cfeb:CMP dword ptr [RBP + -0x4],0x20
	0002cfef:JZ 0x0002cff7
	0002cff1:CMP dword ptr [RBP + -0x4],0x9
	0002cff5:JNZ 0x0002cffe
END_OF_LINE
----------------------------------------------
9: _Var1 = true;
	0002cff7:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
12: _Var1 = false;
	0002cffe:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: return _Var1;
	0002d007:RET
END_OF_LINE



Function: c_iscntrl
----------------------------------------------
7: if (c < 0x20) {
	0002d017:JG 0x0002d021
END_OF_LINE
----------------------------------------------
8: if (-1 < c) {
	0002d019:CMP dword ptr [RBP + -0x4],0x0
	0002d01d:JNS 0x0002d027
END_OF_LINE
----------------------------------------------
9: return true;
	0002d034:RET
END_OF_LINE
----------------------------------------------
12: else if (c == 0x7f) {
	0002d021:CMP dword ptr [RBP + -0x4],0x7f
	0002d025:JNZ 0x0002d02e
END_OF_LINE
----------------------------------------------
13: return true;
	0002d034:RET
END_OF_LINE
----------------------------------------------
15: return false;
	0002d034:RET
END_OF_LINE



Function: c_isdigit
----------------------------------------------
7: return c - 0x30U < 10;
	0002d043:SUB EAX,0x30
	0002d046:CMP EAX,0x9
	0002d049:JA 0x0002d052
	0002d04b:MOV EAX,0x1
	0002d050:JMP 0x0002d057
	0002d052:MOV EAX,0x0
	0002d057:POP RBP
	0002d058:RET
END_OF_LINE



Function: c_isgraph
----------------------------------------------
7: return c - 0x21U < 0x5e;
	0002d067:SUB EAX,0x21
	0002d06a:CMP EAX,0x5d
	0002d06d:JA 0x0002d076
	0002d06f:MOV EAX,0x1
	0002d074:JMP 0x0002d07b
	0002d076:MOV EAX,0x0
	0002d07b:POP RBP
	0002d07c:RET
END_OF_LINE



Function: c_islower
----------------------------------------------
7: return c - 0x61U < 0x1a;
	0002d08b:SUB EAX,0x61
	0002d08e:CMP EAX,0x19
	0002d091:JA 0x0002d09a
	0002d093:MOV EAX,0x1
	0002d098:JMP 0x0002d09f
	0002d09a:MOV EAX,0x0
	0002d09f:POP RBP
	0002d0a0:RET
END_OF_LINE



Function: c_isprint
----------------------------------------------
7: return c - 0x20U < 0x5f;
	0002d0af:SUB EAX,0x20
	0002d0b2:CMP EAX,0x5e
	0002d0b5:JA 0x0002d0be
	0002d0b7:MOV EAX,0x1
	0002d0bc:JMP 0x0002d0c3
	0002d0be:MOV EAX,0x0
	0002d0c3:POP RBP
	0002d0c4:RET
END_OF_LINE



Function: c_ispunct
----------------------------------------------
7: if (c < 0x7f) {
	0002d0d4:JG 0x0002d108
END_OF_LINE
----------------------------------------------
8: if (0x7a < c) {
	0002d0da:JGE 0x0002d101
END_OF_LINE
----------------------------------------------
9: return true;
	0002d10e:RET
END_OF_LINE
----------------------------------------------
11: if (c < 0x61) {
	0002d0e0:JG 0x0002d108
END_OF_LINE
----------------------------------------------
12: if (0x5a < c) {
	0002d0e6:JGE 0x0002d101
END_OF_LINE
----------------------------------------------
13: return true;
	0002d10e:RET
END_OF_LINE
----------------------------------------------
15: if (c < 0x30) {
	0002d0ec:JG 0x0002d0f6
END_OF_LINE
----------------------------------------------
16: if (0x20 < c) {
	0002d0f2:JGE 0x0002d101
END_OF_LINE
----------------------------------------------
17: return true;
	0002d10e:RET
END_OF_LINE
----------------------------------------------
20: else if (c - 0x3aU < 7) {
	0002d0f9:SUB EAX,0x3a
	0002d0fc:CMP EAX,0x6
	0002d0ff:JA 0x0002d108
END_OF_LINE
----------------------------------------------
21: return true;
	0002d10e:RET
END_OF_LINE
----------------------------------------------
25: return false;
	0002d10e:RET
END_OF_LINE



Function: c_isspace
----------------------------------------------
7: if (c < 0xe) {
	0002d11e:JG 0x0002d128
END_OF_LINE
----------------------------------------------
8: if (8 < c) {
	0002d124:JGE 0x0002d12e
END_OF_LINE
----------------------------------------------
9: return true;
	0002d13b:RET
END_OF_LINE
----------------------------------------------
12: else if (c == 0x20) {
	0002d128:CMP dword ptr [RBP + -0x4],0x20
	0002d12c:JNZ 0x0002d135
END_OF_LINE
----------------------------------------------
13: return true;
	0002d13b:RET
END_OF_LINE
----------------------------------------------
15: return false;
	0002d13b:RET
END_OF_LINE



Function: c_isupper
----------------------------------------------
7: return c - 0x41U < 0x1a;
	0002d14a:SUB EAX,0x41
	0002d14d:CMP EAX,0x19
	0002d150:JA 0x0002d159
	0002d152:MOV EAX,0x1
	0002d157:JMP 0x0002d15e
	0002d159:MOV EAX,0x0
	0002d15e:POP RBP
	0002d15f:RET
END_OF_LINE



Function: c_isxdigit
----------------------------------------------
8: if ((c - 0x30U < 0x37) && ((0x7e0000007e03ffU >> ((byte)(c - 0x30U) & 0x3f) & 1) != 0)) {
	0002d16e:SUB EAX,0x30
	0002d171:CMP EAX,0x36
	0002d174:SETA DL
	0002d177:TEST DL,DL
	0002d179:JNZ 0x0002d1a1
	0002d17b:MOV RDX,0x7e0000007e03ff
	0002d185:MOV ECX,EAX
	0002d187:SHR RDX,CL
	0002d18a:MOV RAX,RDX
	0002d18d:AND EAX,0x1
	0002d190:TEST RAX,RAX
	0002d193:SETNZ AL
	0002d196:TEST AL,AL
	0002d198:JZ 0x0002d1a1
END_OF_LINE
----------------------------------------------
9: _Var1 = true;
	0002d19a:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
12: _Var1 = false;
	0002d1a1:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: return _Var1;
	0002d1a7:RET
END_OF_LINE



Function: c_tolower
----------------------------------------------
7: if (c - 0x41U < 0x1a) {
	0002d1b6:SUB EAX,0x41
	0002d1b9:CMP EAX,0x19
	0002d1bc:JA 0x0002d1c6
END_OF_LINE
----------------------------------------------
8: c = c + 0x20;
	0002d1c1:ADD EAX,0x20
END_OF_LINE
----------------------------------------------
10: return c;
	0002d1ca:RET
END_OF_LINE



Function: c_toupper
----------------------------------------------
7: if (c - 0x61U < 0x1a) {
	0002d1d9:SUB EAX,0x61
	0002d1dc:CMP EAX,0x19
	0002d1df:JA 0x0002d1e9
END_OF_LINE
----------------------------------------------
8: c = c + -0x20;
	0002d1e4:SUB EAX,0x20
END_OF_LINE
----------------------------------------------
10: return c;
	0002d1ed:RET
END_OF_LINE



Function: c_strcasecmp
----------------------------------------------
15: if (s1 == s2) {
	0002d20d:CMP R12,RBX
	0002d210:JNZ 0x0002d219
END_OF_LINE
----------------------------------------------
16: iVar3 = 0;
	0002d212:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
20: uVar1 = c_tolower((uint)(byte)*s1);
	0002d219:MOVZX EAX,byte ptr [R12]
	0002d21e:MOVZX EAX,AL
	0002d221:MOV EDI,EAX
	0002d223:CALL 0x0002d1a8
END_OF_LINE
----------------------------------------------
21: uVar2 = c_tolower((uint)(byte)*s2);
	0002d22b:MOVZX EAX,byte ptr [RBX]
	0002d22e:MOVZX EAX,AL
	0002d231:MOV EDI,EAX
	0002d233:CALL 0x0002d1a8
END_OF_LINE
----------------------------------------------
22: if ((char)uVar1 == '\0') break;
	0002d228:MOV byte ptr [RBP + -0x12],AL
	0002d22b:MOVZX EAX,byte ptr [RBX]
	0002d22e:MOVZX EAX,AL
	0002d231:MOV EDI,EAX
	0002d233:CALL 0x0002d1a8
	0002d238:MOV byte ptr [RBP + -0x11],AL
	0002d23b:CMP byte ptr [RBP + -0x12],0x0
	0002d23f:JZ 0x0002d254
END_OF_LINE
----------------------------------------------
23: s1 = (char *)((byte *)s1 + 1);
	0002d241:ADD R12,0x1
END_OF_LINE
----------------------------------------------
24: s2 = (char *)((byte *)s2 + 1);
	0002d245:ADD RBX,0x1
END_OF_LINE
----------------------------------------------
25: } while ((char)uVar1 == (char)uVar2);
	0002d228:MOV byte ptr [RBP + -0x12],AL
	0002d22b:MOVZX EAX,byte ptr [RBX]
	0002d22e:MOVZX EAX,AL
	0002d231:MOV EDI,EAX
	0002d233:CALL 0x0002d1a8
	0002d238:MOV byte ptr [RBP + -0x11],AL
	0002d23b:CMP byte ptr [RBP + -0x12],0x0
	0002d23f:JZ 0x0002d254
	0002d241:ADD R12,0x1
	0002d245:ADD RBX,0x1
	0002d249:MOVZX EAX,byte ptr [RBP + -0x12]
	0002d24d:CMP AL,byte ptr [RBP + -0x11]
	0002d250:JZ 0x0002d219
END_OF_LINE
----------------------------------------------
26: iVar3 = (uVar1 & 0xff) - (uVar2 & 0xff);
	0002d25d:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
28: return iVar3;
	0002d267:RET
END_OF_LINE



Function: hard_locale
----------------------------------------------
11: hard = true;
	0002d277:MOV byte ptr [RBP + -0x9],0x1
END_OF_LINE
----------------------------------------------
12: __s1 = setlocale(category,(char *)0x0);
	0002d285:CALL 0x00005ec0
END_OF_LINE
----------------------------------------------
13: if (__s1 != (char *)0x0) {
	0002d28e:CMP qword ptr [RBP + -0x8],0x0
	0002d293:JZ 0x0002d2cd
END_OF_LINE
----------------------------------------------
14: iVar1 = strcmp(__s1,"C");
	0002d2a6:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
15: if ((iVar1 != 0) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {
	0002d2ab:TEST EAX,EAX
	0002d2ad:JZ 0x0002d2c9
	0002d2af:MOV RAX,qword ptr [RBP + -0x8]
	0002d2b3:LEA RDX,[0x35f8e]
	0002d2ba:MOV RSI,RDX
	0002d2bd:MOV RDI,RAX
	0002d2c0:CALL 0x00005ce0
	0002d2c5:TEST EAX,EAX
	0002d2c7:JNZ 0x0002d2cd
END_OF_LINE
----------------------------------------------
16: return true;
	0002d2d2:RET
END_OF_LINE
----------------------------------------------
18: hard = false;
	0002d2c9:MOV byte ptr [RBP + -0x9],0x0
END_OF_LINE
----------------------------------------------
20: return hard;
	0002d2d2:RET
END_OF_LINE



Function: get_charset_aliases
----------------------------------------------
35: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	0002d2e2:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
36: cp = charset_aliases;
	0002d2f8:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
37: if (charset_aliases == (char *)0x0) {
	0002d2ff:CMP qword ptr [RBP + -0xe0],0x0
	0002d307:JNZ 0x0002d7d7
END_OF_LINE
----------------------------------------------
38: dir = getenv("CHARSETALIASDIR");
	0002d330:CALL 0x00005880
END_OF_LINE
----------------------------------------------
39: if ((dir == (char *)0x0) || (*dir == '\0')) {
	0002d33c:CMP qword ptr [RBP + -0xd8],0x0
	0002d344:JZ 0x0002d354
	0002d346:MOV RAX,qword ptr [RBP + -0xd8]
	0002d34d:MOVZX EAX,byte ptr [RAX]
	0002d350:TEST AL,AL
	0002d352:JNZ 0x0002d36d
END_OF_LINE
----------------------------------------------
40: dir = "/usr/local/lib";
	0002d366:MOV qword ptr [RBP + -0xd8],RAX
END_OF_LINE
----------------------------------------------
42: sVar3 = strlen(dir);
	0002d377:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
43: sVar4 = strlen("charset.alias");
	0002d38d:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
44: if ((sVar3 == 0) || (dir[sVar3 - 1] == '/')) {
	0002d399:CMP qword ptr [RBP + -0xb8],0x0
	0002d3a1:JZ 0x0002d3c6
	0002d3a3:MOV RAX,qword ptr [RBP + -0xb8]
	0002d3aa:LEA RDX,[RAX + -0x1]
	0002d3ae:MOV RAX,qword ptr [RBP + -0xd8]
	0002d3b5:ADD RAX,RDX
	0002d3b8:MOVZX EAX,byte ptr [RAX]
	0002d3bb:CMP AL,0x2f
	0002d3bd:JZ 0x0002d3c6
END_OF_LINE
----------------------------------------------
45: iVar2 = 0;
	0002d3c6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
48: iVar2 = 1;
	0002d3bf:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
50: __file = (char *)malloc(sVar4 + (long)iVar2 + sVar3 + 1);
	0002d3d7:MOVSXD RDX,EAX
	0002d3da:MOV RAX,qword ptr [RBP + -0xb8]
	0002d3e1:ADD RDX,RAX
	0002d3e4:MOV RAX,qword ptr [RBP + -0xb0]
	0002d3eb:ADD RAX,RDX
	0002d3ee:ADD RAX,0x1
	0002d3f2:MOV RDI,RAX
	0002d3f5:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
51: if (__file != (char *)0x0) {
	0002d401:CMP qword ptr [RBP + -0xa8],0x0
	0002d409:JZ 0x0002d482
END_OF_LINE
----------------------------------------------
52: memcpy(__file,dir,sVar3);
	0002d426:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
53: if (iVar2 != 0) {
	0002d42b:CMP dword ptr [RBP + -0xf4],0x0
	0002d432:JZ 0x0002d448
END_OF_LINE
----------------------------------------------
54: __file[sVar3] = '/';
	0002d442:ADD RAX,RDX
	0002d445:MOV byte ptr [RAX],0x2f
END_OF_LINE
----------------------------------------------
56: memcpy(__file + (long)iVar2 + sVar3,"charset.alias",sVar4 + 1);
	0002d44f:LEA RDX,[RAX + 0x1]
	0002d453:MOV EAX,dword ptr [RBP + -0xf4]
	0002d459:MOVSXD RCX,EAX
	0002d45c:MOV RAX,qword ptr [RBP + -0xb8]
	0002d463:ADD RCX,RAX
	0002d466:MOV RAX,qword ptr [RBP + -0xa8]
	0002d46d:ADD RCX,RAX
	0002d470:MOV RAX,qword ptr [RBP + -0xc0]
	0002d477:MOV RSI,RAX
	0002d47a:MOV RDI,RCX
	0002d47d:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
58: free((void *)0x0);
	0002d48c:CALL 0x00005860
END_OF_LINE
----------------------------------------------
59: if (__file == (char *)0x0) {
	0002d491:CMP qword ptr [RBP + -0xa8],0x0
	0002d499:JNZ 0x0002d4ae
END_OF_LINE
----------------------------------------------
60: cp = "";
	0002d4a2:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
63: iVar2 = open(__file,0x20000);
	0002d4c2:CALL 0x00005f30
END_OF_LINE
----------------------------------------------
64: if (iVar2 < 0) {
	0002d4cd:CMP dword ptr [RBP + -0xf0],0x0
	0002d4d4:JNS 0x0002d4e9
END_OF_LINE
----------------------------------------------
65: cp = "";
	0002d4dd:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
68: __stream = fdopen(iVar2,"r");
	0002d4fb:CALL 0x00005eb0
END_OF_LINE
----------------------------------------------
69: if (__stream == (FILE *)0x0) {
	0002d507:CMP qword ptr [RBP + -0xa0],0x0
	0002d50f:JNZ 0x0002d531
END_OF_LINE
----------------------------------------------
70: close(iVar2);
	0002d519:CALL 0x00005c30
END_OF_LINE
----------------------------------------------
71: cp = "";
	0002d525:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
74: res_ptr = (char *)0x0;
	0002d531:MOV qword ptr [RBP + -0xd0],0x0
END_OF_LINE
----------------------------------------------
75: res_size = 0;
	0002d53c:MOV qword ptr [RBP + -0xc8],0x0
END_OF_LINE
----------------------------------------------
77: while( true ) {
	0002d597:JNZ 0x0002d5d2
END_OF_LINE
----------------------------------------------
79: __ptr = res_ptr;
	0002d547:MOV RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
80: iVar2 = getc_unlocked(__stream);
	0002d551:CALL 0x000059b0
END_OF_LINE
----------------------------------------------
81: if (iVar2 == -1) goto LAB_0002d761;
	0002d55c:CMP dword ptr [RBP + -0xec],-0x1
	0002d563:JZ 0x0002d75d
	0002d569:CMP dword ptr [RBP + -0xec],0xa
	0002d570:JZ 0x0002d77c
	0002d576:CMP dword ptr [RBP + -0xec],0x20
	0002d57d:JZ 0x0002d77c
	0002d583:CMP dword ptr [RBP + -0xec],0x9
	0002d58a:JZ 0x0002d77c
	0002d590:CMP dword ptr [RBP + -0xec],0x23
	0002d597:JNZ 0x0002d5d2
	0002d599:MOV RAX,qword ptr [RBP + -0xa0]
	0002d5a0:MOV RDI,RAX
	0002d5a3:CALL 0x000059b0
	0002d5a8:MOV dword ptr [RBP + -0xec],EAX
	0002d5ae:CMP dword ptr [RBP + -0xec],-0x1
	0002d5b5:JZ 0x0002d5c0
	0002d5b7:CMP dword ptr [RBP + -0xec],0xa
	0002d5be:JNZ 0x0002d599
	0002d5c0:CMP dword ptr [RBP + -0xec],-0x1
	0002d5c7:JNZ 0x0002d782
	0002d5cd:JMP 0x0002d761
	0002d5d2:MOV RDX,qword ptr [RBP + -0xa0]
	0002d5d9:MOV EAX,dword ptr [RBP + -0xec]
	0002d5df:MOV RSI,RDX
	0002d5e2:MOV EDI,EAX
	0002d5e4:CALL 0x00005e30
	0002d5e9:LEA RCX,[RBP + -0x40]
	0002d5ed:LEA RDX,[RBP + -0x80]
	0002d5f1:MOV RAX,qword ptr [RBP + -0xa0]
	0002d5f8:LEA RSI,[0x35fc4]
	0002d5ff:MOV RDI,RAX
	0002d602:MOV EAX,0x0
	0002d607:CALL 0x00005950
	0002d60c:CMP EAX,0x1
	0002d60f:JLE 0x0002d760
	0002d615:LEA RAX,[RBP + -0x80]
	0002d619:MOV RDI,RAX
	0002d61c:CALL 0x00005ad0
	0002d621:MOV qword ptr [RBP + -0x98],RAX
	0002d628:LEA RAX,[RBP + -0x40]
	0002d62c:MOV RDI,RAX
	0002d62f:CALL 0x00005ad0
	0002d634:MOV qword ptr [RBP + -0x90],RAX
	0002d63b:MOV RAX,qword ptr [RBP + -0xd0]
	0002d642:MOV qword ptr [RBP + -0x88],RAX
	0002d649:CMP qword ptr [RBP + -0xc8],0x0
	0002d651:JNZ 0x0002d68b
	0002d653:MOV RDX,qword ptr [RBP + -0x98]
	0002d65a:MOV RAX,qword ptr [RBP + -0x90]
	0002d661:ADD RAX,RDX
	0002d664:ADD RAX,0x2
	0002d668:MOV qword ptr [RBP + -0xc8],RAX
	0002d66f:MOV RAX,qword ptr [RBP + -0xc8]
	0002d676:ADD RAX,0x1
	0002d67a:MOV RDI,RAX
	0002d67d:CALL 0x00005df0
	0002d682:MOV qword ptr [RBP + -0xd0],RAX
	0002d689:JMP 0x0002d6d5
	0002d68b:MOV RDX,qword ptr [RBP + -0x98]
	0002d692:MOV RAX,qword ptr [RBP + -0x90]
	0002d699:ADD RDX,RAX
	0002d69c:MOV RAX,qword ptr [RBP + -0xc8]
	0002d6a3:ADD RAX,RDX
	0002d6a6:ADD RAX,0x2
	0002d6aa:MOV qword ptr [RBP + -0xc8],RAX
	0002d6b1:MOV RAX,qword ptr [RBP + -0xc8]
	0002d6b8:LEA RDX,[RAX + 0x1]
	0002d6bc:MOV RAX,qword ptr [RBP + -0xd0]
	0002d6c3:MOV RSI,RDX
	0002d6c6:MOV RDI,RAX
	0002d6c9:CALL 0x00005ea0
	0002d6ce:MOV qword ptr [RBP + -0xd0],RAX
	0002d6d5:CMP qword ptr [RBP + -0xd0],0x0
	0002d6dd:JNZ 0x0002d6fb
	0002d6df:MOV qword ptr [RBP + -0xc8],0x0
	0002d6ea:MOV RAX,qword ptr [RBP + -0x88]
	0002d6f1:MOV RDI,RAX
	0002d6f4:CALL 0x00005860
	0002d6f9:JMP 0x0002d761
	0002d6fb:MOV RAX,qword ptr [RBP + -0xc8]
	0002d702:SUB RAX,qword ptr [RBP + -0x90]
	0002d709:SUB RAX,qword ptr [RBP + -0x98]
	0002d710:LEA RDX,[RAX + -0x2]
	0002d714:MOV RAX,qword ptr [RBP + -0xd0]
	0002d71b:ADD RDX,RAX
	0002d71e:LEA RAX,[RBP + -0x80]
	0002d722:MOV RSI,RAX
	0002d725:MOV RDI,RDX
	0002d728:CALL 0x00005940
	0002d72d:MOV RAX,qword ptr [RBP + -0xc8]
	0002d734:SUB RAX,qword ptr [RBP + -0x90]
	0002d73b:LEA RDX,[RAX + -0x1]
	0002d73f:MOV RAX,qword ptr [RBP + -0xd0]
	0002d746:ADD RDX,RAX
	0002d749:LEA RAX,[RBP + -0x40]
	0002d74d:MOV RSI,RAX
	0002d750:MOV RDI,RDX
	0002d753:CALL 0x00005940
	0002d758:JMP 0x0002d547
	0002d75d:NOP
	0002d75e:JMP 0x0002d761
	0002d760:NOP
	0002d761:MOV RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
82: } while (((iVar2 == 10) || (iVar2 == 0x20)) || (iVar2 == 9));
	0002d569:CMP dword ptr [RBP + -0xec],0xa
	0002d570:JZ 0x0002d77c
	0002d576:CMP dword ptr [RBP + -0xec],0x20
	0002d57d:JZ 0x0002d77c
	0002d583:CMP dword ptr [RBP + -0xec],0x9
	0002d58a:JZ 0x0002d77c
END_OF_LINE
----------------------------------------------
83: if (iVar2 == 0x23) break;
	0002d590:CMP dword ptr [RBP + -0xec],0x23
	0002d597:JNZ 0x0002d5d2
END_OF_LINE
----------------------------------------------
84: ungetc(iVar2,__stream);
	0002d5e4:CALL 0x00005e30
END_OF_LINE
----------------------------------------------
85: iVar2 = __isoc99_fscanf(__stream,"%50s %50s",buf1,buf2);
	0002d5e9:LEA RCX,[RBP + -0x40]
	0002d5ed:LEA RDX,[RBP + -0x80]
	0002d5f1:MOV RAX,qword ptr [RBP + -0xa0]
	0002d5f8:LEA RSI,[0x35fc4]
	0002d5ff:MOV RDI,RAX
	0002d602:MOV EAX,0x0
	0002d607:CALL 0x00005950
END_OF_LINE
----------------------------------------------
86: if (iVar2 < 2) goto LAB_0002d761;
	0002d60f:JLE 0x0002d760
	0002d615:LEA RAX,[RBP + -0x80]
	0002d619:MOV RDI,RAX
	0002d61c:CALL 0x00005ad0
	0002d621:MOV qword ptr [RBP + -0x98],RAX
	0002d628:LEA RAX,[RBP + -0x40]
	0002d62c:MOV RDI,RAX
	0002d62f:CALL 0x00005ad0
	0002d634:MOV qword ptr [RBP + -0x90],RAX
	0002d63b:MOV RAX,qword ptr [RBP + -0xd0]
	0002d642:MOV qword ptr [RBP + -0x88],RAX
	0002d649:CMP qword ptr [RBP + -0xc8],0x0
	0002d651:JNZ 0x0002d68b
	0002d653:MOV RDX,qword ptr [RBP + -0x98]
	0002d65a:MOV RAX,qword ptr [RBP + -0x90]
	0002d661:ADD RAX,RDX
	0002d664:ADD RAX,0x2
	0002d668:MOV qword ptr [RBP + -0xc8],RAX
	0002d66f:MOV RAX,qword ptr [RBP + -0xc8]
	0002d676:ADD RAX,0x1
	0002d67a:MOV RDI,RAX
	0002d67d:CALL 0x00005df0
	0002d682:MOV qword ptr [RBP + -0xd0],RAX
	0002d689:JMP 0x0002d6d5
	0002d68b:MOV RDX,qword ptr [RBP + -0x98]
	0002d692:MOV RAX,qword ptr [RBP + -0x90]
	0002d699:ADD RDX,RAX
	0002d69c:MOV RAX,qword ptr [RBP + -0xc8]
	0002d6a3:ADD RAX,RDX
	0002d6a6:ADD RAX,0x2
	0002d6aa:MOV qword ptr [RBP + -0xc8],RAX
	0002d6b1:MOV RAX,qword ptr [RBP + -0xc8]
	0002d6b8:LEA RDX,[RAX + 0x1]
	0002d6bc:MOV RAX,qword ptr [RBP + -0xd0]
	0002d6c3:MOV RSI,RDX
	0002d6c6:MOV RDI,RAX
	0002d6c9:CALL 0x00005ea0
	0002d6ce:MOV qword ptr [RBP + -0xd0],RAX
	0002d6d5:CMP qword ptr [RBP + -0xd0],0x0
	0002d6dd:JNZ 0x0002d6fb
	0002d6df:MOV qword ptr [RBP + -0xc8],0x0
	0002d6ea:MOV RAX,qword ptr [RBP + -0x88]
	0002d6f1:MOV RDI,RAX
	0002d6f4:CALL 0x00005860
	0002d6f9:JMP 0x0002d761
	0002d6fb:MOV RAX,qword ptr [RBP + -0xc8]
	0002d702:SUB RAX,qword ptr [RBP + -0x90]
	0002d709:SUB RAX,qword ptr [RBP + -0x98]
	0002d710:LEA RDX,[RAX + -0x2]
	0002d714:MOV RAX,qword ptr [RBP + -0xd0]
	0002d71b:ADD RDX,RAX
	0002d71e:LEA RAX,[RBP + -0x80]
	0002d722:MOV RSI,RAX
	0002d725:MOV RDI,RDX
	0002d728:CALL 0x00005940
	0002d72d:MOV RAX,qword ptr [RBP + -0xc8]
	0002d734:SUB RAX,qword ptr [RBP + -0x90]
	0002d73b:LEA RDX,[RAX + -0x1]
	0002d73f:MOV RAX,qword ptr [RBP + -0xd0]
	0002d746:ADD RDX,RAX
	0002d749:LEA RAX,[RBP + -0x40]
	0002d74d:MOV RSI,RAX
	0002d750:MOV RDI,RDX
	0002d753:CALL 0x00005940
	0002d758:JMP 0x0002d547
	0002d75d:NOP
	0002d75e:JMP 0x0002d761
	0002d760:NOP
	0002d761:MOV RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
87: sVar3 = strlen(buf1);
	0002d615:LEA RAX,[RBP + -0x80]
	0002d619:MOV RDI,RAX
	0002d61c:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
88: sVar4 = strlen(buf2);
	0002d628:LEA RAX,[RBP + -0x40]
	0002d62c:MOV RDI,RAX
	0002d62f:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
89: if (res_size == 0) {
	0002d649:CMP qword ptr [RBP + -0xc8],0x0
	0002d651:JNZ 0x0002d68b
END_OF_LINE
----------------------------------------------
90: lVar5 = sVar4 + sVar3;
	0002d661:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
91: res_ptr = (char *)malloc(lVar5 + 3);
	0002d676:ADD RAX,0x1
	0002d67a:MOV RDI,RAX
	0002d67d:CALL 0x00005df0
END_OF_LINE
----------------------------------------------
94: lVar5 = res_size + sVar3 + sVar4;
	0002d699:ADD RDX,RAX
	0002d69c:MOV RAX,qword ptr [RBP + -0xc8]
	0002d6a3:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
95: res_ptr = (char *)realloc(res_ptr,lVar5 + 3);
	0002d6b8:LEA RDX,[RAX + 0x1]
	0002d6bc:MOV RAX,qword ptr [RBP + -0xd0]
	0002d6c3:MOV RSI,RDX
	0002d6c6:MOV RDI,RAX
	0002d6c9:CALL 0x00005ea0
END_OF_LINE
----------------------------------------------
97: res_size = lVar5 + 2;
	0002d664:ADD RAX,0x2
END_OF_LINE
----------------------------------------------
98: if (res_ptr == (char *)0x0) {
	0002d6d5:CMP qword ptr [RBP + -0xd0],0x0
	0002d6dd:JNZ 0x0002d6fb
END_OF_LINE
----------------------------------------------
99: res_size = 0;
	0002d6df:MOV qword ptr [RBP + -0xc8],0x0
END_OF_LINE
----------------------------------------------
100: free(__ptr);
	0002d6f4:CALL 0x00005860
END_OF_LINE
----------------------------------------------
101: goto LAB_0002d761;
	0002d761:MOV RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
103: strcpy(res_ptr + ((res_size - sVar4) - sVar3) + -2,buf1);
	0002d702:SUB RAX,qword ptr [RBP + -0x90]
	0002d709:SUB RAX,qword ptr [RBP + -0x98]
	0002d710:LEA RDX,[RAX + -0x2]
	0002d714:MOV RAX,qword ptr [RBP + -0xd0]
	0002d71b:ADD RDX,RAX
	0002d71e:LEA RAX,[RBP + -0x80]
	0002d722:MOV RSI,RAX
	0002d725:MOV RDI,RDX
	0002d728:CALL 0x00005940
END_OF_LINE
----------------------------------------------
104: strcpy(res_ptr + (res_size - sVar4) + -1,buf2);
	0002d734:SUB RAX,qword ptr [RBP + -0x90]
	0002d73b:LEA RDX,[RAX + -0x1]
	0002d73f:MOV RAX,qword ptr [RBP + -0xd0]
	0002d746:ADD RDX,RAX
	0002d749:LEA RAX,[RBP + -0x40]
	0002d74d:MOV RSI,RAX
	0002d750:MOV RDI,RDX
	0002d753:CALL 0x00005940
END_OF_LINE
----------------------------------------------
107: iVar2 = getc_unlocked(__stream);
	0002d5a3:CALL 0x000059b0
END_OF_LINE
----------------------------------------------
108: if (iVar2 == -1) break;
	0002d5ae:CMP dword ptr [RBP + -0xec],-0x1
	0002d5b5:JZ 0x0002d5c0
END_OF_LINE
----------------------------------------------
109: } while (iVar2 != 10);
	0002d5b7:CMP dword ptr [RBP + -0xec],0xa
	0002d5be:JNZ 0x0002d599
END_OF_LINE
----------------------------------------------
110: } while (iVar2 != -1);
	0002d5c0:CMP dword ptr [RBP + -0xec],-0x1
	0002d5c7:JNZ 0x0002d782
END_OF_LINE
----------------------------------------------
111: LAB_0002d761:
	0002d761:MOV RAX,qword ptr [RBP + -0xa0]
END_OF_LINE
----------------------------------------------
112: fclose(__stream);
	0002d76b:CALL 0x00005a80
END_OF_LINE
----------------------------------------------
113: if (res_size == 0) {
	0002d770:CMP qword ptr [RBP + -0xc8],0x0
	0002d778:JZ 0x0002d788
END_OF_LINE
----------------------------------------------
114: cp = "";
	0002d78f:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
117: res_ptr[res_size] = '\0';
	0002d7a6:ADD RAX,RDX
	0002d7a9:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
118: cp = res_ptr;
	0002d7b3:MOV qword ptr [RBP + -0xe0],RAX
END_OF_LINE
----------------------------------------------
122: free(__file);
	0002d7c4:CALL 0x00005860
END_OF_LINE
----------------------------------------------
125: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	0002d7e2:SUB RDX,qword ptr FS:[0x28]
	0002d7eb:JZ 0x0002d7f2
END_OF_LINE
----------------------------------------------
126: charset_aliases = cp;
	0002d7f3:RET
END_OF_LINE
----------------------------------------------
127: return cp;
	0002d7d7:MOV RAX,qword ptr [RBP + -0xe0]
	0002d7de:MOV RDX,qword ptr [RBP + -0x8]
	0002d7e2:SUB RDX,qword ptr FS:[0x28]
	0002d7eb:JZ 0x0002d7f2
	0002d7ed:CALL 0x00005b00
	0002d7f2:LEAVE
	0002d7f3:RET
END_OF_LINE
----------------------------------------------
129: charset_aliases = cp;
	0002d7ed:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
131: __stack_chk_fail();
	0002d7ed:CALL 0x00005b00
END_OF_LINE



Function: locale_charset
----------------------------------------------
13: codeset = nl_langinfo(0xe);
	0002d805:CALL 0x00005e20
END_OF_LINE
----------------------------------------------
14: if (codeset == (char *)0x0) {
	0002d80e:CMP qword ptr [RBP + -0x10],0x0
	0002d813:JNZ 0x0002d820
END_OF_LINE
----------------------------------------------
15: codeset = "";
	0002d81c:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
17: aliases = get_charset_aliases();
	0002d820:CALL 0x0002d2d3
END_OF_LINE
----------------------------------------------
19: if (*aliases == '\0') {
	0002d8a5:MOVZX EAX,byte ptr [RAX]
	0002d8a8:TEST AL,AL
	0002d8aa:JNZ 0x0002d82b
END_OF_LINE
----------------------------------------------
20: LAB_0002d8b0:
	0002d8b0:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
21: if (*codeset == '\0') {
	0002d8b4:MOVZX EAX,byte ptr [RAX]
	0002d8b7:TEST AL,AL
	0002d8b9:JNZ 0x0002d8c6
END_OF_LINE
----------------------------------------------
22: codeset = "ASCII";
	0002d8c2:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
24: return codeset;
	0002d8c6:MOV RAX,qword ptr [RBP + -0x10]
	0002d8ca:LEAVE
	0002d8cb:RET
END_OF_LINE
----------------------------------------------
26: iVar1 = strcmp(codeset,aliases);
	0002d839:CALL 0x00005ce0
END_OF_LINE
----------------------------------------------
27: if ((iVar1 == 0) || ((*aliases == '*' && (aliases[1] == '\0')))) {
	0002d83e:TEST EAX,EAX
	0002d840:JZ 0x0002d85c
	0002d842:MOV RAX,qword ptr [RBP + -0x8]
	0002d846:MOVZX EAX,byte ptr [RAX]
	0002d849:CMP AL,0x2a
	0002d84b:JNZ 0x0002d879
	0002d84d:MOV RAX,qword ptr [RBP + -0x8]
	0002d851:ADD RAX,0x1
	0002d855:MOVZX EAX,byte ptr [RAX]
	0002d858:TEST AL,AL
	0002d85a:JNZ 0x0002d879
END_OF_LINE
----------------------------------------------
28: sVar2 = strlen(aliases);
	0002d863:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
29: codeset = aliases + sVar2 + 1;
	0002d868:LEA RDX,[RAX + 0x1]
	0002d86c:MOV RAX,qword ptr [RBP + -0x8]
	0002d870:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
30: goto LAB_0002d8b0;
	0002d8b0:MOV RAX,qword ptr [RBP + -0x10]
END_OF_LINE
----------------------------------------------
32: sVar2 = strlen(aliases);
	0002d880:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
33: sVar3 = strlen(aliases + sVar2 + 1);
	0002d885:ADD RAX,0x1
	0002d889:ADD qword ptr [RBP + -0x8],RAX
	0002d88d:MOV RAX,qword ptr [RBP + -0x8]
	0002d891:MOV RDI,RAX
	0002d894:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
34: aliases = aliases + sVar2 + 1 + sVar3 + 1;
	0002d885:ADD RAX,0x1
	0002d889:ADD qword ptr [RBP + -0x8],RAX
	0002d88d:MOV RAX,qword ptr [RBP + -0x8]
	0002d891:MOV RDI,RAX
	0002d894:CALL 0x00005ad0
	0002d899:ADD RAX,0x1
	0002d89d:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE
----------------------------------------------
35: } while( true );
	0002d89d:ADD qword ptr [RBP + -0x8],RAX
END_OF_LINE



Function: memcpy_lowcase
----------------------------------------------
11: len_local = len;
	0002d8e4:JMP 0x0002d90d
END_OF_LINE
----------------------------------------------
12: while (sVar1 = len_local - 1, len_local != 0) {
	0002d911:LEA RDX,[RAX + -0x1]
	0002d915:MOV qword ptr [RBP + -0x18],RDX
	0002d919:TEST RAX,RAX
	0002d91c:JNZ 0x0002d8e6
END_OF_LINE
----------------------------------------------
13: iVar2 = tolower((uint)(byte)src[sVar1]);
	0002d8ee:ADD RAX,RDX
	0002d8f1:MOVZX EAX,byte ptr [RAX]
	0002d8f4:MOVZX EAX,AL
	0002d8f7:MOV EDI,EAX
	0002d8f9:CALL 0x00005de0
END_OF_LINE
----------------------------------------------
14: dest[sVar1] = (char)iVar2;
	0002d908:ADD RAX,RCX
	0002d90b:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
15: len_local = sVar1;
	0002d90b:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
17: return dest;
	0002d91e:MOV RAX,qword ptr [RBP + -0x8]
	0002d922:LEAVE
	0002d923:RET
END_OF_LINE



Function: memcpy_uppcase
----------------------------------------------
11: len_local = len;
	0002d93c:JMP 0x0002d965
END_OF_LINE
----------------------------------------------
12: while (sVar1 = len_local - 1, len_local != 0) {
	0002d969:LEA RDX,[RAX + -0x1]
	0002d96d:MOV qword ptr [RBP + -0x18],RDX
	0002d971:TEST RAX,RAX
	0002d974:JNZ 0x0002d93e
END_OF_LINE
----------------------------------------------
13: iVar2 = toupper((uint)(byte)src[sVar1]);
	0002d946:ADD RAX,RDX
	0002d949:MOVZX EAX,byte ptr [RAX]
	0002d94c:MOVZX EAX,AL
	0002d94f:MOV EDI,EAX
	0002d951:CALL 0x00005970
END_OF_LINE
----------------------------------------------
14: dest[sVar1] = (char)iVar2;
	0002d960:ADD RAX,RCX
	0002d963:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
15: len_local = sVar1;
	0002d963:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
17: return dest;
	0002d976:MOV RAX,qword ptr [RBP + -0x8]
	0002d97a:LEAVE
	0002d97b:RET
END_OF_LINE



Function: iso_week_days
----------------------------------------------
9: return (yday - ((yday - wday) + 0x17e) % 7) + 3;
	0002d990:SUB EAX,dword ptr [RBP + -0x18]
	0002d993:LEA EDX,[RAX + 0x4]
	0002d996:MOV EAX,dword ptr [RBP + -0x4]
	0002d999:ADD EAX,EDX
	0002d99b:MOVSXD RDX,EAX
	0002d99e:IMUL RDX,RDX,-0x6db6db6d
	0002d9a5:SHR RDX,0x20
	0002d9a9:ADD EDX,EAX
	0002d9ab:SAR EDX,0x2
	0002d9ae:MOV ESI,EAX
	0002d9b0:SAR ESI,0x1f
	0002d9b3:MOV ECX,EDX
	0002d9b5:SUB ECX,ESI
	0002d9b7:MOV EDX,ECX
	0002d9b9:SHL EDX,0x3
	0002d9bc:SUB EDX,ECX
	0002d9be:SUB EAX,EDX
	0002d9c0:MOV ECX,EAX
	0002d9c2:MOV EAX,dword ptr [RBP + -0x14]
	0002d9c5:SUB EAX,ECX
	0002d9c7:ADD EAX,0x3
	0002d9ca:POP RBP
	0002d9cb:RET
END_OF_LINE



Function: nstrftime
----------------------------------------------
16: local_10 = *(long *)(in_FS_OFFSET + 0x28);
	0002d9f0:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
17: tzset_called = false;
	0002d9ff:MOV byte ptr [RBP + -0x9],0x0
END_OF_LINE
----------------------------------------------
18: sVar1 = __strftime_internal(s,maxsize,format,tp,false,&tzset_called,tz,ns);
	0002da03:LEA R8,[RBP + -0x9]
	0002da07:MOV RCX,qword ptr [RBP + -0x30]
	0002da0b:MOV RDX,qword ptr [RBP + -0x28]
	0002da0f:MOV RSI,qword ptr [RBP + -0x20]
	0002da13:MOV RAX,qword ptr [RBP + -0x18]
	0002da17:MOV EDI,dword ptr [RBP + -0x3c]
	0002da1a:PUSH RDI
	0002da1b:PUSH qword ptr [RBP + -0x38]
	0002da1e:MOV R9,R8
	0002da21:MOV R8D,0x0
	0002da27:MOV RDI,RAX
	0002da2a:CALL 0x0002da49
END_OF_LINE
----------------------------------------------
19: if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
	0002da37:SUB RDX,qword ptr FS:[0x28]
	0002da40:JZ 0x0002da47
END_OF_LINE
----------------------------------------------
21: __stack_chk_fail();
	0002da42:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
23: return sVar1;
	0002da48:RET
END_OF_LINE



Function: __strftime_internal
----------------------------------------------
135: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	0002da90:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
136: hour12 = tp->tm_hour;
	0002daa6:MOV EAX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
137: i = 0;
	0002daaf:MOV qword ptr [RBP + -0x650],0x0
END_OF_LINE
----------------------------------------------
138: zone = tp->tm_zone;
	0002dada:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
139: if (zone == (char *)0x0) {
	0002dae5:CMP qword ptr [RBP + -0x658],0x0
	0002daed:JNZ 0x0002dafd
END_OF_LINE
----------------------------------------------
140: zone = "";
	0002daf6:MOV qword ptr [RBP + -0x658],RAX
END_OF_LINE
----------------------------------------------
142: p = s;
	0002db04:JLE 0x0002db0f
END_OF_LINE
----------------------------------------------
143: f = format;
	0002db04:JLE 0x0002db0f
END_OF_LINE
----------------------------------------------
144: if (hour12 < 0xd) {
	0002db04:JLE 0x0002db0f
END_OF_LINE
----------------------------------------------
145: if (hour12 == 0) {
	0002db0f:CMP dword ptr [RBP + -0x6b8],0x0
	0002db16:JNZ 0x0002db22
END_OF_LINE
----------------------------------------------
146: hour12 = 0xc;
	0002db18:MOV dword ptr [RBP + -0x6b8],0xc
END_OF_LINE
----------------------------------------------
150: hour12 = hour12 + -0xc;
	0002db06:SUB dword ptr [RBP + -0x6b8],0xc
END_OF_LINE
----------------------------------------------
152: LAB_000301c2:
	000301c2:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
153: if (*f == '\0') {
	000301c9:MOVZX EAX,byte ptr [RAX]
	000301cc:TEST AL,AL
	000301ce:JNZ 0x0002db35
END_OF_LINE
----------------------------------------------
154: if ((p != (char *)0x0) && (maxsize != 0)) {
	000301d4:CMP qword ptr [RBP + -0x648],0x0
	000301dc:JZ 0x000301f2
	000301de:CMP qword ptr [RBP + -0x6d0],0x0
	000301e6:JZ 0x000301f2
END_OF_LINE
----------------------------------------------
155: *p = '\0';
	000301ef:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
159: pad = 0;
	0002db35:MOV dword ptr [RBP + -0x6b4],0x0
END_OF_LINE
----------------------------------------------
160: digits = 0;
	0002db3f:MOV dword ptr [RBP + -0x6ac],0x0
END_OF_LINE
----------------------------------------------
161: width = -1;
	0002db49:MOV dword ptr [RBP + -0x69c],0xffffffff
END_OF_LINE
----------------------------------------------
162: bVar2 = false;
	0002db53:MOV byte ptr [RBP + -0x6bc],0x0
END_OF_LINE
----------------------------------------------
163: bVar1 = false;
	0002db67:MOV byte ptr [RBP + -0x6ba],0x0
END_OF_LINE
----------------------------------------------
164: to_uppcase = upcase;
	0002db7a:JZ 0x0002dcb3
END_OF_LINE
----------------------------------------------
165: if (*f == '%') {
	0002db75:MOVZX EAX,byte ptr [RAX]
	0002db78:CMP AL,0x25
	0002db7a:JZ 0x0002dcb3
END_OF_LINE
----------------------------------------------
166: LAB_0002dcb3:
	0002dcb3:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
167: f = f + 1;
	0002dcb3:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
168: cVar3 = *f;
	0002dcc2:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
169: if (cVar3 != '_') {
	0002dcc8:CMP EAX,0x5f
	0002dccb:JZ 0x0002dcf0
END_OF_LINE
----------------------------------------------
170: if ('_' < cVar3) goto code_r0x0002dd19;
	0002dcd0:JG 0x0002dd17
	0002dcd2:CMP EAX,0x5e
	0002dcd5:JZ 0x0002dd05
	0002dcd7:CMP EAX,0x5e
	0002dcda:JG 0x0002dd17
	0002dcdc:CMP EAX,0x30
	0002dcdf:JZ 0x0002dcf0
	0002dce1:CMP EAX,0x30
	0002dce4:JG 0x0002dd17
	0002dce6:CMP EAX,0x23
	0002dce9:JZ 0x0002dd0e
	0002dceb:CMP EAX,0x2d
	0002dcee:JNZ 0x0002dd17
	0002dcf0:MOV RAX,qword ptr [RBP + -0x640]
	0002dcf7:MOVZX EAX,byte ptr [RAX]
	0002dcfa:MOVSX EAX,AL
	0002dcfd:MOV dword ptr [RBP + -0x6b4],EAX
	0002dd03:JMP 0x0002dd34
	0002dd05:MOV byte ptr [RBP + -0x6bb],0x1
	0002dd0c:JMP 0x0002dd34
	0002dd0e:MOV byte ptr [RBP + -0x6ba],0x1
	0002dd15:JMP 0x0002dd34
	0002dd17:NOP
	0002dd18:NOP
	0002dd19:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
171: if (cVar3 == '^') {
	0002dcd2:CMP EAX,0x5e
	0002dcd5:JZ 0x0002dd05
END_OF_LINE
----------------------------------------------
172: to_uppcase = true;
	0002dd05:MOV byte ptr [RBP + -0x6bb],0x1
END_OF_LINE
----------------------------------------------
173: goto LAB_0002dcb3;
	0002dcb3:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
175: if ('^' < cVar3) goto code_r0x0002dd19;
	0002dcda:JG 0x0002dd17
	0002dcdc:CMP EAX,0x30
	0002dcdf:JZ 0x0002dcf0
	0002dce1:CMP EAX,0x30
	0002dce4:JG 0x0002dd17
	0002dce6:CMP EAX,0x23
	0002dce9:JZ 0x0002dd0e
	0002dceb:CMP EAX,0x2d
	0002dcee:JNZ 0x0002dd17
	0002dcf0:MOV RAX,qword ptr [RBP + -0x640]
	0002dcf7:MOVZX EAX,byte ptr [RAX]
	0002dcfa:MOVSX EAX,AL
	0002dcfd:MOV dword ptr [RBP + -0x6b4],EAX
	0002dd03:JMP 0x0002dd34
	0002dd05:MOV byte ptr [RBP + -0x6bb],0x1
	0002dd0c:JMP 0x0002dd34
	0002dd0e:MOV byte ptr [RBP + -0x6ba],0x1
	0002dd15:JMP 0x0002dd34
	0002dd17:NOP
	0002dd18:NOP
	0002dd19:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
176: if (cVar3 != '0') {
	0002dcdc:CMP EAX,0x30
	0002dcdf:JZ 0x0002dcf0
END_OF_LINE
----------------------------------------------
177: if ('0' < cVar3) goto code_r0x0002dd19;
	0002dce4:JG 0x0002dd17
	0002dce6:CMP EAX,0x23
	0002dce9:JZ 0x0002dd0e
	0002dceb:CMP EAX,0x2d
	0002dcee:JNZ 0x0002dd17
	0002dcf0:MOV RAX,qword ptr [RBP + -0x640]
	0002dcf7:MOVZX EAX,byte ptr [RAX]
	0002dcfa:MOVSX EAX,AL
	0002dcfd:MOV dword ptr [RBP + -0x6b4],EAX
	0002dd03:JMP 0x0002dd34
	0002dd05:MOV byte ptr [RBP + -0x6bb],0x1
	0002dd0c:JMP 0x0002dd34
	0002dd0e:MOV byte ptr [RBP + -0x6ba],0x1
	0002dd15:JMP 0x0002dd34
	0002dd17:NOP
	0002dd18:NOP
	0002dd19:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
178: if (cVar3 != '#') {
	0002dce6:CMP EAX,0x23
	0002dce9:JZ 0x0002dd0e
END_OF_LINE
----------------------------------------------
179: if (cVar3 == '-') goto LAB_0002dcf0;
	0002dceb:CMP EAX,0x2d
	0002dcee:JNZ 0x0002dd17
	0002dcf0:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
180: goto code_r0x0002dd19;
	0002dd19:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
182: bVar1 = true;
	0002dd0e:MOV byte ptr [RBP + -0x6ba],0x1
END_OF_LINE
----------------------------------------------
183: goto LAB_0002dcb3;
	0002dcb3:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
186: LAB_0002dcf0:
	0002dcf0:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
187: pad = (int)*f;
	0002dcf7:MOVZX EAX,byte ptr [RAX]
	0002dcfa:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
188: goto LAB_0002dcb3;
	0002dcb3:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
190: if (1 < maxsize - i) {
	0002dbc7:SUB RAX,qword ptr [RBP + -0x650]
	0002dbce:CMP qword ptr [RBP + -0x470],RAX
	0002dbd5:JC 0x0002dbe1
END_OF_LINE
----------------------------------------------
191: if (p != (char *)0x0) {
	0002dbe1:CMP qword ptr [RBP + -0x648],0x0
	0002dbe9:JZ 0x0002dca0
END_OF_LINE
----------------------------------------------
192: *p = *f;
	0002dc86:MOVZX EDX,byte ptr [RAX]
	0002dc89:MOV RAX,qword ptr [RBP + -0x648]
	0002dc90:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
193: p = p + 1;
	0002dc99:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
195: i = i + 1;
	0002dca7:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
196: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
198: i = 0;
	0002dbd7:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
200: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
201: code_r0x0002dd19:
	0002dd19:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE
----------------------------------------------
202: if ((int)*f - 0x30U < 10) {
	0002dd20:MOVZX EAX,byte ptr [RAX]
	0002dd23:MOVSX EAX,AL
	0002dd26:SUB EAX,0x30
	0002dd29:CMP EAX,0x9
	0002dd2c:JA 0x0002ddbd
END_OF_LINE
----------------------------------------------
203: width = 0;
	0002dd39:MOV dword ptr [RBP + -0x69c],0x0
END_OF_LINE
----------------------------------------------
205: if ((width < 0xccccccd) && ((width != 0xccccccc || (*f < '8')))) {
	0002dd4d:JG 0x0002dd69
	0002dd4f:CMP dword ptr [RBP + -0x69c],0xccccccc
	0002dd59:JNZ 0x0002dd75
	0002dd5b:MOV RAX,qword ptr [RBP + -0x640]
	0002dd62:MOVZX EAX,byte ptr [RAX]
	0002dd65:CMP AL,0x37
	0002dd67:JLE 0x0002dd75
END_OF_LINE
----------------------------------------------
206: width = width * 10 + *f + -0x30;
	0002dd82:ADD EAX,EAX
	0002dd84:MOV dword ptr [RBP + -0x69c],EAX
	0002dd8a:MOV RAX,qword ptr [RBP + -0x640]
	0002dd91:MOVZX EAX,byte ptr [RAX]
	0002dd94:MOVSX EAX,AL
	0002dd97:SUB EAX,0x30
	0002dd9a:ADD dword ptr [RBP + -0x69c],EAX
END_OF_LINE
----------------------------------------------
209: width = 0x7fffffff;
	0002dd69:MOV dword ptr [RBP + -0x69c],0x7fffffff
END_OF_LINE
----------------------------------------------
211: f = f + 1;
	0002dda0:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
212: } while ((int)*f - 0x30U < 10);
	0002ddaf:MOVZX EAX,byte ptr [RAX]
	0002ddb2:MOVSX EAX,AL
	0002ddb5:SUB EAX,0x30
	0002ddb8:CMP EAX,0x9
	0002ddbb:JBE 0x0002dd43
END_OF_LINE
----------------------------------------------
214: if ((*f == 'E') || (*f == 'O')) {
	0002ddc4:MOVZX EAX,byte ptr [RAX]
	0002ddc7:MOVSX EAX,AL
	0002ddca:CMP EAX,0x45
	0002ddcd:JZ 0x0002ddd4
	0002ddcf:CMP EAX,0x4f
	0002ddd2:JNZ 0x0002ddf4
END_OF_LINE
----------------------------------------------
215: modifier = (int)*f;
	0002dde6:MOVZX EAX,byte ptr [RAX]
	0002dde9:MOVSX EAX,AL
END_OF_LINE
----------------------------------------------
216: f = f + 1;
	0002dddb:LEA RDX,[RAX + 0x1]
	0002dddf:MOV qword ptr [RBP + -0x640],RDX
	0002dde6:MOVZX EAX,byte ptr [RAX]
	0002dde9:MOVSX EAX,AL
	0002ddec:MOV dword ptr [RBP + -0x6b0],EAX
	0002ddf2:JMP 0x0002ddff
END_OF_LINE
----------------------------------------------
219: modifier = 0;
	0002ddf4:MOV dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
221: format_char._0_1_ = *f;
	0002de06:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
222: switch((char)format_char) {
	0002de43:JMP RAX
END_OF_LINE
----------------------------------------------
223: case '\0':
	0002ff66:SUB qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
224: f = f + -1;
	0002ff66:SUB qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
226: case '%':
	0002de46:CMP dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
227: if (modifier == 0) {
	0002de46:CMP dword ptr [RBP + -0x6b0],0x0
	0002de4d:JNZ 0x0002ff70
END_OF_LINE
----------------------------------------------
228: iVar4 = width;
	0002de6b:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
229: if (width < 0) {
	0002de69:TEST EAX,EAX
	0002de6b:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
230: iVar4 = 0;
	0002de6b:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
232: uVar8 = (ulong)iVar4;
	0002de6e:CDQE
END_OF_LINE
----------------------------------------------
233: uVar11 = uVar8;
	0002de88:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
234: if (uVar8 < 2) {
	0002de85:CMP RDX,RAX
	0002de88:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
235: uVar11 = 1;
	0002de77:MOV RDX,qword ptr [RBP + -0x4c0]
	0002de7e:MOV RAX,qword ptr [RBP + -0x4b8]
	0002de85:CMP RDX,RAX
	0002de88:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
237: if (maxsize - i <= uVar11) {
	0002de9a:SUB RAX,qword ptr [RBP + -0x650]
	0002dea1:CMP qword ptr [RBP + -0x4b0],RAX
	0002dea8:JC 0x0002deb4
END_OF_LINE
----------------------------------------------
238: i = 0;
	0002deaa:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
239: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
241: if (p != (char *)0x0) {
	0002deb4:CMP qword ptr [RBP + -0x648],0x0
	0002debc:JZ 0x0002df73
END_OF_LINE
----------------------------------------------
242: if (1 < uVar8) {
	0002ded6:CMP RAX,qword ptr [RBP + -0x4b8]
	0002dedd:JNC 0x0002df52
END_OF_LINE
----------------------------------------------
243: sVar13 = (long)width - 1;
	0002dee5:CDQE
	0002dee7:SUB RAX,qword ptr [RBP + -0x4c0]
END_OF_LINE
----------------------------------------------
244: if (pad == 0x30) {
	0002def5:CMP dword ptr [RBP + -0x6b4],0x30
	0002defc:JNZ 0x0002df29
END_OF_LINE
----------------------------------------------
245: memset(p,0x30,sVar13);
	0002df14:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
246: p = p + sVar13;
	0002df20:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
249: memset(p,0x20,sVar13);
	0002df3f:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
250: p = p + sVar13;
	0002df4b:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
253: *p = *f;
	0002df59:MOVZX EDX,byte ptr [RAX]
	0002df5c:MOV RAX,qword ptr [RBP + -0x648]
	0002df63:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
254: p = p + 1;
	0002df6c:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
256: i = i + uVar11;
	0002df7a:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
257: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
260: case ':':
	0002fcd3:MOV qword ptr [RBP + -0x628],0x1
END_OF_LINE
----------------------------------------------
261: for (colons = 1; f[colons] == ':'; colons = colons + 1) {
	0002fcd3:MOV qword ptr [RBP + -0x628],0x1
	0002fcde:JMP 0x0002fce9
	0002fce0:NOP
	0002fce1:ADD qword ptr [RBP + -0x628],0x1
	0002fce9:MOV RDX,qword ptr [RBP + -0x640]
	0002fcf0:MOV RAX,qword ptr [RBP + -0x628]
	0002fcf7:ADD RAX,RDX
	0002fcfa:MOVZX EAX,byte ptr [RAX]
	0002fcfd:CMP AL,0x3a
	0002fcff:JZ 0x0002fce0
END_OF_LINE
----------------------------------------------
263: if (f[colons] == 'z') {
	0002fd0f:ADD RAX,RDX
	0002fd12:MOVZX EAX,byte ptr [RAX]
	0002fd15:CMP AL,0x7a
	0002fd17:JNZ 0x0002ffb2
END_OF_LINE
----------------------------------------------
264: f = f + colons;
	0002fd24:ADD qword ptr [RBP + -0x640],RAX
END_OF_LINE
----------------------------------------------
265: goto LAB_0002fd38;
	0002fd38:MOV RAX,qword ptr [RBP + -0x6e0]
END_OF_LINE
----------------------------------------------
268: case 'A':
	0002dfb3:CMP dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
269: if (modifier == 0) {
	0002dfb3:CMP dword ptr [RBP + -0x6b0],0x0
	0002dfba:JNZ 0x0002ff76
END_OF_LINE
----------------------------------------------
270: if (bVar1) {
	0002dfc7:JZ 0x0002e20a
END_OF_LINE
----------------------------------------------
271: to_uppcase = true;
	0002dfcd:MOV byte ptr [RBP + -0x6bb],0x1
END_OF_LINE
----------------------------------------------
273: bVar2 = false;
	0002e20b:JMP 0x0002e229
END_OF_LINE
----------------------------------------------
274: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
277: case 'B':
	0002e009:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
278: if (modifier != 0x45) {
	0002e009:CMP dword ptr [RBP + -0x6b0],0x45
	0002e010:JZ 0x0002ff79
END_OF_LINE
----------------------------------------------
279: if (bVar1) {
	0002e01d:JZ 0x0002e210
END_OF_LINE
----------------------------------------------
280: to_uppcase = true;
	0002e023:MOV byte ptr [RBP + -0x6bb],0x1
END_OF_LINE
----------------------------------------------
282: bVar2 = false;
	0002e211:JMP 0x0002e229
END_OF_LINE
----------------------------------------------
283: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
286: case 'C':
	0002e488:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
287: if (modifier != 0x45) {
	0002e488:CMP dword ptr [RBP + -0x6b0],0x45
	0002e48f:JZ 0x0002e216
END_OF_LINE
----------------------------------------------
288: iVar4 = tp->tm_year / 100 + 0x13;
	0002e49c:MOV EAX,dword ptr [RAX + 0x14]
	0002e49f:MOVSXD RDX,EAX
	0002e4a2:IMUL RDX,RDX,0x51eb851f
	0002e4a9:SHR RDX,0x20
	0002e4ad:SAR EDX,0x5
	0002e4b0:SAR EAX,0x1f
	0002e4b3:MOV ECX,EAX
	0002e4b5:MOV EAX,EDX
	0002e4b7:SUB EAX,ECX
	0002e4b9:ADD EAX,0x13
END_OF_LINE
----------------------------------------------
289: if ((tp->tm_year % 100 < 0) && (0 < iVar4)) {
	0002e4c9:MOV EDX,dword ptr [RAX + 0x14]
	0002e4cc:MOVSXD RAX,EDX
	0002e4cf:IMUL RAX,RAX,0x51eb851f
	0002e4d6:SHR RAX,0x20
	0002e4da:SAR EAX,0x5
	0002e4dd:MOV ECX,EDX
	0002e4df:SAR ECX,0x1f
	0002e4e2:SUB EAX,ECX
	0002e4e4:IMUL ECX,EAX,0x64
	0002e4e7:MOV EAX,EDX
	0002e4e9:SUB EAX,ECX
	0002e4eb:TEST EAX,EAX
	0002e4ed:JNS 0x0002e4ff
	0002e4ef:CMP dword ptr [RBP + -0x670],0x0
	0002e4f6:JLE 0x0002e4ff
END_OF_LINE
----------------------------------------------
290: iVar6 = 1;
	0002e4f8:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
293: iVar6 = 0;
	0002e4ff:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
295: u_number_value = iVar4 - iVar6;
	0002e504:SUB dword ptr [RBP + -0x670],EAX
END_OF_LINE
----------------------------------------------
296: digits = 2;
	0002e50a:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
297: negative_number = tp->tm_year < -0x76c;
	0002e51b:MOV EAX,dword ptr [RAX + 0x14]
	0002e51e:CMP EAX,0xfffff894
	0002e523:SETL AL
END_OF_LINE
----------------------------------------------
298: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
300: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
301: case 'D':
	0002e54f:CMP dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
302: if (modifier == 0) {
	0002e54f:CMP dword ptr [RBP + -0x6b0],0x0
	0002e556:JNZ 0x0002ff7c
END_OF_LINE
----------------------------------------------
303: subfmt = "%m/%d/%y";
	0002e563:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
304: goto LAB_0002e048;
	0002e048:MOVZX ESI,byte ptr [RBP + -0x6bb]
END_OF_LINE
----------------------------------------------
307: case 'F':
	0002ef27:CMP dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
308: if (modifier == 0) {
	0002ef27:CMP dword ptr [RBP + -0x6b0],0x0
	0002ef2e:JNZ 0x0002ff85
END_OF_LINE
----------------------------------------------
309: subfmt = "%Y-%m-%d";
	0002ef3b:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
310: goto LAB_0002e048;
	0002e048:MOVZX ESI,byte ptr [RBP + -0x6bb]
END_OF_LINE
----------------------------------------------
313: case 'G':
	0002f64c:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
314: case 'V':
	0002f64c:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
315: case 'g':
	0002f64c:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
316: if (modifier != 0x45) {
	0002f64c:CMP dword ptr [RBP + -0x6b0],0x45
	0002f653:JZ 0x0002ffa6
END_OF_LINE
----------------------------------------------
317: if (tp->tm_year < 0) {
	0002f66a:MOV EAX,dword ptr [RAX + 0x14]
	0002f66d:TEST EAX,EAX
	0002f66f:JNS 0x0002f678
END_OF_LINE
----------------------------------------------
318: iVar4 = 300;
	0002f671:MOV EAX,0x12c
END_OF_LINE
----------------------------------------------
321: iVar4 = -100;
	0002f678:MOV EAX,0xffffff9c
END_OF_LINE
----------------------------------------------
323: uVar5 = iVar4 + tp->tm_year;
	0002f660:MOV EDX,dword ptr [RAX + 0x14]
	0002f663:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f66a:MOV EAX,dword ptr [RAX + 0x14]
	0002f66d:TEST EAX,EAX
	0002f66f:JNS 0x0002f678
	0002f671:MOV EAX,0x12c
	0002f676:JMP 0x0002f67d
	0002f678:MOV EAX,0xffffff9c
	0002f67d:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
324: year_adjust = 0;
	0002f685:MOV dword ptr [RBP + -0x690],0x0
END_OF_LINE
----------------------------------------------
325: days = iso_week_days(tp->tm_yday,tp->tm_wday);
	0002f696:MOV EDX,dword ptr [RAX + 0x18]
	0002f699:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f6a0:MOV EAX,dword ptr [RAX + 0x1c]
	0002f6a3:MOV ESI,EDX
	0002f6a5:MOV EDI,EAX
	0002f6a7:CALL 0x0002d97c
END_OF_LINE
----------------------------------------------
326: if (days < 0) {
	0002f6b2:CMP dword ptr [RBP + -0x68c],0x0
	0002f6b9:JNS 0x0002f76f
END_OF_LINE
----------------------------------------------
327: year_adjust = -1;
	0002f6bf:MOV dword ptr [RBP + -0x690],0xffffffff
END_OF_LINE
----------------------------------------------
328: if (((uVar5 - 1 & 3) == 0) &&
	0002f6e3:SUB EAX,0x1
	0002f6e6:AND EAX,0x3
	0002f6e9:TEST EAX,EAX
	0002f6eb:JNZ 0x0002f74f
	0002f6ed:MOV EAX,dword ptr [RBP + -0x67c]
	0002f6f3:LEA EDX,[RAX + -0x1]
	0002f6f6:MOVSXD RAX,EDX
	0002f6f9:IMUL RAX,RAX,0x51eb851f
	0002f700:SHR RAX,0x20
	0002f704:SAR EAX,0x5
	0002f707:MOV EDI,EDX
	0002f709:SAR EDI,0x1f
	0002f70c:SUB EAX,EDI
	0002f70e:IMUL EDI,EAX,0x64
	0002f711:MOV EAX,EDX
	0002f713:SUB EAX,EDI
	0002f715:TEST EAX,EAX
	0002f717:JNZ 0x0002f748
	0002f719:MOV EAX,dword ptr [RBP + -0x67c]
	0002f71f:LEA EDX,[RAX + -0x1]
	0002f722:MOVSXD RAX,EDX
	0002f725:IMUL RAX,RAX,0x51eb851f
	0002f72c:SHR RAX,0x20
	0002f730:SAR EAX,0x7
	0002f733:MOV EDI,EDX
	0002f735:SAR EDI,0x1f
	0002f738:SUB EAX,EDI
	0002f73a:IMUL EDI,EAX,0x190
	0002f740:MOV EAX,EDX
	0002f742:SUB EAX,EDI
	0002f744:TEST EAX,EAX
	0002f746:JNZ 0x0002f74f
END_OF_LINE
----------------------------------------------
329: (((int)(uVar5 - 1) % 100 != 0 || ((int)(uVar5 - 1) % 400 == 0)))) {
	0002f6f3:LEA EDX,[RAX + -0x1]
	0002f6f6:MOVSXD RAX,EDX
	0002f6f9:IMUL RAX,RAX,0x51eb851f
	0002f700:SHR RAX,0x20
	0002f704:SAR EAX,0x5
	0002f707:MOV EDI,EDX
	0002f709:SAR EDI,0x1f
	0002f70c:SUB EAX,EDI
	0002f70e:IMUL EDI,EAX,0x64
	0002f711:MOV EAX,EDX
	0002f713:SUB EAX,EDI
	0002f715:TEST EAX,EAX
	0002f717:JNZ 0x0002f748
	0002f719:MOV EAX,dword ptr [RBP + -0x67c]
	0002f71f:LEA EDX,[RAX + -0x1]
	0002f722:MOVSXD RAX,EDX
	0002f725:IMUL RAX,RAX,0x51eb851f
	0002f72c:SHR RAX,0x20
	0002f730:SAR EAX,0x7
	0002f733:MOV EDI,EDX
	0002f735:SAR EDI,0x1f
	0002f738:SUB EAX,EDI
	0002f73a:IMUL EDI,EAX,0x190
	0002f740:MOV EAX,EDX
	0002f742:SUB EAX,EDI
	0002f744:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
330: iVar4 = 1;
	0002f748:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
333: iVar4 = 0;
	0002f74f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
335: days = iso_week_days(iVar4 + 0x16d + tp->tm_yday,tp->tm_wday);
	0002f6d0:MOV ECX,dword ptr [RAX + 0x18]
	0002f6d3:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f6da:MOV ESI,dword ptr [RAX + 0x1c]
	0002f6dd:MOV EAX,dword ptr [RBP + -0x67c]
	0002f6e3:SUB EAX,0x1
	0002f6e6:AND EAX,0x3
	0002f6e9:TEST EAX,EAX
	0002f6eb:JNZ 0x0002f74f
	0002f6ed:MOV EAX,dword ptr [RBP + -0x67c]
	0002f6f3:LEA EDX,[RAX + -0x1]
	0002f6f6:MOVSXD RAX,EDX
	0002f6f9:IMUL RAX,RAX,0x51eb851f
	0002f700:SHR RAX,0x20
	0002f704:SAR EAX,0x5
	0002f707:MOV EDI,EDX
	0002f709:SAR EDI,0x1f
	0002f70c:SUB EAX,EDI
	0002f70e:IMUL EDI,EAX,0x64
	0002f711:MOV EAX,EDX
	0002f713:SUB EAX,EDI
	0002f715:TEST EAX,EAX
	0002f717:JNZ 0x0002f748
	0002f719:MOV EAX,dword ptr [RBP + -0x67c]
	0002f71f:LEA EDX,[RAX + -0x1]
	0002f722:MOVSXD RAX,EDX
	0002f725:IMUL RAX,RAX,0x51eb851f
	0002f72c:SHR RAX,0x20
	0002f730:SAR EAX,0x7
	0002f733:MOV EDI,EDX
	0002f735:SAR EDI,0x1f
	0002f738:SUB EAX,EDI
	0002f73a:IMUL EDI,EAX,0x190
	0002f740:MOV EAX,EDX
	0002f742:SUB EAX,EDI
	0002f744:TEST EAX,EAX
	0002f746:JNZ 0x0002f74f
	0002f748:MOV EAX,0x1
	0002f74d:JMP 0x0002f754
	0002f74f:MOV EAX,0x0
	0002f754:ADD EAX,0x16d
	0002f759:ADD EAX,ESI
	0002f75b:MOV ESI,ECX
	0002f75d:MOV EDI,EAX
	0002f75f:CALL 0x0002d97c
END_OF_LINE
----------------------------------------------
338: if (((uVar5 & 3) == 0) && (((int)uVar5 % 100 != 0 || ((int)uVar5 % 400 == 0)))) {
	0002f789:AND EAX,0x3
	0002f78c:TEST EAX,EAX
	0002f78e:JNZ 0x0002f7ec
	0002f790:MOV EDX,dword ptr [RBP + -0x67c]
	0002f796:MOVSXD RAX,EDX
	0002f799:IMUL RAX,RAX,0x51eb851f
	0002f7a0:SHR RAX,0x20
	0002f7a4:SAR EAX,0x5
	0002f7a7:MOV EDI,EDX
	0002f7a9:SAR EDI,0x1f
	0002f7ac:SUB EAX,EDI
	0002f7ae:IMUL EDI,EAX,0x64
	0002f7b1:MOV EAX,EDX
	0002f7b3:SUB EAX,EDI
	0002f7b5:TEST EAX,EAX
	0002f7b7:JNZ 0x0002f7e5
	0002f7b9:MOV EDX,dword ptr [RBP + -0x67c]
	0002f7bf:MOVSXD RAX,EDX
	0002f7c2:IMUL RAX,RAX,0x51eb851f
	0002f7c9:SHR RAX,0x20
	0002f7cd:SAR EAX,0x7
	0002f7d0:MOV EDI,EDX
	0002f7d2:SAR EDI,0x1f
	0002f7d5:SUB EAX,EDI
	0002f7d7:IMUL EDI,EAX,0x190
	0002f7dd:MOV EAX,EDX
	0002f7df:SUB EAX,EDI
	0002f7e1:TEST EAX,EAX
	0002f7e3:JNZ 0x0002f7ec
END_OF_LINE
----------------------------------------------
339: iVar4 = 1;
	0002f7e5:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
342: iVar4 = 0;
	0002f7ec:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
344: iVar4 = iso_week_days(tp->tm_yday - (iVar4 + 0x16d),tp->tm_wday);
	0002f776:MOV ECX,dword ptr [RAX + 0x18]
	0002f779:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f780:MOV ESI,dword ptr [RAX + 0x1c]
	0002f783:MOV EAX,dword ptr [RBP + -0x67c]
	0002f789:AND EAX,0x3
	0002f78c:TEST EAX,EAX
	0002f78e:JNZ 0x0002f7ec
	0002f790:MOV EDX,dword ptr [RBP + -0x67c]
	0002f796:MOVSXD RAX,EDX
	0002f799:IMUL RAX,RAX,0x51eb851f
	0002f7a0:SHR RAX,0x20
	0002f7a4:SAR EAX,0x5
	0002f7a7:MOV EDI,EDX
	0002f7a9:SAR EDI,0x1f
	0002f7ac:SUB EAX,EDI
	0002f7ae:IMUL EDI,EAX,0x64
	0002f7b1:MOV EAX,EDX
	0002f7b3:SUB EAX,EDI
	0002f7b5:TEST EAX,EAX
	0002f7b7:JNZ 0x0002f7e5
	0002f7b9:MOV EDX,dword ptr [RBP + -0x67c]
	0002f7bf:MOVSXD RAX,EDX
	0002f7c2:IMUL RAX,RAX,0x51eb851f
	0002f7c9:SHR RAX,0x20
	0002f7cd:SAR EAX,0x7
	0002f7d0:MOV EDI,EDX
	0002f7d2:SAR EDI,0x1f
	0002f7d5:SUB EAX,EDI
	0002f7d7:IMUL EDI,EAX,0x190
	0002f7dd:MOV EAX,EDX
	0002f7df:SUB EAX,EDI
	0002f7e1:TEST EAX,EAX
	0002f7e3:JNZ 0x0002f7ec
	0002f7e5:MOV EAX,0x1
	0002f7ea:JMP 0x0002f7f1
	0002f7ec:MOV EAX,0x0
	0002f7f1:LEA EDX,[RAX + 0x16d]
	0002f7f7:MOV EAX,ESI
	0002f7f9:SUB EAX,EDX
	0002f7fb:MOV ESI,ECX
	0002f7fd:MOV EDI,EAX
	0002f7ff:CALL 0x0002d97c
END_OF_LINE
----------------------------------------------
345: if (-1 < iVar4) {
	0002f80a:CMP dword ptr [RBP + -0x678],0x0
	0002f811:JS 0x0002f829
END_OF_LINE
----------------------------------------------
346: year_adjust = 1;
	0002f813:MOV dword ptr [RBP + -0x690],0x1
END_OF_LINE
----------------------------------------------
347: days = iVar4;
	0002f823:MOV dword ptr [RBP + -0x68c],EAX
END_OF_LINE
----------------------------------------------
350: if (*f != 'G') {
	0002f830:MOVZX EAX,byte ptr [RAX]
	0002f833:MOVSX EAX,AL
	0002f836:CMP EAX,0x47
	0002f839:JZ 0x0002f8fa
END_OF_LINE
----------------------------------------------
351: if (*f == 'g') {
	0002f830:MOVZX EAX,byte ptr [RAX]
	0002f833:MOVSX EAX,AL
	0002f836:CMP EAX,0x47
	0002f839:JZ 0x0002f8fa
	0002f83f:CMP EAX,0x67
	0002f842:JNZ 0x0002f948
END_OF_LINE
----------------------------------------------
352: number_value = (year_adjust + tp->tm_year % 100) % 100;
	0002f84f:MOV EAX,dword ptr [RAX + 0x14]
	0002f852:MOVSXD RDX,EAX
	0002f855:IMUL RDX,RDX,0x51eb851f
	0002f85c:SHR RDX,0x20
	0002f860:SAR EDX,0x5
	0002f863:MOV ECX,EAX
	0002f865:SAR ECX,0x1f
	0002f868:SUB EDX,ECX
	0002f86a:IMUL ECX,EDX,0x64
	0002f86d:SUB EAX,ECX
	0002f86f:MOV EDX,EAX
	0002f871:MOV EAX,dword ptr [RBP + -0x690]
	0002f877:ADD EAX,EDX
	0002f879:MOVSXD RDX,EAX
	0002f87c:IMUL RDX,RDX,0x51eb851f
	0002f883:SHR RDX,0x20
	0002f887:SAR EDX,0x5
	0002f88a:MOV ECX,EAX
	0002f88c:SAR ECX,0x1f
	0002f88f:SUB EDX,ECX
	0002f891:MOV dword ptr [RBP + -0x674],EDX
	0002f897:MOV EDX,dword ptr [RBP + -0x674]
	0002f89d:IMUL EDX,EDX,0x64
	0002f8a0:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
353: digits = 2;
	0002f8a8:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
354: if (number_value < 0) {
	0002f8b2:CMP dword ptr [RBP + -0x674],0x0
	0002f8b9:JNS 0x0002f8e9
END_OF_LINE
----------------------------------------------
355: if (tp->tm_year < -0x76c - year_adjust) {
	0002f8c2:MOV EDX,dword ptr [RAX + 0x14]
	0002f8c5:MOV EAX,0xfffff894
	0002f8ca:SUB EAX,dword ptr [RBP + -0x690]
	0002f8d0:CMP EDX,EAX
	0002f8d2:JGE 0x0002f8de
END_OF_LINE
----------------------------------------------
356: number_value = -number_value;
	0002f8da:NEG EAX
END_OF_LINE
----------------------------------------------
359: number_value = number_value + 100;
	0002f8e4:ADD EAX,0x64
END_OF_LINE
----------------------------------------------
364: digits = 2;
	0002f948:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
365: number_value = days / 7 + 1;
	0002f968:SAR EDX,0x2
	0002f96b:SAR EAX,0x1f
	0002f96e:MOV ECX,EAX
	0002f970:MOV EAX,EDX
	0002f972:SUB EAX,ECX
	0002f974:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
367: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
369: digits = 4;
	0002f8fa:MOV dword ptr [RBP + -0x6ac],0x4
END_OF_LINE
----------------------------------------------
370: negative_number = tp->tm_year < -0x76c - year_adjust;
	0002f90b:MOV EDX,dword ptr [RAX + 0x14]
	0002f90e:MOV EAX,0xfffff894
	0002f913:SUB EAX,dword ptr [RBP + -0x690]
	0002f919:CMP EDX,EAX
	0002f91b:SETL AL
END_OF_LINE
----------------------------------------------
371: u_number_value = year_adjust + tp->tm_year + 0x76c;
	0002f92b:MOV EAX,dword ptr [RAX + 0x14]
	0002f92e:MOV EDX,EAX
	0002f930:MOV EAX,dword ptr [RBP + -0x690]
	0002f936:ADD EAX,EDX
	0002f938:ADD EAX,0x76c
END_OF_LINE
----------------------------------------------
372: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
375: case 'H':
	0002ef47:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
376: if (modifier != 0x45) {
	0002ef47:CMP dword ptr [RBP + -0x6b0],0x45
	0002ef4e:JZ 0x0002ff88
END_OF_LINE
----------------------------------------------
377: digits = 2;
	0002ef54:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
378: number_value = tp->tm_hour;
	0002ef65:MOV EAX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
379: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
382: case 'I':
	0002ef73:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
383: if (modifier != 0x45) {
	0002ef73:CMP dword ptr [RBP + -0x6b0],0x45
	0002ef7a:JZ 0x0002ff8b
END_OF_LINE
----------------------------------------------
384: digits = 2;
	0002ef80:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
385: number_value = hour12;
	0002ef90:MOV dword ptr [RBP + -0x6a8],EAX
END_OF_LINE
----------------------------------------------
386: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
389: case 'M':
	0002f034:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
390: if (modifier != 0x45) {
	0002f034:CMP dword ptr [RBP + -0x6b0],0x45
	0002f03b:JZ 0x0002ff97
END_OF_LINE
----------------------------------------------
391: digits = 2;
	0002f041:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
392: number_value = tp->tm_min;
	0002f052:MOV EAX,dword ptr [RAX + 0x4]
END_OF_LINE
----------------------------------------------
393: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
396: case 'N':
	0002f0a5:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
397: if (modifier != 0x45) {
	0002f0a5:CMP dword ptr [RBP + -0x6b0],0x45
	0002f0ac:JZ 0x0002ff9d
END_OF_LINE
----------------------------------------------
398: number_value = ns;
	0002f0b5:MOV dword ptr [RBP + -0x6a8],EAX
END_OF_LINE
----------------------------------------------
399: if (width == -1) {
	0002f0bb:CMP dword ptr [RBP + -0x69c],-0x1
	0002f0c2:JNZ 0x0002f0d0
END_OF_LINE
----------------------------------------------
400: width = 9;
	0002f0c4:MOV dword ptr [RBP + -0x69c],0x9
END_OF_LINE
----------------------------------------------
403: for (j = width; j < 9; j = j + 1) {
	0002f0d6:MOV dword ptr [RBP + -0x694],EAX
	0002f0dc:JMP 0x0002f10b
	0002f0de:MOV EAX,dword ptr [RBP + -0x6a8]
	0002f0e4:MOVSXD RDX,EAX
	0002f0e7:IMUL RDX,RDX,0x66666667
	0002f0ee:SHR RDX,0x20
	0002f0f2:SAR EDX,0x2
	0002f0f5:SAR EAX,0x1f
	0002f0f8:MOV ECX,EAX
	0002f0fa:MOV EAX,EDX
	0002f0fc:SUB EAX,ECX
	0002f0fe:MOV dword ptr [RBP + -0x6a8],EAX
	0002f104:ADD dword ptr [RBP + -0x694],0x1
	0002f10b:CMP dword ptr [RBP + -0x694],0x8
	0002f112:JLE 0x0002f0de
END_OF_LINE
----------------------------------------------
404: number_value = number_value / 10;
	0002f0f2:SAR EDX,0x2
END_OF_LINE
----------------------------------------------
407: digits = width;
	0002f114:MOV EAX,dword ptr [RBP + -0x69c]
END_OF_LINE
----------------------------------------------
408: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
411: case 'P':
	0002f24f:MOV byte ptr [RBP + -0x6bc],0x1
END_OF_LINE
----------------------------------------------
412: bVar2 = true;
	0002f24f:MOV byte ptr [RBP + -0x6bc],0x1
END_OF_LINE
----------------------------------------------
413: format_char._0_1_ = 'p';
	0002f256:MOV dword ptr [RBP + -0x698],0x70
END_OF_LINE
----------------------------------------------
414: case 'p':
	0002f260:CMP byte ptr [RBP + -0x6ba],0x0
END_OF_LINE
----------------------------------------------
415: if (bVar1) {
	0002f267:JZ 0x0002e21f
END_OF_LINE
----------------------------------------------
416: to_uppcase = false;
	0002f26d:MOV byte ptr [RBP + -0x6bb],0x0
END_OF_LINE
----------------------------------------------
417: bVar2 = true;
	0002f274:MOV byte ptr [RBP + -0x6bc],0x1
END_OF_LINE
----------------------------------------------
419: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
420: case 'R':
	0002f2be:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
421: subfmt = "%H:%M";
	0002f2be:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
422: goto LAB_0002e048;
	0002e048:MOVZX ESI,byte ptr [RBP + -0x6bb]
END_OF_LINE
----------------------------------------------
423: case 'S':
	0002f2ca:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
424: if (modifier != 0x45) {
	0002f2ca:CMP dword ptr [RBP + -0x6b0],0x45
	0002f2d1:JZ 0x0002ffa0
END_OF_LINE
----------------------------------------------
425: digits = 2;
	0002f2d7:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
426: number_value = tp->tm_sec;
	0002f2e8:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
427: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
430: case 'T':
	0002f473:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
431: subfmt = "%H:%M:%S";
	0002f473:MOV qword ptr [RBP + -0x638],RAX
END_OF_LINE
----------------------------------------------
432: LAB_0002e048:
	0002e048:MOVZX ESI,byte ptr [RBP + -0x6bb]
END_OF_LINE
----------------------------------------------
433: sVar7 = __strftime_internal((char *)0x0,0xffffffffffffffff,subfmt,tp,to_uppcase,tzset_called,tz,
	0002e086:CALL 0x0002da49
END_OF_LINE
----------------------------------------------
434: ns);
	0002e086:CALL 0x0002da49
END_OF_LINE
----------------------------------------------
435: iVar4 = width;
	0002e0b1:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
436: if (width < 0) {
	0002e0af:TEST EAX,EAX
	0002e0b1:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
437: iVar4 = 0;
	0002e0b1:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
439: uVar8 = (ulong)iVar4;
	0002e0b4:CDQE
END_OF_LINE
----------------------------------------------
440: uVar11 = uVar8;
	0002e0ce:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
441: if (uVar8 <= sVar7) {
	0002e0cb:CMP RDX,RAX
	0002e0ce:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
442: uVar11 = sVar7;
	0002e0ce:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
444: if (maxsize - i <= uVar11) {
	0002e0e0:SUB RAX,qword ptr [RBP + -0x650]
	0002e0e7:CMP qword ptr [RBP + -0x598],RAX
	0002e0ee:JC 0x0002e0fa
END_OF_LINE
----------------------------------------------
445: i = 0;
	0002e0f0:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
446: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
448: if (p != (char *)0x0) {
	0002e0fa:CMP qword ptr [RBP + -0x648],0x0
	0002e102:JZ 0x0002e1f1
END_OF_LINE
----------------------------------------------
449: if (sVar7 < uVar8) {
	0002e11c:CMP RAX,qword ptr [RBP + -0x5a0]
	0002e123:JNC 0x0002e198
END_OF_LINE
----------------------------------------------
450: sVar13 = (long)width - sVar7;
	0002e12b:CDQE
	0002e12d:SUB RAX,qword ptr [RBP + -0x5a8]
END_OF_LINE
----------------------------------------------
451: if (pad == 0x30) {
	0002e13b:CMP dword ptr [RBP + -0x6b4],0x30
	0002e142:JNZ 0x0002e16f
END_OF_LINE
----------------------------------------------
452: memset(p,0x30,sVar13);
	0002e15a:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
453: p = p + sVar13;
	0002e166:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
456: memset(p,0x20,sVar13);
	0002e185:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
457: p = p + sVar13;
	0002e191:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
460: __strftime_internal(p,maxsize - i,subfmt,tp,to_uppcase,tzset_called,tz,ns);
	0002e1a7:SUB RAX,qword ptr [RBP + -0x650]
	0002e1ae:MOV RSI,RAX
	0002e1b1:MOV R9,qword ptr [RBP + -0x6f0]
	0002e1b8:MOV RCX,qword ptr [RBP + -0x6e0]
	0002e1bf:MOV RDX,qword ptr [RBP + -0x638]
	0002e1c6:MOV RAX,qword ptr [RBP + -0x648]
	0002e1cd:MOV EDI,dword ptr [RBP + 0x18]
	0002e1d0:PUSH RDI
	0002e1d1:PUSH qword ptr [RBP + -0x6f8]
	0002e1d7:MOV RDI,RAX
	0002e1da:CALL 0x0002da49
END_OF_LINE
----------------------------------------------
461: p = p + sVar7;
	0002e1ea:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
463: i = i + uVar11;
	0002e1f8:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
464: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
465: case 'U':
	0002f5f3:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
466: if (modifier != 0x45) {
	0002f5f3:CMP dword ptr [RBP + -0x6b0],0x45
	0002f5fa:JZ 0x0002ffa3
END_OF_LINE
----------------------------------------------
467: digits = 2;
	0002f600:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
468: number_value = ((tp->tm_yday - tp->tm_wday) + 7) / 7;
	0002f611:MOV EDX,dword ptr [RAX + 0x1c]
	0002f614:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f61b:MOV ECX,dword ptr [RAX + 0x18]
	0002f61e:MOV EAX,EDX
	0002f620:SUB EAX,ECX
	0002f622:ADD EAX,0x7
	0002f625:MOVSXD RDX,EAX
	0002f628:IMUL RDX,RDX,-0x6db6db6d
	0002f62f:SHR RDX,0x20
	0002f633:ADD EDX,EAX
	0002f635:SAR EDX,0x2
END_OF_LINE
----------------------------------------------
469: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
472: case 'W':
	0002f982:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
473: if (modifier != 0x45) {
	0002f982:CMP dword ptr [RBP + -0x6b0],0x45
	0002f989:JZ 0x0002ffa9
END_OF_LINE
----------------------------------------------
474: digits = 2;
	0002f98f:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
475: number_value = ((tp->tm_yday - (tp->tm_wday + 6) % 7) + 7) / 7;
	0002f9a0:MOV ESI,dword ptr [RAX + 0x1c]
	0002f9a3:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f9aa:MOV EAX,dword ptr [RAX + 0x18]
	0002f9ad:ADD EAX,0x6
	0002f9b0:MOVSXD RDX,EAX
	0002f9b3:IMUL RDX,RDX,-0x6db6db6d
	0002f9ba:SHR RDX,0x20
	0002f9be:ADD EDX,EAX
	0002f9c0:SAR EDX,0x2
	0002f9c3:MOV EDI,EAX
	0002f9c5:SAR EDI,0x1f
	0002f9c8:MOV ECX,EDX
	0002f9ca:SUB ECX,EDI
	0002f9cc:MOV EDX,ECX
	0002f9ce:SHL EDX,0x3
	0002f9d1:SUB EDX,ECX
	0002f9d3:SUB EAX,EDX
	0002f9d5:MOV ECX,EAX
	0002f9d7:MOV EAX,ESI
	0002f9d9:SUB EAX,ECX
	0002f9db:ADD EAX,0x7
	0002f9de:MOVSXD RDX,EAX
	0002f9e1:IMUL RDX,RDX,-0x6db6db6d
	0002f9e8:SHR RDX,0x20
	0002f9ec:ADD EDX,EAX
	0002f9ee:SAR EDX,0x2
END_OF_LINE
----------------------------------------------
476: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
480: goto joined_r0x0002e544;
	0002e544:JNZ 0x0002e219
END_OF_LINE
----------------------------------------------
481: case 'Y':
	0002fa31:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
482: if (modifier == 0x45) goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
	0002e230:MOV qword ptr [RBP + -0x620],RAX
	0002e237:MOV RAX,qword ptr [RBP + -0x620]
	0002e23e:LEA RDX,[RAX + 0x1]
	0002e242:MOV qword ptr [RBP + -0x620],RDX
	0002e249:MOV byte ptr [RAX],0x20
	0002e24c:MOV RAX,qword ptr [RBP + -0x620]
	0002e253:LEA RDX,[RAX + 0x1]
	0002e257:MOV qword ptr [RBP + -0x620],RDX
	0002e25e:MOV byte ptr [RAX],0x25
	0002e261:CMP dword ptr [RBP + -0x6b0],0x0
	0002e268:JZ 0x0002e284
	0002e26a:MOV RAX,qword ptr [RBP + -0x620]
	0002e271:LEA RDX,[RAX + 0x1]
	0002e275:MOV qword ptr [RBP + -0x620],RDX
	0002e27c:MOV EDX,dword ptr [RBP + -0x6b0]
	0002e282:MOV byte ptr [RAX],DL
	0002e284:MOV RAX,qword ptr [RBP + -0x620]
	0002e28b:LEA RDX,[RAX + 0x1]
	0002e28f:MOV qword ptr [RBP + -0x620],RDX
	0002e296:MOV EDX,dword ptr [RBP + -0x698]
	0002e29c:MOV byte ptr [RAX],DL
	0002e29e:MOV RAX,qword ptr [RBP + -0x620]
	0002e2a5:MOV byte ptr [RAX],0x0
	0002e2a8:MOV RCX,qword ptr [RBP + -0x6e0]
	0002e2af:LEA RDX,[RBP + -0x425]
	0002e2b6:LEA RAX,[RBP + -0x420]
	0002e2bd:MOV ESI,0x400
	0002e2c2:MOV RDI,RAX
	0002e2c5:CALL 0x00005ef0
	0002e2ca:MOV qword ptr [RBP + -0x4e8],RAX
	0002e2d1:CMP qword ptr [RBP + -0x4e8],0x0
	0002e2d9:JZ 0x000301b6
	0002e2df:MOV RAX,qword ptr [RBP + -0x4e8]
	0002e2e6:SUB RAX,0x1
	0002e2ea:MOV qword ptr [RBP + -0x4e0],RAX
	0002e2f1:MOV EAX,dword ptr [RBP + -0x69c]
	0002e2f7:MOV EDX,0x0
	0002e2fc:TEST EAX,EAX
	0002e2fe:CMOVS EAX,EDX
	0002e301:CDQE
	0002e303:MOV qword ptr [RBP + -0x4d8],RAX
	0002e30a:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e311:MOV RAX,qword ptr [RBP + -0x4d8]
	0002e318:CMP RDX,RAX
	0002e31b:CMOVNC RAX,RDX
	0002e31f:MOV qword ptr [RBP + -0x4d0],RAX
	0002e326:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e32d:SUB RAX,qword ptr [RBP + -0x650]
	0002e334:CMP qword ptr [RBP + -0x4d0],RAX
	0002e33b:JC 0x0002e347
	0002e33d:MOV EAX,0x0
	0002e342:JMP 0x000301f9
	0002e347:CMP qword ptr [RBP + -0x648],0x0
	0002e34f:JZ 0x0002e475
	0002e355:CMP dword ptr [RBP + -0x6ac],0x0
	0002e35c:JNZ 0x0002e3e5
	0002e362:MOV RAX,qword ptr [RBP + -0x4e0]
	0002e369:CMP RAX,qword ptr [RBP + -0x4d8]
	0002e370:JNC 0x0002e3e5
	0002e372:MOV EAX,dword ptr [RBP + -0x69c]
	0002e378:CDQE
	0002e37a:SUB RAX,qword ptr [RBP + -0x4e0]
	0002e381:MOV qword ptr [RBP + -0x4c8],RAX
	0002e388:CMP dword ptr [RBP + -0x6b4],0x30
	0002e38f:JNZ 0x0002e3bc
	0002e391:MOV RDX,qword ptr [RBP + -0x4c8]
	0002e398:MOV RAX,qword ptr [RBP + -0x648]
	0002e39f:MOV ESI,0x30
	0002e3a4:MOV RDI,RAX
	0002e3a7:CALL 0x00005c10
	0002e3ac:MOV RAX,qword ptr [RBP + -0x4c8]
	0002e3b3:ADD qword ptr [RBP + -0x648],RAX
	0002e3ba:JMP 0x0002e3e5
	0002e3bc:MOV RDX,qword ptr [RBP + -0x4c8]
	0002e3c3:MOV RAX,qword ptr [RBP + -0x648]
	0002e3ca:MOV ESI,0x20
	0002e3cf:MOV RDI,RAX
	0002e3d2:CALL 0x00005c10
	0002e3d7:MOV RAX,qword ptr [RBP + -0x4c8]
	0002e3de:ADD qword ptr [RBP + -0x648],RAX
	0002e3e5:CMP byte ptr [RBP + -0x6bc],0x0
	0002e3ec:JZ 0x0002e414
	0002e3ee:LEA RAX,[RBP + -0x420]
	0002e3f5:ADD RAX,0x1
	0002e3f9:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e400:MOV RCX,qword ptr [RBP + -0x648]
	0002e407:MOV RSI,RAX
	0002e40a:MOV RDI,RCX
	0002e40d:CALL 0x0002d8cc
	0002e412:JMP 0x0002e467
	0002e414:CMP byte ptr [RBP + -0x6bb],0x0
	0002e41b:JZ 0x0002e443
	0002e41d:LEA RAX,[RBP + -0x420]
	0002e424:ADD RAX,0x1
	0002e428:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e42f:MOV RCX,qword ptr [RBP + -0x648]
	0002e436:MOV RSI,RAX
	0002e439:MOV RDI,RCX
	0002e43c:CALL 0x0002d924
	0002e441:JMP 0x0002e467
	0002e443:LEA RAX,[RBP + -0x420]
	0002e44a:ADD RAX,0x1
	0002e44e:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e455:MOV RCX,qword ptr [RBP + -0x648]
	0002e45c:MOV RSI,RAX
	0002e45f:MOV RDI,RCX
	0002e462:CALL 0x00005d90
	0002e467:MOV RAX,qword ptr [RBP + -0x4e0]
	0002e46e:ADD qword ptr [RBP + -0x648],RAX
	0002e475:MOV RAX,qword ptr [RBP + -0x4d0]
	0002e47c:ADD qword ptr [RBP + -0x650],RAX
	0002e483:JMP 0x000301b6
	0002e488:CMP dword ptr [RBP + -0x6b0],0x45
	0002e48f:JZ 0x0002e216
	0002e495:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e49c:MOV EAX,dword ptr [RAX + 0x14]
	0002e49f:MOVSXD RDX,EAX
	0002e4a2:IMUL RDX,RDX,0x51eb851f
	0002e4a9:SHR RDX,0x20
	0002e4ad:SAR EDX,0x5
	0002e4b0:SAR EAX,0x1f
	0002e4b3:MOV ECX,EAX
	0002e4b5:MOV EAX,EDX
	0002e4b7:SUB EAX,ECX
	0002e4b9:ADD EAX,0x13
	0002e4bc:MOV dword ptr [RBP + -0x670],EAX
	0002e4c2:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e4c9:MOV EDX,dword ptr [RAX + 0x14]
	0002e4cc:MOVSXD RAX,EDX
	0002e4cf:IMUL RAX,RAX,0x51eb851f
	0002e4d6:SHR RAX,0x20
	0002e4da:SAR EAX,0x5
	0002e4dd:MOV ECX,EDX
	0002e4df:SAR ECX,0x1f
	0002e4e2:SUB EAX,ECX
	0002e4e4:IMUL ECX,EAX,0x64
	0002e4e7:MOV EAX,EDX
	0002e4e9:SUB EAX,ECX
	0002e4eb:TEST EAX,EAX
	0002e4ed:JNS 0x0002e4ff
	0002e4ef:CMP dword ptr [RBP + -0x670],0x0
	0002e4f6:JLE 0x0002e4ff
	0002e4f8:MOV EAX,0x1
	0002e4fd:JMP 0x0002e504
	0002e4ff:MOV EAX,0x0
	0002e504:SUB dword ptr [RBP + -0x670],EAX
	0002e50a:MOV dword ptr [RBP + -0x6ac],0x2
	0002e514:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e51b:MOV EAX,dword ptr [RAX + 0x14]
	0002e51e:CMP EAX,0xfffff894
	0002e523:SETL AL
	0002e526:MOV byte ptr [RBP + -0x6be],AL
	0002e52c:MOV EAX,dword ptr [RBP + -0x670]
	0002e532:MOV dword ptr [RBP + -0x6a4],EAX
	0002e538:JMP 0x0002e604
	0002e53d:CMP dword ptr [RBP + -0x6b0],0x4f
	0002e544:JNZ 0x0002e219
	0002e54a:JMP 0x0002ffb6
	0002e54f:CMP dword ptr [RBP + -0x6b0],0x0
	0002e556:JNZ 0x0002ff7c
	0002e55c:LEA RAX,[0x35fd5]
	0002e563:MOV qword ptr [RBP + -0x638],RAX
	0002e56a:JMP 0x0002e048
	0002e56f:CMP dword ptr [RBP + -0x6b0],0x45
	0002e576:JZ 0x0002ff7f
	0002e57c:MOV dword ptr [RBP + -0x6ac],0x2
	0002e586:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e58d:MOV EAX,dword ptr [RAX + 0xc]
	0002e590:MOV dword ptr [RBP + -0x6a8],EAX
	0002e596:JMP 0x0002e5e9
	0002e598:CMP dword ptr [RBP + -0x6b0],0x45
	0002e59f:JZ 0x0002ff82
	0002e5a5:MOV dword ptr [RBP + -0x6ac],0x2
	0002e5af:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e5b6:MOV EAX,dword ptr [RAX + 0xc]
	0002e5b9:MOV dword ptr [RBP + -0x6a8],EAX
	0002e5bf:JMP 0x0002e5ca
	0002e5c1:MOV byte ptr [RBP + -0x6bd],0x1
	0002e5c8:JMP 0x0002e615
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
	0002e5d1:JZ 0x0002e5e8
	0002e5d3:CMP dword ptr [RBP + -0x6b4],0x2d
	0002e5da:JZ 0x0002e5e8
	0002e5dc:MOV dword ptr [RBP + -0x6b4],0x5f
	0002e5e6:JMP 0x0002e5e9
	0002e5e8:NOP
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
	0002e5ef:SHR EAX,0x1f
	0002e5f2:MOV byte ptr [RBP + -0x6be],AL
	0002e5f8:MOV EAX,dword ptr [RBP + -0x6a8]
	0002e5fe:MOV dword ptr [RBP + -0x6a4],EAX
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
	0002e60b:MOV dword ptr [RBP + -0x6a0],0x0
	0002e615:CMP dword ptr [RBP + -0x6b0],0x4f
	0002e61c:JNZ 0x0002e630
	0002e61e:MOVZX EAX,byte ptr [RBP + -0x6be]
	0002e625:XOR EAX,0x1
	0002e628:TEST AL,AL
	0002e62a:JNZ 0x0002e21c
	0002e630:LEA RAX,[RBP + -0x420]
	0002e637:ADD RAX,0x17
	0002e63b:MOV qword ptr [RBP + -0x630],RAX
	0002e642:CMP byte ptr [RBP + -0x6be],0x0
	0002e649:JZ 0x0002e651
	0002e64b:NEG dword ptr [RBP + -0x6a4]
	0002e651:MOV EAX,dword ptr [RBP + -0x6a0]
	0002e657:AND EAX,0x1
	0002e65a:TEST EAX,EAX
	0002e65c:JZ 0x0002e670
	0002e65e:SUB qword ptr [RBP + -0x630],0x1
	0002e666:MOV RAX,qword ptr [RBP + -0x630]
	0002e66d:MOV byte ptr [RAX],0x3a
	0002e670:SAR dword ptr [RBP + -0x6a0],0x1
	0002e676:MOV ECX,dword ptr [RBP + -0x6a4]
	0002e67c:MOV EDX,ECX
	0002e67e:MOV EAX,0xcccccccd
	0002e683:IMUL RAX,RDX
	0002e687:SHR RAX,0x20
	0002e68b:MOV EDX,EAX
	0002e68d:SHR EDX,0x3
	0002e690:MOV EAX,EDX
	0002e692:SHL EAX,0x2
	0002e695:ADD EAX,EDX
	0002e697:ADD EAX,EAX
	0002e699:SUB ECX,EAX
	0002e69b:MOV EDX,ECX
	0002e69d:MOV EAX,EDX
	0002e69f:ADD EAX,0x30
	0002e6a2:SUB qword ptr [RBP + -0x630],0x1
	0002e6aa:MOV EDX,EAX
	0002e6ac:MOV RAX,qword ptr [RBP + -0x630]
	0002e6b3:MOV byte ptr [RAX],DL
	0002e6b5:MOV EAX,dword ptr [RBP + -0x6a4]
	0002e6bb:MOV EDX,EAX
	0002e6bd:MOV EAX,0xcccccccd
	0002e6c2:IMUL RAX,RDX
	0002e6c6:SHR RAX,0x20
	0002e6ca:SHR EAX,0x3
	0002e6cd:MOV dword ptr [RBP + -0x6a4],EAX
	0002e6d3:CMP dword ptr [RBP + -0x6a4],0x0
	0002e6da:JNZ 0x0002e651
	0002e6e0:CMP dword ptr [RBP + -0x6a0],0x0
	0002e6e7:JNZ 0x0002e651
	0002e6ed:NOP
	0002e6ee:MOV EAX,dword ptr [RBP + -0x6ac]
	0002e6f4:CMP EAX,dword ptr [RBP + -0x69c]
	0002e6fa:JGE 0x0002e708
	0002e6fc:MOV EAX,dword ptr [RBP + -0x69c]
	0002e702:MOV dword ptr [RBP + -0x6ac],EAX
	0002e708:CMP byte ptr [RBP + -0x6be],0x0
	0002e70f:JZ 0x0002e718
	0002e711:MOV EAX,0x2d
	0002e716:JMP 0x0002e72d
	0002e718:CMP byte ptr [RBP + -0x6bd],0x0
	0002e71f:JZ 0x0002e728
	0002e721:MOV EAX,0x2b
	0002e726:JMP 0x0002e72d
	0002e728:MOV EAX,0x0
	0002e72d:MOV byte ptr [RBP + -0x6b9],AL
	0002e733:CMP dword ptr [RBP + -0x6b4],0x2d
	0002e73a:JNZ 0x0002e87d
	0002e740:CMP byte ptr [RBP + -0x6b9],0x0
	0002e747:JZ 0x0002ed83
	0002e74d:MOV qword ptr [RBP + -0x528],0x1
	0002e758:MOV EAX,dword ptr [RBP + -0x69c]
	0002e75e:MOV EDX,0x0
	0002e763:TEST EAX,EAX
	0002e765:CMOVS EAX,EDX
	0002e768:CDQE
	0002e76a:MOV qword ptr [RBP + -0x520],RAX
	0002e771:MOV RDX,qword ptr [RBP + -0x528]
	0002e778:MOV RAX,qword ptr [RBP + -0x520]
	0002e77f:CMP RDX,RAX
	0002e782:CMOVNC RAX,RDX
	0002e786:MOV qword ptr [RBP + -0x518],RAX
	0002e78d:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e794:SUB RAX,qword ptr [RBP + -0x650]
	0002e79b:CMP qword ptr [RBP + -0x518],RAX
	0002e7a2:JC 0x0002e7ae
	0002e7a4:MOV EAX,0x0
	0002e7a9:JMP 0x000301f9
	0002e7ae:CMP qword ptr [RBP + -0x648],0x0
	0002e7b6:JZ 0x0002e86a
	0002e7bc:CMP dword ptr [RBP + -0x6ac],0x0
	0002e7c3:JNZ 0x0002e84c
	0002e7c9:MOV RAX,qword ptr [RBP + -0x528]
	0002e7d0:CMP RAX,qword ptr [RBP + -0x520]
	0002e7d7:JNC 0x0002e84c
	0002e7d9:MOV EAX,dword ptr [RBP + -0x69c]
	0002e7df:CDQE
	0002e7e1:SUB RAX,qword ptr [RBP + -0x528]
	0002e7e8:MOV qword ptr [RBP + -0x510],RAX
	0002e7ef:CMP dword ptr [RBP + -0x6b4],0x30
	0002e7f6:JNZ 0x0002e823
	0002e7f8:MOV RDX,qword ptr [RBP + -0x510]
	0002e7ff:MOV RAX,qword ptr [RBP + -0x648]
	0002e806:MOV ESI,0x30
	0002e80b:MOV RDI,RAX
	0002e80e:CALL 0x00005c10
	0002e813:MOV RAX,qword ptr [RBP + -0x510]
	0002e81a:ADD qword ptr [RBP + -0x648],RAX
	0002e821:JMP 0x0002e84c
	0002e823:MOV RDX,qword ptr [RBP + -0x510]
	0002e82a:MOV RAX,qword ptr [RBP + -0x648]
	0002e831:MOV ESI,0x20
	0002e836:MOV RDI,RAX
	0002e839:CALL 0x00005c10
	0002e83e:MOV RAX,qword ptr [RBP + -0x510]
	0002e845:ADD qword ptr [RBP + -0x648],RAX
	0002e84c:MOV RAX,qword ptr [RBP + -0x648]
	0002e853:MOVZX EDX,byte ptr [RBP + -0x6b9]
	0002e85a:MOV byte ptr [RAX],DL
	0002e85c:MOV RAX,qword ptr [RBP + -0x528]
	0002e863:ADD qword ptr [RBP + -0x648],RAX
	0002e86a:MOV RAX,qword ptr [RBP + -0x518]
	0002e871:ADD qword ptr [RBP + -0x650],RAX
	0002e878:JMP 0x0002ed83
	0002e87d:MOV EDX,dword ptr [RBP + -0x6ac]
	0002e883:LEA RAX,[RBP + -0x420]
	0002e88a:ADD RAX,0x17
	0002e88e:SUB RAX,qword ptr [RBP + -0x630]
	0002e895:MOV ECX,EAX
	0002e897:MOV EAX,EDX
	0002e899:SUB EAX,ECX
	0002e89b:CMP byte ptr [RBP + -0x6b9],0x0
	0002e8a2:SETNZ DL
	0002e8a5:MOVZX EDX,DL
	0002e8a8:SUB EAX,EDX
	0002e8aa:MOV dword ptr [RBP + -0x65c],EAX
	0002e8b0:CMP dword ptr [RBP + -0x65c],0x0
	0002e8b7:JLE 0x0002ec4b
	0002e8bd:CMP dword ptr [RBP + -0x6b4],0x5f
	0002e8c4:JNZ 0x0002ea99
	0002e8ca:MOV EAX,dword ptr [RBP + -0x65c]
	0002e8d0:MOVSXD RDX,EAX
	0002e8d3:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e8da:SUB RAX,qword ptr [RBP + -0x650]
	0002e8e1:CMP RDX,RAX
	0002e8e4:JC 0x0002e8f0
	0002e8e6:MOV EAX,0x0
	0002e8eb:JMP 0x000301f9
	0002e8f0:CMP qword ptr [RBP + -0x648],0x0
	0002e8f8:JZ 0x0002e926
	0002e8fa:MOV EAX,dword ptr [RBP + -0x65c]
	0002e900:MOVSXD RDX,EAX
	0002e903:MOV RAX,qword ptr [RBP + -0x648]
	0002e90a:MOV ESI,0x20
	0002e90f:MOV RDI,RAX
	0002e912:CALL 0x00005c10
	0002e917:MOV EAX,dword ptr [RBP + -0x65c]
	0002e91d:CDQE
	0002e91f:ADD qword ptr [RBP + -0x648],RAX
	0002e926:MOV EAX,dword ptr [RBP + -0x65c]
	0002e92c:CDQE
	0002e92e:ADD qword ptr [RBP + -0x650],RAX
	0002e935:MOV EAX,dword ptr [RBP + -0x69c]
	0002e93b:CMP EAX,dword ptr [RBP + -0x65c]
	0002e941:JLE 0x0002e951
	0002e943:MOV EAX,dword ptr [RBP + -0x69c]
	0002e949:SUB EAX,dword ptr [RBP + -0x65c]
	0002e94f:JMP 0x0002e956
	0002e951:MOV EAX,0x0
	0002e956:MOV dword ptr [RBP + -0x69c],EAX
	0002e95c:CMP byte ptr [RBP + -0x6b9],0x0
	0002e963:JZ 0x0002ed83
	0002e969:MOV qword ptr [RBP + -0x548],0x1
	0002e974:MOV EAX,dword ptr [RBP + -0x69c]
	0002e97a:MOV EDX,0x0
	0002e97f:TEST EAX,EAX
	0002e981:CMOVS EAX,EDX
	0002e984:CDQE
	0002e986:MOV qword ptr [RBP + -0x540],RAX
	0002e98d:MOV RDX,qword ptr [RBP + -0x548]
	0002e994:MOV RAX,qword ptr [RBP + -0x540]
	0002e99b:CMP RDX,RAX
	0002e99e:CMOVNC RAX,RDX
	0002e9a2:MOV qword ptr [RBP + -0x538],RAX
	0002e9a9:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e9b0:SUB RAX,qword ptr [RBP + -0x650]
	0002e9b7:CMP qword ptr [RBP + -0x538],RAX
	0002e9be:JC 0x0002e9ca
	0002e9c0:MOV EAX,0x0
	0002e9c5:JMP 0x000301f9
	0002e9ca:CMP qword ptr [RBP + -0x648],0x0
	0002e9d2:JZ 0x0002ea86
	0002e9d8:CMP dword ptr [RBP + -0x6ac],0x0
	0002e9df:JNZ 0x0002ea68
	0002e9e5:MOV RAX,qword ptr [RBP + -0x548]
	0002e9ec:CMP RAX,qword ptr [RBP + -0x540]
	0002e9f3:JNC 0x0002ea68
	0002e9f5:MOV EAX,dword ptr [RBP + -0x69c]
	0002e9fb:CDQE
	0002e9fd:SUB RAX,qword ptr [RBP + -0x548]
	0002ea04:MOV qword ptr [RBP + -0x530],RAX
	0002ea0b:CMP dword ptr [RBP + -0x6b4],0x30
	0002ea12:JNZ 0x0002ea3f
	0002ea14:MOV RDX,qword ptr [RBP + -0x530]
	0002ea1b:MOV RAX,qword ptr [RBP + -0x648]
	0002ea22:MOV ESI,0x30
	0002ea27:MOV RDI,RAX
	0002ea2a:CALL 0x00005c10
	0002ea2f:MOV RAX,qword ptr [RBP + -0x530]
	0002ea36:ADD qword ptr [RBP + -0x648],RAX
	0002ea3d:JMP 0x0002ea68
	0002ea3f:MOV RDX,qword ptr [RBP + -0x530]
	0002ea46:MOV RAX,qword ptr [RBP + -0x648]
	0002ea4d:MOV ESI,0x20
	0002ea52:MOV RDI,RAX
	0002ea55:CALL 0x00005c10
	0002ea5a:MOV RAX,qword ptr [RBP + -0x530]
	0002ea61:ADD qword ptr [RBP + -0x648],RAX
	0002ea68:MOV RAX,qword ptr [RBP + -0x648]
	0002ea6f:MOVZX EDX,byte ptr [RBP + -0x6b9]
	0002ea76:MOV byte ptr [RAX],DL
	0002ea78:MOV RAX,qword ptr [RBP + -0x548]
	0002ea7f:ADD qword ptr [RBP + -0x648],RAX
	0002ea86:MOV RAX,qword ptr [RBP + -0x538]
	0002ea8d:ADD qword ptr [RBP + -0x650],RAX
	0002ea94:JMP 0x0002ed83
	0002ea99:MOV EAX,dword ptr [RBP + -0x6ac]
	0002ea9f:MOVSXD RDX,EAX
	0002eaa2:MOV RAX,qword ptr [RBP + -0x6d0]
	0002eaa9:SUB RAX,qword ptr [RBP + -0x650]
	0002eab0:CMP RDX,RAX
	0002eab3:JC 0x0002eabf
	0002eab5:MOV EAX,0x0
	0002eaba:JMP 0x000301f9
	0002eabf:CMP byte ptr [RBP + -0x6b9],0x0
	0002eac6:JZ 0x0002ebf7
	0002eacc:MOV qword ptr [RBP + -0x568],0x1
	0002ead7:MOV EAX,dword ptr [RBP + -0x69c]
	0002eadd:MOV EDX,0x0
	0002eae2:TEST EAX,EAX
	0002eae4:CMOVS EAX,EDX
	0002eae7:CDQE
	0002eae9:MOV qword ptr [RBP + -0x560],RAX
	0002eaf0:MOV RDX,qword ptr [RBP + -0x568]
	0002eaf7:MOV RAX,qword ptr [RBP + -0x560]
	0002eafe:CMP RDX,RAX
	0002eb01:CMOVNC RAX,RDX
	0002eb05:MOV qword ptr [RBP + -0x558],RAX
	0002eb0c:MOV RAX,qword ptr [RBP + -0x6d0]
	0002eb13:SUB RAX,qword ptr [RBP + -0x650]
	0002eb1a:CMP qword ptr [RBP + -0x558],RAX
	0002eb21:JC 0x0002eb2d
	0002eb23:MOV EAX,0x0
	0002eb28:JMP 0x000301f9
	0002eb2d:CMP qword ptr [RBP + -0x648],0x0
	0002eb35:JZ 0x0002ebe9
	0002eb3b:CMP dword ptr [RBP + -0x6ac],0x0
	0002eb42:JNZ 0x0002ebcb
	0002eb48:MOV RAX,qword ptr [RBP + -0x568]
	0002eb4f:CMP RAX,qword ptr [RBP + -0x560]
	0002eb56:JNC 0x0002ebcb
	0002eb58:MOV EAX,dword ptr [RBP + -0x69c]
	0002eb5e:CDQE
	0002eb60:SUB RAX,qword ptr [RBP + -0x568]
	0002eb67:MOV qword ptr [RBP + -0x550],RAX
	0002eb6e:CMP dword ptr [RBP + -0x6b4],0x30
	0002eb75:JNZ 0x0002eba2
	0002eb77:MOV RDX,qword ptr [RBP + -0x550]
	0002eb7e:MOV RAX,qword ptr [RBP + -0x648]
	0002eb85:MOV ESI,0x30
	0002eb8a:MOV RDI,RAX
	0002eb8d:CALL 0x00005c10
	0002eb92:MOV RAX,qword ptr [RBP + -0x550]
	0002eb99:ADD qword ptr [RBP + -0x648],RAX
	0002eba0:JMP 0x0002ebcb
	0002eba2:MOV RDX,qword ptr [RBP + -0x550]
	0002eba9:MOV RAX,qword ptr [RBP + -0x648]
	0002ebb0:MOV ESI,0x20
	0002ebb5:MOV RDI,RAX
	0002ebb8:CALL 0x00005c10
	0002ebbd:MOV RAX,qword ptr [RBP + -0x550]
	0002ebc4:ADD qword ptr [RBP + -0x648],RAX
	0002ebcb:MOV RAX,qword ptr [RBP + -0x648]
	0002ebd2:MOVZX EDX,byte ptr [RBP + -0x6b9]
	0002ebd9:MOV byte ptr [RAX],DL
	0002ebdb:MOV RAX,qword ptr [RBP + -0x568]
	0002ebe2:ADD qword ptr [RBP + -0x648],RAX
	0002ebe9:MOV RAX,qword ptr [RBP + -0x558]
	0002ebf0:ADD qword ptr [RBP + -0x650],RAX
	0002ebf7:CMP qword ptr [RBP + -0x648],0x0
	0002ebff:JZ 0x0002ec2d
	0002ec01:MOV EAX,dword ptr [RBP + -0x65c]
	0002ec07:MOVSXD RDX,EAX
	0002ec0a:MOV RAX,qword ptr [RBP + -0x648]
	0002ec11:MOV ESI,0x30
	0002ec16:MOV RDI,RAX
	0002ec19:CALL 0x00005c10
	0002ec1e:MOV EAX,dword ptr [RBP + -0x65c]
	0002ec24:CDQE
	0002ec26:ADD qword ptr [RBP + -0x648],RAX
	0002ec2d:MOV EAX,dword ptr [RBP + -0x65c]
	0002ec33:CDQE
	0002ec35:ADD qword ptr [RBP + -0x650],RAX
	0002ec3c:MOV dword ptr [RBP + -0x69c],0x0
	0002ec46:JMP 0x0002ed83
	0002ec4b:CMP byte ptr [RBP + -0x6b9],0x0
	0002ec52:JZ 0x0002ed83
	0002ec58:MOV qword ptr [RBP + -0x588],0x1
	0002ec63:MOV EAX,dword ptr [RBP + -0x69c]
	0002ec69:MOV EDX,0x0
	0002ec6e:TEST EAX,EAX
	0002ec70:CMOVS EAX,EDX
	0002ec73:CDQE
	0002ec75:MOV qword ptr [RBP + -0x580],RAX
	0002ec7c:MOV RDX,qword ptr [RBP + -0x588]
	0002ec83:MOV RAX,qword ptr [RBP + -0x580]
	0002ec8a:CMP RDX,RAX
	0002ec8d:CMOVNC RAX,RDX
	0002ec91:MOV qword ptr [RBP + -0x578],RAX
	0002ec98:MOV RAX,qword ptr [RBP + -0x6d0]
	0002ec9f:SUB RAX,qword ptr [RBP + -0x650]
	0002eca6:CMP qword ptr [RBP + -0x578],RAX
	0002ecad:JC 0x0002ecb9
	0002ecaf:MOV EAX,0x0
	0002ecb4:JMP 0x000301f9
	0002ecb9:CMP qword ptr [RBP + -0x648],0x0
	0002ecc1:JZ 0x0002ed75
	0002ecc7:CMP dword ptr [RBP + -0x6ac],0x0
	0002ecce:JNZ 0x0002ed57
	0002ecd4:MOV RAX,qword ptr [RBP + -0x588]
	0002ecdb:CMP RAX,qword ptr [RBP + -0x580]
	0002ece2:JNC 0x0002ed57
	0002ece4:MOV EAX,dword ptr [RBP + -0x69c]
	0002ecea:CDQE
	0002ecec:SUB RAX,qword ptr [RBP + -0x588]
	0002ecf3:MOV qword ptr [RBP + -0x570],RAX
	0002ecfa:CMP dword ptr [RBP + -0x6b4],0x30
	0002ed01:JNZ 0x0002ed2e
	0002ed03:MOV RDX,qword ptr [RBP + -0x570]
	0002ed0a:MOV RAX,qword ptr [RBP + -0x648]
	0002ed11:MOV ESI,0x30
	0002ed16:MOV RDI,RAX
	0002ed19:CALL 0x00005c10
	0002ed1e:MOV RAX,qword ptr [RBP + -0x570]
	0002ed25:ADD qword ptr [RBP + -0x648],RAX
	0002ed2c:JMP 0x0002ed57
	0002ed2e:MOV RDX,qword ptr [RBP + -0x570]
	0002ed35:MOV RAX,qword ptr [RBP + -0x648]
	0002ed3c:MOV ESI,0x20
	0002ed41:MOV RDI,RAX
	0002ed44:CALL 0x00005c10
	0002ed49:MOV RAX,qword ptr [RBP + -0x570]
	0002ed50:ADD qword ptr [RBP + -0x648],RAX
	0002ed57:MOV RAX,qword ptr [RBP + -0x648]
	0002ed5e:MOVZX EDX,byte ptr [RBP + -0x6b9]
	0002ed65:MOV byte ptr [RAX],DL
	0002ed67:MOV RAX,qword ptr [RBP + -0x588]
	0002ed6e:ADD qword ptr [RBP + -0x648],RAX
	0002ed75:MOV RAX,qword ptr [RBP + -0x578]
	0002ed7c:ADD qword ptr [RBP + -0x650],RAX
	0002ed83:LEA RAX,[RBP + -0x420]
	0002ed8a:ADD RAX,0x17
	0002ed8e:SUB RAX,qword ptr [RBP + -0x630]
	0002ed95:MOV qword ptr [RBP + -0x508],RAX
	0002ed9c:MOV EAX,dword ptr [RBP + -0x69c]
	0002eda2:MOV EDX,0x0
	0002eda7:TEST EAX,EAX
	0002eda9:CMOVS EAX,EDX
	0002edac:CDQE
	0002edae:MOV qword ptr [RBP + -0x500],RAX
	0002edb5:MOV RDX,qword ptr [RBP + -0x508]
	0002edbc:MOV RAX,qword ptr [RBP + -0x500]
	0002edc3:CMP RDX,RAX
	0002edc6:CMOVNC RAX,RDX
	0002edca:MOV qword ptr [RBP + -0x4f8],RAX
	0002edd1:MOV RAX,qword ptr [RBP + -0x6d0]
	0002edd8:SUB RAX,qword ptr [RBP + -0x650]
	0002eddf:CMP qword ptr [RBP + -0x4f8],RAX
	0002ede6:JC 0x0002edf2
	0002ede8:MOV EAX,0x0
	0002eded:JMP 0x000301f9
	0002edf2:CMP qword ptr [RBP + -0x648],0x0
	0002edfa:JZ 0x0002ef14
	0002ee00:CMP dword ptr [RBP + -0x6ac],0x0
	0002ee07:JNZ 0x0002ee90
	0002ee0d:MOV RAX,qword ptr [RBP + -0x508]
	0002ee14:CMP RAX,qword ptr [RBP + -0x500]
	0002ee1b:JNC 0x0002ee90
	0002ee1d:MOV EAX,dword ptr [RBP + -0x69c]
	0002ee23:CDQE
	0002ee25:SUB RAX,qword ptr [RBP + -0x508]
	0002ee2c:MOV qword ptr [RBP + -0x4f0],RAX
	0002ee33:CMP dword ptr [RBP + -0x6b4],0x30
	0002ee3a:JNZ 0x0002ee67
	0002ee3c:MOV RDX,qword ptr [RBP + -0x4f0]
	0002ee43:MOV RAX,qword ptr [RBP + -0x648]
	0002ee4a:MOV ESI,0x30
	0002ee4f:MOV RDI,RAX
	0002ee52:CALL 0x00005c10
	0002ee57:MOV RAX,qword ptr [RBP + -0x4f0]
	0002ee5e:ADD qword ptr [RBP + -0x648],RAX
	0002ee65:JMP 0x0002ee90
	0002ee67:MOV RDX,qword ptr [RBP + -0x4f0]
	0002ee6e:MOV RAX,qword ptr [RBP + -0x648]
	0002ee75:MOV ESI,0x20
	0002ee7a:MOV RDI,RAX
	0002ee7d:CALL 0x00005c10
	0002ee82:MOV RAX,qword ptr [RBP + -0x4f0]
	0002ee89:ADD qword ptr [RBP + -0x648],RAX
	0002ee90:CMP byte ptr [RBP + -0x6bc],0x0
	0002ee97:JZ 0x0002eebb
	0002ee99:MOV RDX,qword ptr [RBP + -0x508]
	0002eea0:MOV RCX,qword ptr [RBP + -0x630]
	0002eea7:MOV RAX,qword ptr [RBP + -0x648]
	0002eeae:MOV RSI,RCX
	0002eeb1:MOV RDI,RAX
	0002eeb4:CALL 0x0002d8cc
	0002eeb9:JMP 0x0002ef06
	0002eebb:CMP byte ptr [RBP + -0x6bb],0x0
	0002eec2:JZ 0x0002eee6
	0002eec4:MOV RDX,qword ptr [RBP + -0x508]
	0002eecb:MOV RCX,qword ptr [RBP + -0x630]
	0002eed2:MOV RAX,qword ptr [RBP + -0x648]
	0002eed9:MOV RSI,RCX
	0002eedc:MOV RDI,RAX
	0002eedf:CALL 0x0002d924
	0002eee4:JMP 0x0002ef06
	0002eee6:MOV RDX,qword ptr [RBP + -0x508]
	0002eeed:MOV RCX,qword ptr [RBP + -0x630]
	0002eef4:MOV RAX,qword ptr [RBP + -0x648]
	0002eefb:MOV RSI,RCX
	0002eefe:MOV RDI,RAX
	0002ef01:CALL 0x00005d90
	0002ef06:MOV RAX,qword ptr [RBP + -0x508]
	0002ef0d:ADD qword ptr [RBP + -0x648],RAX
	0002ef14:MOV RAX,qword ptr [RBP + -0x4f8]
	0002ef1b:ADD qword ptr [RBP + -0x650],RAX
	0002ef22:JMP 0x000301ba
	0002ef27:CMP dword ptr [RBP + -0x6b0],0x0
	0002ef2e:JNZ 0x0002ff85
	0002ef34:LEA RAX,[0x35fde]
	0002ef3b:MOV qword ptr [RBP + -0x638],RAX
	0002ef42:JMP 0x0002e048
	0002ef47:CMP dword ptr [RBP + -0x6b0],0x45
	0002ef4e:JZ 0x0002ff88
	0002ef54:MOV dword ptr [RBP + -0x6ac],0x2
	0002ef5e:MOV RAX,qword ptr [RBP + -0x6e0]
	0002ef65:MOV EAX,dword ptr [RAX + 0x8]
	0002ef68:MOV dword ptr [RBP + -0x6a8],EAX
	0002ef6e:JMP 0x0002e5e9
	0002ef73:CMP dword ptr [RBP + -0x6b0],0x45
	0002ef7a:JZ 0x0002ff8b
	0002ef80:MOV dword ptr [RBP + -0x6ac],0x2
	0002ef8a:MOV EAX,dword ptr [RBP + -0x6b8]
	0002ef90:MOV dword ptr [RBP + -0x6a8],EAX
	0002ef96:JMP 0x0002e5e9
	0002ef9b:CMP dword ptr [RBP + -0x6b0],0x45
	0002efa2:JZ 0x0002ff8e
	0002efa8:MOV dword ptr [RBP + -0x6ac],0x2
	0002efb2:MOV RAX,qword ptr [RBP + -0x6e0]
	0002efb9:MOV EAX,dword ptr [RAX + 0x8]
	0002efbc:MOV dword ptr [RBP + -0x6a8],EAX
	0002efc2:JMP 0x0002e5ca
	0002efc7:CMP dword ptr [RBP + -0x6b0],0x45
	0002efce:JZ 0x0002ff91
	0002efd4:MOV dword ptr [RBP + -0x6ac],0x2
	0002efde:MOV EAX,dword ptr [RBP + -0x6b8]
	0002efe4:MOV dword ptr [RBP + -0x6a8],EAX
	0002efea:JMP 0x0002e5ca
	0002efef:CMP dword ptr [RBP + -0x6b0],0x45
	0002eff6:JZ 0x0002ff94
	0002effc:MOV dword ptr [RBP + -0x6ac],0x3
	0002f006:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f00d:MOV EAX,dword ptr [RAX + 0x1c]
	0002f010:CMP EAX,-0x1
	0002f013:SETL AL
	0002f016:MOV byte ptr [RBP + -0x6be],AL
	0002f01c:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f023:MOV EAX,dword ptr [RAX + 0x1c]
	0002f026:ADD EAX,0x1
	0002f029:MOV dword ptr [RBP + -0x6a4],EAX
	0002f02f:JMP 0x0002e604
	0002f034:CMP dword ptr [RBP + -0x6b0],0x45
	0002f03b:JZ 0x0002ff97
	0002f041:MOV dword ptr [RBP + -0x6ac],0x2
	0002f04b:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f052:MOV EAX,dword ptr [RAX + 0x4]
	0002f055:MOV dword ptr [RBP + -0x6a8],EAX
	0002f05b:JMP 0x0002e5e9
	0002f060:CMP dword ptr [RBP + -0x6b0],0x45
	0002f067:JZ 0x0002ff9a
	0002f06d:MOV dword ptr [RBP + -0x6ac],0x2
	0002f077:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f07e:MOV EAX,dword ptr [RAX + 0x10]
	0002f081:CMP EAX,-0x1
	0002f084:SETL AL
	0002f087:MOV byte ptr [RBP + -0x6be],AL
	0002f08d:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f094:MOV EAX,dword ptr [RAX + 0x10]
	0002f097:ADD EAX,0x1
	0002f09a:MOV dword ptr [RBP + -0x6a4],EAX
	0002f0a0:JMP 0x0002e604
	0002f0a5:CMP dword ptr [RBP + -0x6b0],0x45
	0002f0ac:JZ 0x0002ff9d
	0002f0b2:MOV EAX,dword ptr [RBP + 0x18]
	0002f0b5:MOV dword ptr [RBP + -0x6a8],EAX
	0002f0bb:CMP dword ptr [RBP + -0x69c],-0x1
	0002f0c2:JNZ 0x0002f0d0
	0002f0c4:MOV dword ptr [RBP + -0x69c],0x9
	0002f0ce:JMP 0x0002f114
	0002f0d0:MOV EAX,dword ptr [RBP + -0x69c]
	0002f0d6:MOV dword ptr [RBP + -0x694],EAX
	0002f0dc:JMP 0x0002f10b
	0002f0de:MOV EAX,dword ptr [RBP + -0x6a8]
	0002f0e4:MOVSXD RDX,EAX
	0002f0e7:IMUL RDX,RDX,0x66666667
	0002f0ee:SHR RDX,0x20
	0002f0f2:SAR EDX,0x2
	0002f0f5:SAR EAX,0x1f
	0002f0f8:MOV ECX,EAX
	0002f0fa:MOV EAX,EDX
	0002f0fc:SUB EAX,ECX
	0002f0fe:MOV dword ptr [RBP + -0x6a8],EAX
	0002f104:ADD dword ptr [RBP + -0x694],0x1
	0002f10b:CMP dword ptr [RBP + -0x694],0x8
	0002f112:JLE 0x0002f0de
	0002f114:MOV EAX,dword ptr [RBP + -0x69c]
	0002f11a:MOV dword ptr [RBP + -0x6ac],EAX
	0002f120:JMP 0x0002e5e9
	0002f125:MOV qword ptr [RBP + -0x5f0],0x1
	0002f130:MOV EAX,dword ptr [RBP + -0x69c]
	0002f136:MOV EDX,0x0
	0002f13b:TEST EAX,EAX
	0002f13d:CMOVS EAX,EDX
	0002f140:CDQE
	0002f142:MOV qword ptr [RBP + -0x5e8],RAX
	0002f149:MOV RDX,qword ptr [RBP + -0x5f0]
	0002f150:MOV RAX,qword ptr [RBP + -0x5e8]
	0002f157:CMP RDX,RAX
	0002f15a:CMOVNC RAX,RDX
	0002f15e:MOV qword ptr [RBP + -0x5e0],RAX
	0002f165:MOV RAX,qword ptr [RBP + -0x6d0]
	0002f16c:SUB RAX,qword ptr [RBP + -0x650]
	0002f173:CMP qword ptr [RBP + -0x5e0],RAX
	0002f17a:JC 0x0002f186
	0002f17c:MOV EAX,0x0
	0002f181:JMP 0x000301f9
	0002f186:CMP qword ptr [RBP + -0x648],0x0
	0002f18e:JZ 0x0002f23c
	0002f194:CMP dword ptr [RBP + -0x6ac],0x0
	0002f19b:JNZ 0x0002f224
	0002f1a1:MOV RAX,qword ptr [RBP + -0x5f0]
	0002f1a8:CMP RAX,qword ptr [RBP + -0x5e8]
	0002f1af:JNC 0x0002f224
	0002f1b1:MOV EAX,dword ptr [RBP + -0x69c]
	0002f1b7:CDQE
	0002f1b9:SUB RAX,qword ptr [RBP + -0x5f0]
	0002f1c0:MOV qword ptr [RBP + -0x5d8],RAX
	0002f1c7:CMP dword ptr [RBP + -0x6b4],0x30
	0002f1ce:JNZ 0x0002f1fb
	0002f1d0:MOV RDX,qword ptr [RBP + -0x5d8]
	0002f1d7:MOV RAX,qword ptr [RBP + -0x648]
	0002f1de:MOV ESI,0x30
	0002f1e3:MOV RDI,RAX
	0002f1e6:CALL 0x00005c10
	0002f1eb:MOV RAX,qword ptr [RBP + -0x5d8]
	0002f1f2:ADD qword ptr [RBP + -0x648],RAX
	0002f1f9:JMP 0x0002f224
	0002f1fb:MOV RDX,qword ptr [RBP + -0x5d8]
	0002f202:MOV RAX,qword ptr [RBP + -0x648]
	0002f209:MOV ESI,0x20
	0002f20e:MOV RDI,RAX
	0002f211:CALL 0x00005c10
	0002f216:MOV RAX,qword ptr [RBP + -0x5d8]
	0002f21d:ADD qword ptr [RBP + -0x648],RAX
	0002f224:MOV RAX,qword ptr [RBP + -0x648]
	0002f22b:MOV byte ptr [RAX],0xa
	0002f22e:MOV RAX,qword ptr [RBP + -0x5f0]
	0002f235:ADD qword ptr [RBP + -0x648],RAX
	0002f23c:MOV RAX,qword ptr [RBP + -0x5e0]
	0002f243:ADD qword ptr [RBP + -0x650],RAX
	0002f24a:JMP 0x000301ba
	0002f24f:MOV byte ptr [RBP + -0x6bc],0x1
	0002f256:MOV dword ptr [RBP + -0x698],0x70
	0002f260:CMP byte ptr [RBP + -0x6ba],0x0
	0002f267:JZ 0x0002e21f
	0002f26d:MOV byte ptr [RBP + -0x6bb],0x0
	0002f274:MOV byte ptr [RBP + -0x6bc],0x1
	0002f27b:JMP 0x0002e21f
	0002f280:MOV dword ptr [RBP + -0x6ac],0x1
	0002f28a:MOV byte ptr [RBP + -0x6be],0x0
	0002f291:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f298:MOV EDX,dword ptr [RAX + 0x10]
	0002f29b:MOV EAX,EDX
	0002f29d:SHL EAX,0x2
	0002f2a0:ADD EAX,EDX
	0002f2a2:ADD EAX,EAX
	0002f2a4:ADD EAX,EDX
	0002f2a6:SAR EAX,0x5
	0002f2a9:ADD EAX,0x1
	0002f2ac:MOV dword ptr [RBP + -0x6a4],EAX
	0002f2b2:JMP 0x0002e604
	0002f2b7:LEA RAX,[0x35fe7]
	0002f2be:MOV qword ptr [RBP + -0x638],RAX
	0002f2c5:JMP 0x0002e048
	0002f2ca:CMP dword ptr [RBP + -0x6b0],0x45
	0002f2d1:JZ 0x0002ffa0
	0002f2d7:MOV dword ptr [RBP + -0x6ac],0x2
	0002f2e1:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f2e8:MOV EAX,dword ptr [RAX]
	0002f2ea:MOV dword ptr [RBP + -0x6a8],EAX
	0002f2f0:JMP 0x0002e5e9
	0002f2f5:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f2fc:MOV RCX,qword ptr [RAX]
	0002f2ff:MOV RBX,qword ptr [RAX + 0x8]
	0002f303:MOV qword ptr [RBP + -0x460],RCX
	0002f30a:MOV qword ptr [RBP + -0x458],RBX
	0002f311:MOV RCX,qword ptr [RAX + 0x10]
	0002f315:MOV RBX,qword ptr [RAX + 0x18]
	0002f319:MOV qword ptr [RBP + -0x450],RCX
	0002f320:MOV qword ptr [RBP + -0x448],RBX
	0002f327:MOV RCX,qword ptr [RAX + 0x20]
	0002f32b:MOV RBX,qword ptr [RAX + 0x28]
	0002f32f:MOV qword ptr [RBP + -0x440],RCX
	0002f336:MOV qword ptr [RBP + -0x438],RBX
	0002f33d:MOV RAX,qword ptr [RAX + 0x30]
	0002f341:MOV qword ptr [RBP + -0x430],RAX
	0002f348:LEA RDX,[RBP + -0x460]
	0002f34f:MOV RAX,qword ptr [RBP + -0x6f8]
	0002f356:MOV RSI,RDX
	0002f359:MOV RDI,RAX
	0002f35c:CALL 0x0002cc40
	0002f361:MOV qword ptr [RBP + -0x618],RAX
	0002f368:LEA RAX,[RBP + -0x420]
	0002f36f:ADD RAX,0x17
	0002f373:MOV qword ptr [RBP + -0x630],RAX
	0002f37a:MOV RAX,qword ptr [RBP + -0x618]
	0002f381:SHR RAX,0x3f
	0002f385:MOV byte ptr [RBP + -0x6be],AL
	0002f38b:MOV RCX,qword ptr [RBP + -0x618]
	0002f392:MOV RDX,0x6666666666666667
	0002f39c:MOV RAX,RCX
	0002f39f:IMUL RDX
	0002f3a2:MOV RAX,RDX
	0002f3a5:SAR RAX,0x2
	0002f3a9:MOV RSI,RCX
	0002f3ac:SAR RSI,0x3f
	0002f3b0:SUB RAX,RSI
	0002f3b3:MOV RDX,RAX
	0002f3b6:MOV RAX,RDX
	0002f3b9:SHL RAX,0x2
	0002f3bd:ADD RAX,RDX
	0002f3c0:ADD RAX,RAX
	0002f3c3:SUB RCX,RAX
	0002f3c6:MOV RDX,RCX
	0002f3c9:MOV dword ptr [RBP + -0x680],EDX
	0002f3cf:MOV RCX,qword ptr [RBP + -0x618]
	0002f3d6:MOV RDX,0x6666666666666667
	0002f3e0:MOV RAX,RCX
	0002f3e3:IMUL RDX
	0002f3e6:MOV RAX,RDX
	0002f3e9:SAR RAX,0x2
	0002f3ed:SAR RCX,0x3f
	0002f3f1:MOV RDX,RCX
	0002f3f4:SUB RAX,RDX
	0002f3f7:MOV qword ptr [RBP + -0x618],RAX
	0002f3fe:CMP byte ptr [RBP + -0x6be],0x0
	0002f405:JZ 0x0002f41a
	0002f407:MOV EAX,dword ptr [RBP + -0x680]
	0002f40d:MOV EDX,EAX
	0002f40f:MOV EAX,0x30
	0002f414:SUB EAX,EDX
	0002f416:MOV EDX,EAX
	0002f418:JMP 0x0002f425
	0002f41a:MOV EAX,dword ptr [RBP + -0x680]
	0002f420:ADD EAX,0x30
	0002f423:MOV EDX,EAX
	0002f425:SUB qword ptr [RBP + -0x630],0x1
	0002f42d:MOV RAX,qword ptr [RBP + -0x630]
	0002f434:MOV byte ptr [RAX],DL
	0002f436:CMP qword ptr [RBP + -0x618],0x0
	0002f43e:JNZ 0x0002f38b
	0002f444:MOV dword ptr [RBP + -0x6ac],0x1
	0002f44e:MOV byte ptr [RBP + -0x6bd],0x0
	0002f455:JMP 0x0002e6ee
	0002f45a:CMP dword ptr [RBP + -0x6b0],0x4f
	0002f461:JNZ 0x0002e222
	0002f467:JMP 0x0002ffb6
	0002f46c:LEA RAX,[0x35fed]
	0002f473:MOV qword ptr [RBP + -0x638],RAX
	0002f47a:JMP 0x0002e048
	0002f47f:MOV qword ptr [RBP + -0x610],0x1
	0002f48a:MOV EAX,dword ptr [RBP + -0x69c]
	0002f490:MOV EDX,0x0
	0002f495:TEST EAX,EAX
	0002f497:CMOVS EAX,EDX
	0002f49a:CDQE
	0002f49c:MOV qword ptr [RBP + -0x608],RAX
	0002f4a3:MOV RDX,qword ptr [RBP + -0x610]
	0002f4aa:MOV RAX,qword ptr [RBP + -0x608]
	0002f4b1:CMP RDX,RAX
	0002f4b4:CMOVNC RAX,RDX
	0002f4b8:MOV qword ptr [RBP + -0x600],RAX
	0002f4bf:MOV RAX,qword ptr [RBP + -0x6d0]
	0002f4c6:SUB RAX,qword ptr [RBP + -0x650]
	0002f4cd:CMP qword ptr [RBP + -0x600],RAX
	0002f4d4:JC 0x0002f4e0
	0002f4d6:MOV EAX,0x0
	0002f4db:JMP 0x000301f9
	0002f4e0:CMP qword ptr [RBP + -0x648],0x0
	0002f4e8:JZ 0x0002f596
	0002f4ee:CMP dword ptr [RBP + -0x6ac],0x0
	0002f4f5:JNZ 0x0002f57e
	0002f4fb:MOV RAX,qword ptr [RBP + -0x610]
	0002f502:CMP RAX,qword ptr [RBP + -0x608]
	0002f509:JNC 0x0002f57e
	0002f50b:MOV EAX,dword ptr [RBP + -0x69c]
	0002f511:CDQE
	0002f513:SUB RAX,qword ptr [RBP + -0x610]
	0002f51a:MOV qword ptr [RBP + -0x5f8],RAX
	0002f521:CMP dword ptr [RBP + -0x6b4],0x30
	0002f528:JNZ 0x0002f555
	0002f52a:MOV RDX,qword ptr [RBP + -0x5f8]
	0002f531:MOV RAX,qword ptr [RBP + -0x648]
	0002f538:MOV ESI,0x30
	0002f53d:MOV RDI,RAX
	0002f540:CALL 0x00005c10
	0002f545:MOV RAX,qword ptr [RBP + -0x5f8]
	0002f54c:ADD qword ptr [RBP + -0x648],RAX
	0002f553:JMP 0x0002f57e
	0002f555:MOV RDX,qword ptr [RBP + -0x5f8]
	0002f55c:MOV RAX,qword ptr [RBP + -0x648]
	0002f563:MOV ESI,0x20
	0002f568:MOV RDI,RAX
	0002f56b:CALL 0x00005c10
	0002f570:MOV RAX,qword ptr [RBP + -0x5f8]
	0002f577:ADD qword ptr [RBP + -0x648],RAX
	0002f57e:MOV RAX,qword ptr [RBP + -0x648]
	0002f585:MOV byte ptr [RAX],0x9
	0002f588:MOV RAX,qword ptr [RBP + -0x610]
	0002f58f:ADD qword ptr [RBP + -0x648],RAX
	0002f596:MOV RAX,qword ptr [RBP + -0x600]
	0002f59d:ADD qword ptr [RBP + -0x650],RAX
	0002f5a4:JMP 0x000301ba
	0002f5a9:MOV dword ptr [RBP + -0x6ac],0x1
	0002f5b3:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f5ba:MOV EAX,dword ptr [RAX + 0x18]
	0002f5bd:LEA EDX,[RAX + 0x6]
	0002f5c0:MOVSXD RAX,EDX
	0002f5c3:IMUL RAX,RAX,-0x6db6db6d
	0002f5ca:SHR RAX,0x20
	0002f5ce:ADD EAX,EDX
	0002f5d0:SAR EAX,0x2
	0002f5d3:MOV ECX,EDX
	0002f5d5:SAR ECX,0x1f
	0002f5d8:SUB EAX,ECX
	0002f5da:MOV ECX,EAX
	0002f5dc:SHL ECX,0x3
	0002f5df:SUB ECX,EAX
	0002f5e1:MOV EAX,EDX
	0002f5e3:SUB EAX,ECX
	0002f5e5:ADD EAX,0x1
	0002f5e8:MOV dword ptr [RBP + -0x6a8],EAX
	0002f5ee:JMP 0x0002e5e9
	0002f5f3:CMP dword ptr [RBP + -0x6b0],0x45
	0002f5fa:JZ 0x0002ffa3
	0002f600:MOV dword ptr [RBP + -0x6ac],0x2
	0002f60a:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f611:MOV EDX,dword ptr [RAX + 0x1c]
	0002f614:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f61b:MOV ECX,dword ptr [RAX + 0x18]
	0002f61e:MOV EAX,EDX
	0002f620:SUB EAX,ECX
	0002f622:ADD EAX,0x7
	0002f625:MOVSXD RDX,EAX
	0002f628:IMUL RDX,RDX,-0x6db6db6d
	0002f62f:SHR RDX,0x20
	0002f633:ADD EDX,EAX
	0002f635:SAR EDX,0x2
	0002f638:SAR EAX,0x1f
	0002f63b:MOV ECX,EAX
	0002f63d:MOV EAX,EDX
	0002f63f:SUB EAX,ECX
	0002f641:MOV dword ptr [RBP + -0x6a8],EAX
	0002f647:JMP 0x0002e5e9
	0002f64c:CMP dword ptr [RBP + -0x6b0],0x45
	0002f653:JZ 0x0002ffa6
	0002f659:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f660:MOV EDX,dword ptr [RAX + 0x14]
	0002f663:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f66a:MOV EAX,dword ptr [RAX + 0x14]
	0002f66d:TEST EAX,EAX
	0002f66f:JNS 0x0002f678
	0002f671:MOV EAX,0x12c
	0002f676:JMP 0x0002f67d
	0002f678:MOV EAX,0xffffff9c
	0002f67d:ADD EAX,EDX
	0002f67f:MOV dword ptr [RBP + -0x67c],EAX
	0002f685:MOV dword ptr [RBP + -0x690],0x0
	0002f68f:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f696:MOV EDX,dword ptr [RAX + 0x18]
	0002f699:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f6a0:MOV EAX,dword ptr [RAX + 0x1c]
	0002f6a3:MOV ESI,EDX
	0002f6a5:MOV EDI,EAX
	0002f6a7:CALL 0x0002d97c
	0002f6ac:MOV dword ptr [RBP + -0x68c],EAX
	0002f6b2:CMP dword ptr [RBP + -0x68c],0x0
	0002f6b9:JNS 0x0002f76f
	0002f6bf:MOV dword ptr [RBP + -0x690],0xffffffff
	0002f6c9:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f6d0:MOV ECX,dword ptr [RAX + 0x18]
	0002f6d3:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f6da:MOV ESI,dword ptr [RAX + 0x1c]
	0002f6dd:MOV EAX,dword ptr [RBP + -0x67c]
	0002f6e3:SUB EAX,0x1
	0002f6e6:AND EAX,0x3
	0002f6e9:TEST EAX,EAX
	0002f6eb:JNZ 0x0002f74f
	0002f6ed:MOV EAX,dword ptr [RBP + -0x67c]
	0002f6f3:LEA EDX,[RAX + -0x1]
	0002f6f6:MOVSXD RAX,EDX
	0002f6f9:IMUL RAX,RAX,0x51eb851f
	0002f700:SHR RAX,0x20
	0002f704:SAR EAX,0x5
	0002f707:MOV EDI,EDX
	0002f709:SAR EDI,0x1f
	0002f70c:SUB EAX,EDI
	0002f70e:IMUL EDI,EAX,0x64
	0002f711:MOV EAX,EDX
	0002f713:SUB EAX,EDI
	0002f715:TEST EAX,EAX
	0002f717:JNZ 0x0002f748
	0002f719:MOV EAX,dword ptr [RBP + -0x67c]
	0002f71f:LEA EDX,[RAX + -0x1]
	0002f722:MOVSXD RAX,EDX
	0002f725:IMUL RAX,RAX,0x51eb851f
	0002f72c:SHR RAX,0x20
	0002f730:SAR EAX,0x7
	0002f733:MOV EDI,EDX
	0002f735:SAR EDI,0x1f
	0002f738:SUB EAX,EDI
	0002f73a:IMUL EDI,EAX,0x190
	0002f740:MOV EAX,EDX
	0002f742:SUB EAX,EDI
	0002f744:TEST EAX,EAX
	0002f746:JNZ 0x0002f74f
	0002f748:MOV EAX,0x1
	0002f74d:JMP 0x0002f754
	0002f74f:MOV EAX,0x0
	0002f754:ADD EAX,0x16d
	0002f759:ADD EAX,ESI
	0002f75b:MOV ESI,ECX
	0002f75d:MOV EDI,EAX
	0002f75f:CALL 0x0002d97c
	0002f764:MOV dword ptr [RBP + -0x68c],EAX
	0002f76a:JMP 0x0002f829
	0002f76f:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f776:MOV ECX,dword ptr [RAX + 0x18]
	0002f779:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f780:MOV ESI,dword ptr [RAX + 0x1c]
	0002f783:MOV EAX,dword ptr [RBP + -0x67c]
	0002f789:AND EAX,0x3
	0002f78c:TEST EAX,EAX
	0002f78e:JNZ 0x0002f7ec
	0002f790:MOV EDX,dword ptr [RBP + -0x67c]
	0002f796:MOVSXD RAX,EDX
	0002f799:IMUL RAX,RAX,0x51eb851f
	0002f7a0:SHR RAX,0x20
	0002f7a4:SAR EAX,0x5
	0002f7a7:MOV EDI,EDX
	0002f7a9:SAR EDI,0x1f
	0002f7ac:SUB EAX,EDI
	0002f7ae:IMUL EDI,EAX,0x64
	0002f7b1:MOV EAX,EDX
	0002f7b3:SUB EAX,EDI
	0002f7b5:TEST EAX,EAX
	0002f7b7:JNZ 0x0002f7e5
	0002f7b9:MOV EDX,dword ptr [RBP + -0x67c]
	0002f7bf:MOVSXD RAX,EDX
	0002f7c2:IMUL RAX,RAX,0x51eb851f
	0002f7c9:SHR RAX,0x20
	0002f7cd:SAR EAX,0x7
	0002f7d0:MOV EDI,EDX
	0002f7d2:SAR EDI,0x1f
	0002f7d5:SUB EAX,EDI
	0002f7d7:IMUL EDI,EAX,0x190
	0002f7dd:MOV EAX,EDX
	0002f7df:SUB EAX,EDI
	0002f7e1:TEST EAX,EAX
	0002f7e3:JNZ 0x0002f7ec
	0002f7e5:MOV EAX,0x1
	0002f7ea:JMP 0x0002f7f1
	0002f7ec:MOV EAX,0x0
	0002f7f1:LEA EDX,[RAX + 0x16d]
	0002f7f7:MOV EAX,ESI
	0002f7f9:SUB EAX,EDX
	0002f7fb:MOV ESI,ECX
	0002f7fd:MOV EDI,EAX
	0002f7ff:CALL 0x0002d97c
	0002f804:MOV dword ptr [RBP + -0x678],EAX
	0002f80a:CMP dword ptr [RBP + -0x678],0x0
	0002f811:JS 0x0002f829
	0002f813:MOV dword ptr [RBP + -0x690],0x1
	0002f81d:MOV EAX,dword ptr [RBP + -0x678]
	0002f823:MOV dword ptr [RBP + -0x68c],EAX
	0002f829:MOV RAX,qword ptr [RBP + -0x640]
	0002f830:MOVZX EAX,byte ptr [RAX]
	0002f833:MOVSX EAX,AL
	0002f836:CMP EAX,0x47
	0002f839:JZ 0x0002f8fa
	0002f83f:CMP EAX,0x67
	0002f842:JNZ 0x0002f948
	0002f848:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f84f:MOV EAX,dword ptr [RAX + 0x14]
	0002f852:MOVSXD RDX,EAX
	0002f855:IMUL RDX,RDX,0x51eb851f
	0002f85c:SHR RDX,0x20
	0002f860:SAR EDX,0x5
	0002f863:MOV ECX,EAX
	0002f865:SAR ECX,0x1f
	0002f868:SUB EDX,ECX
	0002f86a:IMUL ECX,EDX,0x64
	0002f86d:SUB EAX,ECX
	0002f86f:MOV EDX,EAX
	0002f871:MOV EAX,dword ptr [RBP + -0x690]
	0002f877:ADD EAX,EDX
	0002f879:MOVSXD RDX,EAX
	0002f87c:IMUL RDX,RDX,0x51eb851f
	0002f883:SHR RDX,0x20
	0002f887:SAR EDX,0x5
	0002f88a:MOV ECX,EAX
	0002f88c:SAR ECX,0x1f
	0002f88f:SUB EDX,ECX
	0002f891:MOV dword ptr [RBP + -0x674],EDX
	0002f897:MOV EDX,dword ptr [RBP + -0x674]
	0002f89d:IMUL EDX,EDX,0x64
	0002f8a0:SUB EAX,EDX
	0002f8a2:MOV dword ptr [RBP + -0x674],EAX
	0002f8a8:MOV dword ptr [RBP + -0x6ac],0x2
	0002f8b2:CMP dword ptr [RBP + -0x674],0x0
	0002f8b9:JNS 0x0002f8e9
	0002f8bb:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f8c2:MOV EDX,dword ptr [RAX + 0x14]
	0002f8c5:MOV EAX,0xfffff894
	0002f8ca:SUB EAX,dword ptr [RBP + -0x690]
	0002f8d0:CMP EDX,EAX
	0002f8d2:JGE 0x0002f8de
	0002f8d4:MOV EAX,dword ptr [RBP + -0x674]
	0002f8da:NEG EAX
	0002f8dc:JMP 0x0002f8ef
	0002f8de:MOV EAX,dword ptr [RBP + -0x674]
	0002f8e4:ADD EAX,0x64
	0002f8e7:JMP 0x0002f8ef
	0002f8e9:MOV EAX,dword ptr [RBP + -0x674]
	0002f8ef:MOV dword ptr [RBP + -0x6a8],EAX
	0002f8f5:JMP 0x0002e5e9
	0002f8fa:MOV dword ptr [RBP + -0x6ac],0x4
	0002f904:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f90b:MOV EDX,dword ptr [RAX + 0x14]
	0002f90e:MOV EAX,0xfffff894
	0002f913:SUB EAX,dword ptr [RBP + -0x690]
	0002f919:CMP EDX,EAX
	0002f91b:SETL AL
	0002f91e:MOV byte ptr [RBP + -0x6be],AL
	0002f924:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f92b:MOV EAX,dword ptr [RAX + 0x14]
	0002f92e:MOV EDX,EAX
	0002f930:MOV EAX,dword ptr [RBP + -0x690]
	0002f936:ADD EAX,EDX
	0002f938:ADD EAX,0x76c
	0002f93d:MOV dword ptr [RBP + -0x6a4],EAX
	0002f943:JMP 0x0002e604
	0002f948:MOV dword ptr [RBP + -0x6ac],0x2
	0002f952:MOV EAX,dword ptr [RBP + -0x68c]
	0002f958:MOVSXD RDX,EAX
	0002f95b:IMUL RDX,RDX,-0x6db6db6d
	0002f962:SHR RDX,0x20
	0002f966:ADD EDX,EAX
	0002f968:SAR EDX,0x2
	0002f96b:SAR EAX,0x1f
	0002f96e:MOV ECX,EAX
	0002f970:MOV EAX,EDX
	0002f972:SUB EAX,ECX
	0002f974:ADD EAX,0x1
	0002f977:MOV dword ptr [RBP + -0x6a8],EAX
	0002f97d:JMP 0x0002e5e9
	0002f982:CMP dword ptr [RBP + -0x6b0],0x45
	0002f989:JZ 0x0002ffa9
	0002f98f:MOV dword ptr [RBP + -0x6ac],0x2
	0002f999:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f9a0:MOV ESI,dword ptr [RAX + 0x1c]
	0002f9a3:MOV RAX,qword ptr [RBP + -0x6e0]
	0002f9aa:MOV EAX,dword ptr [RAX + 0x18]
	0002f9ad:ADD EAX,0x6
	0002f9b0:MOVSXD RDX,EAX
	0002f9b3:IMUL RDX,RDX,-0x6db6db6d
	0002f9ba:SHR RDX,0x20
	0002f9be:ADD EDX,EAX
	0002f9c0:SAR EDX,0x2
	0002f9c3:MOV EDI,EAX
	0002f9c5:SAR EDI,0x1f
	0002f9c8:MOV ECX,EDX
	0002f9ca:SUB ECX,EDI
	0002f9cc:MOV EDX,ECX
	0002f9ce:SHL EDX,0x3
	0002f9d1:SUB EDX,ECX
	0002f9d3:SUB EAX,EDX
	0002f9d5:MOV ECX,EAX
	0002f9d7:MOV EAX,ESI
	0002f9d9:SUB EAX,ECX
	0002f9db:ADD EAX,0x7
	0002f9de:MOVSXD RDX,EAX
	0002f9e1:IMUL RDX,RDX,-0x6db6db6d
	0002f9e8:SHR RDX,0x20
	0002f9ec:ADD EDX,EAX
	0002f9ee:SAR EDX,0x2
	0002f9f1:SAR EAX,0x1f
	0002f9f4:MOV ECX,EAX
	0002f9f6:MOV EAX,EDX
	0002f9f8:SUB EAX,ECX
	0002f9fa:MOV dword ptr [RBP + -0x6a8],EAX
	0002fa00:JMP 0x0002e5e9
	0002fa05:CMP dword ptr [RBP + -0x6b0],0x45
	0002fa0c:JZ 0x0002ffac
	0002fa12:MOV dword ptr [RBP + -0x6ac],0x1
	0002fa1c:MOV RAX,qword ptr [RBP + -0x6e0]
	0002fa23:MOV EAX,dword ptr [RAX + 0x18]
	0002fa26:MOV dword ptr [RBP + -0x6a8],EAX
	0002fa2c:JMP 0x0002e5e9
	0002fa31:CMP dword ptr [RBP + -0x6b0],0x45
	0002fa38:JZ 0x0002e225
END_OF_LINE
----------------------------------------------
483: if (modifier != 0x4f) {
	0002fa3e:CMP dword ptr [RBP + -0x6b0],0x4f
	0002fa45:JZ 0x0002ffaf
END_OF_LINE
----------------------------------------------
484: digits = 4;
	0002fa4b:MOV dword ptr [RBP + -0x6ac],0x4
END_OF_LINE
----------------------------------------------
485: negative_number = tp->tm_year < -0x76c;
	0002fa5c:MOV EAX,dword ptr [RAX + 0x14]
	0002fa5f:CMP EAX,0xfffff894
	0002fa64:SETL AL
END_OF_LINE
----------------------------------------------
486: u_number_value = tp->tm_year + 0x76c;
	0002fa74:MOV EAX,dword ptr [RAX + 0x14]
	0002fa77:ADD EAX,0x76c
END_OF_LINE
----------------------------------------------
487: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
490: case 'Z':
	0002fb22:JZ 0x0002fb32
END_OF_LINE
----------------------------------------------
491: if (bVar1) {
	0002fb22:JZ 0x0002fb32
END_OF_LINE
----------------------------------------------
492: to_uppcase = false;
	0002fb24:MOV byte ptr [RBP + -0x6bb],0x0
END_OF_LINE
----------------------------------------------
494: sVar13 = strlen(zone);
	0002fb3c:CALL 0x00005ad0
END_OF_LINE
----------------------------------------------
495: iVar4 = width;
	0002fb55:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
496: if (width < 0) {
	0002fb53:TEST EAX,EAX
	0002fb55:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
497: iVar4 = 0;
	0002fb55:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
499: uVar8 = (ulong)iVar4;
	0002fb58:CDQE
END_OF_LINE
----------------------------------------------
500: uVar11 = uVar8;
	0002fb72:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
501: if (uVar8 <= sVar13) {
	0002fb6f:CMP RDX,RAX
	0002fb72:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
502: uVar11 = sVar13;
	0002fb72:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
504: if (maxsize - i <= uVar11) {
	0002fb84:SUB RAX,qword ptr [RBP + -0x650]
	0002fb8b:CMP qword ptr [RBP + -0x5c0],RAX
	0002fb92:JC 0x0002fb9e
END_OF_LINE
----------------------------------------------
505: i = 0;
	0002fb94:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
506: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
508: if (p != (char *)0x0) {
	0002fb9e:CMP qword ptr [RBP + -0x648],0x0
	0002fba6:JZ 0x0002fcc0
END_OF_LINE
----------------------------------------------
509: if (sVar13 < uVar8) {
	0002fbc0:CMP RAX,qword ptr [RBP + -0x5c8]
	0002fbc7:JNC 0x0002fc3c
END_OF_LINE
----------------------------------------------
510: __n_00 = (long)width - sVar13;
	0002fbcf:CDQE
	0002fbd1:SUB RAX,qword ptr [RBP + -0x5d0]
END_OF_LINE
----------------------------------------------
511: if (pad == 0x30) {
	0002fbdf:CMP dword ptr [RBP + -0x6b4],0x30
	0002fbe6:JNZ 0x0002fc13
END_OF_LINE
----------------------------------------------
512: memset(p,0x30,__n_00);
	0002fbfe:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
513: p = p + __n_00;
	0002fc0a:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
516: memset(p,0x20,__n_00);
	0002fc29:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
517: p = p + __n_00;
	0002fc35:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
520: if (bVar1) {
	0002fc43:JZ 0x0002fc67
END_OF_LINE
----------------------------------------------
521: memcpy_lowcase(p,zone,sVar13);
	0002fc60:CALL 0x0002d8cc
END_OF_LINE
----------------------------------------------
523: else if (to_uppcase == false) {
	0002fc67:CMP byte ptr [RBP + -0x6bb],0x0
	0002fc6e:JZ 0x0002fc92
END_OF_LINE
----------------------------------------------
524: memcpy(p,zone,sVar13);
	0002fcad:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
527: memcpy_uppcase(p,zone,sVar13);
	0002fc8b:CALL 0x0002d924
END_OF_LINE
----------------------------------------------
529: p = p + sVar13;
	0002fcb9:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
531: i = i + uVar11;
	0002fcc7:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
532: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
533: case 'a':
	0002df86:CMP dword ptr [RBP + -0x6b0],0x0
END_OF_LINE
----------------------------------------------
534: if (modifier == 0) {
	0002df86:CMP dword ptr [RBP + -0x6b0],0x0
	0002df8d:JNZ 0x0002ff73
END_OF_LINE
----------------------------------------------
535: if (bVar1) {
	0002df9a:JZ 0x0002e207
END_OF_LINE
----------------------------------------------
536: to_uppcase = true;
	0002dfa0:MOV byte ptr [RBP + -0x6bb],0x1
END_OF_LINE
----------------------------------------------
538: bVar2 = false;
	0002e208:JMP 0x0002e229
END_OF_LINE
----------------------------------------------
539: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
542: case 'b':
	0002dfe7:JZ 0x0002dff7
END_OF_LINE
----------------------------------------------
543: case 'h':
	0002dfe7:JZ 0x0002dff7
END_OF_LINE
----------------------------------------------
544: if (bVar1) {
	0002dfe7:JZ 0x0002dff7
END_OF_LINE
----------------------------------------------
545: to_uppcase = true;
	0002dfe9:MOV byte ptr [RBP + -0x6bb],0x1
END_OF_LINE
----------------------------------------------
547: bVar2 = false;
	0002dff7:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
548: if (modifier != 0x45) goto LAB_0002e229;
	0002dff7:CMP dword ptr [RBP + -0x6b0],0x45
	0002dffe:JNZ 0x0002e20d
	0002e004:JMP 0x0002ffb6
	0002e009:CMP dword ptr [RBP + -0x6b0],0x45
	0002e010:JZ 0x0002ff79
	0002e016:CMP byte ptr [RBP + -0x6ba],0x0
	0002e01d:JZ 0x0002e210
	0002e023:MOV byte ptr [RBP + -0x6bb],0x1
	0002e02a:MOV byte ptr [RBP + -0x6bc],0x0
	0002e031:JMP 0x0002e210
	0002e036:CMP dword ptr [RBP + -0x6b0],0x4f
	0002e03d:JNZ 0x0002e213
	0002e043:JMP 0x0002ffb6
	0002e048:MOVZX ESI,byte ptr [RBP + -0x6bb]
	0002e04f:MOV RDI,qword ptr [RBP + -0x6f0]
	0002e056:MOV RDX,qword ptr [RBP + -0x6e0]
	0002e05d:MOV RAX,qword ptr [RBP + -0x638]
	0002e064:MOV ECX,dword ptr [RBP + 0x18]
	0002e067:PUSH RCX
	0002e068:PUSH qword ptr [RBP + -0x6f8]
	0002e06e:MOV R9,RDI
	0002e071:MOV R8D,ESI
	0002e074:MOV RCX,RDX
	0002e077:MOV RDX,RAX
	0002e07a:MOV RSI,-0x1
	0002e081:MOV EDI,0x0
	0002e086:CALL 0x0002da49
	0002e08b:ADD RSP,0x10
	0002e08f:MOV qword ptr [RBP + -0x5b0],RAX
	0002e096:MOV RAX,qword ptr [RBP + -0x5b0]
	0002e09d:MOV qword ptr [RBP + -0x5a8],RAX
	0002e0a4:MOV EAX,dword ptr [RBP + -0x69c]
	0002e0aa:MOV EDX,0x0
	0002e0af:TEST EAX,EAX
	0002e0b1:CMOVS EAX,EDX
	0002e0b4:CDQE
	0002e0b6:MOV qword ptr [RBP + -0x5a0],RAX
	0002e0bd:MOV RDX,qword ptr [RBP + -0x5a8]
	0002e0c4:MOV RAX,qword ptr [RBP + -0x5a0]
	0002e0cb:CMP RDX,RAX
	0002e0ce:CMOVNC RAX,RDX
	0002e0d2:MOV qword ptr [RBP + -0x598],RAX
	0002e0d9:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e0e0:SUB RAX,qword ptr [RBP + -0x650]
	0002e0e7:CMP qword ptr [RBP + -0x598],RAX
	0002e0ee:JC 0x0002e0fa
	0002e0f0:MOV EAX,0x0
	0002e0f5:JMP 0x000301f9
	0002e0fa:CMP qword ptr [RBP + -0x648],0x0
	0002e102:JZ 0x0002e1f1
	0002e108:CMP dword ptr [RBP + -0x6ac],0x0
	0002e10f:JNZ 0x0002e198
	0002e115:MOV RAX,qword ptr [RBP + -0x5a8]
	0002e11c:CMP RAX,qword ptr [RBP + -0x5a0]
	0002e123:JNC 0x0002e198
	0002e125:MOV EAX,dword ptr [RBP + -0x69c]
	0002e12b:CDQE
	0002e12d:SUB RAX,qword ptr [RBP + -0x5a8]
	0002e134:MOV qword ptr [RBP + -0x590],RAX
	0002e13b:CMP dword ptr [RBP + -0x6b4],0x30
	0002e142:JNZ 0x0002e16f
	0002e144:MOV RDX,qword ptr [RBP + -0x590]
	0002e14b:MOV RAX,qword ptr [RBP + -0x648]
	0002e152:MOV ESI,0x30
	0002e157:MOV RDI,RAX
	0002e15a:CALL 0x00005c10
	0002e15f:MOV RAX,qword ptr [RBP + -0x590]
	0002e166:ADD qword ptr [RBP + -0x648],RAX
	0002e16d:JMP 0x0002e198
	0002e16f:MOV RDX,qword ptr [RBP + -0x590]
	0002e176:MOV RAX,qword ptr [RBP + -0x648]
	0002e17d:MOV ESI,0x20
	0002e182:MOV RDI,RAX
	0002e185:CALL 0x00005c10
	0002e18a:MOV RAX,qword ptr [RBP + -0x590]
	0002e191:ADD qword ptr [RBP + -0x648],RAX
	0002e198:MOVZX R8D,byte ptr [RBP + -0x6bb]
	0002e1a0:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e1a7:SUB RAX,qword ptr [RBP + -0x650]
	0002e1ae:MOV RSI,RAX
	0002e1b1:MOV R9,qword ptr [RBP + -0x6f0]
	0002e1b8:MOV RCX,qword ptr [RBP + -0x6e0]
	0002e1bf:MOV RDX,qword ptr [RBP + -0x638]
	0002e1c6:MOV RAX,qword ptr [RBP + -0x648]
	0002e1cd:MOV EDI,dword ptr [RBP + 0x18]
	0002e1d0:PUSH RDI
	0002e1d1:PUSH qword ptr [RBP + -0x6f8]
	0002e1d7:MOV RDI,RAX
	0002e1da:CALL 0x0002da49
	0002e1df:ADD RSP,0x10
	0002e1e3:MOV RAX,qword ptr [RBP + -0x5a8]
	0002e1ea:ADD qword ptr [RBP + -0x648],RAX
	0002e1f1:MOV RAX,qword ptr [RBP + -0x598]
	0002e1f8:ADD qword ptr [RBP + -0x650],RAX
	0002e1ff:JMP 0x000301ba
	0002e204:NOP
	0002e205:JMP 0x0002e229
	0002e207:NOP
	0002e208:JMP 0x0002e229
	0002e20a:NOP
	0002e20b:JMP 0x0002e229
	0002e20d:NOP
	0002e20e:JMP 0x0002e229
	0002e210:NOP
	0002e211:JMP 0x0002e229
	0002e213:NOP
	0002e214:JMP 0x0002e229
	0002e216:NOP
	0002e217:JMP 0x0002e229
	0002e219:NOP
	0002e21a:JMP 0x0002e229
	0002e21c:NOP
	0002e21d:JMP 0x0002e229
	0002e21f:NOP
	0002e220:JMP 0x0002e229
	0002e222:NOP
	0002e223:JMP 0x0002e229
	0002e225:NOP
	0002e226:JMP 0x0002e229
	0002e228:NOP
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
551: goto joined_r0x0002e544;
	0002e544:JNZ 0x0002e219
END_OF_LINE
----------------------------------------------
552: case 'd':
	0002e56f:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
553: if (modifier != 0x45) {
	0002e56f:CMP dword ptr [RBP + -0x6b0],0x45
	0002e576:JZ 0x0002ff7f
END_OF_LINE
----------------------------------------------
554: digits = 2;
	0002e57c:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
555: number_value = tp->tm_mday;
	0002e58d:MOV EAX,dword ptr [RAX + 0xc]
END_OF_LINE
----------------------------------------------
556: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
559: case 'e':
	0002e598:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
560: if (modifier != 0x45) {
	0002e598:CMP dword ptr [RBP + -0x6b0],0x45
	0002e59f:JZ 0x0002ff82
END_OF_LINE
----------------------------------------------
561: number_value = tp->tm_mday;
	0002e5b6:MOV EAX,dword ptr [RAX + 0xc]
END_OF_LINE
----------------------------------------------
562: LAB_0002e5ca:
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
END_OF_LINE
----------------------------------------------
563: digits = 2;
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
END_OF_LINE
----------------------------------------------
564: if ((pad != 0x30) && (pad != 0x2d)) {
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
	0002e5d1:JZ 0x0002e5e8
	0002e5d3:CMP dword ptr [RBP + -0x6b4],0x2d
	0002e5da:JZ 0x0002e5e8
END_OF_LINE
----------------------------------------------
565: pad = 0x5f;
	0002e5dc:MOV dword ptr [RBP + -0x6b4],0x5f
END_OF_LINE
----------------------------------------------
567: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
570: case 'j':
	0002efef:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
571: if (modifier != 0x45) {
	0002efef:CMP dword ptr [RBP + -0x6b0],0x45
	0002eff6:JZ 0x0002ff94
END_OF_LINE
----------------------------------------------
572: digits = 3;
	0002effc:MOV dword ptr [RBP + -0x6ac],0x3
END_OF_LINE
----------------------------------------------
573: negative_number = tp->tm_yday < -1;
	0002f00d:MOV EAX,dword ptr [RAX + 0x1c]
	0002f010:CMP EAX,-0x1
	0002f013:SETL AL
END_OF_LINE
----------------------------------------------
574: u_number_value = tp->tm_yday + 1;
	0002f023:MOV EAX,dword ptr [RAX + 0x1c]
	0002f026:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
575: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
578: case 'k':
	0002ef9b:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
579: if (modifier != 0x45) {
	0002ef9b:CMP dword ptr [RBP + -0x6b0],0x45
	0002efa2:JZ 0x0002ff8e
END_OF_LINE
----------------------------------------------
580: number_value = tp->tm_hour;
	0002efb9:MOV EAX,dword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
581: goto LAB_0002e5ca;
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
END_OF_LINE
----------------------------------------------
584: case 'l':
	0002efc7:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
585: if (modifier != 0x45) {
	0002efc7:CMP dword ptr [RBP + -0x6b0],0x45
	0002efce:JZ 0x0002ff91
END_OF_LINE
----------------------------------------------
586: number_value = hour12;
	0002efde:MOV EAX,dword ptr [RBP + -0x6b8]
END_OF_LINE
----------------------------------------------
587: goto LAB_0002e5ca;
	0002e5ca:CMP dword ptr [RBP + -0x6b4],0x30
END_OF_LINE
----------------------------------------------
590: case 'm':
	0002f060:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
591: if (modifier != 0x45) {
	0002f060:CMP dword ptr [RBP + -0x6b0],0x45
	0002f067:JZ 0x0002ff9a
END_OF_LINE
----------------------------------------------
592: digits = 2;
	0002f06d:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
593: negative_number = tp->tm_mon < -1;
	0002f07e:MOV EAX,dword ptr [RAX + 0x10]
	0002f081:CMP EAX,-0x1
	0002f084:SETL AL
END_OF_LINE
----------------------------------------------
594: u_number_value = tp->tm_mon + 1;
	0002f094:MOV EAX,dword ptr [RAX + 0x10]
	0002f097:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
595: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
598: case 'n':
	0002f13b:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
599: iVar4 = width;
	0002f13d:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
600: if (width < 0) {
	0002f13b:TEST EAX,EAX
	0002f13d:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
601: iVar4 = 0;
	0002f13d:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
603: uVar8 = (ulong)iVar4;
	0002f140:CDQE
END_OF_LINE
----------------------------------------------
604: uVar11 = uVar8;
	0002f15a:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
605: if (uVar8 < 2) {
	0002f157:CMP RDX,RAX
	0002f15a:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
606: uVar11 = 1;
	0002f149:MOV RDX,qword ptr [RBP + -0x5f0]
	0002f150:MOV RAX,qword ptr [RBP + -0x5e8]
	0002f157:CMP RDX,RAX
	0002f15a:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
608: if (maxsize - i <= uVar11) {
	0002f16c:SUB RAX,qword ptr [RBP + -0x650]
	0002f173:CMP qword ptr [RBP + -0x5e0],RAX
	0002f17a:JC 0x0002f186
END_OF_LINE
----------------------------------------------
609: i = 0;
	0002f17c:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
610: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
612: if (p != (char *)0x0) {
	0002f186:CMP qword ptr [RBP + -0x648],0x0
	0002f18e:JZ 0x0002f23c
END_OF_LINE
----------------------------------------------
613: if (1 < uVar8) {
	0002f1a8:CMP RAX,qword ptr [RBP + -0x5e8]
	0002f1af:JNC 0x0002f224
END_OF_LINE
----------------------------------------------
614: sVar13 = (long)width - 1;
	0002f1b7:CDQE
	0002f1b9:SUB RAX,qword ptr [RBP + -0x5f0]
END_OF_LINE
----------------------------------------------
615: if (pad == 0x30) {
	0002f1c7:CMP dword ptr [RBP + -0x6b4],0x30
	0002f1ce:JNZ 0x0002f1fb
END_OF_LINE
----------------------------------------------
616: memset(p,0x30,sVar13);
	0002f1e6:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
617: p = p + sVar13;
	0002f1f2:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
620: memset(p,0x20,sVar13);
	0002f211:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
621: p = p + sVar13;
	0002f21d:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
624: *p = '\n';
	0002f22b:MOV byte ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
625: p = p + 1;
	0002f235:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
627: i = i + uVar11;
	0002f243:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
628: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
629: case 'q':
	0002f280:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
630: digits = 1;
	0002f280:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
631: negative_number = false;
	0002f28a:MOV byte ptr [RBP + -0x6be],0x0
END_OF_LINE
----------------------------------------------
632: u_number_value = (tp->tm_mon * 0xb >> 5) + 1;
	0002f298:MOV EDX,dword ptr [RAX + 0x10]
	0002f29b:MOV EAX,EDX
	0002f29d:SHL EAX,0x2
	0002f2a0:ADD EAX,EDX
	0002f2a2:ADD EAX,EAX
	0002f2a4:ADD EAX,EDX
	0002f2a6:SAR EAX,0x5
	0002f2a9:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
633: goto LAB_0002e604;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
634: case 'r':
	0002e205:JMP 0x0002e229
END_OF_LINE
----------------------------------------------
635: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
636: case 's':
	0002f2fc:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
637: ltm.tm_sec = tp->tm_sec;
	0002f2fc:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
638: ltm.tm_min = tp->tm_min;
	0002f2fc:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
639: ltm.tm_hour = tp->tm_hour;
	0002f2ff:MOV RBX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
640: ltm.tm_mday = tp->tm_mday;
	0002f2ff:MOV RBX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
641: ltm.tm_mon = tp->tm_mon;
	0002f311:MOV RCX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
642: ltm.tm_year = tp->tm_year;
	0002f311:MOV RCX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
643: ltm.tm_wday = tp->tm_wday;
	0002f315:MOV RBX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
644: ltm.tm_yday = tp->tm_yday;
	0002f315:MOV RBX,qword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
645: ltm.tm_isdst = tp->tm_isdst;
	0002f327:MOV RCX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
646: ltm._36_4_ = *(undefined4 *)&tp->field_0x24;
	0002f327:MOV RCX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
647: ltm.tm_gmtoff = tp->tm_gmtoff;
	0002f32b:MOV RBX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
648: ltm.tm_zone = tp->tm_zone;
	0002f33d:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
649: t = mktime_z(tz,&ltm);
	0002f348:LEA RDX,[RBP + -0x460]
	0002f34f:MOV RAX,qword ptr [RBP + -0x6f8]
	0002f356:MOV RSI,RDX
	0002f359:MOV RDI,RAX
	0002f35c:CALL 0x0002cc40
END_OF_LINE
----------------------------------------------
650: bufp = acStack_411;
	0002f36f:ADD RAX,0x17
END_OF_LINE
----------------------------------------------
651: negative_number = (_Bool)-(char)(t >> 0x3f);
	0002f385:MOV byte ptr [RBP + -0x6be],AL
END_OF_LINE
----------------------------------------------
653: cVar3 = (char)t + (char)(t / 10) * -10;
	0002f3a5:SAR RAX,0x2
	0002f3a9:MOV RSI,RCX
	0002f3ac:SAR RSI,0x3f
	0002f3b0:SUB RAX,RSI
	0002f3b3:MOV RDX,RAX
	0002f3b6:MOV RAX,RDX
	0002f3b9:SHL RAX,0x2
	0002f3bd:ADD RAX,RDX
	0002f3c0:ADD RAX,RAX
	0002f3c3:SUB RCX,RAX
	0002f3c6:MOV RDX,RCX
	0002f3c9:MOV dword ptr [RBP + -0x680],EDX
	0002f3cf:MOV RCX,qword ptr [RBP + -0x618]
	0002f3d6:MOV RDX,0x6666666666666667
	0002f3e0:MOV RAX,RCX
	0002f3e3:IMUL RDX
	0002f3e6:MOV RAX,RDX
	0002f3e9:SAR RAX,0x2
	0002f3ed:SAR RCX,0x3f
	0002f3f1:MOV RDX,RCX
	0002f3f4:SUB RAX,RDX
	0002f3f7:MOV qword ptr [RBP + -0x618],RAX
	0002f3fe:CMP byte ptr [RBP + -0x6be],0x0
	0002f405:JZ 0x0002f41a
END_OF_LINE
----------------------------------------------
654: t = t / 10;
	0002f3e9:SAR RAX,0x2
END_OF_LINE
----------------------------------------------
655: if (negative_number != false) {
	0002f3fe:CMP byte ptr [RBP + -0x6be],0x0
	0002f405:JZ 0x0002f41a
END_OF_LINE
----------------------------------------------
656: cVar3 = -cVar3;
	0002f414:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
658: bufp = bufp + -1;
	0002f425:SUB qword ptr [RBP + -0x630],0x1
END_OF_LINE
----------------------------------------------
659: *bufp = cVar3 + '0';
	0002f414:SUB EAX,EDX
	0002f416:MOV EDX,EAX
	0002f418:JMP 0x0002f425
	0002f41a:MOV EAX,dword ptr [RBP + -0x680]
	0002f420:ADD EAX,0x30
	0002f423:MOV EDX,EAX
	0002f425:SUB qword ptr [RBP + -0x630],0x1
	0002f42d:MOV RAX,qword ptr [RBP + -0x630]
	0002f434:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
660: } while (t != 0);
	0002f436:CMP qword ptr [RBP + -0x618],0x0
	0002f43e:JNZ 0x0002f38b
END_OF_LINE
----------------------------------------------
661: digits = 1;
	0002f444:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
662: bVar1 = false;
	0002f44e:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
663: goto LAB_0002e6ee;
	0002e6ee:MOV EAX,dword ptr [RBP + -0x6ac]
END_OF_LINE
----------------------------------------------
664: case 't':
	0002f495:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
665: iVar4 = width;
	0002f497:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
666: if (width < 0) {
	0002f495:TEST EAX,EAX
	0002f497:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
667: iVar4 = 0;
	0002f497:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
669: uVar8 = (ulong)iVar4;
	0002f49a:CDQE
END_OF_LINE
----------------------------------------------
670: uVar11 = uVar8;
	0002f4b4:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
671: if (uVar8 < 2) {
	0002f4b1:CMP RDX,RAX
	0002f4b4:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
672: uVar11 = 1;
	0002f4a3:MOV RDX,qword ptr [RBP + -0x610]
	0002f4aa:MOV RAX,qword ptr [RBP + -0x608]
	0002f4b1:CMP RDX,RAX
	0002f4b4:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
674: if (maxsize - i <= uVar11) {
	0002f4c6:SUB RAX,qword ptr [RBP + -0x650]
	0002f4cd:CMP qword ptr [RBP + -0x600],RAX
	0002f4d4:JC 0x0002f4e0
END_OF_LINE
----------------------------------------------
675: i = 0;
	0002f4d6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
676: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
678: if (p != (char *)0x0) {
	0002f4e0:CMP qword ptr [RBP + -0x648],0x0
	0002f4e8:JZ 0x0002f596
END_OF_LINE
----------------------------------------------
679: if (1 < uVar8) {
	0002f502:CMP RAX,qword ptr [RBP + -0x608]
	0002f509:JNC 0x0002f57e
END_OF_LINE
----------------------------------------------
680: sVar13 = (long)width - 1;
	0002f511:CDQE
	0002f513:SUB RAX,qword ptr [RBP + -0x610]
END_OF_LINE
----------------------------------------------
681: if (pad == 0x30) {
	0002f521:CMP dword ptr [RBP + -0x6b4],0x30
	0002f528:JNZ 0x0002f555
END_OF_LINE
----------------------------------------------
682: memset(p,0x30,sVar13);
	0002f540:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
683: p = p + sVar13;
	0002f54c:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
686: memset(p,0x20,sVar13);
	0002f56b:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
687: p = p + sVar13;
	0002f577:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
690: *p = '\t';
	0002f585:MOV byte ptr [RAX],0x9
END_OF_LINE
----------------------------------------------
691: p = p + 1;
	0002f58f:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
693: i = i + uVar11;
	0002f59d:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
694: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
695: case 'u':
	0002f5a9:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
696: digits = 1;
	0002f5a9:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
697: number_value = (tp->tm_wday + 6) % 7 + 1;
	0002f5ba:MOV EAX,dword ptr [RAX + 0x18]
	0002f5bd:LEA EDX,[RAX + 0x6]
	0002f5c0:MOVSXD RAX,EDX
	0002f5c3:IMUL RAX,RAX,-0x6db6db6d
	0002f5ca:SHR RAX,0x20
	0002f5ce:ADD EAX,EDX
	0002f5d0:SAR EAX,0x2
	0002f5d3:MOV ECX,EDX
	0002f5d5:SAR ECX,0x1f
	0002f5d8:SUB EAX,ECX
	0002f5da:MOV ECX,EAX
	0002f5dc:SHL ECX,0x3
	0002f5df:SUB ECX,EAX
	0002f5e1:MOV EAX,EDX
	0002f5e3:SUB EAX,ECX
	0002f5e5:ADD EAX,0x1
END_OF_LINE
----------------------------------------------
698: LAB_0002e5e9:
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
699: negative_number = SUB41((uint)number_value >> 0x1f,0);
	0002e5f2:MOV byte ptr [RBP + -0x6be],AL
END_OF_LINE
----------------------------------------------
700: u_number_value = number_value;
	0002e5fe:MOV dword ptr [RBP + -0x6a4],EAX
END_OF_LINE
----------------------------------------------
701: LAB_0002e604:
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
702: bVar1 = false;
	0002e604:MOV byte ptr [RBP + -0x6bd],0x0
END_OF_LINE
----------------------------------------------
703: tz_colon_mask = 0;
	0002e60b:MOV dword ptr [RBP + -0x6a0],0x0
END_OF_LINE
----------------------------------------------
704: LAB_0002e615:
	0002e615:CMP dword ptr [RBP + -0x6b0],0x4f
END_OF_LINE
----------------------------------------------
705: if ((modifier != 0x4f) || (negative_number == true)) {
	0002e615:CMP dword ptr [RBP + -0x6b0],0x4f
	0002e61c:JNZ 0x0002e630
	0002e61e:MOVZX EAX,byte ptr [RBP + -0x6be]
	0002e625:XOR EAX,0x1
	0002e628:TEST AL,AL
	0002e62a:JNZ 0x0002e21c
END_OF_LINE
----------------------------------------------
706: bufp = acStack_411;
	0002e637:ADD RAX,0x17
END_OF_LINE
----------------------------------------------
707: if (negative_number != false) {
	0002e642:CMP byte ptr [RBP + -0x6be],0x0
	0002e649:JZ 0x0002e651
END_OF_LINE
----------------------------------------------
708: u_number_value = -u_number_value;
	0002e64b:NEG dword ptr [RBP + -0x6a4]
END_OF_LINE
----------------------------------------------
711: if ((tz_colon_mask & 1U) != 0) {
	0002e657:AND EAX,0x1
	0002e65a:TEST EAX,EAX
	0002e65c:JZ 0x0002e670
END_OF_LINE
----------------------------------------------
712: bufp = bufp + -1;
	0002e65e:SUB qword ptr [RBP + -0x630],0x1
END_OF_LINE
----------------------------------------------
713: *bufp = ':';
	0002e66d:MOV byte ptr [RAX],0x3a
END_OF_LINE
----------------------------------------------
715: tz_colon_mask = tz_colon_mask >> 1;
	0002e670:SAR dword ptr [RBP + -0x6a0],0x1
END_OF_LINE
----------------------------------------------
716: bufp = bufp + -1;
	0002e6a2:SUB qword ptr [RBP + -0x630],0x1
END_OF_LINE
----------------------------------------------
717: *bufp = (char)u_number_value + (char)(u_number_value / 10) * -10 + '0';
	0002e68d:SHR EDX,0x3
	0002e690:MOV EAX,EDX
	0002e692:SHL EAX,0x2
	0002e695:ADD EAX,EDX
	0002e697:ADD EAX,EAX
	0002e699:SUB ECX,EAX
	0002e69b:MOV EDX,ECX
	0002e69d:MOV EAX,EDX
	0002e69f:ADD EAX,0x30
	0002e6a2:SUB qword ptr [RBP + -0x630],0x1
	0002e6aa:MOV EDX,EAX
	0002e6ac:MOV RAX,qword ptr [RBP + -0x630]
	0002e6b3:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
718: u_number_value = u_number_value / 10;
	0002e6ca:SHR EAX,0x3
END_OF_LINE
----------------------------------------------
719: } while ((u_number_value != 0) || (tz_colon_mask != 0));
	0002e6d3:CMP dword ptr [RBP + -0x6a4],0x0
	0002e6da:JNZ 0x0002e651
	0002e6e0:CMP dword ptr [RBP + -0x6a0],0x0
	0002e6e7:JNZ 0x0002e651
END_OF_LINE
----------------------------------------------
720: LAB_0002e6ee:
	0002e6ee:MOV EAX,dword ptr [RBP + -0x6ac]
END_OF_LINE
----------------------------------------------
721: if (digits < width) {
	0002e6fa:JGE 0x0002e708
END_OF_LINE
----------------------------------------------
722: digits = width;
	0002e702:MOV dword ptr [RBP + -0x6ac],EAX
END_OF_LINE
----------------------------------------------
724: if (negative_number == false) {
	0002e708:CMP byte ptr [RBP + -0x6be],0x0
	0002e70f:JZ 0x0002e718
END_OF_LINE
----------------------------------------------
725: if (bVar1) {
	0002e71f:JZ 0x0002e728
END_OF_LINE
----------------------------------------------
726: cVar3 = '+';
	0002e721:MOV EAX,0x2b
END_OF_LINE
----------------------------------------------
729: cVar3 = '\0';
	0002e728:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
733: cVar3 = '-';
	0002e711:MOV EAX,0x2d
END_OF_LINE
----------------------------------------------
735: if (pad == 0x2d) {
	0002e733:CMP dword ptr [RBP + -0x6b4],0x2d
	0002e73a:JNZ 0x0002e87d
END_OF_LINE
----------------------------------------------
736: if (cVar3 != '\0') {
	0002e740:CMP byte ptr [RBP + -0x6b9],0x0
	0002e747:JZ 0x0002ed83
END_OF_LINE
----------------------------------------------
737: iVar4 = width;
	0002e765:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
738: if (width < 0) {
	0002e763:TEST EAX,EAX
	0002e765:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
739: iVar4 = 0;
	0002e765:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
741: uVar8 = (ulong)iVar4;
	0002e768:CDQE
END_OF_LINE
----------------------------------------------
742: uVar11 = uVar8;
	0002e782:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
743: if (uVar8 < 2) {
	0002e77f:CMP RDX,RAX
	0002e782:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
744: uVar11 = 1;
	0002e771:MOV RDX,qword ptr [RBP + -0x528]
	0002e778:MOV RAX,qword ptr [RBP + -0x520]
	0002e77f:CMP RDX,RAX
	0002e782:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
746: if (maxsize - i <= uVar11) {
	0002e794:SUB RAX,qword ptr [RBP + -0x650]
	0002e79b:CMP qword ptr [RBP + -0x518],RAX
	0002e7a2:JC 0x0002e7ae
END_OF_LINE
----------------------------------------------
747: i = 0;
	0002e7a4:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
748: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
750: if (p != (char *)0x0) {
	0002e7ae:CMP qword ptr [RBP + -0x648],0x0
	0002e7b6:JZ 0x0002e86a
END_OF_LINE
----------------------------------------------
751: if ((digits == 0) && (1 < uVar8)) {
	0002e7bc:CMP dword ptr [RBP + -0x6ac],0x0
	0002e7c3:JNZ 0x0002e84c
	0002e7c9:MOV RAX,qword ptr [RBP + -0x528]
	0002e7d0:CMP RAX,qword ptr [RBP + -0x520]
	0002e7d7:JNC 0x0002e84c
END_OF_LINE
----------------------------------------------
752: memset(p,0x20,(long)width - 1U);
	0002e7df:CDQE
	0002e7e1:SUB RAX,qword ptr [RBP + -0x528]
	0002e7e8:MOV qword ptr [RBP + -0x510],RAX
	0002e7ef:CMP dword ptr [RBP + -0x6b4],0x30
	0002e7f6:JNZ 0x0002e823
	0002e7f8:MOV RDX,qword ptr [RBP + -0x510]
	0002e7ff:MOV RAX,qword ptr [RBP + -0x648]
	0002e806:MOV ESI,0x30
	0002e80b:MOV RDI,RAX
	0002e80e:CALL 0x00005c10
	0002e813:MOV RAX,qword ptr [RBP + -0x510]
	0002e81a:ADD qword ptr [RBP + -0x648],RAX
	0002e821:JMP 0x0002e84c
	0002e823:MOV RDX,qword ptr [RBP + -0x510]
	0002e82a:MOV RAX,qword ptr [RBP + -0x648]
	0002e831:MOV ESI,0x20
	0002e836:MOV RDI,RAX
	0002e839:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
753: p = p + ((long)width - 1U);
	0002e7df:CDQE
	0002e7e1:SUB RAX,qword ptr [RBP + -0x528]
	0002e7e8:MOV qword ptr [RBP + -0x510],RAX
	0002e7ef:CMP dword ptr [RBP + -0x6b4],0x30
	0002e7f6:JNZ 0x0002e823
	0002e7f8:MOV RDX,qword ptr [RBP + -0x510]
	0002e7ff:MOV RAX,qword ptr [RBP + -0x648]
	0002e806:MOV ESI,0x30
	0002e80b:MOV RDI,RAX
	0002e80e:CALL 0x00005c10
	0002e813:MOV RAX,qword ptr [RBP + -0x510]
	0002e81a:ADD qword ptr [RBP + -0x648],RAX
	0002e821:JMP 0x0002e84c
	0002e823:MOV RDX,qword ptr [RBP + -0x510]
	0002e82a:MOV RAX,qword ptr [RBP + -0x648]
	0002e831:MOV ESI,0x20
	0002e836:MOV RDI,RAX
	0002e839:CALL 0x00005c10
	0002e83e:MOV RAX,qword ptr [RBP + -0x510]
	0002e845:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
755: *p = cVar3;
	0002e85a:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
756: p = p + 1;
	0002e863:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
758: i = i + uVar11;
	0002e871:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
762: iVar4 = (digits - (((int)buf + 0x17) - (int)bufp)) - (uint)(cVar3 != '\0');
	0002e883:LEA RAX,[RBP + -0x420]
	0002e88a:ADD RAX,0x17
	0002e88e:SUB RAX,qword ptr [RBP + -0x630]
	0002e895:MOV ECX,EAX
	0002e897:MOV EAX,EDX
	0002e899:SUB EAX,ECX
	0002e89b:CMP byte ptr [RBP + -0x6b9],0x0
	0002e8a2:SETNZ DL
	0002e8a5:MOVZX EDX,DL
	0002e8a8:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
763: if (iVar4 < 1) {
	0002e8b7:JLE 0x0002ec4b
END_OF_LINE
----------------------------------------------
764: if (cVar3 != '\0') {
	0002ec4b:CMP byte ptr [RBP + -0x6b9],0x0
	0002ec52:JZ 0x0002ed83
END_OF_LINE
----------------------------------------------
765: iVar4 = width;
	0002ec70:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
766: if (width < 0) {
	0002ec6e:TEST EAX,EAX
	0002ec70:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
767: iVar4 = 0;
	0002ec70:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
769: uVar8 = (ulong)iVar4;
	0002ec73:CDQE
END_OF_LINE
----------------------------------------------
770: uVar11 = uVar8;
	0002ec8d:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
771: if (uVar8 < 2) {
	0002ec8a:CMP RDX,RAX
	0002ec8d:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
772: uVar11 = 1;
	0002ec7c:MOV RDX,qword ptr [RBP + -0x588]
	0002ec83:MOV RAX,qword ptr [RBP + -0x580]
	0002ec8a:CMP RDX,RAX
	0002ec8d:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
774: if (maxsize - i <= uVar11) {
	0002ec9f:SUB RAX,qword ptr [RBP + -0x650]
	0002eca6:CMP qword ptr [RBP + -0x578],RAX
	0002ecad:JC 0x0002ecb9
END_OF_LINE
----------------------------------------------
775: i = 0;
	0002ecaf:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
776: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
778: if (p != (char *)0x0) {
	0002ecb9:CMP qword ptr [RBP + -0x648],0x0
	0002ecc1:JZ 0x0002ed75
END_OF_LINE
----------------------------------------------
779: if ((digits == 0) && (1 < uVar8)) {
	0002ecc7:CMP dword ptr [RBP + -0x6ac],0x0
	0002ecce:JNZ 0x0002ed57
	0002ecd4:MOV RAX,qword ptr [RBP + -0x588]
	0002ecdb:CMP RAX,qword ptr [RBP + -0x580]
	0002ece2:JNC 0x0002ed57
END_OF_LINE
----------------------------------------------
780: sVar13 = (long)width - 1;
	0002ecea:CDQE
	0002ecec:SUB RAX,qword ptr [RBP + -0x588]
END_OF_LINE
----------------------------------------------
781: if (pad == 0x30) {
	0002ecfa:CMP dword ptr [RBP + -0x6b4],0x30
	0002ed01:JNZ 0x0002ed2e
END_OF_LINE
----------------------------------------------
782: memset(p,0x30,sVar13);
	0002ed19:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
783: p = p + sVar13;
	0002ed25:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
786: memset(p,0x20,sVar13);
	0002ed44:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
787: p = p + sVar13;
	0002ed50:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
790: *p = cVar3;
	0002ed65:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
791: p = p + 1;
	0002ed6e:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
793: i = i + uVar11;
	0002ed7c:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
796: else if (pad == 0x5f) {
	0002e8bd:CMP dword ptr [RBP + -0x6b4],0x5f
	0002e8c4:JNZ 0x0002ea99
END_OF_LINE
----------------------------------------------
797: if (maxsize - i <= (ulong)(long)iVar4) {
	0002e8d0:MOVSXD RDX,EAX
	0002e8d3:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e8da:SUB RAX,qword ptr [RBP + -0x650]
	0002e8e1:CMP RDX,RAX
	0002e8e4:JC 0x0002e8f0
END_OF_LINE
----------------------------------------------
798: i = 0;
	0002e8e6:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
799: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
801: if (p != (char *)0x0) {
	0002e8f0:CMP qword ptr [RBP + -0x648],0x0
	0002e8f8:JZ 0x0002e926
END_OF_LINE
----------------------------------------------
802: memset(p,0x20,(long)iVar4);
	0002e900:MOVSXD RDX,EAX
	0002e903:MOV RAX,qword ptr [RBP + -0x648]
	0002e90a:MOV ESI,0x20
	0002e90f:MOV RDI,RAX
	0002e912:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
803: p = p + iVar4;
	0002e91d:CDQE
	0002e91f:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
805: i = i + (long)iVar4;
	0002e92c:CDQE
	0002e92e:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
806: if (iVar4 < width) {
	0002e941:JLE 0x0002e951
END_OF_LINE
----------------------------------------------
807: width = width - iVar4;
	0002e949:SUB EAX,dword ptr [RBP + -0x65c]
END_OF_LINE
----------------------------------------------
810: width = 0;
	0002e951:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
812: if (cVar3 != '\0') {
	0002e95c:CMP byte ptr [RBP + -0x6b9],0x0
	0002e963:JZ 0x0002ed83
END_OF_LINE
----------------------------------------------
813: iVar4 = width;
	0002e981:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
814: if (width < 0) {
	0002e97f:TEST EAX,EAX
	0002e981:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
815: iVar4 = 0;
	0002e981:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
817: uVar8 = (ulong)iVar4;
	0002e984:CDQE
END_OF_LINE
----------------------------------------------
818: uVar11 = uVar8;
	0002e99e:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
819: if (uVar8 < 2) {
	0002e99b:CMP RDX,RAX
	0002e99e:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
820: uVar11 = 1;
	0002e98d:MOV RDX,qword ptr [RBP + -0x548]
	0002e994:MOV RAX,qword ptr [RBP + -0x540]
	0002e99b:CMP RDX,RAX
	0002e99e:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
822: if (maxsize - i <= uVar11) {
	0002e9b0:SUB RAX,qword ptr [RBP + -0x650]
	0002e9b7:CMP qword ptr [RBP + -0x538],RAX
	0002e9be:JC 0x0002e9ca
END_OF_LINE
----------------------------------------------
823: i = 0;
	0002e9c0:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
824: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
826: if (p != (char *)0x0) {
	0002e9ca:CMP qword ptr [RBP + -0x648],0x0
	0002e9d2:JZ 0x0002ea86
END_OF_LINE
----------------------------------------------
827: if ((digits == 0) && (1 < uVar8)) {
	0002e9d8:CMP dword ptr [RBP + -0x6ac],0x0
	0002e9df:JNZ 0x0002ea68
	0002e9e5:MOV RAX,qword ptr [RBP + -0x548]
	0002e9ec:CMP RAX,qword ptr [RBP + -0x540]
	0002e9f3:JNC 0x0002ea68
END_OF_LINE
----------------------------------------------
828: memset(p,0x20,(long)width - 1U);
	0002e9fb:CDQE
	0002e9fd:SUB RAX,qword ptr [RBP + -0x548]
	0002ea04:MOV qword ptr [RBP + -0x530],RAX
	0002ea0b:CMP dword ptr [RBP + -0x6b4],0x30
	0002ea12:JNZ 0x0002ea3f
	0002ea14:MOV RDX,qword ptr [RBP + -0x530]
	0002ea1b:MOV RAX,qword ptr [RBP + -0x648]
	0002ea22:MOV ESI,0x30
	0002ea27:MOV RDI,RAX
	0002ea2a:CALL 0x00005c10
	0002ea2f:MOV RAX,qword ptr [RBP + -0x530]
	0002ea36:ADD qword ptr [RBP + -0x648],RAX
	0002ea3d:JMP 0x0002ea68
	0002ea3f:MOV RDX,qword ptr [RBP + -0x530]
	0002ea46:MOV RAX,qword ptr [RBP + -0x648]
	0002ea4d:MOV ESI,0x20
	0002ea52:MOV RDI,RAX
	0002ea55:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
829: p = p + ((long)width - 1U);
	0002e9fb:CDQE
	0002e9fd:SUB RAX,qword ptr [RBP + -0x548]
	0002ea04:MOV qword ptr [RBP + -0x530],RAX
	0002ea0b:CMP dword ptr [RBP + -0x6b4],0x30
	0002ea12:JNZ 0x0002ea3f
	0002ea14:MOV RDX,qword ptr [RBP + -0x530]
	0002ea1b:MOV RAX,qword ptr [RBP + -0x648]
	0002ea22:MOV ESI,0x30
	0002ea27:MOV RDI,RAX
	0002ea2a:CALL 0x00005c10
	0002ea2f:MOV RAX,qword ptr [RBP + -0x530]
	0002ea36:ADD qword ptr [RBP + -0x648],RAX
	0002ea3d:JMP 0x0002ea68
	0002ea3f:MOV RDX,qword ptr [RBP + -0x530]
	0002ea46:MOV RAX,qword ptr [RBP + -0x648]
	0002ea4d:MOV ESI,0x20
	0002ea52:MOV RDI,RAX
	0002ea55:CALL 0x00005c10
	0002ea5a:MOV RAX,qword ptr [RBP + -0x530]
	0002ea61:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
831: *p = cVar3;
	0002ea76:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
832: p = p + 1;
	0002ea7f:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
834: i = i + uVar11;
	0002ea8d:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
838: if (maxsize - i <= (ulong)(long)digits) {
	0002ea9f:MOVSXD RDX,EAX
	0002eaa2:MOV RAX,qword ptr [RBP + -0x6d0]
	0002eaa9:SUB RAX,qword ptr [RBP + -0x650]
	0002eab0:CMP RDX,RAX
	0002eab3:JC 0x0002eabf
END_OF_LINE
----------------------------------------------
839: i = 0;
	0002eab5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
840: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
842: if (cVar3 != '\0') {
	0002eabf:CMP byte ptr [RBP + -0x6b9],0x0
	0002eac6:JZ 0x0002ebf7
END_OF_LINE
----------------------------------------------
843: iVar6 = width;
	0002eae4:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
844: if (width < 0) {
	0002eae2:TEST EAX,EAX
	0002eae4:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
845: iVar6 = 0;
	0002eae4:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
847: uVar8 = (ulong)iVar6;
	0002eae7:CDQE
END_OF_LINE
----------------------------------------------
848: uVar11 = uVar8;
	0002eb01:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
849: if (uVar8 < 2) {
	0002eafe:CMP RDX,RAX
	0002eb01:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
850: uVar11 = 1;
	0002eaf0:MOV RDX,qword ptr [RBP + -0x568]
	0002eaf7:MOV RAX,qword ptr [RBP + -0x560]
	0002eafe:CMP RDX,RAX
	0002eb01:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
852: if (maxsize - i <= uVar11) {
	0002eb13:SUB RAX,qword ptr [RBP + -0x650]
	0002eb1a:CMP qword ptr [RBP + -0x558],RAX
	0002eb21:JC 0x0002eb2d
END_OF_LINE
----------------------------------------------
853: i = 0;
	0002eb23:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
854: LAB_000301f9:
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
855: if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
	000301fd:SUB RDX,qword ptr FS:[0x28]
	00030206:JZ 0x0003020d
END_OF_LINE
----------------------------------------------
857: __stack_chk_fail();
	00030208:CALL 0x00005b00
END_OF_LINE
----------------------------------------------
859: return i;
	00030212:RET
END_OF_LINE
----------------------------------------------
861: if (p != (char *)0x0) {
	0002eb2d:CMP qword ptr [RBP + -0x648],0x0
	0002eb35:JZ 0x0002ebe9
END_OF_LINE
----------------------------------------------
862: if ((digits == 0) && (1 < uVar8)) {
	0002eb3b:CMP dword ptr [RBP + -0x6ac],0x0
	0002eb42:JNZ 0x0002ebcb
	0002eb48:MOV RAX,qword ptr [RBP + -0x568]
	0002eb4f:CMP RAX,qword ptr [RBP + -0x560]
	0002eb56:JNC 0x0002ebcb
END_OF_LINE
----------------------------------------------
863: sVar13 = (long)width - 1;
	0002eb5e:CDQE
	0002eb60:SUB RAX,qword ptr [RBP + -0x568]
END_OF_LINE
----------------------------------------------
864: if (pad == 0x30) {
	0002eb6e:CMP dword ptr [RBP + -0x6b4],0x30
	0002eb75:JNZ 0x0002eba2
END_OF_LINE
----------------------------------------------
865: memset(p,0x30,sVar13);
	0002eb8d:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
866: p = p + sVar13;
	0002eb99:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
869: memset(p,0x20,sVar13);
	0002ebb8:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
870: p = p + sVar13;
	0002ebc4:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
873: *p = cVar3;
	0002ebd9:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
874: p = p + 1;
	0002ebe2:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
876: i = i + uVar11;
	0002ebf0:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
878: if (p != (char *)0x0) {
	0002ebf7:CMP qword ptr [RBP + -0x648],0x0
	0002ebff:JZ 0x0002ec2d
END_OF_LINE
----------------------------------------------
879: memset(p,0x30,(long)iVar4);
	0002ec07:MOVSXD RDX,EAX
	0002ec0a:MOV RAX,qword ptr [RBP + -0x648]
	0002ec11:MOV ESI,0x30
	0002ec16:MOV RDI,RAX
	0002ec19:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
880: p = p + iVar4;
	0002ec24:CDQE
	0002ec26:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
882: i = i + (long)iVar4;
	0002ec33:CDQE
	0002ec35:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
883: width = 0;
	0002ec3c:MOV dword ptr [RBP + -0x69c],0x0
END_OF_LINE
----------------------------------------------
886: __n = acStack_411 + -(long)bufp;
	0002ed8e:SUB RAX,qword ptr [RBP + -0x630]
END_OF_LINE
----------------------------------------------
887: iVar4 = width;
	0002eda9:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
888: if (width < 0) {
	0002eda7:TEST EAX,EAX
	0002eda9:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
889: iVar4 = 0;
	0002eda9:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
891: pcVar9 = (char *)(long)iVar4;
	0002edac:CDQE
END_OF_LINE
----------------------------------------------
892: pcVar10 = pcVar9;
	0002edc6:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
893: if (pcVar9 <= __n) {
	0002edc3:CMP RDX,RAX
	0002edc6:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
894: pcVar10 = __n;
	0002edc6:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
896: if ((char *)(maxsize - i) <= pcVar10) {
	0002edd8:SUB RAX,qword ptr [RBP + -0x650]
	0002eddf:CMP qword ptr [RBP + -0x4f8],RAX
	0002ede6:JC 0x0002edf2
END_OF_LINE
----------------------------------------------
897: i = 0;
	0002ede8:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
898: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
900: if (p != (char *)0x0) {
	0002edf2:CMP qword ptr [RBP + -0x648],0x0
	0002edfa:JZ 0x0002ef14
END_OF_LINE
----------------------------------------------
901: if ((digits == 0) && (__n < pcVar9)) {
	0002ee00:CMP dword ptr [RBP + -0x6ac],0x0
	0002ee07:JNZ 0x0002ee90
	0002ee0d:MOV RAX,qword ptr [RBP + -0x508]
	0002ee14:CMP RAX,qword ptr [RBP + -0x500]
	0002ee1b:JNC 0x0002ee90
END_OF_LINE
----------------------------------------------
902: sVar13 = (long)width - (long)__n;
	0002ee23:CDQE
	0002ee25:SUB RAX,qword ptr [RBP + -0x508]
END_OF_LINE
----------------------------------------------
903: if (pad == 0x30) {
	0002ee33:CMP dword ptr [RBP + -0x6b4],0x30
	0002ee3a:JNZ 0x0002ee67
END_OF_LINE
----------------------------------------------
904: memset(p,0x30,sVar13);
	0002ee52:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
905: p = p + sVar13;
	0002ee5e:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
908: memset(p,0x20,sVar13);
	0002ee7d:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
909: p = p + sVar13;
	0002ee89:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
912: if (to_uppcase == false) {
	0002eebb:CMP byte ptr [RBP + -0x6bb],0x0
	0002eec2:JZ 0x0002eee6
END_OF_LINE
----------------------------------------------
913: memcpy(p,bufp,(size_t)__n);
	0002ef01:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
916: memcpy_uppcase(p,bufp,(size_t)__n);
	0002eedf:CALL 0x0002d924
END_OF_LINE
----------------------------------------------
918: p = p + (long)__n;
	0002ef0d:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
920: i = (size_t)(pcVar10 + i);
	0002ef1b:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
921: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
923: goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
924: case 'w':
	0002fa05:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
925: if (modifier != 0x45) {
	0002fa05:CMP dword ptr [RBP + -0x6b0],0x45
	0002fa0c:JZ 0x0002ffac
END_OF_LINE
----------------------------------------------
926: digits = 1;
	0002fa12:MOV dword ptr [RBP + -0x6ac],0x1
END_OF_LINE
----------------------------------------------
927: number_value = tp->tm_wday;
	0002fa23:MOV EAX,dword ptr [RAX + 0x18]
END_OF_LINE
----------------------------------------------
928: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
932: joined_r0x0002e544:
	0002e544:JNZ 0x0002e219
END_OF_LINE
----------------------------------------------
933: if (modifier != 0x4f) goto LAB_0002e229;
	0002e229:LEA RAX,[RBP + -0x425]
	0002e230:MOV qword ptr [RBP + -0x620],RAX
	0002e237:MOV RAX,qword ptr [RBP + -0x620]
	0002e23e:LEA RDX,[RAX + 0x1]
	0002e242:MOV qword ptr [RBP + -0x620],RDX
	0002e249:MOV byte ptr [RAX],0x20
	0002e24c:MOV RAX,qword ptr [RBP + -0x620]
	0002e253:LEA RDX,[RAX + 0x1]
	0002e257:MOV qword ptr [RBP + -0x620],RDX
	0002e25e:MOV byte ptr [RAX],0x25
	0002e261:CMP dword ptr [RBP + -0x6b0],0x0
	0002e268:JZ 0x0002e284
	0002e26a:MOV RAX,qword ptr [RBP + -0x620]
	0002e271:LEA RDX,[RAX + 0x1]
	0002e275:MOV qword ptr [RBP + -0x620],RDX
	0002e27c:MOV EDX,dword ptr [RBP + -0x6b0]
	0002e282:MOV byte ptr [RAX],DL
	0002e284:MOV RAX,qword ptr [RBP + -0x620]
	0002e28b:LEA RDX,[RAX + 0x1]
	0002e28f:MOV qword ptr [RBP + -0x620],RDX
	0002e296:MOV EDX,dword ptr [RBP + -0x698]
	0002e29c:MOV byte ptr [RAX],DL
	0002e29e:MOV RAX,qword ptr [RBP + -0x620]
	0002e2a5:MOV byte ptr [RAX],0x0
	0002e2a8:MOV RCX,qword ptr [RBP + -0x6e0]
	0002e2af:LEA RDX,[RBP + -0x425]
	0002e2b6:LEA RAX,[RBP + -0x420]
	0002e2bd:MOV ESI,0x400
	0002e2c2:MOV RDI,RAX
	0002e2c5:CALL 0x00005ef0
	0002e2ca:MOV qword ptr [RBP + -0x4e8],RAX
	0002e2d1:CMP qword ptr [RBP + -0x4e8],0x0
	0002e2d9:JZ 0x000301b6
	0002e2df:MOV RAX,qword ptr [RBP + -0x4e8]
	0002e2e6:SUB RAX,0x1
	0002e2ea:MOV qword ptr [RBP + -0x4e0],RAX
	0002e2f1:MOV EAX,dword ptr [RBP + -0x69c]
	0002e2f7:MOV EDX,0x0
	0002e2fc:TEST EAX,EAX
	0002e2fe:CMOVS EAX,EDX
	0002e301:CDQE
	0002e303:MOV qword ptr [RBP + -0x4d8],RAX
	0002e30a:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e311:MOV RAX,qword ptr [RBP + -0x4d8]
	0002e318:CMP RDX,RAX
	0002e31b:CMOVNC RAX,RDX
	0002e31f:MOV qword ptr [RBP + -0x4d0],RAX
	0002e326:MOV RAX,qword ptr [RBP + -0x6d0]
	0002e32d:SUB RAX,qword ptr [RBP + -0x650]
	0002e334:CMP qword ptr [RBP + -0x4d0],RAX
	0002e33b:JC 0x0002e347
	0002e33d:MOV EAX,0x0
	0002e342:JMP 0x000301f9
	0002e347:CMP qword ptr [RBP + -0x648],0x0
	0002e34f:JZ 0x0002e475
	0002e355:CMP dword ptr [RBP + -0x6ac],0x0
	0002e35c:JNZ 0x0002e3e5
	0002e362:MOV RAX,qword ptr [RBP + -0x4e0]
	0002e369:CMP RAX,qword ptr [RBP + -0x4d8]
	0002e370:JNC 0x0002e3e5
	0002e372:MOV EAX,dword ptr [RBP + -0x69c]
	0002e378:CDQE
	0002e37a:SUB RAX,qword ptr [RBP + -0x4e0]
	0002e381:MOV qword ptr [RBP + -0x4c8],RAX
	0002e388:CMP dword ptr [RBP + -0x6b4],0x30
	0002e38f:JNZ 0x0002e3bc
	0002e391:MOV RDX,qword ptr [RBP + -0x4c8]
	0002e398:MOV RAX,qword ptr [RBP + -0x648]
	0002e39f:MOV ESI,0x30
	0002e3a4:MOV RDI,RAX
	0002e3a7:CALL 0x00005c10
	0002e3ac:MOV RAX,qword ptr [RBP + -0x4c8]
	0002e3b3:ADD qword ptr [RBP + -0x648],RAX
	0002e3ba:JMP 0x0002e3e5
	0002e3bc:MOV RDX,qword ptr [RBP + -0x4c8]
	0002e3c3:MOV RAX,qword ptr [RBP + -0x648]
	0002e3ca:MOV ESI,0x20
	0002e3cf:MOV RDI,RAX
	0002e3d2:CALL 0x00005c10
	0002e3d7:MOV RAX,qword ptr [RBP + -0x4c8]
	0002e3de:ADD qword ptr [RBP + -0x648],RAX
	0002e3e5:CMP byte ptr [RBP + -0x6bc],0x0
	0002e3ec:JZ 0x0002e414
	0002e3ee:LEA RAX,[RBP + -0x420]
	0002e3f5:ADD RAX,0x1
	0002e3f9:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e400:MOV RCX,qword ptr [RBP + -0x648]
	0002e407:MOV RSI,RAX
	0002e40a:MOV RDI,RCX
	0002e40d:CALL 0x0002d8cc
	0002e412:JMP 0x0002e467
	0002e414:CMP byte ptr [RBP + -0x6bb],0x0
	0002e41b:JZ 0x0002e443
	0002e41d:LEA RAX,[RBP + -0x420]
	0002e424:ADD RAX,0x1
	0002e428:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e42f:MOV RCX,qword ptr [RBP + -0x648]
	0002e436:MOV RSI,RAX
	0002e439:MOV RDI,RCX
	0002e43c:CALL 0x0002d924
	0002e441:JMP 0x0002e467
	0002e443:LEA RAX,[RBP + -0x420]
	0002e44a:ADD RAX,0x1
	0002e44e:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e455:MOV RCX,qword ptr [RBP + -0x648]
	0002e45c:MOV RSI,RAX
	0002e45f:MOV RDI,RCX
	0002e462:CALL 0x00005d90
	0002e467:MOV RAX,qword ptr [RBP + -0x4e0]
	0002e46e:ADD qword ptr [RBP + -0x648],RAX
	0002e475:MOV RAX,qword ptr [RBP + -0x4d0]
	0002e47c:ADD qword ptr [RBP + -0x650],RAX
	0002e483:JMP 0x000301b6
	0002e488:CMP dword ptr [RBP + -0x6b0],0x45
	0002e48f:JZ 0x0002e216
	0002e495:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e49c:MOV EAX,dword ptr [RAX + 0x14]
	0002e49f:MOVSXD RDX,EAX
	0002e4a2:IMUL RDX,RDX,0x51eb851f
	0002e4a9:SHR RDX,0x20
	0002e4ad:SAR EDX,0x5
	0002e4b0:SAR EAX,0x1f
	0002e4b3:MOV ECX,EAX
	0002e4b5:MOV EAX,EDX
	0002e4b7:SUB EAX,ECX
	0002e4b9:ADD EAX,0x13
	0002e4bc:MOV dword ptr [RBP + -0x670],EAX
	0002e4c2:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e4c9:MOV EDX,dword ptr [RAX + 0x14]
	0002e4cc:MOVSXD RAX,EDX
	0002e4cf:IMUL RAX,RAX,0x51eb851f
	0002e4d6:SHR RAX,0x20
	0002e4da:SAR EAX,0x5
	0002e4dd:MOV ECX,EDX
	0002e4df:SAR ECX,0x1f
	0002e4e2:SUB EAX,ECX
	0002e4e4:IMUL ECX,EAX,0x64
	0002e4e7:MOV EAX,EDX
	0002e4e9:SUB EAX,ECX
	0002e4eb:TEST EAX,EAX
	0002e4ed:JNS 0x0002e4ff
	0002e4ef:CMP dword ptr [RBP + -0x670],0x0
	0002e4f6:JLE 0x0002e4ff
	0002e4f8:MOV EAX,0x1
	0002e4fd:JMP 0x0002e504
	0002e4ff:MOV EAX,0x0
	0002e504:SUB dword ptr [RBP + -0x670],EAX
	0002e50a:MOV dword ptr [RBP + -0x6ac],0x2
	0002e514:MOV RAX,qword ptr [RBP + -0x6e0]
	0002e51b:MOV EAX,dword ptr [RAX + 0x14]
	0002e51e:CMP EAX,0xfffff894
	0002e523:SETL AL
	0002e526:MOV byte ptr [RBP + -0x6be],AL
	0002e52c:MOV EAX,dword ptr [RBP + -0x670]
	0002e532:MOV dword ptr [RBP + -0x6a4],EAX
	0002e538:JMP 0x0002e604
	0002e53d:CMP dword ptr [RBP + -0x6b0],0x4f
	0002e544:JNZ 0x0002e219
END_OF_LINE
----------------------------------------------
935: case 'y':
	0002fa87:CMP dword ptr [RBP + -0x6b0],0x45
END_OF_LINE
----------------------------------------------
936: if (modifier != 0x45) {
	0002fa87:CMP dword ptr [RBP + -0x6b0],0x45
	0002fa8e:JZ 0x0002e228
END_OF_LINE
----------------------------------------------
937: yy_1 = tp->tm_year % 100;
	0002fa9b:MOV EAX,dword ptr [RAX + 0x14]
	0002fa9e:MOVSXD RDX,EAX
	0002faa1:IMUL RDX,RDX,0x51eb851f
	0002faa8:SHR RDX,0x20
	0002faac:SAR EDX,0x5
	0002faaf:MOV ECX,EAX
	0002fab1:SAR ECX,0x1f
	0002fab4:SUB EDX,ECX
	0002fab6:MOV dword ptr [RBP + -0x688],EDX
	0002fabc:MOV EDX,dword ptr [RBP + -0x688]
	0002fac2:IMUL EDX,EDX,0x64
	0002fac5:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
938: if (yy_1 < 0) {
	0002facd:CMP dword ptr [RBP + -0x688],0x0
	0002fad4:JNS 0x0002fb00
END_OF_LINE
----------------------------------------------
939: if (tp->tm_year < -0x76c) {
	0002fadd:MOV EAX,dword ptr [RAX + 0x14]
	0002fae0:CMP EAX,0xfffff894
	0002fae5:JGE 0x0002faf1
END_OF_LINE
----------------------------------------------
940: yy_1 = -yy_1;
	0002faed:NEG EAX
END_OF_LINE
----------------------------------------------
943: yy_1 = yy_1 + 100;
	0002faf7:ADD EAX,0x64
END_OF_LINE
----------------------------------------------
946: digits = 2;
	0002fb00:MOV dword ptr [RBP + -0x6ac],0x2
END_OF_LINE
----------------------------------------------
947: number_value = yy_1;
	0002fb0a:MOV EAX,dword ptr [RBP + -0x688]
END_OF_LINE
----------------------------------------------
948: goto LAB_0002e5e9;
	0002e5e9:MOV EAX,dword ptr [RBP + -0x6a8]
END_OF_LINE
----------------------------------------------
950: LAB_0002e229:
	0002e229:LEA RAX,[RBP + -0x425]
END_OF_LINE
----------------------------------------------
951: ufmt[0] = ' ';
	0002e249:MOV byte ptr [RAX],0x20
END_OF_LINE
----------------------------------------------
952: u = ufmt + 2;
	0002e253:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
953: ufmt[1] = '%';
	0002e25e:MOV byte ptr [RAX],0x25
END_OF_LINE
----------------------------------------------
954: if (modifier != 0) {
	0002e261:CMP dword ptr [RBP + -0x6b0],0x0
	0002e268:JZ 0x0002e284
END_OF_LINE
----------------------------------------------
955: u = ufmt + 3;
	0002e271:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
956: ufmt[2] = (char)modifier;
	0002e282:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
958: *u = (char)format_char;
	0002e29c:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
959: u[1] = '\0';
	0002e28b:LEA RDX,[RAX + 0x1]
	0002e28f:MOV qword ptr [RBP + -0x620],RDX
	0002e296:MOV EDX,dword ptr [RBP + -0x698]
	0002e29c:MOV byte ptr [RAX],DL
	0002e29e:MOV RAX,qword ptr [RBP + -0x620]
	0002e2a5:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
960: sVar13 = strftime(buf,0x400,ufmt,(tm *)tp);
	0002e2af:LEA RDX,[RBP + -0x425]
	0002e2b6:LEA RAX,[RBP + -0x420]
	0002e2bd:MOV ESI,0x400
	0002e2c2:MOV RDI,RAX
	0002e2c5:CALL 0x00005ef0
END_OF_LINE
----------------------------------------------
961: if (sVar13 != 0) {
	0002e2d1:CMP qword ptr [RBP + -0x4e8],0x0
	0002e2d9:JZ 0x000301b6
END_OF_LINE
----------------------------------------------
962: uVar11 = sVar13 - 1;
	0002e2e6:SUB RAX,0x1
END_OF_LINE
----------------------------------------------
963: iVar4 = width;
	0002e2fe:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
964: if (width < 0) {
	0002e2fc:TEST EAX,EAX
	0002e2fe:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
965: iVar4 = 0;
	0002e2fe:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
967: uVar12 = (ulong)iVar4;
	0002e301:CDQE
END_OF_LINE
----------------------------------------------
968: uVar8 = uVar12;
	0002e31b:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
969: if (uVar12 <= uVar11) {
	0002e318:CMP RDX,RAX
	0002e31b:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
970: uVar8 = uVar11;
	0002e31b:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
972: if (maxsize - i <= uVar8) {
	0002e32d:SUB RAX,qword ptr [RBP + -0x650]
	0002e334:CMP qword ptr [RBP + -0x4d0],RAX
	0002e33b:JC 0x0002e347
END_OF_LINE
----------------------------------------------
973: i = 0;
	0002e33d:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
974: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
976: if (p != (char *)0x0) {
	0002e347:CMP qword ptr [RBP + -0x648],0x0
	0002e34f:JZ 0x0002e475
END_OF_LINE
----------------------------------------------
977: if ((digits == 0) && (uVar11 < uVar12)) {
	0002e355:CMP dword ptr [RBP + -0x6ac],0x0
	0002e35c:JNZ 0x0002e3e5
	0002e362:MOV RAX,qword ptr [RBP + -0x4e0]
	0002e369:CMP RAX,qword ptr [RBP + -0x4d8]
	0002e370:JNC 0x0002e3e5
END_OF_LINE
----------------------------------------------
978: sVar13 = (long)width - uVar11;
	0002e378:CDQE
	0002e37a:SUB RAX,qword ptr [RBP + -0x4e0]
END_OF_LINE
----------------------------------------------
979: if (pad == 0x30) {
	0002e388:CMP dword ptr [RBP + -0x6b4],0x30
	0002e38f:JNZ 0x0002e3bc
END_OF_LINE
----------------------------------------------
980: memset(p,0x30,sVar13);
	0002e3a7:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
981: p = p + sVar13;
	0002e3b3:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
984: memset(p,0x20,sVar13);
	0002e3d2:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
985: p = p + sVar13;
	0002e3de:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
988: if (bVar2) {
	0002e3ec:JZ 0x0002e414
END_OF_LINE
----------------------------------------------
989: memcpy_lowcase(p,buf + 1,uVar11);
	0002e3f5:ADD RAX,0x1
	0002e3f9:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e400:MOV RCX,qword ptr [RBP + -0x648]
	0002e407:MOV RSI,RAX
	0002e40a:MOV RDI,RCX
	0002e40d:CALL 0x0002d8cc
END_OF_LINE
----------------------------------------------
991: else if (to_uppcase == false) {
	0002e414:CMP byte ptr [RBP + -0x6bb],0x0
	0002e41b:JZ 0x0002e443
END_OF_LINE
----------------------------------------------
992: memcpy(p,buf + 1,uVar11);
	0002e44a:ADD RAX,0x1
	0002e44e:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e455:MOV RCX,qword ptr [RBP + -0x648]
	0002e45c:MOV RSI,RAX
	0002e45f:MOV RDI,RCX
	0002e462:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
995: memcpy_uppcase(p,buf + 1,uVar11);
	0002e424:ADD RAX,0x1
	0002e428:MOV RDX,qword ptr [RBP + -0x4e0]
	0002e42f:MOV RCX,qword ptr [RBP + -0x648]
	0002e436:MOV RSI,RAX
	0002e439:MOV RDI,RCX
	0002e43c:CALL 0x0002d924
END_OF_LINE
----------------------------------------------
997: p = p + uVar11;
	0002e46e:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
999: i = i + uVar8;
	0002e47c:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
1001: goto LAB_000301ba;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
1002: case 'z':
	0002fd2d:MOV qword ptr [RBP + -0x628],0x0
END_OF_LINE
----------------------------------------------
1003: colons = 0;
	0002fd2d:MOV qword ptr [RBP + -0x628],0x0
END_OF_LINE
----------------------------------------------
1004: LAB_0002fd38:
	0002fd38:MOV RAX,qword ptr [RBP + -0x6e0]
END_OF_LINE
----------------------------------------------
1005: if (tp->tm_isdst < 0) goto LAB_000301ba;
	0002fd3f:MOV EAX,dword ptr [RAX + 0x20]
	0002fd42:TEST EAX,EAX
	0002fd44:JS 0x000301b9
	0002fd4a:MOV RAX,qword ptr [RBP + -0x6e0]
	0002fd51:MOV RAX,qword ptr [RAX + 0x28]
	0002fd55:MOV dword ptr [RBP + -0x66c],EAX
	0002fd5b:CMP dword ptr [RBP + -0x66c],0x0
	0002fd62:JS 0x0002fd7b
	0002fd64:CMP dword ptr [RBP + -0x66c],0x0
	0002fd6b:JNZ 0x0002fd82
	0002fd6d:MOV RAX,qword ptr [RBP + -0x658]
	0002fd74:MOVZX EAX,byte ptr [RAX]
	0002fd77:CMP AL,0x2d
	0002fd79:JNZ 0x0002fd82
	0002fd7b:MOV EAX,0x1
	0002fd80:JMP 0x0002fd87
	0002fd82:MOV EAX,0x0
	0002fd87:MOV byte ptr [RBP + -0x6be],AL
	0002fd8d:AND byte ptr [RBP + -0x6be],0x1
	0002fd94:MOV EAX,dword ptr [RBP + -0x66c]
	0002fd9a:MOVSXD RDX,EAX
	0002fd9d:IMUL RDX,RDX,-0x6e5d4c3b
	0002fda4:SHR RDX,0x20
	0002fda8:ADD EDX,EAX
	0002fdaa:SAR EDX,0xb
	0002fdad:SAR EAX,0x1f
	0002fdb0:MOV ECX,EAX
	0002fdb2:MOV EAX,EDX
	0002fdb4:SUB EAX,ECX
	0002fdb6:MOV dword ptr [RBP + -0x668],EAX
	0002fdbc:MOV EAX,dword ptr [RBP + -0x66c]
	0002fdc2:MOVSXD RDX,EAX
	0002fdc5:IMUL RDX,RDX,-0x77777777
	0002fdcc:SHR RDX,0x20
	0002fdd0:ADD EDX,EAX
	0002fdd2:SAR EDX,0x5
	0002fdd5:SAR EAX,0x1f
	0002fdd8:MOV ECX,EAX
	0002fdda:MOV EAX,EDX
	0002fddc:SUB EAX,ECX
	0002fdde:MOVSXD RDX,EAX
	0002fde1:IMUL RDX,RDX,-0x77777777
	0002fde8:SHR RDX,0x20
	0002fdec:ADD EDX,EAX
	0002fdee:SAR EDX,0x5
	0002fdf1:MOV ECX,EAX
	0002fdf3:SAR ECX,0x1f
	0002fdf6:SUB EDX,ECX
	0002fdf8:MOV dword ptr [RBP + -0x664],EDX
	0002fdfe:MOV EDX,dword ptr [RBP + -0x664]
	0002fe04:IMUL EDX,EDX,0x3c
	0002fe07:SUB EAX,EDX
	0002fe09:MOV dword ptr [RBP + -0x664],EAX
	0002fe0f:MOV EAX,dword ptr [RBP + -0x66c]
	0002fe15:MOVSXD RDX,EAX
	0002fe18:IMUL RDX,RDX,-0x77777777
	0002fe1f:SHR RDX,0x20
	0002fe23:ADD EDX,EAX
	0002fe25:SAR EDX,0x5
	0002fe28:MOV ECX,EAX
	0002fe2a:SAR ECX,0x1f
	0002fe2d:SUB EDX,ECX
	0002fe2f:IMUL EDX,EDX,0x3c
	0002fe32:SUB EAX,EDX
	0002fe34:MOV dword ptr [RBP + -0x660],EAX
	0002fe3a:CMP qword ptr [RBP + -0x628],0x3
	0002fe42:JZ 0x0002ff2b
	0002fe48:CMP qword ptr [RBP + -0x628],0x3
	0002fe50:JA 0x0002ffb5
	0002fe56:CMP qword ptr [RBP + -0x628],0x2
	0002fe5e:JZ 0x0002feed
	0002fe64:CMP qword ptr [RBP + -0x628],0x2
	0002fe6c:JA 0x0002ffb5
	0002fe72:CMP qword ptr [RBP + -0x628],0x0
	0002fe7a:JZ 0x0002fe8b
	0002fe7c:CMP qword ptr [RBP + -0x628],0x1
	0002fe84:JZ 0x0002febc
	0002fe86:JMP 0x0002ffb5
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
	0002fe9f:MOV EAX,dword ptr [RBP + -0x668]
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
	0002feb0:MOV dword ptr [RBP + -0x6a4],EAX
	0002feb6:JMP 0x0002e5c1
	0002febb:NOP
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
	0002fec6:MOV dword ptr [RBP + -0x6a0],0x4
	0002fed0:MOV EAX,dword ptr [RBP + -0x668]
	0002fed6:IMUL EDX,EAX,0x64
	0002fed9:MOV EAX,dword ptr [RBP + -0x664]
	0002fedf:ADD EAX,EDX
	0002fee1:MOV dword ptr [RBP + -0x6a4],EAX
	0002fee7:JMP 0x0002e5c1
	0002feec:NOP
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
	0002fef7:MOV dword ptr [RBP + -0x6a0],0x14
	0002ff01:MOV EAX,dword ptr [RBP + -0x668]
	0002ff07:IMUL EDX,EAX,0x2710
	0002ff0d:MOV EAX,dword ptr [RBP + -0x664]
	0002ff13:IMUL EAX,EAX,0x64
	0002ff16:ADD EDX,EAX
	0002ff18:MOV EAX,dword ptr [RBP + -0x660]
	0002ff1e:ADD EAX,EDX
	0002ff20:MOV dword ptr [RBP + -0x6a4],EAX
	0002ff26:JMP 0x0002e5c1
	0002ff2b:CMP dword ptr [RBP + -0x660],0x0
	0002ff32:JNZ 0x0002feec
	0002ff34:CMP dword ptr [RBP + -0x664],0x0
	0002ff3b:JNZ 0x0002febb
	0002ff41:MOV dword ptr [RBP + -0x6ac],0x3
	0002ff4b:MOV dword ptr [RBP + -0x6a0],0x0
	0002ff55:MOV EAX,dword ptr [RBP + -0x668]
	0002ff5b:MOV dword ptr [RBP + -0x6a4],EAX
	0002ff61:JMP 0x0002e5c1
	0002ff66:SUB qword ptr [RBP + -0x640],0x1
	0002ff6e:JMP 0x0002ffb6
	0002ff70:NOP
	0002ff71:JMP 0x0002ffb6
	0002ff73:NOP
	0002ff74:JMP 0x0002ffb6
	0002ff76:NOP
	0002ff77:JMP 0x0002ffb6
	0002ff79:NOP
	0002ff7a:JMP 0x0002ffb6
	0002ff7c:NOP
	0002ff7d:JMP 0x0002ffb6
	0002ff7f:NOP
	0002ff80:JMP 0x0002ffb6
	0002ff82:NOP
	0002ff83:JMP 0x0002ffb6
	0002ff85:NOP
	0002ff86:JMP 0x0002ffb6
	0002ff88:NOP
	0002ff89:JMP 0x0002ffb6
	0002ff8b:NOP
	0002ff8c:JMP 0x0002ffb6
	0002ff8e:NOP
	0002ff8f:JMP 0x0002ffb6
	0002ff91:NOP
	0002ff92:JMP 0x0002ffb6
	0002ff94:NOP
	0002ff95:JMP 0x0002ffb6
	0002ff97:NOP
	0002ff98:JMP 0x0002ffb6
	0002ff9a:NOP
	0002ff9b:JMP 0x0002ffb6
	0002ff9d:NOP
	0002ff9e:JMP 0x0002ffb6
	0002ffa0:NOP
	0002ffa1:JMP 0x0002ffb6
	0002ffa3:NOP
	0002ffa4:JMP 0x0002ffb6
	0002ffa6:NOP
	0002ffa7:JMP 0x0002ffb6
	0002ffa9:NOP
	0002ffaa:JMP 0x0002ffb6
	0002ffac:NOP
	0002ffad:JMP 0x0002ffb6
	0002ffaf:NOP
	0002ffb0:JMP 0x0002ffb6
	0002ffb2:NOP
	0002ffb3:JMP 0x0002ffb6
	0002ffb5:NOP
	0002ffb6:MOV dword ptr [RBP + -0x684],0x1
	0002ffc0:JMP 0x0002ffca
	0002ffc2:NOP
	0002ffc3:ADD dword ptr [RBP + -0x684],0x1
	0002ffca:MOV EAX,0x1
	0002ffcf:SUB EAX,dword ptr [RBP + -0x684]
	0002ffd5:MOVSXD RDX,EAX
	0002ffd8:MOV RAX,qword ptr [RBP + -0x640]
	0002ffdf:ADD RAX,RDX
	0002ffe2:MOVZX EAX,byte ptr [RAX]
	0002ffe5:CMP AL,0x25
	0002ffe7:JNZ 0x0002ffc2
	0002ffe9:MOV EAX,dword ptr [RBP + -0x684]
	0002ffef:CDQE
	0002fff1:MOV qword ptr [RBP + -0x4a0],RAX
	0002fff8:MOV EAX,dword ptr [RBP + -0x69c]
	0002fffe:MOV EDX,0x0
	00030003:TEST EAX,EAX
	00030005:CMOVS EAX,EDX
	00030008:CDQE
	0003000a:MOV qword ptr [RBP + -0x498],RAX
	00030011:MOV RDX,qword ptr [RBP + -0x4a0]
	00030018:MOV RAX,qword ptr [RBP + -0x498]
	0003001f:CMP RDX,RAX
	00030022:CMOVNC RAX,RDX
	00030026:MOV qword ptr [RBP + -0x490],RAX
	0003002d:MOV RAX,qword ptr [RBP + -0x6d0]
	00030034:SUB RAX,qword ptr [RBP + -0x650]
	0003003b:CMP qword ptr [RBP + -0x490],RAX
	00030042:JC 0x0003004e
	00030044:MOV EAX,0x0
	00030049:JMP 0x000301f9
	0003004e:CMP qword ptr [RBP + -0x648],0x0
	00030056:JZ 0x000301a6
	0003005c:CMP dword ptr [RBP + -0x6ac],0x0
	00030063:JNZ 0x000300ec
	00030069:MOV RAX,qword ptr [RBP + -0x4a0]
	00030070:CMP RAX,qword ptr [RBP + -0x498]
	00030077:JNC 0x000300ec
	00030079:MOV EAX,dword ptr [RBP + -0x69c]
	0003007f:CDQE
	00030081:SUB RAX,qword ptr [RBP + -0x4a0]
	00030088:MOV qword ptr [RBP + -0x488],RAX
	0003008f:CMP dword ptr [RBP + -0x6b4],0x30
	00030096:JNZ 0x000300c3
	00030098:MOV RDX,qword ptr [RBP + -0x488]
	0003009f:MOV RAX,qword ptr [RBP + -0x648]
	000300a6:MOV ESI,0x30
	000300ab:MOV RDI,RAX
	000300ae:CALL 0x00005c10
	000300b3:MOV RAX,qword ptr [RBP + -0x488]
	000300ba:ADD qword ptr [RBP + -0x648],RAX
	000300c1:JMP 0x000300ec
	000300c3:MOV RDX,qword ptr [RBP + -0x488]
	000300ca:MOV RAX,qword ptr [RBP + -0x648]
	000300d1:MOV ESI,0x20
	000300d6:MOV RDI,RAX
	000300d9:CALL 0x00005c10
	000300de:MOV RAX,qword ptr [RBP + -0x488]
	000300e5:ADD qword ptr [RBP + -0x648],RAX
	000300ec:CMP byte ptr [RBP + -0x6bc],0x0
	000300f3:JZ 0x00030129
	000300f5:MOV EAX,0x1
	000300fa:SUB EAX,dword ptr [RBP + -0x684]
	00030100:MOVSXD RDX,EAX
	00030103:MOV RAX,qword ptr [RBP + -0x640]
	0003010a:LEA RCX,[RDX + RAX*0x1]
	0003010e:MOV RDX,qword ptr [RBP + -0x4a0]
	00030115:MOV RAX,qword ptr [RBP + -0x648]
	0003011c:MOV RSI,RCX
	0003011f:MOV RDI,RAX
	00030122:CALL 0x0002d8cc
	00030127:JMP 0x00030198
	00030129:CMP byte ptr [RBP + -0x6bb],0x0
	00030130:JZ 0x00030166
	00030132:MOV EAX,0x1
	00030137:SUB EAX,dword ptr [RBP + -0x684]
	0003013d:MOVSXD RDX,EAX
	00030140:MOV RAX,qword ptr [RBP + -0x640]
	00030147:LEA RCX,[RDX + RAX*0x1]
	0003014b:MOV RDX,qword ptr [RBP + -0x4a0]
	00030152:MOV RAX,qword ptr [RBP + -0x648]
	00030159:MOV RSI,RCX
	0003015c:MOV RDI,RAX
	0003015f:CALL 0x0002d924
	00030164:JMP 0x00030198
	00030166:MOV EAX,0x1
	0003016b:SUB EAX,dword ptr [RBP + -0x684]
	00030171:MOVSXD RDX,EAX
	00030174:MOV RAX,qword ptr [RBP + -0x640]
	0003017b:LEA RCX,[RDX + RAX*0x1]
	0003017f:MOV RDX,qword ptr [RBP + -0x4a0]
	00030186:MOV RAX,qword ptr [RBP + -0x648]
	0003018d:MOV RSI,RCX
	00030190:MOV RDI,RAX
	00030193:CALL 0x00005d90
	00030198:MOV RAX,qword ptr [RBP + -0x4a0]
	0003019f:ADD qword ptr [RBP + -0x648],RAX
	000301a6:MOV RAX,qword ptr [RBP + -0x490]
	000301ad:ADD qword ptr [RBP + -0x650],RAX
	000301b4:JMP 0x000301ba
	000301b6:NOP
	000301b7:JMP 0x000301ba
	000301b9:NOP
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
1006: iVar4 = (int)tp->tm_gmtoff;
	0002fd51:MOV RAX,qword ptr [RAX + 0x28]
	0002fd55:MOV dword ptr [RBP + -0x66c],EAX
END_OF_LINE
----------------------------------------------
1007: if ((iVar4 < 0) || ((iVar4 == 0 && (*zone == '-')))) {
	0002fd5b:CMP dword ptr [RBP + -0x66c],0x0
	0002fd62:JS 0x0002fd7b
	0002fd64:CMP dword ptr [RBP + -0x66c],0x0
	0002fd6b:JNZ 0x0002fd82
	0002fd6d:MOV RAX,qword ptr [RBP + -0x658]
	0002fd74:MOVZX EAX,byte ptr [RAX]
	0002fd77:CMP AL,0x2d
	0002fd79:JNZ 0x0002fd82
END_OF_LINE
----------------------------------------------
1008: negative_number = true;
	0002fd7b:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
1011: negative_number = false;
	0002fd82:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
1013: u_number_value = iVar4 / 0xe10;
	0002fdaa:SAR EDX,0xb
END_OF_LINE
----------------------------------------------
1014: iVar6 = (iVar4 / 0x3c) % 0x3c;
	0002fdd2:SAR EDX,0x5
	0002fdd5:SAR EAX,0x1f
	0002fdd8:MOV ECX,EAX
	0002fdda:MOV EAX,EDX
	0002fddc:SUB EAX,ECX
	0002fdde:MOVSXD RDX,EAX
	0002fde1:IMUL RDX,RDX,-0x77777777
	0002fde8:SHR RDX,0x20
	0002fdec:ADD EDX,EAX
	0002fdee:SAR EDX,0x5
	0002fdf1:MOV ECX,EAX
	0002fdf3:SAR ECX,0x1f
	0002fdf6:SUB EDX,ECX
	0002fdf8:MOV dword ptr [RBP + -0x664],EDX
	0002fdfe:MOV EDX,dword ptr [RBP + -0x664]
	0002fe04:IMUL EDX,EDX,0x3c
	0002fe07:SUB EAX,EDX
END_OF_LINE
----------------------------------------------
1015: if (colons != 3) {
	0002fe3a:CMP qword ptr [RBP + -0x628],0x3
	0002fe42:JZ 0x0002ff2b
END_OF_LINE
----------------------------------------------
1016: if (colons < 4) {
	0002fe50:JA 0x0002ffb5
END_OF_LINE
----------------------------------------------
1017: if (colons == 2) goto LAB_0002feed;
	0002fe56:CMP qword ptr [RBP + -0x628],0x2
	0002fe5e:JZ 0x0002feed
	0002fe64:CMP qword ptr [RBP + -0x628],0x2
	0002fe6c:JA 0x0002ffb5
	0002fe72:CMP qword ptr [RBP + -0x628],0x0
	0002fe7a:JZ 0x0002fe8b
	0002fe7c:CMP qword ptr [RBP + -0x628],0x1
	0002fe84:JZ 0x0002febc
	0002fe86:JMP 0x0002ffb5
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
	0002fe9f:MOV EAX,dword ptr [RBP + -0x668]
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
	0002feb0:MOV dword ptr [RBP + -0x6a4],EAX
	0002feb6:JMP 0x0002e5c1
	0002febb:NOP
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
	0002fec6:MOV dword ptr [RBP + -0x6a0],0x4
	0002fed0:MOV EAX,dword ptr [RBP + -0x668]
	0002fed6:IMUL EDX,EAX,0x64
	0002fed9:MOV EAX,dword ptr [RBP + -0x664]
	0002fedf:ADD EAX,EDX
	0002fee1:MOV dword ptr [RBP + -0x6a4],EAX
	0002fee7:JMP 0x0002e5c1
	0002feec:NOP
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
END_OF_LINE
----------------------------------------------
1018: if (colons < 3) {
	0002fe6c:JA 0x0002ffb5
END_OF_LINE
----------------------------------------------
1019: if (colons == 0) {
	0002fe72:CMP qword ptr [RBP + -0x628],0x0
	0002fe7a:JZ 0x0002fe8b
END_OF_LINE
----------------------------------------------
1020: digits = 5;
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
END_OF_LINE
----------------------------------------------
1021: tz_colon_mask = 0;
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
END_OF_LINE
----------------------------------------------
1022: u_number_value = iVar6 + u_number_value * 100;
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
1023: goto LAB_0002e5c1;
	0002e5c1:MOV byte ptr [RBP + -0x6bd],0x1
END_OF_LINE
----------------------------------------------
1025: if (colons == 1) goto LAB_0002febc;
	0002fe7c:CMP qword ptr [RBP + -0x628],0x1
	0002fe84:JZ 0x0002febc
	0002fe86:JMP 0x0002ffb5
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
	0002fe9f:MOV EAX,dword ptr [RBP + -0x668]
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
	0002feb0:MOV dword ptr [RBP + -0x6a4],EAX
	0002feb6:JMP 0x0002e5c1
	0002febb:NOP
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
END_OF_LINE
----------------------------------------------
1030: if (iVar4 % 0x3c == 0) {
	0002fe32:SUB EAX,EDX
	0002fe34:MOV dword ptr [RBP + -0x660],EAX
	0002fe3a:CMP qword ptr [RBP + -0x628],0x3
	0002fe42:JZ 0x0002ff2b
	0002fe48:CMP qword ptr [RBP + -0x628],0x3
	0002fe50:JA 0x0002ffb5
	0002fe56:CMP qword ptr [RBP + -0x628],0x2
	0002fe5e:JZ 0x0002feed
	0002fe64:CMP qword ptr [RBP + -0x628],0x2
	0002fe6c:JA 0x0002ffb5
	0002fe72:CMP qword ptr [RBP + -0x628],0x0
	0002fe7a:JZ 0x0002fe8b
	0002fe7c:CMP qword ptr [RBP + -0x628],0x1
	0002fe84:JZ 0x0002febc
	0002fe86:JMP 0x0002ffb5
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
	0002fe9f:MOV EAX,dword ptr [RBP + -0x668]
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
	0002feb0:MOV dword ptr [RBP + -0x6a4],EAX
	0002feb6:JMP 0x0002e5c1
	0002febb:NOP
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
	0002fec6:MOV dword ptr [RBP + -0x6a0],0x4
	0002fed0:MOV EAX,dword ptr [RBP + -0x668]
	0002fed6:IMUL EDX,EAX,0x64
	0002fed9:MOV EAX,dword ptr [RBP + -0x664]
	0002fedf:ADD EAX,EDX
	0002fee1:MOV dword ptr [RBP + -0x6a4],EAX
	0002fee7:JMP 0x0002e5c1
	0002feec:NOP
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
	0002fef7:MOV dword ptr [RBP + -0x6a0],0x14
	0002ff01:MOV EAX,dword ptr [RBP + -0x668]
	0002ff07:IMUL EDX,EAX,0x2710
	0002ff0d:MOV EAX,dword ptr [RBP + -0x664]
	0002ff13:IMUL EAX,EAX,0x64
	0002ff16:ADD EDX,EAX
	0002ff18:MOV EAX,dword ptr [RBP + -0x660]
	0002ff1e:ADD EAX,EDX
	0002ff20:MOV dword ptr [RBP + -0x6a4],EAX
	0002ff26:JMP 0x0002e5c1
	0002ff2b:CMP dword ptr [RBP + -0x660],0x0
	0002ff32:JNZ 0x0002feec
END_OF_LINE
----------------------------------------------
1031: if (iVar6 == 0) {
	0002ff34:CMP dword ptr [RBP + -0x664],0x0
	0002ff3b:JNZ 0x0002febb
END_OF_LINE
----------------------------------------------
1032: digits = 3;
	0002ff41:MOV dword ptr [RBP + -0x6ac],0x3
END_OF_LINE
----------------------------------------------
1033: tz_colon_mask = 0;
	0002ff4b:MOV dword ptr [RBP + -0x6a0],0x0
END_OF_LINE
----------------------------------------------
1036: LAB_0002febc:
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
END_OF_LINE
----------------------------------------------
1037: digits = 6;
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
END_OF_LINE
----------------------------------------------
1038: tz_colon_mask = 4;
	0002fec6:MOV dword ptr [RBP + -0x6a0],0x4
END_OF_LINE
----------------------------------------------
1039: u_number_value = iVar6 + u_number_value * 100;
	0002fed6:IMUL EDX,EAX,0x64
	0002fed9:MOV EAX,dword ptr [RBP + -0x664]
	0002fedf:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
1043: LAB_0002feed:
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
END_OF_LINE
----------------------------------------------
1044: digits = 9;
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
END_OF_LINE
----------------------------------------------
1045: tz_colon_mask = 0x14;
	0002fef7:MOV dword ptr [RBP + -0x6a0],0x14
END_OF_LINE
----------------------------------------------
1046: u_number_value = iVar4 % 0x3c + u_number_value * 10000 + iVar6 * 100;
	0002fe32:SUB EAX,EDX
	0002fe34:MOV dword ptr [RBP + -0x660],EAX
	0002fe3a:CMP qword ptr [RBP + -0x628],0x3
	0002fe42:JZ 0x0002ff2b
	0002fe48:CMP qword ptr [RBP + -0x628],0x3
	0002fe50:JA 0x0002ffb5
	0002fe56:CMP qword ptr [RBP + -0x628],0x2
	0002fe5e:JZ 0x0002feed
	0002fe64:CMP qword ptr [RBP + -0x628],0x2
	0002fe6c:JA 0x0002ffb5
	0002fe72:CMP qword ptr [RBP + -0x628],0x0
	0002fe7a:JZ 0x0002fe8b
	0002fe7c:CMP qword ptr [RBP + -0x628],0x1
	0002fe84:JZ 0x0002febc
	0002fe86:JMP 0x0002ffb5
	0002fe8b:MOV dword ptr [RBP + -0x6ac],0x5
	0002fe95:MOV dword ptr [RBP + -0x6a0],0x0
	0002fe9f:MOV EAX,dword ptr [RBP + -0x668]
	0002fea5:IMUL EDX,EAX,0x64
	0002fea8:MOV EAX,dword ptr [RBP + -0x664]
	0002feae:ADD EAX,EDX
	0002feb0:MOV dword ptr [RBP + -0x6a4],EAX
	0002feb6:JMP 0x0002e5c1
	0002febb:NOP
	0002febc:MOV dword ptr [RBP + -0x6ac],0x6
	0002fec6:MOV dword ptr [RBP + -0x6a0],0x4
	0002fed0:MOV EAX,dword ptr [RBP + -0x668]
	0002fed6:IMUL EDX,EAX,0x64
	0002fed9:MOV EAX,dword ptr [RBP + -0x664]
	0002fedf:ADD EAX,EDX
	0002fee1:MOV dword ptr [RBP + -0x6a4],EAX
	0002fee7:JMP 0x0002e5c1
	0002feec:NOP
	0002feed:MOV dword ptr [RBP + -0x6ac],0x9
	0002fef7:MOV dword ptr [RBP + -0x6a0],0x14
	0002ff01:MOV EAX,dword ptr [RBP + -0x668]
	0002ff07:IMUL EDX,EAX,0x2710
	0002ff0d:MOV EAX,dword ptr [RBP + -0x664]
	0002ff13:IMUL EAX,EAX,0x64
	0002ff16:ADD EDX,EAX
	0002ff18:MOV EAX,dword ptr [RBP + -0x660]
	0002ff1e:ADD EAX,EDX
END_OF_LINE
----------------------------------------------
1048: LAB_0002e5c1:
	0002e5c1:MOV byte ptr [RBP + -0x6bd],0x1
END_OF_LINE
----------------------------------------------
1049: bVar1 = true;
	0002e5c1:MOV byte ptr [RBP + -0x6bd],0x1
END_OF_LINE
----------------------------------------------
1050: goto LAB_0002e615;
	0002e615:CMP dword ptr [RBP + -0x6b0],0x4f
END_OF_LINE
----------------------------------------------
1052: flen = 1;
	0002ffb6:MOV dword ptr [RBP + -0x684],0x1
END_OF_LINE
----------------------------------------------
1053: while (f[1 - flen] != '%') {
	0002ffcf:SUB EAX,dword ptr [RBP + -0x684]
	0002ffd5:MOVSXD RDX,EAX
	0002ffd8:MOV RAX,qword ptr [RBP + -0x640]
	0002ffdf:ADD RAX,RDX
	0002ffe2:MOVZX EAX,byte ptr [RAX]
	0002ffe5:CMP AL,0x25
	0002ffe7:JNZ 0x0002ffc2
END_OF_LINE
----------------------------------------------
1054: flen = flen + 1;
	0002ffc3:ADD dword ptr [RBP + -0x684],0x1
END_OF_LINE
----------------------------------------------
1056: uVar11 = (ulong)flen;
	0002ffef:CDQE
END_OF_LINE
----------------------------------------------
1057: iVar4 = width;
	00030005:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
1058: if (width < 0) {
	00030003:TEST EAX,EAX
	00030005:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
1059: iVar4 = 0;
	00030005:CMOVS EAX,EDX
END_OF_LINE
----------------------------------------------
1061: uVar12 = (ulong)iVar4;
	00030008:CDQE
END_OF_LINE
----------------------------------------------
1062: uVar8 = uVar12;
	00030022:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
1063: if (uVar12 <= uVar11) {
	0003001f:CMP RDX,RAX
	00030022:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
1064: uVar8 = uVar11;
	00030022:CMOVNC RAX,RDX
END_OF_LINE
----------------------------------------------
1066: if (maxsize - i <= uVar8) {
	00030034:SUB RAX,qword ptr [RBP + -0x650]
	0003003b:CMP qword ptr [RBP + -0x490],RAX
	00030042:JC 0x0003004e
END_OF_LINE
----------------------------------------------
1067: i = 0;
	00030044:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
1068: goto LAB_000301f9;
	000301f9:MOV RDX,qword ptr [RBP + -0x18]
END_OF_LINE
----------------------------------------------
1070: if (p != (char *)0x0) {
	0003004e:CMP qword ptr [RBP + -0x648],0x0
	00030056:JZ 0x000301a6
END_OF_LINE
----------------------------------------------
1071: if (uVar11 < uVar12) {
	00030070:CMP RAX,qword ptr [RBP + -0x498]
	00030077:JNC 0x000300ec
END_OF_LINE
----------------------------------------------
1072: sVar13 = (long)width - uVar11;
	0003007f:CDQE
	00030081:SUB RAX,qword ptr [RBP + -0x4a0]
END_OF_LINE
----------------------------------------------
1073: if (pad == 0x30) {
	0003008f:CMP dword ptr [RBP + -0x6b4],0x30
	00030096:JNZ 0x000300c3
END_OF_LINE
----------------------------------------------
1074: memset(p,0x30,sVar13);
	000300ae:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
1075: p = p + sVar13;
	000300ba:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
1078: memset(p,0x20,sVar13);
	000300d9:CALL 0x00005c10
END_OF_LINE
----------------------------------------------
1079: p = p + sVar13;
	000300e5:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
1082: if (to_uppcase == false) {
	00030129:CMP byte ptr [RBP + -0x6bb],0x0
	00030130:JZ 0x00030166
END_OF_LINE
----------------------------------------------
1083: memcpy(p,f + (1 - flen),uVar11);
	0003016b:SUB EAX,dword ptr [RBP + -0x684]
	00030171:MOVSXD RDX,EAX
	00030174:MOV RAX,qword ptr [RBP + -0x640]
	0003017b:LEA RCX,[RDX + RAX*0x1]
	0003017f:MOV RDX,qword ptr [RBP + -0x4a0]
	00030186:MOV RAX,qword ptr [RBP + -0x648]
	0003018d:MOV RSI,RCX
	00030190:MOV RDI,RAX
	00030193:CALL 0x00005d90
END_OF_LINE
----------------------------------------------
1086: memcpy_uppcase(p,f + (1 - flen),uVar11);
	00030137:SUB EAX,dword ptr [RBP + -0x684]
	0003013d:MOVSXD RDX,EAX
	00030140:MOV RAX,qword ptr [RBP + -0x640]
	00030147:LEA RCX,[RDX + RAX*0x1]
	0003014b:MOV RDX,qword ptr [RBP + -0x4a0]
	00030152:MOV RAX,qword ptr [RBP + -0x648]
	00030159:MOV RSI,RCX
	0003015c:MOV RDI,RAX
	0003015f:CALL 0x0002d924
END_OF_LINE
----------------------------------------------
1088: p = p + uVar11;
	0003019f:ADD qword ptr [RBP + -0x648],RAX
END_OF_LINE
----------------------------------------------
1090: i = i + uVar8;
	000301ad:ADD qword ptr [RBP + -0x650],RAX
END_OF_LINE
----------------------------------------------
1091: LAB_000301ba:
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
1092: f = f + 1;
	000301ba:ADD qword ptr [RBP + -0x640],0x1
END_OF_LINE
----------------------------------------------
1093: goto LAB_000301c2;
	000301c2:MOV RAX,qword ptr [RBP + -0x640]
END_OF_LINE



Function: atexit
----------------------------------------------
7: iVar1 = __cxa_atexit(__func,0,__dso_handle);
	0003022d:JMP 0x00005fb0
END_OF_LINE
----------------------------------------------
8: return iVar1;
	0003022d:JMP 0x00005fb0
END_OF_LINE



Function: _fini
----------------------------------------------
5: return;
	00030240:RET
END_OF_LINE



Function: getenv
----------------------------------------------
10: halt_baddata();



Function: sigprocmask
----------------------------------------------
10: halt_baddata();



Function: raise
----------------------------------------------
10: halt_baddata();



Function: posix_spawnattr_setsigmask
----------------------------------------------
10: halt_baddata();



Function: utimensat
----------------------------------------------
10: halt_baddata();



Function: putchar
----------------------------------------------
10: halt_baddata();



Function: posix_spawn_file_actions_init
----------------------------------------------
10: halt_baddata();



Function: __libc_start_main
----------------------------------------------
9: halt_baddata();



Function: abort
----------------------------------------------
10: halt_baddata();



Function: __errno_location
----------------------------------------------
10: halt_baddata();



Function: unlink
----------------------------------------------
10: halt_baddata();



Function: strncmp
----------------------------------------------
10: halt_baddata();



Function: _ITM_deregisterTMCloneTable
----------------------------------------------
8: halt_baddata();



Function: localtime_r
----------------------------------------------
10: halt_baddata();



Function: strcpy
----------------------------------------------
10: halt_baddata();



Function: __isoc99_fscanf
----------------------------------------------
9: halt_baddata();



Function: mkdir
----------------------------------------------
10: halt_baddata();



Function: toupper
----------------------------------------------
10: halt_baddata();



Function: unlinkat
----------------------------------------------
10: halt_baddata();



Function: puts
----------------------------------------------
10: halt_baddata();



Function: ferror
----------------------------------------------
10: halt_baddata();



Function: getc_unlocked
----------------------------------------------
10: halt_baddata();



Function: isatty
----------------------------------------------
10: halt_baddata();



Function: sigaction
----------------------------------------------
10: halt_baddata();



Function: fread
----------------------------------------------
10: halt_baddata();



Function: faccessat
----------------------------------------------
10: halt_baddata();



Function: readlink
----------------------------------------------
10: halt_baddata();



Function: fcntl
----------------------------------------------
10: halt_baddata();



Function: clock_gettime
----------------------------------------------
10: halt_baddata();



Function: setenv
----------------------------------------------
10: halt_baddata();



Function: posix_spawnattr_destroy
----------------------------------------------
10: halt_baddata();



Function: write
----------------------------------------------
10: halt_baddata();



Function: getpid
----------------------------------------------
10: halt_baddata();



Function: pathconf
----------------------------------------------
10: halt_baddata();



Function: fclose
----------------------------------------------
10: halt_baddata();



Function: posix_spawn_file_actions_destroy
----------------------------------------------
10: halt_baddata();



Function: opendir
----------------------------------------------
10: halt_baddata();



Function: rmdir
----------------------------------------------
10: halt_baddata();



Function: __ctype_get_mb_cur_max
----------------------------------------------
10: halt_baddata();



Function: strlen
----------------------------------------------
10: halt_baddata();



Function: openat
----------------------------------------------
10: halt_baddata();



Function: chdir
----------------------------------------------
10: halt_baddata();



Function: __stack_chk_fail
----------------------------------------------
9: halt_baddata();



Function: getopt_long
----------------------------------------------
9: halt_baddata();



Function: setbuf
----------------------------------------------
10: halt_baddata();



Function: mbrtowc
----------------------------------------------
10: halt_baddata();



Function: system
----------------------------------------------
10: halt_baddata();



Function: dup2
----------------------------------------------
10: halt_baddata();



Function: strchr
----------------------------------------------
10: halt_baddata();



Function: printf
----------------------------------------------
10: halt_baddata();



Function: symlink
----------------------------------------------
10: halt_baddata();



Function: snprintf
----------------------------------------------
10: halt_baddata();



Function: strrchr
----------------------------------------------
10: halt_baddata();



Function: gmtime_r
----------------------------------------------
10: halt_baddata();



Function: dup
----------------------------------------------
10: halt_baddata();



Function: lseek
----------------------------------------------
10: halt_baddata();



Function: gettimeofday
----------------------------------------------
10: halt_baddata();



Function: __assert_fail
----------------------------------------------
10: halt_baddata();



Function: fputs
----------------------------------------------
10: halt_baddata();



Function: memset
----------------------------------------------
10: halt_baddata();



Function: geteuid
----------------------------------------------
10: halt_baddata();



Function: close
----------------------------------------------
10: halt_baddata();



Function: rewinddir
----------------------------------------------
10: halt_baddata();



Function: closedir
----------------------------------------------
10: halt_baddata();



Function: fputc
----------------------------------------------
10: halt_baddata();



Function: memchr
----------------------------------------------
10: halt_baddata();



Function: read
----------------------------------------------
10: halt_baddata();



Function: lstat
----------------------------------------------
10: halt_baddata();



Function: strndup
----------------------------------------------
10: halt_baddata();



Function: memcmp
----------------------------------------------
10: halt_baddata();



Function: posix_spawnattr_init
----------------------------------------------
10: halt_baddata();



Function: calloc
----------------------------------------------
10: halt_baddata();



Function: strcmp
----------------------------------------------
10: halt_baddata();



Function: putc
----------------------------------------------
10: halt_baddata();



Function: signal
----------------------------------------------
10: halt_baddata();



Function: readlinkat
----------------------------------------------
10: halt_baddata();



Function: dirfd
----------------------------------------------
10: halt_baddata();



Function: fprintf
----------------------------------------------
10: halt_baddata();



Function: syscall
----------------------------------------------
10: halt_baddata();



Function: sigemptyset
----------------------------------------------
10: halt_baddata();



Function: mkdirat
----------------------------------------------
10: halt_baddata();



Function: ftell
----------------------------------------------
10: halt_baddata();



Function: __gmon_start__
----------------------------------------------
8: halt_baddata();



Function: stat
----------------------------------------------
10: halt_baddata();



Function: memcpy
----------------------------------------------
10: halt_baddata();



Function: tzset
----------------------------------------------
10: halt_baddata();



Function: kill
----------------------------------------------
10: halt_baddata();



Function: fileno
----------------------------------------------
10: halt_baddata();



Function: readdir
----------------------------------------------
10: halt_baddata();



Function: tolower
----------------------------------------------
10: halt_baddata();



Function: malloc
----------------------------------------------
10: halt_baddata();



Function: fflush
----------------------------------------------
10: halt_baddata();



Function: fchmodat
----------------------------------------------
10: halt_baddata();



Function: nl_langinfo
----------------------------------------------
10: halt_baddata();



Function: ungetc
----------------------------------------------
10: halt_baddata();



Function: lchown
----------------------------------------------
10: halt_baddata();



Function: getegid
----------------------------------------------
10: halt_baddata();



Function: mktime
----------------------------------------------
10: halt_baddata();



Function: posix_spawn_file_actions_addopen
----------------------------------------------
12: halt_baddata();



Function: posix_spawnp
----------------------------------------------
11: halt_baddata();



Function: fseek
----------------------------------------------
10: halt_baddata();



Function: realloc
----------------------------------------------
10: halt_baddata();



Function: fdopen
----------------------------------------------
10: halt_baddata();



Function: setlocale
----------------------------------------------
10: halt_baddata();



Function: timegm
----------------------------------------------
10: halt_baddata();



Function: chmod
----------------------------------------------
10: halt_baddata();



Function: strftime
----------------------------------------------
10: halt_baddata();



Function: memmove
----------------------------------------------
10: halt_baddata();



Function: error
----------------------------------------------
9: halt_baddata();



Function: waitpid
----------------------------------------------
10: halt_baddata();



Function: open
----------------------------------------------
10: halt_baddata();



Function: access
----------------------------------------------
10: halt_baddata();



Function: fopen
----------------------------------------------
10: halt_baddata();



Function: perror
----------------------------------------------
10: halt_baddata();



Function: rename
----------------------------------------------
10: halt_baddata();



Function: fdopendir
----------------------------------------------
10: halt_baddata();



Function: vfprintf
----------------------------------------------
10: halt_baddata();



Function: unsetenv
----------------------------------------------
10: halt_baddata();



Function: __cxa_atexit
----------------------------------------------
9: halt_baddata();



Function: fchownat
----------------------------------------------
10: halt_baddata();



Function: renameat
----------------------------------------------
10: halt_baddata();



Function: sprintf
----------------------------------------------
10: halt_baddata();



Function: exit
----------------------------------------------
10: halt_baddata();



Function: posix_spawnattr_setflags
----------------------------------------------
10: halt_baddata();



Function: fwrite
----------------------------------------------
10: halt_baddata();



Function: getrlimit
----------------------------------------------
10: halt_baddata();



Function: _ITM_registerTMCloneTable
----------------------------------------------
8: halt_baddata();



Function: mbsinit
----------------------------------------------
10: halt_baddata();



Function: symlinkat
----------------------------------------------
10: halt_baddata();



Function: iswprint
----------------------------------------------
10: halt_baddata();



Function: fstat
----------------------------------------------
10: halt_baddata();



Function: getc
----------------------------------------------
10: halt_baddata();



Function: sigaddset
----------------------------------------------
10: halt_baddata();



Function: fstatat
----------------------------------------------
10: halt_baddata();



Function: __ctype_b_loc
----------------------------------------------
10: halt_baddata();



Function: __cxa_finalize
----------------------------------------------
9: halt_baddata();



Function: free
----------------------------------------------
10: halt_baddata();
